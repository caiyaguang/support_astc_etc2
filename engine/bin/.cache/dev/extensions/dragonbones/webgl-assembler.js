(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/webgl-assembler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Armature = require('./ArmatureDisplay');
        var RenderFlow = require('../../cocos2d/core/renderer/render-flow');
        var Material = require('../../cocos2d/core/assets/material/CCMaterial');
        var gfx = cc.gfx;
        var mat4 = cc.vmath.mat4;
        var NEED_NONE = 0;
        var NEED_COLOR = 1;
        var NEED_BATCH = 16;
        var NEED_COLOR_BATCH = 17;
        var _boneColor = cc.color(255, 0, 0, 255);
        var _slotColor = cc.color(0, 0, 255, 255);
        var _nodeR = void 0, _nodeG = void 0, _nodeB = void 0, _nodeA = void 0, _premultipliedAlpha = void 0, _multiply = void 0, _mustFlush = void 0, _buffer = void 0, _node = void 0, _renderer = void 0, _comp = void 0, _vfOffset = void 0, _indexOffset = void 0, _vertexOffset = void 0, _vertexCount = void 0, _indexCount = void 0, _x = void 0, _y = void 0, _c = void 0, _r = void 0, _g = void 0, _b = void 0, _a = void 0, _handleVal = void 0, _m00 = void 0, _m04 = void 0, _m12 = void 0, _m01 = void 0, _m05 = void 0, _m13 = void 0;
        function _getSlotMaterial(tex, blendMode) {
            if (!tex)
                return null;
            var src = void 0, dst = void 0;
            switch (blendMode) {
            case 1:
                src = _premultipliedAlpha ? cc.macro.ONE : cc.macro.SRC_ALPHA;
                dst = cc.macro.ONE;
                break;
            case 10:
                src = cc.macro.DST_COLOR;
                dst = cc.macro.ONE_MINUS_SRC_ALPHA;
                break;
            case 12:
                src = cc.macro.ONE;
                dst = cc.macro.ONE_MINUS_SRC_COLOR;
                break;
            case 0:
            default:
                src = _premultipliedAlpha ? cc.macro.ONE : cc.macro.SRC_ALPHA;
                dst = cc.macro.ONE_MINUS_SRC_ALPHA;
                break;
            }
            var useModel = !_comp.enableBatch;
            var key = tex.url + src + dst + useModel;
            var baseMaterial = _comp.sharedMaterials[0];
            if (!baseMaterial) {
                return null;
            }
            var materialCache = _comp._materialCache;
            var material = materialCache[key];
            if (!material) {
                var baseKey = baseMaterial._hash;
                if (!materialCache[baseKey]) {
                    material = baseMaterial;
                } else {
                    material = new cc.Material();
                    material.copy(baseMaterial);
                }
                material.define('_USE_MODEL', useModel);
                material.setProperty('texture', tex);
                var pass = material.effect.getDefaultTechnique().passes[0];
                pass.setBlend(true, gfx.BLEND_FUNC_ADD, src, dst, gfx.BLEND_FUNC_ADD, src, dst);
                materialCache[key] = material;
                material.updateHash(key);
            } else if (material.texture !== tex) {
                material.setProperty('texture', tex);
                material.updateHash(key);
            }
            return material;
        }
        function _handleColor(color, parentOpacity) {
            _a = color.a * parentOpacity * _nodeA;
            _multiply = _premultipliedAlpha ? _a / 255 : 1;
            _r = color.r * _nodeR * _multiply;
            _g = color.g * _nodeG * _multiply;
            _b = color.b * _nodeB * _multiply;
            _c = (_a << 24 >>> 0) + (_b << 16) + (_g << 8) + _r;
        }
        var armatureAssembler = {
            updateRenderData: function updateRenderData(comp, batchData) {
            },
            realTimeTraverse: function realTimeTraverse(armature, parentMat, parentOpacity) {
                var slots = armature._slots;
                var vbuf = void 0, ibuf = void 0, uintbuf = void 0;
                var material = void 0;
                var vertices = void 0, indices = void 0;
                var slotColor = void 0;
                var slot = void 0;
                var slotMat = void 0;
                var offsetInfo = void 0;
                for (var i = 0, l = slots.length; i < l; i++) {
                    slot = slots[i];
                    slotColor = slot._color;
                    if (!slot._visible || !slot._displayData)
                        continue;
                    if (parentMat) {
                        slot._mulMat(slot._worldMatrix, parentMat, slot._matrix);
                    } else {
                        mat4.copy(slot._worldMatrix, slot._matrix);
                    }
                    if (slot.childArmature) {
                        this.realTimeTraverse(slot.childArmature, slot._worldMatrix, parentOpacity * slotColor.a / 255);
                        continue;
                    }
                    material = _getSlotMaterial(slot.getTexture(), slot._blendMode);
                    if (!material) {
                        continue;
                    }
                    if (_mustFlush || material._hash !== _renderer.material._hash) {
                        _mustFlush = false;
                        _renderer._flush();
                        _renderer.node = _node;
                        _renderer.material = material;
                    }
                    _handleColor(slotColor, parentOpacity);
                    slotMat = slot._worldMatrix;
                    vertices = slot._localVertices;
                    _vertexCount = vertices.length >> 2;
                    indices = slot._indices;
                    _indexCount = indices.length;
                    offsetInfo = _buffer.request(_vertexCount, _indexCount);
                    _indexOffset = offsetInfo.indiceOffset;
                    _vfOffset = offsetInfo.byteOffset >> 2;
                    _vertexOffset = offsetInfo.vertexOffset;
                    vbuf = _buffer._vData;
                    ibuf = _buffer._iData;
                    uintbuf = _buffer._uintVData;
                    _m00 = slotMat.m00;
                    _m04 = slotMat.m04;
                    _m12 = slotMat.m12;
                    _m01 = slotMat.m01;
                    _m05 = slotMat.m05;
                    _m13 = slotMat.m13;
                    for (var vi = 0, vl = vertices.length; vi < vl;) {
                        _x = vertices[vi++];
                        _y = vertices[vi++];
                        vbuf[_vfOffset++] = _x * _m00 + _y * _m04 + _m12;
                        vbuf[_vfOffset++] = _x * _m01 + _y * _m05 + _m13;
                        vbuf[_vfOffset++] = vertices[vi++];
                        vbuf[_vfOffset++] = vertices[vi++];
                        uintbuf[_vfOffset++] = _c;
                    }
                    for (var ii = 0, il = indices.length; ii < il; ii++) {
                        ibuf[_indexOffset++] = _vertexOffset + indices[ii];
                    }
                }
            },
            cacheTraverse: function cacheTraverse(frame, parentMat) {
                if (!frame)
                    return;
                var segments = frame.segments;
                if (segments.length == 0)
                    return;
                var vbuf = void 0, ibuf = void 0, uintbuf = void 0;
                var material = void 0;
                var offsetInfo = void 0;
                var vertices = frame.vertices;
                var indices = frame.indices;
                var uintVert = frame.uintVert;
                var frameVFOffset = 0, frameIndexOffset = 0, segVFCount = 0;
                if (parentMat) {
                    _m00 = parentMat.m00;
                    _m04 = parentMat.m04;
                    _m12 = parentMat.m12;
                    _m01 = parentMat.m01;
                    _m05 = parentMat.m05;
                    _m13 = parentMat.m13;
                }
                var colorOffset = 0;
                var colors = frame.colors;
                var nowColor = colors[colorOffset++];
                var maxVFOffset = nowColor.vfOffset;
                _handleColor(nowColor, 1);
                for (var i = 0, n = segments.length; i < n; i++) {
                    var segInfo = segments[i];
                    material = _getSlotMaterial(segInfo.tex, segInfo.blendMode);
                    if (_mustFlush || material._hash !== _renderer.material._hash) {
                        _mustFlush = false;
                        _renderer._flush();
                        _renderer.node = _node;
                        _renderer.material = material;
                    }
                    _vertexCount = segInfo.vertexCount;
                    _indexCount = segInfo.indexCount;
                    offsetInfo = _buffer.request(_vertexCount, _indexCount);
                    _indexOffset = offsetInfo.indiceOffset;
                    _vertexOffset = offsetInfo.vertexOffset;
                    _vfOffset = offsetInfo.byteOffset >> 2;
                    vbuf = _buffer._vData;
                    ibuf = _buffer._iData;
                    uintbuf = _buffer._uintVData;
                    for (var ii = _indexOffset, il = _indexOffset + _indexCount; ii < il; ii++) {
                        ibuf[ii] = _vertexOffset + indices[frameIndexOffset++];
                    }
                    segVFCount = segInfo.vfCount;
                    switch (_handleVal) {
                    case NEED_COLOR:
                    case NEED_NONE:
                        vbuf.set(vertices.subarray(frameVFOffset, frameVFOffset + segVFCount), _vfOffset);
                        frameVFOffset += segVFCount;
                        break;
                    case NEED_BATCH:
                    case NEED_COLOR_BATCH:
                        for (var _ii = _vfOffset, _il = _vfOffset + segVFCount; _ii < _il;) {
                            _x = vertices[frameVFOffset++];
                            _y = vertices[frameVFOffset++];
                            vbuf[_ii++] = _x * _m00 + _y * _m04 + _m12;
                            vbuf[_ii++] = _x * _m01 + _y * _m05 + _m13;
                            vbuf[_ii++] = vertices[frameVFOffset++];
                            vbuf[_ii++] = vertices[frameVFOffset++];
                            uintbuf[_ii++] = uintVert[frameVFOffset++];
                        }
                        break;
                    }
                    if (!(_handleVal & NEED_COLOR))
                        continue;
                    var frameColorOffset = frameVFOffset - segVFCount;
                    for (var _ii2 = _vfOffset + 4, _il2 = _vfOffset + 4 + segVFCount; _ii2 < _il2; _ii2 += 5, frameColorOffset += 5) {
                        if (frameColorOffset >= maxVFOffset) {
                            nowColor = colors[colorOffset++];
                            _handleColor(nowColor, 1);
                            maxVFOffset = nowColor.vfOffset;
                        }
                        uintbuf[_ii2] = _c;
                    }
                }
            },
            fillBuffers: function fillBuffers(comp, renderer) {
                comp.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
                _mustFlush = true;
                _premultipliedAlpha = comp.premultipliedAlpha;
                _node = comp.node;
                _buffer = renderer._meshBuffer;
                _renderer = renderer;
                _comp = comp;
                _handleVal = 0;
                var nodeColor = _node._color;
                _nodeR = nodeColor.r / 255;
                _nodeG = nodeColor.g / 255;
                _nodeB = nodeColor.b / 255;
                _nodeA = nodeColor.a / 255;
                if (nodeColor._val !== 4294967295) {
                    _handleVal |= NEED_COLOR;
                }
                var worldMat = undefined;
                if (_comp.enableBatch) {
                    worldMat = _node._worldMatrix;
                    _mustFlush = false;
                    _handleVal |= NEED_BATCH;
                }
                if (comp.isAnimationCached()) {
                    this.cacheTraverse(comp._curFrame, worldMat);
                } else {
                    var armature = comp._armature;
                    if (!armature)
                        return;
                    this.realTimeTraverse(armature, worldMat, 1);
                    var graphics = comp._debugDraw;
                    if (comp.debugBones && graphics) {
                        graphics.clear();
                        graphics.lineWidth = 5;
                        graphics.strokeColor = _boneColor;
                        graphics.fillColor = _slotColor;
                        var bones = armature.getBones();
                        for (var i = 0, l = bones.length; i < l; i++) {
                            var bone = bones[i];
                            var boneLength = Math.max(bone.boneData.length, 5);
                            var startX = bone.globalTransformMatrix.tx;
                            var startY = -bone.globalTransformMatrix.ty;
                            var endX = startX + bone.globalTransformMatrix.a * boneLength;
                            var endY = startY - bone.globalTransformMatrix.b * boneLength;
                            graphics.moveTo(startX, startY);
                            graphics.lineTo(endX, endY);
                            graphics.stroke();
                        }
                    }
                }
                _node = undefined;
                _buffer = undefined;
                _renderer = undefined;
                _comp = undefined;
            }
        };
        module.exports = Armature._assembler = armatureAssembler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,