(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/ArmatureDisplay.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var RenderComponent = require('../../cocos2d/core/components/CCRenderComponent');
        var Material = require('../../cocos2d/core/assets/material/CCMaterial');
        var EventTarget = require('../../cocos2d/core/event/event-target');
        var Node = require('../../cocos2d/core/CCNode');
        var Graphics = require('../../cocos2d/core/graphics/graphics');
        var ArmatureCache = require('./ArmatureCache');
        var DefaultArmaturesEnum = cc.Enum({ 'default': -1 });
        var DefaultAnimsEnum = cc.Enum({ '<None>': 0 });
        var DefaultCacheMode = cc.Enum({ 'REALTIME': 0 });
        var AnimationCacheMode = cc.Enum({
            REALTIME: 0,
            SHARED_CACHE: 1,
            PRIVATE_CACHE: 2
        });
        function setEnumAttr(obj, propName, enumDef) {
            cc.Class.Attr.setClassAttr(obj, propName, 'type', 'Enum');
            cc.Class.Attr.setClassAttr(obj, propName, 'enumList', cc.Enum.getList(enumDef));
        }
        var ArmatureDisplay = cc.Class({
            name: 'dragonBones.ArmatureDisplay',
            extends: RenderComponent,
            editor: CC_EDITOR && { menu: 'i18n:MAIN_MENU.component.renderers/DragonBones' },
            statics: { AnimationCacheMode: AnimationCacheMode },
            properties: {
                _factory: {
                    default: null,
                    type: dragonBones.CCFactory,
                    serializable: false
                },
                dragonAsset: {
                    default: null,
                    type: dragonBones.DragonBonesAsset,
                    notify: function notify() {
                        this._refresh();
                        if (CC_EDITOR) {
                            this._defaultArmatureIndex = 0;
                            this._animationIndex = 0;
                        }
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.dragon_bones.dragon_bones_asset'
                },
                dragonAtlasAsset: {
                    default: null,
                    type: dragonBones.DragonBonesAtlasAsset,
                    notify: function notify() {
                        this._parseDragonAtlasAsset();
                        this._refresh();
                        this._activateMaterial();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.dragon_bones.dragon_bones_atlas_asset'
                },
                _armatureName: '',
                armatureName: {
                    get: function get() {
                        return this._armatureName;
                    },
                    set: function set(value) {
                        this._armatureName = value;
                        var animNames = this.getAnimationNames(this._armatureName);
                        if (!this.animationName || animNames.indexOf(this.animationName) < 0) {
                            if (CC_EDITOR) {
                                this.animationName = animNames[0];
                            } else {
                                this.animationName = '';
                            }
                        }
                        if (this._armature && !this.isAnimationCached()) {
                            this._factory._dragonBones.clock.remove(this._armature);
                        }
                        this._refresh();
                        if (this._armature && !this.isAnimationCached()) {
                            this._factory._dragonBones.clock.add(this._armature);
                        }
                    },
                    visible: false
                },
                _animationName: '',
                animationName: {
                    get: function get() {
                        return this._animationName;
                    },
                    set: function set(value) {
                        this._animationName = value;
                    },
                    visible: false
                },
                _defaultArmatureIndex: {
                    default: 0,
                    notify: function notify() {
                        var armatureName = '';
                        if (this.dragonAsset) {
                            var armaturesEnum = void 0;
                            if (this.dragonAsset) {
                                armaturesEnum = this.dragonAsset.getArmatureEnum();
                            }
                            if (!armaturesEnum) {
                                return cc.errorID(7400, this.name);
                            }
                            armatureName = armaturesEnum[this._defaultArmatureIndex];
                        }
                        if (armatureName !== undefined) {
                            this.armatureName = armatureName;
                        } else {
                            cc.errorID(7401, this.name);
                        }
                    },
                    type: DefaultArmaturesEnum,
                    visible: true,
                    editorOnly: true,
                    animatable: false,
                    displayName: 'Armature',
                    tooltip: CC_DEV && 'i18n:COMPONENT.dragon_bones.armature_name'
                },
                _animationIndex: {
                    default: 0,
                    notify: function notify() {
                        if (this._animationIndex === 0) {
                            this.animationName = '';
                            return;
                        }
                        var animsEnum = void 0;
                        if (this.dragonAsset) {
                            animsEnum = this.dragonAsset.getAnimsEnum(this.armatureName);
                        }
                        if (!animsEnum) {
                            return;
                        }
                        var animName = animsEnum[this._animationIndex];
                        if (animName !== undefined) {
                            this.playAnimation(animName, this.playTimes);
                        } else {
                            cc.errorID(7402, this.name);
                        }
                    },
                    type: DefaultAnimsEnum,
                    visible: true,
                    editorOnly: true,
                    displayName: 'Animation',
                    tooltip: CC_DEV && 'i18n:COMPONENT.dragon_bones.animation_name'
                },
                _preCacheMode: -1,
                _cacheMode: AnimationCacheMode.REALTIME,
                _defaultCacheMode: {
                    default: 0,
                    type: AnimationCacheMode,
                    notify: function notify() {
                        this.setAnimationCacheMode(this._defaultCacheMode);
                    },
                    editorOnly: true,
                    visible: true,
                    animatable: false,
                    displayName: 'Animation Cache Mode',
                    tooltip: CC_DEV && 'i18n:COMPONENT.dragon_bones.animation_cache_mode'
                },
                timeScale: {
                    default: 1,
                    notify: function notify() {
                        if (this._armature) {
                            this._armature.animation.timeScale = this.timeScale;
                        }
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.dragon_bones.time_scale'
                },
                playTimes: {
                    default: -1,
                    tooltip: CC_DEV && 'i18n:COMPONENT.dragon_bones.play_times'
                },
                premultipliedAlpha: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.premultipliedAlpha'
                },
                debugBones: {
                    default: false,
                    notify: function notify() {
                        this._updateDebugDraw();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.dragon_bones.debug_bones'
                },
                enableBatch: {
                    default: false,
                    notify: function notify() {
                        this._updateBatch();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.dragon_bones.enabled_batch'
                },
                _armatureKey: '',
                _accTime: 0,
                _playCount: 0,
                _frameCache: null,
                _curFrame: null,
                _playing: false,
                _armatureCache: null
            },
            ctor: function ctor() {
                this._eventTarget = new EventTarget();
                this._materialCache = {};
                this._inited = false;
                this._factory = dragonBones.CCFactory.getInstance();
            },
            onLoad: function onLoad() {
                var children = this.node.children;
                for (var i = 0, n = children.length; i < n; i++) {
                    var child = children[i];
                    var pos = child._name && child._name.search('CHILD_ARMATURE-');
                    if (pos === 0) {
                        child.destroy();
                    }
                }
            },
            _updateBatch: function _updateBatch() {
                var cache = this._materialCache;
                for (var mKey in cache) {
                    var material = cache[mKey];
                    if (material) {
                        material.define('_USE_MODEL', !this.enableBatch);
                    }
                }
            },
            setMaterial: function setMaterial(index, material) {
                this._super(index, material);
                this._materialCache = {};
            },
            __preload: function __preload() {
                this._init();
            },
            _init: function _init() {
                if (this._inited)
                    return;
                this._inited = true;
                if (CC_JSB) {
                    this._cacheMode = AnimationCacheMode.REALTIME;
                }
                this._parseDragonAtlasAsset();
                this._refresh();
                this._activateMaterial();
                var children = this.node.children;
                for (var i = 0, n = children.length; i < n; i++) {
                    var child = children[i];
                    if (child && child._name === 'DEBUG_DRAW_NODE') {
                        child.destroy();
                    }
                }
                this._updateDebugDraw();
            },
            getArmatureKey: function getArmatureKey() {
                return this._armatureKey;
            },
            setAnimationCacheMode: function setAnimationCacheMode(cacheMode) {
                if (CC_JSB)
                    return;
                if (this._preCacheMode !== cacheMode) {
                    this._cacheMode = cacheMode;
                    this._buildArmature();
                }
            },
            isAnimationCached: function isAnimationCached() {
                if (CC_EDITOR)
                    return false;
                return this._cacheMode !== AnimationCacheMode.REALTIME;
            },
            onEnable: function onEnable() {
                this._super();
                if (this._armature && !this.isAnimationCached()) {
                    this._factory._dragonBones.clock.add(this._armature);
                }
                this._activateMaterial();
            },
            onDisable: function onDisable() {
                this._super();
                if (this._armature && !this.isAnimationCached()) {
                    this._factory._dragonBones.clock.remove(this._armature);
                }
            },
            update: function update(dt) {
                if (!this.isAnimationCached())
                    return;
                if (!this._playing)
                    return;
                var frameCache = this._frameCache;
                var frames = frameCache.frames;
                var frameTime = ArmatureCache.FrameTime;
                if (this._accTime == 0 && this._playCount == 0) {
                    this._eventTarget && this._eventTarget.emit(dragonBones.EventObject.START);
                }
                var globalTimeScale = dragonBones.timeScale;
                this._accTime += dt * this.timeScale * globalTimeScale;
                var frameIdx = Math.floor(this._accTime / frameTime);
                if (!frameCache.isCompleted) {
                    frameCache.updateToFrame(frameIdx);
                }
                if (frameCache.isCompleted && frameIdx >= frames.length) {
                    this._eventTarget && this._eventTarget.emit(dragonBones.EventObject.LOOP_COMPLETE);
                    this._eventTarget && this._eventTarget.emit(dragonBones.EventObject.COMPLETE);
                    this._playCount++;
                    if (this.playTimes > 0 && this._playCount >= this.playTimes) {
                        this._curFrame = frames[frames.length - 1];
                        this._accTime = 0;
                        this._playing = false;
                        this._playCount = 0;
                        return;
                    }
                    this._accTime = 0;
                    frameIdx = 0;
                }
                this._curFrame = frames[frameIdx];
            },
            onDestroy: function onDestroy() {
                this._super();
                this._inited = false;
                if (!CC_EDITOR) {
                    if (this._cacheMode === AnimationCacheMode.PRIVATE_CACHE) {
                        this._armatureCache.dispose();
                        this._armatureCache = null;
                        this._armature = null;
                    } else if (this._cacheMode === AnimationCacheMode.SHARED_CACHE) {
                        this._armatureCache = null;
                        this._armature = null;
                    } else if (this._armature) {
                        this._armature.dispose();
                        this._armature = null;
                    }
                } else {
                    if (this._armature) {
                        this._armature.dispose();
                        this._armature = null;
                    }
                }
            },
            _updateDebugDraw: function _updateDebugDraw() {
                if (this.debugBones) {
                    if (!this._debugDraw) {
                        var debugDrawNode = new cc.PrivateNode();
                        debugDrawNode.name = 'DEBUG_DRAW_NODE';
                        var debugDraw = debugDrawNode.addComponent(Graphics);
                        debugDraw.lineWidth = 1;
                        debugDraw.strokeColor = cc.color(255, 0, 0, 255);
                        this._debugDraw = debugDraw;
                    }
                    this._debugDraw.node.parent = this.node;
                } else if (this._debugDraw) {
                    this._debugDraw.node.parent = null;
                }
            },
            _activateMaterial: function _activateMaterial() {
                var texture = this.dragonAtlasAsset && this.dragonAtlasAsset.texture;
                if (!texture) {
                    this.disableRender();
                    return;
                }
                var material = this.sharedMaterials[0];
                if (!material) {
                    material = Material.getInstantiatedBuiltinMaterial('2d-sprite', this);
                } else {
                    material = Material.getInstantiatedMaterial(material, this);
                }
                material.define('_USE_MODEL', true);
                material.setProperty('texture', texture);
                this.setMaterial(0, material);
                this.markForRender(true);
            },
            _buildArmature: function _buildArmature() {
                if (!this.dragonAsset || !this.dragonAtlasAsset || !this.armatureName)
                    return;
                if (this._armature) {
                    if (!CC_EDITOR) {
                        if (this._preCacheMode === AnimationCacheMode.PRIVATE_CACHE) {
                            this._armatureCache.dispose();
                        } else if (this._preCacheMode === AnimationCacheMode.REALTIME) {
                            this._armature.dispose();
                        }
                    } else {
                        this._armature.dispose();
                    }
                    this._armatureCache = null;
                    this._armature = null;
                    this._displayProxy = null;
                    this._frameCache = null;
                    this._curFrame = null;
                    this._playing = false;
                    this._preCacheMode = null;
                }
                if (!CC_EDITOR) {
                    if (this._cacheMode === AnimationCacheMode.SHARED_CACHE) {
                        this._armatureCache = ArmatureCache.sharedCache;
                    } else if (this._cacheMode === AnimationCacheMode.PRIVATE_CACHE) {
                        this._armatureCache = new ArmatureCache();
                    }
                }
                var atlasUUID = this.dragonAtlasAsset._uuid;
                this._armatureKey = this.dragonAsset.init(this._factory, atlasUUID);
                if (this.isAnimationCached()) {
                    this._armature = this._armatureCache.getArmatureCache(this.armatureName, this._armatureKey, atlasUUID);
                    if (!this._armature) {
                        this._cacheMode = AnimationCacheMode.REALTIME;
                    }
                }
                this._preCacheMode = this._cacheMode;
                if (CC_EDITOR || this._cacheMode === AnimationCacheMode.REALTIME) {
                    this._displayProxy = this._factory.buildArmatureDisplay(this.armatureName, this._armatureKey, '', atlasUUID);
                    if (!this._displayProxy)
                        return;
                    this._displayProxy._ccNode = this.node;
                    this._displayProxy.setEventTarget(this._eventTarget);
                    this._armature = this._displayProxy._armature;
                    this._armature.animation.timeScale = this.timeScale;
                }
                if (this._cacheMode !== AnimationCacheMode.REALTIME && this.debugBones) {
                    cc.warn('Debug bones is invalid in cached mode');
                }
                this._updateBatch();
                if (this.animationName) {
                    this.playAnimation(this.animationName, this.playTimes);
                }
            },
            _parseDragonAtlasAsset: function _parseDragonAtlasAsset() {
                if (this.dragonAtlasAsset) {
                    this.dragonAtlasAsset.init(this._factory);
                }
            },
            _refresh: function _refresh() {
                this._buildArmature();
                if (CC_EDITOR) {
                    this._updateArmatureEnum();
                    this._updateAnimEnum();
                    this._updateCacheModeEnum();
                    Editor.Utils.refreshSelectedInspector('node', this.node.uuid);
                }
            },
            _updateCacheModeEnum: CC_EDITOR && function () {
                if (this._armature && ArmatureCache.canCache(this._armature)) {
                    setEnumAttr(this, '_defaultCacheMode', AnimationCacheMode);
                } else {
                    setEnumAttr(this, '_defaultCacheMode', DefaultCacheMode);
                }
            },
            _updateAnimEnum: CC_EDITOR && function () {
                var animEnum = void 0;
                if (this.dragonAsset) {
                    animEnum = this.dragonAsset.getAnimsEnum(this.armatureName);
                }
                setEnumAttr(this, '_animationIndex', animEnum || DefaultAnimsEnum);
            },
            _updateArmatureEnum: CC_EDITOR && function () {
                var armatureEnum = void 0;
                if (this.dragonAsset) {
                    armatureEnum = this.dragonAsset.getArmatureEnum();
                }
                setEnumAttr(this, '_defaultArmatureIndex', armatureEnum || DefaultArmaturesEnum);
            },
            playAnimation: function playAnimation(animName, playTimes) {
                this.playTimes = playTimes === undefined ? -1 : playTimes;
                this.animationName = animName;
                if (this.isAnimationCached()) {
                    var cache = this._armatureCache.getAnimationCache(this._armatureKey, animName);
                    if (!cache) {
                        cache = this._armatureCache.initAnimationCache(this._armatureKey, animName);
                        cache.begin();
                    }
                    if (cache) {
                        this._accTime = 0;
                        this._playCount = 0;
                        this._frameCache = cache;
                        this._playing = true;
                        this._curFrame = this._frameCache.frames[0];
                    }
                } else {
                    if (this._armature) {
                        return this._armature.animation.play(animName, this.playTimes);
                    }
                }
            },
            updateAnimationCache: function updateAnimationCache(animName) {
                if (!this.isAnimationCached())
                    return;
                var cache = this._armatureCache.updateAnimationCache(this._armatureKey, animName);
                this._frameCache = cache || this._frameCache;
            },
            getArmatureNames: function getArmatureNames() {
                var dragonBonesData = this._factory.getDragonBonesData(this._armatureKey);
                return dragonBonesData && dragonBonesData.armatureNames || [];
            },
            getAnimationNames: function getAnimationNames(armatureName) {
                var ret = [];
                var dragonBonesData = this._factory.getDragonBonesData(this._armatureKey);
                if (dragonBonesData) {
                    var armatureData = dragonBonesData.getArmature(armatureName);
                    if (armatureData) {
                        for (var animName in armatureData.animations) {
                            if (armatureData.animations.hasOwnProperty(animName)) {
                                ret.push(animName);
                            }
                        }
                    }
                }
                return ret;
            },
            on: function on(eventType, listener, target) {
                this.addEventListener(eventType, listener, target);
            },
            off: function off(eventType, listener, target) {
                this.removeEventListener(eventType, listener, target);
            },
            once: function once(eventType, listener, target) {
                this._eventTarget.once(eventType, listener, target);
            },
            addEventListener: function addEventListener(eventType, listener, target) {
                this._eventTarget.on(eventType, listener, target);
            },
            removeEventListener: function removeEventListener(eventType, listener, target) {
                this._eventTarget.off(eventType, listener, target);
            },
            buildArmature: function buildArmature(armatureName, node) {
                return this._factory.createArmatureNode(this, armatureName, node);
            },
            armature: function armature() {
                return this._armature;
            }
        });
        module.exports = dragonBones.ArmatureDisplay = ArmatureDisplay;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,