(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/CCFactory.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var BaseObject = dragonBones.BaseObject, BaseFactory = dragonBones.BaseFactory;
        var CCFactory = dragonBones.CCFactory = cc.Class({
            name: 'dragonBones.CCFactory',
            extends: BaseFactory,
            statics: {
                _factory: null,
                getInstance: function getInstance() {
                    if (!CCFactory._factory) {
                        CCFactory._factory = new CCFactory();
                    }
                    return CCFactory._factory;
                }
            },
            ctor: function ctor() {
                var eventManager = new dragonBones.CCArmatureDisplay();
                this._dragonBones = new dragonBones.DragonBones(eventManager);
                if (!CC_JSB && !CC_EDITOR && cc.director._scheduler) {
                    cc.game.on(cc.game.EVENT_RESTART, this.initUpdate, this);
                    this.initUpdate();
                }
            },
            initUpdate: function initUpdate(dt) {
                cc.director._scheduler.enableForTarget(this);
                cc.director._scheduler.scheduleUpdate(this, cc.Scheduler.PRIORITY_SYSTEM, false);
            },
            update: function update(dt) {
                this._dragonBones.advanceTime(dt);
            },
            getDragonBonesDataByRawData: function getDragonBonesDataByRawData(rawData) {
                var dataParser = rawData instanceof ArrayBuffer ? BaseFactory._binaryParser : this._dataParser;
                return dataParser.parseDragonBonesData(rawData, 1);
            },
            buildArmatureDisplay: function buildArmatureDisplay(armatureName, dragonBonesName, skinName, textureAtlasName) {
                var armature = this.buildArmature(armatureName, dragonBonesName, skinName, textureAtlasName);
                return armature && armature._display;
            },
            createArmatureNode: function createArmatureNode(comp, armatureName, node) {
                node = node || new cc.Node();
                var display = node.getComponent(dragonBones.ArmatureDisplay);
                if (!display) {
                    display = node.addComponent(dragonBones.ArmatureDisplay);
                }
                node.name = armatureName;
                display._armatureName = armatureName;
                display._N$dragonAsset = comp.dragonAsset;
                display._N$dragonAtlasAsset = comp.dragonAtlasAsset;
                display._init();
                return display;
            },
            _buildTextureAtlasData: function _buildTextureAtlasData(textureAtlasData, textureAtlas) {
                if (textureAtlasData) {
                    textureAtlasData.renderTexture = textureAtlas;
                } else {
                    textureAtlasData = BaseObject.borrowObject(dragonBones.CCTextureAtlasData);
                }
                return textureAtlasData;
            },
            _sortSlots: function _sortSlots() {
                var slots = this._slots;
                var sortedSlots = [];
                for (var i = 0, l = slots.length; i < l; i++) {
                    var slot = slots[i];
                    var zOrder = slot._zOrder;
                    var inserted = false;
                    for (var j = sortedSlots.length - 1; j >= 0; j--) {
                        if (zOrder >= sortedSlots[j]._zOrder) {
                            sortedSlots.splice(j + 1, 0, slot);
                            inserted = true;
                            break;
                        }
                    }
                    if (!inserted) {
                        sortedSlots.splice(0, 0, slot);
                    }
                }
                this._slots = sortedSlots;
            },
            _buildArmature: function _buildArmature(dataPackage) {
                var armature = BaseObject.borrowObject(dragonBones.Armature);
                armature._skinData = dataPackage.skin;
                armature._animation = BaseObject.borrowObject(dragonBones.Animation);
                armature._animation._armature = armature;
                armature._animation.animations = dataPackage.armature.animations;
                armature._isChildArmature = false;
                var display = new dragonBones.CCArmatureDisplay();
                armature.init(dataPackage.armature, display, display, this._dragonBones);
                return armature;
            },
            _buildSlot: function _buildSlot(dataPackage, slotData, displays) {
                var slot = BaseObject.borrowObject(dragonBones.CCSlot);
                var display = slot;
                slot.init(slotData, displays, display, display);
                return slot;
            },
            getDragonBonesDataByUUID: function getDragonBonesDataByUUID(uuid) {
                for (var name in this._dragonBonesDataMap) {
                    if (name.indexOf(uuid) != -1) {
                        return this._dragonBonesDataMap[name];
                    }
                }
                return null;
            },
            removeDragonBonesDataByUUID: function removeDragonBonesDataByUUID(uuid, disposeData) {
                if (disposeData === void 0) {
                    disposeData = true;
                }
                for (var name in this._dragonBonesDataMap) {
                    if (name.indexOf(uuid) === -1)
                        continue;
                    if (disposeData) {
                        this._dragonBones.bufferObject(this._dragonBonesDataMap[name]);
                    }
                    delete this._dragonBonesDataMap[name];
                }
            }
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,