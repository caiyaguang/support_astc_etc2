(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/DragonBonesAtlasAsset.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var ArmatureCache = !CC_JSB && require('./ArmatureCache').sharedCache;
        var DragonBonesAtlasAsset = cc.Class({
            name: 'dragonBones.DragonBonesAtlasAsset',
            extends: cc.Asset,
            ctor: function ctor() {
                this._clear();
            },
            properties: {
                _atlasJson: '',
                atlasJson: {
                    get: function get() {
                        return this._atlasJson;
                    },
                    set: function set(value) {
                        this._atlasJson = value;
                        this._clear();
                    }
                },
                _texture: {
                    default: null,
                    type: cc.Texture2D,
                    formerlySerializedAs: 'texture'
                },
                texture: {
                    get: function get() {
                        return this._texture;
                    },
                    set: function set(value) {
                        this._texture = value;
                        this._clear();
                    }
                },
                _textureAtlasData: null
            },
            statics: { preventDeferredLoadDependents: true },
            createNode: CC_EDITOR && function (callback) {
                var node = new cc.Node(this.name);
                var armatureDisplay = node.addComponent(dragonBones.ArmatureDisplay);
                armatureDisplay.dragonAtlasAsset = this;
                return callback(null, node);
            },
            init: function init(factory) {
                this._factory = factory;
                var atlasJsonObj = JSON.parse(this.atlasJson);
                this._uuid = this._uuid || atlasJsonObj.name;
                if (this._textureAtlasData) {
                    factory.addTextureAtlasData(this._textureAtlasData, this._uuid);
                } else {
                    this._textureAtlasData = factory.parseTextureAtlasData(atlasJsonObj, this.texture, this._uuid);
                }
            },
            _clear: function _clear() {
                if (CC_JSB)
                    return;
                if (this._factory) {
                    ArmatureCache.resetArmature(this._uuid);
                    this._factory.removeTextureAtlasData(this._uuid, true);
                    this._factory.removeDragonBonesDataByUUID(this._uuid, true);
                }
                this._textureAtlasData = null;
            },
            destroy: function destroy() {
                this._clear();
                this._super();
            }
        });
        dragonBones.DragonBonesAtlasAsset = module.exports = DragonBonesAtlasAsset;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,