(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _global = typeof window === 'undefined' ? global : window;
        if (!CC_JSB) {
            _global.dragonBones = require('./lib/dragonBones');
        }
        if (_global.dragonBones !== undefined) {
            dragonBones._timeScale = 1;
            Object.defineProperty(dragonBones, 'timeScale', {
                get: function get() {
                    return this._timeScale;
                },
                set: function set(value) {
                    this._timeScale = value;
                    var factory = this.CCFactory.getInstance();
                    factory._dragonBones.clock.timeScale = value;
                },
                configurable: true
            });
            dragonBones.DisplayType = {
                Image: 0,
                Armature: 1,
                Mesh: 2
            };
            dragonBones.ArmatureType = {
                Armature: 0,
                MovieClip: 1,
                Stage: 2
            };
            dragonBones.ExtensionType = {
                FFD: 0,
                AdjustColor: 10,
                BevelFilter: 11,
                BlurFilter: 12,
                DropShadowFilter: 13,
                GlowFilter: 14,
                GradientBevelFilter: 15,
                GradientGlowFilter: 16
            };
            dragonBones.EventType = {
                Frame: 0,
                Sound: 1
            };
            dragonBones.ActionType = {
                Play: 0,
                Stop: 1,
                GotoAndPlay: 2,
                GotoAndStop: 3,
                FadeIn: 4,
                FadeOut: 5
            };
            dragonBones.AnimationFadeOutMode = {
                None: 0,
                SameLayer: 1,
                SameGroup: 2,
                SameLayerAndGroup: 3,
                All: 4
            };
            dragonBones.BinaryOffset = {
                WeigthBoneCount: 0,
                WeigthFloatOffset: 1,
                WeigthBoneIndices: 2,
                MeshVertexCount: 0,
                MeshTriangleCount: 1,
                MeshFloatOffset: 2,
                MeshWeightOffset: 3,
                MeshVertexIndices: 4,
                TimelineScale: 0,
                TimelineOffset: 1,
                TimelineKeyFrameCount: 2,
                TimelineFrameValueCount: 3,
                TimelineFrameValueOffset: 4,
                TimelineFrameOffset: 5,
                FramePosition: 0,
                FrameTweenType: 1,
                FrameTweenEasingOrCurveSampleCount: 2,
                FrameCurveSamples: 3,
                DeformMeshOffset: 0,
                DeformCount: 1,
                DeformValueCount: 2,
                DeformValueOffset: 3,
                DeformFloatOffset: 4
            };
            dragonBones.BoneType = {
                Bone: 0,
                Surface: 1
            };
            if (!CC_EDITOR || !Editor.isMainProcess) {
                if (!CC_JSB) {
                    require('./CCFactory');
                    require('./CCSlot');
                    require('./CCTextureData');
                    require('./CCArmatureDisplay');
                    require('./ArmatureCache');
                }
                require('./DragonBonesAsset');
                require('./DragonBonesAtlasAsset');
                require('./ArmatureDisplay');
                require('./webgl-assembler');
            } else {
                require('./DragonBonesAsset');
                require('./DragonBonesAtlasAsset');
            }
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,