(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/spine/Skeleton.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var TrackEntryListeners = require('./track-entry-listeners');
        var RenderComponent = require('../../cocos2d/core/components/CCRenderComponent');
        var spine = require('./lib/spine');
        var Material = require('../../cocos2d/core/assets/material/CCMaterial');
        var Graphics = require('../../cocos2d/core/graphics/graphics');
        var SkeletonCache = require('./skeleton-cache');
        var DefaultSkinsEnum = cc.Enum({ 'default': -1 });
        var DefaultAnimsEnum = cc.Enum({ '<None>': 0 });
        var AnimationCacheMode = cc.Enum({
            REALTIME: 0,
            SHARED_CACHE: 1,
            PRIVATE_CACHE: 2
        });
        function setEnumAttr(obj, propName, enumDef) {
            cc.Class.Attr.setClassAttr(obj, propName, 'type', 'Enum');
            cc.Class.Attr.setClassAttr(obj, propName, 'enumList', cc.Enum.getList(enumDef));
        }
        sp.Skeleton = cc.Class({
            name: 'sp.Skeleton',
            extends: RenderComponent,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.renderers/Spine Skeleton',
                help: 'app://docs/html/components/spine.html'
            },
            statics: { AnimationCacheMode: AnimationCacheMode },
            properties: {
                paused: {
                    default: false,
                    visible: false
                },
                skeletonData: {
                    default: null,
                    type: sp.SkeletonData,
                    notify: function notify() {
                        this.defaultSkin = '';
                        this.defaultAnimation = '';
                        if (CC_EDITOR) {
                            this._refreshInspector();
                        }
                        this._updateSkeletonData();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.skeleton_data'
                },
                defaultSkin: {
                    default: '',
                    visible: false
                },
                defaultAnimation: {
                    default: '',
                    visible: false
                },
                animation: {
                    get: function get() {
                        if (this.isAnimationCached()) {
                            return this._animationName;
                        } else {
                            var entry = this.getCurrent(0);
                            return entry && entry.animation.name || '';
                        }
                    },
                    set: function set(value) {
                        this.defaultAnimation = value;
                        if (value) {
                            this.setAnimation(0, value, this.loop);
                        } else if (!this.isAnimationCached()) {
                            this.clearTrack(0);
                            this.setToSetupPose();
                        }
                    },
                    visible: false
                },
                _defaultSkinIndex: {
                    get: function get() {
                        if (this.skeletonData && this.defaultSkin) {
                            var skinsEnum = this.skeletonData.getSkinsEnum();
                            if (skinsEnum) {
                                var skinIndex = skinsEnum[this.defaultSkin];
                                if (skinIndex !== undefined) {
                                    return skinIndex;
                                }
                            }
                        }
                        return 0;
                    },
                    set: function set(value) {
                        var skinsEnum;
                        if (this.skeletonData) {
                            skinsEnum = this.skeletonData.getSkinsEnum();
                        }
                        if (!skinsEnum) {
                            return cc.errorID('', this.name);
                        }
                        var skinName = skinsEnum[value];
                        if (skinName !== undefined) {
                            this.defaultSkin = skinName;
                            this.setSkin(this.defaultSkin);
                            if (CC_EDITOR && !cc.engine.isPlaying) {
                                this._refreshInspector();
                            }
                        } else {
                            cc.errorID(7501, this.name);
                        }
                    },
                    type: DefaultSkinsEnum,
                    visible: true,
                    displayName: 'Default Skin',
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.default_skin'
                },
                _animationIndex: {
                    get: function get() {
                        var animationName = !CC_EDITOR || cc.engine.isPlaying ? this.animation : this.defaultAnimation;
                        if (this.skeletonData && animationName) {
                            var animsEnum = this.skeletonData.getAnimsEnum();
                            if (animsEnum) {
                                var animIndex = animsEnum[animationName];
                                if (animIndex !== undefined) {
                                    return animIndex;
                                }
                            }
                        }
                        return 0;
                    },
                    set: function set(value) {
                        if (value === 0) {
                            this.animation = '';
                            return;
                        }
                        var animsEnum;
                        if (this.skeletonData) {
                            animsEnum = this.skeletonData.getAnimsEnum();
                        }
                        if (!animsEnum) {
                            return cc.errorID(7502, this.name);
                        }
                        var animName = animsEnum[value];
                        if (animName !== undefined) {
                            this.animation = animName;
                        } else {
                            cc.errorID(7503, this.name);
                        }
                    },
                    type: DefaultAnimsEnum,
                    visible: true,
                    displayName: 'Animation',
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.animation'
                },
                _preCacheMode: -1,
                _cacheMode: AnimationCacheMode.REALTIME,
                _defaultCacheMode: {
                    default: 0,
                    type: AnimationCacheMode,
                    notify: function notify() {
                        this.setAnimationCacheMode(this._defaultCacheMode);
                    },
                    editorOnly: true,
                    visible: true,
                    animatable: false,
                    displayName: 'Animation Cache Mode',
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.animation_cache_mode'
                },
                loop: {
                    default: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.loop'
                },
                premultipliedAlpha: {
                    default: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.premultipliedAlpha'
                },
                timeScale: {
                    default: 1,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.time_scale'
                },
                debugSlots: {
                    default: false,
                    editorOnly: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.debug_slots',
                    notify: function notify() {
                        this._updateDebugDraw();
                    }
                },
                debugBones: {
                    default: false,
                    editorOnly: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.debug_bones',
                    notify: function notify() {
                        this._updateDebugDraw();
                    }
                },
                useTint: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.use_tint',
                    notify: function notify() {
                        this._updateUseTint();
                    }
                },
                enableBatch: {
                    default: false,
                    notify: function notify() {
                        this._updateBatch();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.skeleton.enabled_batch'
                },
                _accTime: 0,
                _playCount: 0,
                _frameCache: null,
                _curFrame: null,
                _skeletonCache: null,
                _animationName: '',
                _animationQueue: [],
                _headAniInfo: null,
                _playTimes: 0,
                _isAniComplete: true
            },
            ctor: function ctor() {
                this._skeleton = null;
                this._rootBone = null;
                this._listener = null;
                this._boundingBox = cc.rect();
                this._materialCache = {};
                this._debugRenderer = null;
                this._startSlotIndex = -1;
                this._endSlotIndex = -1;
                this._startEntry = {
                    animation: { name: '' },
                    trackIndex: 0
                };
                this._endEntry = {
                    animation: { name: '' },
                    trackIndex: 0
                };
            },
            setMaterial: function setMaterial(index, material) {
                this._super(index, material);
                this._materialCache = {};
            },
            _updateUseTint: function _updateUseTint() {
                var cache = this._materialCache;
                for (var mKey in cache) {
                    var material = cache[mKey];
                    if (material) {
                        material.define('USE_TINT', this.useTint);
                    }
                }
            },
            _updateBatch: function _updateBatch() {
                var cache = this._materialCache;
                for (var mKey in cache) {
                    var material = cache[mKey];
                    if (material) {
                        material.define('_USE_MODEL', !this.enableBatch);
                    }
                }
            },
            setSkeletonData: function setSkeletonData(skeletonData) {
                if (skeletonData.width != null && skeletonData.height != null) {
                    this.node.setContentSize(skeletonData.width, skeletonData.height);
                }
                if (!CC_EDITOR) {
                    if (this._cacheMode === AnimationCacheMode.SHARED_CACHE) {
                        this._skeletonCache = SkeletonCache.sharedCache;
                    } else if (this._cacheMode === AnimationCacheMode.PRIVATE_CACHE) {
                        this._skeletonCache = new SkeletonCache();
                    }
                }
                if (this.isAnimationCached()) {
                    if (this.debugBones || this.debugSlots) {
                        cc.warn('Debug bones or slots is invalid in cached mode');
                    }
                    var skeletonInfo = this._skeletonCache.getSkeletonCache(this.skeletonData._uuid, skeletonData);
                    this._skeleton = skeletonInfo.skeleton;
                    this._clipper = skeletonInfo.clipper;
                    this._rootBone = this._skeleton.getRootBone();
                } else {
                    this._skeleton = new spine.Skeleton(skeletonData);
                    this._clipper = new spine.SkeletonClipping();
                    this._rootBone = this._skeleton.getRootBone();
                }
            },
            setSlotsRange: function setSlotsRange(startSlotIndex, endSlotIndex) {
                if (this.isAnimationCached()) {
                    console.warn('Slots visible range can not be modified in cached mode.');
                } else {
                    this._startSlotIndex = startSlotIndex;
                    this._endSlotIndex = endSlotIndex;
                }
            },
            setAnimationStateData: function setAnimationStateData(stateData) {
                if (this.isAnimationCached()) {
                    console.warn('\'setAnimationStateData\' interface can not be invoked in cached mode.');
                } else {
                    var state = new spine.AnimationState(stateData);
                    if (this._listener) {
                        if (this._state) {
                            this._state.removeListener(this._listener);
                        }
                        state.addListener(this._listener);
                    }
                    this._state = state;
                }
            },
            __preload: function __preload() {
                if (CC_EDITOR) {
                    var Flags = cc.Object.Flags;
                    this._objFlags |= Flags.IsAnchorLocked | Flags.IsSizeLocked;
                    this._refreshInspector();
                }
                var children = this.node.children;
                for (var i = 0, n = children.length; i < n; i++) {
                    var child = children[i];
                    if (child && child._name === 'DEBUG_DRAW_NODE') {
                        child.destroy();
                    }
                }
                if (CC_JSB) {
                    this._cacheMode = AnimationCacheMode.REALTIME;
                }
                this._activateMaterial();
                this._updateSkeletonData();
                this._updateDebugDraw();
                this._updateUseTint();
                this._updateBatch();
            },
            setAnimationCacheMode: function setAnimationCacheMode(cacheMode) {
                if (CC_JSB)
                    return;
                if (this._preCacheMode !== cacheMode) {
                    this._cacheMode = cacheMode;
                    this._updateSkeletonData();
                }
            },
            isAnimationCached: function isAnimationCached() {
                if (CC_EDITOR)
                    return false;
                return this._cacheMode !== AnimationCacheMode.REALTIME;
            },
            update: function update(dt) {
                if (CC_EDITOR)
                    return;
                if (this.paused)
                    return;
                dt *= this.timeScale * sp.timeScale;
                if (this.isAnimationCached()) {
                    if (this._isAniComplete) {
                        if (this._animationQueue.length === 0 && !this._headAniInfo)
                            return;
                        if (!this._headAniInfo) {
                            this._headAniInfo = this._animationQueue.shift();
                        }
                        this._accTime += dt;
                        if (this._accTime > this._headAniInfo.delay) {
                            var aniInfo = this._headAniInfo;
                            this._headAniInfo = null;
                            this.setAnimation(0, aniInfo.animationName, aniInfo.loop);
                        }
                        return;
                    }
                    this._updateCache(dt);
                } else {
                    this._updateRealtime(dt);
                }
            },
            _updateCache: function _updateCache(dt) {
                var frameCache = this._frameCache;
                var frames = frameCache.frames;
                var frameTime = SkeletonCache.FrameTime;
                if (this._accTime == 0 && this._playCount == 0) {
                    this._startEntry.animation.name = this._animationName;
                    this._listener && this._listener.start && this._listener.start(this._startEntry);
                }
                this._accTime += dt;
                var frameIdx = Math.floor(this._accTime / frameTime);
                if (!frameCache.isCompleted) {
                    frameCache.updateToFrame(frameIdx);
                }
                if (frameCache.isCompleted && frameIdx >= frames.length) {
                    this._endEntry.animation.name = this._animationName;
                    this._listener && this._listener.complete && this._listener.complete(this._endEntry);
                    this._listener && this._listener.end && this._listener.end(this._endEntry);
                    this._playCount++;
                    if (this._playTimes > 0 && this._playCount >= this._playTimes) {
                        this._curFrame = frames[frames.length - 1];
                        this._accTime = 0;
                        this._playCount = 0;
                        this._isAniComplete = true;
                        return;
                    }
                    this._accTime = 0;
                    frameIdx = 0;
                }
                this._curFrame = frames[frameIdx];
            },
            _updateRealtime: function _updateRealtime(dt) {
                var skeleton = this._skeleton;
                var state = this._state;
                if (skeleton) {
                    skeleton.update(dt);
                    if (state) {
                        state.update(dt);
                        state.apply(skeleton);
                    }
                }
            },
            _activateMaterial: function _activateMaterial() {
                var material = this.sharedMaterials[0];
                if (!material) {
                    material = Material.getInstantiatedBuiltinMaterial('2d-spine', this);
                } else {
                    material = Material.getInstantiatedMaterial(material, this);
                }
                material.define('_USE_MODEL', true);
                this.setMaterial(0, material);
                this.markForRender(true);
            },
            onEnable: function onEnable() {
                this._super();
                this._activateMaterial();
            },
            onRestore: function onRestore() {
                this._boundingBox = cc.rect();
            },
            updateWorldTransform: function updateWorldTransform() {
                if (!this.isAnimationCached())
                    return;
                if (this._skeleton) {
                    this._skeleton.updateWorldTransform();
                }
            },
            setToSetupPose: function setToSetupPose() {
                if (this.isAnimationCached()) {
                    cc.warn('\'SetToSetupPose\' interface can not be invoked in cached mode.');
                } else {
                    if (this._skeleton) {
                        this._skeleton.setToSetupPose();
                    }
                }
            },
            setBonesToSetupPose: function setBonesToSetupPose() {
                if (this.isAnimationCached()) {
                    cc.warn('\'setBonesToSetupPose\' interface can not be invoked in cached mode.');
                } else {
                    if (this._skeleton) {
                        this._skeleton.setBonesToSetupPose();
                    }
                }
            },
            setSlotsToSetupPose: function setSlotsToSetupPose() {
                if (this.isAnimationCached()) {
                    cc.warn('\'setSlotsToSetupPose\' interface can not be invoked in cached mode.');
                } else {
                    if (this._skeleton) {
                        this._skeleton.setSlotsToSetupPose();
                    }
                }
            },
            updateAnimationCache: function updateAnimationCache(animName) {
                if (!this.isAnimationCached())
                    return;
                var cache = this._skeletonCache.updateAnimationCache(this.skeletonData._uuid, animName);
                this._frameCache = cache || this._frameCache;
            },
            findBone: function findBone(boneName) {
                if (this._skeleton) {
                    return this._skeleton.findBone(boneName);
                }
                return null;
            },
            findSlot: function findSlot(slotName) {
                if (this._skeleton) {
                    return this._skeleton.findSlot(slotName);
                }
                return null;
            },
            setSkin: function setSkin(skinName) {
                if (this.isAnimationCached()) {
                    this._skeletonCache.updateSkeletonSkin(this.skeletonData._uuid, skinName);
                } else {
                    if (this._skeleton) {
                        this._skeleton.setSkinByName(skinName);
                        this._skeleton.setSlotsToSetupPose();
                    }
                }
            },
            getAttachment: function getAttachment(slotName, attachmentName) {
                if (this._skeleton) {
                    return this._skeleton.getAttachmentByName(slotName, attachmentName);
                }
                return null;
            },
            setAttachment: function setAttachment(slotName, attachmentName) {
                if (this._skeleton) {
                    this._skeleton.setAttachment(slotName, attachmentName);
                }
            },
            getTextureAtlas: function getTextureAtlas(regionAttachment) {
                return regionAttachment.region;
            },
            setMix: function setMix(fromAnimation, toAnimation, duration) {
                if (this._state) {
                    this._state.data.setMix(fromAnimation, toAnimation, duration);
                }
            },
            setAnimation: function setAnimation(trackIndex, name, loop) {
                this._playTimes = loop ? 0 : 1;
                this._animationName = name;
                if (this.isAnimationCached()) {
                    if (trackIndex !== 0) {
                        cc.warn('Track index can not greater than 0 in cached mode.');
                    }
                    var cache = this._skeletonCache.getAnimationCache(this.skeletonData._uuid, name);
                    if (!cache) {
                        cache = this._skeletonCache.initAnimationCache(this.skeletonData._uuid, name);
                        cache.begin();
                    }
                    if (cache) {
                        this._isAniComplete = false;
                        this._accTime = 0;
                        this._playCount = 0;
                        this._frameCache = cache;
                        this._curFrame = this._frameCache.frames[0];
                    }
                } else {
                    if (this._skeleton) {
                        var animation = this._skeleton.data.findAnimation(name);
                        if (!animation) {
                            cc.logID(7509, name);
                            return null;
                        }
                        var res = this._state.setAnimationWith(trackIndex, animation, loop);
                        this._state.apply(this._skeleton);
                        return res;
                    }
                }
                return null;
            },
            addAnimation: function addAnimation(trackIndex, name, loop, delay) {
                delay = delay || 0;
                if (this.isAnimationCached()) {
                    if (trackIndex !== 0) {
                        cc.warn('Track index can not greater than 0 in cached mode.');
                    }
                    this._animationQueue.push({
                        animationName: name,
                        loop: loop,
                        delay: delay
                    });
                } else {
                    if (this._skeleton) {
                        var animation = this._skeleton.data.findAnimation(name);
                        if (!animation) {
                            cc.logID(7510, name);
                            return null;
                        }
                        return this._state.addAnimationWith(trackIndex, animation, loop, delay);
                    }
                }
                return null;
            },
            findAnimation: function findAnimation(name) {
                if (this._skeleton) {
                    return this._skeleton.data.findAnimation(name);
                }
                return null;
            },
            getCurrent: function getCurrent(trackIndex) {
                if (this.isAnimationCached()) {
                    console.warn('\'getCurrent\' interface can not be invoked in cached mode.');
                } else {
                    if (this._state) {
                        return this._state.getCurrent(trackIndex);
                    }
                }
                return null;
            },
            clearTracks: function clearTracks() {
                if (this.isAnimationCached()) {
                    console.warn('\'clearTracks\' interface can not be invoked in cached mode.');
                } else {
                    if (this._state) {
                        this._state.clearTracks();
                    }
                }
            },
            clearTrack: function clearTrack(trackIndex) {
                if (this.isAnimationCached()) {
                    console.warn('\'clearTrack\' interface can not be invoked in cached mode.');
                } else {
                    if (this._state) {
                        this._state.clearTrack(trackIndex);
                        if (CC_EDITOR && !cc.engine.isPlaying) {
                            this._state.update(0);
                        }
                    }
                }
            },
            setStartListener: function setStartListener(listener) {
                this._ensureListener();
                this._listener.start = listener;
            },
            setInterruptListener: function setInterruptListener(listener) {
                this._ensureListener();
                this._listener.interrupt = listener;
            },
            setEndListener: function setEndListener(listener) {
                this._ensureListener();
                this._listener.end = listener;
            },
            setDisposeListener: function setDisposeListener(listener) {
                this._ensureListener();
                this._listener.dispose = listener;
            },
            setCompleteListener: function setCompleteListener(listener) {
                this._ensureListener();
                this._listener.complete = listener;
            },
            setEventListener: function setEventListener(listener) {
                this._ensureListener();
                this._listener.event = listener;
            },
            setTrackStartListener: function setTrackStartListener(entry, listener) {
                TrackEntryListeners.getListeners(entry).start = listener;
            },
            setTrackInterruptListener: function setTrackInterruptListener(entry, listener) {
                TrackEntryListeners.getListeners(entry).interrupt = listener;
            },
            setTrackEndListener: function setTrackEndListener(entry, listener) {
                TrackEntryListeners.getListeners(entry).end = listener;
            },
            setTrackDisposeListener: function setTrackDisposeListener(entry, listener) {
                TrackEntryListeners.getListeners(entry).dispose = listener;
            },
            setTrackCompleteListener: function setTrackCompleteListener(entry, listener) {
                TrackEntryListeners.getListeners(entry).complete = function (trackEntry) {
                    var loopCount = Math.floor(trackEntry.trackTime / trackEntry.animationEnd);
                    listener(trackEntry, loopCount);
                };
            },
            setTrackEventListener: function setTrackEventListener(entry, listener) {
                TrackEntryListeners.getListeners(entry).event = listener;
            },
            getState: function getState() {
                return this._state;
            },
            _updateAnimEnum: CC_EDITOR && function () {
                var animEnum;
                if (this.skeletonData) {
                    animEnum = this.skeletonData.getAnimsEnum();
                }
                setEnumAttr(this, '_animationIndex', animEnum || DefaultAnimsEnum);
            },
            _updateSkinEnum: CC_EDITOR && function () {
                var skinEnum;
                if (this.skeletonData) {
                    skinEnum = this.skeletonData.getSkinsEnum();
                }
                setEnumAttr(this, '_defaultSkinIndex', skinEnum || DefaultSkinsEnum);
            },
            _ensureListener: function _ensureListener() {
                if (!this._listener) {
                    this._listener = new TrackEntryListeners();
                    if (this._state) {
                        this._state.addListener(this._listener);
                    }
                }
            },
            _updateSkeletonData: function _updateSkeletonData() {
                if (!this.skeletonData)
                    return;
                var data = this.skeletonData.getRuntimeData();
                if (!data)
                    return;
                try {
                    this.setSkeletonData(data);
                    if (!this.isAnimationCached()) {
                        this.setAnimationStateData(new spine.AnimationStateData(this._skeleton.data));
                    }
                    this.defaultSkin && this.setSkin(this.defaultSkin);
                } catch (e) {
                    cc.warn(e);
                }
                this._preCacheMode = this._cacheMode;
                this.animation = this.defaultAnimation;
            },
            _refreshInspector: function _refreshInspector() {
                this._updateAnimEnum();
                this._updateSkinEnum();
                Editor.Utils.refreshSelectedInspector('node', this.node.uuid);
            },
            _updateDebugDraw: function _updateDebugDraw() {
                if (this.debugBones || this.debugSlots) {
                    if (!this._debugRenderer) {
                        var debugDrawNode = new cc.PrivateNode();
                        debugDrawNode.name = 'DEBUG_DRAW_NODE';
                        var debugDraw = debugDrawNode.addComponent(Graphics);
                        debugDraw.lineWidth = 1;
                        debugDraw.strokeColor = cc.color(255, 0, 0, 255);
                        this._debugRenderer = debugDraw;
                    }
                    this._debugRenderer.node.parent = this.node;
                    if (this.isAnimationCached()) {
                        cc.warn('Debug bones or slots is invalid in cached mode');
                    }
                } else if (this._debugRenderer) {
                    this._debugRenderer.node.parent = null;
                }
            }
        });
        module.exports = sp.Skeleton;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,