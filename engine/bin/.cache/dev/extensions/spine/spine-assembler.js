(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/spine/spine-assembler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Skeleton = require('./Skeleton');
        var spine = require('./lib/spine');
        var RenderFlow = require('../../cocos2d/core/renderer/render-flow');
        var VertexFormat = require('../../cocos2d/core/renderer/webgl/vertex-format');
        var VFOneColor = VertexFormat.vfmtPosUvColor;
        var VFTwoColor = VertexFormat.vfmtPosUvTwoColor;
        var gfx = cc.gfx;
        var FLAG_BATCH = 16;
        var FLAG_TWO_COLOR = 1;
        var NOT_BATCH_ONE_COLOR = 0;
        var NOT_BATCH_TWO_COLOR = 1;
        var BATCH_ONE_COLOR = 16;
        var BATCH_TWO_COLOR = 17;
        var _handleVal = 0;
        var _quadTriangles = [
            0,
            1,
            2,
            2,
            3,
            0
        ];
        var _slotColor = cc.color(0, 0, 255, 255);
        var _boneColor = cc.color(255, 0, 0, 255);
        var _originColor = cc.color(0, 255, 0, 255);
        var _finalColor = undefined;
        var _darkColor = undefined;
        if (!CC_JSB) {
            _finalColor = new spine.Color(1, 1, 1, 1);
            _darkColor = new spine.Color(1, 1, 1, 1);
        }
        var _premultipliedAlpha = void 0;
        var _multiplier = void 0;
        var _slotRangeStart = void 0;
        var _slotRangeEnd = void 0;
        var _useTint = void 0;
        var _debugSlots = void 0;
        var _debugBones = void 0;
        var _nodeR = void 0, _nodeG = void 0, _nodeB = void 0, _nodeA = void 0;
        var _finalColor32 = void 0, _darkColor32 = void 0;
        var _vertexFormat = void 0;
        var _perVertexSize = void 0;
        var _perClipVertexSize = void 0;
        var _vertexFloatCount = 0, _vertexCount = 0, _vertexFloatOffset = 0, _vertexOffset = 0, _indexCount = 0, _indexOffset = 0, _vfOffset = 0;
        var _tempr = void 0, _tempg = void 0, _tempb = void 0;
        var _inRange = void 0;
        var _mustFlush = void 0;
        var _x = void 0, _y = void 0, _m00 = void 0, _m04 = void 0, _m12 = void 0, _m01 = void 0, _m05 = void 0, _m13 = void 0;
        var _r = void 0, _g = void 0, _b = void 0, _fr = void 0, _fg = void 0, _fb = void 0, _fa = void 0, _dr = void 0, _dg = void 0, _db = void 0, _da = void 0;
        var _comp = void 0, _buffer = void 0, _renderer = void 0, _node = void 0, _needColor = void 0;
        function _getSlotMaterial(tex, blendMode) {
            var src = void 0, dst = void 0;
            switch (blendMode) {
            case spine.BlendMode.Additive:
                src = _premultipliedAlpha ? cc.macro.ONE : cc.macro.SRC_ALPHA;
                dst = cc.macro.ONE;
                break;
            case spine.BlendMode.Multiply:
                src = cc.macro.DST_COLOR;
                dst = cc.macro.ONE_MINUS_SRC_ALPHA;
                break;
            case spine.BlendMode.Screen:
                src = cc.macro.ONE;
                dst = cc.macro.ONE_MINUS_SRC_COLOR;
                break;
            case spine.BlendMode.Normal:
            default:
                src = _premultipliedAlpha ? cc.macro.ONE : cc.macro.SRC_ALPHA;
                dst = cc.macro.ONE_MINUS_SRC_ALPHA;
                break;
            }
            var useModel = !_comp.enableBatch;
            var key = tex.url + src + dst + _useTint + useModel;
            var baseMaterial = _comp.sharedMaterials[0];
            if (!baseMaterial)
                return null;
            var materialCache = _comp._materialCache;
            var material = materialCache[key];
            if (!material) {
                var baseKey = baseMaterial._hash;
                if (!materialCache[baseKey]) {
                    material = baseMaterial;
                } else {
                    material = new cc.Material();
                    material.copy(baseMaterial);
                }
                material.define('_USE_MODEL', useModel);
                material.define('USE_TINT', _useTint);
                material.setProperty('texture', tex);
                var pass = material.effect.getDefaultTechnique().passes[0];
                pass.setBlend(true, gfx.BLEND_FUNC_ADD, src, dst, gfx.BLEND_FUNC_ADD, src, dst);
                material.updateHash(key);
                materialCache[key] = material;
            } else if (material.getProperty('texture') !== tex) {
                material.setProperty('texture', tex);
                material.updateHash(key);
            }
            return material;
        }
        function _handleColor(color) {
            _fa = color.fa * _nodeA;
            _multiplier = _premultipliedAlpha ? _fa / 255 : 1;
            _r = _nodeR * _multiplier;
            _g = _nodeG * _multiplier;
            _b = _nodeB * _multiplier;
            _fr = color.fr * _r;
            _fg = color.fg * _g;
            _fb = color.fb * _b;
            _finalColor32 = (_fa << 24 >>> 0) + (_fb << 16) + (_fg << 8) + _fr;
            _dr = color.dr * _r;
            _dg = color.dg * _g;
            _db = color.db * _b;
            _da = _premultipliedAlpha ? 255 : 0;
            _darkColor32 = (_da << 24 >>> 0) + (_db << 16) + (_dg << 8) + _dr;
        }
        var spineAssembler = {
            updateRenderData: function updateRenderData(comp) {
                var skeleton = comp._skeleton;
                if (skeleton) {
                    skeleton.updateWorldTransform();
                }
            },
            fillVertices: function fillVertices(skeletonColor, attachmentColor, slotColor, clipper, slot) {
                var vbuf = _buffer._vData, ibuf = _buffer._iData, uintVData = _buffer._uintVData;
                var offsetInfo = void 0;
                _finalColor.a = slotColor.a * attachmentColor.a * skeletonColor.a * _nodeA * 255;
                _multiplier = _premultipliedAlpha ? _finalColor.a : 255;
                _tempr = _nodeR * attachmentColor.r * skeletonColor.r * _multiplier;
                _tempg = _nodeG * attachmentColor.g * skeletonColor.g * _multiplier;
                _tempb = _nodeB * attachmentColor.b * skeletonColor.b * _multiplier;
                _finalColor.r = _tempr * slotColor.r;
                _finalColor.g = _tempg * slotColor.g;
                _finalColor.b = _tempb * slotColor.b;
                if (slot.darkColor == null) {
                    _darkColor.set(0, 0, 0, 1);
                } else {
                    _darkColor.r = slot.darkColor.r * _tempr;
                    _darkColor.g = slot.darkColor.g * _tempg;
                    _darkColor.b = slot.darkColor.b * _tempb;
                }
                _darkColor.a = _premultipliedAlpha ? 255 : 0;
                if (!clipper.isClipping()) {
                    _finalColor32 = (_finalColor.a << 24 >>> 0) + (_finalColor.b << 16) + (_finalColor.g << 8) + _finalColor.r;
                    _darkColor32 = (_darkColor.a << 24 >>> 0) + (_darkColor.b << 16) + (_darkColor.g << 8) + _darkColor.r;
                    if (!_useTint) {
                        for (var v = _vertexFloatOffset, n = _vertexFloatOffset + _vertexFloatCount; v < n; v += _perVertexSize) {
                            uintVData[v + 4] = _finalColor32;
                        }
                    } else {
                        for (var _v = _vertexFloatOffset, _n = _vertexFloatOffset + _vertexFloatCount; _v < _n; _v += _perVertexSize) {
                            uintVData[_v + 4] = _finalColor32;
                            uintVData[_v + 5] = _darkColor32;
                        }
                    }
                } else {
                    var uvs = vbuf.subarray(_vertexFloatOffset + 2);
                    clipper.clipTriangles(vbuf.subarray(_vertexFloatOffset), _vertexFloatCount, ibuf.subarray(_indexOffset), _indexCount, uvs, _finalColor, _darkColor, _useTint, _perVertexSize);
                    var clippedVertices = new Float32Array(clipper.clippedVertices);
                    var clippedTriangles = clipper.clippedTriangles;
                    _indexCount = clippedTriangles.length;
                    _vertexFloatCount = clippedVertices.length / _perClipVertexSize * _perVertexSize;
                    offsetInfo = _buffer.request(_vertexFloatCount / _perVertexSize, _indexCount);
                    _indexOffset = offsetInfo.indiceOffset, _vertexOffset = offsetInfo.vertexOffset, _vertexFloatOffset = offsetInfo.byteOffset >> 2;
                    vbuf = _buffer._vData, ibuf = _buffer._iData;
                    uintVData = _buffer._uintVData;
                    ibuf.set(clippedTriangles, _indexOffset);
                    if (!_useTint) {
                        for (var _v2 = 0, _n2 = clippedVertices.length, offset = _vertexFloatOffset; _v2 < _n2; _v2 += 8, offset += _perVertexSize) {
                            vbuf[offset] = clippedVertices[_v2];
                            vbuf[offset + 1] = clippedVertices[_v2 + 1];
                            vbuf[offset + 2] = clippedVertices[_v2 + 6];
                            vbuf[offset + 3] = clippedVertices[_v2 + 7];
                            _finalColor32 = (clippedVertices[_v2 + 5] << 24 >>> 0) + (clippedVertices[_v2 + 4] << 16) + (clippedVertices[_v2 + 3] << 8) + clippedVertices[_v2 + 2];
                            uintVData[offset + 4] = _finalColor32;
                        }
                    } else {
                        for (var _v3 = 0, _n3 = clippedVertices.length, _offset = _vertexFloatOffset; _v3 < _n3; _v3 += 12, _offset += _perVertexSize) {
                            vbuf[_offset] = clippedVertices[_v3];
                            vbuf[_offset + 1] = clippedVertices[_v3 + 1];
                            vbuf[_offset + 2] = clippedVertices[_v3 + 6];
                            vbuf[_offset + 3] = clippedVertices[_v3 + 7];
                            _finalColor32 = (clippedVertices[_v3 + 5] << 24 >>> 0) + (clippedVertices[_v3 + 4] << 16) + (clippedVertices[_v3 + 3] << 8) + clippedVertices[_v3 + 2];
                            uintVData[_offset + 4] = _finalColor32;
                            _darkColor32 = (clippedVertices[_v3 + 11] << 24 >>> 0) + (clippedVertices[_v3 + 10] << 16) + (clippedVertices[_v3 + 9] << 8) + clippedVertices[_v3 + 8];
                            uintVData[_offset + 5] = _darkColor32;
                        }
                    }
                }
            },
            realTimeTraverse: function realTimeTraverse(worldMat) {
                var vbuf = void 0;
                var ibuf = void 0;
                var locSkeleton = _comp._skeleton;
                var skeletonColor = locSkeleton.color;
                var graphics = _comp._debugRenderer;
                var clipper = _comp._clipper;
                var material = null;
                var attachment = void 0, attachmentColor = void 0, slotColor = void 0, uvs = void 0, triangles = void 0;
                var isRegion = void 0, isMesh = void 0, isClip = void 0;
                var offsetInfo = void 0;
                var slot = void 0;
                _slotRangeStart = _comp._startSlotIndex;
                _slotRangeEnd = _comp._endSlotIndex;
                _inRange = false;
                if (_slotRangeStart == -1)
                    _inRange = true;
                _debugSlots = _comp.debugSlots;
                _debugBones = _comp.debugBones;
                if (graphics && (_debugBones || _debugSlots)) {
                    graphics.clear();
                    graphics.strokeColor = _slotColor;
                    graphics.lineWidth = 5;
                }
                _perClipVertexSize = _useTint ? 12 : 8;
                _vertexFloatCount = 0;
                _vertexFloatOffset = 0;
                _vertexOffset = 0;
                _indexCount = 0;
                _indexOffset = 0;
                for (var slotIdx = 0, slotCount = locSkeleton.drawOrder.length; slotIdx < slotCount; slotIdx++) {
                    slot = locSkeleton.drawOrder[slotIdx];
                    if (_slotRangeStart >= 0 && _slotRangeStart == slot.data.index) {
                        _inRange = true;
                    }
                    if (!_inRange) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    if (_slotRangeEnd >= 0 && _slotRangeEnd == slot.data.index) {
                        _inRange = false;
                    }
                    _vertexFloatCount = 0;
                    _indexCount = 0;
                    attachment = slot.getAttachment();
                    if (!attachment) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    isRegion = attachment instanceof spine.RegionAttachment;
                    isMesh = attachment instanceof spine.MeshAttachment;
                    isClip = attachment instanceof spine.ClippingAttachment;
                    if (isClip) {
                        clipper.clipStart(slot, attachment);
                        continue;
                    }
                    if (!isRegion && !isMesh) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    material = _getSlotMaterial(attachment.region.texture._texture, slot.data.blendMode);
                    if (!material) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    if (_mustFlush || material._hash !== _renderer.material._hash) {
                        _mustFlush = false;
                        _renderer._flush();
                        _renderer.node = _node;
                        _renderer.material = material;
                    }
                    if (isRegion) {
                        triangles = _quadTriangles;
                        _vertexFloatCount = 4 * _perVertexSize;
                        _indexCount = 6;
                        offsetInfo = _buffer.request(4, 6);
                        _indexOffset = offsetInfo.indiceOffset, _vertexOffset = offsetInfo.vertexOffset, _vertexFloatOffset = offsetInfo.byteOffset >> 2;
                        vbuf = _buffer._vData, ibuf = _buffer._iData;
                        attachment.computeWorldVertices(slot.bone, vbuf, _vertexFloatOffset, _perVertexSize);
                        if (graphics && _debugSlots) {
                            graphics.moveTo(vbuf[_vertexFloatOffset], vbuf[_vertexFloatOffset + 1]);
                            for (var ii = _vertexFloatOffset + _perVertexSize, nn = _vertexFloatOffset + _vertexFloatCount; ii < nn; ii += _perVertexSize) {
                                graphics.lineTo(vbuf[ii], vbuf[ii + 1]);
                            }
                            graphics.close();
                            graphics.stroke();
                        }
                    } else if (isMesh) {
                        triangles = attachment.triangles;
                        _vertexFloatCount = (attachment.worldVerticesLength >> 1) * _perVertexSize;
                        _indexCount = triangles.length;
                        offsetInfo = _buffer.request(_vertexFloatCount / _perVertexSize, _indexCount);
                        _indexOffset = offsetInfo.indiceOffset, _vertexOffset = offsetInfo.vertexOffset, _vertexFloatOffset = offsetInfo.byteOffset >> 2;
                        vbuf = _buffer._vData, ibuf = _buffer._iData;
                        attachment.computeWorldVertices(slot, 0, attachment.worldVerticesLength, vbuf, _vertexFloatOffset, _perVertexSize);
                    }
                    if (_vertexFloatCount == 0 || _indexCount == 0) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    ibuf.set(triangles, _indexOffset);
                    uvs = attachment.uvs;
                    for (var v = _vertexFloatOffset, n = _vertexFloatOffset + _vertexFloatCount, u = 0; v < n; v += _perVertexSize, u += 2) {
                        vbuf[v + 2] = uvs[u];
                        vbuf[v + 3] = uvs[u + 1];
                    }
                    attachmentColor = attachment.color, slotColor = slot.color;
                    this.fillVertices(skeletonColor, attachmentColor, slotColor, clipper, slot);
                    if (_indexCount > 0) {
                        for (var _ii = _indexOffset, _nn = _indexOffset + _indexCount; _ii < _nn; _ii++) {
                            ibuf[_ii] += _vertexOffset;
                        }
                        if (worldMat) {
                            _m00 = worldMat.m00;
                            _m04 = worldMat.m04;
                            _m12 = worldMat.m12;
                            _m01 = worldMat.m01;
                            _m05 = worldMat.m05;
                            _m13 = worldMat.m13;
                            for (var _ii2 = _vertexFloatOffset, _nn2 = _vertexFloatOffset + _vertexFloatCount; _ii2 < _nn2; _ii2 += _perVertexSize) {
                                _x = vbuf[_ii2];
                                _y = vbuf[_ii2 + 1];
                                vbuf[_ii2] = _x * _m00 + _y * _m04 + _m12;
                                vbuf[_ii2 + 1] = _x * _m01 + _y * _m05 + _m13;
                            }
                        }
                        _buffer.adjust(_vertexFloatCount / _perVertexSize, _indexCount);
                    }
                    clipper.clipEndWithSlot(slot);
                }
                clipper.clipEnd();
                if (graphics && _debugBones) {
                    var bone = void 0;
                    graphics.strokeColor = _boneColor;
                    graphics.fillColor = _slotColor;
                    for (var i = 0, _n4 = locSkeleton.bones.length; i < _n4; i++) {
                        bone = locSkeleton.bones[i];
                        var x = bone.data.length * bone.a + bone.worldX;
                        var y = bone.data.length * bone.c + bone.worldY;
                        graphics.moveTo(bone.worldX, bone.worldY);
                        graphics.lineTo(x, y);
                        graphics.stroke();
                        graphics.circle(bone.worldX, bone.worldY, Math.PI * 2);
                        graphics.fill();
                        if (i === 0) {
                            graphics.fillColor = _originColor;
                        }
                    }
                }
            },
            cacheTraverse: function cacheTraverse(worldMat) {
                var frame = _comp._curFrame;
                if (!frame)
                    return;
                var segments = frame.segments;
                if (segments.length == 0)
                    return;
                var vbuf = void 0, ibuf = void 0, uintbuf = void 0;
                var material = void 0;
                var offsetInfo = void 0;
                var vertices = frame.vertices;
                var indices = frame.indices;
                var uintVert = frame.uintVert;
                var frameVFOffset = 0, frameIndexOffset = 0, segVFCount = 0;
                if (worldMat) {
                    _m00 = worldMat.m00;
                    _m04 = worldMat.m04;
                    _m12 = worldMat.m12;
                    _m01 = worldMat.m01;
                    _m05 = worldMat.m05;
                    _m13 = worldMat.m13;
                }
                var colorOffset = 0;
                var colors = frame.colors;
                var nowColor = colors[colorOffset++];
                var maxVFOffset = nowColor.vfOffset;
                _handleColor(nowColor);
                for (var i = 0, n = segments.length; i < n; i++) {
                    var segInfo = segments[i];
                    material = _getSlotMaterial(segInfo.tex, segInfo.blendMode);
                    if (!material)
                        continue;
                    if (_mustFlush || material._hash !== _renderer.material._hash) {
                        _mustFlush = false;
                        _renderer._flush();
                        _renderer.node = _node;
                        _renderer.material = material;
                    }
                    _vertexCount = segInfo.vertexCount;
                    _indexCount = segInfo.indexCount;
                    _vertexFloatCount = _vertexCount * _perVertexSize;
                    offsetInfo = _buffer.request(_vertexCount, _indexCount);
                    _indexOffset = offsetInfo.indiceOffset;
                    _vertexOffset = offsetInfo.vertexOffset;
                    _vfOffset = offsetInfo.byteOffset >> 2;
                    vbuf = _buffer._vData;
                    ibuf = _buffer._iData;
                    uintbuf = _buffer._uintVData;
                    for (var ii = _indexOffset, il = _indexOffset + _indexCount; ii < il; ii++) {
                        ibuf[ii] = _vertexOffset + indices[frameIndexOffset++];
                    }
                    segVFCount = segInfo.vfCount;
                    switch (_handleVal) {
                    case NOT_BATCH_ONE_COLOR:
                        for (var _ii3 = _vfOffset, _il = _vfOffset + _vertexFloatCount; _ii3 < _il;) {
                            vbuf[_ii3++] = vertices[frameVFOffset++];
                            vbuf[_ii3++] = vertices[frameVFOffset++];
                            vbuf[_ii3++] = vertices[frameVFOffset++];
                            vbuf[_ii3++] = vertices[frameVFOffset++];
                            uintbuf[_ii3++] = uintVert[frameVFOffset++];
                            frameVFOffset++;
                        }
                        break;
                    case NOT_BATCH_TWO_COLOR:
                        vbuf.set(vertices.subarray(frameVFOffset, frameVFOffset + _vertexFloatCount), _vfOffset);
                        frameVFOffset += _vertexFloatCount;
                        break;
                    case BATCH_ONE_COLOR:
                        for (var _ii4 = _vfOffset, _il2 = _vfOffset + _vertexFloatCount; _ii4 < _il2;) {
                            _x = vertices[frameVFOffset++];
                            _y = vertices[frameVFOffset++];
                            vbuf[_ii4++] = _x * _m00 + _y * _m04 + _m12;
                            vbuf[_ii4++] = _x * _m01 + _y * _m05 + _m13;
                            vbuf[_ii4++] = vertices[frameVFOffset++];
                            vbuf[_ii4++] = vertices[frameVFOffset++];
                            uintbuf[_ii4++] = uintVert[frameVFOffset++];
                            frameVFOffset++;
                        }
                        break;
                    case BATCH_TWO_COLOR:
                        for (var _ii5 = _vfOffset, _il3 = _vfOffset + _vertexFloatCount; _ii5 < _il3;) {
                            _x = vertices[frameVFOffset++];
                            _y = vertices[frameVFOffset++];
                            vbuf[_ii5++] = _x * _m00 + _y * _m04 + _m12;
                            vbuf[_ii5++] = _x * _m01 + _y * _m05 + _m13;
                            vbuf[_ii5++] = vertices[frameVFOffset++];
                            vbuf[_ii5++] = vertices[frameVFOffset++];
                            uintbuf[_ii5++] = uintVert[frameVFOffset++];
                            uintbuf[_ii5++] = uintVert[frameVFOffset++];
                        }
                        break;
                    }
                    _buffer.adjust(_vertexCount, _indexCount);
                    if (!_needColor)
                        continue;
                    var frameColorOffset = frameVFOffset - segVFCount;
                    for (var _ii6 = _vfOffset + 4, _il4 = _vfOffset + 4 + _vertexFloatCount; _ii6 < _il4; _ii6 += _perVertexSize, frameColorOffset += 6) {
                        if (frameColorOffset >= maxVFOffset) {
                            nowColor = colors[colorOffset++];
                            _handleColor(nowColor);
                            maxVFOffset = nowColor.vfOffset;
                        }
                        uintbuf[_ii6] = _finalColor32;
                        _useTint && (uintbuf[_ii6 + 1] = _darkColor32);
                    }
                }
            },
            fillBuffers: function fillBuffers(comp, renderer) {
                var node = comp.node;
                node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
                if (!comp._skeleton)
                    return;
                var nodeColor = node._color;
                _nodeR = nodeColor.r / 255;
                _nodeG = nodeColor.g / 255;
                _nodeB = nodeColor.b / 255;
                _nodeA = nodeColor.a / 255;
                _useTint = comp.useTint;
                _vertexFormat = _useTint ? VFTwoColor : VFOneColor;
                _perVertexSize = _useTint ? 6 : 5;
                _node = comp.node;
                _buffer = renderer.getBuffer('spine', _vertexFormat);
                _renderer = renderer;
                _comp = comp;
                _mustFlush = true;
                _premultipliedAlpha = comp.premultipliedAlpha;
                _multiplier = 1;
                _handleVal = 0;
                _needColor = false;
                if (nodeColor._val !== 4294967295 || _premultipliedAlpha) {
                    _needColor = true;
                }
                if (_useTint) {
                    _handleVal |= FLAG_TWO_COLOR;
                }
                var worldMat = undefined;
                if (_comp.enableBatch) {
                    worldMat = _node._worldMatrix;
                    _mustFlush = false;
                    _handleVal |= FLAG_BATCH;
                }
                if (comp.isAnimationCached()) {
                    this.cacheTraverse(worldMat);
                } else {
                    this.realTimeTraverse(worldMat);
                }
                _node = undefined;
                _buffer = undefined;
                _renderer = undefined;
                _comp = undefined;
            }
        };
        Skeleton._assembler = spineAssembler;
        module.exports = spineAssembler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwaW5lLWFzc2VtYmxlci5qcyIsIi9Vc2Vycy96emYyMDE5L0Rlc2t0b3AvZGV2ZWxvcG1lbnQvc3VwcG9ydF9hc3RjL2VuZ2luZS9leHRlbnNpb25zL3NwaW5lL3NwaW5lLWFzc2VtYmxlci5qcyJdLCJuYW1lcyI6WyJTa2VsZXRvbiIsInJlcXVpcmUiLCJzcGluZSIsIlJlbmRlckZsb3ciLCJWZXJ0ZXhGb3JtYXQiLCJWRk9uZUNvbG9yIiwidmZtdFBvc1V2Q29sb3IiLCJWRlR3b0NvbG9yIiwidmZtdFBvc1V2VHdvQ29sb3IiLCJnZngiLCJjYyIsIkZMQUdfQkFUQ0giLCJGTEFHX1RXT19DT0xPUiIsIk5PVF9CQVRDSF9PTkVfQ09MT1IiLCJOT1RfQkFUQ0hfVFdPX0NPTE9SIiwiQkFUQ0hfT05FX0NPTE9SIiwiQkFUQ0hfVFdPX0NPTE9SIiwiX2hhbmRsZVZhbCIsIl9xdWFkVHJpYW5nbGVzIiwiX3Nsb3RDb2xvciIsImNvbG9yIiwiX2JvbmVDb2xvciIsIl9vcmlnaW5Db2xvciIsIl9maW5hbENvbG9yIiwidW5kZWZpbmVkIiwiX2RhcmtDb2xvciIsIkNDX0pTQiIsIkNvbG9yIiwiX3ByZW11bHRpcGxpZWRBbHBoYSIsIl9tdWx0aXBsaWVyIiwiX3Nsb3RSYW5nZVN0YXJ0IiwiX3Nsb3RSYW5nZUVuZCIsIl91c2VUaW50IiwiX2RlYnVnU2xvdHMiLCJfZGVidWdCb25lcyIsIl9ub2RlUiIsIl9ub2RlRyIsIl9ub2RlQiIsIl9ub2RlQSIsIl9maW5hbENvbG9yMzIiLCJfZGFya0NvbG9yMzIiLCJfdmVydGV4Rm9ybWF0IiwiX3BlclZlcnRleFNpemUiLCJfcGVyQ2xpcFZlcnRleFNpemUiLCJfdmVydGV4RmxvYXRDb3VudCIsIl92ZXJ0ZXhDb3VudCIsIl92ZXJ0ZXhGbG9hdE9mZnNldCIsIl92ZXJ0ZXhPZmZzZXQiLCJfaW5kZXhDb3VudCIsIl9pbmRleE9mZnNldCIsIl92Zk9mZnNldCIsIl90ZW1wciIsIl90ZW1wZyIsIl90ZW1wYiIsIl9pblJhbmdlIiwiX211c3RGbHVzaCIsIl94IiwiX3kiLCJfbTAwIiwiX20wNCIsIl9tMTIiLCJfbTAxIiwiX20wNSIsIl9tMTMiLCJfciIsIl9nIiwiX2IiLCJfZnIiLCJfZmciLCJfZmIiLCJfZmEiLCJfZHIiLCJfZGciLCJfZGIiLCJfZGEiLCJfY29tcCIsIl9idWZmZXIiLCJfcmVuZGVyZXIiLCJfbm9kZSIsIl9uZWVkQ29sb3IiLCJfZ2V0U2xvdE1hdGVyaWFsIiwidGV4IiwiYmxlbmRNb2RlIiwic3JjIiwiZHN0IiwiQmxlbmRNb2RlIiwiQWRkaXRpdmUiLCJtYWNybyIsIk9ORSIsIlNSQ19BTFBIQSIsIk11bHRpcGx5IiwiRFNUX0NPTE9SIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIlNjcmVlbiIsIk9ORV9NSU5VU19TUkNfQ09MT1IiLCJOb3JtYWwiLCJ1c2VNb2RlbCIsImVuYWJsZUJhdGNoIiwia2V5IiwidXJsIiwiYmFzZU1hdGVyaWFsIiwic2hhcmVkTWF0ZXJpYWxzIiwibWF0ZXJpYWxDYWNoZSIsIl9tYXRlcmlhbENhY2hlIiwibWF0ZXJpYWwiLCJiYXNlS2V5IiwiX2hhc2giLCJNYXRlcmlhbCIsImNvcHkiLCJkZWZpbmUiLCJzZXRQcm9wZXJ0eSIsInBhc3MiLCJlZmZlY3QiLCJnZXREZWZhdWx0VGVjaG5pcXVlIiwicGFzc2VzIiwic2V0QmxlbmQiLCJCTEVORF9GVU5DX0FERCIsInVwZGF0ZUhhc2giLCJnZXRQcm9wZXJ0eSIsIl9oYW5kbGVDb2xvciIsImZhIiwiZnIiLCJmZyIsImZiIiwiZHIiLCJkZyIsImRiIiwic3BpbmVBc3NlbWJsZXIiLCJ1cGRhdGVSZW5kZXJEYXRhIiwiY29tcCIsInNrZWxldG9uIiwiX3NrZWxldG9uIiwidXBkYXRlV29ybGRUcmFuc2Zvcm0iLCJmaWxsVmVydGljZXMiLCJza2VsZXRvbkNvbG9yIiwiYXR0YWNobWVudENvbG9yIiwic2xvdENvbG9yIiwiY2xpcHBlciIsInNsb3QiLCJ2YnVmIiwiX3ZEYXRhIiwiaWJ1ZiIsIl9pRGF0YSIsInVpbnRWRGF0YSIsIl91aW50VkRhdGEiLCJvZmZzZXRJbmZvIiwiYSIsInIiLCJnIiwiYiIsImRhcmtDb2xvciIsInNldCIsImlzQ2xpcHBpbmciLCJ2IiwibiIsInV2cyIsInN1YmFycmF5IiwiY2xpcFRyaWFuZ2xlcyIsImNsaXBwZWRWZXJ0aWNlcyIsIkZsb2F0MzJBcnJheSIsImNsaXBwZWRUcmlhbmdsZXMiLCJsZW5ndGgiLCJyZXF1ZXN0IiwiaW5kaWNlT2Zmc2V0IiwidmVydGV4T2Zmc2V0IiwiYnl0ZU9mZnNldCIsIm9mZnNldCIsInJlYWxUaW1lVHJhdmVyc2UiLCJ3b3JsZE1hdCIsImxvY1NrZWxldG9uIiwiZ3JhcGhpY3MiLCJfZGVidWdSZW5kZXJlciIsIl9jbGlwcGVyIiwiYXR0YWNobWVudCIsInRyaWFuZ2xlcyIsImlzUmVnaW9uIiwiaXNNZXNoIiwiaXNDbGlwIiwiX3N0YXJ0U2xvdEluZGV4IiwiX2VuZFNsb3RJbmRleCIsImRlYnVnU2xvdHMiLCJkZWJ1Z0JvbmVzIiwiY2xlYXIiLCJzdHJva2VDb2xvciIsImxpbmVXaWR0aCIsInNsb3RJZHgiLCJzbG90Q291bnQiLCJkcmF3T3JkZXIiLCJkYXRhIiwiaW5kZXgiLCJjbGlwRW5kV2l0aFNsb3QiLCJnZXRBdHRhY2htZW50IiwiUmVnaW9uQXR0YWNobWVudCIsIk1lc2hBdHRhY2htZW50IiwiQ2xpcHBpbmdBdHRhY2htZW50IiwiY2xpcFN0YXJ0IiwicmVnaW9uIiwidGV4dHVyZSIsIl90ZXh0dXJlIiwiX2ZsdXNoIiwibm9kZSIsImNvbXB1dGVXb3JsZFZlcnRpY2VzIiwiYm9uZSIsIm1vdmVUbyIsImlpIiwibm4iLCJsaW5lVG8iLCJjbG9zZSIsInN0cm9rZSIsIndvcmxkVmVydGljZXNMZW5ndGgiLCJ1IiwibTAwIiwibTA0IiwibTEyIiwibTAxIiwibTA1IiwibTEzIiwiYWRqdXN0IiwiY2xpcEVuZCIsImZpbGxDb2xvciIsImkiLCJib25lcyIsIngiLCJ3b3JsZFgiLCJ5IiwiYyIsIndvcmxkWSIsImNpcmNsZSIsIk1hdGgiLCJQSSIsImZpbGwiLCJjYWNoZVRyYXZlcnNlIiwiZnJhbWUiLCJfY3VyRnJhbWUiLCJzZWdtZW50cyIsInVpbnRidWYiLCJ2ZXJ0aWNlcyIsImluZGljZXMiLCJ1aW50VmVydCIsImZyYW1lVkZPZmZzZXQiLCJmcmFtZUluZGV4T2Zmc2V0Iiwic2VnVkZDb3VudCIsImNvbG9yT2Zmc2V0IiwiY29sb3JzIiwibm93Q29sb3IiLCJtYXhWRk9mZnNldCIsInZmT2Zmc2V0Iiwic2VnSW5mbyIsInZlcnRleENvdW50IiwiaW5kZXhDb3VudCIsImlsIiwidmZDb3VudCIsImZyYW1lQ29sb3JPZmZzZXQiLCJmaWxsQnVmZmVycyIsInJlbmRlcmVyIiwiX3JlbmRlckZsYWciLCJGTEFHX1VQREFURV9SRU5ERVJfREFUQSIsIm5vZGVDb2xvciIsIl9jb2xvciIsInVzZVRpbnQiLCJnZXRCdWZmZXIiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJfdmFsIiwiX3dvcmxkTWF0cml4IiwiaXNBbmltYXRpb25DYWNoZWQiLCJfYXNzZW1ibGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBeUJBLElBQU1BLFFBQUFBLEdBQVdDLE9BQUFBLENBQVEsWUFBUkEsQ0FBakI7UUFDQSxJQUFNQyxLQUFBQSxHQUFRRCxPQUFBQSxDQUFRLGFBQVJBLENBQWQ7UUFDQSxJQUFNRSxVQUFBQSxHQUFhRixPQUFBQSxDQUFRLHlDQUFSQSxDQUFuQjtRQUNBLElBQU1HLFlBQUFBLEdBQWVILE9BQUFBLENBQVEsaURBQVJBLENBQXJCO1FBQ0EsSUFBTUksVUFBQUEsR0FBYUQsWUFBQUEsQ0FBYUUsY0FBaEM7UUFDQSxJQUFNQyxVQUFBQSxHQUFhSCxZQUFBQSxDQUFhSSxpQkFBaEM7UUFDQSxJQUFNQyxHQUFBQSxHQUFNQyxFQUFBQSxDQUFHRCxHQUFmO1FBRUEsSUFBTUUsVUFBQUEsR0FBYSxF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QkFxQ3pCLElBQUltRCxLQUFBQSxDQUFNc0IsV0FBVixFQUF1QjtBQUFBLG9CQUNuQnVFLFFBQUFBLEdBQVcxRixLQUFBQSxDQUFNeUwsWUFBakIvRixDQURtQjtBQUFBLG9CQUVuQmpILFVBQUFBLEdBQWEsS0FBYkEsQ0FGbUI7QUFBQSxvQkFHbkJ0QyxVQUFBQSxJQUFjTixVQUFkTSxDQUhtQjtBQUFBLGlCQXJDRTtBQUFBLGdCQTJDekIsSUFBSWdILElBQUFBLENBQUt1SSxpQkFBTHZJLEVBQUosRUFBOEI7QUFBQSxvQkFFMUIsS0FBS3NHLGFBQUwsQ0FBbUIvRCxRQUFuQixFQUYwQjtBQUFBLGlCQUE5QixNQUdPO0FBQUEsb0JBQ0gsS0FBS0QsZ0JBQUwsQ0FBc0JDLFFBQXRCLEVBREc7QUFBQSxpQkE5Q2tCO0FBQUEsZ0JBbUR6QjFGLEtBQUFBLEdBQVF0RCxTQUFSc0QsQ0FuRHlCO0FBQUEsZ0JBb0R6QkYsT0FBQUEsR0FBVXBELFNBQVZvRCxDQXBEeUI7QUFBQSxnQkFxRHpCQyxTQUFBQSxHQUFZckQsU0FBWnFELENBckR5QjtBQUFBLGdCQXNEekJGLEtBQUFBLEdBQVFuRCxTQUFSbUQsQ0F0RHlCO0FBQUEsYUExYVo7QUFBQSxTQUFyQjtRQW9lQTNFLFFBQUFBLENBQVN5USxVQUFUelEsR0FBc0IrSCxjQUF0Qi9IO1FBRUEwUSxNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQjNJLGNBQWpCMkkiLCJmaWxlIjoic3BpbmUtYXNzZW1ibGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuY29uc3QgU2tlbGV0b24gPSByZXF1aXJlKCcuL1NrZWxldG9uJyk7XG5jb25zdCBzcGluZSA9IHJlcXVpcmUoJy4vbGliL3NwaW5lJyk7XG5jb25zdCBSZW5kZXJGbG93ID0gcmVxdWlyZSgnLi4vLi4vY29jb3MyZC9jb3JlL3JlbmRlcmVyL3JlbmRlci1mbG93Jyk7XG5jb25zdCBWZXJ0ZXhGb3JtYXQgPSByZXF1aXJlKCcuLi8uLi9jb2NvczJkL2NvcmUvcmVuZGVyZXIvd2ViZ2wvdmVydGV4LWZvcm1hdCcpXG5jb25zdCBWRk9uZUNvbG9yID0gVmVydGV4Rm9ybWF0LnZmbXRQb3NVdkNvbG9yO1xuY29uc3QgVkZUd29Db2xvciA9IFZlcnRleEZvcm1hdC52Zm10UG9zVXZUd29Db2xvcjtcbmNvbnN0IGdmeCA9IGNjLmdmeDtcblxuY29uc3QgRkxBR19CQVRDSCA9IDB4MTA7XG5jb25zdCBGTEFHX1RXT19DT0xPUiA9IDB4MDE7XG5jb25zdCBOT1RfQkFUQ0hfT05FX0NPTE9SID0gMHgwMDtcbmNvbnN0IE5PVF9CQVRDSF9UV09fQ09MT1IgPSAweDAxO1xuY29uc3QgQkFUQ0hfT05FX0NPTE9SID0gMHgxMDtcbmNvbnN0IEJBVENIX1RXT19DT0xPUiA9IDB4MTE7XG5cbmxldCBfaGFuZGxlVmFsID0gMHgwMDtcbmxldCBfcXVhZFRyaWFuZ2xlcyA9IFswLCAxLCAyLCAyLCAzLCAwXTtcbmxldCBfc2xvdENvbG9yID0gY2MuY29sb3IoMCwgMCwgMjU1LCAyNTUpO1xubGV0IF9ib25lQ29sb3IgPSBjYy5jb2xvcigyNTUsIDAsIDAsIDI1NSk7XG5sZXQgX29yaWdpbkNvbG9yID0gY2MuY29sb3IoMCwgMjU1LCAwLCAyNTUpO1xuXG5sZXQgX2ZpbmFsQ29sb3IgPSB1bmRlZmluZWQ7XG5sZXQgX2RhcmtDb2xvciA9IHVuZGVmaW5lZDtcbmlmICghQ0NfSlNCKSB7XG4gICAgX2ZpbmFsQ29sb3IgPSBuZXcgc3BpbmUuQ29sb3IoMSwgMSwgMSwgMSk7XG4gICAgX2RhcmtDb2xvciA9IG5ldyBzcGluZS5Db2xvcigxLCAxLCAxLCAxKTtcbn1cblxubGV0IF9wcmVtdWx0aXBsaWVkQWxwaGE7XG5sZXQgX211bHRpcGxpZXI7XG5sZXQgX3Nsb3RSYW5nZVN0YXJ0O1xubGV0IF9zbG90UmFuZ2VFbmQ7XG5sZXQgX3VzZVRpbnQ7XG5sZXQgX2RlYnVnU2xvdHM7XG5sZXQgX2RlYnVnQm9uZXM7XG5sZXQgX25vZGVSLFxuICAgIF9ub2RlRyxcbiAgICBfbm9kZUIsXG4gICAgX25vZGVBO1xubGV0IF9maW5hbENvbG9yMzIsIF9kYXJrQ29sb3IzMjtcbmxldCBfdmVydGV4Rm9ybWF0O1xubGV0IF9wZXJWZXJ0ZXhTaXplO1xubGV0IF9wZXJDbGlwVmVydGV4U2l6ZTtcblxubGV0IF92ZXJ0ZXhGbG9hdENvdW50ID0gMCwgX3ZlcnRleENvdW50ID0gMCwgX3ZlcnRleEZsb2F0T2Zmc2V0ID0gMCwgX3ZlcnRleE9mZnNldCA9IDAsXG4gICAgX2luZGV4Q291bnQgPSAwLCBfaW5kZXhPZmZzZXQgPSAwLCBfdmZPZmZzZXQgPSAwO1xubGV0IF90ZW1wciwgX3RlbXBnLCBfdGVtcGI7XG5sZXQgX2luUmFuZ2U7XG5sZXQgX211c3RGbHVzaDtcbmxldCBfeCwgX3ksIF9tMDAsIF9tMDQsIF9tMTIsIF9tMDEsIF9tMDUsIF9tMTM7XG5sZXQgX3IsIF9nLCBfYiwgX2ZyLCBfZmcsIF9mYiwgX2ZhLCBfZHIsIF9kZywgX2RiLCBfZGE7XG5sZXQgX2NvbXAsIF9idWZmZXIsIF9yZW5kZXJlciwgX25vZGUsIF9uZWVkQ29sb3I7XG5cbmZ1bmN0aW9uIF9nZXRTbG90TWF0ZXJpYWwgKHRleCwgYmxlbmRNb2RlKSB7XG4gICAgbGV0IHNyYywgZHN0O1xuICAgIHN3aXRjaCAoYmxlbmRNb2RlKSB7XG4gICAgICAgIGNhc2Ugc3BpbmUuQmxlbmRNb2RlLkFkZGl0aXZlOlxuICAgICAgICAgICAgc3JjID0gX3ByZW11bHRpcGxpZWRBbHBoYSA/IGNjLm1hY3JvLk9ORSA6IGNjLm1hY3JvLlNSQ19BTFBIQTtcbiAgICAgICAgICAgIGRzdCA9IGNjLm1hY3JvLk9ORTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHNwaW5lLkJsZW5kTW9kZS5NdWx0aXBseTpcbiAgICAgICAgICAgIHNyYyA9IGNjLm1hY3JvLkRTVF9DT0xPUjtcbiAgICAgICAgICAgIGRzdCA9IGNjLm1hY3JvLk9ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBzcGluZS5CbGVuZE1vZGUuU2NyZWVuOlxuICAgICAgICAgICAgc3JjID0gY2MubWFjcm8uT05FO1xuICAgICAgICAgICAgZHN0ID0gY2MubWFjcm8uT05FX01JTlVTX1NSQ19DT0xPUjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHNwaW5lLkJsZW5kTW9kZS5Ob3JtYWw6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzcmMgPSBfcHJlbXVsdGlwbGllZEFscGhhID8gY2MubWFjcm8uT05FIDogY2MubWFjcm8uU1JDX0FMUEhBO1xuICAgICAgICAgICAgZHN0ID0gY2MubWFjcm8uT05FX01JTlVTX1NSQ19BTFBIQTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGxldCB1c2VNb2RlbCA9ICFfY29tcC5lbmFibGVCYXRjaDtcbiAgICBsZXQga2V5ID0gdGV4LnVybCArIHNyYyArIGRzdCArIF91c2VUaW50ICsgdXNlTW9kZWw7XG4gICAgbGV0IGJhc2VNYXRlcmlhbCA9IF9jb21wLnNoYXJlZE1hdGVyaWFsc1swXTtcbiAgICBpZiAoIWJhc2VNYXRlcmlhbCkgcmV0dXJuIG51bGw7XG5cbiAgICBsZXQgbWF0ZXJpYWxDYWNoZSA9IF9jb21wLl9tYXRlcmlhbENhY2hlO1xuICAgIGxldCBtYXRlcmlhbCA9IG1hdGVyaWFsQ2FjaGVba2V5XTtcbiAgICBpZiAoIW1hdGVyaWFsKSB7XG4gICAgICAgIGxldCBiYXNlS2V5ID0gYmFzZU1hdGVyaWFsLl9oYXNoO1xuICAgICAgICBpZiAoIW1hdGVyaWFsQ2FjaGVbYmFzZUtleV0pIHtcbiAgICAgICAgICAgIG1hdGVyaWFsID0gYmFzZU1hdGVyaWFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF0ZXJpYWwgPSBuZXcgY2MuTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgIG1hdGVyaWFsLmNvcHkoYmFzZU1hdGVyaWFsKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbWF0ZXJpYWwuZGVmaW5lKCdfVVNFX01PREVMJywgdXNlTW9kZWwpO1xuICAgICAgICBtYXRlcmlhbC5kZWZpbmUoJ1VTRV9USU5UJywgX3VzZVRpbnQpO1xuICAgICAgICAvLyB1cGRhdGUgdGV4dHVyZVxuICAgICAgICBtYXRlcmlhbC5zZXRQcm9wZXJ0eSgndGV4dHVyZScsIHRleCk7XG5cbiAgICAgICAgLy8gdXBkYXRlIGJsZW5kIGZ1bmN0aW9uXG4gICAgICAgIGxldCBwYXNzID0gbWF0ZXJpYWwuZWZmZWN0LmdldERlZmF1bHRUZWNobmlxdWUoKS5wYXNzZXNbMF07XG4gICAgICAgIHBhc3Muc2V0QmxlbmQoXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZ2Z4LkJMRU5EX0ZVTkNfQURELFxuICAgICAgICAgICAgc3JjLCBkc3QsXG4gICAgICAgICAgICBnZnguQkxFTkRfRlVOQ19BREQsXG4gICAgICAgICAgICBzcmMsIGRzdFxuICAgICAgICApO1xuICAgICAgICBtYXRlcmlhbC51cGRhdGVIYXNoKGtleSk7XG4gICAgICAgIG1hdGVyaWFsQ2FjaGVba2V5XSA9IG1hdGVyaWFsO1xuICAgIH1cbiAgICBlbHNlIGlmIChtYXRlcmlhbC5nZXRQcm9wZXJ0eSgndGV4dHVyZScpICE9PSB0ZXgpIHtcbiAgICAgICAgbWF0ZXJpYWwuc2V0UHJvcGVydHkoJ3RleHR1cmUnLCB0ZXgpO1xuICAgICAgICBtYXRlcmlhbC51cGRhdGVIYXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBtYXRlcmlhbDtcbn1cblxuZnVuY3Rpb24gX2hhbmRsZUNvbG9yIChjb2xvcikge1xuICAgIC8vIHRlbXAgcmdiIGhhcyBtdWx0aXBseSAyNTUsIHNvIG5lZWQgZGl2aWRlIDI1NTtcbiAgICBfZmEgPSBjb2xvci5mYSAqIF9ub2RlQTtcbiAgICBfbXVsdGlwbGllciA9IF9wcmVtdWx0aXBsaWVkQWxwaGEgPyBfZmEgLyAyNTUgOiAxO1xuICAgIF9yID0gX25vZGVSICogX211bHRpcGxpZXI7XG4gICAgX2cgPSBfbm9kZUcgKiBfbXVsdGlwbGllcjtcbiAgICBfYiA9IF9ub2RlQiAqIF9tdWx0aXBsaWVyO1xuXG4gICAgX2ZyID0gY29sb3IuZnIgKiBfcjtcbiAgICBfZmcgPSBjb2xvci5mZyAqIF9nO1xuICAgIF9mYiA9IGNvbG9yLmZiICogX2I7XG4gICAgX2ZpbmFsQ29sb3IzMiA9ICgoX2ZhPDwyNCkgPj4+IDApICsgKF9mYjw8MTYpICsgKF9mZzw8OCkgKyBfZnI7XG5cbiAgICBfZHIgPSBjb2xvci5kciAqIF9yO1xuICAgIF9kZyA9IGNvbG9yLmRnICogX2c7XG4gICAgX2RiID0gY29sb3IuZGIgKiBfYjtcbiAgICBfZGEgPSBfcHJlbXVsdGlwbGllZEFscGhhID8gMjU1IDogMDtcbiAgICBfZGFya0NvbG9yMzIgPSAoKF9kYTw8MjQpID4+PiAwKSArIChfZGI8PDE2KSArIChfZGc8PDgpICsgX2RyO1xufVxuXG52YXIgc3BpbmVBc3NlbWJsZXIgPSB7XG5cbiAgICB1cGRhdGVSZW5kZXJEYXRhIChjb21wKSB7XG4gICAgICAgIGxldCBza2VsZXRvbiA9IGNvbXAuX3NrZWxldG9uO1xuICAgICAgICBpZiAoc2tlbGV0b24pIHtcbiAgICAgICAgICAgIHNrZWxldG9uLnVwZGF0ZVdvcmxkVHJhbnNmb3JtKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZmlsbFZlcnRpY2VzIChza2VsZXRvbkNvbG9yLCBhdHRhY2htZW50Q29sb3IsIHNsb3RDb2xvciwgY2xpcHBlciwgc2xvdCkge1xuXG4gICAgICAgIGxldCB2YnVmID0gX2J1ZmZlci5fdkRhdGEsXG4gICAgICAgICAgICBpYnVmID0gX2J1ZmZlci5faURhdGEsXG4gICAgICAgICAgICB1aW50VkRhdGEgPSBfYnVmZmVyLl91aW50VkRhdGE7XG4gICAgICAgIGxldCBvZmZzZXRJbmZvO1xuXG4gICAgICAgIF9maW5hbENvbG9yLmEgPSBzbG90Q29sb3IuYSAqIGF0dGFjaG1lbnRDb2xvci5hICogc2tlbGV0b25Db2xvci5hICogX25vZGVBICogMjU1O1xuICAgICAgICBfbXVsdGlwbGllciA9IF9wcmVtdWx0aXBsaWVkQWxwaGE/IF9maW5hbENvbG9yLmEgOiAyNTU7XG4gICAgICAgIF90ZW1wciA9IF9ub2RlUiAqIGF0dGFjaG1lbnRDb2xvci5yICogc2tlbGV0b25Db2xvci5yICogX211bHRpcGxpZXI7XG4gICAgICAgIF90ZW1wZyA9IF9ub2RlRyAqIGF0dGFjaG1lbnRDb2xvci5nICogc2tlbGV0b25Db2xvci5nICogX211bHRpcGxpZXI7XG4gICAgICAgIF90ZW1wYiA9IF9ub2RlQiAqIGF0dGFjaG1lbnRDb2xvci5iICogc2tlbGV0b25Db2xvci5iICogX211bHRpcGxpZXI7XG4gICAgICAgIFxuICAgICAgICBfZmluYWxDb2xvci5yID0gX3RlbXByICogc2xvdENvbG9yLnI7XG4gICAgICAgIF9maW5hbENvbG9yLmcgPSBfdGVtcGcgKiBzbG90Q29sb3IuZztcbiAgICAgICAgX2ZpbmFsQ29sb3IuYiA9IF90ZW1wYiAqIHNsb3RDb2xvci5iO1xuXG4gICAgICAgIGlmIChzbG90LmRhcmtDb2xvciA9PSBudWxsKSB7XG4gICAgICAgICAgICBfZGFya0NvbG9yLnNldCgwLjAsIDAsIDAsIDEuMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfZGFya0NvbG9yLnIgPSBzbG90LmRhcmtDb2xvci5yICogX3RlbXByO1xuICAgICAgICAgICAgX2RhcmtDb2xvci5nID0gc2xvdC5kYXJrQ29sb3IuZyAqIF90ZW1wZztcbiAgICAgICAgICAgIF9kYXJrQ29sb3IuYiA9IHNsb3QuZGFya0NvbG9yLmIgKiBfdGVtcGI7XG4gICAgICAgIH1cbiAgICAgICAgX2RhcmtDb2xvci5hID0gX3ByZW11bHRpcGxpZWRBbHBoYSA/IDI1NSA6IDA7XG5cbiAgICAgICAgaWYgKCFjbGlwcGVyLmlzQ2xpcHBpbmcoKSkge1xuXG4gICAgICAgICAgICBfZmluYWxDb2xvcjMyID0gKChfZmluYWxDb2xvci5hPDwyNCkgPj4+IDApICsgKF9maW5hbENvbG9yLmI8PDE2KSArIChfZmluYWxDb2xvci5nPDw4KSArIF9maW5hbENvbG9yLnI7XG4gICAgICAgICAgICBfZGFya0NvbG9yMzIgPSAoKF9kYXJrQ29sb3IuYTw8MjQpID4+PiAwKSArIChfZGFya0NvbG9yLmI8PDE2KSArIChfZGFya0NvbG9yLmc8PDgpICsgX2RhcmtDb2xvci5yO1xuXG4gICAgICAgICAgICBpZiAoIV91c2VUaW50KSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdiA9IF92ZXJ0ZXhGbG9hdE9mZnNldCwgbiA9IF92ZXJ0ZXhGbG9hdE9mZnNldCArIF92ZXJ0ZXhGbG9hdENvdW50OyB2IDwgbjsgdiArPSBfcGVyVmVydGV4U2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICB1aW50VkRhdGFbdiArIDRdID0gX2ZpbmFsQ29sb3IzMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHYgPSBfdmVydGV4RmxvYXRPZmZzZXQsIG4gPSBfdmVydGV4RmxvYXRPZmZzZXQgKyBfdmVydGV4RmxvYXRDb3VudDsgdiA8IG47IHYgKz0gX3BlclZlcnRleFNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgdWludFZEYXRhW3YgKyA0XSAgPSBfZmluYWxDb2xvcjMyOyAgICAgLy8gbGlnaHQgY29sb3JcbiAgICAgICAgICAgICAgICAgICAgdWludFZEYXRhW3YgKyA1XSAgPSBfZGFya0NvbG9yMzI7ICAgICAgLy8gZGFyayBjb2xvclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHV2cyA9IHZidWYuc3ViYXJyYXkoX3ZlcnRleEZsb2F0T2Zmc2V0ICsgMik7XG4gICAgICAgICAgICBjbGlwcGVyLmNsaXBUcmlhbmdsZXModmJ1Zi5zdWJhcnJheShfdmVydGV4RmxvYXRPZmZzZXQpLCBfdmVydGV4RmxvYXRDb3VudCwgaWJ1Zi5zdWJhcnJheShfaW5kZXhPZmZzZXQpLCBfaW5kZXhDb3VudCwgdXZzLCBfZmluYWxDb2xvciwgX2RhcmtDb2xvciwgX3VzZVRpbnQsIF9wZXJWZXJ0ZXhTaXplKTtcbiAgICAgICAgICAgIGxldCBjbGlwcGVkVmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KGNsaXBwZXIuY2xpcHBlZFZlcnRpY2VzKTtcbiAgICAgICAgICAgIGxldCBjbGlwcGVkVHJpYW5nbGVzID0gY2xpcHBlci5jbGlwcGVkVHJpYW5nbGVzO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBpbnN1cmUgY2FwYWNpdHlcbiAgICAgICAgICAgIF9pbmRleENvdW50ID0gY2xpcHBlZFRyaWFuZ2xlcy5sZW5ndGg7XG4gICAgICAgICAgICBfdmVydGV4RmxvYXRDb3VudCA9IGNsaXBwZWRWZXJ0aWNlcy5sZW5ndGggLyBfcGVyQ2xpcFZlcnRleFNpemUgKiBfcGVyVmVydGV4U2l6ZTtcblxuICAgICAgICAgICAgb2Zmc2V0SW5mbyA9IF9idWZmZXIucmVxdWVzdChfdmVydGV4RmxvYXRDb3VudCAvIF9wZXJWZXJ0ZXhTaXplLCBfaW5kZXhDb3VudCk7XG4gICAgICAgICAgICBfaW5kZXhPZmZzZXQgPSBvZmZzZXRJbmZvLmluZGljZU9mZnNldCxcbiAgICAgICAgICAgIF92ZXJ0ZXhPZmZzZXQgPSBvZmZzZXRJbmZvLnZlcnRleE9mZnNldCxcbiAgICAgICAgICAgIF92ZXJ0ZXhGbG9hdE9mZnNldCA9IG9mZnNldEluZm8uYnl0ZU9mZnNldCA+PiAyO1xuICAgICAgICAgICAgdmJ1ZiA9IF9idWZmZXIuX3ZEYXRhLFxuICAgICAgICAgICAgaWJ1ZiA9IF9idWZmZXIuX2lEYXRhO1xuICAgICAgICAgICAgdWludFZEYXRhID0gX2J1ZmZlci5fdWludFZEYXRhO1xuXG4gICAgICAgICAgICAvLyBmaWxsIGluZGljZXNcbiAgICAgICAgICAgIGlidWYuc2V0KGNsaXBwZWRUcmlhbmdsZXMsIF9pbmRleE9mZnNldCk7XG5cbiAgICAgICAgICAgIC8vIGZpbGwgdmVydGljZXMgY29udGFpbiB4IHkgdSB2IGxpZ2h0IGNvbG9yIGRhcmsgY29sb3JcbiAgICAgICAgICAgIGlmICghX3VzZVRpbnQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB2ID0gMCwgbiA9IGNsaXBwZWRWZXJ0aWNlcy5sZW5ndGgsIG9mZnNldCA9IF92ZXJ0ZXhGbG9hdE9mZnNldDsgdiA8IG47IHYgKz0gOCwgb2Zmc2V0ICs9IF9wZXJWZXJ0ZXhTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHZidWZbb2Zmc2V0XSAgICAgPSBjbGlwcGVkVmVydGljZXNbdl07ICAgICAgICAvLyB4XG4gICAgICAgICAgICAgICAgICAgIHZidWZbb2Zmc2V0ICsgMV0gPSBjbGlwcGVkVmVydGljZXNbdiArIDFdOyAgICAvLyB5XG4gICAgICAgICAgICAgICAgICAgIHZidWZbb2Zmc2V0ICsgMl0gPSBjbGlwcGVkVmVydGljZXNbdiArIDZdOyAgICAvLyB1XG4gICAgICAgICAgICAgICAgICAgIHZidWZbb2Zmc2V0ICsgM10gPSBjbGlwcGVkVmVydGljZXNbdiArIDddOyAgICAvLyB2XG5cbiAgICAgICAgICAgICAgICAgICAgX2ZpbmFsQ29sb3IzMiA9ICgoY2xpcHBlZFZlcnRpY2VzW3YgKyA1XTw8MjQpID4+PiAwKSArIChjbGlwcGVkVmVydGljZXNbdiArIDRdPDwxNikgKyAoY2xpcHBlZFZlcnRpY2VzW3YgKyAzXTw8OCkgKyBjbGlwcGVkVmVydGljZXNbdiArIDJdO1xuICAgICAgICAgICAgICAgICAgICB1aW50VkRhdGFbb2Zmc2V0ICsgNF0gPSBfZmluYWxDb2xvcjMyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdiA9IDAsIG4gPSBjbGlwcGVkVmVydGljZXMubGVuZ3RoLCBvZmZzZXQgPSBfdmVydGV4RmxvYXRPZmZzZXQ7IHYgPCBuOyB2ICs9IDEyLCBvZmZzZXQgKz0gX3BlclZlcnRleFNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmJ1ZltvZmZzZXRdID0gY2xpcHBlZFZlcnRpY2VzW3ZdOyAgICAgICAgICAgICAgICAgLy8geFxuICAgICAgICAgICAgICAgICAgICB2YnVmW29mZnNldCArIDFdID0gY2xpcHBlZFZlcnRpY2VzW3YgKyAxXTsgICAgICAgICAvLyB5XG4gICAgICAgICAgICAgICAgICAgIHZidWZbb2Zmc2V0ICsgMl0gPSBjbGlwcGVkVmVydGljZXNbdiArIDZdOyAgICAgICAgIC8vIHVcbiAgICAgICAgICAgICAgICAgICAgdmJ1ZltvZmZzZXQgKyAzXSA9IGNsaXBwZWRWZXJ0aWNlc1t2ICsgN107ICAgICAgICAgLy8gdlxuXG4gICAgICAgICAgICAgICAgICAgIF9maW5hbENvbG9yMzIgPSAoKGNsaXBwZWRWZXJ0aWNlc1t2ICsgNV08PDI0KSA+Pj4gMCkgKyAoY2xpcHBlZFZlcnRpY2VzW3YgKyA0XTw8MTYpICsgKGNsaXBwZWRWZXJ0aWNlc1t2ICsgM108PDgpICsgY2xpcHBlZFZlcnRpY2VzW3YgKyAyXTtcbiAgICAgICAgICAgICAgICAgICAgdWludFZEYXRhW29mZnNldCArIDRdID0gX2ZpbmFsQ29sb3IzMjtcblxuICAgICAgICAgICAgICAgICAgICBfZGFya0NvbG9yMzIgPSAoKGNsaXBwZWRWZXJ0aWNlc1t2ICsgMTFdPDwyNCkgPj4+IDApICsgKGNsaXBwZWRWZXJ0aWNlc1t2ICsgMTBdPDwxNikgKyAoY2xpcHBlZFZlcnRpY2VzW3YgKyA5XTw8OCkgKyBjbGlwcGVkVmVydGljZXNbdiArIDhdO1xuICAgICAgICAgICAgICAgICAgICB1aW50VkRhdGFbb2Zmc2V0ICsgNV0gPSBfZGFya0NvbG9yMzI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlYWxUaW1lVHJhdmVyc2UgKHdvcmxkTWF0KSB7XG4gICAgICAgIGxldCB2YnVmO1xuICAgICAgICBsZXQgaWJ1ZjtcblxuICAgICAgICBsZXQgbG9jU2tlbGV0b24gPSBfY29tcC5fc2tlbGV0b247XG4gICAgICAgIGxldCBza2VsZXRvbkNvbG9yID0gbG9jU2tlbGV0b24uY29sb3I7XG4gICAgICAgIGxldCBncmFwaGljcyA9IF9jb21wLl9kZWJ1Z1JlbmRlcmVyO1xuICAgICAgICBsZXQgY2xpcHBlciA9IF9jb21wLl9jbGlwcGVyO1xuICAgICAgICBsZXQgbWF0ZXJpYWwgPSBudWxsO1xuICAgICAgICBsZXQgYXR0YWNobWVudCwgYXR0YWNobWVudENvbG9yLCBzbG90Q29sb3IsIHV2cywgdHJpYW5nbGVzO1xuICAgICAgICBsZXQgaXNSZWdpb24sIGlzTWVzaCwgaXNDbGlwO1xuICAgICAgICBsZXQgb2Zmc2V0SW5mbztcbiAgICAgICAgbGV0IHNsb3Q7XG5cbiAgICAgICAgX3Nsb3RSYW5nZVN0YXJ0ID0gX2NvbXAuX3N0YXJ0U2xvdEluZGV4O1xuICAgICAgICBfc2xvdFJhbmdlRW5kID0gX2NvbXAuX2VuZFNsb3RJbmRleDtcbiAgICAgICAgX2luUmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgaWYgKF9zbG90UmFuZ2VTdGFydCA9PSAtMSkgX2luUmFuZ2UgPSB0cnVlO1xuXG4gICAgICAgIF9kZWJ1Z1Nsb3RzID0gX2NvbXAuZGVidWdTbG90cztcbiAgICAgICAgX2RlYnVnQm9uZXMgPSBfY29tcC5kZWJ1Z0JvbmVzO1xuICAgICAgICBpZiAoZ3JhcGhpY3MgJiYgKF9kZWJ1Z0JvbmVzIHx8IF9kZWJ1Z1Nsb3RzKSkge1xuICAgICAgICAgICAgZ3JhcGhpY3MuY2xlYXIoKTtcbiAgICAgICAgICAgIGdyYXBoaWNzLnN0cm9rZUNvbG9yID0gX3Nsb3RDb2xvcjtcbiAgICAgICAgICAgIGdyYXBoaWNzLmxpbmVXaWR0aCA9IDU7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8geCB5IHUgdiByMSBnMSBiMSBhMSByMiBnMiBiMiBhMiBvciB4IHkgdSB2IHIgZyBiIGEgXG4gICAgICAgIF9wZXJDbGlwVmVydGV4U2l6ZSA9IF91c2VUaW50ID8gMTIgOiA4O1xuICAgIFxuICAgICAgICBfdmVydGV4RmxvYXRDb3VudCA9IDA7XG4gICAgICAgIF92ZXJ0ZXhGbG9hdE9mZnNldCA9IDA7XG4gICAgICAgIF92ZXJ0ZXhPZmZzZXQgPSAwO1xuICAgICAgICBfaW5kZXhDb3VudCA9IDA7XG4gICAgICAgIF9pbmRleE9mZnNldCA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgc2xvdElkeCA9IDAsIHNsb3RDb3VudCA9IGxvY1NrZWxldG9uLmRyYXdPcmRlci5sZW5ndGg7IHNsb3RJZHggPCBzbG90Q291bnQ7IHNsb3RJZHgrKykge1xuICAgICAgICAgICAgc2xvdCA9IGxvY1NrZWxldG9uLmRyYXdPcmRlcltzbG90SWR4XTtcbiAgICBcbiAgICAgICAgICAgIGlmIChfc2xvdFJhbmdlU3RhcnQgPj0gMCAmJiBfc2xvdFJhbmdlU3RhcnQgPT0gc2xvdC5kYXRhLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgX2luUmFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIV9pblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgY2xpcHBlci5jbGlwRW5kV2l0aFNsb3Qoc2xvdCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoX3Nsb3RSYW5nZUVuZCA+PSAwICYmIF9zbG90UmFuZ2VFbmQgPT0gc2xvdC5kYXRhLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgX2luUmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIF92ZXJ0ZXhGbG9hdENvdW50ID0gMDtcbiAgICAgICAgICAgIF9pbmRleENvdW50ID0gMDtcblxuICAgICAgICAgICAgYXR0YWNobWVudCA9IHNsb3QuZ2V0QXR0YWNobWVudCgpO1xuICAgICAgICAgICAgaWYgKCFhdHRhY2htZW50KSB7XG4gICAgICAgICAgICAgICAgY2xpcHBlci5jbGlwRW5kV2l0aFNsb3Qoc2xvdCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlzUmVnaW9uID0gYXR0YWNobWVudCBpbnN0YW5jZW9mIHNwaW5lLlJlZ2lvbkF0dGFjaG1lbnQ7XG4gICAgICAgICAgICBpc01lc2ggPSBhdHRhY2htZW50IGluc3RhbmNlb2Ygc3BpbmUuTWVzaEF0dGFjaG1lbnQ7XG4gICAgICAgICAgICBpc0NsaXAgPSBhdHRhY2htZW50IGluc3RhbmNlb2Ygc3BpbmUuQ2xpcHBpbmdBdHRhY2htZW50O1xuXG4gICAgICAgICAgICBpZiAoaXNDbGlwKSB7XG4gICAgICAgICAgICAgICAgY2xpcHBlci5jbGlwU3RhcnQoc2xvdCwgYXR0YWNobWVudCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaXNSZWdpb24gJiYgIWlzTWVzaCkge1xuICAgICAgICAgICAgICAgIGNsaXBwZXIuY2xpcEVuZFdpdGhTbG90KHNsb3QpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtYXRlcmlhbCA9IF9nZXRTbG90TWF0ZXJpYWwoYXR0YWNobWVudC5yZWdpb24udGV4dHVyZS5fdGV4dHVyZSwgc2xvdC5kYXRhLmJsZW5kTW9kZSk7XG4gICAgICAgICAgICBpZiAoIW1hdGVyaWFsKSB7XG4gICAgICAgICAgICAgICAgY2xpcHBlci5jbGlwRW5kV2l0aFNsb3Qoc2xvdCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfbXVzdEZsdXNoIHx8IG1hdGVyaWFsLl9oYXNoICE9PSBfcmVuZGVyZXIubWF0ZXJpYWwuX2hhc2gpIHtcbiAgICAgICAgICAgICAgICBfbXVzdEZsdXNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX3JlbmRlcmVyLl9mbHVzaCgpO1xuICAgICAgICAgICAgICAgIF9yZW5kZXJlci5ub2RlID0gX25vZGU7XG4gICAgICAgICAgICAgICAgX3JlbmRlcmVyLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc1JlZ2lvbikge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRyaWFuZ2xlcyA9IF9xdWFkVHJpYW5nbGVzO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIGluc3VyZSBjYXBhY2l0eVxuICAgICAgICAgICAgICAgIF92ZXJ0ZXhGbG9hdENvdW50ID0gNCAqIF9wZXJWZXJ0ZXhTaXplO1xuICAgICAgICAgICAgICAgIF9pbmRleENvdW50ID0gNjtcblxuICAgICAgICAgICAgICAgIG9mZnNldEluZm8gPSBfYnVmZmVyLnJlcXVlc3QoNCwgNik7XG4gICAgICAgICAgICAgICAgX2luZGV4T2Zmc2V0ID0gb2Zmc2V0SW5mby5pbmRpY2VPZmZzZXQsXG4gICAgICAgICAgICAgICAgX3ZlcnRleE9mZnNldCA9IG9mZnNldEluZm8udmVydGV4T2Zmc2V0LFxuICAgICAgICAgICAgICAgIF92ZXJ0ZXhGbG9hdE9mZnNldCA9IG9mZnNldEluZm8uYnl0ZU9mZnNldCA+PiAyO1xuICAgICAgICAgICAgICAgIHZidWYgPSBfYnVmZmVyLl92RGF0YSxcbiAgICAgICAgICAgICAgICBpYnVmID0gX2J1ZmZlci5faURhdGE7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gY29tcHV0ZSB2ZXJ0ZXggYW5kIGZpbGwgeCB5XG4gICAgICAgICAgICAgICAgYXR0YWNobWVudC5jb21wdXRlV29ybGRWZXJ0aWNlcyhzbG90LmJvbmUsIHZidWYsIF92ZXJ0ZXhGbG9hdE9mZnNldCwgX3BlclZlcnRleFNpemUpO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIGRyYXcgZGVidWcgc2xvdHMgaWYgZW5hYmxlZCBncmFwaGljc1xuICAgICAgICAgICAgICAgIGlmIChncmFwaGljcyAmJiBfZGVidWdTbG90cykge1xuICAgICAgICAgICAgICAgICAgICBncmFwaGljcy5tb3ZlVG8odmJ1ZltfdmVydGV4RmxvYXRPZmZzZXRdLCB2YnVmW192ZXJ0ZXhGbG9hdE9mZnNldCArIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaWkgPSBfdmVydGV4RmxvYXRPZmZzZXQgKyBfcGVyVmVydGV4U2l6ZSwgbm4gPSBfdmVydGV4RmxvYXRPZmZzZXQgKyBfdmVydGV4RmxvYXRDb3VudDsgaWkgPCBubjsgaWkgKz0gX3BlclZlcnRleFNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBoaWNzLmxpbmVUbyh2YnVmW2lpXSwgdmJ1ZltpaSArIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBncmFwaGljcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICBncmFwaGljcy5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc01lc2gpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0cmlhbmdsZXMgPSBhdHRhY2htZW50LnRyaWFuZ2xlcztcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBpbnN1cmUgY2FwYWNpdHlcbiAgICAgICAgICAgICAgICBfdmVydGV4RmxvYXRDb3VudCA9IChhdHRhY2htZW50LndvcmxkVmVydGljZXNMZW5ndGggPj4gMSkgKiBfcGVyVmVydGV4U2l6ZTtcbiAgICAgICAgICAgICAgICBfaW5kZXhDb3VudCA9IHRyaWFuZ2xlcy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBvZmZzZXRJbmZvID0gX2J1ZmZlci5yZXF1ZXN0KF92ZXJ0ZXhGbG9hdENvdW50IC8gX3BlclZlcnRleFNpemUsIF9pbmRleENvdW50KTtcbiAgICAgICAgICAgICAgICBfaW5kZXhPZmZzZXQgPSBvZmZzZXRJbmZvLmluZGljZU9mZnNldCxcbiAgICAgICAgICAgICAgICBfdmVydGV4T2Zmc2V0ID0gb2Zmc2V0SW5mby52ZXJ0ZXhPZmZzZXQsXG4gICAgICAgICAgICAgICAgX3ZlcnRleEZsb2F0T2Zmc2V0ID0gb2Zmc2V0SW5mby5ieXRlT2Zmc2V0ID4+IDI7XG4gICAgICAgICAgICAgICAgdmJ1ZiA9IF9idWZmZXIuX3ZEYXRhLFxuICAgICAgICAgICAgICAgIGlidWYgPSBfYnVmZmVyLl9pRGF0YTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBjb21wdXRlIHZlcnRleCBhbmQgZmlsbCB4IHlcbiAgICAgICAgICAgICAgICBhdHRhY2htZW50LmNvbXB1dGVXb3JsZFZlcnRpY2VzKHNsb3QsIDAsIGF0dGFjaG1lbnQud29ybGRWZXJ0aWNlc0xlbmd0aCwgdmJ1ZiwgX3ZlcnRleEZsb2F0T2Zmc2V0LCBfcGVyVmVydGV4U2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoX3ZlcnRleEZsb2F0Q291bnQgPT0gMCB8fCBfaW5kZXhDb3VudCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2xpcHBlci5jbGlwRW5kV2l0aFNsb3Qoc2xvdCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBmaWxsIGluZGljZXNcbiAgICAgICAgICAgIGlidWYuc2V0KHRyaWFuZ2xlcywgX2luZGV4T2Zmc2V0KTtcblxuICAgICAgICAgICAgLy8gZmlsbCB1IHZcbiAgICAgICAgICAgIHV2cyA9IGF0dGFjaG1lbnQudXZzO1xuICAgICAgICAgICAgZm9yIChsZXQgdiA9IF92ZXJ0ZXhGbG9hdE9mZnNldCwgbiA9IF92ZXJ0ZXhGbG9hdE9mZnNldCArIF92ZXJ0ZXhGbG9hdENvdW50LCB1ID0gMDsgdiA8IG47IHYgKz0gX3BlclZlcnRleFNpemUsIHUgKz0gMikge1xuICAgICAgICAgICAgICAgIHZidWZbdiArIDJdID0gdXZzW3VdOyAgICAgICAgICAgLy8gdVxuICAgICAgICAgICAgICAgIHZidWZbdiArIDNdID0gdXZzW3UgKyAxXTsgICAgICAgLy8gdlxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRhY2htZW50Q29sb3IgPSBhdHRhY2htZW50LmNvbG9yLFxuICAgICAgICAgICAgc2xvdENvbG9yID0gc2xvdC5jb2xvcjtcblxuICAgICAgICAgICAgdGhpcy5maWxsVmVydGljZXMoc2tlbGV0b25Db2xvciwgYXR0YWNobWVudENvbG9yLCBzbG90Q29sb3IsIGNsaXBwZXIsIHNsb3QpO1xuICAgIFxuICAgICAgICAgICAgaWYgKF9pbmRleENvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGlpID0gX2luZGV4T2Zmc2V0LCBubiA9IF9pbmRleE9mZnNldCArIF9pbmRleENvdW50OyBpaSA8IG5uOyBpaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlidWZbaWldICs9IF92ZXJ0ZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHdvcmxkTWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIF9tMDAgPSB3b3JsZE1hdC5tMDA7XG4gICAgICAgICAgICAgICAgICAgIF9tMDQgPSB3b3JsZE1hdC5tMDQ7XG4gICAgICAgICAgICAgICAgICAgIF9tMTIgPSB3b3JsZE1hdC5tMTI7XG4gICAgICAgICAgICAgICAgICAgIF9tMDEgPSB3b3JsZE1hdC5tMDE7XG4gICAgICAgICAgICAgICAgICAgIF9tMDUgPSB3b3JsZE1hdC5tMDU7XG4gICAgICAgICAgICAgICAgICAgIF9tMTMgPSB3b3JsZE1hdC5tMTM7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGlpID0gX3ZlcnRleEZsb2F0T2Zmc2V0LCBubiA9IF92ZXJ0ZXhGbG9hdE9mZnNldCArIF92ZXJ0ZXhGbG9hdENvdW50OyBpaSA8IG5uOyBpaSArPSBfcGVyVmVydGV4U2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3ggPSB2YnVmW2lpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF95ID0gdmJ1ZltpaSArIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmJ1ZltpaV0gPSBfeCAqIF9tMDAgKyBfeSAqIF9tMDQgKyBfbTEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmJ1ZltpaSArIDFdID0gX3ggKiBfbTAxICsgX3kgKiBfbTA1ICsgX20xMztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfYnVmZmVyLmFkanVzdChfdmVydGV4RmxvYXRDb3VudCAvIF9wZXJWZXJ0ZXhTaXplLCBfaW5kZXhDb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBjbGlwcGVyLmNsaXBFbmRXaXRoU2xvdChzbG90KTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjbGlwcGVyLmNsaXBFbmQoKTtcbiAgICBcbiAgICAgICAgaWYgKGdyYXBoaWNzICYmIF9kZWJ1Z0JvbmVzKSB7XG4gICAgICAgICAgICBsZXQgYm9uZTtcbiAgICAgICAgICAgIGdyYXBoaWNzLnN0cm9rZUNvbG9yID0gX2JvbmVDb2xvcjtcbiAgICAgICAgICAgIGdyYXBoaWNzLmZpbGxDb2xvciA9IF9zbG90Q29sb3I7IC8vIFJvb3QgYm9uZSBjb2xvciBpcyBzYW1lIGFzIHNsb3QgY29sb3IuXG4gICAgXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbiA9IGxvY1NrZWxldG9uLmJvbmVzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIGJvbmUgPSBsb2NTa2VsZXRvbi5ib25lc1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgeCA9IGJvbmUuZGF0YS5sZW5ndGggKiBib25lLmEgKyBib25lLndvcmxkWDtcbiAgICAgICAgICAgICAgICBsZXQgeSA9IGJvbmUuZGF0YS5sZW5ndGggKiBib25lLmMgKyBib25lLndvcmxkWTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBCb25lIGxlbmd0aHMuXG4gICAgICAgICAgICAgICAgZ3JhcGhpY3MubW92ZVRvKGJvbmUud29ybGRYLCBib25lLndvcmxkWSk7XG4gICAgICAgICAgICAgICAgZ3JhcGhpY3MubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgICAgIGdyYXBoaWNzLnN0cm9rZSgpO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIEJvbmUgb3JpZ2lucy5cbiAgICAgICAgICAgICAgICBncmFwaGljcy5jaXJjbGUoYm9uZS53b3JsZFgsIGJvbmUud29ybGRZLCBNYXRoLlBJICogMik7XG4gICAgICAgICAgICAgICAgZ3JhcGhpY3MuZmlsbCgpO1xuICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyYXBoaWNzLmZpbGxDb2xvciA9IF9vcmlnaW5Db2xvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY2FjaGVUcmF2ZXJzZSAod29ybGRNYXQpIHtcbiAgICAgICAgXG4gICAgICAgIGxldCBmcmFtZSA9IF9jb21wLl9jdXJGcmFtZTtcbiAgICAgICAgaWYgKCFmcmFtZSkgcmV0dXJuO1xuXG4gICAgICAgIGxldCBzZWdtZW50cyA9IGZyYW1lLnNlZ21lbnRzO1xuICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID09IDApIHJldHVybjtcblxuICAgICAgICBsZXQgdmJ1ZiwgaWJ1ZiwgdWludGJ1ZjtcbiAgICAgICAgbGV0IG1hdGVyaWFsO1xuICAgICAgICBsZXQgb2Zmc2V0SW5mbztcbiAgICAgICAgbGV0IHZlcnRpY2VzID0gZnJhbWUudmVydGljZXM7XG4gICAgICAgIGxldCBpbmRpY2VzID0gZnJhbWUuaW5kaWNlcztcbiAgICAgICAgbGV0IHVpbnRWZXJ0ID0gZnJhbWUudWludFZlcnQ7XG5cbiAgICAgICAgbGV0IGZyYW1lVkZPZmZzZXQgPSAwLCBmcmFtZUluZGV4T2Zmc2V0ID0gMCwgc2VnVkZDb3VudCA9IDA7XG4gICAgICAgIGlmICh3b3JsZE1hdCkge1xuICAgICAgICAgICAgX20wMCA9IHdvcmxkTWF0Lm0wMDtcbiAgICAgICAgICAgIF9tMDQgPSB3b3JsZE1hdC5tMDQ7XG4gICAgICAgICAgICBfbTEyID0gd29ybGRNYXQubTEyO1xuICAgICAgICAgICAgX20wMSA9IHdvcmxkTWF0Lm0wMTtcbiAgICAgICAgICAgIF9tMDUgPSB3b3JsZE1hdC5tMDU7XG4gICAgICAgICAgICBfbTEzID0gd29ybGRNYXQubTEzO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNvbG9yT2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IGNvbG9ycyA9IGZyYW1lLmNvbG9ycztcbiAgICAgICAgbGV0IG5vd0NvbG9yID0gY29sb3JzW2NvbG9yT2Zmc2V0KytdO1xuICAgICAgICBsZXQgbWF4VkZPZmZzZXQgPSBub3dDb2xvci52Zk9mZnNldDtcbiAgICAgICAgX2hhbmRsZUNvbG9yKG5vd0NvbG9yKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbiA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgbGV0IHNlZ0luZm8gPSBzZWdtZW50c1tpXTtcbiAgICAgICAgICAgIG1hdGVyaWFsID0gX2dldFNsb3RNYXRlcmlhbChzZWdJbmZvLnRleCwgc2VnSW5mby5ibGVuZE1vZGUpO1xuICAgICAgICAgICAgaWYgKCFtYXRlcmlhbCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChfbXVzdEZsdXNoIHx8IG1hdGVyaWFsLl9oYXNoICE9PSBfcmVuZGVyZXIubWF0ZXJpYWwuX2hhc2gpIHtcbiAgICAgICAgICAgICAgICBfbXVzdEZsdXNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX3JlbmRlcmVyLl9mbHVzaCgpO1xuICAgICAgICAgICAgICAgIF9yZW5kZXJlci5ub2RlID0gX25vZGU7XG4gICAgICAgICAgICAgICAgX3JlbmRlcmVyLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF92ZXJ0ZXhDb3VudCA9IHNlZ0luZm8udmVydGV4Q291bnQ7XG4gICAgICAgICAgICBfaW5kZXhDb3VudCA9IHNlZ0luZm8uaW5kZXhDb3VudDtcbiAgICAgICAgICAgIF92ZXJ0ZXhGbG9hdENvdW50ID0gX3ZlcnRleENvdW50ICogX3BlclZlcnRleFNpemU7XG5cbiAgICAgICAgICAgIG9mZnNldEluZm8gPSBfYnVmZmVyLnJlcXVlc3QoX3ZlcnRleENvdW50LCBfaW5kZXhDb3VudCk7XG4gICAgICAgICAgICBfaW5kZXhPZmZzZXQgPSBvZmZzZXRJbmZvLmluZGljZU9mZnNldDtcbiAgICAgICAgICAgIF92ZXJ0ZXhPZmZzZXQgPSBvZmZzZXRJbmZvLnZlcnRleE9mZnNldDtcbiAgICAgICAgICAgIF92Zk9mZnNldCA9IG9mZnNldEluZm8uYnl0ZU9mZnNldCA+PiAyO1xuICAgICAgICAgICAgdmJ1ZiA9IF9idWZmZXIuX3ZEYXRhO1xuICAgICAgICAgICAgaWJ1ZiA9IF9idWZmZXIuX2lEYXRhO1xuICAgICAgICAgICAgdWludGJ1ZiA9IF9idWZmZXIuX3VpbnRWRGF0YTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaWkgPSBfaW5kZXhPZmZzZXQsIGlsID0gX2luZGV4T2Zmc2V0ICsgX2luZGV4Q291bnQ7IGlpIDwgaWw7IGlpKyspIHtcbiAgICAgICAgICAgICAgICBpYnVmW2lpXSA9IF92ZXJ0ZXhPZmZzZXQgKyBpbmRpY2VzW2ZyYW1lSW5kZXhPZmZzZXQrK107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlZ1ZGQ291bnQgPSBzZWdJbmZvLnZmQ291bnQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHN3aXRjaCAoX2hhbmRsZVZhbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgTk9UX0JBVENIX09ORV9DT0xPUjpcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaWkgPSBfdmZPZmZzZXQsIGlsID0gX3ZmT2Zmc2V0ICsgX3ZlcnRleEZsb2F0Q291bnQ7IGlpIDwgaWw7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YnVmW2lpKytdID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTsgIC8vIHhcbiAgICAgICAgICAgICAgICAgICAgICAgIHZidWZbaWkrK10gPSB2ZXJ0aWNlc1tmcmFtZVZGT2Zmc2V0KytdOyAgLy8geVxuICAgICAgICAgICAgICAgICAgICAgICAgdmJ1ZltpaSsrXSA9IHZlcnRpY2VzW2ZyYW1lVkZPZmZzZXQrK107ICAgICAvLyB1XG4gICAgICAgICAgICAgICAgICAgICAgICB2YnVmW2lpKytdID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTsgICAgIC8vIHZcbiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnRidWZbaWkrK10gPSB1aW50VmVydFtmcmFtZVZGT2Zmc2V0KytdOyAgLy8gZmluYWwgY29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lVkZPZmZzZXQrKzsgLy8ganVtcCBkYXJrIGNvbG9yXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIE5PVF9CQVRDSF9UV09fQ09MT1I6XG4gICAgICAgICAgICAgICAgICAgIHZidWYuc2V0KHZlcnRpY2VzLnN1YmFycmF5KGZyYW1lVkZPZmZzZXQsIGZyYW1lVkZPZmZzZXQgKyBfdmVydGV4RmxvYXRDb3VudCksIF92Zk9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lVkZPZmZzZXQgKz0gX3ZlcnRleEZsb2F0Q291bnQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBCQVRDSF9PTkVfQ09MT1I6XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGlpID0gX3ZmT2Zmc2V0LCBpbCA9IF92Zk9mZnNldCArIF92ZXJ0ZXhGbG9hdENvdW50OyBpaSA8IGlsOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3ggPSB2ZXJ0aWNlc1tmcmFtZVZGT2Zmc2V0KytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3kgPSB2ZXJ0aWNlc1tmcmFtZVZGT2Zmc2V0KytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmJ1ZltpaSsrXSA9IF94ICogX20wMCArIF95ICogX20wNCArIF9tMTI7ICAvLyB4XG4gICAgICAgICAgICAgICAgICAgICAgICB2YnVmW2lpKytdID0gX3ggKiBfbTAxICsgX3kgKiBfbTA1ICsgX20xMzsgIC8vIHlcbiAgICAgICAgICAgICAgICAgICAgICAgIHZidWZbaWkrK10gPSB2ZXJ0aWNlc1tmcmFtZVZGT2Zmc2V0KytdOyAgICAgLy8gdVxuICAgICAgICAgICAgICAgICAgICAgICAgdmJ1ZltpaSsrXSA9IHZlcnRpY2VzW2ZyYW1lVkZPZmZzZXQrK107ICAgICAvLyB2XG4gICAgICAgICAgICAgICAgICAgICAgICB1aW50YnVmW2lpKytdID0gdWludFZlcnRbZnJhbWVWRk9mZnNldCsrXTsgIC8vIGZpbmFsIGNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZVZGT2Zmc2V0Kys7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRhcmsgY29sb3JcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQkFUQ0hfVFdPX0NPTE9SOlxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpaSA9IF92Zk9mZnNldCwgaWwgPSBfdmZPZmZzZXQgKyBfdmVydGV4RmxvYXRDb3VudDsgaWkgPCBpbDspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF94ID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF95ID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZidWZbaWkrK10gPSBfeCAqIF9tMDAgKyBfeSAqIF9tMDQgKyBfbTEyOyAgLy8geFxuICAgICAgICAgICAgICAgICAgICAgICAgdmJ1ZltpaSsrXSA9IF94ICogX20wMSArIF95ICogX20wNSArIF9tMTM7ICAvLyB5XG4gICAgICAgICAgICAgICAgICAgICAgICB2YnVmW2lpKytdID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTsgICAgIC8vIHVcbiAgICAgICAgICAgICAgICAgICAgICAgIHZidWZbaWkrK10gPSB2ZXJ0aWNlc1tmcmFtZVZGT2Zmc2V0KytdOyAgICAgLy8gdlxuICAgICAgICAgICAgICAgICAgICAgICAgdWludGJ1ZltpaSsrXSA9IHVpbnRWZXJ0W2ZyYW1lVkZPZmZzZXQrK107ICAvLyBmaW5hbCBjb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgdWludGJ1ZltpaSsrXSA9IHVpbnRWZXJ0W2ZyYW1lVkZPZmZzZXQrK107ICAvLyBkYXJrIGNvbG9yXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2J1ZmZlci5hZGp1c3QoX3ZlcnRleENvdW50LCBfaW5kZXhDb3VudCk7XG4gICAgICAgICAgICBpZiAoICFfbmVlZENvbG9yICkgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIGhhbmRsZSBjb2xvclxuICAgICAgICAgICAgbGV0IGZyYW1lQ29sb3JPZmZzZXQgPSBmcmFtZVZGT2Zmc2V0IC0gc2VnVkZDb3VudDtcbiAgICAgICAgICAgIGZvciAobGV0IGlpID0gX3ZmT2Zmc2V0ICsgNCwgaWwgPSBfdmZPZmZzZXQgKyA0ICsgX3ZlcnRleEZsb2F0Q291bnQ7IGlpIDwgaWw7IGlpICs9IF9wZXJWZXJ0ZXhTaXplLCBmcmFtZUNvbG9yT2Zmc2V0ICs9IDYpIHtcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWVDb2xvck9mZnNldCA+PSBtYXhWRk9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBub3dDb2xvciA9IGNvbG9yc1tjb2xvck9mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgX2hhbmRsZUNvbG9yKG5vd0NvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgbWF4VkZPZmZzZXQgPSBub3dDb2xvci52Zk9mZnNldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdWludGJ1ZltpaV0gPSBfZmluYWxDb2xvcjMyO1xuICAgICAgICAgICAgICAgIF91c2VUaW50ICYmICh1aW50YnVmW2lpICsgMV0gPSBfZGFya0NvbG9yMzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGZpbGxCdWZmZXJzIChjb21wLCByZW5kZXJlcikge1xuICAgICAgICBcbiAgICAgICAgbGV0IG5vZGUgPSBjb21wLm5vZGU7XG4gICAgICAgIG5vZGUuX3JlbmRlckZsYWcgfD0gUmVuZGVyRmxvdy5GTEFHX1VQREFURV9SRU5ERVJfREFUQTtcbiAgICAgICAgaWYgKCFjb21wLl9za2VsZXRvbikgcmV0dXJuO1xuXG4gICAgICAgIGxldCBub2RlQ29sb3IgPSBub2RlLl9jb2xvcjtcbiAgICAgICAgX25vZGVSID0gbm9kZUNvbG9yLnIgLyAyNTU7XG4gICAgICAgIF9ub2RlRyA9IG5vZGVDb2xvci5nIC8gMjU1O1xuICAgICAgICBfbm9kZUIgPSBub2RlQ29sb3IuYiAvIDI1NTtcbiAgICAgICAgX25vZGVBID0gbm9kZUNvbG9yLmEgLyAyNTU7XG5cbiAgICAgICAgX3VzZVRpbnQgPSBjb21wLnVzZVRpbnQ7XG4gICAgICAgIF92ZXJ0ZXhGb3JtYXQgPSBfdXNlVGludD8gVkZUd29Db2xvciA6IFZGT25lQ29sb3I7XG4gICAgICAgIC8vIHggeSB1IHYgY29sb3IxIGNvbG9yMiBvciB4IHkgdSB2IGNvbG9yXG4gICAgICAgIF9wZXJWZXJ0ZXhTaXplID0gX3VzZVRpbnQgPyA2IDogNTtcblxuICAgICAgICBfbm9kZSA9IGNvbXAubm9kZTtcbiAgICAgICAgX2J1ZmZlciA9IHJlbmRlcmVyLmdldEJ1ZmZlcignc3BpbmUnLCBfdmVydGV4Rm9ybWF0KTtcbiAgICAgICAgX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIF9jb21wID0gY29tcDtcblxuICAgICAgICBfbXVzdEZsdXNoID0gdHJ1ZTtcbiAgICAgICAgX3ByZW11bHRpcGxpZWRBbHBoYSA9IGNvbXAucHJlbXVsdGlwbGllZEFscGhhO1xuICAgICAgICBfbXVsdGlwbGllciA9IDEuMDtcbiAgICAgICAgX2hhbmRsZVZhbCA9IDB4MDA7XG4gICAgICAgIF9uZWVkQ29sb3IgPSBmYWxzZTtcblxuICAgICAgICBpZiAobm9kZUNvbG9yLl92YWwgIT09IDB4ZmZmZmZmZmYgfHwgX3ByZW11bHRpcGxpZWRBbHBoYSkge1xuICAgICAgICAgICAgX25lZWRDb2xvciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3VzZVRpbnQpIHtcbiAgICAgICAgICAgIF9oYW5kbGVWYWwgfD0gRkxBR19UV09fQ09MT1I7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgd29ybGRNYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChfY29tcC5lbmFibGVCYXRjaCkge1xuICAgICAgICAgICAgd29ybGRNYXQgPSBfbm9kZS5fd29ybGRNYXRyaXg7XG4gICAgICAgICAgICBfbXVzdEZsdXNoID0gZmFsc2U7XG4gICAgICAgICAgICBfaGFuZGxlVmFsIHw9IEZMQUdfQkFUQ0g7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29tcC5pc0FuaW1hdGlvbkNhY2hlZCgpKSB7XG4gICAgICAgICAgICAvLyBUcmF2ZXJzZSBpbnB1dCBhc3NlbWJsZXIuXG4gICAgICAgICAgICB0aGlzLmNhY2hlVHJhdmVyc2Uod29ybGRNYXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZWFsVGltZVRyYXZlcnNlKHdvcmxkTWF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENsZWFyIHRlbXAgdmFyLlxuICAgICAgICBfbm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgX2J1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgX3JlbmRlcmVyID0gdW5kZWZpbmVkO1xuICAgICAgICBfY29tcCA9IHVuZGVmaW5lZDtcbiAgICB9XG59O1xuXG5Ta2VsZXRvbi5fYXNzZW1ibGVyID0gc3BpbmVBc3NlbWJsZXI7XG5cbm1vZHVsZS5leHBvcnRzID0gc3BpbmVBc3NlbWJsZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBTa2VsZXRvbiA9IHJlcXVpcmUoJy4vU2tlbGV0b24nKTtcbnZhciBzcGluZSA9IHJlcXVpcmUoJy4vbGliL3NwaW5lJyk7XG52YXIgUmVuZGVyRmxvdyA9IHJlcXVpcmUoJy4uLy4uL2NvY29zMmQvY29yZS9yZW5kZXJlci9yZW5kZXItZmxvdycpO1xudmFyIFZlcnRleEZvcm1hdCA9IHJlcXVpcmUoJy4uLy4uL2NvY29zMmQvY29yZS9yZW5kZXJlci93ZWJnbC92ZXJ0ZXgtZm9ybWF0Jyk7XG52YXIgVkZPbmVDb2xvciA9IFZlcnRleEZvcm1hdC52Zm10UG9zVXZDb2xvcjtcbnZhciBWRlR3b0NvbG9yID0gVmVydGV4Rm9ybWF0LnZmbXRQb3NVdlR3b0NvbG9yO1xudmFyIGdmeCA9IGNjLmdmeDtcblxudmFyIEZMQUdfQkFUQ0ggPSAweDEwO1xudmFyIEZMQUdfVFdPX0NPTE9SID0gMHgwMTtcbnZhciBOT1RfQkFUQ0hfT05FX0NPTE9SID0gMHgwMDtcbnZhciBOT1RfQkFUQ0hfVFdPX0NPTE9SID0gMHgwMTtcbnZhciBCQVRDSF9PTkVfQ09MT1IgPSAweDEwO1xudmFyIEJBVENIX1RXT19DT0xPUiA9IDB4MTE7XG5cbnZhciBfaGFuZGxlVmFsID0gMHgwMDtcbnZhciBfcXVhZFRyaWFuZ2xlcyA9IFswLCAxLCAyLCAyLCAzLCAwXTtcbnZhciBfc2xvdENvbG9yID0gY2MuY29sb3IoMCwgMCwgMjU1LCAyNTUpO1xudmFyIF9ib25lQ29sb3IgPSBjYy5jb2xvcigyNTUsIDAsIDAsIDI1NSk7XG52YXIgX29yaWdpbkNvbG9yID0gY2MuY29sb3IoMCwgMjU1LCAwLCAyNTUpO1xuXG52YXIgX2ZpbmFsQ29sb3IgPSB1bmRlZmluZWQ7XG52YXIgX2RhcmtDb2xvciA9IHVuZGVmaW5lZDtcbmlmICghQ0NfSlNCKSB7XG4gICAgX2ZpbmFsQ29sb3IgPSBuZXcgc3BpbmUuQ29sb3IoMSwgMSwgMSwgMSk7XG4gICAgX2RhcmtDb2xvciA9IG5ldyBzcGluZS5Db2xvcigxLCAxLCAxLCAxKTtcbn1cblxudmFyIF9wcmVtdWx0aXBsaWVkQWxwaGEgPSB2b2lkIDA7XG52YXIgX211bHRpcGxpZXIgPSB2b2lkIDA7XG52YXIgX3Nsb3RSYW5nZVN0YXJ0ID0gdm9pZCAwO1xudmFyIF9zbG90UmFuZ2VFbmQgPSB2b2lkIDA7XG52YXIgX3VzZVRpbnQgPSB2b2lkIDA7XG52YXIgX2RlYnVnU2xvdHMgPSB2b2lkIDA7XG52YXIgX2RlYnVnQm9uZXMgPSB2b2lkIDA7XG52YXIgX25vZGVSID0gdm9pZCAwLFxuICAgIF9ub2RlRyA9IHZvaWQgMCxcbiAgICBfbm9kZUIgPSB2b2lkIDAsXG4gICAgX25vZGVBID0gdm9pZCAwO1xudmFyIF9maW5hbENvbG9yMzIgPSB2b2lkIDAsXG4gICAgX2RhcmtDb2xvcjMyID0gdm9pZCAwO1xudmFyIF92ZXJ0ZXhGb3JtYXQgPSB2b2lkIDA7XG52YXIgX3BlclZlcnRleFNpemUgPSB2b2lkIDA7XG52YXIgX3BlckNsaXBWZXJ0ZXhTaXplID0gdm9pZCAwO1xuXG52YXIgX3ZlcnRleEZsb2F0Q291bnQgPSAwLFxuICAgIF92ZXJ0ZXhDb3VudCA9IDAsXG4gICAgX3ZlcnRleEZsb2F0T2Zmc2V0ID0gMCxcbiAgICBfdmVydGV4T2Zmc2V0ID0gMCxcbiAgICBfaW5kZXhDb3VudCA9IDAsXG4gICAgX2luZGV4T2Zmc2V0ID0gMCxcbiAgICBfdmZPZmZzZXQgPSAwO1xudmFyIF90ZW1wciA9IHZvaWQgMCxcbiAgICBfdGVtcGcgPSB2b2lkIDAsXG4gICAgX3RlbXBiID0gdm9pZCAwO1xudmFyIF9pblJhbmdlID0gdm9pZCAwO1xudmFyIF9tdXN0Rmx1c2ggPSB2b2lkIDA7XG52YXIgX3ggPSB2b2lkIDAsXG4gICAgX3kgPSB2b2lkIDAsXG4gICAgX20wMCA9IHZvaWQgMCxcbiAgICBfbTA0ID0gdm9pZCAwLFxuICAgIF9tMTIgPSB2b2lkIDAsXG4gICAgX20wMSA9IHZvaWQgMCxcbiAgICBfbTA1ID0gdm9pZCAwLFxuICAgIF9tMTMgPSB2b2lkIDA7XG52YXIgX3IgPSB2b2lkIDAsXG4gICAgX2cgPSB2b2lkIDAsXG4gICAgX2IgPSB2b2lkIDAsXG4gICAgX2ZyID0gdm9pZCAwLFxuICAgIF9mZyA9IHZvaWQgMCxcbiAgICBfZmIgPSB2b2lkIDAsXG4gICAgX2ZhID0gdm9pZCAwLFxuICAgIF9kciA9IHZvaWQgMCxcbiAgICBfZGcgPSB2b2lkIDAsXG4gICAgX2RiID0gdm9pZCAwLFxuICAgIF9kYSA9IHZvaWQgMDtcbnZhciBfY29tcCA9IHZvaWQgMCxcbiAgICBfYnVmZmVyID0gdm9pZCAwLFxuICAgIF9yZW5kZXJlciA9IHZvaWQgMCxcbiAgICBfbm9kZSA9IHZvaWQgMCxcbiAgICBfbmVlZENvbG9yID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBfZ2V0U2xvdE1hdGVyaWFsKHRleCwgYmxlbmRNb2RlKSB7XG4gICAgdmFyIHNyYyA9IHZvaWQgMCxcbiAgICAgICAgZHN0ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAoYmxlbmRNb2RlKSB7XG4gICAgICAgIGNhc2Ugc3BpbmUuQmxlbmRNb2RlLkFkZGl0aXZlOlxuICAgICAgICAgICAgc3JjID0gX3ByZW11bHRpcGxpZWRBbHBoYSA/IGNjLm1hY3JvLk9ORSA6IGNjLm1hY3JvLlNSQ19BTFBIQTtcbiAgICAgICAgICAgIGRzdCA9IGNjLm1hY3JvLk9ORTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHNwaW5lLkJsZW5kTW9kZS5NdWx0aXBseTpcbiAgICAgICAgICAgIHNyYyA9IGNjLm1hY3JvLkRTVF9DT0xPUjtcbiAgICAgICAgICAgIGRzdCA9IGNjLm1hY3JvLk9ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBzcGluZS5CbGVuZE1vZGUuU2NyZWVuOlxuICAgICAgICAgICAgc3JjID0gY2MubWFjcm8uT05FO1xuICAgICAgICAgICAgZHN0ID0gY2MubWFjcm8uT05FX01JTlVTX1NSQ19DT0xPUjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHNwaW5lLkJsZW5kTW9kZS5Ob3JtYWw6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzcmMgPSBfcHJlbXVsdGlwbGllZEFscGhhID8gY2MubWFjcm8uT05FIDogY2MubWFjcm8uU1JDX0FMUEhBO1xuICAgICAgICAgICAgZHN0ID0gY2MubWFjcm8uT05FX01JTlVTX1NSQ19BTFBIQTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciB1c2VNb2RlbCA9ICFfY29tcC5lbmFibGVCYXRjaDtcbiAgICB2YXIga2V5ID0gdGV4LnVybCArIHNyYyArIGRzdCArIF91c2VUaW50ICsgdXNlTW9kZWw7XG4gICAgdmFyIGJhc2VNYXRlcmlhbCA9IF9jb21wLnNoYXJlZE1hdGVyaWFsc1swXTtcbiAgICBpZiAoIWJhc2VNYXRlcmlhbCkgcmV0dXJuIG51bGw7XG5cbiAgICB2YXIgbWF0ZXJpYWxDYWNoZSA9IF9jb21wLl9tYXRlcmlhbENhY2hlO1xuICAgIHZhciBtYXRlcmlhbCA9IG1hdGVyaWFsQ2FjaGVba2V5XTtcbiAgICBpZiAoIW1hdGVyaWFsKSB7XG4gICAgICAgIHZhciBiYXNlS2V5ID0gYmFzZU1hdGVyaWFsLl9oYXNoO1xuICAgICAgICBpZiAoIW1hdGVyaWFsQ2FjaGVbYmFzZUtleV0pIHtcbiAgICAgICAgICAgIG1hdGVyaWFsID0gYmFzZU1hdGVyaWFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF0ZXJpYWwgPSBuZXcgY2MuTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgIG1hdGVyaWFsLmNvcHkoYmFzZU1hdGVyaWFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hdGVyaWFsLmRlZmluZSgnX1VTRV9NT0RFTCcsIHVzZU1vZGVsKTtcbiAgICAgICAgbWF0ZXJpYWwuZGVmaW5lKCdVU0VfVElOVCcsIF91c2VUaW50KTtcbiAgICAgICAgLy8gdXBkYXRlIHRleHR1cmVcbiAgICAgICAgbWF0ZXJpYWwuc2V0UHJvcGVydHkoJ3RleHR1cmUnLCB0ZXgpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBibGVuZCBmdW5jdGlvblxuICAgICAgICB2YXIgcGFzcyA9IG1hdGVyaWFsLmVmZmVjdC5nZXREZWZhdWx0VGVjaG5pcXVlKCkucGFzc2VzWzBdO1xuICAgICAgICBwYXNzLnNldEJsZW5kKHRydWUsIGdmeC5CTEVORF9GVU5DX0FERCwgc3JjLCBkc3QsIGdmeC5CTEVORF9GVU5DX0FERCwgc3JjLCBkc3QpO1xuICAgICAgICBtYXRlcmlhbC51cGRhdGVIYXNoKGtleSk7XG4gICAgICAgIG1hdGVyaWFsQ2FjaGVba2V5XSA9IG1hdGVyaWFsO1xuICAgIH0gZWxzZSBpZiAobWF0ZXJpYWwuZ2V0UHJvcGVydHkoJ3RleHR1cmUnKSAhPT0gdGV4KSB7XG4gICAgICAgIG1hdGVyaWFsLnNldFByb3BlcnR5KCd0ZXh0dXJlJywgdGV4KTtcbiAgICAgICAgbWF0ZXJpYWwudXBkYXRlSGFzaChrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gbWF0ZXJpYWw7XG59XG5cbmZ1bmN0aW9uIF9oYW5kbGVDb2xvcihjb2xvcikge1xuICAgIC8vIHRlbXAgcmdiIGhhcyBtdWx0aXBseSAyNTUsIHNvIG5lZWQgZGl2aWRlIDI1NTtcbiAgICBfZmEgPSBjb2xvci5mYSAqIF9ub2RlQTtcbiAgICBfbXVsdGlwbGllciA9IF9wcmVtdWx0aXBsaWVkQWxwaGEgPyBfZmEgLyAyNTUgOiAxO1xuICAgIF9yID0gX25vZGVSICogX211bHRpcGxpZXI7XG4gICAgX2cgPSBfbm9kZUcgKiBfbXVsdGlwbGllcjtcbiAgICBfYiA9IF9ub2RlQiAqIF9tdWx0aXBsaWVyO1xuXG4gICAgX2ZyID0gY29sb3IuZnIgKiBfcjtcbiAgICBfZmcgPSBjb2xvci5mZyAqIF9nO1xuICAgIF9mYiA9IGNvbG9yLmZiICogX2I7XG4gICAgX2ZpbmFsQ29sb3IzMiA9IChfZmEgPDwgMjQgPj4+IDApICsgKF9mYiA8PCAxNikgKyAoX2ZnIDw8IDgpICsgX2ZyO1xuXG4gICAgX2RyID0gY29sb3IuZHIgKiBfcjtcbiAgICBfZGcgPSBjb2xvci5kZyAqIF9nO1xuICAgIF9kYiA9IGNvbG9yLmRiICogX2I7XG4gICAgX2RhID0gX3ByZW11bHRpcGxpZWRBbHBoYSA/IDI1NSA6IDA7XG4gICAgX2RhcmtDb2xvcjMyID0gKF9kYSA8PCAyNCA+Pj4gMCkgKyAoX2RiIDw8IDE2KSArIChfZGcgPDwgOCkgKyBfZHI7XG59XG5cbnZhciBzcGluZUFzc2VtYmxlciA9IHtcbiAgICB1cGRhdGVSZW5kZXJEYXRhOiBmdW5jdGlvbiB1cGRhdGVSZW5kZXJEYXRhKGNvbXApIHtcbiAgICAgICAgdmFyIHNrZWxldG9uID0gY29tcC5fc2tlbGV0b247XG4gICAgICAgIGlmIChza2VsZXRvbikge1xuICAgICAgICAgICAgc2tlbGV0b24udXBkYXRlV29ybGRUcmFuc2Zvcm0oKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZmlsbFZlcnRpY2VzOiBmdW5jdGlvbiBmaWxsVmVydGljZXMoc2tlbGV0b25Db2xvciwgYXR0YWNobWVudENvbG9yLCBzbG90Q29sb3IsIGNsaXBwZXIsIHNsb3QpIHtcblxuICAgICAgICB2YXIgdmJ1ZiA9IF9idWZmZXIuX3ZEYXRhLFxuICAgICAgICAgICAgaWJ1ZiA9IF9idWZmZXIuX2lEYXRhLFxuICAgICAgICAgICAgdWludFZEYXRhID0gX2J1ZmZlci5fdWludFZEYXRhO1xuICAgICAgICB2YXIgb2Zmc2V0SW5mbyA9IHZvaWQgMDtcblxuICAgICAgICBfZmluYWxDb2xvci5hID0gc2xvdENvbG9yLmEgKiBhdHRhY2htZW50Q29sb3IuYSAqIHNrZWxldG9uQ29sb3IuYSAqIF9ub2RlQSAqIDI1NTtcbiAgICAgICAgX211bHRpcGxpZXIgPSBfcHJlbXVsdGlwbGllZEFscGhhID8gX2ZpbmFsQ29sb3IuYSA6IDI1NTtcbiAgICAgICAgX3RlbXByID0gX25vZGVSICogYXR0YWNobWVudENvbG9yLnIgKiBza2VsZXRvbkNvbG9yLnIgKiBfbXVsdGlwbGllcjtcbiAgICAgICAgX3RlbXBnID0gX25vZGVHICogYXR0YWNobWVudENvbG9yLmcgKiBza2VsZXRvbkNvbG9yLmcgKiBfbXVsdGlwbGllcjtcbiAgICAgICAgX3RlbXBiID0gX25vZGVCICogYXR0YWNobWVudENvbG9yLmIgKiBza2VsZXRvbkNvbG9yLmIgKiBfbXVsdGlwbGllcjtcblxuICAgICAgICBfZmluYWxDb2xvci5yID0gX3RlbXByICogc2xvdENvbG9yLnI7XG4gICAgICAgIF9maW5hbENvbG9yLmcgPSBfdGVtcGcgKiBzbG90Q29sb3IuZztcbiAgICAgICAgX2ZpbmFsQ29sb3IuYiA9IF90ZW1wYiAqIHNsb3RDb2xvci5iO1xuXG4gICAgICAgIGlmIChzbG90LmRhcmtDb2xvciA9PSBudWxsKSB7XG4gICAgICAgICAgICBfZGFya0NvbG9yLnNldCgwLjAsIDAsIDAsIDEuMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfZGFya0NvbG9yLnIgPSBzbG90LmRhcmtDb2xvci5yICogX3RlbXByO1xuICAgICAgICAgICAgX2RhcmtDb2xvci5nID0gc2xvdC5kYXJrQ29sb3IuZyAqIF90ZW1wZztcbiAgICAgICAgICAgIF9kYXJrQ29sb3IuYiA9IHNsb3QuZGFya0NvbG9yLmIgKiBfdGVtcGI7XG4gICAgICAgIH1cbiAgICAgICAgX2RhcmtDb2xvci5hID0gX3ByZW11bHRpcGxpZWRBbHBoYSA/IDI1NSA6IDA7XG5cbiAgICAgICAgaWYgKCFjbGlwcGVyLmlzQ2xpcHBpbmcoKSkge1xuXG4gICAgICAgICAgICBfZmluYWxDb2xvcjMyID0gKF9maW5hbENvbG9yLmEgPDwgMjQgPj4+IDApICsgKF9maW5hbENvbG9yLmIgPDwgMTYpICsgKF9maW5hbENvbG9yLmcgPDwgOCkgKyBfZmluYWxDb2xvci5yO1xuICAgICAgICAgICAgX2RhcmtDb2xvcjMyID0gKF9kYXJrQ29sb3IuYSA8PCAyNCA+Pj4gMCkgKyAoX2RhcmtDb2xvci5iIDw8IDE2KSArIChfZGFya0NvbG9yLmcgPDwgOCkgKyBfZGFya0NvbG9yLnI7XG5cbiAgICAgICAgICAgIGlmICghX3VzZVRpbnQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB2ID0gX3ZlcnRleEZsb2F0T2Zmc2V0LCBuID0gX3ZlcnRleEZsb2F0T2Zmc2V0ICsgX3ZlcnRleEZsb2F0Q291bnQ7IHYgPCBuOyB2ICs9IF9wZXJWZXJ0ZXhTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHVpbnRWRGF0YVt2ICsgNF0gPSBfZmluYWxDb2xvcjMyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX3YgPSBfdmVydGV4RmxvYXRPZmZzZXQsIF9uID0gX3ZlcnRleEZsb2F0T2Zmc2V0ICsgX3ZlcnRleEZsb2F0Q291bnQ7IF92IDwgX247IF92ICs9IF9wZXJWZXJ0ZXhTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHVpbnRWRGF0YVtfdiArIDRdID0gX2ZpbmFsQ29sb3IzMjsgLy8gbGlnaHQgY29sb3JcbiAgICAgICAgICAgICAgICAgICAgdWludFZEYXRhW192ICsgNV0gPSBfZGFya0NvbG9yMzI7IC8vIGRhcmsgY29sb3JcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdXZzID0gdmJ1Zi5zdWJhcnJheShfdmVydGV4RmxvYXRPZmZzZXQgKyAyKTtcbiAgICAgICAgICAgIGNsaXBwZXIuY2xpcFRyaWFuZ2xlcyh2YnVmLnN1YmFycmF5KF92ZXJ0ZXhGbG9hdE9mZnNldCksIF92ZXJ0ZXhGbG9hdENvdW50LCBpYnVmLnN1YmFycmF5KF9pbmRleE9mZnNldCksIF9pbmRleENvdW50LCB1dnMsIF9maW5hbENvbG9yLCBfZGFya0NvbG9yLCBfdXNlVGludCwgX3BlclZlcnRleFNpemUpO1xuICAgICAgICAgICAgdmFyIGNsaXBwZWRWZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoY2xpcHBlci5jbGlwcGVkVmVydGljZXMpO1xuICAgICAgICAgICAgdmFyIGNsaXBwZWRUcmlhbmdsZXMgPSBjbGlwcGVyLmNsaXBwZWRUcmlhbmdsZXM7XG5cbiAgICAgICAgICAgIC8vIGluc3VyZSBjYXBhY2l0eVxuICAgICAgICAgICAgX2luZGV4Q291bnQgPSBjbGlwcGVkVHJpYW5nbGVzLmxlbmd0aDtcbiAgICAgICAgICAgIF92ZXJ0ZXhGbG9hdENvdW50ID0gY2xpcHBlZFZlcnRpY2VzLmxlbmd0aCAvIF9wZXJDbGlwVmVydGV4U2l6ZSAqIF9wZXJWZXJ0ZXhTaXplO1xuXG4gICAgICAgICAgICBvZmZzZXRJbmZvID0gX2J1ZmZlci5yZXF1ZXN0KF92ZXJ0ZXhGbG9hdENvdW50IC8gX3BlclZlcnRleFNpemUsIF9pbmRleENvdW50KTtcbiAgICAgICAgICAgIF9pbmRleE9mZnNldCA9IG9mZnNldEluZm8uaW5kaWNlT2Zmc2V0LCBfdmVydGV4T2Zmc2V0ID0gb2Zmc2V0SW5mby52ZXJ0ZXhPZmZzZXQsIF92ZXJ0ZXhGbG9hdE9mZnNldCA9IG9mZnNldEluZm8uYnl0ZU9mZnNldCA+PiAyO1xuICAgICAgICAgICAgdmJ1ZiA9IF9idWZmZXIuX3ZEYXRhLCBpYnVmID0gX2J1ZmZlci5faURhdGE7XG4gICAgICAgICAgICB1aW50VkRhdGEgPSBfYnVmZmVyLl91aW50VkRhdGE7XG5cbiAgICAgICAgICAgIC8vIGZpbGwgaW5kaWNlc1xuICAgICAgICAgICAgaWJ1Zi5zZXQoY2xpcHBlZFRyaWFuZ2xlcywgX2luZGV4T2Zmc2V0KTtcblxuICAgICAgICAgICAgLy8gZmlsbCB2ZXJ0aWNlcyBjb250YWluIHggeSB1IHYgbGlnaHQgY29sb3IgZGFyayBjb2xvclxuICAgICAgICAgICAgaWYgKCFfdXNlVGludCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF92MiA9IDAsIF9uMiA9IGNsaXBwZWRWZXJ0aWNlcy5sZW5ndGgsIG9mZnNldCA9IF92ZXJ0ZXhGbG9hdE9mZnNldDsgX3YyIDwgX24yOyBfdjIgKz0gOCwgb2Zmc2V0ICs9IF9wZXJWZXJ0ZXhTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHZidWZbb2Zmc2V0XSA9IGNsaXBwZWRWZXJ0aWNlc1tfdjJdOyAvLyB4XG4gICAgICAgICAgICAgICAgICAgIHZidWZbb2Zmc2V0ICsgMV0gPSBjbGlwcGVkVmVydGljZXNbX3YyICsgMV07IC8vIHlcbiAgICAgICAgICAgICAgICAgICAgdmJ1ZltvZmZzZXQgKyAyXSA9IGNsaXBwZWRWZXJ0aWNlc1tfdjIgKyA2XTsgLy8gdVxuICAgICAgICAgICAgICAgICAgICB2YnVmW29mZnNldCArIDNdID0gY2xpcHBlZFZlcnRpY2VzW192MiArIDddOyAvLyB2XG5cbiAgICAgICAgICAgICAgICAgICAgX2ZpbmFsQ29sb3IzMiA9IChjbGlwcGVkVmVydGljZXNbX3YyICsgNV0gPDwgMjQgPj4+IDApICsgKGNsaXBwZWRWZXJ0aWNlc1tfdjIgKyA0XSA8PCAxNikgKyAoY2xpcHBlZFZlcnRpY2VzW192MiArIDNdIDw8IDgpICsgY2xpcHBlZFZlcnRpY2VzW192MiArIDJdO1xuICAgICAgICAgICAgICAgICAgICB1aW50VkRhdGFbb2Zmc2V0ICsgNF0gPSBfZmluYWxDb2xvcjMyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX3YzID0gMCwgX24zID0gY2xpcHBlZFZlcnRpY2VzLmxlbmd0aCwgX29mZnNldCA9IF92ZXJ0ZXhGbG9hdE9mZnNldDsgX3YzIDwgX24zOyBfdjMgKz0gMTIsIF9vZmZzZXQgKz0gX3BlclZlcnRleFNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmJ1Zltfb2Zmc2V0XSA9IGNsaXBwZWRWZXJ0aWNlc1tfdjNdOyAvLyB4XG4gICAgICAgICAgICAgICAgICAgIHZidWZbX29mZnNldCArIDFdID0gY2xpcHBlZFZlcnRpY2VzW192MyArIDFdOyAvLyB5XG4gICAgICAgICAgICAgICAgICAgIHZidWZbX29mZnNldCArIDJdID0gY2xpcHBlZFZlcnRpY2VzW192MyArIDZdOyAvLyB1XG4gICAgICAgICAgICAgICAgICAgIHZidWZbX29mZnNldCArIDNdID0gY2xpcHBlZFZlcnRpY2VzW192MyArIDddOyAvLyB2XG5cbiAgICAgICAgICAgICAgICAgICAgX2ZpbmFsQ29sb3IzMiA9IChjbGlwcGVkVmVydGljZXNbX3YzICsgNV0gPDwgMjQgPj4+IDApICsgKGNsaXBwZWRWZXJ0aWNlc1tfdjMgKyA0XSA8PCAxNikgKyAoY2xpcHBlZFZlcnRpY2VzW192MyArIDNdIDw8IDgpICsgY2xpcHBlZFZlcnRpY2VzW192MyArIDJdO1xuICAgICAgICAgICAgICAgICAgICB1aW50VkRhdGFbX29mZnNldCArIDRdID0gX2ZpbmFsQ29sb3IzMjtcblxuICAgICAgICAgICAgICAgICAgICBfZGFya0NvbG9yMzIgPSAoY2xpcHBlZFZlcnRpY2VzW192MyArIDExXSA8PCAyNCA+Pj4gMCkgKyAoY2xpcHBlZFZlcnRpY2VzW192MyArIDEwXSA8PCAxNikgKyAoY2xpcHBlZFZlcnRpY2VzW192MyArIDldIDw8IDgpICsgY2xpcHBlZFZlcnRpY2VzW192MyArIDhdO1xuICAgICAgICAgICAgICAgICAgICB1aW50VkRhdGFbX29mZnNldCArIDVdID0gX2RhcmtDb2xvcjMyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVhbFRpbWVUcmF2ZXJzZTogZnVuY3Rpb24gcmVhbFRpbWVUcmF2ZXJzZSh3b3JsZE1hdCkge1xuICAgICAgICB2YXIgdmJ1ZiA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGlidWYgPSB2b2lkIDA7XG5cbiAgICAgICAgdmFyIGxvY1NrZWxldG9uID0gX2NvbXAuX3NrZWxldG9uO1xuICAgICAgICB2YXIgc2tlbGV0b25Db2xvciA9IGxvY1NrZWxldG9uLmNvbG9yO1xuICAgICAgICB2YXIgZ3JhcGhpY3MgPSBfY29tcC5fZGVidWdSZW5kZXJlcjtcbiAgICAgICAgdmFyIGNsaXBwZXIgPSBfY29tcC5fY2xpcHBlcjtcbiAgICAgICAgdmFyIG1hdGVyaWFsID0gbnVsbDtcbiAgICAgICAgdmFyIGF0dGFjaG1lbnQgPSB2b2lkIDAsXG4gICAgICAgICAgICBhdHRhY2htZW50Q29sb3IgPSB2b2lkIDAsXG4gICAgICAgICAgICBzbG90Q29sb3IgPSB2b2lkIDAsXG4gICAgICAgICAgICB1dnMgPSB2b2lkIDAsXG4gICAgICAgICAgICB0cmlhbmdsZXMgPSB2b2lkIDA7XG4gICAgICAgIHZhciBpc1JlZ2lvbiA9IHZvaWQgMCxcbiAgICAgICAgICAgIGlzTWVzaCA9IHZvaWQgMCxcbiAgICAgICAgICAgIGlzQ2xpcCA9IHZvaWQgMDtcbiAgICAgICAgdmFyIG9mZnNldEluZm8gPSB2b2lkIDA7XG4gICAgICAgIHZhciBzbG90ID0gdm9pZCAwO1xuXG4gICAgICAgIF9zbG90UmFuZ2VTdGFydCA9IF9jb21wLl9zdGFydFNsb3RJbmRleDtcbiAgICAgICAgX3Nsb3RSYW5nZUVuZCA9IF9jb21wLl9lbmRTbG90SW5kZXg7XG4gICAgICAgIF9pblJhbmdlID0gZmFsc2U7XG4gICAgICAgIGlmIChfc2xvdFJhbmdlU3RhcnQgPT0gLTEpIF9pblJhbmdlID0gdHJ1ZTtcblxuICAgICAgICBfZGVidWdTbG90cyA9IF9jb21wLmRlYnVnU2xvdHM7XG4gICAgICAgIF9kZWJ1Z0JvbmVzID0gX2NvbXAuZGVidWdCb25lcztcbiAgICAgICAgaWYgKGdyYXBoaWNzICYmIChfZGVidWdCb25lcyB8fCBfZGVidWdTbG90cykpIHtcbiAgICAgICAgICAgIGdyYXBoaWNzLmNsZWFyKCk7XG4gICAgICAgICAgICBncmFwaGljcy5zdHJva2VDb2xvciA9IF9zbG90Q29sb3I7XG4gICAgICAgICAgICBncmFwaGljcy5saW5lV2lkdGggPSA1O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8geCB5IHUgdiByMSBnMSBiMSBhMSByMiBnMiBiMiBhMiBvciB4IHkgdSB2IHIgZyBiIGEgXG4gICAgICAgIF9wZXJDbGlwVmVydGV4U2l6ZSA9IF91c2VUaW50ID8gMTIgOiA4O1xuXG4gICAgICAgIF92ZXJ0ZXhGbG9hdENvdW50ID0gMDtcbiAgICAgICAgX3ZlcnRleEZsb2F0T2Zmc2V0ID0gMDtcbiAgICAgICAgX3ZlcnRleE9mZnNldCA9IDA7XG4gICAgICAgIF9pbmRleENvdW50ID0gMDtcbiAgICAgICAgX2luZGV4T2Zmc2V0ID0gMDtcblxuICAgICAgICBmb3IgKHZhciBzbG90SWR4ID0gMCwgc2xvdENvdW50ID0gbG9jU2tlbGV0b24uZHJhd09yZGVyLmxlbmd0aDsgc2xvdElkeCA8IHNsb3RDb3VudDsgc2xvdElkeCsrKSB7XG4gICAgICAgICAgICBzbG90ID0gbG9jU2tlbGV0b24uZHJhd09yZGVyW3Nsb3RJZHhdO1xuXG4gICAgICAgICAgICBpZiAoX3Nsb3RSYW5nZVN0YXJ0ID49IDAgJiYgX3Nsb3RSYW5nZVN0YXJ0ID09IHNsb3QuZGF0YS5pbmRleCkge1xuICAgICAgICAgICAgICAgIF9pblJhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFfaW5SYW5nZSkge1xuICAgICAgICAgICAgICAgIGNsaXBwZXIuY2xpcEVuZFdpdGhTbG90KHNsb3QpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoX3Nsb3RSYW5nZUVuZCA+PSAwICYmIF9zbG90UmFuZ2VFbmQgPT0gc2xvdC5kYXRhLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgX2luUmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3ZlcnRleEZsb2F0Q291bnQgPSAwO1xuICAgICAgICAgICAgX2luZGV4Q291bnQgPSAwO1xuXG4gICAgICAgICAgICBhdHRhY2htZW50ID0gc2xvdC5nZXRBdHRhY2htZW50KCk7XG4gICAgICAgICAgICBpZiAoIWF0dGFjaG1lbnQpIHtcbiAgICAgICAgICAgICAgICBjbGlwcGVyLmNsaXBFbmRXaXRoU2xvdChzbG90KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaXNSZWdpb24gPSBhdHRhY2htZW50IGluc3RhbmNlb2Ygc3BpbmUuUmVnaW9uQXR0YWNobWVudDtcbiAgICAgICAgICAgIGlzTWVzaCA9IGF0dGFjaG1lbnQgaW5zdGFuY2VvZiBzcGluZS5NZXNoQXR0YWNobWVudDtcbiAgICAgICAgICAgIGlzQ2xpcCA9IGF0dGFjaG1lbnQgaW5zdGFuY2VvZiBzcGluZS5DbGlwcGluZ0F0dGFjaG1lbnQ7XG5cbiAgICAgICAgICAgIGlmIChpc0NsaXApIHtcbiAgICAgICAgICAgICAgICBjbGlwcGVyLmNsaXBTdGFydChzbG90LCBhdHRhY2htZW50KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFpc1JlZ2lvbiAmJiAhaXNNZXNoKSB7XG4gICAgICAgICAgICAgICAgY2xpcHBlci5jbGlwRW5kV2l0aFNsb3Qoc2xvdCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1hdGVyaWFsID0gX2dldFNsb3RNYXRlcmlhbChhdHRhY2htZW50LnJlZ2lvbi50ZXh0dXJlLl90ZXh0dXJlLCBzbG90LmRhdGEuYmxlbmRNb2RlKTtcbiAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICBjbGlwcGVyLmNsaXBFbmRXaXRoU2xvdChzbG90KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF9tdXN0Rmx1c2ggfHwgbWF0ZXJpYWwuX2hhc2ggIT09IF9yZW5kZXJlci5tYXRlcmlhbC5faGFzaCkge1xuICAgICAgICAgICAgICAgIF9tdXN0Rmx1c2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfcmVuZGVyZXIuX2ZsdXNoKCk7XG4gICAgICAgICAgICAgICAgX3JlbmRlcmVyLm5vZGUgPSBfbm9kZTtcbiAgICAgICAgICAgICAgICBfcmVuZGVyZXIubWF0ZXJpYWwgPSBtYXRlcmlhbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzUmVnaW9uKSB7XG5cbiAgICAgICAgICAgICAgICB0cmlhbmdsZXMgPSBfcXVhZFRyaWFuZ2xlcztcblxuICAgICAgICAgICAgICAgIC8vIGluc3VyZSBjYXBhY2l0eVxuICAgICAgICAgICAgICAgIF92ZXJ0ZXhGbG9hdENvdW50ID0gNCAqIF9wZXJWZXJ0ZXhTaXplO1xuICAgICAgICAgICAgICAgIF9pbmRleENvdW50ID0gNjtcblxuICAgICAgICAgICAgICAgIG9mZnNldEluZm8gPSBfYnVmZmVyLnJlcXVlc3QoNCwgNik7XG4gICAgICAgICAgICAgICAgX2luZGV4T2Zmc2V0ID0gb2Zmc2V0SW5mby5pbmRpY2VPZmZzZXQsIF92ZXJ0ZXhPZmZzZXQgPSBvZmZzZXRJbmZvLnZlcnRleE9mZnNldCwgX3ZlcnRleEZsb2F0T2Zmc2V0ID0gb2Zmc2V0SW5mby5ieXRlT2Zmc2V0ID4+IDI7XG4gICAgICAgICAgICAgICAgdmJ1ZiA9IF9idWZmZXIuX3ZEYXRhLCBpYnVmID0gX2J1ZmZlci5faURhdGE7XG5cbiAgICAgICAgICAgICAgICAvLyBjb21wdXRlIHZlcnRleCBhbmQgZmlsbCB4IHlcbiAgICAgICAgICAgICAgICBhdHRhY2htZW50LmNvbXB1dGVXb3JsZFZlcnRpY2VzKHNsb3QuYm9uZSwgdmJ1ZiwgX3ZlcnRleEZsb2F0T2Zmc2V0LCBfcGVyVmVydGV4U2l6ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBkcmF3IGRlYnVnIHNsb3RzIGlmIGVuYWJsZWQgZ3JhcGhpY3NcbiAgICAgICAgICAgICAgICBpZiAoZ3JhcGhpY3MgJiYgX2RlYnVnU2xvdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGhpY3MubW92ZVRvKHZidWZbX3ZlcnRleEZsb2F0T2Zmc2V0XSwgdmJ1ZltfdmVydGV4RmxvYXRPZmZzZXQgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGlpID0gX3ZlcnRleEZsb2F0T2Zmc2V0ICsgX3BlclZlcnRleFNpemUsIG5uID0gX3ZlcnRleEZsb2F0T2Zmc2V0ICsgX3ZlcnRleEZsb2F0Q291bnQ7IGlpIDwgbm47IGlpICs9IF9wZXJWZXJ0ZXhTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmFwaGljcy5saW5lVG8odmJ1ZltpaV0sIHZidWZbaWkgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZ3JhcGhpY3MuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGhpY3Muc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01lc2gpIHtcblxuICAgICAgICAgICAgICAgIHRyaWFuZ2xlcyA9IGF0dGFjaG1lbnQudHJpYW5nbGVzO1xuXG4gICAgICAgICAgICAgICAgLy8gaW5zdXJlIGNhcGFjaXR5XG4gICAgICAgICAgICAgICAgX3ZlcnRleEZsb2F0Q291bnQgPSAoYXR0YWNobWVudC53b3JsZFZlcnRpY2VzTGVuZ3RoID4+IDEpICogX3BlclZlcnRleFNpemU7XG4gICAgICAgICAgICAgICAgX2luZGV4Q291bnQgPSB0cmlhbmdsZXMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgb2Zmc2V0SW5mbyA9IF9idWZmZXIucmVxdWVzdChfdmVydGV4RmxvYXRDb3VudCAvIF9wZXJWZXJ0ZXhTaXplLCBfaW5kZXhDb3VudCk7XG4gICAgICAgICAgICAgICAgX2luZGV4T2Zmc2V0ID0gb2Zmc2V0SW5mby5pbmRpY2VPZmZzZXQsIF92ZXJ0ZXhPZmZzZXQgPSBvZmZzZXRJbmZvLnZlcnRleE9mZnNldCwgX3ZlcnRleEZsb2F0T2Zmc2V0ID0gb2Zmc2V0SW5mby5ieXRlT2Zmc2V0ID4+IDI7XG4gICAgICAgICAgICAgICAgdmJ1ZiA9IF9idWZmZXIuX3ZEYXRhLCBpYnVmID0gX2J1ZmZlci5faURhdGE7XG5cbiAgICAgICAgICAgICAgICAvLyBjb21wdXRlIHZlcnRleCBhbmQgZmlsbCB4IHlcbiAgICAgICAgICAgICAgICBhdHRhY2htZW50LmNvbXB1dGVXb3JsZFZlcnRpY2VzKHNsb3QsIDAsIGF0dGFjaG1lbnQud29ybGRWZXJ0aWNlc0xlbmd0aCwgdmJ1ZiwgX3ZlcnRleEZsb2F0T2Zmc2V0LCBfcGVyVmVydGV4U2l6ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfdmVydGV4RmxvYXRDb3VudCA9PSAwIHx8IF9pbmRleENvdW50ID09IDApIHtcbiAgICAgICAgICAgICAgICBjbGlwcGVyLmNsaXBFbmRXaXRoU2xvdChzbG90KTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZmlsbCBpbmRpY2VzXG4gICAgICAgICAgICBpYnVmLnNldCh0cmlhbmdsZXMsIF9pbmRleE9mZnNldCk7XG5cbiAgICAgICAgICAgIC8vIGZpbGwgdSB2XG4gICAgICAgICAgICB1dnMgPSBhdHRhY2htZW50LnV2cztcbiAgICAgICAgICAgIGZvciAodmFyIHYgPSBfdmVydGV4RmxvYXRPZmZzZXQsIG4gPSBfdmVydGV4RmxvYXRPZmZzZXQgKyBfdmVydGV4RmxvYXRDb3VudCwgdSA9IDA7IHYgPCBuOyB2ICs9IF9wZXJWZXJ0ZXhTaXplLCB1ICs9IDIpIHtcbiAgICAgICAgICAgICAgICB2YnVmW3YgKyAyXSA9IHV2c1t1XTsgLy8gdVxuICAgICAgICAgICAgICAgIHZidWZbdiArIDNdID0gdXZzW3UgKyAxXTsgLy8gdlxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRhY2htZW50Q29sb3IgPSBhdHRhY2htZW50LmNvbG9yLCBzbG90Q29sb3IgPSBzbG90LmNvbG9yO1xuXG4gICAgICAgICAgICB0aGlzLmZpbGxWZXJ0aWNlcyhza2VsZXRvbkNvbG9yLCBhdHRhY2htZW50Q29sb3IsIHNsb3RDb2xvciwgY2xpcHBlciwgc2xvdCk7XG5cbiAgICAgICAgICAgIGlmIChfaW5kZXhDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaWkgPSBfaW5kZXhPZmZzZXQsIF9ubiA9IF9pbmRleE9mZnNldCArIF9pbmRleENvdW50OyBfaWkgPCBfbm47IF9paSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlidWZbX2lpXSArPSBfdmVydGV4T2Zmc2V0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh3b3JsZE1hdCkge1xuICAgICAgICAgICAgICAgICAgICBfbTAwID0gd29ybGRNYXQubTAwO1xuICAgICAgICAgICAgICAgICAgICBfbTA0ID0gd29ybGRNYXQubTA0O1xuICAgICAgICAgICAgICAgICAgICBfbTEyID0gd29ybGRNYXQubTEyO1xuICAgICAgICAgICAgICAgICAgICBfbTAxID0gd29ybGRNYXQubTAxO1xuICAgICAgICAgICAgICAgICAgICBfbTA1ID0gd29ybGRNYXQubTA1O1xuICAgICAgICAgICAgICAgICAgICBfbTEzID0gd29ybGRNYXQubTEzO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaWkyID0gX3ZlcnRleEZsb2F0T2Zmc2V0LCBfbm4yID0gX3ZlcnRleEZsb2F0T2Zmc2V0ICsgX3ZlcnRleEZsb2F0Q291bnQ7IF9paTIgPCBfbm4yOyBfaWkyICs9IF9wZXJWZXJ0ZXhTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfeCA9IHZidWZbX2lpMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBfeSA9IHZidWZbX2lpMiArIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmJ1ZltfaWkyXSA9IF94ICogX20wMCArIF95ICogX20wNCArIF9tMTI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YnVmW19paTIgKyAxXSA9IF94ICogX20wMSArIF95ICogX20wNSArIF9tMTM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX2J1ZmZlci5hZGp1c3QoX3ZlcnRleEZsb2F0Q291bnQgLyBfcGVyVmVydGV4U2l6ZSwgX2luZGV4Q291bnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjbGlwcGVyLmNsaXBFbmRXaXRoU2xvdChzbG90KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsaXBwZXIuY2xpcEVuZCgpO1xuXG4gICAgICAgIGlmIChncmFwaGljcyAmJiBfZGVidWdCb25lcykge1xuICAgICAgICAgICAgdmFyIGJvbmUgPSB2b2lkIDA7XG4gICAgICAgICAgICBncmFwaGljcy5zdHJva2VDb2xvciA9IF9ib25lQ29sb3I7XG4gICAgICAgICAgICBncmFwaGljcy5maWxsQ29sb3IgPSBfc2xvdENvbG9yOyAvLyBSb290IGJvbmUgY29sb3IgaXMgc2FtZSBhcyBzbG90IGNvbG9yLlxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgX240ID0gbG9jU2tlbGV0b24uYm9uZXMubGVuZ3RoOyBpIDwgX240OyBpKyspIHtcbiAgICAgICAgICAgICAgICBib25lID0gbG9jU2tlbGV0b24uYm9uZXNbaV07XG4gICAgICAgICAgICAgICAgdmFyIHggPSBib25lLmRhdGEubGVuZ3RoICogYm9uZS5hICsgYm9uZS53b3JsZFg7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSBib25lLmRhdGEubGVuZ3RoICogYm9uZS5jICsgYm9uZS53b3JsZFk7XG5cbiAgICAgICAgICAgICAgICAvLyBCb25lIGxlbmd0aHMuXG4gICAgICAgICAgICAgICAgZ3JhcGhpY3MubW92ZVRvKGJvbmUud29ybGRYLCBib25lLndvcmxkWSk7XG4gICAgICAgICAgICAgICAgZ3JhcGhpY3MubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgICAgIGdyYXBoaWNzLnN0cm9rZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gQm9uZSBvcmlnaW5zLlxuICAgICAgICAgICAgICAgIGdyYXBoaWNzLmNpcmNsZShib25lLndvcmxkWCwgYm9uZS53b3JsZFksIE1hdGguUEkgKiAyKTtcbiAgICAgICAgICAgICAgICBncmFwaGljcy5maWxsKCk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JhcGhpY3MuZmlsbENvbG9yID0gX29yaWdpbkNvbG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgY2FjaGVUcmF2ZXJzZTogZnVuY3Rpb24gY2FjaGVUcmF2ZXJzZSh3b3JsZE1hdCkge1xuXG4gICAgICAgIHZhciBmcmFtZSA9IF9jb21wLl9jdXJGcmFtZTtcbiAgICAgICAgaWYgKCFmcmFtZSkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBzZWdtZW50cyA9IGZyYW1lLnNlZ21lbnRzO1xuICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID09IDApIHJldHVybjtcblxuICAgICAgICB2YXIgdmJ1ZiA9IHZvaWQgMCxcbiAgICAgICAgICAgIGlidWYgPSB2b2lkIDAsXG4gICAgICAgICAgICB1aW50YnVmID0gdm9pZCAwO1xuICAgICAgICB2YXIgbWF0ZXJpYWwgPSB2b2lkIDA7XG4gICAgICAgIHZhciBvZmZzZXRJbmZvID0gdm9pZCAwO1xuICAgICAgICB2YXIgdmVydGljZXMgPSBmcmFtZS52ZXJ0aWNlcztcbiAgICAgICAgdmFyIGluZGljZXMgPSBmcmFtZS5pbmRpY2VzO1xuICAgICAgICB2YXIgdWludFZlcnQgPSBmcmFtZS51aW50VmVydDtcblxuICAgICAgICB2YXIgZnJhbWVWRk9mZnNldCA9IDAsXG4gICAgICAgICAgICBmcmFtZUluZGV4T2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIHNlZ1ZGQ291bnQgPSAwO1xuICAgICAgICBpZiAod29ybGRNYXQpIHtcbiAgICAgICAgICAgIF9tMDAgPSB3b3JsZE1hdC5tMDA7XG4gICAgICAgICAgICBfbTA0ID0gd29ybGRNYXQubTA0O1xuICAgICAgICAgICAgX20xMiA9IHdvcmxkTWF0Lm0xMjtcbiAgICAgICAgICAgIF9tMDEgPSB3b3JsZE1hdC5tMDE7XG4gICAgICAgICAgICBfbTA1ID0gd29ybGRNYXQubTA1O1xuICAgICAgICAgICAgX20xMyA9IHdvcmxkTWF0Lm0xMztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb2xvck9mZnNldCA9IDA7XG4gICAgICAgIHZhciBjb2xvcnMgPSBmcmFtZS5jb2xvcnM7XG4gICAgICAgIHZhciBub3dDb2xvciA9IGNvbG9yc1tjb2xvck9mZnNldCsrXTtcbiAgICAgICAgdmFyIG1heFZGT2Zmc2V0ID0gbm93Q29sb3IudmZPZmZzZXQ7XG4gICAgICAgIF9oYW5kbGVDb2xvcihub3dDb2xvcik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzZWdJbmZvID0gc2VnbWVudHNbaV07XG4gICAgICAgICAgICBtYXRlcmlhbCA9IF9nZXRTbG90TWF0ZXJpYWwoc2VnSW5mby50ZXgsIHNlZ0luZm8uYmxlbmRNb2RlKTtcbiAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAoX211c3RGbHVzaCB8fCBtYXRlcmlhbC5faGFzaCAhPT0gX3JlbmRlcmVyLm1hdGVyaWFsLl9oYXNoKSB7XG4gICAgICAgICAgICAgICAgX211c3RGbHVzaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF9yZW5kZXJlci5fZmx1c2goKTtcbiAgICAgICAgICAgICAgICBfcmVuZGVyZXIubm9kZSA9IF9ub2RlO1xuICAgICAgICAgICAgICAgIF9yZW5kZXJlci5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdmVydGV4Q291bnQgPSBzZWdJbmZvLnZlcnRleENvdW50O1xuICAgICAgICAgICAgX2luZGV4Q291bnQgPSBzZWdJbmZvLmluZGV4Q291bnQ7XG4gICAgICAgICAgICBfdmVydGV4RmxvYXRDb3VudCA9IF92ZXJ0ZXhDb3VudCAqIF9wZXJWZXJ0ZXhTaXplO1xuXG4gICAgICAgICAgICBvZmZzZXRJbmZvID0gX2J1ZmZlci5yZXF1ZXN0KF92ZXJ0ZXhDb3VudCwgX2luZGV4Q291bnQpO1xuICAgICAgICAgICAgX2luZGV4T2Zmc2V0ID0gb2Zmc2V0SW5mby5pbmRpY2VPZmZzZXQ7XG4gICAgICAgICAgICBfdmVydGV4T2Zmc2V0ID0gb2Zmc2V0SW5mby52ZXJ0ZXhPZmZzZXQ7XG4gICAgICAgICAgICBfdmZPZmZzZXQgPSBvZmZzZXRJbmZvLmJ5dGVPZmZzZXQgPj4gMjtcbiAgICAgICAgICAgIHZidWYgPSBfYnVmZmVyLl92RGF0YTtcbiAgICAgICAgICAgIGlidWYgPSBfYnVmZmVyLl9pRGF0YTtcbiAgICAgICAgICAgIHVpbnRidWYgPSBfYnVmZmVyLl91aW50VkRhdGE7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGlpID0gX2luZGV4T2Zmc2V0LCBpbCA9IF9pbmRleE9mZnNldCArIF9pbmRleENvdW50OyBpaSA8IGlsOyBpaSsrKSB7XG4gICAgICAgICAgICAgICAgaWJ1ZltpaV0gPSBfdmVydGV4T2Zmc2V0ICsgaW5kaWNlc1tmcmFtZUluZGV4T2Zmc2V0KytdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWdWRkNvdW50ID0gc2VnSW5mby52ZkNvdW50O1xuXG4gICAgICAgICAgICBzd2l0Y2ggKF9oYW5kbGVWYWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIE5PVF9CQVRDSF9PTkVfQ09MT1I6XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9paTMgPSBfdmZPZmZzZXQsIF9pbCA9IF92Zk9mZnNldCArIF92ZXJ0ZXhGbG9hdENvdW50OyBfaWkzIDwgX2lsOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmJ1ZltfaWkzKytdID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTsgLy8geFxuICAgICAgICAgICAgICAgICAgICAgICAgdmJ1ZltfaWkzKytdID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTsgLy8geVxuICAgICAgICAgICAgICAgICAgICAgICAgdmJ1ZltfaWkzKytdID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTsgLy8gdVxuICAgICAgICAgICAgICAgICAgICAgICAgdmJ1ZltfaWkzKytdID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTsgLy8gdlxuICAgICAgICAgICAgICAgICAgICAgICAgdWludGJ1ZltfaWkzKytdID0gdWludFZlcnRbZnJhbWVWRk9mZnNldCsrXTsgLy8gZmluYWwgY29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lVkZPZmZzZXQrKzsgLy8ganVtcCBkYXJrIGNvbG9yXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBOT1RfQkFUQ0hfVFdPX0NPTE9SOlxuICAgICAgICAgICAgICAgICAgICB2YnVmLnNldCh2ZXJ0aWNlcy5zdWJhcnJheShmcmFtZVZGT2Zmc2V0LCBmcmFtZVZGT2Zmc2V0ICsgX3ZlcnRleEZsb2F0Q291bnQpLCBfdmZPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZVZGT2Zmc2V0ICs9IF92ZXJ0ZXhGbG9hdENvdW50O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEJBVENIX09ORV9DT0xPUjpcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2lpNCA9IF92Zk9mZnNldCwgX2lsMiA9IF92Zk9mZnNldCArIF92ZXJ0ZXhGbG9hdENvdW50OyBfaWk0IDwgX2lsMjspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF94ID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF95ID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZidWZbX2lpNCsrXSA9IF94ICogX20wMCArIF95ICogX20wNCArIF9tMTI7IC8vIHhcbiAgICAgICAgICAgICAgICAgICAgICAgIHZidWZbX2lpNCsrXSA9IF94ICogX20wMSArIF95ICogX20wNSArIF9tMTM7IC8vIHlcbiAgICAgICAgICAgICAgICAgICAgICAgIHZidWZbX2lpNCsrXSA9IHZlcnRpY2VzW2ZyYW1lVkZPZmZzZXQrK107IC8vIHVcbiAgICAgICAgICAgICAgICAgICAgICAgIHZidWZbX2lpNCsrXSA9IHZlcnRpY2VzW2ZyYW1lVkZPZmZzZXQrK107IC8vIHZcbiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnRidWZbX2lpNCsrXSA9IHVpbnRWZXJ0W2ZyYW1lVkZPZmZzZXQrK107IC8vIGZpbmFsIGNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZVZGT2Zmc2V0Kys7IC8vIGRhcmsgY29sb3JcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEJBVENIX1RXT19DT0xPUjpcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2lpNSA9IF92Zk9mZnNldCwgX2lsMyA9IF92Zk9mZnNldCArIF92ZXJ0ZXhGbG9hdENvdW50OyBfaWk1IDwgX2lsMzspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF94ID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF95ID0gdmVydGljZXNbZnJhbWVWRk9mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZidWZbX2lpNSsrXSA9IF94ICogX20wMCArIF95ICogX20wNCArIF9tMTI7IC8vIHhcbiAgICAgICAgICAgICAgICAgICAgICAgIHZidWZbX2lpNSsrXSA9IF94ICogX20wMSArIF95ICogX20wNSArIF9tMTM7IC8vIHlcbiAgICAgICAgICAgICAgICAgICAgICAgIHZidWZbX2lpNSsrXSA9IHZlcnRpY2VzW2ZyYW1lVkZPZmZzZXQrK107IC8vIHVcbiAgICAgICAgICAgICAgICAgICAgICAgIHZidWZbX2lpNSsrXSA9IHZlcnRpY2VzW2ZyYW1lVkZPZmZzZXQrK107IC8vIHZcbiAgICAgICAgICAgICAgICAgICAgICAgIHVpbnRidWZbX2lpNSsrXSA9IHVpbnRWZXJ0W2ZyYW1lVkZPZmZzZXQrK107IC8vIGZpbmFsIGNvbG9yXG4gICAgICAgICAgICAgICAgICAgICAgICB1aW50YnVmW19paTUrK10gPSB1aW50VmVydFtmcmFtZVZGT2Zmc2V0KytdOyAvLyBkYXJrIGNvbG9yXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9idWZmZXIuYWRqdXN0KF92ZXJ0ZXhDb3VudCwgX2luZGV4Q291bnQpO1xuICAgICAgICAgICAgaWYgKCFfbmVlZENvbG9yKSBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gaGFuZGxlIGNvbG9yXG4gICAgICAgICAgICB2YXIgZnJhbWVDb2xvck9mZnNldCA9IGZyYW1lVkZPZmZzZXQgLSBzZWdWRkNvdW50O1xuICAgICAgICAgICAgZm9yICh2YXIgX2lpNiA9IF92Zk9mZnNldCArIDQsIF9pbDQgPSBfdmZPZmZzZXQgKyA0ICsgX3ZlcnRleEZsb2F0Q291bnQ7IF9paTYgPCBfaWw0OyBfaWk2ICs9IF9wZXJWZXJ0ZXhTaXplLCBmcmFtZUNvbG9yT2Zmc2V0ICs9IDYpIHtcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWVDb2xvck9mZnNldCA+PSBtYXhWRk9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBub3dDb2xvciA9IGNvbG9yc1tjb2xvck9mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgX2hhbmRsZUNvbG9yKG5vd0NvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgbWF4VkZPZmZzZXQgPSBub3dDb2xvci52Zk9mZnNldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdWludGJ1ZltfaWk2XSA9IF9maW5hbENvbG9yMzI7XG4gICAgICAgICAgICAgICAgX3VzZVRpbnQgJiYgKHVpbnRidWZbX2lpNiArIDFdID0gX2RhcmtDb2xvcjMyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgZmlsbEJ1ZmZlcnM6IGZ1bmN0aW9uIGZpbGxCdWZmZXJzKGNvbXAsIHJlbmRlcmVyKSB7XG5cbiAgICAgICAgdmFyIG5vZGUgPSBjb21wLm5vZGU7XG4gICAgICAgIG5vZGUuX3JlbmRlckZsYWcgfD0gUmVuZGVyRmxvdy5GTEFHX1VQREFURV9SRU5ERVJfREFUQTtcbiAgICAgICAgaWYgKCFjb21wLl9za2VsZXRvbikgcmV0dXJuO1xuXG4gICAgICAgIHZhciBub2RlQ29sb3IgPSBub2RlLl9jb2xvcjtcbiAgICAgICAgX25vZGVSID0gbm9kZUNvbG9yLnIgLyAyNTU7XG4gICAgICAgIF9ub2RlRyA9IG5vZGVDb2xvci5nIC8gMjU1O1xuICAgICAgICBfbm9kZUIgPSBub2RlQ29sb3IuYiAvIDI1NTtcbiAgICAgICAgX25vZGVBID0gbm9kZUNvbG9yLmEgLyAyNTU7XG5cbiAgICAgICAgX3VzZVRpbnQgPSBjb21wLnVzZVRpbnQ7XG4gICAgICAgIF92ZXJ0ZXhGb3JtYXQgPSBfdXNlVGludCA/IFZGVHdvQ29sb3IgOiBWRk9uZUNvbG9yO1xuICAgICAgICAvLyB4IHkgdSB2IGNvbG9yMSBjb2xvcjIgb3IgeCB5IHUgdiBjb2xvclxuICAgICAgICBfcGVyVmVydGV4U2l6ZSA9IF91c2VUaW50ID8gNiA6IDU7XG5cbiAgICAgICAgX25vZGUgPSBjb21wLm5vZGU7XG4gICAgICAgIF9idWZmZXIgPSByZW5kZXJlci5nZXRCdWZmZXIoJ3NwaW5lJywgX3ZlcnRleEZvcm1hdCk7XG4gICAgICAgIF9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICBfY29tcCA9IGNvbXA7XG5cbiAgICAgICAgX211c3RGbHVzaCA9IHRydWU7XG4gICAgICAgIF9wcmVtdWx0aXBsaWVkQWxwaGEgPSBjb21wLnByZW11bHRpcGxpZWRBbHBoYTtcbiAgICAgICAgX211bHRpcGxpZXIgPSAxLjA7XG4gICAgICAgIF9oYW5kbGVWYWwgPSAweDAwO1xuICAgICAgICBfbmVlZENvbG9yID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKG5vZGVDb2xvci5fdmFsICE9PSAweGZmZmZmZmZmIHx8IF9wcmVtdWx0aXBsaWVkQWxwaGEpIHtcbiAgICAgICAgICAgIF9uZWVkQ29sb3IgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF91c2VUaW50KSB7XG4gICAgICAgICAgICBfaGFuZGxlVmFsIHw9IEZMQUdfVFdPX0NPTE9SO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdvcmxkTWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoX2NvbXAuZW5hYmxlQmF0Y2gpIHtcbiAgICAgICAgICAgIHdvcmxkTWF0ID0gX25vZGUuX3dvcmxkTWF0cml4O1xuICAgICAgICAgICAgX211c3RGbHVzaCA9IGZhbHNlO1xuICAgICAgICAgICAgX2hhbmRsZVZhbCB8PSBGTEFHX0JBVENIO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbXAuaXNBbmltYXRpb25DYWNoZWQoKSkge1xuICAgICAgICAgICAgLy8gVHJhdmVyc2UgaW5wdXQgYXNzZW1ibGVyLlxuICAgICAgICAgICAgdGhpcy5jYWNoZVRyYXZlcnNlKHdvcmxkTWF0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVhbFRpbWVUcmF2ZXJzZSh3b3JsZE1hdCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDbGVhciB0ZW1wIHZhci5cbiAgICAgICAgX25vZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIF9idWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIF9yZW5kZXJlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgX2NvbXAgPSB1bmRlZmluZWQ7XG4gICAgfVxufTtcblxuU2tlbGV0b24uX2Fzc2VtYmxlciA9IHNwaW5lQXNzZW1ibGVyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNwaW5lQXNzZW1ibGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5Od2FXNWxMV0Z6YzJWdFlteGxjaTVxY3lKZExDSnVZVzFsY3lJNld5SlRhMlZzWlhSdmJpSXNJbkpsY1hWcGNtVWlMQ0p6Y0dsdVpTSXNJbEpsYm1SbGNrWnNiM2NpTENKV1pYSjBaWGhHYjNKdFlYUWlMQ0pXUms5dVpVTnZiRzl5SWl3aWRtWnRkRkJ2YzFWMlEyOXNiM0lpTENKV1JsUjNiME52Ykc5eUlpd2lkbVp0ZEZCdmMxVjJWSGR2UTI5c2IzSWlMQ0puWm5naUxDSmpZeUlzSWtaTVFVZGZRa0ZVUTBnaUxDSkdURUZIWDFSWFQxOURUMHhQVWlJc0lrNVBWRjlDUVZSRFNGOVBUa1ZmUTA5TVQxSWlMQ0pPVDFSZlFrRlVRMGhmVkZkUFgwTlBURTlTSWl3aVFrRlVRMGhmVDA1RlgwTlBURTlTSWl3aVFrRlVRMGhmVkZkUFgwTlBURTlTSWl3aVgyaGhibVJzWlZaaGJDSXNJbDl4ZFdGa1ZISnBZVzVuYkdWeklpd2lYM05zYjNSRGIyeHZjaUlzSW1OdmJHOXlJaXdpWDJKdmJtVkRiMnh2Y2lJc0lsOXZjbWxuYVc1RGIyeHZjaUlzSWw5bWFXNWhiRU52Ykc5eUlpd2lkVzVrWldacGJtVmtJaXdpWDJSaGNtdERiMnh2Y2lJc0lrTkRYMHBUUWlJc0lrTnZiRzl5SWl3aVgzQnlaVzExYkhScGNHeHBaV1JCYkhCb1lTSXNJbDl0ZFd4MGFYQnNhV1Z5SWl3aVgzTnNiM1JTWVc1blpWTjBZWEowSWl3aVgzTnNiM1JTWVc1blpVVnVaQ0lzSWw5MWMyVlVhVzUwSWl3aVgyUmxZblZuVTJ4dmRITWlMQ0pmWkdWaWRXZENiMjVsY3lJc0lsOXViMlJsVWlJc0lsOXViMlJsUnlJc0lsOXViMlJsUWlJc0lsOXViMlJsUVNJc0lsOW1hVzVoYkVOdmJHOXlNeklpTENKZlpHRnlhME52Ykc5eU16SWlMQ0pmZG1WeWRHVjRSbTl5YldGMElpd2lYM0JsY2xabGNuUmxlRk5wZW1VaUxDSmZjR1Z5UTJ4cGNGWmxjblJsZUZOcGVtVWlMQ0pmZG1WeWRHVjRSbXh2WVhSRGIzVnVkQ0lzSWw5MlpYSjBaWGhEYjNWdWRDSXNJbDkyWlhKMFpYaEdiRzloZEU5bVpuTmxkQ0lzSWw5MlpYSjBaWGhQWm1aelpYUWlMQ0pmYVc1a1pYaERiM1Z1ZENJc0lsOXBibVJsZUU5bVpuTmxkQ0lzSWw5MlprOW1abk5sZENJc0lsOTBaVzF3Y2lJc0lsOTBaVzF3WnlJc0lsOTBaVzF3WWlJc0lsOXBibEpoYm1kbElpd2lYMjExYzNSR2JIVnphQ0lzSWw5NElpd2lYM2tpTENKZmJUQXdJaXdpWDIwd05DSXNJbDl0TVRJaUxDSmZiVEF4SWl3aVgyMHdOU0lzSWw5dE1UTWlMQ0pmY2lJc0lsOW5JaXdpWDJJaUxDSmZabklpTENKZlptY2lMQ0pmWm1JaUxDSmZabUVpTENKZlpISWlMQ0pmWkdjaUxDSmZaR0lpTENKZlpHRWlMQ0pmWTI5dGNDSXNJbDlpZFdabVpYSWlMQ0pmY21WdVpHVnlaWElpTENKZmJtOWtaU0lzSWw5dVpXVmtRMjlzYjNJaUxDSmZaMlYwVTJ4dmRFMWhkR1Z5YVdGc0lpd2lkR1Y0SWl3aVlteGxibVJOYjJSbElpd2ljM0pqSWl3aVpITjBJaXdpUW14bGJtUk5iMlJsSWl3aVFXUmthWFJwZG1VaUxDSnRZV055YnlJc0lrOU9SU0lzSWxOU1ExOUJURkJJUVNJc0lrMTFiSFJwY0d4NUlpd2lSRk5VWDBOUFRFOVNJaXdpVDA1RlgwMUpUbFZUWDFOU1ExOUJURkJJUVNJc0lsTmpjbVZsYmlJc0lrOU9SVjlOU1U1VlUxOVRVa05mUTA5TVQxSWlMQ0pPYjNKdFlXd2lMQ0oxYzJWTmIyUmxiQ0lzSW1WdVlXSnNaVUpoZEdOb0lpd2lhMlY1SWl3aWRYSnNJaXdpWW1GelpVMWhkR1Z5YVdGc0lpd2ljMmhoY21Wa1RXRjBaWEpwWVd4eklpd2liV0YwWlhKcFlXeERZV05vWlNJc0lsOXRZWFJsY21saGJFTmhZMmhsSWl3aWJXRjBaWEpwWVd3aUxDSmlZWE5sUzJWNUlpd2lYMmhoYzJnaUxDSk5ZWFJsY21saGJDSXNJbU52Y0hraUxDSmtaV1pwYm1VaUxDSnpaWFJRY205d1pYSjBlU0lzSW5CaGMzTWlMQ0psWm1abFkzUWlMQ0puWlhSRVpXWmhkV3gwVkdWamFHNXBjWFZsSWl3aWNHRnpjMlZ6SWl3aWMyVjBRbXhsYm1RaUxDSkNURVZPUkY5R1ZVNURYMEZFUkNJc0luVndaR0YwWlVoaGMyZ2lMQ0puWlhSUWNtOXdaWEowZVNJc0lsOW9ZVzVrYkdWRGIyeHZjaUlzSW1aaElpd2labklpTENKbVp5SXNJbVppSWl3aVpISWlMQ0prWnlJc0ltUmlJaXdpYzNCcGJtVkJjM05sYldKc1pYSWlMQ0oxY0dSaGRHVlNaVzVrWlhKRVlYUmhJaXdpWTI5dGNDSXNJbk5yWld4bGRHOXVJaXdpWDNOclpXeGxkRzl1SWl3aWRYQmtZWFJsVjI5eWJHUlVjbUZ1YzJadmNtMGlMQ0ptYVd4c1ZtVnlkR2xqWlhNaUxDSnphMlZzWlhSdmJrTnZiRzl5SWl3aVlYUjBZV05vYldWdWRFTnZiRzl5SWl3aWMyeHZkRU52Ykc5eUlpd2lZMnhwY0hCbGNpSXNJbk5zYjNRaUxDSjJZblZtSWl3aVgzWkVZWFJoSWl3aWFXSjFaaUlzSWw5cFJHRjBZU0lzSW5WcGJuUldSR0YwWVNJc0lsOTFhVzUwVmtSaGRHRWlMQ0p2Wm1aelpYUkpibVp2SWl3aVlTSXNJbklpTENKbklpd2lZaUlzSW1SaGNtdERiMnh2Y2lJc0luTmxkQ0lzSW1selEyeHBjSEJwYm1jaUxDSjJJaXdpYmlJc0luVjJjeUlzSW5OMVltRnljbUY1SWl3aVkyeHBjRlJ5YVdGdVoyeGxjeUlzSW1Oc2FYQndaV1JXWlhKMGFXTmxjeUlzSWtac2IyRjBNekpCY25KaGVTSXNJbU5zYVhCd1pXUlVjbWxoYm1kc1pYTWlMQ0pzWlc1bmRHZ2lMQ0p5WlhGMVpYTjBJaXdpYVc1a2FXTmxUMlptYzJWMElpd2lkbVZ5ZEdWNFQyWm1jMlYwSWl3aVlubDBaVTltWm5ObGRDSXNJbTltWm5ObGRDSXNJbkpsWVd4VWFXMWxWSEpoZG1WeWMyVWlMQ0ozYjNKc1pFMWhkQ0lzSW14dlkxTnJaV3hsZEc5dUlpd2laM0poY0docFkzTWlMQ0pmWkdWaWRXZFNaVzVrWlhKbGNpSXNJbDlqYkdsd2NHVnlJaXdpWVhSMFlXTm9iV1Z1ZENJc0luUnlhV0Z1WjJ4bGN5SXNJbWx6VW1WbmFXOXVJaXdpYVhOTlpYTm9JaXdpYVhORGJHbHdJaXdpWDNOMFlYSjBVMnh2ZEVsdVpHVjRJaXdpWDJWdVpGTnNiM1JKYm1SbGVDSXNJbVJsWW5WblUyeHZkSE1pTENKa1pXSjFaMEp2Ym1Weklpd2lZMnhsWVhJaUxDSnpkSEp2YTJWRGIyeHZjaUlzSW14cGJtVlhhV1IwYUNJc0luTnNiM1JKWkhnaUxDSnpiRzkwUTI5MWJuUWlMQ0prY21GM1QzSmtaWElpTENKa1lYUmhJaXdpYVc1a1pYZ2lMQ0pqYkdsd1JXNWtWMmwwYUZOc2IzUWlMQ0puWlhSQmRIUmhZMmh0Wlc1MElpd2lVbVZuYVc5dVFYUjBZV05vYldWdWRDSXNJazFsYzJoQmRIUmhZMmh0Wlc1MElpd2lRMnhwY0hCcGJtZEJkSFJoWTJodFpXNTBJaXdpWTJ4cGNGTjBZWEowSWl3aWNtVm5hVzl1SWl3aWRHVjRkSFZ5WlNJc0lsOTBaWGgwZFhKbElpd2lYMlpzZFhOb0lpd2libTlrWlNJc0ltTnZiWEIxZEdWWGIzSnNaRlpsY25ScFkyVnpJaXdpWW05dVpTSXNJbTF2ZG1WVWJ5SXNJbWxwSWl3aWJtNGlMQ0pzYVc1bFZHOGlMQ0pqYkc5elpTSXNJbk4wY205clpTSXNJbmR2Y214a1ZtVnlkR2xqWlhOTVpXNW5kR2dpTENKMUlpd2liVEF3SWl3aWJUQTBJaXdpYlRFeUlpd2liVEF4SWl3aWJUQTFJaXdpYlRFeklpd2lZV1JxZFhOMElpd2lZMnhwY0VWdVpDSXNJbVpwYkd4RGIyeHZjaUlzSW1raUxDSmliMjVsY3lJc0luZ2lMQ0ozYjNKc1pGZ2lMQ0o1SWl3aVl5SXNJbmR2Y214a1dTSXNJbU5wY21Oc1pTSXNJazFoZEdnaUxDSlFTU0lzSW1acGJHd2lMQ0pqWVdOb1pWUnlZWFpsY25ObElpd2labkpoYldVaUxDSmZZM1Z5Um5KaGJXVWlMQ0p6WldkdFpXNTBjeUlzSW5WcGJuUmlkV1lpTENKMlpYSjBhV05sY3lJc0ltbHVaR2xqWlhNaUxDSjFhVzUwVm1WeWRDSXNJbVp5WVcxbFZrWlBabVp6WlhRaUxDSm1jbUZ0WlVsdVpHVjRUMlptYzJWMElpd2ljMlZuVmtaRGIzVnVkQ0lzSW1OdmJHOXlUMlptYzJWMElpd2lZMjlzYjNKeklpd2libTkzUTI5c2IzSWlMQ0p0WVhoV1JrOW1abk5sZENJc0luWm1UMlptYzJWMElpd2ljMlZuU1c1bWJ5SXNJblpsY25SbGVFTnZkVzUwSWl3aWFXNWtaWGhEYjNWdWRDSXNJbWxzSWl3aWRtWkRiM1Z1ZENJc0ltWnlZVzFsUTI5c2IzSlBabVp6WlhRaUxDSm1hV3hzUW5WbVptVnljeUlzSW5KbGJtUmxjbVZ5SWl3aVgzSmxibVJsY2tac1lXY2lMQ0pHVEVGSFgxVlFSRUZVUlY5U1JVNUVSVkpmUkVGVVFTSXNJbTV2WkdWRGIyeHZjaUlzSWw5amIyeHZjaUlzSW5WelpWUnBiblFpTENKblpYUkNkV1ptWlhJaUxDSndjbVZ0ZFd4MGFYQnNhV1ZrUVd4d2FHRWlMQ0pmZG1Gc0lpd2lYM2R2Y214a1RXRjBjbWw0SWl3aWFYTkJibWx0WVhScGIyNURZV05vWldRaUxDSmZZWE56WlcxaWJHVnlJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVhsQ1FTeEpRVUZOUVN4WFFVRlhReXhSUVVGUkxGbEJRVklzUTBGQmFrSTdRVUZEUVN4SlFVRk5ReXhSUVVGUlJDeFJRVUZSTEdGQlFWSXNRMEZCWkR0QlFVTkJMRWxCUVUxRkxHRkJRV0ZHTEZGQlFWRXNlVU5CUVZJc1EwRkJia0k3UVVGRFFTeEpRVUZOUnl4bFFVRmxTQ3hSUVVGUkxHbEVRVUZTTEVOQlFYSkNPMEZCUTBFc1NVRkJUVWtzWVVGQllVUXNZVUZCWVVVc1kwRkJhRU03UVVGRFFTeEpRVUZOUXl4aFFVRmhTQ3hoUVVGaFNTeHBRa0ZCYUVNN1FVRkRRU3hKUVVGTlF5eE5RVUZOUXl4SFFVRkhSQ3hIUVVGbU96dEJRVVZCTEVsQlFVMUZMR0ZCUVdFc1NVRkJia0k3UVVGRFFTeEpRVUZOUXl4cFFrRkJhVUlzU1VGQmRrSTdRVUZEUVN4SlFVRk5ReXh6UWtGQmMwSXNTVUZCTlVJN1FVRkRRU3hKUVVGTlF5eHpRa0ZCYzBJc1NVRkJOVUk3UVVGRFFTeEpRVUZOUXl4clFrRkJhMElzU1VGQmVFSTdRVUZEUVN4SlFVRk5ReXhyUWtGQmEwSXNTVUZCZUVJN08wRkJSVUVzU1VGQlNVTXNZVUZCWVN4SlFVRnFRanRCUVVOQkxFbEJRVWxETEdsQ1FVRnBRaXhEUVVGRExFTkJRVVFzUlVGQlNTeERRVUZLTEVWQlFVOHNRMEZCVUN4RlFVRlZMRU5CUVZZc1JVRkJZU3hEUVVGaUxFVkJRV2RDTEVOQlFXaENMRU5CUVhKQ08wRkJRMEVzU1VGQlNVTXNZVUZCWVZRc1IwRkJSMVVzUzBGQlNDeERRVUZUTEVOQlFWUXNSVUZCV1N4RFFVRmFMRVZCUVdVc1IwRkJaaXhGUVVGdlFpeEhRVUZ3UWl4RFFVRnFRanRCUVVOQkxFbEJRVWxETEdGQlFXRllMRWRCUVVkVkxFdEJRVWdzUTBGQlV5eEhRVUZVTEVWQlFXTXNRMEZCWkN4RlFVRnBRaXhEUVVGcVFpeEZRVUZ2UWl4SFFVRndRaXhEUVVGcVFqdEJRVU5CTEVsQlFVbEZMR1ZCUVdWYUxFZEJRVWRWTEV0QlFVZ3NRMEZCVXl4RFFVRlVMRVZCUVZrc1IwRkJXaXhGUVVGcFFpeERRVUZxUWl4RlFVRnZRaXhIUVVGd1FpeERRVUZ1UWpzN1FVRkZRU3hKUVVGSlJ5eGpRVUZqUXl4VFFVRnNRanRCUVVOQkxFbEJRVWxETEdGQlFXRkVMRk5CUVdwQ08wRkJRMEVzU1VGQlNTeERRVUZEUlN4TlFVRk1MRVZCUVdFN1FVRkRWRWdzYTBKQlFXTXNTVUZCU1hKQ0xFMUJRVTE1UWl4TFFVRldMRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNMRU5CUVc1Q0xFVkJRWE5DTEVOQlFYUkNMRVZCUVhsQ0xFTkJRWHBDTEVOQlFXUTdRVUZEUVVZc2FVSkJRV0VzU1VGQlNYWkNMRTFCUVUxNVFpeExRVUZXTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDTEVOQlFXNUNMRVZCUVhOQ0xFTkJRWFJDTEVWQlFYbENMRU5CUVhwQ0xFTkJRV0k3UVVGRFNEczdRVUZGUkN4SlFVRkpReXcwUWtGQlNqdEJRVU5CTEVsQlFVbERMRzlDUVVGS08wRkJRMEVzU1VGQlNVTXNkMEpCUVVvN1FVRkRRU3hKUVVGSlF5eHpRa0ZCU2p0QlFVTkJMRWxCUVVsRExHbENRVUZLTzBGQlEwRXNTVUZCU1VNc2IwSkJRVW83UVVGRFFTeEpRVUZKUXl4dlFrRkJTanRCUVVOQkxFbEJRVWxETEdWQlFVbzdRVUZCUVN4SlFVTkpReXhsUVVSS08wRkJRVUVzU1VGRlNVTXNaVUZHU2p0QlFVRkJMRWxCUjBsRExHVkJTRW83UVVGSlFTeEpRVUZKUXl4elFrRkJTanRCUVVGQkxFbEJRVzFDUXl4eFFrRkJia0k3UVVGRFFTeEpRVUZKUXl4elFrRkJTanRCUVVOQkxFbEJRVWxETEhWQ1FVRktPMEZCUTBFc1NVRkJTVU1zTWtKQlFVbzdPMEZCUlVFc1NVRkJTVU1zYjBKQlFXOUNMRU5CUVhoQ08wRkJRVUVzU1VGQk1rSkRMR1ZCUVdVc1EwRkJNVU03UVVGQlFTeEpRVUUyUTBNc2NVSkJRWEZDTEVOQlFXeEZPMEZCUVVFc1NVRkJjVVZETEdkQ1FVRm5RaXhEUVVGeVJqdEJRVUZCTEVsQlEwbERMR05CUVdNc1EwRkViRUk3UVVGQlFTeEpRVU54UWtNc1pVRkJaU3hEUVVSd1F6dEJRVUZCTEVsQlEzVkRReXhaUVVGWkxFTkJSRzVFTzBGQlJVRXNTVUZCU1VNc1pVRkJTanRCUVVGQkxFbEJRVmxETEdWQlFWbzdRVUZCUVN4SlFVRnZRa01zWlVGQmNFSTdRVUZEUVN4SlFVRkpReXhwUWtGQlNqdEJRVU5CTEVsQlFVbERMRzFDUVVGS08wRkJRMEVzU1VGQlNVTXNWMEZCU2p0QlFVRkJMRWxCUVZGRExGZEJRVkk3UVVGQlFTeEpRVUZaUXl4aFFVRmFPMEZCUVVFc1NVRkJhMEpETEdGQlFXeENPMEZCUVVFc1NVRkJkMEpETEdGQlFYaENPMEZCUVVFc1NVRkJPRUpETEdGQlFUbENPMEZCUVVFc1NVRkJiME5ETEdGQlFYQkRPMEZCUVVFc1NVRkJNRU5ETEdGQlFURkRPMEZCUTBFc1NVRkJTVU1zVjBGQlNqdEJRVUZCTEVsQlFWRkRMRmRCUVZJN1FVRkJRU3hKUVVGWlF5eFhRVUZhTzBGQlFVRXNTVUZCWjBKRExGbEJRV2hDTzBGQlFVRXNTVUZCY1VKRExGbEJRWEpDTzBGQlFVRXNTVUZCTUVKRExGbEJRVEZDTzBGQlFVRXNTVUZCSzBKRExGbEJRUzlDTzBGQlFVRXNTVUZCYjBORExGbEJRWEJETzBGQlFVRXNTVUZCZVVORExGbEJRWHBETzBGQlFVRXNTVUZCT0VORExGbEJRVGxETzBGQlFVRXNTVUZCYlVSRExGbEJRVzVFTzBGQlEwRXNTVUZCU1VNc1kwRkJTanRCUVVGQkxFbEJRVmRETEdkQ1FVRllPMEZCUVVFc1NVRkJiMEpETEd0Q1FVRndRanRCUVVGQkxFbEJRU3RDUXl4alFVRXZRanRCUVVGQkxFbEJRWE5EUXl4dFFrRkJkRU03TzBGQlJVRXNVMEZCVTBNc1owSkJRVlFzUTBGQk1rSkRMRWRCUVROQ0xFVkJRV2REUXl4VFFVRm9ReXhGUVVFeVF6dEJRVU4yUXl4UlFVRkpReXhaUVVGS08wRkJRVUVzVVVGQlUwTXNXVUZCVkR0QlFVTkJMRmxCUVZGR0xGTkJRVkk3UVVGRFNTeGhRVUZMYUVZc1RVRkJUVzFHTEZOQlFVNHNRMEZCWjBKRExGRkJRWEpDTzBGQlEwbElMR3RDUVVGTmRrUXNjMEpCUVhOQ2JFSXNSMEZCUnpaRkxFdEJRVWdzUTBGQlUwTXNSMEZCTDBJc1IwRkJjVU01UlN4SFFVRkhOa1VzUzBGQlNDeERRVUZUUlN4VFFVRndSRHRCUVVOQlRDeHJRa0ZCVFRGRkxFZEJRVWMyUlN4TFFVRklMRU5CUVZORExFZEJRV1k3UVVGRFFUdEJRVU5LTEdGQlFVdDBSaXhOUVVGTmJVWXNVMEZCVGl4RFFVRm5Ra3NzVVVGQmNrSTdRVUZEU1ZBc2EwSkJRVTE2UlN4SFFVRkhOa1VzUzBGQlNDeERRVUZUU1N4VFFVRm1PMEZCUTBGUUxHdENRVUZOTVVVc1IwRkJSelpGTEV0QlFVZ3NRMEZCVTBzc2JVSkJRV1k3UVVGRFFUdEJRVU5LTEdGQlFVc3hSaXhOUVVGTmJVWXNVMEZCVGl4RFFVRm5RbEVzVFVGQmNrSTdRVUZEU1ZZc2EwSkJRVTE2UlN4SFFVRkhOa1VzUzBGQlNDeERRVUZUUXl4SFFVRm1PMEZCUTBGS0xHdENRVUZOTVVVc1IwRkJSelpGTEV0QlFVZ3NRMEZCVTA4c2JVSkJRV1k3UVVGRFFUdEJRVU5LTEdGQlFVczFSaXhOUVVGTmJVWXNVMEZCVGl4RFFVRm5RbFVzVFVGQmNrSTdRVUZEUVR0QlFVTkpXaXhyUWtGQlRYWkVMSE5DUVVGelFteENMRWRCUVVjMlJTeExRVUZJTEVOQlFWTkRMRWRCUVM5Q0xFZEJRWEZET1VVc1IwRkJSelpGTEV0QlFVZ3NRMEZCVTBVc1UwRkJjRVE3UVVGRFFVd3NhMEpCUVUweFJTeEhRVUZITmtVc1MwRkJTQ3hEUVVGVFN5eHRRa0ZCWmp0QlFVTkJPMEZCYWtKU096dEJRVzlDUVN4UlFVRkpTU3hYUVVGWExFTkJRVU55UWl4TlFVRk5jMElzVjBGQmRFSTdRVUZEUVN4UlFVRkpReXhOUVVGTmFrSXNTVUZCU1d0Q0xFZEJRVW9zUjBGQlZXaENMRWRCUVZZc1IwRkJaMEpETEVkQlFXaENMRWRCUVhOQ2NFUXNVVUZCZEVJc1IwRkJhVU5uUlN4UlFVRXpRenRCUVVOQkxGRkJRVWxKTEdWQlFXVjZRaXhOUVVGTk1FSXNaVUZCVGl4RFFVRnpRaXhEUVVGMFFpeERRVUZ1UWp0QlFVTkJMRkZCUVVrc1EwRkJRMFFzV1VGQlRDeEZRVUZ0UWl4UFFVRlBMRWxCUVZBN08wRkJSVzVDTEZGQlFVbEZMR2RDUVVGblFqTkNMRTFCUVUwMFFpeGpRVUV4UWp0QlFVTkJMRkZCUVVsRExGZEJRVmRHTEdOQlFXTktMRWRCUVdRc1EwRkJaanRCUVVOQkxGRkJRVWtzUTBGQlEwMHNVVUZCVEN4RlFVRmxPMEZCUTFnc1dVRkJTVU1zVlVGQlZVd3NZVUZCWVUwc1MwRkJNMEk3UVVGRFFTeFpRVUZKTEVOQlFVTktMR05CUVdOSExFOUJRV1FzUTBGQlRDeEZRVUUyUWp0QlFVTjZRa1FzZFVKQlFWZEtMRmxCUVZnN1FVRkRTQ3hUUVVaRUxFMUJSVTg3UVVGRFNFa3NkVUpCUVZjc1NVRkJTVGxHTEVkQlFVZHBSeXhSUVVGUUxFVkJRVmc3UVVGRFFVZ3NjVUpCUVZOSkxFbEJRVlFzUTBGQlkxSXNXVUZCWkR0QlFVTklPenRCUVVWRVNTeHBRa0ZCVTBzc1RVRkJWQ3hEUVVGblFpeFpRVUZvUWl4RlFVRTRRbUlzVVVGQk9VSTdRVUZEUVZFc2FVSkJRVk5MTEUxQlFWUXNRMEZCWjBJc1ZVRkJhRUlzUlVGQk5FSTNSU3hSUVVFMVFqdEJRVU5CTzBGQlEwRjNSU3hwUWtGQlUwMHNWMEZCVkN4RFFVRnhRaXhUUVVGeVFpeEZRVUZuUXpkQ0xFZEJRV2hET3p0QlFVVkJPMEZCUTBFc1dVRkJTVGhDTEU5QlFVOVFMRk5CUVZOUkxFMUJRVlFzUTBGQlowSkRMRzFDUVVGb1FpeEhRVUZ6UTBNc1RVRkJkRU1zUTBGQk5rTXNRMEZCTjBNc1EwRkJXRHRCUVVOQlNDeGhRVUZMU1N4UlFVRk1MRU5CUTBrc1NVRkVTaXhGUVVWSk1VY3NTVUZCU1RKSExHTkJSbElzUlVGSFNXcERMRWRCU0Vvc1JVRkhVME1zUjBGSVZDeEZRVWxKTTBVc1NVRkJTVEpITEdOQlNsSXNSVUZMU1dwRExFZEJURW9zUlVGTFUwTXNSMEZNVkR0QlFVOUJiMElzYVVKQlFWTmhMRlZCUVZRc1EwRkJiMEp1UWl4SFFVRndRanRCUVVOQlNTeHpRa0ZCWTBvc1IwRkJaQ3hKUVVGeFFrMHNVVUZCY2tJN1FVRkRTQ3hMUVhwQ1JDeE5RVEJDU3l4SlFVRkpRU3hUUVVGVFl5eFhRVUZVTEVOQlFYRkNMRk5CUVhKQ0xFMUJRVzlEY2tNc1IwRkJlRU1zUlVGQk5rTTdRVUZET1VOMVFpeHBRa0ZCVTAwc1YwRkJWQ3hEUVVGeFFpeFRRVUZ5UWl4RlFVRm5RemRDTEVkQlFXaERPMEZCUTBGMVFpeHBRa0ZCVTJFc1ZVRkJWQ3hEUVVGdlFtNUNMRWRCUVhCQ08wRkJRMGc3UVVGRFJDeFhRVUZQVFN4UlFVRlFPMEZCUTBnN08wRkJSVVFzVTBGQlUyVXNXVUZCVkN4RFFVRjFRbTVITEV0QlFYWkNMRVZCUVRoQ08wRkJRekZDTzBGQlEwRnJSQ3hWUVVGTmJFUXNUVUZCVFc5SExFVkJRVTRzUjBGQlYyeEdMRTFCUVdwQ08wRkJRMEZVTEd0Q1FVRmpSQ3h6UWtGQmMwSXdReXhOUVVGTkxFZEJRVFZDTEVkQlFXdERMRU5CUVdoRU8wRkJRMEZPTEZOQlFVczNRaXhUUVVGVFRpeFhRVUZrTzBGQlEwRnZReXhUUVVGTE4wSXNVMEZCVTFBc1YwRkJaRHRCUVVOQmNVTXNVMEZCU3pkQ0xGTkJRVk5TTEZkQlFXUTdPMEZCUlVGelF5eFZRVUZOTDBNc1RVRkJUWEZITEVWQlFVNHNSMEZCVjNwRUxFVkJRV3BDTzBGQlEwRkpMRlZCUVUxb1JDeE5RVUZOYzBjc1JVRkJUaXhIUVVGWGVrUXNSVUZCYWtJN1FVRkRRVWtzVlVGQlRXcEVMRTFCUVUxMVJ5eEZRVUZPTEVkQlFWZDZSQ3hGUVVGcVFqdEJRVU5CTTBJc2IwSkJRV2RDTEVOQlFVVXJRaXhQUVVGTExFVkJRVTRzUzBGQll5eERRVUZtTEV0QlFYRkNSQ3hQUVVGTExFVkJRVEZDTEV0QlFXbERSQ3hQUVVGTExFTkJRWFJETEVsQlFUSkRSQ3hIUVVFelJEczdRVUZGUVVrc1ZVRkJUVzVFTEUxQlFVMTNSeXhGUVVGT0xFZEJRVmMxUkN4RlFVRnFRanRCUVVOQlVTeFZRVUZOY0VRc1RVRkJUWGxITEVWQlFVNHNSMEZCVnpWRUxFVkJRV3BDTzBGQlEwRlJMRlZCUVUxeVJDeE5RVUZOTUVjc1JVRkJUaXhIUVVGWE5VUXNSVUZCYWtJN1FVRkRRVkVzVlVGQlRUbERMSE5DUVVGelFpeEhRVUYwUWl4SFFVRTBRaXhEUVVGc1F6dEJRVU5CV1N4dFFrRkJaU3hEUVVGRmEwTXNUMEZCU3l4RlFVRk9MRXRCUVdNc1EwRkJaaXhMUVVGeFFrUXNUMEZCU3l4RlFVRXhRaXhMUVVGcFEwUXNUMEZCU3l4RFFVRjBReXhKUVVFeVEwUXNSMEZCTVVRN1FVRkRTRHM3UVVGRlJDeEpRVUZKZDBRc2FVSkJRV2xDTzBGQlJXcENReXh2UWtGR2FVSXNORUpCUlVORExFbEJSa1FzUlVGRlR6dEJRVU53UWl4WlFVRkpReXhYUVVGWFJDeExRVUZMUlN4VFFVRndRanRCUVVOQkxGbEJRVWxFTEZGQlFVb3NSVUZCWXp0QlFVTldRU3h4UWtGQlUwVXNiMEpCUVZRN1FVRkRTRHRCUVVOS0xFdEJVR2RDTzBGQlUycENReXhuUWtGVWFVSXNkMEpCVTBoRExHRkJWRWNzUlVGVFdVTXNaVUZVV2l4RlFWTTJRa01zVTBGVU4wSXNSVUZUZDBORExFOUJWSGhETEVWQlUybEVReXhKUVZScVJDeEZRVk4xUkRzN1FVRkZjRVVzV1VGQlNVTXNUMEZCVHk5RUxGRkJRVkZuUlN4TlFVRnVRanRCUVVGQkxGbEJRMGxETEU5QlFVOXFSU3hSUVVGUmEwVXNUVUZFYmtJN1FVRkJRU3haUVVWSlF5eFpRVUZaYmtVc1VVRkJVVzlGTEZWQlJuaENPMEZCUjBFc1dVRkJTVU1zYlVKQlFVbzdPMEZCUlVFeFNDeHZRa0ZCV1RKSUxFTkJRVm9zUjBGQlowSldMRlZCUVZWVkxFTkJRVllzUjBGQlkxZ3NaMEpCUVdkQ1Z5eERRVUU1UWl4SFFVRnJRMW9zWTBGQlkxa3NRMEZCYUVRc1IwRkJiMFExUnl4TlFVRndSQ3hIUVVFMlJDeEhRVUUzUlR0QlFVTkJWQ3h6UWtGQlkwUXNjMEpCUVhGQ1RDeFpRVUZaTWtnc1EwRkJha01zUjBGQmNVTXNSMEZCYmtRN1FVRkRRUzlHTEdsQ1FVRlRhRUlzVTBGQlUyOUhMR2RDUVVGblFsa3NRMEZCZWtJc1IwRkJOa0ppTEdOQlFXTmhMRU5CUVRORExFZEJRU3REZEVnc1YwRkJlRVE3UVVGRFFYVkNMR2xDUVVGVGFFSXNVMEZCVTIxSExHZENRVUZuUW1Fc1EwRkJla0lzUjBGQk5rSmtMR05CUVdOakxFTkJRVE5ETEVkQlFTdERka2dzVjBGQmVFUTdRVUZEUVhkQ0xHbENRVUZUYUVJc1UwRkJVMnRITEdkQ1FVRm5RbU1zUTBGQmVrSXNSMEZCTmtKbUxHTkJRV05sTEVOQlFUTkRMRWRCUVN0RGVFZ3NWMEZCZUVRN08wRkJSVUZPTEc5Q1FVRlpORWdzUTBGQldpeEhRVUZuUW1oSExGTkJRVk54Uml4VlFVRlZWeXhEUVVGdVF6dEJRVU5CTlVnc2IwSkJRVmsyU0N4RFFVRmFMRWRCUVdkQ2FFY3NVMEZCVTI5R0xGVkJRVlZaTEVOQlFXNURPMEZCUTBFM1NDeHZRa0ZCV1RoSUxFTkJRVm9zUjBGQlowSm9SeXhUUVVGVGJVWXNWVUZCVldFc1EwRkJia003TzBGQlJVRXNXVUZCU1Znc1MwRkJTMWtzVTBGQlRDeEpRVUZyUWl4SlFVRjBRaXhGUVVFMFFqdEJRVU40UWpkSUxIVkNRVUZYT0Vnc1IwRkJXQ3hEUVVGbExFZEJRV1lzUlVGQmIwSXNRMEZCY0VJc1JVRkJkVUlzUTBGQmRrSXNSVUZCTUVJc1IwRkJNVUk3UVVGRFNDeFRRVVpFTEUxQlJVODdRVUZEU0RsSUxIVkNRVUZYTUVnc1EwRkJXQ3hIUVVGbFZDeExRVUZMV1N4VFFVRk1MRU5CUVdWSUxFTkJRV1lzUjBGQmJVSm9SeXhOUVVGc1F6dEJRVU5CTVVJc2RVSkJRVmN5U0N4RFFVRllMRWRCUVdWV0xFdEJRVXRaTEZOQlFVd3NRMEZCWlVZc1EwRkJaaXhIUVVGdFFtaEhMRTFCUVd4RE8wRkJRMEV6UWl4MVFrRkJWelJJTEVOQlFWZ3NSMEZCWlZnc1MwRkJTMWtzVTBGQlRDeERRVUZsUkN4RFFVRm1MRWRCUVcxQ2FFY3NUVUZCYkVNN1FVRkRTRHRCUVVORU5VSXNiVUpCUVZkNVNDeERRVUZZTEVkQlFXVjBTQ3h6UWtGQmMwSXNSMEZCZEVJc1IwRkJORUlzUTBGQk0wTTdPMEZCUlVFc1dVRkJTU3hEUVVGRE5rY3NVVUZCVVdVc1ZVRkJVaXhGUVVGTUxFVkJRVEpDT3p0QlFVVjJRbXBJTERSQ1FVRm5RaXhEUVVGRmFFSXNXVUZCV1RKSUxFTkJRVm9zU1VGQlpTeEZRVUZvUWl4TFFVRjNRaXhEUVVGNlFpeExRVUVyUWpOSUxGbEJRVms0U0N4RFFVRmFMRWxCUVdVc1JVRkJPVU1zUzBGQmNVUTVTQ3haUVVGWk5rZ3NRMEZCV2l4SlFVRmxMRU5CUVhCRkxFbEJRWGxGTjBnc1dVRkJXVFJJTEVOQlFYSkhPMEZCUTBFelJ5d3lRa0ZCWlN4RFFVRkZaaXhYUVVGWGVVZ3NRMEZCV0N4SlFVRmpMRVZCUVdZc1MwRkJkVUlzUTBGQmVFSXNTMEZCT0VKNlNDeFhRVUZYTkVnc1EwRkJXQ3hKUVVGakxFVkJRVFZETEV0QlFXMUVOVWdzVjBGQlZ6SklMRU5CUVZnc1NVRkJZeXhEUVVGcVJTeEpRVUZ6UlROSUxGZEJRVmN3U0N4RFFVRm9SenM3UVVGRlFTeG5Ra0ZCU1N4RFFVRkRia2dzVVVGQlRDeEZRVUZsTzBGQlExZ3NjVUpCUVVzc1NVRkJTWGxJTEVsQlFVa3pSeXhyUWtGQlVpeEZRVUUwUWpSSExFbEJRVWsxUnl4eFFrRkJjVUpHTEdsQ1FVRXhSQ3hGUVVFMlJUWkhMRWxCUVVsRExFTkJRV3BHTEVWQlFXOUdSQ3hMUVVGTEwwY3NZMEZCZWtZc1JVRkJlVWM3UVVGRGNrZHhSeXc0UWtGQlZWVXNTVUZCU1N4RFFVRmtMRWxCUVcxQ2JFZ3NZVUZCYmtJN1FVRkRTRHRCUVVOS0xHRkJTa1FzVFVGSlR6dEJRVU5JTEhGQ1FVRkxMRWxCUVVsclNDeExRVUZKTTBjc2EwSkJRVklzUlVGQk5FSTBSeXhMUVVGSk5VY3NjVUpCUVhGQ1JpeHBRa0ZCTVVRc1JVRkJOa1UyUnl4TFFVRkpReXhGUVVGcVJpeEZRVUZ2UmtRc1RVRkJTeTlITEdOQlFYcEdMRVZCUVhsSE8wRkJRM0pIY1Vjc09FSkJRVlZWTEV0QlFVa3NRMEZCWkN4SlFVRnZRbXhJTEdGQlFYQkNMRU5CUkhGSExFTkJRemxFTzBGQlEzWkRkMGNzT0VKQlFWVlZMRXRCUVVrc1EwRkJaQ3hKUVVGdlFtcElMRmxCUVhCQ0xFTkJSbkZITEVOQlJUbEVPMEZCUXpGRE8wRkJRMG83UVVGRlNpeFRRV2hDUkN4TlFXZENUenRCUVVOSUxHZENRVUZKYlVnc1RVRkJUV2hDTEV0QlFVdHBRaXhSUVVGTUxFTkJRV001Unl4eFFrRkJjVUlzUTBGQmJrTXNRMEZCVmp0QlFVTkJNa1lzYjBKQlFWRnZRaXhoUVVGU0xFTkJRWE5DYkVJc1MwRkJTMmxDTEZGQlFVd3NRMEZCWXpsSExHdENRVUZrTEVOQlFYUkNMRVZCUVhsRVJpeHBRa0ZCZWtRc1JVRkJORVZwUnl4TFFVRkxaU3hSUVVGTUxFTkJRV016Unl4WlFVRmtMRU5CUVRWRkxFVkJRWGxIUkN4WFFVRjZSeXhGUVVGelNESkhMRWRCUVhSSUxFVkJRVEpJY0Vrc1YwRkJNMGdzUlVGQmQwbEZMRlZCUVhoSkxFVkJRVzlLVHl4UlFVRndTaXhGUVVFNFNsVXNZMEZCT1VvN1FVRkRRU3huUWtGQlNXOUlMR3RDUVVGclFpeEpRVUZKUXl4WlFVRktMRU5CUVdsQ2RFSXNVVUZCVVhGQ0xHVkJRWHBDTEVOQlFYUkNPMEZCUTBFc1owSkJRVWxGTEcxQ1FVRnRRblpDTEZGQlFWRjFRaXhuUWtGQkwwSTdPMEZCUlVFN1FVRkRRV2hJTERCQ1FVRmpaMGdzYVVKQlFXbENReXhOUVVFdlFqdEJRVU5CY2tnc1owTkJRVzlDYTBnc1owSkJRV2RDUnl4TlFVRm9RaXhIUVVGNVFuUklMR3RDUVVGNlFpeEhRVUU0UTBRc1kwRkJiRVU3TzBGQlJVRjFSeXg1UWtGQllYSkZMRkZCUVZGelJpeFBRVUZTTEVOQlFXZENkRWdzYjBKQlFXOUNSaXhqUVVGd1F5eEZRVUZ2UkUwc1YwRkJjRVFzUTBGQllqdEJRVU5CUXl3eVFrRkJaV2RITEZkQlFWZHJRaXhaUVVFeFFpeEZRVU5CY0Vnc1owSkJRV2RDYTBjc1YwRkJWMjFDTEZsQlJETkNMRVZCUlVGMFNDeHhRa0ZCY1VKdFJ5eFhRVUZYYjBJc1ZVRkJXQ3hKUVVGNVFpeERRVVk1UXp0QlFVZEJNVUlzYlVKQlFVOHZSQ3hSUVVGUlowVXNUVUZCWml4RlFVTkJReXhQUVVGUGFrVXNVVUZCVVd0RkxFMUJSR1k3UVVGRlFVTXNkMEpCUVZsdVJTeFJRVUZSYjBVc1ZVRkJjRUk3TzBGQlJVRTdRVUZEUVVnc2FVSkJRVXRWTEVkQlFVd3NRMEZCVTFNc1owSkJRVlFzUlVGQk1rSXZSeXhaUVVFelFqczdRVUZGUVR0QlFVTkJMR2RDUVVGSkxFTkJRVU5xUWl4UlFVRk1MRVZCUVdVN1FVRkRXQ3h4UWtGQlN5eEpRVUZKZVVnc1RVRkJTU3hEUVVGU0xFVkJRVmRETEUxQlFVbEpMR2RDUVVGblFrY3NUVUZCTDBJc1JVRkJkVU5MTEZOQlFWTjRTQ3hyUWtGQmNrUXNSVUZCZVVVeVJ5eE5RVUZKUXl4SFFVRTNSU3hGUVVGblJrUXNUMEZCU3l4RFFVRk1MRVZCUVZGaExGVkJRVlUxU0N4alFVRnNSeXhGUVVGclNEdEJRVU01UjJsSExIbENRVUZMTWtJc1RVRkJUQ3hKUVVGdFFsSXNaMEpCUVdkQ1RDeEhRVUZvUWl4RFFVRnVRaXhEUVVRNFJ5eERRVU5vUlR0QlFVTTVRMlFzZVVKQlFVc3lRaXhUUVVGVExFTkJRV1FzU1VGQmJVSlNMR2RDUVVGblFrd3NUVUZCU1N4RFFVRndRaXhEUVVGdVFpeERRVVk0Unl4RFFVVm9SVHRCUVVNNVEyUXNlVUpCUVVzeVFpeFRRVUZUTEVOQlFXUXNTVUZCYlVKU0xHZENRVUZuUWt3c1RVRkJTU3hEUVVGd1FpeERRVUZ1UWl4RFFVZzRSeXhEUVVkb1JUdEJRVU01UTJRc2VVSkJRVXN5UWl4VFFVRlRMRU5CUVdRc1NVRkJiVUpTTEdkQ1FVRm5Ra3dzVFVGQlNTeERRVUZ3UWl4RFFVRnVRaXhEUVVvNFJ5eERRVWxvUlRzN1FVRkZPVU5zU0N4dlEwRkJaMElzUTBGQlJYVklMR2RDUVVGblFrd3NUVUZCU1N4RFFVRndRaXhMUVVGM1FpeEZRVUY2UWl4TFFVRnBReXhEUVVGc1F5eExRVUYzUTBzc1owSkJRV2RDVEN4TlFVRkpMRU5CUVhCQ0xFdEJRWGRDTEVWQlFXaEZMRXRCUVhWRlN5eG5Ra0ZCWjBKTUxFMUJRVWtzUTBGQmNFSXNTMEZCZDBJc1EwRkJMMFlzU1VGQmIwZExMR2RDUVVGblFrd3NUVUZCU1N4RFFVRndRaXhEUVVGd1NEdEJRVU5CVml3NFFrRkJWWFZDTEZOQlFWTXNRMEZCYmtJc1NVRkJkMEl2U0N4aFFVRjRRanRCUVVOSU8wRkJRMG9zWVVGV1JDeE5RVlZQTzBGQlEwZ3NjVUpCUVVzc1NVRkJTV3RJTEUxQlFVa3NRMEZCVWl4RlFVRlhReXhOUVVGSlNTeG5Ra0ZCWjBKSExFMUJRUzlDTEVWQlFYVkRTeXhWUVVGVGVFZ3NhMEpCUVhKRUxFVkJRWGxGTWtjc1RVRkJTVU1zUjBGQk4wVXNSVUZCWjBaRUxFOUJRVXNzUlVGQlRDeEZRVUZUWVN4WFFVRlZOVWdzWTBGQmJrY3NSVUZCYlVnN1FVRkRMMGRwUnl4NVFrRkJTekpDTEU5QlFVd3NTVUZCWlZJc1owSkJRV2RDVEN4SFFVRm9RaXhEUVVGbUxFTkJSQ3RITEVOQlF6VkVPMEZCUTI1RVpDeDVRa0ZCU3pKQ0xGVkJRVk1zUTBGQlpDeEpRVUZ0UWxJc1owSkJRV2RDVEN4TlFVRkpMRU5CUVhCQ0xFTkJRVzVDTEVOQlJpdEhMRU5CUlRWRU8wRkJRMjVFWkN4NVFrRkJTekpDTEZWQlFWTXNRMEZCWkN4SlFVRnRRbElzWjBKQlFXZENUQ3hOUVVGSkxFTkJRWEJDTEVOQlFXNUNMRU5CU0N0SExFTkJSelZFTzBGQlEyNUVaQ3g1UWtGQlN6SkNMRlZCUVZNc1EwRkJaQ3hKUVVGdFFsSXNaMEpCUVdkQ1RDeE5RVUZKTEVOQlFYQkNMRU5CUVc1Q0xFTkJTaXRITEVOQlNUVkVPenRCUVVWdVJHeElMRzlEUVVGblFpeERRVUZGZFVnc1owSkJRV2RDVEN4TlFVRkpMRU5CUVhCQ0xFdEJRWGRDTEVWQlFYcENMRXRCUVdsRExFTkJRV3hETEV0QlFYZERTeXhuUWtGQlowSk1MRTFCUVVrc1EwRkJjRUlzUzBGQmQwSXNSVUZCYUVVc1MwRkJkVVZMTEdkQ1FVRm5Ra3dzVFVGQlNTeERRVUZ3UWl4TFFVRjNRaXhEUVVFdlJpeEpRVUZ2UjBzc1owSkJRV2RDVEN4TlFVRkpMRU5CUVhCQ0xFTkJRWEJJTzBGQlEwRldMRGhDUVVGVmRVSXNWVUZCVXl4RFFVRnVRaXhKUVVGM1FpOUlMR0ZCUVhoQ096dEJRVVZCUXl4dFEwRkJaU3hEUVVGRmMwZ3NaMEpCUVdkQ1RDeE5RVUZKTEVWQlFYQkNMRXRCUVhsQ0xFVkJRVEZDTEV0QlFXdERMRU5CUVc1RExFdEJRWGxEU3l4blFrRkJaMEpNTEUxQlFVa3NSVUZCY0VJc1MwRkJlVUlzUlVGQmJFVXNTMEZCZVVWTExHZENRVUZuUWt3c1RVRkJTU3hEUVVGd1FpeExRVUYzUWl4RFFVRnFSeXhKUVVGelIwc3NaMEpCUVdkQ1RDeE5RVUZKTEVOQlFYQkNMRU5CUVhKSU8wRkJRMEZXTERoQ1FVRlZkVUlzVlVGQlV5eERRVUZ1UWl4SlFVRjNRamxJTEZsQlFYaENPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMG9zUzBGc1IyZENPMEZCYjBkcVFpdElMRzlDUVhCSGFVSXNORUpCYjBkRFF5eFJRWEJIUkN4RlFXOUhWenRCUVVONFFpeFpRVUZKTjBJc1lVRkJTanRCUVVOQkxGbEJRVWxGTEdGQlFVbzdPMEZCUlVFc1dVRkJTVFJDTEdOQlFXTTVSaXhOUVVGTmQwUXNVMEZCZUVJN1FVRkRRU3haUVVGSlJ5eG5Ra0ZCWjBKdFF5eFpRVUZaY2tvc1MwRkJhRU03UVVGRFFTeFpRVUZKYzBvc1YwRkJWeTlHTEUxQlFVMW5SeXhqUVVGeVFqdEJRVU5CTEZsQlFVbHNReXhWUVVGVk9VUXNUVUZCVFdsSExGRkJRWEJDTzBGQlEwRXNXVUZCU1hCRkxGZEJRVmNzU1VGQlpqdEJRVU5CTEZsQlFVbHhSU3h0UWtGQlNqdEJRVUZCTEZsQlFXZENkRU1zZDBKQlFXaENPMEZCUVVFc1dVRkJhVU5ETEd0Q1FVRnFRenRCUVVGQkxGbEJRVFJEYlVJc1dVRkJOVU03UVVGQlFTeFpRVUZwUkcxQ0xHdENRVUZxUkR0QlFVTkJMRmxCUVVsRExHbENRVUZLTzBGQlFVRXNXVUZCWTBNc1pVRkJaRHRCUVVGQkxGbEJRWE5DUXl4bFFVRjBRanRCUVVOQkxGbEJRVWxvUXl4dFFrRkJTanRCUVVOQkxGbEJRVWxRTEdGQlFVbzdPMEZCUlVFMVJ5d3dRa0ZCYTBJMlF5eE5RVUZOZFVjc1pVRkJlRUk3UVVGRFFXNUtMSGRDUVVGblFqUkRMRTFCUVUxM1J5eGhRVUYwUWp0QlFVTkJOMGdzYlVKQlFWY3NTMEZCV0R0QlFVTkJMRmxCUVVsNFFpeHRRa0ZCYlVJc1EwRkJReXhEUVVGNFFpeEZRVUV5UW5kQ0xGZEJRVmNzU1VGQldEczdRVUZGTTBKeVFpeHpRa0ZCWXpCRExFMUJRVTE1Unl4VlFVRndRanRCUVVOQmJFb3NjMEpCUVdONVF5eE5RVUZOTUVjc1ZVRkJjRUk3UVVGRFFTeFpRVUZKV0N4aFFVRmhlRWtzWlVGQlpVUXNWMEZCTlVJc1EwRkJTaXhGUVVFNFF6dEJRVU14UTNsSkxIRkNRVUZUV1N4TFFVRlVPMEZCUTBGYUxIRkNRVUZUWVN4WFFVRlVMRWRCUVhWQ2NFc3NWVUZCZGtJN1FVRkRRWFZLTEhGQ1FVRlRZeXhUUVVGVUxFZEJRWEZDTEVOQlFYSkNPMEZCUTBnN08wRkJSVVE3UVVGRFFUZEpMRFpDUVVGeFFsZ3NWMEZCVnl4RlFVRllMRWRCUVdkQ0xFTkJRWEpET3p0QlFVVkJXU3cwUWtGQmIwSXNRMEZCY0VJN1FVRkRRVVVzTmtKQlFYRkNMRU5CUVhKQ08wRkJRMEZETEhkQ1FVRm5RaXhEUVVGb1FqdEJRVU5CUXl4elFrRkJZeXhEUVVGa08wRkJRMEZETEhWQ1FVRmxMRU5CUVdZN08wRkJSVUVzWVVGQlN5eEpRVUZKZDBrc1ZVRkJWU3hEUVVGa0xFVkJRV2xDUXl4WlFVRlpha0lzV1VGQldXdENMRk5CUVZvc1EwRkJjMEl4UWl4TlFVRjRSQ3hGUVVGblJYZENMRlZCUVZWRExGTkJRVEZGTEVWQlFYRkdSQ3hUUVVGeVJpeEZRVUZuUnp0QlFVTTFSaTlETEcxQ1FVRlBLMElzV1VGQldXdENMRk5CUVZvc1EwRkJjMEpHTEU5QlFYUkNMRU5CUVZBN08wRkJSVUVzWjBKQlFVa3pTaXh0UWtGQmJVSXNRMEZCYmtJc1NVRkJkMEpCTEcxQ1FVRnRRalJITEV0QlFVdHJSQ3hKUVVGTUxFTkJRVlZETEV0QlFYcEVMRVZCUVdkRk8wRkJRelZFZGtrc01rSkJRVmNzU1VGQldEdEJRVU5JT3p0QlFVVkVMR2RDUVVGSkxFTkJRVU5CTEZGQlFVd3NSVUZCWlR0QlFVTlliVVlzZDBKQlFWRnhSQ3hsUVVGU0xFTkJRWGRDY0VRc1NVRkJlRUk3UVVGRFFUdEJRVU5JT3p0QlFVVkVMR2RDUVVGSk0wY3NhVUpCUVdsQ0xFTkJRV3BDTEVsQlFYTkNRU3hwUWtGQmFVSXlSeXhMUVVGTGEwUXNTVUZCVEN4RFFVRlZReXhMUVVGeVJDeEZRVUUwUkR0QlFVTjRSSFpKTERKQ1FVRlhMRXRCUVZnN1FVRkRTRHM3UVVGRlJGWXNaME5CUVc5Q0xFTkJRWEJDTzBGQlEwRkpMREJDUVVGakxFTkJRV1E3TzBGQlJVRTJTQ3g1UWtGQllXNURMRXRCUVV0eFJDeGhRVUZNTEVWQlFXSTdRVUZEUVN4blFrRkJTU3hEUVVGRGJFSXNWVUZCVEN4RlFVRnBRanRCUVVOaWNFTXNkMEpCUVZGeFJDeGxRVUZTTEVOQlFYZENjRVFzU1VGQmVFSTdRVUZEUVR0QlFVTklPenRCUVVWRWNVTXNkVUpCUVZkR0xITkNRVUZ6UWpOTExFMUJRVTA0VEN4blFrRkJka003UVVGRFFXaENMSEZDUVVGVFNDeHpRa0ZCYzBJelN5eE5RVUZOSzB3c1kwRkJja003UVVGRFFXaENMSEZDUVVGVFNpeHpRa0ZCYzBJelN5eE5RVUZOWjAwc2EwSkJRWEpET3p0QlFVVkJMR2RDUVVGSmFrSXNUVUZCU2l4RlFVRlpPMEZCUTFKNFF5eDNRa0ZCVVRCRUxGTkJRVklzUTBGQmEwSjZSQ3hKUVVGc1FpeEZRVUYzUW0xRExGVkJRWGhDTzBGQlEwRTdRVUZEU0RzN1FVRkZSQ3huUWtGQlNTeERRVUZEUlN4UlFVRkVMRWxCUVdFc1EwRkJRME1zVFVGQmJFSXNSVUZCTUVJN1FVRkRkRUoyUXl4M1FrRkJVWEZFTEdWQlFWSXNRMEZCZDBKd1JDeEpRVUY0UWp0QlFVTkJPMEZCUTBnN08wRkJSVVJzUXl4MVFrRkJWM2hDTEdsQ1FVRnBRalpHTEZkQlFWZDFRaXhOUVVGWUxFTkJRV3RDUXl4UFFVRnNRaXhEUVVFd1FrTXNVVUZCTTBNc1JVRkJjVVExUkN4TFFVRkxhMFFzU1VGQlRDeERRVUZWTVVjc1UwRkJMMFFzUTBGQldEdEJRVU5CTEdkQ1FVRkpMRU5CUVVOelFpeFJRVUZNTEVWQlFXVTdRVUZEV0dsRExIZENRVUZSY1VRc1pVRkJVaXhEUVVGM1FuQkVMRWxCUVhoQ08wRkJRMEU3UVVGRFNEczdRVUZGUkN4blFrRkJTVzVHTEdOQlFXTnBSQ3hUUVVGVFJTeExRVUZVTEV0QlFXMUNOMElzVlVGQlZUSkNMRkZCUVZZc1EwRkJiVUpGTEV0QlFYaEVMRVZCUVN0RU8wRkJRek5FYmtRc05rSkJRV0VzUzBGQllqdEJRVU5CYzBJc01FSkJRVlV3U0N4TlFVRldPMEZCUTBFeFNDd3dRa0ZCVlRKSUxFbEJRVllzUjBGQmFVSXhTQ3hMUVVGcVFqdEJRVU5CUkN3d1FrRkJWVEpDTEZGQlFWWXNSMEZCY1VKQkxGRkJRWEpDTzBGQlEwZzdPMEZCUlVRc1owSkJRVWwxUlN4UlFVRktMRVZCUVdNN08wRkJSVlpFTERSQ1FVRlpOVW9zWTBGQldqczdRVUZGUVR0QlFVTkJNRUlzYjBOQlFXOUNMRWxCUVVsR0xHTkJRWGhDTzBGQlEwRk5MRGhDUVVGakxFTkJRV1E3TzBGQlJVRnBSeXcyUWtGQllYSkZMRkZCUVZGelJpeFBRVUZTTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDTEVOQlFXNUNMRU5CUVdJN1FVRkRRV3BJTEN0Q1FVRmxaMGNzVjBGQlYydENMRmxCUVRGQ0xFVkJRMEZ3U0N4blFrRkJaMEpyUnl4WFFVRlhiVUlzV1VGRU0wSXNSVUZGUVhSSUxIRkNRVUZ4UW0xSExGZEJRVmR2UWl4VlFVRllMRWxCUVhsQ0xFTkJSamxETzBGQlIwRXhRaXgxUWtGQlR5OUVMRkZCUVZGblJTeE5RVUZtTEVWQlEwRkRMRTlCUVU5cVJTeFJRVUZSYTBVc1RVRkVaanM3UVVGSFFUdEJRVU5CSzBJc01rSkJRVmMwUWl4dlFrRkJXQ3hEUVVGblF5OUVMRXRCUVV0blJTeEpRVUZ5UXl4RlFVRXlReTlFTEVsQlFUTkRMRVZCUVdsRU4wWXNhMEpCUVdwRUxFVkJRWEZGU2l4alFVRnlSVHM3UVVGRlFUdEJRVU5CTEc5Q1FVRkpaMGtzV1VGQldYcEpMRmRCUVdoQ0xFVkJRVFpDTzBGQlEzcENlVWtzTmtKQlFWTnBReXhOUVVGVUxFTkJRV2RDYUVVc1MwRkJTemRHTEd0Q1FVRk1MRU5CUVdoQ0xFVkJRVEJETmtZc1MwRkJTemRHTEhGQ1FVRnhRaXhEUVVFeFFpeERRVUV4UXp0QlFVTkJMSGxDUVVGTExFbEJRVWs0U2l4TFFVRkxPVW9zY1VKQlFYRkNTaXhqUVVFNVFpeEZRVUU0UTIxTExFdEJRVXN2U2l4eFFrRkJjVUpHTEdsQ1FVRTNSU3hGUVVGblIyZExMRXRCUVV0RExFVkJRWEpITEVWQlFYbEhSQ3hOUVVGTmJFc3NZMEZCTDBjc1JVRkJLMGc3UVVGRE0waG5TU3hwUTBGQlUyOURMRTFCUVZRc1EwRkJaMEp1UlN4TFFVRkxhVVVzUlVGQlRDeERRVUZvUWl4RlFVRXdRbXBGTEV0QlFVdHBSU3hMUVVGTExFTkJRVllzUTBGQk1VSTdRVUZEU0R0QlFVTkViRU1zTmtKQlFWTnhReXhMUVVGVU8wRkJRMEZ5UXl3MlFrRkJVM05ETEUxQlFWUTdRVUZEU0R0QlFVTktMR0ZCTTBKRUxFMUJORUpMTEVsQlFVbG9ReXhOUVVGS0xFVkJRVms3TzBGQlJXSkdMRFJDUVVGWlJDeFhRVUZYUXl4VFFVRjJRanM3UVVGRlFUdEJRVU5CYkVrc2IwTkJRVzlDTEVOQlFVTnBTU3hYUVVGWGIwTXNiVUpCUVZnc1NVRkJhME1zUTBGQmJrTXNTVUZCZDBOMlN5eGpRVUUxUkR0QlFVTkJUU3c0UWtGQll6aElMRlZCUVZWaUxFMUJRWGhDT3p0QlFVVkJhRUlzTmtKQlFXRnlSU3hSUVVGUmMwWXNUMEZCVWl4RFFVRm5RblJJTEc5Q1FVRnZRa1lzWTBGQmNFTXNSVUZCYjBSTkxGZEJRWEJFTEVOQlFXSTdRVUZEUVVNc0swSkJRV1ZuUnl4WFFVRlhhMElzV1VGQk1VSXNSVUZEUVhCSUxHZENRVUZuUW10SExGZEJRVmR0UWl4WlFVUXpRaXhGUVVWQmRFZ3NjVUpCUVhGQ2JVY3NWMEZCVjI5Q0xGVkJRVmdzU1VGQmVVSXNRMEZHT1VNN1FVRkhRVEZDTEhWQ1FVRlBMMFFzVVVGQlVXZEZMRTFCUVdZc1JVRkRRVU1zVDBGQlQycEZMRkZCUVZGclJTeE5RVVJtT3p0QlFVZEJPMEZCUTBFclFpd3lRa0ZCVnpSQ0xHOUNRVUZZTEVOQlFXZERMMFFzU1VGQmFFTXNSVUZCYzBNc1EwRkJkRU1zUlVGQmVVTnRReXhYUVVGWGIwTXNiVUpCUVhCRUxFVkJRWGxGZEVVc1NVRkJla1VzUlVGQkswVTNSaXhyUWtGQkwwVXNSVUZCYlVkS0xHTkJRVzVITzBGQlEwZzdPMEZCUlVRc1owSkJRVWxGTEhGQ1FVRnhRaXhEUVVGeVFpeEpRVUV3UWtrc1pVRkJaU3hEUVVFM1F5eEZRVUZuUkR0QlFVTTFRM2xHTEhkQ1FVRlJjVVFzWlVGQlVpeERRVUYzUW5CRUxFbEJRWGhDTzBGQlEwRTdRVUZEU0RzN1FVRkZSRHRCUVVOQlJ5eHBRa0ZCUzFVc1IwRkJUQ3hEUVVGVGRVSXNVMEZCVkN4RlFVRnZRamRJTEZsQlFYQkNPenRCUVVWQk8wRkJRMEV3Unl4clFrRkJUV3RDTEZkQlFWZHNRaXhIUVVGcVFqdEJRVU5CTEdsQ1FVRkxMRWxCUVVsR0xFbEJRVWt6Unl4clFrRkJVaXhGUVVFMFFqUkhMRWxCUVVrMVJ5eHhRa0ZCY1VKR0xHbENRVUZ5UkN4RlFVRjNSWE5MTEVsQlFVa3NRMEZCYWtZc1JVRkJiMFo2UkN4SlFVRkpReXhEUVVGNFJpeEZRVUV5UmtRc1MwRkJTeTlITEdOQlFVd3NSVUZCY1VKM1N5eExRVUZMTEVOQlFYSklMRVZCUVhkSU8wRkJRM0JJZGtVc2NVSkJRVXRqTEVsQlFVa3NRMEZCVkN4SlFVRmpSU3hKUVVGSmRVUXNRMEZCU2l4RFFVRmtMRU5CUkc5SUxFTkJRM0JHTzBGQlEyaERka1VzY1VKQlFVdGpMRWxCUVVrc1EwRkJWQ3hKUVVGalJTeEpRVUZKZFVRc1NVRkJTU3hEUVVGU0xFTkJRV1FzUTBGR2IwZ3NRMEZGY0VZN1FVRkRia003TzBGQlJVUXpSU3c0UWtGQmEwSnpReXhYUVVGWGVrb3NTMEZCTjBJc1JVRkRRVzlJTEZsQlFWbEZMRXRCUVV0MFNDeExRVVJxUWpzN1FVRkhRU3hwUWtGQlMybElMRmxCUVV3c1EwRkJhMEpETEdGQlFXeENMRVZCUVdsRFF5eGxRVUZxUXl4RlFVRnJSRU1zVTBGQmJFUXNSVUZCTmtSRExFOUJRVGRFTEVWQlFYTkZReXhKUVVGMFJUczdRVUZGUVN4blFrRkJTVEZHTEdOQlFXTXNRMEZCYkVJc1JVRkJjVUk3UVVGRGFrSXNjVUpCUVVzc1NVRkJTVFJLTEUxQlFVc3pTaXhaUVVGVUxFVkJRWFZDTkVvc1RVRkJTelZLTEdWQlFXVkVMRmRCUVdoRUxFVkJRVFpFTkVvc1RVRkJTME1zUjBGQmJFVXNSVUZCYzBWRUxFdEJRWFJGTEVWQlFUUkZPMEZCUTNoRkwwUXNlVUpCUVVzclJDeEhRVUZNTEV0QlFWazNTaXhoUVVGYU8wRkJRMGc3TzBGQlJVUXNiMEpCUVVsNVNDeFJRVUZLTEVWQlFXTTdRVUZEVmpsSExESkNRVUZQT0Vjc1UwRkJVekpETEVkQlFXaENPMEZCUTBGNFNpd3lRa0ZCVHpaSExGTkJRVk0wUXl4SFFVRm9RanRCUVVOQmVFb3NNa0pCUVU4MFJ5eFRRVUZUTmtNc1IwRkJhRUk3UVVGRFFYaEtMREpDUVVGUE1rY3NVMEZCVXpoRExFZEJRV2hDTzBGQlEwRjRTaXd5UWtGQlR6QkhMRk5CUVZNclF5eEhRVUZvUWp0QlFVTkJlRW9zTWtKQlFVOTVSeXhUUVVGVFowUXNSMEZCYUVJN1FVRkRRU3g1UWtGQlN5eEpRVUZKV2l4UFFVRkxPVW9zYTBKQlFWUXNSVUZCTmtJclNpeFBRVUZMTDBvc2NVSkJRWEZDUml4cFFrRkJOVVFzUlVGQkswVm5TeXhQUVVGTFF5eEpRVUZ3Uml4RlFVRjNSa1FzVVVGQlRXeExMR05CUVRsR0xFVkJRVGhITzBGQlF6RkhZeXcyUWtGQlMyMUdMRXRCUVV0cFJTeEpRVUZNTEVOQlFVdzdRVUZEUVc1S0xEWkNRVUZMYTBZc1MwRkJTMmxGTEU5QlFVc3NRMEZCVml4RFFVRk1PMEZCUTBGcVJTdzJRa0ZCUzJsRkxFbEJRVXdzU1VGQlYzQktMRXRCUVV0RkxFbEJRVXdzUjBGQldVUXNTMEZCUzBVc1NVRkJha0lzUjBGQmQwSkRMRWxCUVc1RE8wRkJRMEVyUlN3MlFrRkJTMmxGTEU5QlFVc3NRMEZCVml4SlFVRmxjRW9zUzBGQlMwc3NTVUZCVEN4SFFVRlpTaXhMUVVGTFN5eEpRVUZxUWl4SFFVRjNRa01zU1VGQmRrTTdRVUZEU0R0QlFVTktPMEZCUTBSaExIZENRVUZSTmtrc1RVRkJVaXhEUVVGbE4wc3NiMEpCUVc5Q1JpeGpRVUZ1UXl4RlFVRnRSRTBzVjBGQmJrUTdRVUZEU0RzN1FVRkZSSGxHTEc5Q1FVRlJjVVFzWlVGQlVpeERRVUYzUW5CRUxFbEJRWGhDTzBGQlEwZzdPMEZCUlVSRUxHZENRVUZSYVVZc1QwRkJVanM3UVVGRlFTeFpRVUZKYUVRc1dVRkJXWGhKTEZkQlFXaENMRVZCUVRaQ08wRkJRM3BDTEdkQ1FVRkpkMHNzWVVGQlNqdEJRVU5CYUVNc2NVSkJRVk5oTEZkQlFWUXNSMEZCZFVKc1N5eFZRVUYyUWp0QlFVTkJjVW9zY1VKQlFWTnBSQ3hUUVVGVUxFZEJRWEZDZUUwc1ZVRkJja0lzUTBGSWVVSXNRMEZIVVRzN1FVRkZha01zYVVKQlFVc3NTVUZCU1hsTkxFbEJRVWtzUTBGQlVpeEZRVUZYYkVVc1RVRkJTV1VzV1VGQldXOUVMRXRCUVZvc1EwRkJhMEkxUkN4TlFVRjBReXhGUVVFNFF6SkVMRWxCUVVsc1JTeEhRVUZzUkN4RlFVRnhSR3RGTEVkQlFYSkVMRVZCUVRCRU8wRkJRM1JFYkVJc2RVSkJRVTlxUXl4WlFVRlpiMFFzUzBGQldpeERRVUZyUWtRc1EwRkJiRUlzUTBGQlVEdEJRVU5CTEc5Q1FVRkpSU3hKUVVGSmNFSXNTMEZCUzJRc1NVRkJUQ3hEUVVGVk0wSXNUVUZCVml4SFFVRnRRbmxETEV0QlFVdDRSQ3hEUVVGNFFpeEhRVUUwUW5kRUxFdEJRVXR4UWl4TlFVRjZRenRCUVVOQkxHOUNRVUZKUXl4SlFVRkpkRUlzUzBGQlMyUXNTVUZCVEN4RFFVRlZNMElzVFVGQlZpeEhRVUZ0UW5sRExFdEJRVXQxUWl4RFFVRjRRaXhIUVVFMFFuWkNMRXRCUVV0M1FpeE5RVUY2UXpzN1FVRkZRVHRCUVVOQmVFUXNlVUpCUVZOcFF5eE5RVUZVTEVOQlFXZENSQ3hMUVVGTGNVSXNUVUZCY2tJc1JVRkJOa0p5UWl4TFFVRkxkMElzVFVGQmJFTTdRVUZEUVhoRUxIbENRVUZUYjBNc1RVRkJWQ3hEUVVGblFtZENMRU5CUVdoQ0xFVkJRVzFDUlN4RFFVRnVRanRCUVVOQmRFUXNlVUpCUVZOelF5eE5RVUZVT3p0QlFVVkJPMEZCUTBGMFF5eDVRa0ZCVTNsRUxFMUJRVlFzUTBGQlowSjZRaXhMUVVGTGNVSXNUVUZCY2tJc1JVRkJOa0p5UWl4TFFVRkxkMElzVFVGQmJFTXNSVUZCTUVORkxFdEJRVXRETEVWQlFVd3NSMEZCVlN4RFFVRndSRHRCUVVOQk0wUXNlVUpCUVZNMFJDeEpRVUZVTzBGQlEwRXNiMEpCUVVsV0xFMUJRVTBzUTBGQlZpeEZRVUZoTzBGQlExUnNSQ3cyUWtGQlUybEVMRk5CUVZRc1IwRkJjVUp5VFN4WlFVRnlRanRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5LTEV0QmFsUm5RanRCUVcxVWFrSnBUaXhwUWtGdVZHbENMSGxDUVcxVVJpOUVMRkZCYmxSRkxFVkJiVlJST3p0QlFVVnlRaXhaUVVGSlowVXNVVUZCVVRkS0xFMUJRVTA0U2l4VFFVRnNRanRCUVVOQkxGbEJRVWtzUTBGQlEwUXNTMEZCVEN4RlFVRlpPenRCUVVWYUxGbEJRVWxGTEZkQlFWZEdMRTFCUVUxRkxGRkJRWEpDTzBGQlEwRXNXVUZCU1VFc1UwRkJVM3BGTEUxQlFWUXNTVUZCYlVJc1EwRkJka0lzUlVGQk1FSTdPMEZCUlRGQ0xGbEJRVWwwUWl4aFFVRktPMEZCUVVFc1dVRkJWVVVzWVVGQlZqdEJRVUZCTEZsQlFXZENPRVlzWjBKQlFXaENPMEZCUTBFc1dVRkJTVzVKTEdsQ1FVRktPMEZCUTBFc1dVRkJTWGxETEcxQ1FVRktPMEZCUTBFc1dVRkJTVEpHTEZkQlFWZEtMRTFCUVUxSkxGRkJRWEpDTzBGQlEwRXNXVUZCU1VNc1ZVRkJWVXdzVFVGQlRVc3NUMEZCY0VJN1FVRkRRU3haUVVGSlF5eFhRVUZYVGl4TlFVRk5UU3hSUVVGeVFqczdRVUZGUVN4WlFVRkpReXhuUWtGQlowSXNRMEZCY0VJN1FVRkJRU3haUVVGMVFrTXNiVUpCUVcxQ0xFTkJRVEZETzBGQlFVRXNXVUZCTmtORExHRkJRV0VzUTBGQk1VUTdRVUZEUVN4WlFVRkpla1VzVVVGQlNpeEZRVUZqTzBGQlExWTVSeXh0UWtGQlR6aEhMRk5CUVZNeVF5eEhRVUZvUWp0QlFVTkJlRW9zYlVKQlFVODJSeXhUUVVGVE5FTXNSMEZCYUVJN1FVRkRRWGhLTEcxQ1FVRlBORWNzVTBGQlV6WkRMRWRCUVdoQ08wRkJRMEY0U2l4dFFrRkJUekpITEZOQlFWTTRReXhIUVVGb1FqdEJRVU5CZUVvc2JVSkJRVTh3Unl4VFFVRlRLME1zUjBGQmFFSTdRVUZEUVhoS0xHMUNRVUZQZVVjc1UwRkJVMmRFTEVkQlFXaENPMEZCUTBnN08wRkJSVVFzV1VGQlNUQkNMR05CUVdNc1EwRkJiRUk3UVVGRFFTeFpRVUZKUXl4VFFVRlRXQ3hOUVVGTlZ5eE5RVUZ1UWp0QlFVTkJMRmxCUVVsRExGZEJRVmRFTEU5QlFVOUVMR0ZCUVZBc1EwRkJaanRCUVVOQkxGbEJRVWxITEdOQlFXTkVMRk5CUVZORkxGRkJRVE5DTzBGQlEwRXZTQ3h4UWtGQllUWklMRkZCUVdJN08wRkJSVUVzWVVGQlN5eEpRVUZKZUVJc1NVRkJTU3hEUVVGU0xFVkJRVmRzUlN4SlFVRkpaMFlzVTBGQlUzcEZMRTFCUVRkQ0xFVkJRWEZETWtRc1NVRkJTV3hGTEVOQlFYcERMRVZCUVRSRGEwVXNSMEZCTlVNc1JVRkJhVVE3UVVGRE4wTXNaMEpCUVVreVFpeFZRVUZWWWl4VFFVRlRaQ3hEUVVGVUxFTkJRV1E3UVVGRFFYQklMSFZDUVVGWGVFSXNhVUpCUVdsQ2RVc3NVVUZCVVhSTExFZEJRWHBDTEVWQlFUaENjMHNzVVVGQlVYSkxMRk5CUVhSRExFTkJRVmc3UVVGRFFTeG5Ra0ZCU1N4RFFVRkRjMElzVVVGQlRDeEZRVUZsT3p0QlFVVm1MR2RDUVVGSmFrUXNZMEZCWTJsRUxGTkJRVk5GTEV0QlFWUXNTMEZCYlVJM1FpeFZRVUZWTWtJc1VVRkJWaXhEUVVGdFFrVXNTMEZCZUVRc1JVRkJLMFE3UVVGRE0wUnVSQ3cyUWtGQllTeExRVUZpTzBGQlEwRnpRaXd3UWtGQlZUQklMRTFCUVZZN1FVRkRRVEZJTERCQ1FVRlZNa2dzU1VGQlZpeEhRVUZwUWpGSUxFdEJRV3BDTzBGQlEwRkVMREJDUVVGVk1rSXNVVUZCVml4SFFVRnhRa0VzVVVGQmNrSTdRVUZEU0RzN1FVRkZSRE5FTERKQ1FVRmxNRTBzVVVGQlVVTXNWMEZCZGtJN1FVRkRRWGhOTERCQ1FVRmpkVTBzVVVGQlVVVXNWVUZCZEVJN1FVRkRRVGROTEdkRFFVRnZRa01zWlVGQlpVZ3NZMEZCYmtNN08wRkJSVUYxUnl4NVFrRkJZWEpGTEZGQlFWRnpSaXhQUVVGU0xFTkJRV2RDY2tnc1dVRkJhRUlzUlVGQk9FSkhMRmRCUVRsQ0xFTkJRV0k3UVVGRFFVTXNNa0pCUVdWblJ5eFhRVUZYYTBJc1dVRkJNVUk3UVVGRFFYQklMRFJDUVVGblFtdEhMRmRCUVZkdFFpeFpRVUV6UWp0QlFVTkJiRWdzZDBKQlFWa3JSaXhYUVVGWGIwSXNWVUZCV0N4SlFVRjVRaXhEUVVGeVF6dEJRVU5CTVVJc2JVSkJRVTh2UkN4UlFVRlJaMFVzVFVGQlpqdEJRVU5CUXl4dFFrRkJUMnBGTEZGQlFWRnJSU3hOUVVGbU8wRkJRMEUyUml4elFrRkJWUzlLTEZGQlFWRnZSU3hWUVVGc1FqczdRVUZGUVN4cFFrRkJTeXhKUVVGSk5FUXNTMEZCU3pOS0xGbEJRVlFzUlVGQmRVSjVUU3hMUVVGTGVrMHNaVUZCWlVRc1YwRkJhRVFzUlVGQk5rUTBTaXhMUVVGTE9FTXNSVUZCYkVVc1JVRkJjMFU1UXl4SlFVRjBSU3hGUVVFMFJUdEJRVU40UlM5RUxIRkNRVUZMSzBRc1JVRkJUQ3hKUVVGWE4wb3NaMEpCUVdkQ09Fd3NVVUZCVVVjc2EwSkJRVklzUTBGQk0wSTdRVUZEU0RzN1FVRkZSRU1zZVVKQlFXRk5MRkZCUVZGSkxFOUJRWEpDT3p0QlFVVkJMRzlDUVVGUk1VOHNWVUZCVWp0QlFVTkpMSEZDUVVGTFNpeHRRa0ZCVER0QlFVTkpMSGxDUVVGTExFbEJRVWtyVEN4UFFVRkxNVW9zVTBGQlZDeEZRVUZ2UW5kTkxFMUJRVXQ0VFN4WlFVRlpUaXhwUWtGQk1VTXNSVUZCTmtSblN5eFBRVUZMT0VNc1IwRkJiRVVzUjBGQmRVVTdRVUZEYmtVdlJ5dzJRa0ZCUzJsRkxFMUJRVXdzU1VGQllXZERMRk5CUVZOSExHVkJRVlFzUTBGQllpeERRVVJ0UlN4RFFVTXhRanRCUVVONlEzQkhMRFpDUVVGTGFVVXNUVUZCVEN4SlFVRmhaME1zVTBGQlUwY3NaVUZCVkN4RFFVRmlMRU5CUm0xRkxFTkJSVEZDTzBGQlEzcERjRWNzTmtKQlFVdHBSU3hOUVVGTUxFbEJRV0ZuUXl4VFFVRlRSeXhsUVVGVUxFTkJRV0lzUTBGSWJVVXNRMEZIZGtJN1FVRkROVU53Unl3MlFrRkJTMmxGTEUxQlFVd3NTVUZCWVdkRExGTkJRVk5ITEdWQlFWUXNRMEZCWWl4RFFVcHRSU3hEUVVsMlFqdEJRVU0xUTBvc1owTkJRVkV2UWl4TlFVRlNMRWxCUVdkQ2EwTXNVMEZCVTBNc1pVRkJWQ3hEUVVGb1FpeERRVXh0UlN4RFFVdDJRanRCUVVNMVEwRXNkME5CVG0xRkxFTkJUV3hFTzBGQlEzQkNPMEZCUTB3N1FVRkRRU3h4UWtGQlMycFBMRzFDUVVGTU8wRkJRMGsyU0N4NVFrRkJTMWtzUjBGQlRDeERRVUZUY1VZc1UwRkJVMmhHTEZGQlFWUXNRMEZCYTBKdFJpeGhRVUZzUWl4RlFVRnBRMEVzWjBKQlFXZENiazBzYVVKQlFXcEVMRU5CUVZRc1JVRkJPRVZOTEZOQlFUbEZPMEZCUTBFMlRDeHhRMEZCYVVKdVRTeHBRa0ZCYWtJN1FVRkRTanRCUVVOQkxIRkNRVUZMTjBJc1pVRkJURHRCUVVOSkxIbENRVUZMTEVsQlFVazJUQ3hQUVVGTE1Vb3NVMEZCVkN4RlFVRnZRbmROTEU5QlFVdDRUU3haUVVGWlRpeHBRa0ZCTVVNc1JVRkJOa1JuU3l4UFFVRkxPRU1zU1VGQmJFVXNSMEZCZFVVN1FVRkRia1ZzVFN3MlFrRkJTMjlNTEZOQlFWTkhMR1ZCUVZRc1EwRkJURHRCUVVOQmRFd3NOa0pCUVV0dFRDeFRRVUZUUnl4bFFVRlVMRU5CUVV3N1FVRkRRWEJITERaQ1FVRkxhVVVzVFVGQlRDeEpRVUZoY0Vvc1MwRkJTMFVzU1VGQlRDeEhRVUZaUkN4TFFVRkxSU3hKUVVGcVFpeEhRVUYzUWtNc1NVRkJja01zUTBGSWJVVXNRMEZIZGtJN1FVRkROVU1yUlN3MlFrRkJTMmxGTEUxQlFVd3NTVUZCWVhCS0xFdEJRVXRMTEVsQlFVd3NSMEZCV1Vvc1MwRkJTMHNzU1VGQmFrSXNSMEZCZDBKRExFbEJRWEpETEVOQlNtMUZMRU5CU1haQ08wRkJRelZETkVVc05rSkJRVXRwUlN4TlFVRk1MRWxCUVdGblF5eFRRVUZUUnl4bFFVRlVMRU5CUVdJc1EwRk1iVVVzUTBGTGRrSTdRVUZETlVOd1J5dzJRa0ZCUzJsRkxFMUJRVXdzU1VGQllXZERMRk5CUVZOSExHVkJRVlFzUTBGQllpeERRVTV0UlN4RFFVMTJRanRCUVVNMVEwb3NaME5CUVZFdlFpeE5RVUZTTEVsQlFXZENhME1zVTBGQlUwTXNaVUZCVkN4RFFVRm9RaXhEUVZCdFJTeERRVTkyUWp0QlFVTTFRMEVzZDBOQlVtMUZMRU5CVVhaQ08wRkJReTlETzBGQlEwdzdRVUZEUVN4eFFrRkJTeTlPTEdWQlFVdzdRVUZEU1N4NVFrRkJTeXhKUVVGSk5Fd3NUMEZCU3pGS0xGTkJRVlFzUlVGQmIwSjNUU3hQUVVGTGVFMHNXVUZCV1U0c2FVSkJRVEZETEVWQlFUWkVaMHNzVDBGQlN6aERMRWxCUVd4RkxFZEJRWFZGTzBGQlEyNUZiRTBzTmtKQlFVdHZUQ3hUUVVGVFJ5eGxRVUZVTEVOQlFVdzdRVUZEUVhSTUxEWkNRVUZMYlV3c1UwRkJVMGNzWlVGQlZDeERRVUZNTzBGQlEwRndSeXcyUWtGQlMybEZMRTFCUVV3c1NVRkJZWEJLTEV0QlFVdEZMRWxCUVV3c1IwRkJXVVFzUzBGQlMwVXNTVUZCYWtJc1IwRkJkMEpETEVsQlFYSkRMRU5CU0cxRkxFTkJSM1pDTzBGQlF6VkRLMFVzTmtKQlFVdHBSU3hOUVVGTUxFbEJRV0Z3U2l4TFFVRkxTeXhKUVVGTUxFZEJRVmxLTEV0QlFVdExMRWxCUVdwQ0xFZEJRWGRDUXl4SlFVRnlReXhEUVVwdFJTeERRVWwyUWp0QlFVTTFRelJGTERaQ1FVRkxhVVVzVFVGQlRDeEpRVUZoWjBNc1UwRkJVMGNzWlVGQlZDeERRVUZpTEVOQlRHMUZMRU5CUzNaQ08wRkJRelZEY0Vjc05rSkJRVXRwUlN4TlFVRk1MRWxCUVdGblF5eFRRVUZUUnl4bFFVRlVMRU5CUVdJc1EwRk9iVVVzUTBGTmRrSTdRVUZETlVOS0xHZERRVUZSTDBJc1RVRkJVaXhKUVVGblFtdERMRk5CUVZORExHVkJRVlFzUTBGQmFFSXNRMEZRYlVVc1EwRlBka0k3UVVGRE5VTktMR2REUVVGUkwwSXNUVUZCVWl4SlFVRm5RbXRETEZOQlFWTkRMR1ZCUVZRc1EwRkJhRUlzUTBGU2JVVXNRMEZSZGtJN1FVRkRMME03UVVGRFREdEJRWFJEU2pzN1FVRjVRMEZ1U3l4dlFrRkJVVFpKTEUxQlFWSXNRMEZCWlRWTExGbEJRV1lzUlVGQk5rSkhMRmRCUVRkQ08wRkJRMEVzWjBKQlFVc3NRMEZCUXl0Q0xGVkJRVTRzUlVGQmJVSTdPMEZCUlc1Q08wRkJRMEVzWjBKQlFVazJTeXh0UWtGQmJVSmlMR2RDUVVGblFrVXNWVUZCZGtNN1FVRkRRU3hwUWtGQlN5eEpRVUZKY2tNc1QwRkJTekZLTEZsQlFWa3NRMEZCY2tJc1JVRkJkMEozVFN4UFFVRkxlRTBzV1VGQldTeERRVUZhTEVkQlFXZENUaXhwUWtGQmJFUXNSVUZCY1VWblN5eFBRVUZMT0VNc1NVRkJNVVVzUlVGQk9FVTVReXhSUVVGTmJFc3NZMEZCVGl4RlFVRnpRbXRPTEc5Q1FVRnZRaXhEUVVGNFNDeEZRVUV5U0R0QlFVTjJTQ3h2UWtGQlNVRXNiMEpCUVc5Q1VDeFhRVUY0UWl4RlFVRnhRenRCUVVOcVEwUXNLMEpCUVZkRUxFOUJRVTlFTEdGQlFWQXNRMEZCV0R0QlFVTkJNMGdzYVVOQlFXRTJTQ3hSUVVGaU8wRkJRMEZETEd0RFFVRmpSQ3hUUVVGVFJTeFJRVUYyUWp0QlFVTklPMEZCUTBSWUxIZENRVUZSTDBJc1NVRkJVaXhKUVVGamNrc3NZVUZCWkR0QlFVTkJVQ3cyUWtGQllUSk5MRkZCUVZFdlFpeFBRVUZMTEVOQlFXSXNTVUZCYTBKd1N5eFpRVUV2UWp0QlFVTklPMEZCUTBvN1FVRkRTaXhMUVhoaFowSTdRVUV3WVdwQ2NVNHNaVUV4WVdsQ0xIVkNRVEJoU2pWSUxFbEJNV0ZKTEVWQk1HRkZOa2dzVVVFeFlVWXNSVUV3WVZrN08wRkJSWHBDTEZsQlFVbDBSQ3hQUVVGUGRrVXNTMEZCUzNWRkxFbEJRV2hDTzBGQlEwRkJMR0ZCUVV0MVJDeFhRVUZNTEVsQlFXOUNOVkFzVjBGQlZ6WlFMSFZDUVVFdlFqdEJRVU5CTEZsQlFVa3NRMEZCUXk5SUxFdEJRVXRGTEZOQlFWWXNSVUZCY1VJN08wRkJSWEpDTEZsQlFVazRTQ3haUVVGWmVrUXNTMEZCU3pCRUxFMUJRWEpDTzBGQlEwRXZUaXhwUWtGQlV6aE9MRlZCUVZVNVJ5eERRVUZXTEVkQlFXTXNSMEZCZGtJN1FVRkRRUzlITEdsQ1FVRlROazRzVlVGQlZUZEhMRU5CUVZZc1IwRkJZeXhIUVVGMlFqdEJRVU5CTDBjc2FVSkJRVk0wVGl4VlFVRlZOVWNzUTBGQlZpeEhRVUZqTEVkQlFYWkNPMEZCUTBFdlJ5eHBRa0ZCVXpKT0xGVkJRVlV2Unl4RFFVRldMRWRCUVdNc1IwRkJka0k3TzBGQlJVRnNTQ3h0UWtGQlYybEhMRXRCUVV0clNTeFBRVUZvUWp0QlFVTkJNVTRzZDBKQlFXZENWQ3hYUVVGVmVrSXNWVUZCVml4SFFVRjFRa1lzVlVGQmRrTTdRVUZEUVR0QlFVTkJjVU1zZVVKQlFXbENWaXhYUVVGWExFTkJRVmdzUjBGQlpTeERRVUZvUXpzN1FVRkZRVGhETEdkQ1FVRlJiVVFzUzBGQlMzVkZMRWxCUVdJN1FVRkRRVFZJTEd0Q1FVRlZhMHdzVTBGQlUwMHNVMEZCVkN4RFFVRnRRaXhQUVVGdVFpeEZRVUUwUWpOT0xHRkJRVFZDTEVOQlFWWTdRVUZEUVc5RExHOUNRVUZaYVV3c1VVRkJXanRCUVVOQmJrd3NaMEpCUVZGelJDeEpRVUZTT3p0QlFVVkJNVVVzY1VKQlFXRXNTVUZCWWp0QlFVTkJNMElzT0VKQlFYTkNjVWNzUzBGQlMyOUpMR3RDUVVFelFqdEJRVU5CZUU4c2MwSkJRV01zUjBGQlpEdEJRVU5CV2l4eFFrRkJZU3hKUVVGaU8wRkJRMEU0UkN4eFFrRkJZU3hMUVVGaU96dEJRVVZCTEZsQlFVbHJUQ3hWUVVGVlN5eEpRVUZXTEV0QlFXMUNMRlZCUVc1Q0xFbEJRV2xETVU4c2JVSkJRWEpETEVWQlFUQkVPMEZCUTNSRWJVUXNlVUpCUVdFc1NVRkJZanRCUVVOSU96dEJRVVZFTEZsQlFVa3ZReXhSUVVGS0xFVkJRV003UVVGRFZtWXNNRUpCUVdOTUxHTkJRV1E3UVVGRFNEczdRVUZGUkN4WlFVRkpORW9zVjBGQlYyaEtMRk5CUVdZN1FVRkRRU3haUVVGSmJVUXNUVUZCVFhOQ0xGZEJRVllzUlVGQmRVSTdRVUZEYmtKMVJTeDFRa0ZCVnpGR0xFMUJRVTE1VEN4WlFVRnFRanRCUVVOQmFFNHNlVUpCUVdFc1MwRkJZanRCUVVOQmRFTXNNRUpCUVdOT0xGVkJRV1E3UVVGRFNEczdRVUZGUkN4WlFVRkpjMGdzUzBGQlMzVkpMR2xDUVVGTUxFVkJRVW9zUlVGQk9FSTdRVUZETVVJN1FVRkRRU3hwUWtGQlMycERMR0ZCUVV3c1EwRkJiVUl2UkN4UlFVRnVRanRCUVVOSUxGTkJTRVFzVFVGSFR6dEJRVU5JTEdsQ1FVRkxSQ3huUWtGQlRDeERRVUZ6UWtNc1VVRkJkRUk3UVVGRFNEczdRVUZGUkR0QlFVTkJNVVlzWjBKQlFWRjBSQ3hUUVVGU08wRkJRMEZ2UkN4clFrRkJWWEJFTEZOQlFWWTdRVUZEUVhGRUxHOUNRVUZaY2tRc1UwRkJXanRCUVVOQmJVUXNaMEpCUVZGdVJDeFRRVUZTTzBGQlEwZzdRVUZxWldkQ0xFTkJRWEpDT3p0QlFXOWxRWGhDTEZOQlFWTjVVU3hWUVVGVUxFZEJRWE5DTVVrc1kwRkJkRUk3TzBGQlJVRXlTU3hQUVVGUFF5eFBRVUZRTEVkQlFXbENOVWtzWTBGQmFrSWlMQ0ptYVd4bElqb2ljM0JwYm1VdFlYTnpaVzFpYkdWeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGN0TWpBeE9DQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzVjYmx4dUlHaDBkSEJ6T2k4dmQzZDNMbU52WTI5ekxtTnZiUzljYmx4dUlGQmxjbTFwYzNOcGIyNGdhWE1nYUdWeVpXSjVJR2R5WVc1MFpXUXNJR1p5WldVZ2IyWWdZMmhoY21kbExDQjBieUJoYm5rZ2NHVnljMjl1SUc5aWRHRnBibWx1WnlCaElHTnZjSGxjYmlCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1Z1WjJsdVpTQnpiM1Z5WTJVZ1kyOWtaU0FvZEdobElGd2lVMjltZEhkaGNtVmNJaWtzSUdFZ2JHbHRhWFJsWkN4Y2JpQjNiM0pzWkhkcFpHVXNJSEp2ZVdGc2RIa3RabkpsWlN3Z2JtOXVMV0Z6YzJsbmJtRmliR1VzSUhKbGRtOWpZV0pzWlNCaGJtUWdibTl1TFdWNFkyeDFjMmwyWlNCc2FXTmxibk5sWEc0Z2RHOGdkWE5sSUVOdlkyOXpJRU55WldGMGIzSWdjMjlzWld4NUlIUnZJR1JsZG1Wc2IzQWdaMkZ0WlhNZ2IyNGdlVzkxY2lCMFlYSm5aWFFnY0d4aGRHWnZjbTF6TGlCWmIzVWdjMmhoYkd4Y2JpQnViM1FnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5bWRIZGhjbVVnWm05eUlHUmxkbVZzYjNCcGJtY2diM1JvWlhJZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2RHaGhkQ2R6WEc0Z2RYTmxaQ0JtYjNJZ1pHVjJaV3h2Y0dsdVp5Qm5ZVzFsY3k0Z1dXOTFJR0Z5WlNCdWIzUWdaM0poYm5SbFpDQjBieUJ3ZFdKc2FYTm9MQ0JrYVhOMGNtbGlkWFJsTEZ4dUlITjFZbXhwWTJWdWMyVXNJR0Z1WkM5dmNpQnpaV3hzSUdOdmNHbGxjeUJ2WmlCRGIyTnZjeUJEY21WaGRHOXlMbHh1WEc0Z1ZHaGxJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJR2x1SUhSb2FYTWdUR2xqWlc1elpTQkJaM0psWlcxbGJuUWdZWEpsSUd4cFkyVnVjMlZrTENCdWIzUWdjMjlzWkM1Y2JpQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzRnY21WelpYSjJaWE1nWVd4c0lISnBaMmgwY3lCdWIzUWdaWGh3Y21WemMyeDVJR2R5WVc1MFpXUWdkRzhnZVc5MUxseHVYRzRnVkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVXU0JQUmlCQlRsa2dTMGxPUkN3Z1JWaFFVa1ZUVXlCUFVseHVJRWxOVUV4SlJVUXNJRWxPUTB4VlJFbE9SeUJDVlZRZ1RrOVVJRXhKVFVsVVJVUWdWRThnVkVoRklGZEJVbEpCVGxSSlJWTWdUMFlnVFVWU1EwaEJUbFJCUWtsTVNWUlpMRnh1SUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT0lFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJWeHVJRUZWVkVoUFVsTWdUMUlnUTA5UVdWSkpSMGhVSUVoUFRFUkZVbE1nUWtVZ1RFbEJRa3hGSUVaUFVpQkJUbGtnUTB4QlNVMHNJRVJCVFVGSFJWTWdUMUlnVDFSSVJWSmNiaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxGeHVJRTlWVkNCUFJpQlBVaUJKVGlCRFQwNU9SVU5VU1U5T0lGZEpWRWdnVkVoRklGTlBSbFJYUVZKRklFOVNJRlJJUlNCVlUwVWdUMUlnVDFSSVJWSWdSRVZCVEVsT1IxTWdTVTVjYmlCVVNFVWdVMDlHVkZkQlVrVXVYRzRnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNibHh1WTI5dWMzUWdVMnRsYkdWMGIyNGdQU0J5WlhGMWFYSmxLQ2N1TDFOclpXeGxkRzl1SnlrN1hHNWpiMjV6ZENCemNHbHVaU0E5SUhKbGNYVnBjbVVvSnk0dmJHbGlMM053YVc1bEp5azdYRzVqYjI1emRDQlNaVzVrWlhKR2JHOTNJRDBnY21WeGRXbHlaU2duTGk0dkxpNHZZMjlqYjNNeVpDOWpiM0psTDNKbGJtUmxjbVZ5TDNKbGJtUmxjaTFtYkc5M0p5azdYRzVqYjI1emRDQldaWEowWlhoR2IzSnRZWFFnUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTlqYjJOdmN6SmtMMk52Y21VdmNtVnVaR1Z5WlhJdmQyVmlaMnd2ZG1WeWRHVjRMV1p2Y20xaGRDY3BYRzVqYjI1emRDQldSazl1WlVOdmJHOXlJRDBnVm1WeWRHVjRSbTl5YldGMExuWm1iWFJRYjNOVmRrTnZiRzl5TzF4dVkyOXVjM1FnVmtaVWQyOURiMnh2Y2lBOUlGWmxjblJsZUVadmNtMWhkQzUyWm0xMFVHOXpWWFpVZDI5RGIyeHZjanRjYm1OdmJuTjBJR2RtZUNBOUlHTmpMbWRtZUR0Y2JseHVZMjl1YzNRZ1JreEJSMTlDUVZSRFNDQTlJREI0TVRBN1hHNWpiMjV6ZENCR1RFRkhYMVJYVDE5RFQweFBVaUE5SURCNE1ERTdYRzVqYjI1emRDQk9UMVJmUWtGVVEwaGZUMDVGWDBOUFRFOVNJRDBnTUhnd01EdGNibU52Ym5OMElFNVBWRjlDUVZSRFNGOVVWMDlmUTA5TVQxSWdQU0F3ZURBeE8xeHVZMjl1YzNRZ1FrRlVRMGhmVDA1RlgwTlBURTlTSUQwZ01IZ3hNRHRjYm1OdmJuTjBJRUpCVkVOSVgxUlhUMTlEVDB4UFVpQTlJREI0TVRFN1hHNWNibXhsZENCZmFHRnVaR3hsVm1Gc0lEMGdNSGd3TUR0Y2JteGxkQ0JmY1hWaFpGUnlhV0Z1WjJ4bGN5QTlJRnN3TENBeExDQXlMQ0F5TENBekxDQXdYVHRjYm14bGRDQmZjMnh2ZEVOdmJHOXlJRDBnWTJNdVkyOXNiM0lvTUN3Z01Dd2dNalUxTENBeU5UVXBPMXh1YkdWMElGOWliMjVsUTI5c2IzSWdQU0JqWXk1amIyeHZjaWd5TlRVc0lEQXNJREFzSURJMU5TazdYRzVzWlhRZ1gyOXlhV2RwYmtOdmJHOXlJRDBnWTJNdVkyOXNiM0lvTUN3Z01qVTFMQ0F3TENBeU5UVXBPMXh1WEc1c1pYUWdYMlpwYm1Gc1EyOXNiM0lnUFNCMWJtUmxabWx1WldRN1hHNXNaWFFnWDJSaGNtdERiMnh2Y2lBOUlIVnVaR1ZtYVc1bFpEdGNibWxtSUNnaFEwTmZTbE5DS1NCN1hHNGdJQ0FnWDJacGJtRnNRMjlzYjNJZ1BTQnVaWGNnYzNCcGJtVXVRMjlzYjNJb01Td2dNU3dnTVN3Z01TazdYRzRnSUNBZ1gyUmhjbXREYjJ4dmNpQTlJRzVsZHlCemNHbHVaUzVEYjJ4dmNpZ3hMQ0F4TENBeExDQXhLVHRjYm4xY2JseHViR1YwSUY5d2NtVnRkV3gwYVhCc2FXVmtRV3h3YUdFN1hHNXNaWFFnWDIxMWJIUnBjR3hwWlhJN1hHNXNaWFFnWDNOc2IzUlNZVzVuWlZOMFlYSjBPMXh1YkdWMElGOXpiRzkwVW1GdVoyVkZibVE3WEc1c1pYUWdYM1Z6WlZScGJuUTdYRzVzWlhRZ1gyUmxZblZuVTJ4dmRITTdYRzVzWlhRZ1gyUmxZblZuUW05dVpYTTdYRzVzWlhRZ1gyNXZaR1ZTTEZ4dUlDQWdJRjl1YjJSbFJ5eGNiaUFnSUNCZmJtOWtaVUlzWEc0Z0lDQWdYMjV2WkdWQk8xeHViR1YwSUY5bWFXNWhiRU52Ykc5eU16SXNJRjlrWVhKclEyOXNiM0l6TWp0Y2JteGxkQ0JmZG1WeWRHVjRSbTl5YldGME8xeHViR1YwSUY5d1pYSldaWEowWlhoVGFYcGxPMXh1YkdWMElGOXdaWEpEYkdsd1ZtVnlkR1Y0VTJsNlpUdGNibHh1YkdWMElGOTJaWEowWlhoR2JHOWhkRU52ZFc1MElEMGdNQ3dnWDNabGNuUmxlRU52ZFc1MElEMGdNQ3dnWDNabGNuUmxlRVpzYjJGMFQyWm1jMlYwSUQwZ01Dd2dYM1psY25SbGVFOW1abk5sZENBOUlEQXNYRzRnSUNBZ1gybHVaR1Y0UTI5MWJuUWdQU0F3TENCZmFXNWtaWGhQWm1aelpYUWdQU0F3TENCZmRtWlBabVp6WlhRZ1BTQXdPMXh1YkdWMElGOTBaVzF3Y2l3Z1gzUmxiWEJuTENCZmRHVnRjR0k3WEc1c1pYUWdYMmx1VW1GdVoyVTdYRzVzWlhRZ1gyMTFjM1JHYkhWemFEdGNibXhsZENCZmVDd2dYM2tzSUY5dE1EQXNJRjl0TURRc0lGOXRNVElzSUY5dE1ERXNJRjl0TURVc0lGOXRNVE03WEc1c1pYUWdYM0lzSUY5bkxDQmZZaXdnWDJaeUxDQmZabWNzSUY5bVlpd2dYMlpoTENCZlpISXNJRjlrWnl3Z1gyUmlMQ0JmWkdFN1hHNXNaWFFnWDJOdmJYQXNJRjlpZFdabVpYSXNJRjl5Wlc1a1pYSmxjaXdnWDI1dlpHVXNJRjl1WldWa1EyOXNiM0k3WEc1Y2JtWjFibU4wYVc5dUlGOW5aWFJUYkc5MFRXRjBaWEpwWVd3Z0tIUmxlQ3dnWW14bGJtUk5iMlJsS1NCN1hHNGdJQ0FnYkdWMElITnlZeXdnWkhOME8xeHVJQ0FnSUhOM2FYUmphQ0FvWW14bGJtUk5iMlJsS1NCN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnYzNCcGJtVXVRbXhsYm1STmIyUmxMa0ZrWkdsMGFYWmxPbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzSmpJRDBnWDNCeVpXMTFiSFJwY0d4cFpXUkJiSEJvWVNBL0lHTmpMbTFoWTNKdkxrOU9SU0E2SUdOakxtMWhZM0p2TGxOU1ExOUJURkJJUVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J6ZENBOUlHTmpMbTFoWTNKdkxrOU9SVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCallYTmxJSE53YVc1bExrSnNaVzVrVFc5a1pTNU5kV3gwYVhCc2VUcGNiaUFnSUNBZ0lDQWdJQ0FnSUhOeVl5QTlJR05qTG0xaFkzSnZMa1JUVkY5RFQweFBVanRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnpkQ0E5SUdOakxtMWhZM0p2TGs5T1JWOU5TVTVWVTE5VFVrTmZRVXhRU0VFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdZMkZ6WlNCemNHbHVaUzVDYkdWdVpFMXZaR1V1VTJOeVpXVnVPbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzSmpJRDBnWTJNdWJXRmpjbTh1VDA1Rk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkhOMElEMGdZMk11YldGamNtOHVUMDVGWDAxSlRsVlRYMU5TUTE5RFQweFBVanRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCallYTmxJSE53YVc1bExrSnNaVzVrVFc5a1pTNU9iM0p0WVd3NlhHNGdJQ0FnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y21NZ1BTQmZjSEpsYlhWc2RHbHdiR2xsWkVGc2NHaGhJRDhnWTJNdWJXRmpjbTh1VDA1RklEb2dZMk11YldGamNtOHVVMUpEWDBGTVVFaEJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pITjBJRDBnWTJNdWJXRmpjbTh1VDA1RlgwMUpUbFZUWDFOU1ExOUJURkJJUVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQjFjMlZOYjJSbGJDQTlJQ0ZmWTI5dGNDNWxibUZpYkdWQ1lYUmphRHRjYmlBZ0lDQnNaWFFnYTJWNUlEMGdkR1Y0TG5WeWJDQXJJSE55WXlBcklHUnpkQ0FySUY5MWMyVlVhVzUwSUNzZ2RYTmxUVzlrWld3N1hHNGdJQ0FnYkdWMElHSmhjMlZOWVhSbGNtbGhiQ0E5SUY5amIyMXdMbk5vWVhKbFpFMWhkR1Z5YVdGc2Mxc3dYVHRjYmlBZ0lDQnBaaUFvSVdKaGMyVk5ZWFJsY21saGJDa2djbVYwZFhKdUlHNTFiR3c3WEc1Y2JpQWdJQ0JzWlhRZ2JXRjBaWEpwWVd4RFlXTm9aU0E5SUY5amIyMXdMbDl0WVhSbGNtbGhiRU5oWTJobE8xeHVJQ0FnSUd4bGRDQnRZWFJsY21saGJDQTlJRzFoZEdWeWFXRnNRMkZqYUdWYmEyVjVYVHRjYmlBZ0lDQnBaaUFvSVcxaGRHVnlhV0ZzS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JpWVhObFMyVjVJRDBnWW1GelpVMWhkR1Z5YVdGc0xsOW9ZWE5vTzF4dUlDQWdJQ0FnSUNCcFppQW9JVzFoZEdWeWFXRnNRMkZqYUdWYlltRnpaVXRsZVYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGRHVnlhV0ZzSUQwZ1ltRnpaVTFoZEdWeWFXRnNPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXRjBaWEpwWVd3Z1BTQnVaWGNnWTJNdVRXRjBaWEpwWVd3b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGRHVnlhV0ZzTG1OdmNIa29ZbUZ6WlUxaGRHVnlhV0ZzS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdiV0YwWlhKcFlXd3VaR1ZtYVc1bEtDZGZWVk5GWDAxUFJFVk1KeXdnZFhObFRXOWtaV3dwTzF4dUlDQWdJQ0FnSUNCdFlYUmxjbWxoYkM1a1pXWnBibVVvSjFWVFJWOVVTVTVVSnl3Z1gzVnpaVlJwYm5RcE8xeHVJQ0FnSUNBZ0lDQXZMeUIxY0dSaGRHVWdkR1Y0ZEhWeVpWeHVJQ0FnSUNBZ0lDQnRZWFJsY21saGJDNXpaWFJRY205d1pYSjBlU2duZEdWNGRIVnlaU2NzSUhSbGVDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2RYQmtZWFJsSUdKc1pXNWtJR1oxYm1OMGFXOXVYRzRnSUNBZ0lDQWdJR3hsZENCd1lYTnpJRDBnYldGMFpYSnBZV3d1WldabVpXTjBMbWRsZEVSbFptRjFiSFJVWldOb2JtbHhkV1VvS1M1d1lYTnpaWE5iTUYwN1hHNGdJQ0FnSUNBZ0lIQmhjM011YzJWMFFteGxibVFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaMlo0TGtKTVJVNUVYMFpWVGtOZlFVUkVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzSmpMQ0JrYzNRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWm5ndVFreEZUa1JmUmxWT1ExOUJSRVFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpjbU1zSUdSemRGeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0J0WVhSbGNtbGhiQzUxY0dSaGRHVklZWE5vS0d0bGVTazdYRzRnSUNBZ0lDQWdJRzFoZEdWeWFXRnNRMkZqYUdWYmEyVjVYU0E5SUcxaGRHVnlhV0ZzTzF4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUdsbUlDaHRZWFJsY21saGJDNW5aWFJRY205d1pYSjBlU2duZEdWNGRIVnlaU2NwSUNFOVBTQjBaWGdwSUh0Y2JpQWdJQ0FnSUNBZ2JXRjBaWEpwWVd3dWMyVjBVSEp2Y0dWeWRIa29KM1JsZUhSMWNtVW5MQ0IwWlhncE8xeHVJQ0FnSUNBZ0lDQnRZWFJsY21saGJDNTFjR1JoZEdWSVlYTm9LR3RsZVNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnRZWFJsY21saGJEdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1gyaGhibVJzWlVOdmJHOXlJQ2hqYjJ4dmNpa2dlMXh1SUNBZ0lDOHZJSFJsYlhBZ2NtZGlJR2hoY3lCdGRXeDBhWEJzZVNBeU5UVXNJSE52SUc1bFpXUWdaR2wyYVdSbElESTFOVHRjYmlBZ0lDQmZabUVnUFNCamIyeHZjaTVtWVNBcUlGOXViMlJsUVR0Y2JpQWdJQ0JmYlhWc2RHbHdiR2xsY2lBOUlGOXdjbVZ0ZFd4MGFYQnNhV1ZrUVd4d2FHRWdQeUJmWm1FZ0x5QXlOVFVnT2lBeE8xeHVJQ0FnSUY5eUlEMGdYMjV2WkdWU0lDb2dYMjExYkhScGNHeHBaWEk3WEc0Z0lDQWdYMmNnUFNCZmJtOWtaVWNnS2lCZmJYVnNkR2x3YkdsbGNqdGNiaUFnSUNCZllpQTlJRjl1YjJSbFFpQXFJRjl0ZFd4MGFYQnNhV1Z5TzF4dVhHNGdJQ0FnWDJaeUlEMGdZMjlzYjNJdVpuSWdLaUJmY2p0Y2JpQWdJQ0JmWm1jZ1BTQmpiMnh2Y2k1bVp5QXFJRjluTzF4dUlDQWdJRjltWWlBOUlHTnZiRzl5TG1aaUlDb2dYMkk3WEc0Z0lDQWdYMlpwYm1Gc1EyOXNiM0l6TWlBOUlDZ29YMlpoUER3eU5Da2dQajQrSURBcElDc2dLRjltWWp3OE1UWXBJQ3NnS0Y5bVp6dzhPQ2tnS3lCZlpuSTdYRzVjYmlBZ0lDQmZaSElnUFNCamIyeHZjaTVrY2lBcUlGOXlPMXh1SUNBZ0lGOWtaeUE5SUdOdmJHOXlMbVJuSUNvZ1gyYzdYRzRnSUNBZ1gyUmlJRDBnWTI5c2IzSXVaR0lnS2lCZllqdGNiaUFnSUNCZlpHRWdQU0JmY0hKbGJYVnNkR2x3YkdsbFpFRnNjR2hoSUQ4Z01qVTFJRG9nTUR0Y2JpQWdJQ0JmWkdGeWEwTnZiRzl5TXpJZ1BTQW9LRjlrWVR3OE1qUXBJRDQrUGlBd0tTQXJJQ2hmWkdJOFBERTJLU0FySUNoZlpHYzhQRGdwSUNzZ1gyUnlPMXh1ZlZ4dVhHNTJZWElnYzNCcGJtVkJjM05sYldKc1pYSWdQU0I3WEc1Y2JpQWdJQ0IxY0dSaGRHVlNaVzVrWlhKRVlYUmhJQ2hqYjIxd0tTQjdYRzRnSUNBZ0lDQWdJR3hsZENCemEyVnNaWFJ2YmlBOUlHTnZiWEF1WDNOclpXeGxkRzl1TzF4dUlDQWdJQ0FnSUNCcFppQW9jMnRsYkdWMGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITnJaV3hsZEc5dUxuVndaR0YwWlZkdmNteGtWSEpoYm5ObWIzSnRLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWm1sc2JGWmxjblJwWTJWeklDaHphMlZzWlhSdmJrTnZiRzl5TENCaGRIUmhZMmh0Wlc1MFEyOXNiM0lzSUhOc2IzUkRiMnh2Y2l3Z1kyeHBjSEJsY2l3Z2MyeHZkQ2tnZTF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0IyWW5WbUlEMGdYMkoxWm1abGNpNWZka1JoZEdFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWW5WbUlEMGdYMkoxWm1abGNpNWZhVVJoZEdFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxYVc1MFZrUmhkR0VnUFNCZlluVm1abVZ5TGw5MWFXNTBWa1JoZEdFN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J2Wm1aelpYUkpibVp2TzF4dVhHNGdJQ0FnSUNBZ0lGOW1hVzVoYkVOdmJHOXlMbUVnUFNCemJHOTBRMjlzYjNJdVlTQXFJR0YwZEdGamFHMWxiblJEYjJ4dmNpNWhJQ29nYzJ0bGJHVjBiMjVEYjJ4dmNpNWhJQ29nWDI1dlpHVkJJQ29nTWpVMU8xeHVJQ0FnSUNBZ0lDQmZiWFZzZEdsd2JHbGxjaUE5SUY5d2NtVnRkV3gwYVhCc2FXVmtRV3h3YUdFL0lGOW1hVzVoYkVOdmJHOXlMbUVnT2lBeU5UVTdYRzRnSUNBZ0lDQWdJRjkwWlcxd2NpQTlJRjl1YjJSbFVpQXFJR0YwZEdGamFHMWxiblJEYjJ4dmNpNXlJQ29nYzJ0bGJHVjBiMjVEYjJ4dmNpNXlJQ29nWDIxMWJIUnBjR3hwWlhJN1hHNGdJQ0FnSUNBZ0lGOTBaVzF3WnlBOUlGOXViMlJsUnlBcUlHRjBkR0ZqYUcxbGJuUkRiMnh2Y2k1bklDb2djMnRsYkdWMGIyNURiMnh2Y2k1bklDb2dYMjExYkhScGNHeHBaWEk3WEc0Z0lDQWdJQ0FnSUY5MFpXMXdZaUE5SUY5dWIyUmxRaUFxSUdGMGRHRmphRzFsYm5SRGIyeHZjaTVpSUNvZ2MydGxiR1YwYjI1RGIyeHZjaTVpSUNvZ1gyMTFiSFJwY0d4cFpYSTdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JmWm1sdVlXeERiMnh2Y2k1eUlEMGdYM1JsYlhCeUlDb2djMnh2ZEVOdmJHOXlMbkk3WEc0Z0lDQWdJQ0FnSUY5bWFXNWhiRU52Ykc5eUxtY2dQU0JmZEdWdGNHY2dLaUJ6Ykc5MFEyOXNiM0l1Wnp0Y2JpQWdJQ0FnSUNBZ1gyWnBibUZzUTI5c2IzSXVZaUE5SUY5MFpXMXdZaUFxSUhOc2IzUkRiMnh2Y2k1aU8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoemJHOTBMbVJoY210RGIyeHZjaUE5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZaR0Z5YTBOdmJHOXlMbk5sZENnd0xqQXNJREFzSURBc0lERXVNQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZaR0Z5YTBOdmJHOXlMbklnUFNCemJHOTBMbVJoY210RGIyeHZjaTV5SUNvZ1gzUmxiWEJ5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdYMlJoY210RGIyeHZjaTVuSUQwZ2MyeHZkQzVrWVhKclEyOXNiM0l1WnlBcUlGOTBaVzF3Wnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjlrWVhKclEyOXNiM0l1WWlBOUlITnNiM1F1WkdGeWEwTnZiRzl5TG1JZ0tpQmZkR1Z0Y0dJN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdYMlJoY210RGIyeHZjaTVoSUQwZ1gzQnlaVzExYkhScGNHeHBaV1JCYkhCb1lTQS9JREkxTlNBNklEQTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmpiR2x3Y0dWeUxtbHpRMnhwY0hCcGJtY29LU2tnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JmWm1sdVlXeERiMnh2Y2pNeUlEMGdLQ2hmWm1sdVlXeERiMnh2Y2k1aFBEd3lOQ2tnUGo0K0lEQXBJQ3NnS0Y5bWFXNWhiRU52Ykc5eUxtSThQREUyS1NBcklDaGZabWx1WVd4RGIyeHZjaTVuUER3NEtTQXJJRjltYVc1aGJFTnZiRzl5TG5JN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmWkdGeWEwTnZiRzl5TXpJZ1BTQW9LRjlrWVhKclEyOXNiM0l1WVR3OE1qUXBJRDQrUGlBd0tTQXJJQ2hmWkdGeWEwTnZiRzl5TG1JOFBERTJLU0FySUNoZlpHRnlhME52Ykc5eUxtYzhQRGdwSUNzZ1gyUmhjbXREYjJ4dmNpNXlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVY5MWMyVlVhVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2RpQTlJRjkyWlhKMFpYaEdiRzloZEU5bVpuTmxkQ3dnYmlBOUlGOTJaWEowWlhoR2JHOWhkRTltWm5ObGRDQXJJRjkyWlhKMFpYaEdiRzloZEVOdmRXNTBPeUIySUR3Z2Jqc2dkaUFyUFNCZmNHVnlWbVZ5ZEdWNFUybDZaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFhVzUwVmtSaGRHRmJkaUFySURSZElEMGdYMlpwYm1Gc1EyOXNiM0l6TWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJSFlnUFNCZmRtVnlkR1Y0Um14dllYUlBabVp6WlhRc0lHNGdQU0JmZG1WeWRHVjRSbXh2WVhSUFptWnpaWFFnS3lCZmRtVnlkR1Y0Um14dllYUkRiM1Z1ZERzZ2RpQThJRzQ3SUhZZ0t6MGdYM0JsY2xabGNuUmxlRk5wZW1VcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFdsdWRGWkVZWFJoVzNZZ0t5QTBYU0FnUFNCZlptbHVZV3hEYjJ4dmNqTXlPeUFnSUNBZ0x5OGdiR2xuYUhRZ1kyOXNiM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RXbHVkRlpFWVhSaFczWWdLeUExWFNBZ1BTQmZaR0Z5YTBOdmJHOXlNekk3SUNBZ0lDQWdMeThnWkdGeWF5QmpiMnh2Y2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhWMmN5QTlJSFppZFdZdWMzVmlZWEp5WVhrb1gzWmxjblJsZUVac2IyRjBUMlptYzJWMElDc2dNaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR2x3Y0dWeUxtTnNhWEJVY21saGJtZHNaWE1vZG1KMVppNXpkV0poY25KaGVTaGZkbVZ5ZEdWNFJteHZZWFJQWm1aelpYUXBMQ0JmZG1WeWRHVjRSbXh2WVhSRGIzVnVkQ3dnYVdKMVppNXpkV0poY25KaGVTaGZhVzVrWlhoUFptWnpaWFFwTENCZmFXNWtaWGhEYjNWdWRDd2dkWFp6TENCZlptbHVZV3hEYjJ4dmNpd2dYMlJoY210RGIyeHZjaXdnWDNWelpWUnBiblFzSUY5d1pYSldaWEowWlhoVGFYcGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqYkdsd2NHVmtWbVZ5ZEdsalpYTWdQU0J1WlhjZ1JteHZZWFF6TWtGeWNtRjVLR05zYVhCd1pYSXVZMnhwY0hCbFpGWmxjblJwWTJWektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpiR2x3Y0dWa1ZISnBZVzVuYkdWeklEMGdZMnhwY0hCbGNpNWpiR2x3Y0dWa1ZISnBZVzVuYkdWek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJwYm5OMWNtVWdZMkZ3WVdOcGRIbGNiaUFnSUNBZ0lDQWdJQ0FnSUY5cGJtUmxlRU52ZFc1MElEMGdZMnhwY0hCbFpGUnlhV0Z1WjJ4bGN5NXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZG1WeWRHVjRSbXh2WVhSRGIzVnVkQ0E5SUdOc2FYQndaV1JXWlhKMGFXTmxjeTVzWlc1bmRHZ2dMeUJmY0dWeVEyeHBjRlpsY25SbGVGTnBlbVVnS2lCZmNHVnlWbVZ5ZEdWNFUybDZaVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdiMlptYzJWMFNXNW1ieUE5SUY5aWRXWm1aWEl1Y21WeGRXVnpkQ2hmZG1WeWRHVjRSbXh2WVhSRGIzVnVkQ0F2SUY5d1pYSldaWEowWlhoVGFYcGxMQ0JmYVc1a1pYaERiM1Z1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmYVc1a1pYaFBabVp6WlhRZ1BTQnZabVp6WlhSSmJtWnZMbWx1WkdsalpVOW1abk5sZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkyWlhKMFpYaFBabVp6WlhRZ1BTQnZabVp6WlhSSmJtWnZMblpsY25SbGVFOW1abk5sZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkyWlhKMFpYaEdiRzloZEU5bVpuTmxkQ0E5SUc5bVpuTmxkRWx1Wm04dVlubDBaVTltWm5ObGRDQStQaUF5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUoxWmlBOUlGOWlkV1ptWlhJdVgzWkVZWFJoTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV0oxWmlBOUlGOWlkV1ptWlhJdVgybEVZWFJoTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkV2x1ZEZaRVlYUmhJRDBnWDJKMVptWmxjaTVmZFdsdWRGWkVZWFJoTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCbWFXeHNJR2x1WkdsalpYTmNiaUFnSUNBZ0lDQWdJQ0FnSUdsaWRXWXVjMlYwS0dOc2FYQndaV1JVY21saGJtZHNaWE1zSUY5cGJtUmxlRTltWm5ObGRDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1pwYkd3Z2RtVnlkR2xqWlhNZ1kyOXVkR0ZwYmlCNElIa2dkU0IySUd4cFoyaDBJR052Ykc5eUlHUmhjbXNnWTI5c2IzSmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hYM1Z6WlZScGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0IySUQwZ01Dd2diaUE5SUdOc2FYQndaV1JXWlhKMGFXTmxjeTVzWlc1bmRHZ3NJRzltWm5ObGRDQTlJRjkyWlhKMFpYaEdiRzloZEU5bVpuTmxkRHNnZGlBOElHNDdJSFlnS3owZ09Dd2diMlptYzJWMElDczlJRjl3WlhKV1pYSjBaWGhUYVhwbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaWRXWmJiMlptYzJWMFhTQWdJQ0FnUFNCamJHbHdjR1ZrVm1WeWRHbGpaWE5iZGwwN0lDQWdJQ0FnSUNBdkx5QjRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaWRXWmJiMlptYzJWMElDc2dNVjBnUFNCamJHbHdjR1ZrVm1WeWRHbGpaWE5iZGlBcklERmRPeUFnSUNBdkx5QjVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaWRXWmJiMlptYzJWMElDc2dNbDBnUFNCamJHbHdjR1ZrVm1WeWRHbGpaWE5iZGlBcklEWmRPeUFnSUNBdkx5QjFYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaWRXWmJiMlptYzJWMElDc2dNMTBnUFNCamJHbHdjR1ZrVm1WeWRHbGpaWE5iZGlBcklEZGRPeUFnSUNBdkx5QjJYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gyWnBibUZzUTI5c2IzSXpNaUE5SUNnb1kyeHBjSEJsWkZabGNuUnBZMlZ6VzNZZ0t5QTFYVHc4TWpRcElENCtQaUF3S1NBcklDaGpiR2x3Y0dWa1ZtVnlkR2xqWlhOYmRpQXJJRFJkUER3eE5pa2dLeUFvWTJ4cGNIQmxaRlpsY25ScFkyVnpXM1lnS3lBelhUdzhPQ2tnS3lCamJHbHdjR1ZrVm1WeWRHbGpaWE5iZGlBcklESmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWFXNTBWa1JoZEdGYmIyWm1jMlYwSUNzZ05GMGdQU0JmWm1sdVlXeERiMnh2Y2pNeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnZGlBOUlEQXNJRzRnUFNCamJHbHdjR1ZrVm1WeWRHbGpaWE11YkdWdVozUm9MQ0J2Wm1aelpYUWdQU0JmZG1WeWRHVjRSbXh2WVhSUFptWnpaWFE3SUhZZ1BDQnVPeUIySUNzOUlERXlMQ0J2Wm1aelpYUWdLejBnWDNCbGNsWmxjblJsZUZOcGVtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtSjFabHR2Wm1aelpYUmRJRDBnWTJ4cGNIQmxaRlpsY25ScFkyVnpXM1pkT3lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2VGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWW5WbVcyOW1abk5sZENBcklERmRJRDBnWTJ4cGNIQmxaRlpsY25ScFkyVnpXM1lnS3lBeFhUc2dJQ0FnSUNBZ0lDQXZMeUI1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmlkV1piYjJabWMyVjBJQ3NnTWwwZ1BTQmpiR2x3Y0dWa1ZtVnlkR2xqWlhOYmRpQXJJRFpkT3lBZ0lDQWdJQ0FnSUM4dklIVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1KMVpsdHZabVp6WlhRZ0t5QXpYU0E5SUdOc2FYQndaV1JXWlhKMGFXTmxjMXQySUNzZ04xMDdJQ0FnSUNBZ0lDQWdMeThnZGx4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjltYVc1aGJFTnZiRzl5TXpJZ1BTQW9LR05zYVhCd1pXUldaWEowYVdObGMxdDJJQ3NnTlYwOFBESTBLU0ErUGo0Z01Da2dLeUFvWTJ4cGNIQmxaRlpsY25ScFkyVnpXM1lnS3lBMFhUdzhNVFlwSUNzZ0tHTnNhWEJ3WldSV1pYSjBhV05sYzF0MklDc2dNMTA4UERncElDc2dZMnhwY0hCbFpGWmxjblJwWTJWelczWWdLeUF5WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkV2x1ZEZaRVlYUmhXMjltWm5ObGRDQXJJRFJkSUQwZ1gyWnBibUZzUTI5c2IzSXpNanRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZaR0Z5YTBOdmJHOXlNeklnUFNBb0tHTnNhWEJ3WldSV1pYSjBhV05sYzF0MklDc2dNVEZkUER3eU5Da2dQajQrSURBcElDc2dLR05zYVhCd1pXUldaWEowYVdObGMxdDJJQ3NnTVRCZFBEd3hOaWtnS3lBb1kyeHBjSEJsWkZabGNuUnBZMlZ6VzNZZ0t5QTVYVHc4T0NrZ0t5QmpiR2x3Y0dWa1ZtVnlkR2xqWlhOYmRpQXJJRGhkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFhVzUwVmtSaGRHRmJiMlptYzJWMElDc2dOVjBnUFNCZlpHRnlhME52Ykc5eU16STdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lISmxZV3hVYVcxbFZISmhkbVZ5YzJVZ0tIZHZjbXhrVFdGMEtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCMlluVm1PMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FXSjFaanRjYmx4dUlDQWdJQ0FnSUNCc1pYUWdiRzlqVTJ0bGJHVjBiMjRnUFNCZlkyOXRjQzVmYzJ0bGJHVjBiMjQ3WEc0Z0lDQWdJQ0FnSUd4bGRDQnphMlZzWlhSdmJrTnZiRzl5SUQwZ2JHOWpVMnRsYkdWMGIyNHVZMjlzYjNJN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JuY21Gd2FHbGpjeUE5SUY5amIyMXdMbDlrWldKMVoxSmxibVJsY21WeU8xeHVJQ0FnSUNBZ0lDQnNaWFFnWTJ4cGNIQmxjaUE5SUY5amIyMXdMbDlqYkdsd2NHVnlPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JXRjBaWEpwWVd3Z1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCc1pYUWdZWFIwWVdOb2JXVnVkQ3dnWVhSMFlXTm9iV1Z1ZEVOdmJHOXlMQ0J6Ykc5MFEyOXNiM0lzSUhWMmN5d2dkSEpwWVc1bmJHVnpPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FYTlNaV2RwYjI0c0lHbHpUV1Z6YUN3Z2FYTkRiR2x3TzF4dUlDQWdJQ0FnSUNCc1pYUWdiMlptYzJWMFNXNW1ienRjYmlBZ0lDQWdJQ0FnYkdWMElITnNiM1E3WEc1Y2JpQWdJQ0FnSUNBZ1gzTnNiM1JTWVc1blpWTjBZWEowSUQwZ1gyTnZiWEF1WDNOMFlYSjBVMnh2ZEVsdVpHVjRPMXh1SUNBZ0lDQWdJQ0JmYzJ4dmRGSmhibWRsUlc1a0lEMGdYMk52YlhBdVgyVnVaRk5zYjNSSmJtUmxlRHRjYmlBZ0lDQWdJQ0FnWDJsdVVtRnVaMlVnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGOXpiRzkwVW1GdVoyVlRkR0Z5ZENBOVBTQXRNU2tnWDJsdVVtRnVaMlVnUFNCMGNuVmxPMXh1WEc0Z0lDQWdJQ0FnSUY5a1pXSjFaMU5zYjNSeklEMGdYMk52YlhBdVpHVmlkV2RUYkc5MGN6dGNiaUFnSUNBZ0lDQWdYMlJsWW5WblFtOXVaWE1nUFNCZlkyOXRjQzVrWldKMVowSnZibVZ6TzF4dUlDQWdJQ0FnSUNCcFppQW9aM0poY0docFkzTWdKaVlnS0Y5a1pXSjFaMEp2Ym1WeklIeDhJRjlrWldKMVoxTnNiM1J6S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjNKaGNHaHBZM011WTJ4bFlYSW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZHlZWEJvYVdOekxuTjBjbTlyWlVOdmJHOXlJRDBnWDNOc2IzUkRiMnh2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2R5WVhCb2FXTnpMbXhwYm1WWGFXUjBhQ0E5SURVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0FnSUNBZ0x5OGdlQ0I1SUhVZ2RpQnlNU0JuTVNCaU1TQmhNU0J5TWlCbk1pQmlNaUJoTWlCdmNpQjRJSGtnZFNCMklISWdaeUJpSUdFZ1hHNGdJQ0FnSUNBZ0lGOXdaWEpEYkdsd1ZtVnlkR1Y0VTJsNlpTQTlJRjkxYzJWVWFXNTBJRDhnTVRJZ09pQTRPMXh1SUNBZ0lGeHVJQ0FnSUNBZ0lDQmZkbVZ5ZEdWNFJteHZZWFJEYjNWdWRDQTlJREE3WEc0Z0lDQWdJQ0FnSUY5MlpYSjBaWGhHYkc5aGRFOW1abk5sZENBOUlEQTdYRzRnSUNBZ0lDQWdJRjkyWlhKMFpYaFBabVp6WlhRZ1BTQXdPMXh1SUNBZ0lDQWdJQ0JmYVc1a1pYaERiM1Z1ZENBOUlEQTdYRzRnSUNBZ0lDQWdJRjlwYm1SbGVFOW1abk5sZENBOUlEQTdYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYzJ4dmRFbGtlQ0E5SURBc0lITnNiM1JEYjNWdWRDQTlJR3h2WTFOclpXeGxkRzl1TG1SeVlYZFBjbVJsY2k1c1pXNW5kR2c3SUhOc2IzUkpaSGdnUENCemJHOTBRMjkxYm5RN0lITnNiM1JKWkhnckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyeHZkQ0E5SUd4dlkxTnJaV3hsZEc5dUxtUnlZWGRQY21SbGNsdHpiRzkwU1dSNFhUdGNiaUFnSUNCY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZmMyeHZkRkpoYm1kbFUzUmhjblFnUGowZ01DQW1KaUJmYzJ4dmRGSmhibWRsVTNSaGNuUWdQVDBnYzJ4dmRDNWtZWFJoTG1sdVpHVjRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDJsdVVtRnVaMlVnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVY5cGJsSmhibWRsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeHBjSEJsY2k1amJHbHdSVzVrVjJsMGFGTnNiM1FvYzJ4dmRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWDNOc2IzUlNZVzVuWlVWdVpDQStQU0F3SUNZbUlGOXpiRzkwVW1GdVoyVkZibVFnUFQwZ2MyeHZkQzVrWVhSaExtbHVaR1Y0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gybHVVbUZ1WjJVZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUY5MlpYSjBaWGhHYkc5aGRFTnZkVzUwSUQwZ01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5cGJtUmxlRU52ZFc1MElEMGdNRHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdZWFIwWVdOb2JXVnVkQ0E5SUhOc2IzUXVaMlYwUVhSMFlXTm9iV1Z1ZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmhkSFJoWTJodFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4cGNIQmxjaTVqYkdsd1JXNWtWMmwwYUZOc2IzUW9jMnh2ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6VW1WbmFXOXVJRDBnWVhSMFlXTm9iV1Z1ZENCcGJuTjBZVzVqWlc5bUlITndhVzVsTGxKbFoybHZia0YwZEdGamFHMWxiblE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMDFsYzJnZ1BTQmhkSFJoWTJodFpXNTBJR2x1YzNSaGJtTmxiMllnYzNCcGJtVXVUV1Z6YUVGMGRHRmphRzFsYm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYzBOc2FYQWdQU0JoZEhSaFkyaHRaVzUwSUdsdWMzUmhibU5sYjJZZ2MzQnBibVV1UTJ4cGNIQnBibWRCZEhSaFkyaHRaVzUwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTkRiR2x3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeHBjSEJsY2k1amJHbHdVM1JoY25Rb2MyeHZkQ3dnWVhSMFlXTm9iV1Z1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGFYTlNaV2RwYjI0Z0ppWWdJV2x6VFdWemFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zYVhCd1pYSXVZMnhwY0VWdVpGZHBkR2hUYkc5MEtITnNiM1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRZWFJsY21saGJDQTlJRjluWlhSVGJHOTBUV0YwWlhKcFlXd29ZWFIwWVdOb2JXVnVkQzV5WldkcGIyNHVkR1Y0ZEhWeVpTNWZkR1Y0ZEhWeVpTd2djMnh2ZEM1a1lYUmhMbUpzWlc1a1RXOWtaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVcxaGRHVnlhV0ZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeHBjSEJsY2k1amJHbHdSVzVrVjJsMGFGTnNiM1FvYzJ4dmRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZiWFZ6ZEVac2RYTm9JSHg4SUcxaGRHVnlhV0ZzTGw5b1lYTm9JQ0U5UFNCZmNtVnVaR1Z5WlhJdWJXRjBaWEpwWVd3dVgyaGhjMmdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmJYVnpkRVpzZFhOb0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzSmxibVJsY21WeUxsOW1iSFZ6YUNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOXlaVzVrWlhKbGNpNXViMlJsSUQwZ1gyNXZaR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNKbGJtUmxjbVZ5TG0xaGRHVnlhV0ZzSUQwZ2JXRjBaWEpwWVd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGMxSmxaMmx2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnlhV0Z1WjJ4bGN5QTlJRjl4ZFdGa1ZISnBZVzVuYkdWek8xeHVJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHbHVjM1Z5WlNCallYQmhZMmwwZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MlpYSjBaWGhHYkc5aGRFTnZkVzUwSUQwZ05DQXFJRjl3WlhKV1pYSjBaWGhUYVhwbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOXBibVJsZUVOdmRXNTBJRDBnTmp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZEVsdVptOGdQU0JmWW5WbVptVnlMbkpsY1hWbGMzUW9OQ3dnTmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gybHVaR1Y0VDJabWMyVjBJRDBnYjJabWMyVjBTVzVtYnk1cGJtUnBZMlZQWm1aelpYUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1psY25SbGVFOW1abk5sZENBOUlHOW1abk5sZEVsdVptOHVkbVZ5ZEdWNFQyWm1jMlYwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MlpYSjBaWGhHYkc5aGRFOW1abk5sZENBOUlHOW1abk5sZEVsdVptOHVZbmwwWlU5bVpuTmxkQ0ErUGlBeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmlkV1lnUFNCZlluVm1abVZ5TGw5MlJHRjBZU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWW5WbUlEMGdYMkoxWm1abGNpNWZhVVJoZEdFN1hHNGdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyOXRjSFYwWlNCMlpYSjBaWGdnWVc1a0lHWnBiR3dnZUNCNVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYUjBZV05vYldWdWRDNWpiMjF3ZFhSbFYyOXliR1JXWlhKMGFXTmxjeWh6Ykc5MExtSnZibVVzSUhaaWRXWXNJRjkyWlhKMFpYaEdiRzloZEU5bVpuTmxkQ3dnWDNCbGNsWmxjblJsZUZOcGVtVXBPMXh1SUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1J5WVhjZ1pHVmlkV2NnYzJ4dmRITWdhV1lnWlc1aFlteGxaQ0JuY21Gd2FHbGpjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobmNtRndhR2xqY3lBbUppQmZaR1ZpZFdkVGJHOTBjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5jbUZ3YUdsamN5NXRiM1psVkc4b2RtSjFabHRmZG1WeWRHVjRSbXh2WVhSUFptWnpaWFJkTENCMlluVm1XMTkyWlhKMFpYaEdiRzloZEU5bVpuTmxkQ0FySURGZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVdrZ1BTQmZkbVZ5ZEdWNFJteHZZWFJQWm1aelpYUWdLeUJmY0dWeVZtVnlkR1Y0VTJsNlpTd2dibTRnUFNCZmRtVnlkR1Y0Um14dllYUlBabVp6WlhRZ0t5QmZkbVZ5ZEdWNFJteHZZWFJEYjNWdWREc2dhV2tnUENCdWJqc2dhV2tnS3owZ1gzQmxjbFpsY25SbGVGTnBlbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkeVlYQm9hV056TG14cGJtVlVieWgyWW5WbVcybHBYU3dnZG1KMVpsdHBhU0FySURGZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5jbUZ3YUdsamN5NWpiRzl6WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuY21Gd2FHbGpjeTV6ZEhKdmEyVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNocGMwMWxjMmdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNtbGhibWRzWlhNZ1BTQmhkSFJoWTJodFpXNTBMblJ5YVdGdVoyeGxjenRjYmlBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJwYm5OMWNtVWdZMkZ3WVdOcGRIbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkbVZ5ZEdWNFJteHZZWFJEYjNWdWRDQTlJQ2hoZEhSaFkyaHRaVzUwTG5kdmNteGtWbVZ5ZEdsalpYTk1aVzVuZEdnZ1BqNGdNU2tnS2lCZmNHVnlWbVZ5ZEdWNFUybDZaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmYVc1a1pYaERiM1Z1ZENBOUlIUnlhV0Z1WjJ4bGN5NXNaVzVuZEdnN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZabVp6WlhSSmJtWnZJRDBnWDJKMVptWmxjaTV5WlhGMVpYTjBLRjkyWlhKMFpYaEdiRzloZEVOdmRXNTBJQzhnWDNCbGNsWmxjblJsZUZOcGVtVXNJRjlwYm1SbGVFTnZkVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmFXNWtaWGhQWm1aelpYUWdQU0J2Wm1aelpYUkpibVp2TG1sdVpHbGpaVTltWm5ObGRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkbVZ5ZEdWNFQyWm1jMlYwSUQwZ2IyWm1jMlYwU1c1bWJ5NTJaWEowWlhoUFptWnpaWFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNabGNuUmxlRVpzYjJGMFQyWm1jMlYwSUQwZ2IyWm1jMlYwU1c1bWJ5NWllWFJsVDJabWMyVjBJRDQrSURJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtSjFaaUE5SUY5aWRXWm1aWEl1WDNaRVlYUmhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xpZFdZZ1BTQmZZblZtWm1WeUxsOXBSR0YwWVR0Y2JpQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCamIyMXdkWFJsSUhabGNuUmxlQ0JoYm1RZ1ptbHNiQ0I0SUhsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRIUmhZMmh0Wlc1MExtTnZiWEIxZEdWWGIzSnNaRlpsY25ScFkyVnpLSE5zYjNRc0lEQXNJR0YwZEdGamFHMWxiblF1ZDI5eWJHUldaWEowYVdObGMweGxibWQwYUN3Z2RtSjFaaXdnWDNabGNuUmxlRVpzYjJGMFQyWm1jMlYwTENCZmNHVnlWbVZ5ZEdWNFUybDZaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1gzWmxjblJsZUVac2IyRjBRMjkxYm5RZ1BUMGdNQ0I4ZkNCZmFXNWtaWGhEYjNWdWRDQTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeHBjSEJsY2k1amJHbHdSVzVrVjJsMGFGTnNiM1FvYzJ4dmRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJtYVd4c0lHbHVaR2xqWlhOY2JpQWdJQ0FnSUNBZ0lDQWdJR2xpZFdZdWMyVjBLSFJ5YVdGdVoyeGxjeXdnWDJsdVpHVjRUMlptYzJWMEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdabWxzYkNCMUlIWmNiaUFnSUNBZ0lDQWdJQ0FnSUhWMmN5QTlJR0YwZEdGamFHMWxiblF1ZFhaek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnZGlBOUlGOTJaWEowWlhoR2JHOWhkRTltWm5ObGRDd2diaUE5SUY5MlpYSjBaWGhHYkc5aGRFOW1abk5sZENBcklGOTJaWEowWlhoR2JHOWhkRU52ZFc1MExDQjFJRDBnTURzZ2RpQThJRzQ3SUhZZ0t6MGdYM0JsY2xabGNuUmxlRk5wZW1Vc0lIVWdLejBnTWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmlkV1piZGlBcklESmRJRDBnZFhaelczVmRPeUFnSUNBZ0lDQWdJQ0FnTHk4Z2RWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmlkV1piZGlBcklETmRJRDBnZFhaelczVWdLeUF4WFRzZ0lDQWdJQ0FnTHk4Z2RseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JoZEhSaFkyaHRaVzUwUTI5c2IzSWdQU0JoZEhSaFkyaHRaVzUwTG1OdmJHOXlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyeHZkRU52Ykc5eUlEMGdjMnh2ZEM1amIyeHZjanRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWFXeHNWbVZ5ZEdsalpYTW9jMnRsYkdWMGIyNURiMnh2Y2l3Z1lYUjBZV05vYldWdWRFTnZiRzl5TENCemJHOTBRMjlzYjNJc0lHTnNhWEJ3WlhJc0lITnNiM1FwTzF4dUlDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRjlwYm1SbGVFTnZkVzUwSUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2xwSUQwZ1gybHVaR1Y0VDJabWMyVjBMQ0J1YmlBOUlGOXBibVJsZUU5bVpuTmxkQ0FySUY5cGJtUmxlRU52ZFc1ME95QnBhU0E4SUc1dU95QnBhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xpZFdaYmFXbGRJQ3M5SUY5MlpYSjBaWGhQWm1aelpYUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZHZjbXhrVFdGMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5dE1EQWdQU0IzYjNKc1pFMWhkQzV0TURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjl0TURRZ1BTQjNiM0pzWkUxaGRDNXRNRFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOXRNVElnUFNCM2IzSnNaRTFoZEM1dE1USTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5dE1ERWdQU0IzYjNKc1pFMWhkQzV0TURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjl0TURVZ1BTQjNiM0pzWkUxaGRDNXRNRFU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOXRNVE1nUFNCM2IzSnNaRTFoZEM1dE1UTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdscElEMGdYM1psY25SbGVFWnNiMkYwVDJabWMyVjBMQ0J1YmlBOUlGOTJaWEowWlhoR2JHOWhkRTltWm5ObGRDQXJJRjkyWlhKMFpYaEdiRzloZEVOdmRXNTBPeUJwYVNBOElHNXVPeUJwYVNBclBTQmZjR1Z5Vm1WeWRHVjRVMmw2WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzZ2dQU0IyWW5WbVcybHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjk1SUQwZ2RtSjFabHRwYVNBcklERmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUoxWmx0cGFWMGdQU0JmZUNBcUlGOXRNREFnS3lCZmVTQXFJRjl0TURRZ0t5QmZiVEV5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1KMVpsdHBhU0FySURGZElEMGdYM2dnS2lCZmJUQXhJQ3NnWDNrZ0tpQmZiVEExSUNzZ1gyMHhNenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZZblZtWm1WeUxtRmthblZ6ZENoZmRtVnlkR1Y0Um14dllYUkRiM1Z1ZENBdklGOXdaWEpXWlhKMFpYaFRhWHBsTENCZmFXNWtaWGhEYjNWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR2x3Y0dWeUxtTnNhWEJGYm1SWGFYUm9VMnh2ZENoemJHOTBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lDQWdJQ0JqYkdsd2NHVnlMbU5zYVhCRmJtUW9LVHRjYmlBZ0lDQmNiaUFnSUNBZ0lDQWdhV1lnS0dkeVlYQm9hV056SUNZbUlGOWtaV0oxWjBKdmJtVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWW05dVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkeVlYQm9hV056TG5OMGNtOXJaVU52Ykc5eUlEMGdYMkp2Ym1WRGIyeHZjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZHlZWEJvYVdOekxtWnBiR3hEYjJ4dmNpQTlJRjl6Ykc5MFEyOXNiM0k3SUM4dklGSnZiM1FnWW05dVpTQmpiMnh2Y2lCcGN5QnpZVzFsSUdGeklITnNiM1FnWTI5c2IzSXVYRzRnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2diaUE5SUd4dlkxTnJaV3hsZEc5dUxtSnZibVZ6TG14bGJtZDBhRHNnYVNBOElHNDdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZibVVnUFNCc2IyTlRhMlZzWlhSdmJpNWliMjVsYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZUNBOUlHSnZibVV1WkdGMFlTNXNaVzVuZEdnZ0tpQmliMjVsTG1FZ0t5QmliMjVsTG5kdmNteGtXRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VTQTlJR0p2Ym1VdVpHRjBZUzVzWlc1bmRHZ2dLaUJpYjI1bExtTWdLeUJpYjI1bExuZHZjbXhrV1R0Y2JpQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCQ2IyNWxJR3hsYm1kMGFITXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaM0poY0docFkzTXViVzkyWlZSdktHSnZibVV1ZDI5eWJHUllMQ0JpYjI1bExuZHZjbXhrV1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ozSmhjR2hwWTNNdWJHbHVaVlJ2S0hnc0lIa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2R5WVhCb2FXTnpMbk4wY205clpTZ3BPMXh1SUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUp2Ym1VZ2IzSnBaMmx1Y3k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmNtRndhR2xqY3k1amFYSmpiR1VvWW05dVpTNTNiM0pzWkZnc0lHSnZibVV1ZDI5eWJHUlpMQ0JOWVhSb0xsQkpJQ29nTWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ozSmhjR2hwWTNNdVptbHNiQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkeVlYQm9hV056TG1acGJHeERiMnh2Y2lBOUlGOXZjbWxuYVc1RGIyeHZjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZMkZqYUdWVWNtRjJaWEp6WlNBb2QyOXliR1JOWVhRcElIdGNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJR3hsZENCbWNtRnRaU0E5SUY5amIyMXdMbDlqZFhKR2NtRnRaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRm1jbUZ0WlNrZ2NtVjBkWEp1TzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0J6WldkdFpXNTBjeUE5SUdaeVlXMWxMbk5sWjIxbGJuUnpPMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyVm5iV1Z1ZEhNdWJHVnVaM1JvSUQwOUlEQXBJSEpsZEhWeWJqdGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2RtSjFaaXdnYVdKMVppd2dkV2x1ZEdKMVpqdGNiaUFnSUNBZ0lDQWdiR1YwSUcxaGRHVnlhV0ZzTzF4dUlDQWdJQ0FnSUNCc1pYUWdiMlptYzJWMFNXNW1ienRjYmlBZ0lDQWdJQ0FnYkdWMElIWmxjblJwWTJWeklEMGdabkpoYldVdWRtVnlkR2xqWlhNN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JwYm1ScFkyVnpJRDBnWm5KaGJXVXVhVzVrYVdObGN6dGNiaUFnSUNBZ0lDQWdiR1YwSUhWcGJuUldaWEowSUQwZ1puSmhiV1V1ZFdsdWRGWmxjblE3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJR1p5WVcxbFZrWlBabVp6WlhRZ1BTQXdMQ0JtY21GdFpVbHVaR1Y0VDJabWMyVjBJRDBnTUN3Z2MyVm5Wa1pEYjNWdWRDQTlJREE3WEc0Z0lDQWdJQ0FnSUdsbUlDaDNiM0pzWkUxaGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gyMHdNQ0E5SUhkdmNteGtUV0YwTG0wd01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5dE1EUWdQU0IzYjNKc1pFMWhkQzV0TURRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmYlRFeUlEMGdkMjl5YkdSTllYUXViVEV5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdYMjB3TVNBOUlIZHZjbXhrVFdGMExtMHdNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOXRNRFVnUFNCM2IzSnNaRTFoZEM1dE1EVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmJURXpJRDBnZDI5eWJHUk5ZWFF1YlRFek8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHTnZiRzl5VDJabWMyVjBJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2JHVjBJR052Ykc5eWN5QTlJR1p5WVcxbExtTnZiRzl5Y3p0Y2JpQWdJQ0FnSUNBZ2JHVjBJRzV2ZDBOdmJHOXlJRDBnWTI5c2IzSnpXMk52Ykc5eVQyWm1jMlYwS3l0ZE8xeHVJQ0FnSUNBZ0lDQnNaWFFnYldGNFZrWlBabVp6WlhRZ1BTQnViM2REYjJ4dmNpNTJaazltWm5ObGREdGNiaUFnSUNBZ0lDQWdYMmhoYm1Sc1pVTnZiRzl5S0c1dmQwTnZiRzl5S1R0Y2JseHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTUN3Z2JpQTlJSE5sWjIxbGJuUnpMbXhsYm1kMGFEc2dhU0E4SUc0N0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhObFowbHVabThnUFNCelpXZHRaVzUwYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGRHVnlhV0ZzSUQwZ1gyZGxkRk5zYjNSTllYUmxjbWxoYkNoelpXZEpibVp2TG5SbGVDd2djMlZuU1c1bWJ5NWliR1Z1WkUxdlpHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z0WVhSbGNtbGhiQ2tnWTI5dWRHbHVkV1U3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZmJYVnpkRVpzZFhOb0lIeDhJRzFoZEdWeWFXRnNMbDlvWVhOb0lDRTlQU0JmY21WdVpHVnlaWEl1YldGMFpYSnBZV3d1WDJoaGMyZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmYlhWemRFWnNkWE5vSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNKbGJtUmxjbVZ5TGw5bWJIVnphQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5eVpXNWtaWEpsY2k1dWIyUmxJRDBnWDI1dlpHVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM0psYm1SbGNtVnlMbTFoZEdWeWFXRnNJRDBnYldGMFpYSnBZV3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTJaWEowWlhoRGIzVnVkQ0E5SUhObFowbHVabTh1ZG1WeWRHVjRRMjkxYm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmYVc1a1pYaERiM1Z1ZENBOUlITmxaMGx1Wm04dWFXNWtaWGhEYjNWdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MlpYSjBaWGhHYkc5aGRFTnZkVzUwSUQwZ1gzWmxjblJsZUVOdmRXNTBJQ29nWDNCbGNsWmxjblJsZUZOcGVtVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZEVsdVptOGdQU0JmWW5WbVptVnlMbkpsY1hWbGMzUW9YM1psY25SbGVFTnZkVzUwTENCZmFXNWtaWGhEYjNWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmFXNWtaWGhQWm1aelpYUWdQU0J2Wm1aelpYUkpibVp2TG1sdVpHbGpaVTltWm5ObGREdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MlpYSjBaWGhQWm1aelpYUWdQU0J2Wm1aelpYUkpibVp2TG5abGNuUmxlRTltWm5ObGREdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MlprOW1abk5sZENBOUlHOW1abk5sZEVsdVptOHVZbmwwWlU5bVpuTmxkQ0ErUGlBeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1KMVppQTlJRjlpZFdabVpYSXVYM1pFWVhSaE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdKMVppQTlJRjlpZFdabVpYSXVYMmxFWVhSaE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZFdsdWRHSjFaaUE5SUY5aWRXWm1aWEl1WDNWcGJuUldSR0YwWVR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVdrZ1BTQmZhVzVrWlhoUFptWnpaWFFzSUdsc0lEMGdYMmx1WkdWNFQyWm1jMlYwSUNzZ1gybHVaR1Y0UTI5MWJuUTdJR2xwSUR3Z2FXdzdJR2xwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBZblZtVzJscFhTQTlJRjkyWlhKMFpYaFBabVp6WlhRZ0t5QnBibVJwWTJWelcyWnlZVzFsU1c1a1pYaFBabVp6WlhRcksxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhObFoxWkdRMjkxYm5RZ1BTQnpaV2RKYm1adkxuWm1RMjkxYm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb1gyaGhibVJzWlZaaGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1RrOVVYMEpCVkVOSVgwOU9SVjlEVDB4UFVqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVdrZ1BTQmZkbVpQWm1aelpYUXNJR2xzSUQwZ1gzWm1UMlptYzJWMElDc2dYM1psY25SbGVFWnNiMkYwUTI5MWJuUTdJR2xwSUR3Z2FXdzdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWW5WbVcybHBLeXRkSUQwZ2RtVnlkR2xqWlhOYlpuSmhiV1ZXUms5bVpuTmxkQ3NyWFRzZ0lDOHZJSGhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFppZFdaYmFXa3JLMTBnUFNCMlpYSjBhV05sYzF0bWNtRnRaVlpHVDJabWMyVjBLeXRkT3lBZ0x5OGdlVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUoxWmx0cGFTc3JYU0E5SUhabGNuUnBZMlZ6VzJaeVlXMWxWa1pQWm1aelpYUXJLMTA3SUNBZ0lDQXZMeUIxWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWW5WbVcybHBLeXRkSUQwZ2RtVnlkR2xqWlhOYlpuSmhiV1ZXUms5bVpuTmxkQ3NyWFRzZ0lDQWdJQzh2SUhaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWcGJuUmlkV1piYVdrcksxMGdQU0IxYVc1MFZtVnlkRnRtY21GdFpWWkdUMlptYzJWMEt5dGRPeUFnTHk4Z1ptbHVZV3dnWTI5c2IzSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnlZVzFsVmtaUFptWnpaWFFyS3pzZ0x5OGdhblZ0Y0NCa1lYSnJJR052Ykc5eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUU1UFZGOUNRVlJEU0Y5VVYwOWZRMDlNVDFJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFppZFdZdWMyVjBLSFpsY25ScFkyVnpMbk4xWW1GeWNtRjVLR1p5WVcxbFZrWlBabVp6WlhRc0lHWnlZVzFsVmtaUFptWnpaWFFnS3lCZmRtVnlkR1Y0Um14dllYUkRiM1Z1ZENrc0lGOTJaazltWm5ObGRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaeVlXMWxWa1pQWm1aelpYUWdLejBnWDNabGNuUmxlRVpzYjJGMFEyOTFiblE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCQ1FWUkRTRjlQVGtWZlEwOU1UMUk2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHbHBJRDBnWDNabVQyWm1jMlYwTENCcGJDQTlJRjkyWms5bVpuTmxkQ0FySUY5MlpYSjBaWGhHYkc5aGRFTnZkVzUwT3lCcGFTQThJR2xzT3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzZ2dQU0IyWlhKMGFXTmxjMXRtY21GdFpWWkdUMlptYzJWMEt5dGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM2tnUFNCMlpYSjBhV05sYzF0bWNtRnRaVlpHVDJabWMyVjBLeXRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1KMVpsdHBhU3NyWFNBOUlGOTRJQ29nWDIwd01DQXJJRjk1SUNvZ1gyMHdOQ0FySUY5dE1USTdJQ0F2THlCNFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMlluVm1XMmxwS3l0ZElEMGdYM2dnS2lCZmJUQXhJQ3NnWDNrZ0tpQmZiVEExSUNzZ1gyMHhNenNnSUM4dklIbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmlkV1piYVdrcksxMGdQU0IyWlhKMGFXTmxjMXRtY21GdFpWWkdUMlptYzJWMEt5dGRPeUFnSUNBZ0x5OGdkVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUoxWmx0cGFTc3JYU0E5SUhabGNuUnBZMlZ6VzJaeVlXMWxWa1pQWm1aelpYUXJLMTA3SUNBZ0lDQXZMeUIyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYVc1MFluVm1XMmxwS3l0ZElEMGdkV2x1ZEZabGNuUmJabkpoYldWV1JrOW1abk5sZENzclhUc2dJQzh2SUdacGJtRnNJR052Ykc5eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtRnRaVlpHVDJabWMyVjBLeXM3SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHUmhjbXNnWTI5c2IzSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1FrRlVRMGhmVkZkUFgwTlBURTlTT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBhU0E5SUY5MlprOW1abk5sZEN3Z2FXd2dQU0JmZG1aUFptWnpaWFFnS3lCZmRtVnlkR1Y0Um14dllYUkRiM1Z1ZERzZ2FXa2dQQ0JwYkRzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTRJRDBnZG1WeWRHbGpaWE5iWm5KaGJXVldSazltWm5ObGRDc3JYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjk1SUQwZ2RtVnlkR2xqWlhOYlpuSmhiV1ZXUms5bVpuTmxkQ3NyWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaWRXWmJhV2tySzEwZ1BTQmZlQ0FxSUY5dE1EQWdLeUJmZVNBcUlGOXRNRFFnS3lCZmJURXlPeUFnTHk4Z2VGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtSjFabHRwYVNzclhTQTlJRjk0SUNvZ1gyMHdNU0FySUY5NUlDb2dYMjB3TlNBcklGOXRNVE03SUNBdkx5QjVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZblZtVzJscEt5dGRJRDBnZG1WeWRHbGpaWE5iWm5KaGJXVldSazltWm5ObGRDc3JYVHNnSUNBZ0lDOHZJSFZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFppZFdaYmFXa3JLMTBnUFNCMlpYSjBhV05sYzF0bWNtRnRaVlpHVDJabWMyVjBLeXRkT3lBZ0lDQWdMeThnZGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFdsdWRHSjFabHRwYVNzclhTQTlJSFZwYm5SV1pYSjBXMlp5WVcxbFZrWlBabVp6WlhRcksxMDdJQ0F2THlCbWFXNWhiQ0JqYjJ4dmNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RXbHVkR0oxWmx0cGFTc3JYU0E5SUhWcGJuUldaWEowVzJaeVlXMWxWa1pQWm1aelpYUXJLMTA3SUNBdkx5QmtZWEpySUdOdmJHOXlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1gySjFabVpsY2k1aFpHcDFjM1FvWDNabGNuUmxlRU52ZFc1MExDQmZhVzVrWlhoRGIzVnVkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSUNGZmJtVmxaRU52Ykc5eUlDa2dZMjl1ZEdsdWRXVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2hoYm1Sc1pTQmpiMnh2Y2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdaeVlXMWxRMjlzYjNKUFptWnpaWFFnUFNCbWNtRnRaVlpHVDJabWMyVjBJQzBnYzJWblZrWkRiM1Z1ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2xwSUQwZ1gzWm1UMlptYzJWMElDc2dOQ3dnYVd3Z1BTQmZkbVpQWm1aelpYUWdLeUEwSUNzZ1gzWmxjblJsZUVac2IyRjBRMjkxYm5RN0lHbHBJRHdnYVd3N0lHbHBJQ3M5SUY5d1pYSldaWEowWlhoVGFYcGxMQ0JtY21GdFpVTnZiRzl5VDJabWMyVjBJQ3M5SURZcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm5KaGJXVkRiMnh2Y2s5bVpuTmxkQ0ErUFNCdFlYaFdSazltWm5ObGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdWIzZERiMnh2Y2lBOUlHTnZiRzl5YzF0amIyeHZjazltWm5ObGRDc3JYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gyaGhibVJzWlVOdmJHOXlLRzV2ZDBOdmJHOXlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjRWa1pQWm1aelpYUWdQU0J1YjNkRGIyeHZjaTUyWms5bVpuTmxkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFdsdWRHSjFabHRwYVYwZ1BTQmZabWx1WVd4RGIyeHZjak15TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MWMyVlVhVzUwSUNZbUlDaDFhVzUwWW5WbVcybHBJQ3NnTVYwZ1BTQmZaR0Z5YTBOdmJHOXlNeklwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR1pwYkd4Q2RXWm1aWEp6SUNoamIyMXdMQ0J5Wlc1a1pYSmxjaWtnZTF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2JHVjBJRzV2WkdVZ1BTQmpiMjF3TG01dlpHVTdYRzRnSUNBZ0lDQWdJRzV2WkdVdVgzSmxibVJsY2tac1lXY2dmRDBnVW1WdVpHVnlSbXh2ZHk1R1RFRkhYMVZRUkVGVVJWOVNSVTVFUlZKZlJFRlVRVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmpiMjF3TGw5emEyVnNaWFJ2YmlrZ2NtVjBkWEp1TzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0J1YjJSbFEyOXNiM0lnUFNCdWIyUmxMbDlqYjJ4dmNqdGNiaUFnSUNBZ0lDQWdYMjV2WkdWU0lEMGdibTlrWlVOdmJHOXlMbklnTHlBeU5UVTdYRzRnSUNBZ0lDQWdJRjl1YjJSbFJ5QTlJRzV2WkdWRGIyeHZjaTVuSUM4Z01qVTFPMXh1SUNBZ0lDQWdJQ0JmYm05a1pVSWdQU0J1YjJSbFEyOXNiM0l1WWlBdklESTFOVHRjYmlBZ0lDQWdJQ0FnWDI1dlpHVkJJRDBnYm05a1pVTnZiRzl5TG1FZ0x5QXlOVFU3WEc1Y2JpQWdJQ0FnSUNBZ1gzVnpaVlJwYm5RZ1BTQmpiMjF3TG5WelpWUnBiblE3WEc0Z0lDQWdJQ0FnSUY5MlpYSjBaWGhHYjNKdFlYUWdQU0JmZFhObFZHbHVkRDhnVmtaVWQyOURiMnh2Y2lBNklGWkdUMjVsUTI5c2IzSTdYRzRnSUNBZ0lDQWdJQzh2SUhnZ2VTQjFJSFlnWTI5c2IzSXhJR052Ykc5eU1pQnZjaUI0SUhrZ2RTQjJJR052Ykc5eVhHNGdJQ0FnSUNBZ0lGOXdaWEpXWlhKMFpYaFRhWHBsSUQwZ1gzVnpaVlJwYm5RZ1B5QTJJRG9nTlR0Y2JseHVJQ0FnSUNBZ0lDQmZibTlrWlNBOUlHTnZiWEF1Ym05a1pUdGNiaUFnSUNBZ0lDQWdYMkoxWm1abGNpQTlJSEpsYm1SbGNtVnlMbWRsZEVKMVptWmxjaWduYzNCcGJtVW5MQ0JmZG1WeWRHVjRSbTl5YldGMEtUdGNiaUFnSUNBZ0lDQWdYM0psYm1SbGNtVnlJRDBnY21WdVpHVnlaWEk3WEc0Z0lDQWdJQ0FnSUY5amIyMXdJRDBnWTI5dGNEdGNibHh1SUNBZ0lDQWdJQ0JmYlhWemRFWnNkWE5vSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnWDNCeVpXMTFiSFJwY0d4cFpXUkJiSEJvWVNBOUlHTnZiWEF1Y0hKbGJYVnNkR2x3YkdsbFpFRnNjR2hoTzF4dUlDQWdJQ0FnSUNCZmJYVnNkR2x3YkdsbGNpQTlJREV1TUR0Y2JpQWdJQ0FnSUNBZ1gyaGhibVJzWlZaaGJDQTlJREI0TURBN1hHNGdJQ0FnSUNBZ0lGOXVaV1ZrUTI5c2IzSWdQU0JtWVd4elpUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2JtOWtaVU52Ykc5eUxsOTJZV3dnSVQwOUlEQjRabVptWm1abVptWWdmSHdnWDNCeVpXMTFiSFJwY0d4cFpXUkJiSEJvWVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWDI1bFpXUkRiMnh2Y2lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvWDNWelpWUnBiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjlvWVc1a2JHVldZV3dnZkQwZ1JreEJSMTlVVjA5ZlEwOU1UMUk3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnNaWFFnZDI5eWJHUk5ZWFFnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hmWTI5dGNDNWxibUZpYkdWQ1lYUmphQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkMjl5YkdSTllYUWdQU0JmYm05a1pTNWZkMjl5YkdSTllYUnlhWGc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZiWFZ6ZEVac2RYTm9JRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmFHRnVaR3hsVm1Gc0lIdzlJRVpNUVVkZlFrRlVRMGc3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvWTI5dGNDNXBjMEZ1YVcxaGRHbHZia05oWTJobFpDZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJVY21GMlpYSnpaU0JwYm5CMWRDQmhjM05sYldKc1pYSXVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5oWTJobFZISmhkbVZ5YzJVb2QyOXliR1JOWVhRcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaV0ZzVkdsdFpWUnlZWFpsY25ObEtIZHZjbXhrVFdGMEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklFTnNaV0Z5SUhSbGJYQWdkbUZ5TGx4dUlDQWdJQ0FnSUNCZmJtOWtaU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ1gySjFabVpsY2lBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdYM0psYm1SbGNtVnlJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnSUNCZlkyOXRjQ0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0I5WEc1OU8xeHVYRzVUYTJWc1pYUnZiaTVmWVhOelpXMWliR1Z5SUQwZ2MzQnBibVZCYzNObGJXSnNaWEk3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2MzQnBibVZCYzNObGJXSnNaWEk3WEc0aVhYMD0iXX0=