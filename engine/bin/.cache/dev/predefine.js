(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/predefine.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _global = typeof window === 'undefined' ? global : window;
        function defineMacro(name, defaultValue) {
            if (typeof _global[name] === 'undefined') {
                _global[name] = defaultValue;
            }
        }
        function defined(name) {
            return _typeof(_global[name]) === 'object';
        }
        defineMacro('CC_BUILD', false);
        if (CC_BUILD) {
            _global.CC_BUILD = CC_BUILD;
            _global.CC_TEST = CC_TEST;
            _global.CC_EDITOR = CC_EDITOR;
            _global.CC_PREVIEW = CC_PREVIEW;
            _global.CC_DEV = CC_DEV;
            _global.CC_DEBUG = CC_DEBUG;
            _global.CC_JSB = CC_JSB;
            _global.CC_WECHATGAMESUB = CC_WECHATGAMESUB;
            _global.CC_WECHATGAME = CC_WECHATGAME;
            _global.CC_QQPLAY = CC_QQPLAY;
            _global.CC_RUNTIME = CC_RUNTIME;
            _global.CC_SUPPORT_JIT = CC_SUPPORT_JIT;
        } else {
            defineMacro('CC_TEST', defined('tap') || defined('QUnit'));
            defineMacro('CC_EDITOR', defined('Editor') && defined('process') && 'electron' in process.versions);
            defineMacro('CC_PREVIEW', !CC_EDITOR);
            defineMacro('CC_DEV', true);
            defineMacro('CC_DEBUG', true);
            defineMacro('CC_RUNTIME', 'function' === typeof loadRuntime);
            defineMacro('CC_JSB', defined('jsb') && !CC_RUNTIME);
            defineMacro('CC_WECHATGAMESUB', !!(defined('wx') && wx.getSharedCanvas));
            defineMacro('CC_WECHATGAME', !!(defined('wx') && (wx.getSystemInfoSync || wx.getSharedCanvas)));
            defineMacro('CC_QQPLAY', defined('bk'));
            defineMacro('CC_SUPPORT_JIT', !(CC_WECHATGAME || CC_QQPLAY || CC_RUNTIME));
        }
        if (CC_DEV) {
            cc._Test = {};
        }
        var engineVersion = '2.1.3_support_astc_etc2';
        _global['CocosEngine'] = cc.ENGINE_VERSION = engineVersion;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,