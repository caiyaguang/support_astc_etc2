(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/vertex-format.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _enums = require('./enums');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var VertexFormat = function () {
            function VertexFormat(infos) {
                _classCallCheck(this, VertexFormat);
                this._attr2el = {};
                this._elements = [];
                this._bytes = 0;
                for (var i = 0, len = infos.length; i < len; ++i) {
                    var info = infos[i];
                    var el = {
                        name: info.name,
                        offset: this._bytes,
                        stride: 0,
                        stream: -1,
                        type: info.type,
                        num: info.num,
                        normalize: info.normalize === undefined ? false : info.normalize,
                        bytes: info.num * (0, _enums.attrTypeBytes)(info.type)
                    };
                    this._attr2el[el.name] = el;
                    this._elements.push(el);
                    this._bytes += el.bytes;
                }
                for (var _i = 0, _len = this._elements.length; _i < _len; ++_i) {
                    var _el = this._elements[_i];
                    _el.stride = this._bytes;
                }
            }
            _createClass(VertexFormat, [{
                    key: 'element',
                    value: function element(attrName) {
                        return this._attr2el[attrName];
                    }
                }]);
            return VertexFormat;
        }();
        exports.default = VertexFormat;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlcnRleC1mb3JtYXQuanMiLCIvVXNlcnMvenpmMjAxOS9EZXNrdG9wL2RldmVsb3BtZW50L3N1cHBvcnRfYXN0Yy9lbmdpbmUvY29jb3MyZC9yZW5kZXJlci9nZngvdmVydGV4LWZvcm1hdC5qcyJdLCJuYW1lcyI6WyJWZXJ0ZXhGb3JtYXQiLCJpbmZvcyIsIl9hdHRyMmVsIiwiX2VsZW1lbnRzIiwiX2J5dGVzIiwiaSIsImxlbiIsImxlbmd0aCIsImluZm8iLCJlbCIsIm5hbWUiLCJvZmZzZXQiLCJzdHJpZGUiLCJzdHJlYW0iLCJ0eXBlIiwibnVtIiwibm9ybWFsaXplIiwidW5kZWZpbmVkIiwiYnl0ZXMiLCJwdXNoIiwiYXR0ck5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBQUEsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLFNBQUEsQ0FBQTs7Ozs7O1lBTXFCQSxZQUFBQTtZQVluQixTQUFBLFlBQUEsQ0FBWUMsS0FBWixFQUFtQjtBQUFBLGdCQUFBLGVBQUEsQ0FBQSxJQUFBLEVBQUEsWUFBQSxFQUFBO0FBQUEsZ0JBQ2pCLEtBQUtDLFFBQUwsR0FBZ0IsRUFBaEIsQ0FEaUI7QUFBQSxnQkFFakIsS0FBS0MsU0FBTCxHQUFpQixFQUFqQixDQUZpQjtBQUFBLGdCQUdqQixLQUFLQyxNQUFMLEdBQWMsQ0FBZCxDQUhpQjtBQUFBLGdCQUtqQixLQUFLLElBQUlDLENBQUFBLEdBQUksQ0FBUixFQUFXQyxHQUFBQSxHQUFNTCxLQUFBQSxDQUFNTSxNQUF2QixDQUFMLENBQW9DRixDQUFBQSxHQUFJQyxHQUF4QyxFQUE2QyxFQUFFRCxDQUEvQyxFQUFrRDtBQUFBLG9CQUNoRCxJQUFJRyxJQUFBQSxHQUFPUCxLQUFBQSxDQUFNSSxDQUFOSixDQUFYLENBRGdEO0FBQUEsb0JBRWhELElBQUlRLEVBQUFBLEdBQUs7QUFBQSx3QkFDUEMsSUFBQUEsRUFBTUYsSUFBQUEsQ0FBS0UsSUFESjtBQUFBLHdCQUVQQyxNQUFBQSxFQUFRLEtBQUtQLE1BRk47QUFBQSx3QkFHUFEsTUFBQUEsRUFBUSxDQUhEO0FBQUEsd0JBSVBDLE1BQUFBLEVBQVEsQ0FBQyxDQUpGO0FBQUEsd0JBS1BDLElBQUFBLEVBQU1OLElBQUFBLENBQUtNLElBTEo7QUFBQSx3QkFNUEMsR0FBQUEsRUFBS1AsSUFBQUEsQ0FBS08sR0FOSDtBQUFBLHdCQU9QQyxTQUFBQSxFQUFZUixJQUFBQSxDQUFLUSxTQUFMUixLQUFtQlMsU0FBbkJULEdBQWdDLEtBQWhDQSxHQUF3Q0EsSUFBQUEsQ0FBS1EsU0FQbEQ7QUFBQSx3QkFRUEUsS0FBQUEsRUFBT1YsSUFBQUEsQ0FBS08sR0FBTFAsR0FBVyxJQUFBLE1BQUEsQ0FBQSxhQUFBLENBQUEsQ0FBY0EsSUFBQUEsQ0FBS00sSUFBbkIsQ0FSWDtBQUFBLHFCQUFULENBRmdEO0FBQUEsb0JBYWhELEtBQUtaLFFBQUwsQ0FBY08sRUFBQUEsQ0FBR0MsSUFBakIsSUFBeUJELEVBQXpCLENBYmdEO0FBQUEsb0JBY2hELEtBQUtOLFNBQUwsQ0FBZWdCLElBQWYsQ0FBb0JWLEVBQXBCLEVBZGdEO0FBQUEsb0JBZ0JoRCxLQUFLTCxNQUFMLElBQWVLLEVBQUFBLENBQUdTLEtBQWxCLENBaEJnRDtBQUFBLGlCQUxqQztBQUFBLGdCQXdCakIsS0FBSyxJQUFJYixFQUFBQSxHQUFJLENBQVIsRUFBV0MsSUFBQUEsR0FBTSxLQUFLSCxTQUFMLENBQWVJLE1BQWhDLENBQUwsQ0FBNkNGLEVBQUFBLEdBQUlDLElBQWpELEVBQXNELEVBQUVELEVBQXhELEVBQTJEO0FBQUEsb0JBQ3pELElBQUlJLEdBQUFBLEdBQUssS0FBS04sU0FBTCxDQUFlRSxFQUFmLENBQVQsQ0FEeUQ7QUFBQSxvQkFFekRJLEdBQUFBLENBQUdHLE1BQUhILEdBQVksS0FBS0wsTUFBakJLLENBRnlEO0FBQUEsaUJBeEIxQztBQUFBOzs7NENBa0NYVyxVQUFVO0FBQUEsd0JBQ2hCLE9BQU8sS0FBS2xCLFFBQUwsQ0FBY2tCLFFBQWQsQ0FBUCxDQURnQjtBQUFBOzs7OzBCQTlDQ3BCOzs7SUFKckIsSUFBQSxPQUFBLEVBQUE7QUFBQSxRQUNBLFFBQUEsQ0FBQSxRQUFBLENBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLEVBREE7QUFBQSxLQUFBOztZQUtFLFFBQUEsQ0FBQSxRQUFBLENBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxRQUFBIiwiZmlsZSI6InZlcnRleC1mb3JtYXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdHRyVHlwZUJ5dGVzIH0gZnJvbSAnLi9lbnVtcyc7XG5cbi8vID09PT09PT09PT09PT09PT09PT09XG4vLyBleHBvcnRzXG4vLyA9PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZXJ0ZXhGb3JtYXQge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7QXJyYXl9IGluZm9zXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGxldCB2ZXJ0ZXhGbXQgPSBuZXcgVmVydGV4Rm9ybWF0KFtcbiAgICogICB7IG5hbWU6IGdmeC5BVFRSX1BPU0lUSU9OLCB0eXBlOiBnZnguQVRUUl9UWVBFX0ZMT0FUMzIsIG51bTogMyB9LFxuICAgKiAgIHsgbmFtZTogZ2Z4LkFUVFJfVVYwLCB0eXBlOiBnZnguQVRUUl9UWVBFX0ZMT0FUMzIsIG51bTogMiB9LFxuICAgKiAgIHsgbmFtZTogZ2Z4LkFUVFJfQ09MT1IsIHR5cGU6IGdmeC5BVFRSX1RZUEVfRkxPQVQzMiwgbnVtOiA0LCBub3JtYWxpemU6IHRydWUgfSxcbiAgICogXSlcbiAgICovXG4gIGNvbnN0cnVjdG9yKGluZm9zKSB7XG4gICAgdGhpcy5fYXR0cjJlbCA9IHt9O1xuICAgIHRoaXMuX2VsZW1lbnRzID0gW107XG4gICAgdGhpcy5fYnl0ZXMgPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGluZm9zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBsZXQgaW5mbyA9IGluZm9zW2ldO1xuICAgICAgbGV0IGVsID0ge1xuICAgICAgICBuYW1lOiBpbmZvLm5hbWUsXG4gICAgICAgIG9mZnNldDogdGhpcy5fYnl0ZXMsXG4gICAgICAgIHN0cmlkZTogMCxcbiAgICAgICAgc3RyZWFtOiAtMSxcbiAgICAgICAgdHlwZTogaW5mby50eXBlLFxuICAgICAgICBudW06IGluZm8ubnVtLFxuICAgICAgICBub3JtYWxpemU6IChpbmZvLm5vcm1hbGl6ZSA9PT0gdW5kZWZpbmVkKSA/IGZhbHNlIDogaW5mby5ub3JtYWxpemUsXG4gICAgICAgIGJ5dGVzOiBpbmZvLm51bSAqIGF0dHJUeXBlQnl0ZXMoaW5mby50eXBlKSxcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2F0dHIyZWxbZWwubmFtZV0gPSBlbDtcbiAgICAgIHRoaXMuX2VsZW1lbnRzLnB1c2goZWwpO1xuXG4gICAgICB0aGlzLl9ieXRlcyArPSBlbC5ieXRlcztcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5fZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGxldCBlbCA9IHRoaXMuX2VsZW1lbnRzW2ldO1xuICAgICAgZWwuc3RyaWRlID0gdGhpcy5fYnl0ZXM7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgZWxlbWVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0ck5hbWVcbiAgICovXG4gIGVsZW1lbnQoYXR0ck5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fYXR0cjJlbFthdHRyTmFtZV07XG4gIH1cbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZW51bXMgPSByZXF1aXJlKCcuL2VudW1zJyk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8vID09PT09PT09PT09PT09PT09PT09XG4vLyBleHBvcnRzXG4vLyA9PT09PT09PT09PT09PT09PT09PVxuXG52YXIgVmVydGV4Rm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7QXJyYXl9IGluZm9zXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGxldCB2ZXJ0ZXhGbXQgPSBuZXcgVmVydGV4Rm9ybWF0KFtcbiAgICogICB7IG5hbWU6IGdmeC5BVFRSX1BPU0lUSU9OLCB0eXBlOiBnZnguQVRUUl9UWVBFX0ZMT0FUMzIsIG51bTogMyB9LFxuICAgKiAgIHsgbmFtZTogZ2Z4LkFUVFJfVVYwLCB0eXBlOiBnZnguQVRUUl9UWVBFX0ZMT0FUMzIsIG51bTogMiB9LFxuICAgKiAgIHsgbmFtZTogZ2Z4LkFUVFJfQ09MT1IsIHR5cGU6IGdmeC5BVFRSX1RZUEVfRkxPQVQzMiwgbnVtOiA0LCBub3JtYWxpemU6IHRydWUgfSxcbiAgICogXSlcbiAgICovXG4gIGZ1bmN0aW9uIFZlcnRleEZvcm1hdChpbmZvcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWZXJ0ZXhGb3JtYXQpO1xuXG4gICAgdGhpcy5fYXR0cjJlbCA9IHt9O1xuICAgIHRoaXMuX2VsZW1lbnRzID0gW107XG4gICAgdGhpcy5fYnl0ZXMgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGluZm9zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB2YXIgaW5mbyA9IGluZm9zW2ldO1xuICAgICAgdmFyIGVsID0ge1xuICAgICAgICBuYW1lOiBpbmZvLm5hbWUsXG4gICAgICAgIG9mZnNldDogdGhpcy5fYnl0ZXMsXG4gICAgICAgIHN0cmlkZTogMCxcbiAgICAgICAgc3RyZWFtOiAtMSxcbiAgICAgICAgdHlwZTogaW5mby50eXBlLFxuICAgICAgICBudW06IGluZm8ubnVtLFxuICAgICAgICBub3JtYWxpemU6IGluZm8ubm9ybWFsaXplID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGluZm8ubm9ybWFsaXplLFxuICAgICAgICBieXRlczogaW5mby5udW0gKiAoMCwgX2VudW1zLmF0dHJUeXBlQnl0ZXMpKGluZm8udHlwZSlcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2F0dHIyZWxbZWwubmFtZV0gPSBlbDtcbiAgICAgIHRoaXMuX2VsZW1lbnRzLnB1c2goZWwpO1xuXG4gICAgICB0aGlzLl9ieXRlcyArPSBlbC5ieXRlcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDAsIF9sZW4gPSB0aGlzLl9lbGVtZW50cy5sZW5ndGg7IF9pIDwgX2xlbjsgKytfaSkge1xuICAgICAgdmFyIF9lbCA9IHRoaXMuX2VsZW1lbnRzW19pXTtcbiAgICAgIF9lbC5zdHJpZGUgPSB0aGlzLl9ieXRlcztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBlbGVtZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyTmFtZVxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhWZXJ0ZXhGb3JtYXQsIFt7XG4gICAga2V5OiAnZWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVsZW1lbnQoYXR0ck5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hdHRyMmVsW2F0dHJOYW1lXTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmVydGV4Rm9ybWF0O1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBWZXJ0ZXhGb3JtYXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluWmxjblJsZUMxbWIzSnRZWFF1YW5NaVhTd2libUZ0WlhNaU9sc2lWbVZ5ZEdWNFJtOXliV0YwSWl3aWFXNW1iM01pTENKZllYUjBjakpsYkNJc0lsOWxiR1Z0Wlc1MGN5SXNJbDlpZVhSbGN5SXNJbWtpTENKc1pXNGlMQ0pzWlc1bmRHZ2lMQ0pwYm1adklpd2laV3dpTENKdVlXMWxJaXdpYjJabWMyVjBJaXdpYzNSeWFXUmxJaXdpYzNSeVpXRnRJaXdpZEhsd1pTSXNJbTUxYlNJc0ltNXZjbTFoYkdsNlpTSXNJblZ1WkdWbWFXNWxaQ0lzSW1KNWRHVnpJaXdpY0hWemFDSXNJbUYwZEhKT1lXMWxJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN1FVRkJRVHM3T3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3U1VGRmNVSkJMRms3UVVGRGJrSTdPenM3T3pzN096czdPMEZCVjBFc2QwSkJRVmxETEV0QlFWb3NSVUZCYlVJN1FVRkJRVHM3UVVGRGFrSXNVMEZCUzBNc1VVRkJUQ3hIUVVGblFpeEZRVUZvUWp0QlFVTkJMRk5CUVV0RExGTkJRVXdzUjBGQmFVSXNSVUZCYWtJN1FVRkRRU3hUUVVGTFF5eE5RVUZNTEVkQlFXTXNRMEZCWkRzN1FVRkZRU3hUUVVGTExFbEJRVWxETEVsQlFVa3NRMEZCVWl4RlFVRlhReXhOUVVGTlRDeE5RVUZOVFN4TlFVRTFRaXhGUVVGdlEwWXNTVUZCU1VNc1IwRkJlRU1zUlVGQk5rTXNSVUZCUlVRc1EwRkJMME1zUlVGQmEwUTdRVUZEYUVRc1ZVRkJTVWNzVDBGQlQxQXNUVUZCVFVrc1EwRkJUaXhEUVVGWU8wRkJRMEVzVlVGQlNVa3NTMEZCU3p0QlFVTlFReXhqUVVGTlJpeExRVUZMUlN4SlFVUktPMEZCUlZCRExHZENRVUZSTEV0QlFVdFFMRTFCUms0N1FVRkhVRkVzWjBKQlFWRXNRMEZJUkR0QlFVbFFReXhuUWtGQlVTeERRVUZETEVOQlNrWTdRVUZMVUVNc1kwRkJUVTRzUzBGQlMwMHNTVUZNU2p0QlFVMVFReXhoUVVGTFVDeExRVUZMVHl4SFFVNUlPMEZCVDFCRExHMUNRVUZaVWl4TFFVRkxVU3hUUVVGTUxFdEJRVzFDUXl4VFFVRndRaXhIUVVGcFF5eExRVUZxUXl4SFFVRjVRMVFzUzBGQlMxRXNVMEZRYkVRN1FVRlJVRVVzWlVGQlQxWXNTMEZCUzA4c1IwRkJUQ3hIUVVGWExEQkNRVUZqVUN4TFFVRkxUU3hKUVVGdVFqdEJRVkpZTEU5QlFWUTdPMEZCVjBFc1YwRkJTMW9zVVVGQlRDeERRVUZqVHl4SFFVRkhReXhKUVVGcVFpeEpRVUY1UWtRc1JVRkJla0k3UVVGRFFTeFhRVUZMVGl4VFFVRk1MRU5CUVdWblFpeEpRVUZtTEVOQlFXOUNWaXhGUVVGd1FqczdRVUZGUVN4WFFVRkxUQ3hOUVVGTUxFbEJRV1ZMTEVkQlFVZFRMRXRCUVd4Q08wRkJRMFE3TzBGQlJVUXNVMEZCU3l4SlFVRkpZaXhMUVVGSkxFTkJRVklzUlVGQlYwTXNUMEZCVFN4TFFVRkxTQ3hUUVVGTUxFTkJRV1ZKTEUxQlFYSkRMRVZCUVRaRFJpeExRVUZKUXl4SlFVRnFSQ3hGUVVGelJDeEZRVUZGUkN4RlFVRjRSQ3hGUVVFeVJEdEJRVU42UkN4VlFVRkpTU3hOUVVGTExFdEJRVXRPTEZOQlFVd3NRMEZCWlVVc1JVRkJaaXhEUVVGVU8wRkJRMEZKTEZWQlFVZEhMRTFCUVVnc1IwRkJXU3hMUVVGTFVpeE5RVUZxUWp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN096czdPelJDUVVsUlowSXNVU3hGUVVGVk8wRkJRMmhDTEdGQlFVOHNTMEZCUzJ4Q0xGRkJRVXdzUTBGQlkydENMRkZCUVdRc1EwRkJVRHRCUVVORU96czdPenM3YTBKQmFFUnJRbkJDTEZraUxDSm1hV3hsSWpvaWRtVnlkR1Y0TFdadmNtMWhkQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN0lHRjBkSEpVZVhCbFFubDBaWE1nZlNCbWNtOXRJQ2N1TDJWdWRXMXpKenRjYmx4dUx5OGdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmk4dklHVjRjRzl5ZEhOY2JpOHZJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRlpsY25SbGVFWnZjbTFoZENCN1hHNGdJQzhxS2x4dUlDQWdLaUJBWTI5dWMzUnlkV04wYjNKY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVYMGdhVzVtYjNOY2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ2JHVjBJSFpsY25SbGVFWnRkQ0E5SUc1bGR5QldaWEowWlhoR2IzSnRZWFFvVzF4dUlDQWdLaUFnSUhzZ2JtRnRaVG9nWjJaNExrRlVWRkpmVUU5VFNWUkpUMDRzSUhSNWNHVTZJR2RtZUM1QlZGUlNYMVJaVUVWZlJreFBRVlF6TWl3Z2JuVnRPaUF6SUgwc1hHNGdJQ0FxSUNBZ2V5QnVZVzFsT2lCblpuZ3VRVlJVVWw5VlZqQXNJSFI1Y0dVNklHZG1lQzVCVkZSU1gxUlpVRVZmUmt4UFFWUXpNaXdnYm5WdE9pQXlJSDBzWEc0Z0lDQXFJQ0FnZXlCdVlXMWxPaUJuWm5ndVFWUlVVbDlEVDB4UFVpd2dkSGx3WlRvZ1oyWjRMa0ZVVkZKZlZGbFFSVjlHVEU5QlZETXlMQ0J1ZFcwNklEUXNJRzV2Y20xaGJHbDZaVG9nZEhKMVpTQjlMRnh1SUNBZ0tpQmRLVnh1SUNBZ0tpOWNiaUFnWTI5dWMzUnlkV04wYjNJb2FXNW1iM01wSUh0Y2JpQWdJQ0IwYUdsekxsOWhkSFJ5TW1Wc0lEMGdlMzA3WEc0Z0lDQWdkR2hwY3k1ZlpXeGxiV1Z1ZEhNZ1BTQmJYVHRjYmlBZ0lDQjBhR2x6TGw5aWVYUmxjeUE5SURBN1hHNWNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYkdWdUlEMGdhVzVtYjNNdWJHVnVaM1JvT3lCcElEd2diR1Z1T3lBcksya3BJSHRjYmlBZ0lDQWdJR3hsZENCcGJtWnZJRDBnYVc1bWIzTmJhVjA3WEc0Z0lDQWdJQ0JzWlhRZ1pXd2dQU0I3WEc0Z0lDQWdJQ0FnSUc1aGJXVTZJR2x1Wm04dWJtRnRaU3hjYmlBZ0lDQWdJQ0FnYjJabWMyVjBPaUIwYUdsekxsOWllWFJsY3l4Y2JpQWdJQ0FnSUNBZ2MzUnlhV1JsT2lBd0xGeHVJQ0FnSUNBZ0lDQnpkSEpsWVcwNklDMHhMRnh1SUNBZ0lDQWdJQ0IwZVhCbE9pQnBibVp2TG5SNWNHVXNYRzRnSUNBZ0lDQWdJRzUxYlRvZ2FXNW1ieTV1ZFcwc1hHNGdJQ0FnSUNBZ0lHNXZjbTFoYkdsNlpUb2dLR2x1Wm04dWJtOXliV0ZzYVhwbElEMDlQU0IxYm1SbFptbHVaV1FwSUQ4Z1ptRnNjMlVnT2lCcGJtWnZMbTV2Y20xaGJHbDZaU3hjYmlBZ0lDQWdJQ0FnWW5sMFpYTTZJR2x1Wm04dWJuVnRJQ29nWVhSMGNsUjVjR1ZDZVhSbGN5aHBibVp2TG5SNWNHVXBMRnh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnZEdocGN5NWZZWFIwY2pKbGJGdGxiQzV1WVcxbFhTQTlJR1ZzTzF4dUlDQWdJQ0FnZEdocGN5NWZaV3hsYldWdWRITXVjSFZ6YUNobGJDazdYRzVjYmlBZ0lDQWdJSFJvYVhNdVgySjVkR1Z6SUNzOUlHVnNMbUo1ZEdWek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JzWlc0Z1BTQjBhR2x6TGw5bGJHVnRaVzUwY3k1c1pXNW5kR2c3SUdrZ1BDQnNaVzQ3SUNzcmFTa2dlMXh1SUNBZ0lDQWdiR1YwSUdWc0lEMGdkR2hwY3k1ZlpXeGxiV1Z1ZEhOYmFWMDdYRzRnSUNBZ0lDQmxiQzV6ZEhKcFpHVWdQU0IwYUdsekxsOWllWFJsY3p0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FHMWxkR2h2WkNCbGJHVnRaVzUwWEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQmhkSFJ5VG1GdFpWeHVJQ0FnS2k5Y2JpQWdaV3hsYldWdWRDaGhkSFJ5VG1GdFpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDloZEhSeU1tVnNXMkYwZEhKT1lXMWxYVHRjYmlBZ2ZWeHVmU0pkZlE9PSJdfQ==