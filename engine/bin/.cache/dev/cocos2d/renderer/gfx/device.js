(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/device.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _type2uniformCommit2, _type2uniformArrayCom;
        var _state = require('./state');
        var _state2 = _interopRequireDefault(_state);
        var _enums = require('./enums');
        var _texture2d = require('./texture-2d');
        var _texture2d2 = _interopRequireDefault(_texture2d);
        var _textureCube = require('./texture-cube');
        var _textureCube2 = _interopRequireDefault(_textureCube);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }
        var GL_INT = 5124;
        var GL_FLOAT = 5126;
        var GL_FLOAT_VEC2 = 35664;
        var GL_FLOAT_VEC3 = 35665;
        var GL_FLOAT_VEC4 = 35666;
        var GL_INT_VEC2 = 35667;
        var GL_INT_VEC3 = 35668;
        var GL_INT_VEC4 = 35669;
        var GL_BOOL = 35670;
        var GL_BOOL_VEC2 = 35671;
        var GL_BOOL_VEC3 = 35672;
        var GL_BOOL_VEC4 = 35673;
        var GL_FLOAT_MAT2 = 35674;
        var GL_FLOAT_MAT3 = 35675;
        var GL_FLOAT_MAT4 = 35676;
        var GL_SAMPLER_2D = 35678;
        var GL_SAMPLER_CUBE = 35680;
        var _type2uniformCommit = (_type2uniformCommit2 = {}, _defineProperty(_type2uniformCommit2, GL_INT, function (gl, id, value) {
            gl.uniform1i(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_FLOAT, function (gl, id, value) {
            gl.uniform1f(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_FLOAT_VEC2, function (gl, id, value) {
            gl.uniform2fv(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_FLOAT_VEC3, function (gl, id, value) {
            gl.uniform3fv(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_FLOAT_VEC4, function (gl, id, value) {
            gl.uniform4fv(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_INT_VEC2, function (gl, id, value) {
            gl.uniform2iv(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_INT_VEC3, function (gl, id, value) {
            gl.uniform3iv(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_INT_VEC4, function (gl, id, value) {
            gl.uniform4iv(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_BOOL, function (gl, id, value) {
            gl.uniform1i(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_BOOL_VEC2, function (gl, id, value) {
            gl.uniform2iv(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_BOOL_VEC3, function (gl, id, value) {
            gl.uniform3iv(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_BOOL_VEC4, function (gl, id, value) {
            gl.uniform4iv(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_FLOAT_MAT2, function (gl, id, value) {
            gl.uniformMatrix2fv(id, false, value);
        }), _defineProperty(_type2uniformCommit2, GL_FLOAT_MAT3, function (gl, id, value) {
            gl.uniformMatrix3fv(id, false, value);
        }), _defineProperty(_type2uniformCommit2, GL_FLOAT_MAT4, function (gl, id, value) {
            gl.uniformMatrix4fv(id, false, value);
        }), _defineProperty(_type2uniformCommit2, GL_SAMPLER_2D, function (gl, id, value) {
            gl.uniform1i(id, value);
        }), _defineProperty(_type2uniformCommit2, GL_SAMPLER_CUBE, function (gl, id, value) {
            gl.uniform1i(id, value);
        }), _type2uniformCommit2);
        var _type2uniformArrayCommit = (_type2uniformArrayCom = {}, _defineProperty(_type2uniformArrayCom, GL_INT, function (gl, id, value) {
            gl.uniform1iv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_FLOAT, function (gl, id, value) {
            gl.uniform1fv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_FLOAT_VEC2, function (gl, id, value) {
            gl.uniform2fv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_FLOAT_VEC3, function (gl, id, value) {
            gl.uniform3fv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_FLOAT_VEC4, function (gl, id, value) {
            gl.uniform4fv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_INT_VEC2, function (gl, id, value) {
            gl.uniform2iv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_INT_VEC3, function (gl, id, value) {
            gl.uniform3iv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_INT_VEC4, function (gl, id, value) {
            gl.uniform4iv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_BOOL, function (gl, id, value) {
            gl.uniform1iv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_BOOL_VEC2, function (gl, id, value) {
            gl.uniform2iv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_BOOL_VEC3, function (gl, id, value) {
            gl.uniform3iv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_BOOL_VEC4, function (gl, id, value) {
            gl.uniform4iv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_FLOAT_MAT2, function (gl, id, value) {
            gl.uniformMatrix2fv(id, false, value);
        }), _defineProperty(_type2uniformArrayCom, GL_FLOAT_MAT3, function (gl, id, value) {
            gl.uniformMatrix3fv(id, false, value);
        }), _defineProperty(_type2uniformArrayCom, GL_FLOAT_MAT4, function (gl, id, value) {
            gl.uniformMatrix4fv(id, false, value);
        }), _defineProperty(_type2uniformArrayCom, GL_SAMPLER_2D, function (gl, id, value) {
            gl.uniform1iv(id, value);
        }), _defineProperty(_type2uniformArrayCom, GL_SAMPLER_CUBE, function (gl, id, value) {
            gl.uniform1iv(id, value);
        }), _type2uniformArrayCom);
        function _commitBlendStates(gl, cur, next) {
            if (cur.blend !== next.blend) {
                if (!next.blend) {
                    gl.disable(gl.BLEND);
                    return;
                }
                gl.enable(gl.BLEND);
                if (next.blendSrc === _enums.enums.BLEND_CONSTANT_COLOR || next.blendSrc === _enums.enums.BLEND_ONE_MINUS_CONSTANT_COLOR || next.blendDst === _enums.enums.BLEND_CONSTANT_COLOR || next.blendDst === _enums.enums.BLEND_ONE_MINUS_CONSTANT_COLOR) {
                    gl.blendColor((next.blendColor >> 24) / 255, (next.blendColor >> 16 & 255) / 255, (next.blendColor >> 8 & 255) / 255, (next.blendColor & 255) / 255);
                }
                if (next.blendSep) {
                    gl.blendFuncSeparate(next.blendSrc, next.blendDst, next.blendSrcAlpha, next.blendDstAlpha);
                    gl.blendEquationSeparate(next.blendEq, next.blendAlphaEq);
                } else {
                    gl.blendFunc(next.blendSrc, next.blendDst);
                    gl.blendEquation(next.blendEq);
                }
                return;
            }
            if (next.blend === false) {
                return;
            }
            if (cur.blendColor !== next.blendColor) {
                gl.blendColor((next.blendColor >> 24) / 255, (next.blendColor >> 16 & 255) / 255, (next.blendColor >> 8 & 255) / 255, (next.blendColor & 255) / 255);
            }
            if (cur.blendSep !== next.blendSep) {
                if (next.blendSep) {
                    gl.blendFuncSeparate(next.blendSrc, next.blendDst, next.blendSrcAlpha, next.blendDstAlpha);
                    gl.blendEquationSeparate(next.blendEq, next.blendAlphaEq);
                } else {
                    gl.blendFunc(next.blendSrc, next.blendDst);
                    gl.blendEquation(next.blendEq);
                }
                return;
            }
            if (next.blendSep) {
                if (cur.blendSrc !== next.blendSrc || cur.blendDst !== next.blendDst || cur.blendSrcAlpha !== next.blendSrcAlpha || cur.blendDstAlpha !== next.blendDstAlpha) {
                    gl.blendFuncSeparate(next.blendSrc, next.blendDst, next.blendSrcAlpha, next.blendDstAlpha);
                }
                if (cur.blendEq !== next.blendEq || cur.blendAlphaEq !== next.blendAlphaEq) {
                    gl.blendEquationSeparate(next.blendEq, next.blendAlphaEq);
                }
            } else {
                if (cur.blendSrc !== next.blendSrc || cur.blendDst !== next.blendDst) {
                    gl.blendFunc(next.blendSrc, next.blendDst);
                }
                if (cur.blendEq !== next.blendEq) {
                    gl.blendEquation(next.blendEq);
                }
            }
        }
        function _commitDepthStates(gl, cur, next) {
            if (cur.depthTest !== next.depthTest) {
                if (!next.depthTest) {
                    gl.disable(gl.DEPTH_TEST);
                    return;
                }
                gl.enable(gl.DEPTH_TEST);
                gl.depthFunc(next.depthFunc);
                gl.depthMask(next.depthWrite);
                return;
            }
            if (cur.depthWrite !== next.depthWrite) {
                gl.depthMask(next.depthWrite);
            }
            if (next.depthTest === false) {
                if (next.depthWrite) {
                    next.depthTest = true;
                    next.depthFunc = _enums.enums.DS_FUNC_ALWAYS;
                    gl.enable(gl.DEPTH_TEST);
                    gl.depthFunc(next.depthFunc);
                }
                return;
            }
            if (cur.depthFunc !== next.depthFunc) {
                gl.depthFunc(next.depthFunc);
            }
        }
        function _commitStencilStates(gl, cur, next) {
            if (next.stencilTest === _enums.enums.STENCIL_INHERIT) {
                return;
            }
            if (next.stencilTest !== cur.stencilTest) {
                if (next.stencilTest === _enums.enums.STENCIL_DISABLE) {
                    gl.disable(gl.STENCIL_TEST);
                    return;
                }
                gl.enable(gl.STENCIL_TEST);
                if (next.stencilSep) {
                    gl.stencilFuncSeparate(gl.FRONT, next.stencilFuncFront, next.stencilRefFront, next.stencilMaskFront);
                    gl.stencilMaskSeparate(gl.FRONT, next.stencilWriteMaskFront);
                    gl.stencilOpSeparate(gl.FRONT, next.stencilFailOpFront, next.stencilZFailOpFront, next.stencilZPassOpFront);
                    gl.stencilFuncSeparate(gl.BACK, next.stencilFuncBack, next.stencilRefBack, next.stencilMaskBack);
                    gl.stencilMaskSeparate(gl.BACK, next.stencilWriteMaskBack);
                    gl.stencilOpSeparate(gl.BACK, next.stencilFailOpBack, next.stencilZFailOpBack, next.stencilZPassOpBack);
                } else {
                    gl.stencilFunc(next.stencilFuncFront, next.stencilRefFront, next.stencilMaskFront);
                    gl.stencilMask(next.stencilWriteMaskFront);
                    gl.stencilOp(next.stencilFailOpFront, next.stencilZFailOpFront, next.stencilZPassOpFront);
                }
                return;
            }
            if (next.stencilTest === _enums.enums.STENCIL_DISABLE) {
                return;
            }
            if (cur.stencilSep !== next.stencilSep) {
                if (next.stencilSep) {
                    gl.stencilFuncSeparate(gl.FRONT, next.stencilFuncFront, next.stencilRefFront, next.stencilMaskFront);
                    gl.stencilMaskSeparate(gl.FRONT, next.stencilWriteMaskFront);
                    gl.stencilOpSeparate(gl.FRONT, next.stencilFailOpFront, next.stencilZFailOpFront, next.stencilZPassOpFront);
                    gl.stencilFuncSeparate(gl.BACK, next.stencilFuncBack, next.stencilRefBack, next.stencilMaskBack);
                    gl.stencilMaskSeparate(gl.BACK, next.stencilWriteMaskBack);
                    gl.stencilOpSeparate(gl.BACK, next.stencilFailOpBack, next.stencilZFailOpBack, next.stencilZPassOpBack);
                } else {
                    gl.stencilFunc(next.stencilFuncFront, next.stencilRefFront, next.stencilMaskFront);
                    gl.stencilMask(next.stencilWriteMaskFront);
                    gl.stencilOp(next.stencilFailOpFront, next.stencilZFailOpFront, next.stencilZPassOpFront);
                }
                return;
            }
            if (next.stencilSep) {
                if (cur.stencilFuncFront !== next.stencilFuncFront || cur.stencilRefFront !== next.stencilRefFront || cur.stencilMaskFront !== next.stencilMaskFront) {
                    gl.stencilFuncSeparate(gl.FRONT, next.stencilFuncFront, next.stencilRefFront, next.stencilMaskFront);
                }
                if (cur.stencilWriteMaskFront !== next.stencilWriteMaskFront) {
                    gl.stencilMaskSeparate(gl.FRONT, next.stencilWriteMaskFront);
                }
                if (cur.stencilFailOpFront !== next.stencilFailOpFront || cur.stencilZFailOpFront !== next.stencilZFailOpFront || cur.stencilZPassOpFront !== next.stencilZPassOpFront) {
                    gl.stencilOpSeparate(gl.FRONT, next.stencilFailOpFront, next.stencilZFailOpFront, next.stencilZPassOpFront);
                }
                if (cur.stencilFuncBack !== next.stencilFuncBack || cur.stencilRefBack !== next.stencilRefBack || cur.stencilMaskBack !== next.stencilMaskBack) {
                    gl.stencilFuncSeparate(gl.BACK, next.stencilFuncBack, next.stencilRefBack, next.stencilMaskBack);
                }
                if (cur.stencilWriteMaskBack !== next.stencilWriteMaskBack) {
                    gl.stencilMaskSeparate(gl.BACK, next.stencilWriteMaskBack);
                }
                if (cur.stencilFailOpBack !== next.stencilFailOpBack || cur.stencilZFailOpBack !== next.stencilZFailOpBack || cur.stencilZPassOpBack !== next.stencilZPassOpBack) {
                    gl.stencilOpSeparate(gl.BACK, next.stencilFailOpBack, next.stencilZFailOpBack, next.stencilZPassOpBack);
                }
            } else {
                if (cur.stencilFuncFront !== next.stencilFuncFront || cur.stencilRefFront !== next.stencilRefFront || cur.stencilMaskFront !== next.stencilMaskFront) {
                    gl.stencilFunc(next.stencilFuncFront, next.stencilRefFront, next.stencilMaskFront);
                }
                if (cur.stencilWriteMaskFront !== next.stencilWriteMaskFront) {
                    gl.stencilMask(next.stencilWriteMaskFront);
                }
                if (cur.stencilFailOpFront !== next.stencilFailOpFront || cur.stencilZFailOpFront !== next.stencilZFailOpFront || cur.stencilZPassOpFront !== next.stencilZPassOpFront) {
                    gl.stencilOp(next.stencilFailOpFront, next.stencilZFailOpFront, next.stencilZPassOpFront);
                }
            }
        }
        function _commitCullMode(gl, cur, next) {
            if (cur.cullMode === next.cullMode) {
                return;
            }
            if (next.cullMode === _enums.enums.CULL_NONE) {
                gl.disable(gl.CULL_FACE);
                return;
            }
            gl.enable(gl.CULL_FACE);
            gl.cullFace(next.cullMode);
        }
        function _commitVertexBuffers(device, gl, cur, next) {
            var attrsDirty = false;
            if (next.maxStream === -1) {
                return;
            }
            if (cur.maxStream !== next.maxStream) {
                attrsDirty = true;
            } else if (cur.program !== next.program) {
                attrsDirty = true;
            } else {
                for (var i = 0; i < next.maxStream + 1; ++i) {
                    if (cur.vertexBuffers[i] !== next.vertexBuffers[i] || cur.vertexBufferOffsets[i] !== next.vertexBufferOffsets[i]) {
                        attrsDirty = true;
                        break;
                    }
                }
            }
            if (attrsDirty) {
                for (var _i = 0; _i < device._caps.maxVertexAttribs; ++_i) {
                    device._newAttributes[_i] = 0;
                }
                for (var _i2 = 0; _i2 < next.maxStream + 1; ++_i2) {
                    var vb = next.vertexBuffers[_i2];
                    var vbOffset = next.vertexBufferOffsets[_i2];
                    if (!vb || vb._glID === -1) {
                        continue;
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, vb._glID);
                    for (var j = 0; j < next.program._attributes.length; ++j) {
                        var attr = next.program._attributes[j];
                        var el = vb._format.element(attr.name);
                        if (!el) {
                            console.warn('Can not find vertex attribute: ' + attr.name);
                            continue;
                        }
                        if (device._enabledAttributes[attr.location] === 0) {
                            gl.enableVertexAttribArray(attr.location);
                            device._enabledAttributes[attr.location] = 1;
                        }
                        device._newAttributes[attr.location] = 1;
                        gl.vertexAttribPointer(attr.location, el.num, el.type, el.normalize, el.stride, el.offset + vbOffset * el.stride);
                    }
                }
                for (var _i3 = 0; _i3 < device._caps.maxVertexAttribs; ++_i3) {
                    if (device._enabledAttributes[_i3] !== device._newAttributes[_i3]) {
                        gl.disableVertexAttribArray(_i3);
                        device._enabledAttributes[_i3] = 0;
                    }
                }
            }
        }
        function _commitTextures(gl, cur, next) {
            for (var i = 0; i < next.maxTextureSlot + 1; ++i) {
                if (cur.textureUnits[i] !== next.textureUnits[i]) {
                    var texture = next.textureUnits[i];
                    if (texture && texture._glID !== -1) {
                        gl.activeTexture(gl.TEXTURE0 + i);
                        gl.bindTexture(texture._target, texture._glID);
                    }
                }
            }
        }
        function _attach(gl, location, attachment) {
            var face = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            if (attachment instanceof _texture2d2.default) {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, location, gl.TEXTURE_2D, attachment._glID, 0);
            } else if (attachment instanceof _textureCube2.default) {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, location, gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, attachment._glID, 0);
            } else {
                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, location, gl.RENDERBUFFER, attachment._glID);
            }
        }
        var Device = function () {
            _createClass(Device, [{
                    key: 'caps',
                    get: function get() {
                        return this._caps;
                    }
                }]);
            function Device(canvasEL, opts) {
                _classCallCheck(this, Device);
                var gl = void 0;
                opts = opts || {};
                if (opts.alpha === undefined) {
                    opts.alpha = false;
                }
                if (opts.stencil === undefined) {
                    opts.stencil = true;
                }
                if (opts.depth === undefined) {
                    opts.depth = true;
                }
                if (opts.antialias === undefined) {
                    opts.antialias = false;
                }
                if (opts.preserveDrawingBuffer === undefined) {
                    opts.preserveDrawingBuffer = false;
                }
                try {
                    gl = canvasEL.getContext('webgl', opts) || canvasEL.getContext('experimental-webgl', opts) || canvasEL.getContext('webkit-3d', opts) || canvasEL.getContext('moz-webgl', opts);
                } catch (err) {
                    console.error(err);
                    return;
                }
                if (!gl) {
                    console.error('This device does not support webgl');
                }
                this._gl = gl;
                this._extensions = {};
                this._caps = {};
                this._stats = {
                    texture: 0,
                    vb: 0,
                    ib: 0,
                    drawcalls: 0
                };
                this._initExtensions([
                    'EXT_texture_filter_anisotropic',
                    'EXT_shader_texture_lod',
                    'OES_standard_derivatives',
                    'OES_texture_float',
                    'OES_texture_float_linear',
                    'OES_texture_half_float',
                    'OES_texture_half_float_linear',
                    'OES_vertex_array_object',
                    'WEBGL_compressed_texture_atc',
                    'WEBGL_compressed_texture_etc',
                    'WEBGL_compressed_texture_etc1',
                    'WEBGL_compressed_texture_pvrtc',
                    'WEBGL_compressed_texture_s3tc',
                    'WEBGL_depth_texture',
                    'WEBGL_draw_buffers'
                ]);
                this._initCaps();
                this._initStates();
                _state2.default.initDefault(this);
                this._current = new _state2.default(this);
                this._next = new _state2.default(this);
                this._uniforms = {};
                this._vx = this._vy = this._vw = this._vh = 0;
                this._sx = this._sy = this._sw = this._sh = 0;
                this._framebuffer = null;
                this._enabledAttributes = new Array(this._caps.maxVertexAttribs);
                this._newAttributes = new Array(this._caps.maxVertexAttribs);
                for (var i = 0; i < this._caps.maxVertexAttribs; ++i) {
                    this._enabledAttributes[i] = 0;
                    this._newAttributes[i] = 0;
                }
            }
            _createClass(Device, [
                {
                    key: '_initExtensions',
                    value: function _initExtensions(extensions) {
                        var gl = this._gl;
                        for (var i = 0; i < extensions.length; ++i) {
                            var name = extensions[i];
                            var vendorPrefixes = [
                                '',
                                'WEBKIT_',
                                'MOZ_'
                            ];
                            for (var j = 0; j < vendorPrefixes.length; j++) {
                                try {
                                    var ext = gl.getExtension(vendorPrefixes[j] + name);
                                    if (ext) {
                                        this._extensions[name] = ext;
                                        break;
                                    }
                                } catch (e) {
                                    console.error(e);
                                }
                            }
                        }
                    }
                },
                {
                    key: '_initCaps',
                    value: function _initCaps() {
                        var gl = this._gl;
                        var extDrawBuffers = this.ext('WEBGL_draw_buffers');
                        this._caps.maxVertexStreams = 4;
                        this._caps.maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
                        this._caps.maxFragUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
                        this._caps.maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
                        this._caps.maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
                        this._caps.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
                        this._caps.maxDrawBuffers = extDrawBuffers ? gl.getParameter(extDrawBuffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
                        this._caps.maxColorAttachments = extDrawBuffers ? gl.getParameter(extDrawBuffers.MAX_COLOR_ATTACHMENTS_WEBGL) : 1;
                    }
                },
                {
                    key: '_initStates',
                    value: function _initStates() {
                        var gl = this._gl;
                        gl.disable(gl.BLEND);
                        gl.blendFunc(gl.ONE, gl.ZERO);
                        gl.blendEquation(gl.FUNC_ADD);
                        gl.blendColor(1, 1, 1, 1);
                        gl.colorMask(true, true, true, true);
                        gl.enable(gl.CULL_FACE);
                        gl.cullFace(gl.BACK);
                        gl.disable(gl.DEPTH_TEST);
                        gl.depthFunc(gl.LESS);
                        gl.depthMask(false);
                        gl.disable(gl.POLYGON_OFFSET_FILL);
                        gl.depthRange(0, 1);
                        gl.disable(gl.STENCIL_TEST);
                        gl.stencilFunc(gl.ALWAYS, 0, 255);
                        gl.stencilMask(255);
                        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
                        gl.clearDepth(1);
                        gl.clearColor(0, 0, 0, 0);
                        gl.clearStencil(0);
                        gl.disable(gl.SCISSOR_TEST);
                    }
                },
                {
                    key: '_restoreTexture',
                    value: function _restoreTexture(unit) {
                        var gl = this._gl;
                        var texture = this._current.textureUnits[unit];
                        if (texture && texture._glID !== -1) {
                            gl.bindTexture(texture._target, texture._glID);
                        } else {
                            gl.bindTexture(gl.TEXTURE_2D, null);
                        }
                    }
                },
                {
                    key: '_restoreIndexBuffer',
                    value: function _restoreIndexBuffer() {
                        var gl = this._gl;
                        var ib = this._current.indexBuffer;
                        if (ib && ib._glID !== -1) {
                            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ib._glID);
                        } else {
                            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
                        }
                    }
                },
                {
                    key: 'ext',
                    value: function ext(name) {
                        return this._extensions[name];
                    }
                },
                {
                    key: 'allowFloatTexture',
                    value: function allowFloatTexture() {
                        return this.ext('OES_texture_float') != null;
                    }
                },
                {
                    key: 'setFrameBuffer',
                    value: function setFrameBuffer(fb) {
                        if (this._framebuffer === fb) {
                            return;
                        }
                        this._framebuffer = fb;
                        var gl = this._gl;
                        if (fb === null) {
                            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
                            return;
                        }
                        gl.bindFramebuffer(gl.FRAMEBUFFER, fb._glID);
                        var numColors = fb._colors.length;
                        for (var i = 0; i < numColors; ++i) {
                            var colorBuffer = fb._colors[i];
                            _attach(gl, gl.COLOR_ATTACHMENT0 + i, colorBuffer);
                        }
                        for (var _i4 = numColors; _i4 < this._caps.maxColorAttachments; ++_i4) {
                            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i4, gl.TEXTURE_2D, null, 0);
                        }
                        if (fb._depth) {
                            _attach(gl, gl.DEPTH_ATTACHMENT, fb._depth);
                        }
                        if (fb._stencil) {
                            _attach(gl, gl.STENCIL_ATTACHMENT, fb._stencil);
                        }
                        if (fb._depthStencil) {
                            _attach(gl, gl.DEPTH_STENCIL_ATTACHMENT, fb._depthStencil);
                        }
                    }
                },
                {
                    key: 'setViewport',
                    value: function setViewport(x, y, w, h) {
                        if (this._vx !== x || this._vy !== y || this._vw !== w || this._vh !== h) {
                            this._gl.viewport(x, y, w, h);
                            this._vx = x;
                            this._vy = y;
                            this._vw = w;
                            this._vh = h;
                        }
                    }
                },
                {
                    key: 'setScissor',
                    value: function setScissor(x, y, w, h) {
                        if (this._sx !== x || this._sy !== y || this._sw !== w || this._sh !== h) {
                            this._gl.scissor(x, y, w, h);
                            this._sx = x;
                            this._sy = y;
                            this._sw = w;
                            this._sh = h;
                        }
                    }
                },
                {
                    key: 'clear',
                    value: function clear(opts) {
                        if (opts.color === undefined && opts.depth === undefined && opts.stencil === undefined) {
                            return;
                        }
                        var gl = this._gl;
                        var flags = 0;
                        if (opts.color !== undefined) {
                            flags |= gl.COLOR_BUFFER_BIT;
                            gl.clearColor(opts.color[0], opts.color[1], opts.color[2], opts.color[3]);
                        }
                        if (opts.depth !== undefined) {
                            flags |= gl.DEPTH_BUFFER_BIT;
                            gl.clearDepth(opts.depth);
                            gl.enable(gl.DEPTH_TEST);
                            gl.depthMask(true);
                            gl.depthFunc(gl.ALWAYS);
                        }
                        if (opts.stencil !== undefined) {
                            flags |= gl.STENCIL_BUFFER_BIT;
                            gl.clearStencil(opts.stencil);
                        }
                        gl.clear(flags);
                        if (opts.depth !== undefined) {
                            if (this._current.depthTest === false) {
                                gl.disable(gl.DEPTH_TEST);
                            } else {
                                if (this._current.depthWrite === false) {
                                    gl.depthMask(false);
                                }
                                if (this._current.depthFunc !== _enums.enums.DS_FUNC_ALWAYS) {
                                    gl.depthFunc(this._current.depthFunc);
                                }
                            }
                        }
                    }
                },
                {
                    key: 'enableBlend',
                    value: function enableBlend() {
                        this._next.blend = true;
                    }
                },
                {
                    key: 'enableDepthTest',
                    value: function enableDepthTest() {
                        this._next.depthTest = true;
                    }
                },
                {
                    key: 'enableDepthWrite',
                    value: function enableDepthWrite() {
                        this._next.depthWrite = true;
                    }
                },
                {
                    key: 'setStencilTest',
                    value: function setStencilTest(stencilTest) {
                        this._next.stencilTest = stencilTest;
                    }
                },
                {
                    key: 'setStencilFunc',
                    value: function setStencilFunc(func, ref, mask) {
                        this._next.stencilSep = false;
                        this._next.stencilFuncFront = this._next.stencilFuncBack = func;
                        this._next.stencilRefFront = this._next.stencilRefBack = ref;
                        this._next.stencilMaskFront = this._next.stencilMaskBack = mask;
                    }
                },
                {
                    key: 'setStencilFuncFront',
                    value: function setStencilFuncFront(func, ref, mask) {
                        this._next.stencilSep = true;
                        this._next.stencilFuncFront = func;
                        this._next.stencilRefFront = ref;
                        this._next.stencilMaskFront = mask;
                    }
                },
                {
                    key: 'setStencilFuncBack',
                    value: function setStencilFuncBack(func, ref, mask) {
                        this._next.stencilSep = true;
                        this._next.stencilFuncBack = func;
                        this._next.stencilRefBack = ref;
                        this._next.stencilMaskBack = mask;
                    }
                },
                {
                    key: 'setStencilOp',
                    value: function setStencilOp(failOp, zFailOp, zPassOp, writeMask) {
                        this._next.stencilFailOpFront = this._next.stencilFailOpBack = failOp;
                        this._next.stencilZFailOpFront = this._next.stencilZFailOpBack = zFailOp;
                        this._next.stencilZPassOpFront = this._next.stencilZPassOpBack = zPassOp;
                        this._next.stencilWriteMaskFront = this._next.stencilWriteMaskBack = writeMask;
                    }
                },
                {
                    key: 'setStencilOpFront',
                    value: function setStencilOpFront(failOp, zFailOp, zPassOp, writeMask) {
                        this._next.stencilSep = true;
                        this._next.stencilFailOpFront = failOp;
                        this._next.stencilZFailOpFront = zFailOp;
                        this._next.stencilZPassOpFront = zPassOp;
                        this._next.stencilWriteMaskFront = writeMask;
                    }
                },
                {
                    key: 'setStencilOpBack',
                    value: function setStencilOpBack(failOp, zFailOp, zPassOp, writeMask) {
                        this._next.stencilSep = true;
                        this._next.stencilFailOpBack = failOp;
                        this._next.stencilZFailOpBack = zFailOp;
                        this._next.stencilZPassOpBack = zPassOp;
                        this._next.stencilWriteMaskBack = writeMask;
                    }
                },
                {
                    key: 'setDepthFunc',
                    value: function setDepthFunc(depthFunc) {
                        this._next.depthFunc = depthFunc;
                    }
                },
                {
                    key: 'setBlendColor32',
                    value: function setBlendColor32(rgba) {
                        this._next.blendColor = rgba;
                    }
                },
                {
                    key: 'setBlendColor',
                    value: function setBlendColor(r, g, b, a) {
                        this._next.blendColor = (r * 255 << 24 | g * 255 << 16 | b * 255 << 8 | a * 255) >>> 0;
                    }
                },
                {
                    key: 'setBlendFunc',
                    value: function setBlendFunc(src, dst) {
                        this._next.blendSep = false;
                        this._next.blendSrc = src;
                        this._next.blendDst = dst;
                    }
                },
                {
                    key: 'setBlendFuncSep',
                    value: function setBlendFuncSep(src, dst, srcAlpha, dstAlpha) {
                        this._next.blendSep = true;
                        this._next.blendSrc = src;
                        this._next.blendDst = dst;
                        this._next.blendSrcAlpha = srcAlpha;
                        this._next.blendDstAlpha = dstAlpha;
                    }
                },
                {
                    key: 'setBlendEq',
                    value: function setBlendEq(eq) {
                        this._next.blendSep = false;
                        this._next.blendEq = eq;
                    }
                },
                {
                    key: 'setBlendEqSep',
                    value: function setBlendEqSep(eq, alphaEq) {
                        this._next.blendSep = true;
                        this._next.blendEq = eq;
                        this._next.blendAlphaEq = alphaEq;
                    }
                },
                {
                    key: 'setCullMode',
                    value: function setCullMode(mode) {
                        this._next.cullMode = mode;
                    }
                },
                {
                    key: 'setVertexBuffer',
                    value: function setVertexBuffer(stream, buffer) {
                        var start = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        this._next.vertexBuffers[stream] = buffer;
                        this._next.vertexBufferOffsets[stream] = start;
                        if (this._next.maxStream < stream) {
                            this._next.maxStream = stream;
                        }
                    }
                },
                {
                    key: 'setIndexBuffer',
                    value: function setIndexBuffer(buffer) {
                        this._next.indexBuffer = buffer;
                    }
                },
                {
                    key: 'setProgram',
                    value: function setProgram(program) {
                        this._next.program = program;
                    }
                },
                {
                    key: 'setTexture',
                    value: function setTexture(name, texture, slot) {
                        if (slot >= this._caps.maxTextureUnits) {
                            console.warn('Can not set texture ' + name + ' at stage ' + slot + ', max texture exceed: ' + this._caps.maxTextureUnits);
                            return;
                        }
                        this._next.textureUnits[slot] = texture;
                        this.setUniform(name, slot);
                        if (this._next.maxTextureSlot < slot) {
                            this._next.maxTextureSlot = slot;
                        }
                    }
                },
                {
                    key: 'setTextureArray',
                    value: function setTextureArray(name, textures, slots) {
                        var len = textures.length;
                        if (len >= this._caps.maxTextureUnits) {
                            console.warn('Can not set ' + len + ' textures for ' + name + ', max texture exceed: ' + this._caps.maxTextureUnits);
                            return;
                        }
                        for (var i = 0; i < len; ++i) {
                            var slot = slots[i];
                            this._next.textureUnits[slot] = textures[i];
                        }
                        this.setUniform(name, slots);
                    }
                },
                {
                    key: 'setUniform',
                    value: function setUniform(name, value) {
                        var uniform = this._uniforms[name];
                        var sameType = false;
                        var isArray = false, isFloat32Array = false, isInt32Array = false;
                        do {
                            if (!uniform) {
                                break;
                            }
                            isFloat32Array = Array.isArray(value) || value instanceof Float32Array;
                            isInt32Array = value instanceof Int32Array;
                            isArray = isFloat32Array || isInt32Array;
                            if (uniform.isArray !== isArray) {
                                break;
                            }
                            if (uniform.isArray && uniform.value.length !== value.length) {
                                break;
                            }
                            sameType = true;
                        } while (false);
                        if (!sameType) {
                            var newValue = value;
                            if (isFloat32Array) {
                                newValue = new Float32Array(value);
                            } else if (isInt32Array) {
                                newValue = new Int32Array(value);
                            }
                            uniform = {
                                dirty: true,
                                value: newValue,
                                isArray: isArray
                            };
                        } else {
                            var oldValue = uniform.value;
                            var dirty = false;
                            if (uniform.isArray) {
                                for (var i = 0, l = oldValue.length; i < l; i++) {
                                    if (oldValue[i] !== value[i]) {
                                        dirty = true;
                                        oldValue[i] = value[i];
                                    }
                                }
                            } else {
                                if (oldValue !== value) {
                                    dirty = true;
                                    uniform.value = value;
                                }
                            }
                            if (dirty) {
                                uniform.dirty = true;
                            }
                        }
                        this._uniforms[name] = uniform;
                    }
                },
                {
                    key: 'setUniformDirectly',
                    value: function setUniformDirectly(name, value) {
                        var uniform = this._uniforms[name];
                        if (!uniform) {
                            this._uniforms[name] = uniform = {};
                        }
                        uniform.dirty = true;
                        uniform.value = value;
                    }
                },
                {
                    key: 'setPrimitiveType',
                    value: function setPrimitiveType(type) {
                        this._next.primitiveType = type;
                    }
                },
                {
                    key: 'draw',
                    value: function draw(base, count) {
                        var gl = this._gl;
                        var cur = this._current;
                        var next = this._next;
                        _commitBlendStates(gl, cur, next);
                        _commitDepthStates(gl, cur, next);
                        _commitStencilStates(gl, cur, next);
                        _commitCullMode(gl, cur, next);
                        _commitVertexBuffers(this, gl, cur, next);
                        if (cur.indexBuffer !== next.indexBuffer) {
                            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, next.indexBuffer && next.indexBuffer._glID !== -1 ? next.indexBuffer._glID : null);
                        }
                        var programDirty = false;
                        if (cur.program !== next.program) {
                            if (next.program._linked) {
                                gl.useProgram(next.program._glID);
                            } else {
                                console.warn('Failed to use program: has not linked yet.');
                            }
                            programDirty = true;
                        }
                        _commitTextures(gl, cur, next);
                        for (var i = 0; i < next.program._uniforms.length; ++i) {
                            var uniformInfo = next.program._uniforms[i];
                            var uniform = this._uniforms[uniformInfo.name];
                            if (!uniform) {
                                continue;
                            }
                            if (!programDirty && !uniform.dirty) {
                                continue;
                            }
                            uniform.dirty = false;
                            var commitFunc = uniformInfo.size === undefined ? _type2uniformCommit[uniformInfo.type] : _type2uniformArrayCommit[uniformInfo.type];
                            if (!commitFunc) {
                                console.warn('Can not find commit function for uniform ' + uniformInfo.name);
                                continue;
                            }
                            commitFunc(gl, uniformInfo.location, uniform.value);
                        }
                        if (count) {
                            if (next.indexBuffer) {
                                gl.drawElements(this._next.primitiveType, count, next.indexBuffer._format, base * next.indexBuffer._bytesPerIndex);
                            } else {
                                gl.drawArrays(this._next.primitiveType, base, count);
                            }
                        }
                        this._stats.drawcalls += 1;
                        cur.set(next);
                        next.reset();
                    }
                }
            ]);
            return Device;
        }();
        exports.default = Device;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,