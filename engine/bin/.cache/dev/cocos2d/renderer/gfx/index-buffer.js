(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/index-buffer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _enums = require('./enums');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var IndexBuffer = function () {
            function IndexBuffer(device, format, usage, data, numIndices) {
                _classCallCheck(this, IndexBuffer);
                this._device = device;
                this._format = format;
                this._usage = usage;
                this._numIndices = numIndices;
                this._bytesPerIndex = 0;
                if (format === _enums.enums.INDEX_FMT_UINT8) {
                    this._bytesPerIndex = 1;
                } else if (format === _enums.enums.INDEX_FMT_UINT16) {
                    this._bytesPerIndex = 2;
                } else if (format === _enums.enums.INDEX_FMT_UINT32) {
                    this._bytesPerIndex = 4;
                }
                this._bytes = this._bytesPerIndex * numIndices;
                this._glID = device._gl.createBuffer();
                this.update(0, data);
                device._stats.ib += this._bytes;
            }
            _createClass(IndexBuffer, [
                {
                    key: 'destroy',
                    value: function destroy() {
                        if (this._glID === -1) {
                            console.error('The buffer already destroyed');
                            return;
                        }
                        var gl = this._device._gl;
                        gl.deleteBuffer(this._glID);
                        this._device._stats.ib -= this.bytes;
                        this._glID = -1;
                    }
                },
                {
                    key: 'update',
                    value: function update(offset, data) {
                        if (this._glID === -1) {
                            console.error('The buffer is destroyed');
                            return;
                        }
                        if (data && data.byteLength + offset > this._bytes) {
                            console.error('Failed to update data, bytes exceed.');
                            return;
                        }
                        var gl = this._device._gl;
                        var glUsage = this._usage;
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._glID);
                        if (!data) {
                            if (this._bytes) {
                                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._bytes, glUsage);
                            } else {
                                console.warn('bufferData should not submit 0 bytes data');
                            }
                        } else {
                            if (offset) {
                                gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, offset, data);
                            } else {
                                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, glUsage);
                            }
                        }
                        this._device._restoreIndexBuffer();
                    }
                },
                {
                    key: 'count',
                    get: function get() {
                        return this._numIndices;
                    }
                }
            ]);
            return IndexBuffer;
        }();
        exports.default = IndexBuffer;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,