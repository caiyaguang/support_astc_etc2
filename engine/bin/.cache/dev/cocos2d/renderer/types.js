(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/types.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.ctor2enums = exports.enums2ctor = exports.ctor2default = undefined;
        var _ctor2default, _enums2ctor, _ctor2enums;
        var _enums = require('./enums');
        var _enums2 = _interopRequireDefault(_enums);
        var _valueTypes = require('../core/value-types');
        var _CCTexture2D = require('../core/assets/CCTexture2D');
        var _CCTexture2D2 = _interopRequireDefault(_CCTexture2D);
        var _texture2d = require('./gfx/texture-2d');
        var _texture2d2 = _interopRequireDefault(_texture2d);
        var _textureCube = require('./gfx/texture-cube');
        var _textureCube2 = _interopRequireDefault(_textureCube);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }
        var CCObject = cc.Object;
        var ctor2default = exports.ctor2default = (_ctor2default = {}, _defineProperty(_ctor2default, Number, function (v) {
            return v || 0;
        }), _defineProperty(_ctor2default, Boolean, function (v) {
            return v || false;
        }), _defineProperty(_ctor2default, _valueTypes.Vec2, function (v) {
            return v ? cc.v2(v[0], v[1]) : cc.v2();
        }), _defineProperty(_ctor2default, _valueTypes.Vec3, function (v) {
            return v ? cc.v3(v[0], v[1], v[2]) : cc.v3();
        }), _defineProperty(_ctor2default, _valueTypes.Vec4, function (v) {
            return v ? cc.v4(v[0], v[1], v[2], v[3]) : cc.v4();
        }), _defineProperty(_ctor2default, _valueTypes.Color, function (v) {
            return v ? cc.color(v[0] * 255, v[1] * 255, v[2] * 255, (v[3] || 1) * 255) : cc.color();
        }), _defineProperty(_ctor2default, _valueTypes.Mat4, function (v) {
            return v ? cc.mat4(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7], v[8], v[9], v[10], v[11], v[12], v[13], v[14], v[15]) : cc.mat4();
        }), _defineProperty(_ctor2default, _CCTexture2D2.default, function () {
            return null;
        }), _defineProperty(_ctor2default, CCObject, function () {
            return null;
        }), _ctor2default);
        var enums2ctor = exports.enums2ctor = (_enums2ctor = {}, _defineProperty(_enums2ctor, _enums2.default.PARAM_INT, Number), _defineProperty(_enums2ctor, _enums2.default.PARAM_INT2, _valueTypes.Vec2), _defineProperty(_enums2ctor, _enums2.default.PARAM_INT3, _valueTypes.Vec3), _defineProperty(_enums2ctor, _enums2.default.PARAM_INT4, _valueTypes.Vec4), _defineProperty(_enums2ctor, _enums2.default.PARAM_FLOAT, Number), _defineProperty(_enums2ctor, _enums2.default.PARAM_FLOAT2, _valueTypes.Vec2), _defineProperty(_enums2ctor, _enums2.default.PARAM_FLOAT3, _valueTypes.Vec3), _defineProperty(_enums2ctor, _enums2.default.PARAM_FLOAT4, _valueTypes.Vec4), _defineProperty(_enums2ctor, _enums2.default.PARAM_COLOR3, _valueTypes.Color), _defineProperty(_enums2ctor, _enums2.default.PARAM_COLOR4, _valueTypes.Color), _defineProperty(_enums2ctor, _enums2.default.PARAM_MAT4, _valueTypes.Mat4), _defineProperty(_enums2ctor, _enums2.default.PARAM_TEXTURE_2D, _CCTexture2D2.default), _defineProperty(_enums2ctor, 'number', Number), _defineProperty(_enums2ctor, 'boolean', Boolean), _defineProperty(_enums2ctor, 'default', CCObject), _enums2ctor);
        var ctor2enums = exports.ctor2enums = (_ctor2enums = {}, _defineProperty(_ctor2enums, Number, _enums2.default.PARAM_FLOAT), _defineProperty(_ctor2enums, _valueTypes.Vec2, _enums2.default.PARAM_FLOAT2), _defineProperty(_ctor2enums, _valueTypes.Vec3, _enums2.default.PARAM_FLOAT3), _defineProperty(_ctor2enums, _valueTypes.Vec4, _enums2.default.PARAM_FLOAT4), _defineProperty(_ctor2enums, _valueTypes.Color, _enums2.default.PARAM_COLOR3), _defineProperty(_ctor2enums, _valueTypes.Color, _enums2.default.PARAM_COLOR4), _defineProperty(_ctor2enums, _valueTypes.Mat4, _enums2.default.PARAM_MAT4), _defineProperty(_ctor2enums, _CCTexture2D2.default, _enums2.default.PARAM_TEXTURE_2D), _defineProperty(_ctor2enums, _texture2d2.default, _enums2.default.PARAM_TEXTURE_2D), _ctor2enums);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,