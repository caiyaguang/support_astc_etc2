(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/render-data/render-data.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _memop = require('../memop');
        var _baseRenderData = require('./base-render-data');
        var _baseRenderData2 = _interopRequireDefault(_baseRenderData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _pool;
        var _dataPool = new _memop.Pool(function () {
            return {
                x: 0,
                y: 0,
                z: 0,
                u: 0,
                v: 0,
                color: 0
            };
        }, 128);
        var RenderData = function (_BaseRenderData) {
            _inherits(RenderData, _BaseRenderData);
            function RenderData() {
                _classCallCheck(this, RenderData);
                var _this = _possibleConstructorReturn(this, (RenderData.__proto__ || Object.getPrototypeOf(RenderData)).call(this));
                _this._data = [];
                _this._indices = [];
                _this._pivotX = 0;
                _this._pivotY = 0;
                _this._width = 0;
                _this._height = 0;
                _this.uvDirty = true;
                _this.vertDirty = true;
                return _this;
            }
            _createClass(RenderData, [
                {
                    key: 'updateSizeNPivot',
                    value: function updateSizeNPivot(width, height, pivotX, pivotY) {
                        if (width !== this._width || height !== this._height || pivotX !== this._pivotX || pivotY !== this._pivotY) {
                            this._width = width;
                            this._height = height;
                            this._pivotX = pivotX;
                            this._pivotY = pivotY;
                            this.vertDirty = true;
                        }
                    }
                },
                {
                    key: 'type',
                    get: function get() {
                        return RenderData.type;
                    }
                },
                {
                    key: 'dataLength',
                    get: function get() {
                        return this._data.length;
                    },
                    set: function set(length) {
                        var data = this._data;
                        if (data.length !== length) {
                            for (var i = length; i < data.length; i++) {
                                _dataPool.free(data[i]);
                            }
                            for (var _i = data.length; _i < length; _i++) {
                                data[_i] = _dataPool.alloc();
                            }
                            data.length = length;
                        }
                    }
                }
            ], [
                {
                    key: 'alloc',
                    value: function alloc() {
                        return _pool.alloc();
                    }
                },
                {
                    key: 'free',
                    value: function free(data) {
                        if (data instanceof RenderData) {
                            for (var i = data._data.length - 1; i >= 0; i--) {
                                _dataPool.free(data._data[i]);
                            }
                            data._data.length = 0;
                            data._indices.length = 0;
                            data.material = null;
                            data.uvDirty = true;
                            data.vertDirty = true;
                            data.vertexCount = 0;
                            data.indiceCount = 0;
                            _pool.free(data);
                        }
                    }
                }
            ]);
            return RenderData;
        }(_baseRenderData2.default);
        exports.default = RenderData;
        RenderData.type = 'RenderData';
        _pool = new _memop.Pool(function () {
            return new RenderData();
        }, 32);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,