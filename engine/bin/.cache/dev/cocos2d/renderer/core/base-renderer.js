(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/core/base-renderer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _type2uniformValue2, _type2uniformArrayVal;
        var _memop = require('../memop');
        var _enums = require('../enums');
        var _enums2 = _interopRequireDefault(_enums);
        var _vmath = require('../../core/vmath');
        var _programLib = require('./program-lib');
        var _programLib2 = _interopRequireDefault(_programLib);
        var _view = require('./view');
        var _view2 = _interopRequireDefault(_view);
        var _gfx = require('../gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }
        var _m3_tmp = _vmath.mat3.create();
        var _m4_tmp = _vmath.mat4.create();
        var _stageInfos = new _memop.RecyclePool(function () {
            return {
                stage: null,
                items: null
            };
        }, 8);
        var _float2_pool = new _memop.RecyclePool(function () {
            return new Float32Array(2);
        }, 8);
        var _float3_pool = new _memop.RecyclePool(function () {
            return new Float32Array(3);
        }, 8);
        var _float4_pool = new _memop.RecyclePool(function () {
            return new Float32Array(4);
        }, 8);
        var _float9_pool = new _memop.RecyclePool(function () {
            return new Float32Array(9);
        }, 8);
        var _float16_pool = new _memop.RecyclePool(function () {
            return new Float32Array(16);
        }, 8);
        var _float64_pool = new _memop.RecyclePool(function () {
            return new Float32Array(64);
        }, 8);
        var _int2_pool = new _memop.RecyclePool(function () {
            return new Int32Array(2);
        }, 8);
        var _int3_pool = new _memop.RecyclePool(function () {
            return new Int32Array(3);
        }, 8);
        var _int4_pool = new _memop.RecyclePool(function () {
            return new Int32Array(4);
        }, 8);
        var _int64_pool = new _memop.RecyclePool(function () {
            return new Int32Array(64);
        }, 8);
        var _type2uniformValue = (_type2uniformValue2 = {}, _defineProperty(_type2uniformValue2, _enums2.default.PARAM_INT, function (value) {
            return value;
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_INT2, function (value) {
            return _vmath.vec2.array(_int2_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_INT3, function (value) {
            return _vmath.vec3.array(_int3_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_INT4, function (value) {
            return _vmath.vec4.array(_int4_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_FLOAT, function (value) {
            return value;
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_FLOAT2, function (value) {
            return _vmath.vec2.array(_float2_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_FLOAT3, function (value) {
            return _vmath.vec3.array(_float3_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_FLOAT4, function (value) {
            return _vmath.vec4.array(_float4_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_COLOR3, function (value) {
            return _vmath.color3.array(_float3_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_COLOR4, function (value) {
            return _vmath.color4.array(_float4_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_MAT2, function (value) {
            return _vmath.mat2.array(_float4_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_MAT3, function (value) {
            return _vmath.mat3.array(_float9_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_MAT4, function (value) {
            return _vmath.mat4.array(_float16_pool.add(), value);
        }), _type2uniformValue2);
        var _type2uniformArrayValue = (_type2uniformArrayVal = {}, _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_INT, {
            func: function func(values) {
                var result = _int64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    result[i] = values[i];
                }
                return result;
            },
            size: 1
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_INT2, {
            func: function func(values) {
                var result = _int64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    result[2 * i] = values[i].x;
                    result[2 * i + 1] = values[i].y;
                }
                return result;
            },
            size: 2
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_INT3, {
            func: undefined,
            size: 3
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_INT4, {
            func: function func(values) {
                var result = _int64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[4 * i] = v.x;
                    result[4 * i + 1] = v.y;
                    result[4 * i + 2] = v.z;
                    result[4 * i + 3] = v.w;
                }
                return result;
            },
            size: 4
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_FLOAT, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    result[i] = values[i];
                }
                return result;
            },
            size: 1
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_FLOAT2, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    result[2 * i] = values[i].x;
                    result[2 * i + 1] = values[i].y;
                }
                return result;
            },
            size: 2
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_FLOAT3, {
            func: undefined,
            size: 3
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_FLOAT4, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[4 * i] = v.x;
                    result[4 * i + 1] = v.y;
                    result[4 * i + 2] = v.z;
                    result[4 * i + 3] = v.w;
                }
                return result;
            },
            size: 4
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_COLOR3, {
            func: undefined,
            size: 3
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_COLOR4, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[4 * i] = v.r;
                    result[4 * i + 1] = v.g;
                    result[4 * i + 2] = v.b;
                    result[4 * i + 3] = v.a;
                }
                return result;
            },
            size: 4
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_MAT2, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[4 * i] = v.m00;
                    result[4 * i + 1] = v.m01;
                    result[4 * i + 2] = v.m02;
                    result[4 * i + 3] = v.m03;
                }
                return result;
            },
            size: 4
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_MAT3, {
            func: undefined,
            size: 9
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_MAT4, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[16 * i] = v.m00;
                    result[16 * i + 1] = v.m01;
                    result[16 * i + 2] = v.m02;
                    result[16 * i + 3] = v.m03;
                    result[16 * i + 4] = v.m04;
                    result[16 * i + 5] = v.m05;
                    result[16 * i + 6] = v.m06;
                    result[16 * i + 7] = v.m07;
                    result[16 * i + 8] = v.m08;
                    result[16 * i + 9] = v.m09;
                    result[16 * i + 10] = v.m10;
                    result[16 * i + 11] = v.m11;
                    result[16 * i + 12] = v.m12;
                    result[16 * i + 13] = v.m13;
                    result[16 * i + 14] = v.m14;
                    result[16 * i + 15] = v.m15;
                }
                return result;
            },
            size: 16
        }), _type2uniformArrayVal);
        var Base = function () {
            function Base(device, opts) {
                var _type2defaultValue;
                _classCallCheck(this, Base);
                this._device = device;
                this._programLib = new _programLib2.default(device);
                this._opts = opts;
                this._type2defaultValue = (_type2defaultValue = {}, _defineProperty(_type2defaultValue, _enums2.default.PARAM_INT, 0), _defineProperty(_type2defaultValue, _enums2.default.PARAM_INT2, _vmath.vec2.create(0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_INT3, _vmath.vec3.create(0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_INT4, _vmath.vec4.create(0, 0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_FLOAT, 0), _defineProperty(_type2defaultValue, _enums2.default.PARAM_FLOAT2, _vmath.vec2.create(0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_FLOAT3, _vmath.vec3.create(0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_FLOAT4, _vmath.vec4.create(0, 0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_COLOR3, _vmath.color3.create(0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_COLOR4, _vmath.color4.create(0, 0, 0, 1)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_MAT2, _vmath.mat2.create()), _defineProperty(_type2defaultValue, _enums2.default.PARAM_MAT3, _vmath.mat3.create()), _defineProperty(_type2defaultValue, _enums2.default.PARAM_MAT4, _vmath.mat4.create()), _defineProperty(_type2defaultValue, _enums2.default.PARAM_TEXTURE_2D, opts.defaultTexture), _defineProperty(_type2defaultValue, _enums2.default.PARAM_TEXTURE_CUBE, opts.defaultTextureCube), _type2defaultValue);
                this._stage2fn = {};
                this._usedTextureUnits = 0;
                this._viewPools = new _memop.RecyclePool(function () {
                    return new _view2.default();
                }, 8);
                this._drawItemsPools = new _memop.RecyclePool(function () {
                    return {
                        model: null,
                        node: null,
                        ia: null,
                        effect: null,
                        defines: null,
                        uniforms: null
                    };
                }, 100);
                this._stageItemsPools = new _memop.RecyclePool(function () {
                    return new _memop.RecyclePool(function () {
                        return {
                            model: null,
                            node: null,
                            ia: null,
                            effect: null,
                            defines: null,
                            technique: null,
                            sortKey: -1,
                            uniforms: null
                        };
                    }, 100);
                }, 16);
            }
            _createClass(Base, [
                {
                    key: '_resetTextuerUnit',
                    value: function _resetTextuerUnit() {
                        this._usedTextureUnits = 0;
                    }
                },
                {
                    key: '_allocTextureUnit',
                    value: function _allocTextureUnit() {
                        var device = this._device;
                        var unit = this._usedTextureUnits;
                        if (unit >= device._caps.maxTextureUnits) {
                            console.warn('Trying to use ' + unit + ' texture units while this GPU supports only ' + device._caps.maxTextureUnits);
                        }
                        this._usedTextureUnits += 1;
                        return unit;
                    }
                },
                {
                    key: '_registerStage',
                    value: function _registerStage(name, fn) {
                        this._stage2fn[name] = fn;
                    }
                },
                {
                    key: 'clear',
                    value: function clear() {
                        this._programLib.clear();
                        this.reset();
                    }
                },
                {
                    key: 'reset',
                    value: function reset() {
                        this._viewPools.reset();
                        this._stageItemsPools.reset();
                    }
                },
                {
                    key: '_requestView',
                    value: function _requestView() {
                        return this._viewPools.add();
                    }
                },
                {
                    key: '_render',
                    value: function _render(view, scene) {
                        var device = this._device;
                        device.setFrameBuffer(view._framebuffer);
                        device.setViewport(view._rect.x, view._rect.y, view._rect.w, view._rect.h);
                        var clearOpts = {};
                        if (view._clearFlags & _enums2.default.CLEAR_COLOR) {
                            clearOpts.color = [
                                view._color.r,
                                view._color.g,
                                view._color.b,
                                view._color.a
                            ];
                        }
                        if (view._clearFlags & _enums2.default.CLEAR_DEPTH) {
                            clearOpts.depth = view._depth;
                        }
                        if (view._clearFlags & _enums2.default.CLEAR_STENCIL) {
                            clearOpts.stencil = view._stencil;
                        }
                        device.clear(clearOpts);
                        this._drawItemsPools.reset();
                        for (var i = 0; i < scene._models.length; ++i) {
                            var model = scene._models.data[i];
                            if ((model._cullingMask & view._cullingMask) === 0) {
                                continue;
                            }
                            var drawItem = this._drawItemsPools.add();
                            model.extractDrawItem(drawItem);
                        }
                        _stageInfos.reset();
                        for (var _i = 0; _i < view._stages.length; ++_i) {
                            var stage = view._stages[_i];
                            var stageItems = this._stageItemsPools.add();
                            stageItems.reset();
                            for (var j = 0; j < this._drawItemsPools.length; ++j) {
                                var _drawItem = this._drawItemsPools.data[j];
                                var tech = _drawItem.effect.getTechnique(stage);
                                if (tech) {
                                    var stageItem = stageItems.add();
                                    stageItem.model = _drawItem.model;
                                    stageItem.node = _drawItem.node;
                                    stageItem.ia = _drawItem.ia;
                                    stageItem.effect = _drawItem.effect;
                                    stageItem.defines = _drawItem.defines;
                                    stageItem.technique = tech;
                                    stageItem.sortKey = -1;
                                    stageItem.uniforms = _drawItem.uniforms;
                                }
                            }
                            var stageInfo = _stageInfos.add();
                            stageInfo.stage = stage;
                            stageInfo.items = stageItems;
                        }
                        for (var _i2 = 0; _i2 < _stageInfos.length; ++_i2) {
                            var info = _stageInfos.data[_i2];
                            var fn = this._stage2fn[info.stage];
                            fn(view, info.items);
                        }
                    }
                },
                {
                    key: '_setProperty',
                    value: function _setProperty(prop) {
                        var device = this._device;
                        var param = prop.value;
                        if (param === undefined) {
                            param = prop.val;
                        }
                        if (param === undefined) {
                            param = this._type2defaultValue[prop.type];
                        }
                        if (param === undefined) {
                            console.warn('Failed to set technique property ' + prop.name + ', value not found.');
                            return;
                        }
                        if (prop.type === _enums2.default.PARAM_TEXTURE_2D || prop.type === _enums2.default.PARAM_TEXTURE_CUBE) {
                            if (prop.size !== undefined) {
                                if (prop.size !== param.length) {
                                    console.error('The length of texture array (' + param.length + ') is not corrent(expect ' + prop.size + ').');
                                    return;
                                }
                                var slots = _int64_pool.add();
                                for (var index = 0; index < param.length; ++index) {
                                    slots[index] = this._allocTextureUnit();
                                }
                                device.setTextureArray(prop.name, param, slots);
                            } else {
                                device.setTexture(prop.name, param, this._allocTextureUnit());
                            }
                        } else {
                            var convertedValue = void 0;
                            if (param instanceof Float32Array || param instanceof Int32Array) {
                                device.setUniformDirectly(prop.name, param);
                                return;
                            } else if (prop.size !== undefined) {
                                var convertArray = _type2uniformArrayValue[prop.type];
                                if (convertArray.func === undefined) {
                                    console.error('Uniform array of color3/int3/float3/mat3 can not be supportted!');
                                    return;
                                }
                                if (prop.size * convertArray.size > 64) {
                                    console.error('Uniform array is too long!');
                                    return;
                                }
                                convertedValue = convertArray.func(param);
                            } else {
                                var convertFn = _type2uniformValue[prop.type];
                                convertedValue = convertFn(param);
                            }
                            device.setUniform(prop.name, convertedValue);
                        }
                    }
                },
                {
                    key: '_draw',
                    value: function _draw(item) {
                        var device = this._device;
                        var programLib = this._programLib;
                        var node = item.node, ia = item.ia, uniforms = item.uniforms, technique = item.technique, defines = item.defines, effect = item.effect;
                        _float2_pool.reset();
                        _float3_pool.reset();
                        _float4_pool.reset();
                        _float9_pool.reset();
                        _float16_pool.reset();
                        _float64_pool.reset();
                        _int2_pool.reset();
                        _int3_pool.reset();
                        _int4_pool.reset();
                        _int64_pool.reset();
                        node.getWorldMatrix(_m4_tmp);
                        device.setUniform('cc_matWorld', _vmath.mat4.array(_float16_pool.add(), _m4_tmp));
                        var inverse = _vmath.mat3.invert(_m3_tmp, _vmath.mat3.fromMat4(_m3_tmp, _m4_tmp));
                        if (inverse) {
                            _vmath.mat3.transpose(_m3_tmp, inverse);
                            device.setUniform('cc_matWorldIT', _vmath.mat3.array(_float9_pool.add(), _m3_tmp));
                        }
                        for (var i = 0; i < uniforms.length; i++) {
                            var typeUniforms = uniforms[i];
                            for (var key in typeUniforms) {
                                this._setProperty(typeUniforms[key]);
                            }
                        }
                        for (var _i3 = 0; _i3 < technique._passes.length; ++_i3) {
                            var pass = technique._passes[_i3];
                            var count = ia.count;
                            if (ia._vertexBuffer) {
                                device.setVertexBuffer(0, ia._vertexBuffer);
                            }
                            if (ia._indexBuffer) {
                                device.setIndexBuffer(ia._indexBuffer);
                            }
                            device.setPrimitiveType(ia._primitiveType);
                            var program = programLib.getProgram(pass._programName, defines, effect._name);
                            device.setProgram(program);
                            device.setCullMode(pass._cullMode);
                            if (pass._blend) {
                                device.enableBlend();
                                device.setBlendFuncSep(pass._blendSrc, pass._blendDst, pass._blendSrcAlpha, pass._blendDstAlpha);
                                device.setBlendEqSep(pass._blendEq, pass._blendAlphaEq);
                                device.setBlendColor32(pass._blendColor);
                            }
                            if (pass._depthTest) {
                                device.enableDepthTest();
                                device.setDepthFunc(pass._depthFunc);
                            }
                            if (pass._depthWrite) {
                                device.enableDepthWrite();
                            }
                            device.setStencilTest(pass._stencilTest);
                            if (pass._stencilTest === _gfx2.default.STENCIL_ENABLE) {
                                device.setStencilFuncFront(pass._stencilFuncFront, pass._stencilRefFront, pass._stencilMaskFront);
                                device.setStencilOpFront(pass._stencilFailOpFront, pass._stencilZFailOpFront, pass._stencilZPassOpFront, pass._stencilWriteMaskFront);
                                device.setStencilFuncBack(pass._stencilFuncBack, pass._stencilRefBack, pass._stencilMaskBack);
                                device.setStencilOpBack(pass._stencilFailOpBack, pass._stencilZFailOpBack, pass._stencilZPassOpBack, pass._stencilWriteMaskBack);
                            }
                            device.draw(ia._start, count);
                            this._resetTextuerUnit();
                        }
                    }
                }
            ]);
            return Base;
        }();
        exports.default = Base;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2UtcmVuZGVyZXIuanMiLCIvVXNlcnMvenpmMjAxOS9EZXNrdG9wL2RldmVsb3BtZW50L3N1cHBvcnRfYXN0Yy9lbmdpbmUvY29jb3MyZC9yZW5kZXJlci9jb3JlL2Jhc2UtcmVuZGVyZXIuanMiXSwibmFtZXMiOlsiX20zX3RtcCIsIm1hdDMiLCJjcmVhdGUiLCJfbTRfdG1wIiwibWF0NCIsIl9zdGFnZUluZm9zIiwiUmVjeWNsZVBvb2wiLCJzdGFnZSIsIml0ZW1zIiwiX2Zsb2F0Ml9wb29sIiwiRmxvYXQzMkFycmF5IiwiX2Zsb2F0M19wb29sIiwiX2Zsb2F0NF9wb29sIiwiX2Zsb2F0OV9wb29sIiwiX2Zsb2F0MTZfcG9vbCIsIl9mbG9hdDY0X3Bvb2wiLCJfaW50Ml9wb29sIiwiSW50MzJBcnJheSIsIl9pbnQzX3Bvb2wiLCJfaW50NF9wb29sIiwiX2ludDY0X3Bvb2wiLCJfdHlwZTJ1bmlmb3JtVmFsdWUiLCJlbnVtcyIsIlBBUkFNX0lOVCIsInZhbHVlIiwiUEFSQU1fSU5UMiIsInZlYzIiLCJhcnJheSIsImFkZCIsIlBBUkFNX0lOVDMiLCJ2ZWMzIiwiUEFSQU1fSU5UNCIsInZlYzQiLCJQQVJBTV9GTE9BVCIsIlBBUkFNX0ZMT0FUMiIsIlBBUkFNX0ZMT0FUMyIsIlBBUkFNX0ZMT0FUNCIsIlBBUkFNX0NPTE9SMyIsImNvbG9yMyIsIlBBUkFNX0NPTE9SNCIsImNvbG9yNCIsIlBBUkFNX01BVDIiLCJtYXQyIiwiUEFSQU1fTUFUMyIsIlBBUkFNX01BVDQiLCJfdHlwZTJ1bmlmb3JtQXJyYXlWYWx1ZSIsImZ1bmMiLCJ2YWx1ZXMiLCJyZXN1bHQiLCJpIiwibGVuZ3RoIiwic2l6ZSIsIngiLCJ5IiwidW5kZWZpbmVkIiwidiIsInoiLCJ3IiwiciIsImciLCJiIiwiYSIsIm0wMCIsIm0wMSIsIm0wMiIsIm0wMyIsIm0wNCIsIm0wNSIsIm0wNiIsIm0wNyIsIm0wOCIsIm0wOSIsIm0xMCIsIm0xMSIsIm0xMiIsIm0xMyIsIm0xNCIsIm0xNSIsIkJhc2UiLCJkZXZpY2UiLCJvcHRzIiwiX2RldmljZSIsIl9wcm9ncmFtTGliIiwiUHJvZ3JhbUxpYiIsIl9vcHRzIiwiX3R5cGUyZGVmYXVsdFZhbHVlIiwiUEFSQU1fVEVYVFVSRV8yRCIsImRlZmF1bHRUZXh0dXJlIiwiUEFSQU1fVEVYVFVSRV9DVUJFIiwiZGVmYXVsdFRleHR1cmVDdWJlIiwiX3N0YWdlMmZuIiwiX3VzZWRUZXh0dXJlVW5pdHMiLCJfdmlld1Bvb2xzIiwiVmlldyIsIl9kcmF3SXRlbXNQb29scyIsIm1vZGVsIiwibm9kZSIsImlhIiwiZWZmZWN0IiwiZGVmaW5lcyIsInVuaWZvcm1zIiwiX3N0YWdlSXRlbXNQb29scyIsInRlY2huaXF1ZSIsInNvcnRLZXkiLCJ1bml0IiwiX2NhcHMiLCJtYXhUZXh0dXJlVW5pdHMiLCJjb25zb2xlIiwid2FybiIsIm5hbWUiLCJmbiIsImNsZWFyIiwicmVzZXQiLCJ2aWV3Iiwic2NlbmUiLCJzZXRGcmFtZUJ1ZmZlciIsIl9mcmFtZWJ1ZmZlciIsInNldFZpZXdwb3J0IiwiX3JlY3QiLCJoIiwiY2xlYXJPcHRzIiwiX2NsZWFyRmxhZ3MiLCJDTEVBUl9DT0xPUiIsImNvbG9yIiwiX2NvbG9yIiwiQ0xFQVJfREVQVEgiLCJkZXB0aCIsIl9kZXB0aCIsIkNMRUFSX1NURU5DSUwiLCJzdGVuY2lsIiwiX3N0ZW5jaWwiLCJfbW9kZWxzIiwiZGF0YSIsIl9jdWxsaW5nTWFzayIsImRyYXdJdGVtIiwiZXh0cmFjdERyYXdJdGVtIiwiX3N0YWdlcyIsInN0YWdlSXRlbXMiLCJqIiwidGVjaCIsImdldFRlY2huaXF1ZSIsInN0YWdlSXRlbSIsInN0YWdlSW5mbyIsImluZm8iLCJwcm9wIiwicGFyYW0iLCJ2YWwiLCJ0eXBlIiwiZXJyb3IiLCJzbG90cyIsImluZGV4IiwiX2FsbG9jVGV4dHVyZVVuaXQiLCJzZXRUZXh0dXJlQXJyYXkiLCJzZXRUZXh0dXJlIiwiY29udmVydGVkVmFsdWUiLCJzZXRVbmlmb3JtRGlyZWN0bHkiLCJjb252ZXJ0QXJyYXkiLCJjb252ZXJ0Rm4iLCJzZXRVbmlmb3JtIiwiaXRlbSIsInByb2dyYW1MaWIiLCJnZXRXb3JsZE1hdHJpeCIsImludmVyc2UiLCJpbnZlcnQiLCJmcm9tTWF0NCIsInRyYW5zcG9zZSIsInR5cGVVbmlmb3JtcyIsImtleSIsIl9zZXRQcm9wZXJ0eSIsIl9wYXNzZXMiLCJwYXNzIiwiY291bnQiLCJfdmVydGV4QnVmZmVyIiwic2V0VmVydGV4QnVmZmVyIiwiX2luZGV4QnVmZmVyIiwic2V0SW5kZXhCdWZmZXIiLCJzZXRQcmltaXRpdmVUeXBlIiwiX3ByaW1pdGl2ZVR5cGUiLCJwcm9ncmFtIiwiZ2V0UHJvZ3JhbSIsIl9wcm9ncmFtTmFtZSIsIl9uYW1lIiwic2V0UHJvZ3JhbSIsInNldEN1bGxNb2RlIiwiX2N1bGxNb2RlIiwiX2JsZW5kIiwiZW5hYmxlQmxlbmQiLCJzZXRCbGVuZEZ1bmNTZXAiLCJfYmxlbmRTcmMiLCJfYmxlbmREc3QiLCJfYmxlbmRTcmNBbHBoYSIsIl9ibGVuZERzdEFscGhhIiwic2V0QmxlbmRFcVNlcCIsIl9ibGVuZEVxIiwiX2JsZW5kQWxwaGFFcSIsInNldEJsZW5kQ29sb3IzMiIsIl9ibGVuZENvbG9yIiwiX2RlcHRoVGVzdCIsImVuYWJsZURlcHRoVGVzdCIsInNldERlcHRoRnVuYyIsIl9kZXB0aEZ1bmMiLCJfZGVwdGhXcml0ZSIsImVuYWJsZURlcHRoV3JpdGUiLCJzZXRTdGVuY2lsVGVzdCIsIl9zdGVuY2lsVGVzdCIsImdmeCIsIlNURU5DSUxfRU5BQkxFIiwic2V0U3RlbmNpbEZ1bmNGcm9udCIsIl9zdGVuY2lsRnVuY0Zyb250IiwiX3N0ZW5jaWxSZWZGcm9udCIsIl9zdGVuY2lsTWFza0Zyb250Iiwic2V0U3RlbmNpbE9wRnJvbnQiLCJfc3RlbmNpbEZhaWxPcEZyb250IiwiX3N0ZW5jaWxaRmFpbE9wRnJvbnQiLCJfc3RlbmNpbFpQYXNzT3BGcm9udCIsIl9zdGVuY2lsV3JpdGVNYXNrRnJvbnQiLCJzZXRTdGVuY2lsRnVuY0JhY2siLCJfc3RlbmNpbEZ1bmNCYWNrIiwiX3N0ZW5jaWxSZWZCYWNrIiwiX3N0ZW5jaWxNYXNrQmFjayIsInNldFN0ZW5jaWxPcEJhY2siLCJfc3RlbmNpbEZhaWxPcEJhY2siLCJfc3RlbmNpbFpGYWlsT3BCYWNrIiwiX3N0ZW5jaWxaUGFzc09wQmFjayIsIl9zdGVuY2lsV3JpdGVNYXNrQmFjayIsImRyYXciLCJfc3RhcnQiLCJfcmVzZXRUZXh0dWVyVW5pdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztRQUVBLElBQUEsQ0FBQSxPQUFBLEVBQUE7QUFBQSxZQUFBLGlCQUFBLENBQUEsY0FBQSxDQUFBLFVBQUEsRUFBQSxNQUFBLEVBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBQUEsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLFVBQUEsQ0FBQTtRQUNBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUE7O1FBQ0EsSUFBQSxNQUFBLEdBQUEsT0FBQSxDQUFBLGtCQUFBLENBQUE7UUFDQSxJQUFBLFdBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBOztRQUNBLElBQUEsS0FBQSxHQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUE7O1FBQ0EsSUFBQSxJQUFBLEdBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUFFQSxJQUFJQSxPQUFBQSxHQUFVQyxNQUFBQSxDQUFBQSxJQUFBQSxDQUFLQyxNQUFMRCxFQUFkO1FBQ0EsSUFBSUUsT0FBQUEsR0FBVUMsTUFBQUEsQ0FBQUEsSUFBQUEsQ0FBS0YsTUFBTEUsRUFBZDtRQUVBLElBQUlDLFdBQUFBLEdBQWMsSUFBSUMsTUFBQUEsQ0FBQUEsV0FBSixDQUFnQixZQUFNO0FBQUEsWUFDdEMsT0FBTztBQUFBLGdCQUNMQyxLQUFBQSxFQUFPLElBREY7QUFBQSxnQkFFTEMsS0FBQUEsRUFBTyxJQUZGO0FBQUEsYUFBUCxDQURzQztBQUFBLFNBQXRCLEVBS2YsQ0FMZSxDQUFsQjtRQU9BLElBQUlDLFlBQUFBLEdBQWUsSUFBSUgsTUFB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LElBQUFBLENBQUt3QyxpQkFIUG5JLEVBRjRDO0FBQUEsZ0NBTzVDQSxNQUFBQSxDQUFPb0ksaUJBQVBwSSxDQUNFMkYsSUFBQUEsQ0FBSzBDLG1CQURQckksRUFFRTJGLElBQUFBLENBQUsyQyxvQkFGUHRJLEVBR0UyRixJQUFBQSxDQUFLNEMsb0JBSFB2SSxFQUlFMkYsSUFBQUEsQ0FBSzZDLHNCQUpQeEksRUFQNEM7QUFBQSxnQ0FlNUNBLE1BQUFBLENBQU95SSxrQkFBUHpJLENBQ0UyRixJQUFBQSxDQUFLK0MsZ0JBRFAxSSxFQUVFMkYsSUFBQUEsQ0FBS2dELGVBRlAzSSxFQUdFMkYsSUFBQUEsQ0FBS2lELGdCQUhQNUksRUFmNEM7QUFBQSxnQ0FvQjVDQSxNQUFBQSxDQUFPNkksZ0JBQVA3SSxDQUNFMkYsSUFBQUEsQ0FBS21ELGtCQURQOUksRUFFRTJGLElBQUFBLENBQUtvRCxtQkFGUC9JLEVBR0UyRixJQUFBQSxDQUFLcUQsbUJBSFBoSixFQUlFMkYsSUFBQUEsQ0FBS3NELHFCQUpQakosRUFwQjRDO0FBQUEsNkJBbkRHO0FBQUEsNEJBZ0ZqREEsTUFBQUEsQ0FBT2tKLElBQVBsSixDQUFZa0IsRUFBQUEsQ0FBR2lJLE1BQWZuSixFQUF1QjRGLEtBQXZCNUYsRUFoRmlEO0FBQUEsNEJBa0ZqRCxLQUFLb0osaUJBQUwsR0FsRmlEO0FBQUEseUJBeEN6QztBQUFBOzs7OzswQkFyUE9ySjs7O0lBdFJyQixJQUFBLE9BQUEsRUFBQTtBQUFBLHdEQUFBO0FBQUEsS0FBQTtRQUNBLGlCQUFBLENBQUEsa0JBQUEsQ0FBQSxVQUFBLEVBQUEsWUFBQTtBQUFBLDREQUFBO0FBQUEsU0FBQSIsImZpbGUiOiJiYXNlLXJlbmRlcmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIFxuXG5pbXBvcnQgeyBSZWN5Y2xlUG9vbCB9IGZyb20gJy4uL21lbW9wJztcbmltcG9ydCBlbnVtcyBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgeyB2ZWMyLCB2ZWMzLCB2ZWM0LCBtYXQyLCBtYXQzLCBtYXQ0LCBjb2xvcjMsIGNvbG9yNCB9IGZyb20gJy4uLy4uL2NvcmUvdm1hdGgnO1xuaW1wb3J0IFByb2dyYW1MaWIgZnJvbSAnLi9wcm9ncmFtLWxpYic7XG5pbXBvcnQgVmlldyBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IGdmeCBmcm9tICcuLi9nZngnO1xuXG5sZXQgX20zX3RtcCA9IG1hdDMuY3JlYXRlKCk7XG5sZXQgX200X3RtcCA9IG1hdDQuY3JlYXRlKCk7XG5cbmxldCBfc3RhZ2VJbmZvcyA9IG5ldyBSZWN5Y2xlUG9vbCgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgc3RhZ2U6IG51bGwsXG4gICAgaXRlbXM6IG51bGwsXG4gIH07XG59LCA4KTtcblxubGV0IF9mbG9hdDJfcG9vbCA9IG5ldyBSZWN5Y2xlUG9vbCgoKSA9PiB7XG4gIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDIpO1xufSwgOCk7XG5cbmxldCBfZmxvYXQzX3Bvb2wgPSBuZXcgUmVjeWNsZVBvb2woKCkgPT4ge1xuICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSgzKTtcbn0sIDgpO1xuXG5sZXQgX2Zsb2F0NF9wb29sID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoNCk7XG59LCA4KTtcblxubGV0IF9mbG9hdDlfcG9vbCA9IG5ldyBSZWN5Y2xlUG9vbCgoKSA9PiB7XG4gIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDkpO1xufSwgOCk7XG5cbmxldCBfZmxvYXQxNl9wb29sID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoMTYpO1xufSwgOCk7XG5cbmxldCBfZmxvYXQ2NF9wb29sID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoNjQpO1xufSwgOCk7XG5cbmxldCBfaW50Ml9wb29sID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDIpO1xufSwgOCk7XG5cbmxldCBfaW50M19wb29sID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDMpO1xufSwgOCk7XG5cbmxldCBfaW50NF9wb29sID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDQpO1xufSwgOCk7XG5cbmxldCBfaW50NjRfcG9vbCA9IG5ldyBSZWN5Y2xlUG9vbCgoKSA9PiB7XG4gIHJldHVybiBuZXcgSW50MzJBcnJheSg2NCk7XG59LCA4KTtcblxubGV0IF90eXBlMnVuaWZvcm1WYWx1ZSA9IHtcbiAgW2VudW1zLlBBUkFNX0lOVF06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fSU5UMl06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2ZWMyLmFycmF5KF9pbnQyX3Bvb2wuYWRkKCksIHZhbHVlKTtcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fSU5UM106IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2ZWMzLmFycmF5KF9pbnQzX3Bvb2wuYWRkKCksIHZhbHVlKTtcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fSU5UNF06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2ZWM0LmFycmF5KF9pbnQ0X3Bvb2wuYWRkKCksIHZhbHVlKTtcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fRkxPQVRdOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX0ZMT0FUMl06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2ZWMyLmFycmF5KF9mbG9hdDJfcG9vbC5hZGQoKSwgdmFsdWUpO1xuICB9LFxuXG4gIFtlbnVtcy5QQVJBTV9GTE9BVDNdOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmVjMy5hcnJheShfZmxvYXQzX3Bvb2wuYWRkKCksIHZhbHVlKTtcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fRkxPQVQ0XTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZlYzQuYXJyYXkoX2Zsb2F0NF9wb29sLmFkZCgpLCB2YWx1ZSk7XG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX0NPTE9SM106IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBjb2xvcjMuYXJyYXkoX2Zsb2F0M19wb29sLmFkZCgpLCB2YWx1ZSk7XG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX0NPTE9SNF06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBjb2xvcjQuYXJyYXkoX2Zsb2F0NF9wb29sLmFkZCgpLCB2YWx1ZSk7XG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX01BVDJdOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gbWF0Mi5hcnJheShfZmxvYXQ0X3Bvb2wuYWRkKCksIHZhbHVlKTtcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fTUFUM106IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBtYXQzLmFycmF5KF9mbG9hdDlfcG9vbC5hZGQoKSwgdmFsdWUpO1xuICB9LFxuXG4gIFtlbnVtcy5QQVJBTV9NQVQ0XTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIG1hdDQuYXJyYXkoX2Zsb2F0MTZfcG9vbC5hZGQoKSwgdmFsdWUpO1xuICB9LFxuXG4gIC8vIFtlbnVtcy5QQVJBTV9URVhUVVJFXzJEXTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gIC8vIH0sXG5cbiAgLy8gW2VudW1zLlBBUkFNX1RFWFRVUkVfQ1VCRV06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAvLyB9LFxufTtcblxubGV0IF90eXBlMnVuaWZvcm1BcnJheVZhbHVlID0ge1xuICBbZW51bXMuUEFSQU1fSU5UXToge1xuICAgIGZ1bmMgKHZhbHVlcykge1xuICAgICAgbGV0IHJlc3VsdCA9IF9pbnQ2NF9wb29sLmFkZCgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcmVzdWx0W2ldID0gdmFsdWVzW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHNpemU6IDEsXG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX0lOVDJdOiB7XG4gICAgZnVuYyAodmFsdWVzKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gX2ludDY0X3Bvb2wuYWRkKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXN1bHRbMiAqIGldID0gdmFsdWVzW2ldLng7XG4gICAgICAgIHJlc3VsdFsyICogaSArIDFdID0gdmFsdWVzW2ldLnk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgc2l6ZTogMixcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fSU5UM106IHtcbiAgICBmdW5jOiB1bmRlZmluZWQsXG4gICAgc2l6ZTogMyxcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fSU5UNF06IHtcbiAgICBmdW5jICh2YWx1ZXMpIHtcbiAgICAgIGxldCByZXN1bHQgPSBfaW50NjRfcG9vbC5hZGQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGxldCB2ID0gdmFsdWVzW2ldO1xuICAgICAgICByZXN1bHRbNCAqIGldID0gdi54O1xuICAgICAgICByZXN1bHRbNCAqIGkgKyAxXSA9IHYueTtcbiAgICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSB2Lno7XG4gICAgICAgIHJlc3VsdFs0ICogaSArIDNdID0gdi53O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHNpemU6IDQsXG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX0ZMT0FUXToge1xuICAgIGZ1bmMgKHZhbHVlcykge1xuICAgICAgbGV0IHJlc3VsdCA9IF9mbG9hdDY0X3Bvb2wuYWRkKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXN1bHRbaV0gPSB2YWx1ZXNbaV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgc2l6ZTogMVxuICB9LFxuXG4gIFtlbnVtcy5QQVJBTV9GTE9BVDJdOiB7XG4gICAgZnVuYyAodmFsdWVzKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gX2Zsb2F0NjRfcG9vbC5hZGQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHJlc3VsdFsyICogaV0gPSB2YWx1ZXNbaV0ueDtcbiAgICAgICAgcmVzdWx0WzIgKiBpICsgMV0gPSB2YWx1ZXNbaV0ueTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBzaXplOiAyLFxuICB9LFxuXG4gIFtlbnVtcy5QQVJBTV9GTE9BVDNdOiB7XG4gICAgZnVuYzogdW5kZWZpbmVkLFxuICAgIHNpemU6IDMsXG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX0ZMT0FUNF06IHtcbiAgICBmdW5jICh2YWx1ZXMpIHtcbiAgICAgIGxldCByZXN1bHQgPSBfZmxvYXQ2NF9wb29sLmFkZCgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgbGV0IHYgPSB2YWx1ZXNbaV07XG4gICAgICAgIHJlc3VsdFs0ICogaV0gPSB2Lng7XG4gICAgICAgIHJlc3VsdFs0ICogaSArIDFdID0gdi55O1xuICAgICAgICByZXN1bHRbNCAqIGkgKyAyXSA9IHYuejtcbiAgICAgICAgcmVzdWx0WzQgKiBpICsgM10gPSB2Lnc7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgc2l6ZTogNCxcbiAgfSxcblxuICBbZW51bXMuUEFSQU1fQ09MT1IzXToge1xuICAgIGZ1bmM6IHVuZGVmaW5lZCxcbiAgICBzaXplOiAzLFxuICB9LFxuXG4gIFtlbnVtcy5QQVJBTV9DT0xPUjRdOiB7XG4gICAgZnVuYyAodmFsdWVzKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gX2Zsb2F0NjRfcG9vbC5hZGQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGxldCB2ID0gdmFsdWVzW2ldO1xuICAgICAgICByZXN1bHRbNCAqIGldID0gdi5yO1xuICAgICAgICByZXN1bHRbNCAqIGkgKyAxXSA9IHYuZztcbiAgICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSB2LmI7XG4gICAgICAgIHJlc3VsdFs0ICogaSArIDNdID0gdi5hO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHNpemU6IDQsXG4gIH0sXG5cbiAgW2VudW1zLlBBUkFNX01BVDJdOiB7XG4gICAgZnVuYyAodmFsdWVzKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gX2Zsb2F0NjRfcG9vbC5hZGQoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGxldCB2ID0gdmFsdWVzW2ldO1xuICAgICAgICByZXN1bHRbNCAqIGldID0gdi5tMDA7XG4gICAgICAgIHJlc3VsdFs0ICogaSArIDFdID0gdi5tMDE7XG4gICAgICAgIHJlc3VsdFs0ICogaSArIDJdID0gdi5tMDI7XG4gICAgICAgIHJlc3VsdFs0ICogaSArIDNdID0gdi5tMDM7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgc2l6ZTogNFxuICB9LFxuXG4gIFtlbnVtcy5QQVJBTV9NQVQzXToge1xuICAgIGZ1bmM6IHVuZGVmaW5lZCxcbiAgICBzaXplOiA5XG4gIH0sXG5cblxuICBbZW51bXMuUEFSQU1fTUFUNF06IHtcbiAgICBmdW5jICh2YWx1ZXMpIHtcbiAgICAgIGxldCByZXN1bHQgPSBfZmxvYXQ2NF9wb29sLmFkZCgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgbGV0IHYgPSB2YWx1ZXNbaV07XG4gICAgICAgIHJlc3VsdFsxNiAqIGldID0gdi5tMDA7XG4gICAgICAgIHJlc3VsdFsxNiAqIGkgKyAxXSA9IHYubTAxO1xuICAgICAgICByZXN1bHRbMTYgKiBpICsgMl0gPSB2Lm0wMjtcbiAgICAgICAgcmVzdWx0WzE2ICogaSArIDNdID0gdi5tMDM7XG4gICAgICAgIHJlc3VsdFsxNiAqIGkgKyA0XSA9IHYubTA0O1xuICAgICAgICByZXN1bHRbMTYgKiBpICsgNV0gPSB2Lm0wNTtcbiAgICAgICAgcmVzdWx0WzE2ICogaSArIDZdID0gdi5tMDY7XG4gICAgICAgIHJlc3VsdFsxNiAqIGkgKyA3XSA9IHYubTA3O1xuICAgICAgICByZXN1bHRbMTYgKiBpICsgOF0gPSB2Lm0wODtcbiAgICAgICAgcmVzdWx0WzE2ICogaSArIDldID0gdi5tMDk7XG4gICAgICAgIHJlc3VsdFsxNiAqIGkgKyAxMF0gPSB2Lm0xMDtcbiAgICAgICAgcmVzdWx0WzE2ICogaSArIDExXSA9IHYubTExO1xuICAgICAgICByZXN1bHRbMTYgKiBpICsgMTJdID0gdi5tMTI7XG4gICAgICAgIHJlc3VsdFsxNiAqIGkgKyAxM10gPSB2Lm0xMztcbiAgICAgICAgcmVzdWx0WzE2ICogaSArIDE0XSA9IHYubTE0O1xuICAgICAgICByZXN1bHRbMTYgKiBpICsgMTVdID0gdi5tMTU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgc2l6ZTogMTZcbiAgfSxcblxuICAvLyBbZW51bXMuUEFSQU1fVEVYVFVSRV8yRF06IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAvLyB9LFxuXG4gIC8vIFtlbnVtcy5QQVJBTV9URVhUVVJFX0NVQkVdOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgLy8gfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2Uge1xuICAvKipcbiAgICogQHBhcmFtIHtnZnguRGV2aWNlfSBkZXZpY2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAgICogQHBhcmFtIHtnZnguVGV4dHVyZTJEfSBvcHRzLmRlZmF1bHRUZXh0dXJlXG4gICAqIEBwYXJhbSB7Z2Z4LlRleHR1cmVDdWJlfSBvcHRzLmRlZmF1bHRUZXh0dXJlQ3ViZVxuICAgKi9cbiAgY29uc3RydWN0b3IoZGV2aWNlLCBvcHRzKSB7XG4gICAgdGhpcy5fZGV2aWNlID0gZGV2aWNlO1xuICAgIHRoaXMuX3Byb2dyYW1MaWIgPSBuZXcgUHJvZ3JhbUxpYihkZXZpY2UpO1xuICAgIHRoaXMuX29wdHMgPSBvcHRzO1xuICAgIHRoaXMuX3R5cGUyZGVmYXVsdFZhbHVlID0ge1xuICAgICAgW2VudW1zLlBBUkFNX0lOVF06IDAsXG4gICAgICBbZW51bXMuUEFSQU1fSU5UMl06IHZlYzIuY3JlYXRlKDAsIDApLFxuICAgICAgW2VudW1zLlBBUkFNX0lOVDNdOiB2ZWMzLmNyZWF0ZSgwLCAwLCAwKSxcbiAgICAgIFtlbnVtcy5QQVJBTV9JTlQ0XTogdmVjNC5jcmVhdGUoMCwgMCwgMCwgMCksXG4gICAgICBbZW51bXMuUEFSQU1fRkxPQVRdOiAwLjAsXG4gICAgICBbZW51bXMuUEFSQU1fRkxPQVQyXTogdmVjMi5jcmVhdGUoMCwgMCksXG4gICAgICBbZW51bXMuUEFSQU1fRkxPQVQzXTogdmVjMy5jcmVhdGUoMCwgMCwgMCksXG4gICAgICBbZW51bXMuUEFSQU1fRkxPQVQ0XTogdmVjNC5jcmVhdGUoMCwgMCwgMCwgMCksXG4gICAgICBbZW51bXMuUEFSQU1fQ09MT1IzXTogY29sb3IzLmNyZWF0ZSgwLCAwLCAwKSxcbiAgICAgIFtlbnVtcy5QQVJBTV9DT0xPUjRdOiBjb2xvcjQuY3JlYXRlKDAsIDAsIDAsIDEpLFxuICAgICAgW2VudW1zLlBBUkFNX01BVDJdOiBtYXQyLmNyZWF0ZSgpLFxuICAgICAgW2VudW1zLlBBUkFNX01BVDNdOiBtYXQzLmNyZWF0ZSgpLFxuICAgICAgW2VudW1zLlBBUkFNX01BVDRdOiBtYXQ0LmNyZWF0ZSgpLFxuICAgICAgW2VudW1zLlBBUkFNX1RFWFRVUkVfMkRdOiBvcHRzLmRlZmF1bHRUZXh0dXJlLFxuICAgICAgW2VudW1zLlBBUkFNX1RFWFRVUkVfQ1VCRV06IG9wdHMuZGVmYXVsdFRleHR1cmVDdWJlLFxuICAgIH07XG4gICAgdGhpcy5fc3RhZ2UyZm4gPSB7fTtcbiAgICB0aGlzLl91c2VkVGV4dHVyZVVuaXRzID0gMDtcblxuICAgIHRoaXMuX3ZpZXdQb29scyA9IG5ldyBSZWN5Y2xlUG9vbCgoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFZpZXcoKTtcbiAgICB9LCA4KTtcblxuICAgIHRoaXMuX2RyYXdJdGVtc1Bvb2xzID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1vZGVsOiBudWxsLFxuICAgICAgICBub2RlOiBudWxsLFxuICAgICAgICBpYTogbnVsbCxcbiAgICAgICAgZWZmZWN0OiBudWxsLFxuICAgICAgICBkZWZpbmVzOiBudWxsLFxuICAgICAgICB1bmlmb3JtczogbnVsbFxuICAgICAgfTtcbiAgICB9LCAxMDApO1xuXG4gICAgdGhpcy5fc3RhZ2VJdGVtc1Bvb2xzID0gbmV3IFJlY3ljbGVQb29sKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUmVjeWNsZVBvb2woKCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1vZGVsOiBudWxsLFxuICAgICAgICAgIG5vZGU6IG51bGwsXG4gICAgICAgICAgaWE6IG51bGwsXG4gICAgICAgICAgZWZmZWN0OiBudWxsLFxuICAgICAgICAgIGRlZmluZXM6IG51bGwsXG4gICAgICAgICAgdGVjaG5pcXVlOiBudWxsLFxuICAgICAgICAgIHNvcnRLZXk6IC0xLFxuICAgICAgICAgIHVuaWZvcm1zOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9LCAxMDApO1xuICAgIH0sIDE2KTtcbiAgfVxuXG4gIF9yZXNldFRleHR1ZXJVbml0KCkge1xuICAgIHRoaXMuX3VzZWRUZXh0dXJlVW5pdHMgPSAwO1xuICB9XG5cbiAgX2FsbG9jVGV4dHVyZVVuaXQoKSB7XG4gICAgY29uc3QgZGV2aWNlID0gdGhpcy5fZGV2aWNlO1xuXG4gICAgbGV0IHVuaXQgPSB0aGlzLl91c2VkVGV4dHVyZVVuaXRzO1xuICAgIGlmICh1bml0ID49IGRldmljZS5fY2Fwcy5tYXhUZXh0dXJlVW5pdHMpIHtcbiAgICAgIGNvbnNvbGUud2FybihgVHJ5aW5nIHRvIHVzZSAke3VuaXR9IHRleHR1cmUgdW5pdHMgd2hpbGUgdGhpcyBHUFUgc3VwcG9ydHMgb25seSAke2RldmljZS5fY2Fwcy5tYXhUZXh0dXJlVW5pdHN9YCk7XG4gICAgfVxuXG4gICAgdGhpcy5fdXNlZFRleHR1cmVVbml0cyArPSAxO1xuICAgIHJldHVybiB1bml0O1xuICB9XG5cbiAgX3JlZ2lzdGVyU3RhZ2UobmFtZSwgZm4pIHtcbiAgICB0aGlzLl9zdGFnZTJmbltuYW1lXSA9IGZuO1xuICB9XG5cbiAgY2xlYXIgKCkge1xuICAgIHRoaXMuX3Byb2dyYW1MaWIuY2xlYXIoKTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLl92aWV3UG9vbHMucmVzZXQoKTtcbiAgICB0aGlzLl9zdGFnZUl0ZW1zUG9vbHMucmVzZXQoKTtcbiAgfVxuXG4gIF9yZXF1ZXN0VmlldygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmlld1Bvb2xzLmFkZCgpO1xuICB9XG5cbiAgX3JlbmRlcih2aWV3LCBzY2VuZSkge1xuICAgIGNvbnN0IGRldmljZSA9IHRoaXMuX2RldmljZTtcblxuICAgIC8vIHNldHVwIGZyYW1lYnVmZmVyXG4gICAgZGV2aWNlLnNldEZyYW1lQnVmZmVyKHZpZXcuX2ZyYW1lYnVmZmVyKTtcblxuICAgIC8vIHNldHVwIHZpZXdwb3J0XG4gICAgZGV2aWNlLnNldFZpZXdwb3J0KFxuICAgICAgdmlldy5fcmVjdC54LFxuICAgICAgdmlldy5fcmVjdC55LFxuICAgICAgdmlldy5fcmVjdC53LFxuICAgICAgdmlldy5fcmVjdC5oXG4gICAgKTtcblxuICAgIC8vIHNldHVwIGNsZWFyXG4gICAgbGV0IGNsZWFyT3B0cyA9IHt9O1xuICAgIGlmICh2aWV3Ll9jbGVhckZsYWdzICYgZW51bXMuQ0xFQVJfQ09MT1IpIHtcbiAgICAgIGNsZWFyT3B0cy5jb2xvciA9IFtcbiAgICAgICAgdmlldy5fY29sb3IucixcbiAgICAgICAgdmlldy5fY29sb3IuZyxcbiAgICAgICAgdmlldy5fY29sb3IuYixcbiAgICAgICAgdmlldy5fY29sb3IuYVxuICAgICAgXTtcbiAgICB9XG4gICAgaWYgKHZpZXcuX2NsZWFyRmxhZ3MgJiBlbnVtcy5DTEVBUl9ERVBUSCkge1xuICAgICAgY2xlYXJPcHRzLmRlcHRoID0gdmlldy5fZGVwdGg7XG4gICAgfVxuICAgIGlmICh2aWV3Ll9jbGVhckZsYWdzICYgZW51bXMuQ0xFQVJfU1RFTkNJTCkge1xuICAgICAgY2xlYXJPcHRzLnN0ZW5jaWwgPSB2aWV3Ll9zdGVuY2lsO1xuICAgIH1cbiAgICBkZXZpY2UuY2xlYXIoY2xlYXJPcHRzKTtcblxuICAgIC8vIGdldCBhbGwgZHJhdyBpdGVtc1xuICAgIHRoaXMuX2RyYXdJdGVtc1Bvb2xzLnJlc2V0KCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjZW5lLl9tb2RlbHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxldCBtb2RlbCA9IHNjZW5lLl9tb2RlbHMuZGF0YVtpXTtcblxuICAgICAgLy8gZmlsdGVyIG1vZGVsIGJ5IHZpZXdcbiAgICAgIGlmICgobW9kZWwuX2N1bGxpbmdNYXNrICYgdmlldy5fY3VsbGluZ01hc2spID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgZHJhd0l0ZW0gPSB0aGlzLl9kcmF3SXRlbXNQb29scy5hZGQoKTtcbiAgICAgIG1vZGVsLmV4dHJhY3REcmF3SXRlbShkcmF3SXRlbSk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogdXBkYXRlIGZydXN0dW1cbiAgICAvLyBUT0RPOiB2aXNiaWxpdHkgdGVzdFxuICAgIC8vIGZydXN0dW0udXBkYXRlKHZpZXcuX3ZpZXdQcm9qKTtcblxuICAgIC8vIGRpc3BhdGNoIGRyYXcgaXRlbXMgdG8gZGlmZmVyZW50IHN0YWdlXG4gICAgX3N0YWdlSW5mb3MucmVzZXQoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmlldy5fc3RhZ2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICBsZXQgc3RhZ2UgPSB2aWV3Ll9zdGFnZXNbaV07XG4gICAgICBsZXQgc3RhZ2VJdGVtcyA9IHRoaXMuX3N0YWdlSXRlbXNQb29scy5hZGQoKTtcbiAgICAgIHN0YWdlSXRlbXMucmVzZXQoKTtcblxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLl9kcmF3SXRlbXNQb29scy5sZW5ndGg7ICsraikge1xuICAgICAgICBsZXQgZHJhd0l0ZW0gPSB0aGlzLl9kcmF3SXRlbXNQb29scy5kYXRhW2pdO1xuICAgICAgICBsZXQgdGVjaCA9IGRyYXdJdGVtLmVmZmVjdC5nZXRUZWNobmlxdWUoc3RhZ2UpO1xuXG4gICAgICAgIGlmICh0ZWNoKSB7XG4gICAgICAgICAgbGV0IHN0YWdlSXRlbSA9IHN0YWdlSXRlbXMuYWRkKCk7XG4gICAgICAgICAgc3RhZ2VJdGVtLm1vZGVsID0gZHJhd0l0ZW0ubW9kZWw7XG4gICAgICAgICAgc3RhZ2VJdGVtLm5vZGUgPSBkcmF3SXRlbS5ub2RlO1xuICAgICAgICAgIHN0YWdlSXRlbS5pYSA9IGRyYXdJdGVtLmlhO1xuICAgICAgICAgIHN0YWdlSXRlbS5lZmZlY3QgPSBkcmF3SXRlbS5lZmZlY3Q7XG4gICAgICAgICAgc3RhZ2VJdGVtLmRlZmluZXMgPSBkcmF3SXRlbS5kZWZpbmVzO1xuICAgICAgICAgIHN0YWdlSXRlbS50ZWNobmlxdWUgPSB0ZWNoO1xuICAgICAgICAgIHN0YWdlSXRlbS5zb3J0S2V5ID0gLTE7XG4gICAgICAgICAgc3RhZ2VJdGVtLnVuaWZvcm1zID0gZHJhd0l0ZW0udW5pZm9ybXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IHN0YWdlSW5mbyA9IF9zdGFnZUluZm9zLmFkZCgpO1xuICAgICAgc3RhZ2VJbmZvLnN0YWdlID0gc3RhZ2U7XG4gICAgICBzdGFnZUluZm8uaXRlbXMgPSBzdGFnZUl0ZW1zO1xuICAgIH1cblxuICAgIC8vIHJlbmRlciBzdGFnZXNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IF9zdGFnZUluZm9zLmxlbmd0aDsgKytpKSB7XG4gICAgICBsZXQgaW5mbyA9IF9zdGFnZUluZm9zLmRhdGFbaV07XG4gICAgICBsZXQgZm4gPSB0aGlzLl9zdGFnZTJmbltpbmZvLnN0YWdlXTtcblxuICAgICAgZm4odmlldywgaW5mby5pdGVtcyk7XG4gICAgfVxuICB9XG5cbiAgX3NldFByb3BlcnR5IChwcm9wKSB7XG4gICAgY29uc3QgZGV2aWNlID0gdGhpcy5fZGV2aWNlO1xuICAgIGxldCBwYXJhbSA9IHByb3AudmFsdWU7XG5cbiAgICBpZiAocGFyYW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW0gPSBwcm9wLnZhbDtcbiAgICB9XG5cbiAgICBpZiAocGFyYW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcGFyYW0gPSB0aGlzLl90eXBlMmRlZmF1bHRWYWx1ZVtwcm9wLnR5cGVdO1xuICAgIH1cblxuICAgIGlmIChwYXJhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byBzZXQgdGVjaG5pcXVlIHByb3BlcnR5ICR7cHJvcC5uYW1lfSwgdmFsdWUgbm90IGZvdW5kLmApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHByb3AudHlwZSA9PT0gZW51bXMuUEFSQU1fVEVYVFVSRV8yRCB8fFxuICAgICAgcHJvcC50eXBlID09PSBlbnVtcy5QQVJBTV9URVhUVVJFX0NVQkVcbiAgICApIHtcbiAgICAgIGlmIChwcm9wLnNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAocHJvcC5zaXplICE9PSBwYXJhbS5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBUaGUgbGVuZ3RoIG9mIHRleHR1cmUgYXJyYXkgKCR7cGFyYW0ubGVuZ3RofSkgaXMgbm90IGNvcnJlbnQoZXhwZWN0ICR7cHJvcC5zaXplfSkuYCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzbG90cyA9IF9pbnQ2NF9wb29sLmFkZCgpO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcGFyYW0ubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgICAgc2xvdHNbaW5kZXhdID0gdGhpcy5fYWxsb2NUZXh0dXJlVW5pdCgpO1xuICAgICAgICB9XG4gICAgICAgIGRldmljZS5zZXRUZXh0dXJlQXJyYXkocHJvcC5uYW1lLCBwYXJhbSwgc2xvdHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGV2aWNlLnNldFRleHR1cmUocHJvcC5uYW1lLCBwYXJhbSwgdGhpcy5fYWxsb2NUZXh0dXJlVW5pdCgpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGNvbnZlcnRlZFZhbHVlO1xuICAgICAgaWYgKHBhcmFtIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8IHBhcmFtIGluc3RhbmNlb2YgSW50MzJBcnJheSkge1xuICAgICAgICBkZXZpY2Uuc2V0VW5pZm9ybURpcmVjdGx5KHByb3AubmFtZSwgcGFyYW0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChwcm9wLnNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgY29udmVydEFycmF5ID0gX3R5cGUydW5pZm9ybUFycmF5VmFsdWVbcHJvcC50eXBlXTtcbiAgICAgICAgaWYgKGNvbnZlcnRBcnJheS5mdW5jID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmlmb3JtIGFycmF5IG9mIGNvbG9yMy9pbnQzL2Zsb2F0My9tYXQzIGNhbiBub3QgYmUgc3VwcG9ydHRlZCEnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3Auc2l6ZSAqIGNvbnZlcnRBcnJheS5zaXplID4gNjQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmlmb3JtIGFycmF5IGlzIHRvbyBsb25nIScpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb252ZXJ0ZWRWYWx1ZSA9IGNvbnZlcnRBcnJheS5mdW5jKHBhcmFtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBjb252ZXJ0Rm4gPSBfdHlwZTJ1bmlmb3JtVmFsdWVbcHJvcC50eXBlXTtcbiAgICAgICAgY29udmVydGVkVmFsdWUgPSBjb252ZXJ0Rm4ocGFyYW0pO1xuICAgICAgfVxuICAgICAgZGV2aWNlLnNldFVuaWZvcm0ocHJvcC5uYW1lLCBjb252ZXJ0ZWRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgX2RyYXcoaXRlbSkge1xuICAgIGNvbnN0IGRldmljZSA9IHRoaXMuX2RldmljZTtcbiAgICBjb25zdCBwcm9ncmFtTGliID0gdGhpcy5fcHJvZ3JhbUxpYjtcbiAgICBjb25zdCB7IG5vZGUsIGlhLCB1bmlmb3JtcywgdGVjaG5pcXVlLCBkZWZpbmVzLCBlZmZlY3QgfSA9IGl0ZW07XG5cbiAgICAvLyByZXNldCB0aGUgcG9vbFxuICAgIC8vIE5PVEU6IHdlIGNhbiB1c2UgZHJhd0NvdW50ZXIgb3B0aW1pemUgdGhpc1xuICAgIC8vIFRPRE86IHNob3VsZCBiZSBjb25maWd1cmFibGVcbiAgICBfZmxvYXQyX3Bvb2wucmVzZXQoKTtcbiAgICBfZmxvYXQzX3Bvb2wucmVzZXQoKTtcbiAgICBfZmxvYXQ0X3Bvb2wucmVzZXQoKTtcbiAgICBfZmxvYXQ5X3Bvb2wucmVzZXQoKTtcbiAgICBfZmxvYXQxNl9wb29sLnJlc2V0KCk7XG4gICAgX2Zsb2F0NjRfcG9vbC5yZXNldCgpO1xuICAgIF9pbnQyX3Bvb2wucmVzZXQoKTtcbiAgICBfaW50M19wb29sLnJlc2V0KCk7XG4gICAgX2ludDRfcG9vbC5yZXNldCgpO1xuICAgIF9pbnQ2NF9wb29sLnJlc2V0KCk7XG5cbiAgICAvLyBzZXQgY29tbW9uIHVuaWZvcm1zXG4gICAgLy8gVE9ETzogdHJ5IGNvbW1pdCB0aGlzIGRlcGVuZHMgb24gZWZmZWN0XG4gICAgLy8ge1xuICAgIG5vZGUuZ2V0V29ybGRNYXRyaXgoX200X3RtcCk7XG4gICAgZGV2aWNlLnNldFVuaWZvcm0oJ2NjX21hdFdvcmxkJywgbWF0NC5hcnJheShfZmxvYXQxNl9wb29sLmFkZCgpLCBfbTRfdG1wKSk7XG5cbiAgICBsZXQgaW52ZXJzZSA9IG1hdDMuaW52ZXJ0KF9tM190bXAsIG1hdDMuZnJvbU1hdDQoX20zX3RtcCwgX200X3RtcCkpO1xuICAgIGlmIChpbnZlcnNlKSB7XG4gICAgICBtYXQzLnRyYW5zcG9zZShfbTNfdG1wLCBpbnZlcnNlKTtcbiAgICAgIGRldmljZS5zZXRVbmlmb3JtKCdjY19tYXRXb3JsZElUJywgbWF0My5hcnJheShfZmxvYXQ5X3Bvb2wuYWRkKCksIF9tM190bXApKTtcbiAgICB9XG4gICAgLy8gfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bmlmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHR5cGVVbmlmb3JtcyA9IHVuaWZvcm1zW2ldO1xuICAgICAgZm9yIChsZXQga2V5IGluIHR5cGVVbmlmb3Jtcykge1xuICAgICAgICB0aGlzLl9zZXRQcm9wZXJ0eSh0eXBlVW5pZm9ybXNba2V5XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZm9yIGVhY2ggcGFzc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGVjaG5pcXVlLl9wYXNzZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxldCBwYXNzID0gdGVjaG5pcXVlLl9wYXNzZXNbaV07XG4gICAgICBsZXQgY291bnQgPSBpYS5jb3VudDtcblxuICAgICAgLy8gc2V0IHZlcnRleCBidWZmZXJcbiAgICAgIGlmIChpYS5fdmVydGV4QnVmZmVyKSB7XG4gICAgICAgIGRldmljZS5zZXRWZXJ0ZXhCdWZmZXIoMCwgaWEuX3ZlcnRleEJ1ZmZlcik7XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCBpbmRleCBidWZmZXJcbiAgICAgIGlmIChpYS5faW5kZXhCdWZmZXIpIHtcbiAgICAgICAgZGV2aWNlLnNldEluZGV4QnVmZmVyKGlhLl9pbmRleEJ1ZmZlcik7XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCBwcmltaXRpdmUgdHlwZVxuICAgICAgZGV2aWNlLnNldFByaW1pdGl2ZVR5cGUoaWEuX3ByaW1pdGl2ZVR5cGUpO1xuXG4gICAgICAvLyBzZXQgcHJvZ3JhbVxuICAgICAgbGV0IHByb2dyYW0gPSBwcm9ncmFtTGliLmdldFByb2dyYW0ocGFzcy5fcHJvZ3JhbU5hbWUsIGRlZmluZXMsIGVmZmVjdC5fbmFtZSk7XG4gICAgICBkZXZpY2Uuc2V0UHJvZ3JhbShwcm9ncmFtKTtcblxuICAgICAgLy8gY3VsbCBtb2RlXG4gICAgICBkZXZpY2Uuc2V0Q3VsbE1vZGUocGFzcy5fY3VsbE1vZGUpO1xuXG4gICAgICAvLyBibGVuZFxuICAgICAgaWYgKHBhc3MuX2JsZW5kKSB7XG4gICAgICAgIGRldmljZS5lbmFibGVCbGVuZCgpO1xuICAgICAgICBkZXZpY2Uuc2V0QmxlbmRGdW5jU2VwKFxuICAgICAgICAgIHBhc3MuX2JsZW5kU3JjLFxuICAgICAgICAgIHBhc3MuX2JsZW5kRHN0LFxuICAgICAgICAgIHBhc3MuX2JsZW5kU3JjQWxwaGEsXG4gICAgICAgICAgcGFzcy5fYmxlbmREc3RBbHBoYVxuICAgICAgICApO1xuICAgICAgICBkZXZpY2Uuc2V0QmxlbmRFcVNlcChcbiAgICAgICAgICBwYXNzLl9ibGVuZEVxLFxuICAgICAgICAgIHBhc3MuX2JsZW5kQWxwaGFFcVxuICAgICAgICApO1xuICAgICAgICBkZXZpY2Uuc2V0QmxlbmRDb2xvcjMyKHBhc3MuX2JsZW5kQ29sb3IpO1xuICAgICAgfVxuXG4gICAgICAvLyBkZXB0aCB0ZXN0ICYgd3JpdGVcbiAgICAgIGlmIChwYXNzLl9kZXB0aFRlc3QpIHtcbiAgICAgICAgZGV2aWNlLmVuYWJsZURlcHRoVGVzdCgpO1xuICAgICAgICBkZXZpY2Uuc2V0RGVwdGhGdW5jKHBhc3MuX2RlcHRoRnVuYyk7XG4gICAgICB9XG4gICAgICBpZiAocGFzcy5fZGVwdGhXcml0ZSkge1xuICAgICAgICBkZXZpY2UuZW5hYmxlRGVwdGhXcml0ZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBzdGVuY2lsXG4gICAgICBkZXZpY2Uuc2V0U3RlbmNpbFRlc3QocGFzcy5fc3RlbmNpbFRlc3QpO1xuICAgICAgaWYgKHBhc3MuX3N0ZW5jaWxUZXN0ID09PSBnZnguU1RFTkNJTF9FTkFCTEUpIHtcbiAgICAgICAgLy8gZnJvbnRcbiAgICAgICAgZGV2aWNlLnNldFN0ZW5jaWxGdW5jRnJvbnQoXG4gICAgICAgICAgcGFzcy5fc3RlbmNpbEZ1bmNGcm9udCxcbiAgICAgICAgICBwYXNzLl9zdGVuY2lsUmVmRnJvbnQsXG4gICAgICAgICAgcGFzcy5fc3RlbmNpbE1hc2tGcm9udFxuICAgICAgICApO1xuICAgICAgICBkZXZpY2Uuc2V0U3RlbmNpbE9wRnJvbnQoXG4gICAgICAgICAgcGFzcy5fc3RlbmNpbEZhaWxPcEZyb250LFxuICAgICAgICAgIHBhc3MuX3N0ZW5jaWxaRmFpbE9wRnJvbnQsXG4gICAgICAgICAgcGFzcy5fc3RlbmNpbFpQYXNzT3BGcm9udCxcbiAgICAgICAgICBwYXNzLl9zdGVuY2lsV3JpdGVNYXNrRnJvbnRcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBiYWNrXG4gICAgICAgIGRldmljZS5zZXRTdGVuY2lsRnVuY0JhY2soXG4gICAgICAgICAgcGFzcy5fc3RlbmNpbEZ1bmNCYWNrLFxuICAgICAgICAgIHBhc3MuX3N0ZW5jaWxSZWZCYWNrLFxuICAgICAgICAgIHBhc3MuX3N0ZW5jaWxNYXNrQmFja1xuICAgICAgICApO1xuICAgICAgICBkZXZpY2Uuc2V0U3RlbmNpbE9wQmFjayhcbiAgICAgICAgICBwYXNzLl9zdGVuY2lsRmFpbE9wQmFjayxcbiAgICAgICAgICBwYXNzLl9zdGVuY2lsWkZhaWxPcEJhY2ssXG4gICAgICAgICAgcGFzcy5fc3RlbmNpbFpQYXNzT3BCYWNrLFxuICAgICAgICAgIHBhc3MuX3N0ZW5jaWxXcml0ZU1hc2tCYWNrXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIGRyYXcgcGFzc1xuICAgICAgZGV2aWNlLmRyYXcoaWEuX3N0YXJ0LCBjb3VudCk7XG5cbiAgICAgIHRoaXMuX3Jlc2V0VGV4dHVlclVuaXQoKTtcbiAgICB9XG4gIH1cbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfdHlwZTJ1bmlmb3JtVmFsdWUyLCBfdHlwZTJ1bmlmb3JtQXJyYXlWYWw7XG5cbnZhciBfbWVtb3AgPSByZXF1aXJlKCcuLi9tZW1vcCcpO1xuXG52YXIgX2VudW1zID0gcmVxdWlyZSgnLi4vZW51bXMnKTtcblxudmFyIF9lbnVtczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbnVtcyk7XG5cbnZhciBfdm1hdGggPSByZXF1aXJlKCcuLi8uLi9jb3JlL3ZtYXRoJyk7XG5cbnZhciBfcHJvZ3JhbUxpYiA9IHJlcXVpcmUoJy4vcHJvZ3JhbS1saWInKTtcblxudmFyIF9wcm9ncmFtTGliMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb2dyYW1MaWIpO1xuXG52YXIgX3ZpZXcgPSByZXF1aXJlKCcuL3ZpZXcnKTtcblxudmFyIF92aWV3MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZpZXcpO1xuXG52YXIgX2dmeCA9IHJlcXVpcmUoJy4uL2dmeCcpO1xuXG52YXIgX2dmeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZngpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfSAvLyBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gXG5cbnZhciBfbTNfdG1wID0gX3ZtYXRoLm1hdDMuY3JlYXRlKCk7XG52YXIgX200X3RtcCA9IF92bWF0aC5tYXQ0LmNyZWF0ZSgpO1xuXG52YXIgX3N0YWdlSW5mb3MgPSBuZXcgX21lbW9wLlJlY3ljbGVQb29sKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGFnZTogbnVsbCxcbiAgICBpdGVtczogbnVsbFxuICB9O1xufSwgOCk7XG5cbnZhciBfZmxvYXQyX3Bvb2wgPSBuZXcgX21lbW9wLlJlY3ljbGVQb29sKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoMik7XG59LCA4KTtcblxudmFyIF9mbG9hdDNfcG9vbCA9IG5ldyBfbWVtb3AuUmVjeWNsZVBvb2woZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSgzKTtcbn0sIDgpO1xuXG52YXIgX2Zsb2F0NF9wb29sID0gbmV3IF9tZW1vcC5SZWN5Y2xlUG9vbChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDQpO1xufSwgOCk7XG5cbnZhciBfZmxvYXQ5X3Bvb2wgPSBuZXcgX21lbW9wLlJlY3ljbGVQb29sKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoOSk7XG59LCA4KTtcblxudmFyIF9mbG9hdDE2X3Bvb2wgPSBuZXcgX21lbW9wLlJlY3ljbGVQb29sKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoMTYpO1xufSwgOCk7XG5cbnZhciBfZmxvYXQ2NF9wb29sID0gbmV3IF9tZW1vcC5SZWN5Y2xlUG9vbChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDY0KTtcbn0sIDgpO1xuXG52YXIgX2ludDJfcG9vbCA9IG5ldyBfbWVtb3AuUmVjeWNsZVBvb2woZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IEludDMyQXJyYXkoMik7XG59LCA4KTtcblxudmFyIF9pbnQzX3Bvb2wgPSBuZXcgX21lbW9wLlJlY3ljbGVQb29sKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDMpO1xufSwgOCk7XG5cbnZhciBfaW50NF9wb29sID0gbmV3IF9tZW1vcC5SZWN5Y2xlUG9vbChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgSW50MzJBcnJheSg0KTtcbn0sIDgpO1xuXG52YXIgX2ludDY0X3Bvb2wgPSBuZXcgX21lbW9wLlJlY3ljbGVQb29sKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBJbnQzMkFycmF5KDY0KTtcbn0sIDgpO1xuXG52YXIgX3R5cGUydW5pZm9ybVZhbHVlID0gKF90eXBlMnVuaWZvcm1WYWx1ZTIgPSB7fSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1WYWx1ZTIsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9JTlQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1WYWx1ZTIsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9JTlQyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIF92bWF0aC52ZWMyLmFycmF5KF9pbnQyX3Bvb2wuYWRkKCksIHZhbHVlKTtcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybVZhbHVlMiwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0lOVDMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gX3ZtYXRoLnZlYzMuYXJyYXkoX2ludDNfcG9vbC5hZGQoKSwgdmFsdWUpO1xufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtVmFsdWUyLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fSU5UNCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBfdm1hdGgudmVjNC5hcnJheShfaW50NF9wb29sLmFkZCgpLCB2YWx1ZSk7XG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1WYWx1ZTIsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9GTE9BVCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybVZhbHVlMiwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0ZMT0FUMiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBfdm1hdGgudmVjMi5hcnJheShfZmxvYXQyX3Bvb2wuYWRkKCksIHZhbHVlKTtcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybVZhbHVlMiwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0ZMT0FUMywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBfdm1hdGgudmVjMy5hcnJheShfZmxvYXQzX3Bvb2wuYWRkKCksIHZhbHVlKTtcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybVZhbHVlMiwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0ZMT0FUNCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBfdm1hdGgudmVjNC5hcnJheShfZmxvYXQ0X3Bvb2wuYWRkKCksIHZhbHVlKTtcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybVZhbHVlMiwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0NPTE9SMywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBfdm1hdGguY29sb3IzLmFycmF5KF9mbG9hdDNfcG9vbC5hZGQoKSwgdmFsdWUpO1xufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtVmFsdWUyLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fQ09MT1I0LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIF92bWF0aC5jb2xvcjQuYXJyYXkoX2Zsb2F0NF9wb29sLmFkZCgpLCB2YWx1ZSk7XG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1WYWx1ZTIsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9NQVQyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIF92bWF0aC5tYXQyLmFycmF5KF9mbG9hdDRfcG9vbC5hZGQoKSwgdmFsdWUpO1xufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtVmFsdWUyLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fTUFUMywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBfdm1hdGgubWF0My5hcnJheShfZmxvYXQ5X3Bvb2wuYWRkKCksIHZhbHVlKTtcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybVZhbHVlMiwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX01BVDQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gX3ZtYXRoLm1hdDQuYXJyYXkoX2Zsb2F0MTZfcG9vbC5hZGQoKSwgdmFsdWUpO1xufSksIF90eXBlMnVuaWZvcm1WYWx1ZTIpO1xuXG52YXIgX3R5cGUydW5pZm9ybUFycmF5VmFsdWUgPSAoX3R5cGUydW5pZm9ybUFycmF5VmFsID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtQXJyYXlWYWwsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9JTlQsIHtcbiAgZnVuYzogZnVuY3Rpb24gZnVuYyh2YWx1ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gX2ludDY0X3Bvb2wuYWRkKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHJlc3VsdFtpXSA9IHZhbHVlc1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICBzaXplOiAxXG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1BcnJheVZhbCwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0lOVDIsIHtcbiAgZnVuYzogZnVuY3Rpb24gZnVuYyh2YWx1ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gX2ludDY0X3Bvb2wuYWRkKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHJlc3VsdFsyICogaV0gPSB2YWx1ZXNbaV0ueDtcbiAgICAgIHJlc3VsdFsyICogaSArIDFdID0gdmFsdWVzW2ldLnk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgc2l6ZTogMlxufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtQXJyYXlWYWwsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9JTlQzLCB7XG4gIGZ1bmM6IHVuZGVmaW5lZCxcbiAgc2l6ZTogM1xufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtQXJyYXlWYWwsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9JTlQ0LCB7XG4gIGZ1bmM6IGZ1bmN0aW9uIGZ1bmModmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IF9pbnQ2NF9wb29sLmFkZCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgdiA9IHZhbHVlc1tpXTtcbiAgICAgIHJlc3VsdFs0ICogaV0gPSB2Lng7XG4gICAgICByZXN1bHRbNCAqIGkgKyAxXSA9IHYueTtcbiAgICAgIHJlc3VsdFs0ICogaSArIDJdID0gdi56O1xuICAgICAgcmVzdWx0WzQgKiBpICsgM10gPSB2Lnc7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgc2l6ZTogNFxufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtQXJyYXlWYWwsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9GTE9BVCwge1xuICBmdW5jOiBmdW5jdGlvbiBmdW5jKHZhbHVlcykge1xuICAgIHZhciByZXN1bHQgPSBfZmxvYXQ2NF9wb29sLmFkZCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICByZXN1bHRbaV0gPSB2YWx1ZXNbaV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgc2l6ZTogMVxufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtQXJyYXlWYWwsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9GTE9BVDIsIHtcbiAgZnVuYzogZnVuY3Rpb24gZnVuYyh2YWx1ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gX2Zsb2F0NjRfcG9vbC5hZGQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgcmVzdWx0WzIgKiBpXSA9IHZhbHVlc1tpXS54O1xuICAgICAgcmVzdWx0WzIgKiBpICsgMV0gPSB2YWx1ZXNbaV0ueTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICBzaXplOiAyXG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1BcnJheVZhbCwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0ZMT0FUMywge1xuICBmdW5jOiB1bmRlZmluZWQsXG4gIHNpemU6IDNcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybUFycmF5VmFsLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fRkxPQVQ0LCB7XG4gIGZ1bmM6IGZ1bmN0aW9uIGZ1bmModmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IF9mbG9hdDY0X3Bvb2wuYWRkKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciB2ID0gdmFsdWVzW2ldO1xuICAgICAgcmVzdWx0WzQgKiBpXSA9IHYueDtcbiAgICAgIHJlc3VsdFs0ICogaSArIDFdID0gdi55O1xuICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSB2Lno7XG4gICAgICByZXN1bHRbNCAqIGkgKyAzXSA9IHYudztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICBzaXplOiA0XG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1BcnJheVZhbCwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0NPTE9SMywge1xuICBmdW5jOiB1bmRlZmluZWQsXG4gIHNpemU6IDNcbn0pLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUydW5pZm9ybUFycmF5VmFsLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fQ09MT1I0LCB7XG4gIGZ1bmM6IGZ1bmN0aW9uIGZ1bmModmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IF9mbG9hdDY0X3Bvb2wuYWRkKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciB2ID0gdmFsdWVzW2ldO1xuICAgICAgcmVzdWx0WzQgKiBpXSA9IHYucjtcbiAgICAgIHJlc3VsdFs0ICogaSArIDFdID0gdi5nO1xuICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSB2LmI7XG4gICAgICByZXN1bHRbNCAqIGkgKyAzXSA9IHYuYTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICBzaXplOiA0XG59KSwgX2RlZmluZVByb3BlcnR5KF90eXBlMnVuaWZvcm1BcnJheVZhbCwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX01BVDIsIHtcbiAgZnVuYzogZnVuY3Rpb24gZnVuYyh2YWx1ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gX2Zsb2F0NjRfcG9vbC5hZGQoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIHYgPSB2YWx1ZXNbaV07XG4gICAgICByZXN1bHRbNCAqIGldID0gdi5tMDA7XG4gICAgICByZXN1bHRbNCAqIGkgKyAxXSA9IHYubTAxO1xuICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSB2Lm0wMjtcbiAgICAgIHJlc3VsdFs0ICogaSArIDNdID0gdi5tMDM7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgc2l6ZTogNFxufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtQXJyYXlWYWwsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9NQVQzLCB7XG4gIGZ1bmM6IHVuZGVmaW5lZCxcbiAgc2l6ZTogOVxufSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJ1bmlmb3JtQXJyYXlWYWwsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9NQVQ0LCB7XG4gIGZ1bmM6IGZ1bmN0aW9uIGZ1bmModmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IF9mbG9hdDY0X3Bvb2wuYWRkKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciB2ID0gdmFsdWVzW2ldO1xuICAgICAgcmVzdWx0WzE2ICogaV0gPSB2Lm0wMDtcbiAgICAgIHJlc3VsdFsxNiAqIGkgKyAxXSA9IHYubTAxO1xuICAgICAgcmVzdWx0WzE2ICogaSArIDJdID0gdi5tMDI7XG4gICAgICByZXN1bHRbMTYgKiBpICsgM10gPSB2Lm0wMztcbiAgICAgIHJlc3VsdFsxNiAqIGkgKyA0XSA9IHYubTA0O1xuICAgICAgcmVzdWx0WzE2ICogaSArIDVdID0gdi5tMDU7XG4gICAgICByZXN1bHRbMTYgKiBpICsgNl0gPSB2Lm0wNjtcbiAgICAgIHJlc3VsdFsxNiAqIGkgKyA3XSA9IHYubTA3O1xuICAgICAgcmVzdWx0WzE2ICogaSArIDhdID0gdi5tMDg7XG4gICAgICByZXN1bHRbMTYgKiBpICsgOV0gPSB2Lm0wOTtcbiAgICAgIHJlc3VsdFsxNiAqIGkgKyAxMF0gPSB2Lm0xMDtcbiAgICAgIHJlc3VsdFsxNiAqIGkgKyAxMV0gPSB2Lm0xMTtcbiAgICAgIHJlc3VsdFsxNiAqIGkgKyAxMl0gPSB2Lm0xMjtcbiAgICAgIHJlc3VsdFsxNiAqIGkgKyAxM10gPSB2Lm0xMztcbiAgICAgIHJlc3VsdFsxNiAqIGkgKyAxNF0gPSB2Lm0xNDtcbiAgICAgIHJlc3VsdFsxNiAqIGkgKyAxNV0gPSB2Lm0xNTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICBzaXplOiAxNlxufSksIF90eXBlMnVuaWZvcm1BcnJheVZhbCk7XG5cbnZhciBCYXNlID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtnZnguRGV2aWNlfSBkZXZpY2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAgICogQHBhcmFtIHtnZnguVGV4dHVyZTJEfSBvcHRzLmRlZmF1bHRUZXh0dXJlXG4gICAqIEBwYXJhbSB7Z2Z4LlRleHR1cmVDdWJlfSBvcHRzLmRlZmF1bHRUZXh0dXJlQ3ViZVxuICAgKi9cbiAgZnVuY3Rpb24gQmFzZShkZXZpY2UsIG9wdHMpIHtcbiAgICB2YXIgX3R5cGUyZGVmYXVsdFZhbHVlO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2UpO1xuXG4gICAgdGhpcy5fZGV2aWNlID0gZGV2aWNlO1xuICAgIHRoaXMuX3Byb2dyYW1MaWIgPSBuZXcgX3Byb2dyYW1MaWIyLmRlZmF1bHQoZGV2aWNlKTtcbiAgICB0aGlzLl9vcHRzID0gb3B0cztcbiAgICB0aGlzLl90eXBlMmRlZmF1bHRWYWx1ZSA9IChfdHlwZTJkZWZhdWx0VmFsdWUgPSB7fSwgX2RlZmluZVByb3BlcnR5KF90eXBlMmRlZmF1bHRWYWx1ZSwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0lOVCwgMCksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9JTlQyLCBfdm1hdGgudmVjMi5jcmVhdGUoMCwgMCkpLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUyZGVmYXVsdFZhbHVlLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fSU5UMywgX3ZtYXRoLnZlYzMuY3JlYXRlKDAsIDAsIDApKSwgX2RlZmluZVByb3BlcnR5KF90eXBlMmRlZmF1bHRWYWx1ZSwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0lOVDQsIF92bWF0aC52ZWM0LmNyZWF0ZSgwLCAwLCAwLCAwKSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9GTE9BVCwgMC4wKSwgX2RlZmluZVByb3BlcnR5KF90eXBlMmRlZmF1bHRWYWx1ZSwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0ZMT0FUMiwgX3ZtYXRoLnZlYzIuY3JlYXRlKDAsIDApKSwgX2RlZmluZVByb3BlcnR5KF90eXBlMmRlZmF1bHRWYWx1ZSwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0ZMT0FUMywgX3ZtYXRoLnZlYzMuY3JlYXRlKDAsIDAsIDApKSwgX2RlZmluZVByb3BlcnR5KF90eXBlMmRlZmF1bHRWYWx1ZSwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0ZMT0FUNCwgX3ZtYXRoLnZlYzQuY3JlYXRlKDAsIDAsIDAsIDApKSwgX2RlZmluZVByb3BlcnR5KF90eXBlMmRlZmF1bHRWYWx1ZSwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX0NPTE9SMywgX3ZtYXRoLmNvbG9yMy5jcmVhdGUoMCwgMCwgMCkpLCBfZGVmaW5lUHJvcGVydHkoX3R5cGUyZGVmYXVsdFZhbHVlLCBfZW51bXMyLmRlZmF1bHQuUEFSQU1fQ09MT1I0LCBfdm1hdGguY29sb3I0LmNyZWF0ZSgwLCAwLCAwLCAxKSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9NQVQyLCBfdm1hdGgubWF0Mi5jcmVhdGUoKSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9NQVQzLCBfdm1hdGgubWF0My5jcmVhdGUoKSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9NQVQ0LCBfdm1hdGgubWF0NC5jcmVhdGUoKSksIF9kZWZpbmVQcm9wZXJ0eShfdHlwZTJkZWZhdWx0VmFsdWUsIF9lbnVtczIuZGVmYXVsdC5QQVJBTV9URVhUVVJFXzJELCBvcHRzLmRlZmF1bHRUZXh0dXJlKSwgX2RlZmluZVByb3BlcnR5KF90eXBlMmRlZmF1bHRWYWx1ZSwgX2VudW1zMi5kZWZhdWx0LlBBUkFNX1RFWFRVUkVfQ1VCRSwgb3B0cy5kZWZhdWx0VGV4dHVyZUN1YmUpLCBfdHlwZTJkZWZhdWx0VmFsdWUpO1xuICAgIHRoaXMuX3N0YWdlMmZuID0ge307XG4gICAgdGhpcy5fdXNlZFRleHR1cmVVbml0cyA9IDA7XG5cbiAgICB0aGlzLl92aWV3UG9vbHMgPSBuZXcgX21lbW9wLlJlY3ljbGVQb29sKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgX3ZpZXcyLmRlZmF1bHQoKTtcbiAgICB9LCA4KTtcblxuICAgIHRoaXMuX2RyYXdJdGVtc1Bvb2xzID0gbmV3IF9tZW1vcC5SZWN5Y2xlUG9vbChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtb2RlbDogbnVsbCxcbiAgICAgICAgbm9kZTogbnVsbCxcbiAgICAgICAgaWE6IG51bGwsXG4gICAgICAgIGVmZmVjdDogbnVsbCxcbiAgICAgICAgZGVmaW5lczogbnVsbCxcbiAgICAgICAgdW5pZm9ybXM6IG51bGxcbiAgICAgIH07XG4gICAgfSwgMTAwKTtcblxuICAgIHRoaXMuX3N0YWdlSXRlbXNQb29scyA9IG5ldyBfbWVtb3AuUmVjeWNsZVBvb2woZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBfbWVtb3AuUmVjeWNsZVBvb2woZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1vZGVsOiBudWxsLFxuICAgICAgICAgIG5vZGU6IG51bGwsXG4gICAgICAgICAgaWE6IG51bGwsXG4gICAgICAgICAgZWZmZWN0OiBudWxsLFxuICAgICAgICAgIGRlZmluZXM6IG51bGwsXG4gICAgICAgICAgdGVjaG5pcXVlOiBudWxsLFxuICAgICAgICAgIHNvcnRLZXk6IC0xLFxuICAgICAgICAgIHVuaWZvcm1zOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9LCAxMDApO1xuICAgIH0sIDE2KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhCYXNlLCBbe1xuICAgIGtleTogJ19yZXNldFRleHR1ZXJVbml0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc2V0VGV4dHVlclVuaXQoKSB7XG4gICAgICB0aGlzLl91c2VkVGV4dHVyZVVuaXRzID0gMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfYWxsb2NUZXh0dXJlVW5pdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hbGxvY1RleHR1cmVVbml0KCkge1xuICAgICAgdmFyIGRldmljZSA9IHRoaXMuX2RldmljZTtcblxuICAgICAgdmFyIHVuaXQgPSB0aGlzLl91c2VkVGV4dHVyZVVuaXRzO1xuICAgICAgaWYgKHVuaXQgPj0gZGV2aWNlLl9jYXBzLm1heFRleHR1cmVVbml0cykge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1RyeWluZyB0byB1c2UgJyArIHVuaXQgKyAnIHRleHR1cmUgdW5pdHMgd2hpbGUgdGhpcyBHUFUgc3VwcG9ydHMgb25seSAnICsgZGV2aWNlLl9jYXBzLm1heFRleHR1cmVVbml0cyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VzZWRUZXh0dXJlVW5pdHMgKz0gMTtcbiAgICAgIHJldHVybiB1bml0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19yZWdpc3RlclN0YWdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlZ2lzdGVyU3RhZ2UobmFtZSwgZm4pIHtcbiAgICAgIHRoaXMuX3N0YWdlMmZuW25hbWVdID0gZm47XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2xlYXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHRoaXMuX3Byb2dyYW1MaWIuY2xlYXIoKTtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXNldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5fdmlld1Bvb2xzLnJlc2V0KCk7XG4gICAgICB0aGlzLl9zdGFnZUl0ZW1zUG9vbHMucmVzZXQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfcmVxdWVzdFZpZXcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVxdWVzdFZpZXcoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdmlld1Bvb2xzLmFkZCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19yZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyKHZpZXcsIHNjZW5lKSB7XG4gICAgICB2YXIgZGV2aWNlID0gdGhpcy5fZGV2aWNlO1xuXG4gICAgICAvLyBzZXR1cCBmcmFtZWJ1ZmZlclxuICAgICAgZGV2aWNlLnNldEZyYW1lQnVmZmVyKHZpZXcuX2ZyYW1lYnVmZmVyKTtcblxuICAgICAgLy8gc2V0dXAgdmlld3BvcnRcbiAgICAgIGRldmljZS5zZXRWaWV3cG9ydCh2aWV3Ll9yZWN0LngsIHZpZXcuX3JlY3QueSwgdmlldy5fcmVjdC53LCB2aWV3Ll9yZWN0LmgpO1xuXG4gICAgICAvLyBzZXR1cCBjbGVhclxuICAgICAgdmFyIGNsZWFyT3B0cyA9IHt9O1xuICAgICAgaWYgKHZpZXcuX2NsZWFyRmxhZ3MgJiBfZW51bXMyLmRlZmF1bHQuQ0xFQVJfQ09MT1IpIHtcbiAgICAgICAgY2xlYXJPcHRzLmNvbG9yID0gW3ZpZXcuX2NvbG9yLnIsIHZpZXcuX2NvbG9yLmcsIHZpZXcuX2NvbG9yLmIsIHZpZXcuX2NvbG9yLmFdO1xuICAgICAgfVxuICAgICAgaWYgKHZpZXcuX2NsZWFyRmxhZ3MgJiBfZW51bXMyLmRlZmF1bHQuQ0xFQVJfREVQVEgpIHtcbiAgICAgICAgY2xlYXJPcHRzLmRlcHRoID0gdmlldy5fZGVwdGg7XG4gICAgICB9XG4gICAgICBpZiAodmlldy5fY2xlYXJGbGFncyAmIF9lbnVtczIuZGVmYXVsdC5DTEVBUl9TVEVOQ0lMKSB7XG4gICAgICAgIGNsZWFyT3B0cy5zdGVuY2lsID0gdmlldy5fc3RlbmNpbDtcbiAgICAgIH1cbiAgICAgIGRldmljZS5jbGVhcihjbGVhck9wdHMpO1xuXG4gICAgICAvLyBnZXQgYWxsIGRyYXcgaXRlbXNcbiAgICAgIHRoaXMuX2RyYXdJdGVtc1Bvb2xzLnJlc2V0KCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NlbmUuX21vZGVscy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgbW9kZWwgPSBzY2VuZS5fbW9kZWxzLmRhdGFbaV07XG5cbiAgICAgICAgLy8gZmlsdGVyIG1vZGVsIGJ5IHZpZXdcbiAgICAgICAgaWYgKChtb2RlbC5fY3VsbGluZ01hc2sgJiB2aWV3Ll9jdWxsaW5nTWFzaykgPT09IDApIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkcmF3SXRlbSA9IHRoaXMuX2RyYXdJdGVtc1Bvb2xzLmFkZCgpO1xuICAgICAgICBtb2RlbC5leHRyYWN0RHJhd0l0ZW0oZHJhd0l0ZW0pO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPOiB1cGRhdGUgZnJ1c3R1bVxuICAgICAgLy8gVE9ETzogdmlzYmlsaXR5IHRlc3RcbiAgICAgIC8vIGZydXN0dW0udXBkYXRlKHZpZXcuX3ZpZXdQcm9qKTtcblxuICAgICAgLy8gZGlzcGF0Y2ggZHJhdyBpdGVtcyB0byBkaWZmZXJlbnQgc3RhZ2VcbiAgICAgIF9zdGFnZUluZm9zLnJlc2V0KCk7XG5cbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB2aWV3Ll9zdGFnZXMubGVuZ3RoOyArK19pKSB7XG4gICAgICAgIHZhciBzdGFnZSA9IHZpZXcuX3N0YWdlc1tfaV07XG4gICAgICAgIHZhciBzdGFnZUl0ZW1zID0gdGhpcy5fc3RhZ2VJdGVtc1Bvb2xzLmFkZCgpO1xuICAgICAgICBzdGFnZUl0ZW1zLnJlc2V0KCk7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLl9kcmF3SXRlbXNQb29scy5sZW5ndGg7ICsraikge1xuICAgICAgICAgIHZhciBfZHJhd0l0ZW0gPSB0aGlzLl9kcmF3SXRlbXNQb29scy5kYXRhW2pdO1xuICAgICAgICAgIHZhciB0ZWNoID0gX2RyYXdJdGVtLmVmZmVjdC5nZXRUZWNobmlxdWUoc3RhZ2UpO1xuXG4gICAgICAgICAgaWYgKHRlY2gpIHtcbiAgICAgICAgICAgIHZhciBzdGFnZUl0ZW0gPSBzdGFnZUl0ZW1zLmFkZCgpO1xuICAgICAgICAgICAgc3RhZ2VJdGVtLm1vZGVsID0gX2RyYXdJdGVtLm1vZGVsO1xuICAgICAgICAgICAgc3RhZ2VJdGVtLm5vZGUgPSBfZHJhd0l0ZW0ubm9kZTtcbiAgICAgICAgICAgIHN0YWdlSXRlbS5pYSA9IF9kcmF3SXRlbS5pYTtcbiAgICAgICAgICAgIHN0YWdlSXRlbS5lZmZlY3QgPSBfZHJhd0l0ZW0uZWZmZWN0O1xuICAgICAgICAgICAgc3RhZ2VJdGVtLmRlZmluZXMgPSBfZHJhd0l0ZW0uZGVmaW5lcztcbiAgICAgICAgICAgIHN0YWdlSXRlbS50ZWNobmlxdWUgPSB0ZWNoO1xuICAgICAgICAgICAgc3RhZ2VJdGVtLnNvcnRLZXkgPSAtMTtcbiAgICAgICAgICAgIHN0YWdlSXRlbS51bmlmb3JtcyA9IF9kcmF3SXRlbS51bmlmb3JtcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhZ2VJbmZvID0gX3N0YWdlSW5mb3MuYWRkKCk7XG4gICAgICAgIHN0YWdlSW5mby5zdGFnZSA9IHN0YWdlO1xuICAgICAgICBzdGFnZUluZm8uaXRlbXMgPSBzdGFnZUl0ZW1zO1xuICAgICAgfVxuXG4gICAgICAvLyByZW5kZXIgc3RhZ2VzXG4gICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBfc3RhZ2VJbmZvcy5sZW5ndGg7ICsrX2kyKSB7XG4gICAgICAgIHZhciBpbmZvID0gX3N0YWdlSW5mb3MuZGF0YVtfaTJdO1xuICAgICAgICB2YXIgZm4gPSB0aGlzLl9zdGFnZTJmbltpbmZvLnN0YWdlXTtcblxuICAgICAgICBmbih2aWV3LCBpbmZvLml0ZW1zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfc2V0UHJvcGVydHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UHJvcGVydHkocHJvcCkge1xuICAgICAgdmFyIGRldmljZSA9IHRoaXMuX2RldmljZTtcbiAgICAgIHZhciBwYXJhbSA9IHByb3AudmFsdWU7XG5cbiAgICAgIGlmIChwYXJhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcmFtID0gcHJvcC52YWw7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcmFtID0gdGhpcy5fdHlwZTJkZWZhdWx0VmFsdWVbcHJvcC50eXBlXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gc2V0IHRlY2huaXF1ZSBwcm9wZXJ0eSAnICsgcHJvcC5uYW1lICsgJywgdmFsdWUgbm90IGZvdW5kLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wLnR5cGUgPT09IF9lbnVtczIuZGVmYXVsdC5QQVJBTV9URVhUVVJFXzJEIHx8IHByb3AudHlwZSA9PT0gX2VudW1zMi5kZWZhdWx0LlBBUkFNX1RFWFRVUkVfQ1VCRSkge1xuICAgICAgICBpZiAocHJvcC5zaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocHJvcC5zaXplICE9PSBwYXJhbS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoZSBsZW5ndGggb2YgdGV4dHVyZSBhcnJheSAoJyArIHBhcmFtLmxlbmd0aCArICcpIGlzIG5vdCBjb3JyZW50KGV4cGVjdCAnICsgcHJvcC5zaXplICsgJykuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBzbG90cyA9IF9pbnQ2NF9wb29sLmFkZCgpO1xuICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBwYXJhbS5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgIHNsb3RzW2luZGV4XSA9IHRoaXMuX2FsbG9jVGV4dHVyZVVuaXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGV2aWNlLnNldFRleHR1cmVBcnJheShwcm9wLm5hbWUsIHBhcmFtLCBzbG90cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGV2aWNlLnNldFRleHR1cmUocHJvcC5uYW1lLCBwYXJhbSwgdGhpcy5fYWxsb2NUZXh0dXJlVW5pdCgpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNvbnZlcnRlZFZhbHVlID0gdm9pZCAwO1xuICAgICAgICBpZiAocGFyYW0gaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHwgcGFyYW0gaW5zdGFuY2VvZiBJbnQzMkFycmF5KSB7XG4gICAgICAgICAgZGV2aWNlLnNldFVuaWZvcm1EaXJlY3RseShwcm9wLm5hbWUsIHBhcmFtKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcC5zaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgY29udmVydEFycmF5ID0gX3R5cGUydW5pZm9ybUFycmF5VmFsdWVbcHJvcC50eXBlXTtcbiAgICAgICAgICBpZiAoY29udmVydEFycmF5LmZ1bmMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5pZm9ybSBhcnJheSBvZiBjb2xvcjMvaW50My9mbG9hdDMvbWF0MyBjYW4gbm90IGJlIHN1cHBvcnR0ZWQhJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcm9wLnNpemUgKiBjb252ZXJ0QXJyYXkuc2l6ZSA+IDY0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmlmb3JtIGFycmF5IGlzIHRvbyBsb25nIScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb252ZXJ0ZWRWYWx1ZSA9IGNvbnZlcnRBcnJheS5mdW5jKHBhcmFtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY29udmVydEZuID0gX3R5cGUydW5pZm9ybVZhbHVlW3Byb3AudHlwZV07XG4gICAgICAgICAgY29udmVydGVkVmFsdWUgPSBjb252ZXJ0Rm4ocGFyYW0pO1xuICAgICAgICB9XG4gICAgICAgIGRldmljZS5zZXRVbmlmb3JtKHByb3AubmFtZSwgY29udmVydGVkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19kcmF3JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2RyYXcoaXRlbSkge1xuICAgICAgdmFyIGRldmljZSA9IHRoaXMuX2RldmljZTtcbiAgICAgIHZhciBwcm9ncmFtTGliID0gdGhpcy5fcHJvZ3JhbUxpYjtcbiAgICAgIHZhciBub2RlID0gaXRlbS5ub2RlLFxuICAgICAgICAgIGlhID0gaXRlbS5pYSxcbiAgICAgICAgICB1bmlmb3JtcyA9IGl0ZW0udW5pZm9ybXMsXG4gICAgICAgICAgdGVjaG5pcXVlID0gaXRlbS50ZWNobmlxdWUsXG4gICAgICAgICAgZGVmaW5lcyA9IGl0ZW0uZGVmaW5lcyxcbiAgICAgICAgICBlZmZlY3QgPSBpdGVtLmVmZmVjdDtcblxuICAgICAgLy8gcmVzZXQgdGhlIHBvb2xcbiAgICAgIC8vIE5PVEU6IHdlIGNhbiB1c2UgZHJhd0NvdW50ZXIgb3B0aW1pemUgdGhpc1xuICAgICAgLy8gVE9ETzogc2hvdWxkIGJlIGNvbmZpZ3VyYWJsZVxuXG4gICAgICBfZmxvYXQyX3Bvb2wucmVzZXQoKTtcbiAgICAgIF9mbG9hdDNfcG9vbC5yZXNldCgpO1xuICAgICAgX2Zsb2F0NF9wb29sLnJlc2V0KCk7XG4gICAgICBfZmxvYXQ5X3Bvb2wucmVzZXQoKTtcbiAgICAgIF9mbG9hdDE2X3Bvb2wucmVzZXQoKTtcbiAgICAgIF9mbG9hdDY0X3Bvb2wucmVzZXQoKTtcbiAgICAgIF9pbnQyX3Bvb2wucmVzZXQoKTtcbiAgICAgIF9pbnQzX3Bvb2wucmVzZXQoKTtcbiAgICAgIF9pbnQ0X3Bvb2wucmVzZXQoKTtcbiAgICAgIF9pbnQ2NF9wb29sLnJlc2V0KCk7XG5cbiAgICAgIC8vIHNldCBjb21tb24gdW5pZm9ybXNcbiAgICAgIC8vIFRPRE86IHRyeSBjb21taXQgdGhpcyBkZXBlbmRzIG9uIGVmZmVjdFxuICAgICAgLy8ge1xuICAgICAgbm9kZS5nZXRXb3JsZE1hdHJpeChfbTRfdG1wKTtcbiAgICAgIGRldmljZS5zZXRVbmlmb3JtKCdjY19tYXRXb3JsZCcsIF92bWF0aC5tYXQ0LmFycmF5KF9mbG9hdDE2X3Bvb2wuYWRkKCksIF9tNF90bXApKTtcblxuICAgICAgdmFyIGludmVyc2UgPSBfdm1hdGgubWF0My5pbnZlcnQoX20zX3RtcCwgX3ZtYXRoLm1hdDMuZnJvbU1hdDQoX20zX3RtcCwgX200X3RtcCkpO1xuICAgICAgaWYgKGludmVyc2UpIHtcbiAgICAgICAgX3ZtYXRoLm1hdDMudHJhbnNwb3NlKF9tM190bXAsIGludmVyc2UpO1xuICAgICAgICBkZXZpY2Uuc2V0VW5pZm9ybSgnY2NfbWF0V29ybGRJVCcsIF92bWF0aC5tYXQzLmFycmF5KF9mbG9hdDlfcG9vbC5hZGQoKSwgX20zX3RtcCkpO1xuICAgICAgfVxuICAgICAgLy8gfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaWZvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0eXBlVW5pZm9ybXMgPSB1bmlmb3Jtc1tpXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHR5cGVVbmlmb3Jtcykge1xuICAgICAgICAgIHRoaXMuX3NldFByb3BlcnR5KHR5cGVVbmlmb3Jtc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBmb3IgZWFjaCBwYXNzXG4gICAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCB0ZWNobmlxdWUuX3Bhc3Nlcy5sZW5ndGg7ICsrX2kzKSB7XG4gICAgICAgIHZhciBwYXNzID0gdGVjaG5pcXVlLl9wYXNzZXNbX2kzXTtcbiAgICAgICAgdmFyIGNvdW50ID0gaWEuY291bnQ7XG5cbiAgICAgICAgLy8gc2V0IHZlcnRleCBidWZmZXJcbiAgICAgICAgaWYgKGlhLl92ZXJ0ZXhCdWZmZXIpIHtcbiAgICAgICAgICBkZXZpY2Uuc2V0VmVydGV4QnVmZmVyKDAsIGlhLl92ZXJ0ZXhCdWZmZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IGluZGV4IGJ1ZmZlclxuICAgICAgICBpZiAoaWEuX2luZGV4QnVmZmVyKSB7XG4gICAgICAgICAgZGV2aWNlLnNldEluZGV4QnVmZmVyKGlhLl9pbmRleEJ1ZmZlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgcHJpbWl0aXZlIHR5cGVcbiAgICAgICAgZGV2aWNlLnNldFByaW1pdGl2ZVR5cGUoaWEuX3ByaW1pdGl2ZVR5cGUpO1xuXG4gICAgICAgIC8vIHNldCBwcm9ncmFtXG4gICAgICAgIHZhciBwcm9ncmFtID0gcHJvZ3JhbUxpYi5nZXRQcm9ncmFtKHBhc3MuX3Byb2dyYW1OYW1lLCBkZWZpbmVzLCBlZmZlY3QuX25hbWUpO1xuICAgICAgICBkZXZpY2Uuc2V0UHJvZ3JhbShwcm9ncmFtKTtcblxuICAgICAgICAvLyBjdWxsIG1vZGVcbiAgICAgICAgZGV2aWNlLnNldEN1bGxNb2RlKHBhc3MuX2N1bGxNb2RlKTtcblxuICAgICAgICAvLyBibGVuZFxuICAgICAgICBpZiAocGFzcy5fYmxlbmQpIHtcbiAgICAgICAgICBkZXZpY2UuZW5hYmxlQmxlbmQoKTtcbiAgICAgICAgICBkZXZpY2Uuc2V0QmxlbmRGdW5jU2VwKHBhc3MuX2JsZW5kU3JjLCBwYXNzLl9ibGVuZERzdCwgcGFzcy5fYmxlbmRTcmNBbHBoYSwgcGFzcy5fYmxlbmREc3RBbHBoYSk7XG4gICAgICAgICAgZGV2aWNlLnNldEJsZW5kRXFTZXAocGFzcy5fYmxlbmRFcSwgcGFzcy5fYmxlbmRBbHBoYUVxKTtcbiAgICAgICAgICBkZXZpY2Uuc2V0QmxlbmRDb2xvcjMyKHBhc3MuX2JsZW5kQ29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVwdGggdGVzdCAmIHdyaXRlXG4gICAgICAgIGlmIChwYXNzLl9kZXB0aFRlc3QpIHtcbiAgICAgICAgICBkZXZpY2UuZW5hYmxlRGVwdGhUZXN0KCk7XG4gICAgICAgICAgZGV2aWNlLnNldERlcHRoRnVuYyhwYXNzLl9kZXB0aEZ1bmMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXNzLl9kZXB0aFdyaXRlKSB7XG4gICAgICAgICAgZGV2aWNlLmVuYWJsZURlcHRoV3JpdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN0ZW5jaWxcbiAgICAgICAgZGV2aWNlLnNldFN0ZW5jaWxUZXN0KHBhc3MuX3N0ZW5jaWxUZXN0KTtcbiAgICAgICAgaWYgKHBhc3MuX3N0ZW5jaWxUZXN0ID09PSBfZ2Z4Mi5kZWZhdWx0LlNURU5DSUxfRU5BQkxFKSB7XG4gICAgICAgICAgLy8gZnJvbnRcbiAgICAgICAgICBkZXZpY2Uuc2V0U3RlbmNpbEZ1bmNGcm9udChwYXNzLl9zdGVuY2lsRnVuY0Zyb250LCBwYXNzLl9zdGVuY2lsUmVmRnJvbnQsIHBhc3MuX3N0ZW5jaWxNYXNrRnJvbnQpO1xuICAgICAgICAgIGRldmljZS5zZXRTdGVuY2lsT3BGcm9udChwYXNzLl9zdGVuY2lsRmFpbE9wRnJvbnQsIHBhc3MuX3N0ZW5jaWxaRmFpbE9wRnJvbnQsIHBhc3MuX3N0ZW5jaWxaUGFzc09wRnJvbnQsIHBhc3MuX3N0ZW5jaWxXcml0ZU1hc2tGcm9udCk7XG5cbiAgICAgICAgICAvLyBiYWNrXG4gICAgICAgICAgZGV2aWNlLnNldFN0ZW5jaWxGdW5jQmFjayhwYXNzLl9zdGVuY2lsRnVuY0JhY2ssIHBhc3MuX3N0ZW5jaWxSZWZCYWNrLCBwYXNzLl9zdGVuY2lsTWFza0JhY2spO1xuICAgICAgICAgIGRldmljZS5zZXRTdGVuY2lsT3BCYWNrKHBhc3MuX3N0ZW5jaWxGYWlsT3BCYWNrLCBwYXNzLl9zdGVuY2lsWkZhaWxPcEJhY2ssIHBhc3MuX3N0ZW5jaWxaUGFzc09wQmFjaywgcGFzcy5fc3RlbmNpbFdyaXRlTWFza0JhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZHJhdyBwYXNzXG4gICAgICAgIGRldmljZS5kcmF3KGlhLl9zdGFydCwgY291bnQpO1xuXG4gICAgICAgIHRoaXMuX3Jlc2V0VGV4dHVlclVuaXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmFzZTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQmFzZTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1KaGMyVXRjbVZ1WkdWeVpYSXVhbk1pWFN3aWJtRnRaWE1pT2xzaVgyMHpYM1J0Y0NJc0ltMWhkRE1pTENKamNtVmhkR1VpTENKZmJUUmZkRzF3SWl3aWJXRjBOQ0lzSWw5emRHRm5aVWx1Wm05eklpd2lVbVZqZVdOc1pWQnZiMndpTENKemRHRm5aU0lzSW1sMFpXMXpJaXdpWDJac2IyRjBNbDl3YjI5c0lpd2lSbXh2WVhRek1rRnljbUY1SWl3aVgyWnNiMkYwTTE5d2IyOXNJaXdpWDJac2IyRjBORjl3YjI5c0lpd2lYMlpzYjJGME9WOXdiMjlzSWl3aVgyWnNiMkYwTVRaZmNHOXZiQ0lzSWw5bWJHOWhkRFkwWDNCdmIyd2lMQ0pmYVc1ME1sOXdiMjlzSWl3aVNXNTBNekpCY25KaGVTSXNJbDlwYm5RelgzQnZiMndpTENKZmFXNTBORjl3YjI5c0lpd2lYMmx1ZERZMFgzQnZiMndpTENKZmRIbHdaVEoxYm1sbWIzSnRWbUZzZFdVaUxDSmxiblZ0Y3lJc0lsQkJVa0ZOWDBsT1ZDSXNJblpoYkhWbElpd2lVRUZTUVUxZlNVNVVNaUlzSW5abFl6SWlMQ0poY25KaGVTSXNJbUZrWkNJc0lsQkJVa0ZOWDBsT1ZETWlMQ0oyWldNeklpd2lVRUZTUVUxZlNVNVVOQ0lzSW5abFl6UWlMQ0pRUVZKQlRWOUdURTlCVkNJc0lsQkJVa0ZOWDBaTVQwRlVNaUlzSWxCQlVrRk5YMFpNVDBGVU15SXNJbEJCVWtGTlgwWk1UMEZVTkNJc0lsQkJVa0ZOWDBOUFRFOVNNeUlzSW1OdmJHOXlNeUlzSWxCQlVrRk5YME5QVEU5U05DSXNJbU52Ykc5eU5DSXNJbEJCVWtGTlgwMUJWRElpTENKdFlYUXlJaXdpVUVGU1FVMWZUVUZVTXlJc0lsQkJVa0ZOWDAxQlZEUWlMQ0pmZEhsd1pUSjFibWxtYjNKdFFYSnlZWGxXWVd4MVpTSXNJbVoxYm1NaUxDSjJZV3gxWlhNaUxDSnlaWE4xYkhRaUxDSnBJaXdpYkdWdVozUm9JaXdpYzJsNlpTSXNJbmdpTENKNUlpd2lkVzVrWldacGJtVmtJaXdpZGlJc0lub2lMQ0ozSWl3aWNpSXNJbWNpTENKaUlpd2lZU0lzSW0wd01DSXNJbTB3TVNJc0ltMHdNaUlzSW0wd015SXNJbTB3TkNJc0ltMHdOU0lzSW0wd05pSXNJbTB3TnlJc0ltMHdPQ0lzSW0wd09TSXNJbTB4TUNJc0ltMHhNU0lzSW0weE1pSXNJbTB4TXlJc0ltMHhOQ0lzSW0weE5TSXNJa0poYzJVaUxDSmtaWFpwWTJVaUxDSnZjSFJ6SWl3aVgyUmxkbWxqWlNJc0lsOXdjbTluY21GdFRHbGlJaXdpVUhKdlozSmhiVXhwWWlJc0lsOXZjSFJ6SWl3aVgzUjVjR1V5WkdWbVlYVnNkRlpoYkhWbElpd2lVRUZTUVUxZlZFVllWRlZTUlY4eVJDSXNJbVJsWm1GMWJIUlVaWGgwZFhKbElpd2lVRUZTUVUxZlZFVllWRlZTUlY5RFZVSkZJaXdpWkdWbVlYVnNkRlJsZUhSMWNtVkRkV0psSWl3aVgzTjBZV2RsTW1adUlpd2lYM1Z6WldSVVpYaDBkWEpsVlc1cGRITWlMQ0pmZG1sbGQxQnZiMnh6SWl3aVZtbGxkeUlzSWw5a2NtRjNTWFJsYlhOUWIyOXNjeUlzSW0xdlpHVnNJaXdpYm05a1pTSXNJbWxoSWl3aVpXWm1aV04wSWl3aVpHVm1hVzVsY3lJc0luVnVhV1p2Y20xeklpd2lYM04wWVdkbFNYUmxiWE5RYjI5c2N5SXNJblJsWTJodWFYRjFaU0lzSW5OdmNuUkxaWGtpTENKMWJtbDBJaXdpWDJOaGNITWlMQ0p0WVhoVVpYaDBkWEpsVlc1cGRITWlMQ0pqYjI1emIyeGxJaXdpZDJGeWJpSXNJbTVoYldVaUxDSm1iaUlzSW1Oc1pXRnlJaXdpY21WelpYUWlMQ0oyYVdWM0lpd2ljMk5sYm1VaUxDSnpaWFJHY21GdFpVSjFabVpsY2lJc0lsOW1jbUZ0WldKMVptWmxjaUlzSW5ObGRGWnBaWGR3YjNKMElpd2lYM0psWTNRaUxDSm9JaXdpWTJ4bFlYSlBjSFJ6SWl3aVgyTnNaV0Z5Um14aFozTWlMQ0pEVEVWQlVsOURUMHhQVWlJc0ltTnZiRzl5SWl3aVgyTnZiRzl5SWl3aVEweEZRVkpmUkVWUVZFZ2lMQ0prWlhCMGFDSXNJbDlrWlhCMGFDSXNJa05NUlVGU1gxTlVSVTVEU1V3aUxDSnpkR1Z1WTJsc0lpd2lYM04wWlc1amFXd2lMQ0pmYlc5a1pXeHpJaXdpWkdGMFlTSXNJbDlqZFd4c2FXNW5UV0Z6YXlJc0ltUnlZWGRKZEdWdElpd2laWGgwY21GamRFUnlZWGRKZEdWdElpd2lYM04wWVdkbGN5SXNJbk4wWVdkbFNYUmxiWE1pTENKcUlpd2lkR1ZqYUNJc0ltZGxkRlJsWTJodWFYRjFaU0lzSW5OMFlXZGxTWFJsYlNJc0luTjBZV2RsU1c1bWJ5SXNJbWx1Wm04aUxDSndjbTl3SWl3aWNHRnlZVzBpTENKMllXd2lMQ0owZVhCbElpd2laWEp5YjNJaUxDSnpiRzkwY3lJc0ltbHVaR1Y0SWl3aVgyRnNiRzlqVkdWNGRIVnlaVlZ1YVhRaUxDSnpaWFJVWlhoMGRYSmxRWEp5WVhraUxDSnpaWFJVWlhoMGRYSmxJaXdpWTI5dWRtVnlkR1ZrVm1Gc2RXVWlMQ0p6WlhSVmJtbG1iM0p0UkdseVpXTjBiSGtpTENKamIyNTJaWEowUVhKeVlYa2lMQ0pqYjI1MlpYSjBSbTRpTENKelpYUlZibWxtYjNKdElpd2lhWFJsYlNJc0luQnliMmR5WVcxTWFXSWlMQ0puWlhSWGIzSnNaRTFoZEhKcGVDSXNJbWx1ZG1WeWMyVWlMQ0pwYm5abGNuUWlMQ0ptY205dFRXRjBOQ0lzSW5SeVlXNXpjRzl6WlNJc0luUjVjR1ZWYm1sbWIzSnRjeUlzSW10bGVTSXNJbDl6WlhSUWNtOXdaWEowZVNJc0lsOXdZWE56WlhNaUxDSndZWE56SWl3aVkyOTFiblFpTENKZmRtVnlkR1Y0UW5WbVptVnlJaXdpYzJWMFZtVnlkR1Y0UW5WbVptVnlJaXdpWDJsdVpHVjRRblZtWm1WeUlpd2ljMlYwU1c1a1pYaENkV1ptWlhJaUxDSnpaWFJRY21sdGFYUnBkbVZVZVhCbElpd2lYM0J5YVcxcGRHbDJaVlI1Y0dVaUxDSndjbTluY21GdElpd2laMlYwVUhKdlozSmhiU0lzSWw5d2NtOW5jbUZ0VG1GdFpTSXNJbDl1WVcxbElpd2ljMlYwVUhKdlozSmhiU0lzSW5ObGRFTjFiR3hOYjJSbElpd2lYMk4xYkd4TmIyUmxJaXdpWDJKc1pXNWtJaXdpWlc1aFlteGxRbXhsYm1RaUxDSnpaWFJDYkdWdVpFWjFibU5UWlhBaUxDSmZZbXhsYm1SVGNtTWlMQ0pmWW14bGJtUkVjM1FpTENKZllteGxibVJUY21OQmJIQm9ZU0lzSWw5aWJHVnVaRVJ6ZEVGc2NHaGhJaXdpYzJWMFFteGxibVJGY1ZObGNDSXNJbDlpYkdWdVpFVnhJaXdpWDJKc1pXNWtRV3h3YUdGRmNTSXNJbk5sZEVKc1pXNWtRMjlzYjNJek1pSXNJbDlpYkdWdVpFTnZiRzl5SWl3aVgyUmxjSFJvVkdWemRDSXNJbVZ1WVdKc1pVUmxjSFJvVkdWemRDSXNJbk5sZEVSbGNIUm9SblZ1WXlJc0lsOWtaWEIwYUVaMWJtTWlMQ0pmWkdWd2RHaFhjbWwwWlNJc0ltVnVZV0pzWlVSbGNIUm9WM0pwZEdVaUxDSnpaWFJUZEdWdVkybHNWR1Z6ZENJc0lsOXpkR1Z1WTJsc1ZHVnpkQ0lzSW1kbWVDSXNJbE5VUlU1RFNVeGZSVTVCUWt4Rklpd2ljMlYwVTNSbGJtTnBiRVoxYm1OR2NtOXVkQ0lzSWw5emRHVnVZMmxzUm5WdVkwWnliMjUwSWl3aVgzTjBaVzVqYVd4U1pXWkdjbTl1ZENJc0lsOXpkR1Z1WTJsc1RXRnphMFp5YjI1MElpd2ljMlYwVTNSbGJtTnBiRTl3Um5KdmJuUWlMQ0pmYzNSbGJtTnBiRVpoYVd4UGNFWnliMjUwSWl3aVgzTjBaVzVqYVd4YVJtRnBiRTl3Um5KdmJuUWlMQ0pmYzNSbGJtTnBiRnBRWVhOelQzQkdjbTl1ZENJc0lsOXpkR1Z1WTJsc1YzSnBkR1ZOWVhOclJuSnZiblFpTENKelpYUlRkR1Z1WTJsc1JuVnVZMEpoWTJzaUxDSmZjM1JsYm1OcGJFWjFibU5DWVdOcklpd2lYM04wWlc1amFXeFNaV1pDWVdOcklpd2lYM04wWlc1amFXeE5ZWE5yUW1GamF5SXNJbk5sZEZOMFpXNWphV3hQY0VKaFkyc2lMQ0pmYzNSbGJtTnBiRVpoYVd4UGNFSmhZMnNpTENKZmMzUmxibU5wYkZwR1lXbHNUM0JDWVdOcklpd2lYM04wWlc1amFXeGFVR0Z6YzA5d1FtRmpheUlzSWw5emRHVnVZMmxzVjNKcGRHVk5ZWE5yUW1GamF5SXNJbVJ5WVhjaUxDSmZjM1JoY25RaUxDSmZjbVZ6WlhSVVpYaDBkV1Z5Vlc1cGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN1FVRkZRVHM3UVVGRFFUczdPenRCUVVOQk96dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3pzN096czdhMDVCVUVFN08wRkJVMEVzU1VGQlNVRXNWVUZCVlVNc1dVRkJTME1zVFVGQlRDeEZRVUZrTzBGQlEwRXNTVUZCU1VNc1ZVRkJWVU1zV1VGQlMwWXNUVUZCVEN4RlFVRmtPenRCUVVWQkxFbEJRVWxITEdOQlFXTXNTVUZCU1VNc2EwSkJRVW9zUTBGQlowSXNXVUZCVFR0QlFVTjBReXhUUVVGUE8wRkJRMHhETEZkQlFVOHNTVUZFUmp0QlFVVk1ReXhYUVVGUE8wRkJSa1lzUjBGQlVEdEJRVWxFTEVOQlRHbENMRVZCUzJZc1EwRk1aU3hEUVVGc1FqczdRVUZQUVN4SlFVRkpReXhsUVVGbExFbEJRVWxJTEd0Q1FVRktMRU5CUVdkQ0xGbEJRVTA3UVVGRGRrTXNVMEZCVHl4SlFVRkpTU3haUVVGS0xFTkJRV2xDTEVOQlFXcENMRU5CUVZBN1FVRkRSQ3hEUVVaclFpeEZRVVZvUWl4RFFVWm5RaXhEUVVGdVFqczdRVUZKUVN4SlFVRkpReXhsUVVGbExFbEJRVWxNTEd0Q1FVRktMRU5CUVdkQ0xGbEJRVTA3UVVGRGRrTXNVMEZCVHl4SlFVRkpTU3haUVVGS0xFTkJRV2xDTEVOQlFXcENMRU5CUVZBN1FVRkRSQ3hEUVVaclFpeEZRVVZvUWl4RFFVWm5RaXhEUVVGdVFqczdRVUZKUVN4SlFVRkpSU3hsUVVGbExFbEJRVWxPTEd0Q1FVRktMRU5CUVdkQ0xGbEJRVTA3UVVGRGRrTXNVMEZCVHl4SlFVRkpTU3haUVVGS0xFTkJRV2xDTEVOQlFXcENMRU5CUVZBN1FVRkRSQ3hEUVVaclFpeEZRVVZvUWl4RFFVWm5RaXhEUVVGdVFqczdRVUZKUVN4SlFVRkpSeXhsUVVGbExFbEJRVWxRTEd0Q1FVRktMRU5CUVdkQ0xGbEJRVTA3UVVGRGRrTXNVMEZCVHl4SlFVRkpTU3haUVVGS0xFTkJRV2xDTEVOQlFXcENMRU5CUVZBN1FVRkRSQ3hEUVVaclFpeEZRVVZvUWl4RFFVWm5RaXhEUVVGdVFqczdRVUZKUVN4SlFVRkpTU3huUWtGQlowSXNTVUZCU1ZJc2EwSkJRVW9zUTBGQlowSXNXVUZCVFR0QlFVTjRReXhUUVVGUExFbEJRVWxKTEZsQlFVb3NRMEZCYVVJc1JVRkJha0lzUTBGQlVEdEJRVU5FTEVOQlJtMUNMRVZCUldwQ0xFTkJSbWxDTEVOQlFYQkNPenRCUVVsQkxFbEJRVWxMTEdkQ1FVRm5RaXhKUVVGSlZDeHJRa0ZCU2l4RFFVRm5RaXhaUVVGTk8wRkJRM2hETEZOQlFVOHNTVUZCU1Vrc1dVRkJTaXhEUVVGcFFpeEZRVUZxUWl4RFFVRlFPMEZCUTBRc1EwRkdiVUlzUlVGRmFrSXNRMEZHYVVJc1EwRkJjRUk3TzBGQlNVRXNTVUZCU1Uwc1lVRkJZU3hKUVVGSlZpeHJRa0ZCU2l4RFFVRm5RaXhaUVVGTk8wRkJRM0pETEZOQlFVOHNTVUZCU1Zjc1ZVRkJTaXhEUVVGbExFTkJRV1lzUTBGQlVEdEJRVU5FTEVOQlJtZENMRVZCUldRc1EwRkdZeXhEUVVGcVFqczdRVUZKUVN4SlFVRkpReXhoUVVGaExFbEJRVWxhTEd0Q1FVRktMRU5CUVdkQ0xGbEJRVTA3UVVGRGNrTXNVMEZCVHl4SlFVRkpWeXhWUVVGS0xFTkJRV1VzUTBGQlppeERRVUZRTzBGQlEwUXNRMEZHWjBJc1JVRkZaQ3hEUVVaakxFTkJRV3BDT3p0QlFVbEJMRWxCUVVsRkxHRkJRV0VzU1VGQlNXSXNhMEpCUVVvc1EwRkJaMElzV1VGQlRUdEJRVU55UXl4VFFVRlBMRWxCUVVsWExGVkJRVW9zUTBGQlpTeERRVUZtTEVOQlFWQTdRVUZEUkN4RFFVWm5RaXhGUVVWa0xFTkJSbU1zUTBGQmFrSTdPMEZCU1VFc1NVRkJTVWNzWTBGQll5eEpRVUZKWkN4clFrRkJTaXhEUVVGblFpeFpRVUZOTzBGQlEzUkRMRk5CUVU4c1NVRkJTVmNzVlVGQlNpeERRVUZsTEVWQlFXWXNRMEZCVUR0QlFVTkVMRU5CUm1sQ0xFVkJSV1lzUTBGR1pTeERRVUZzUWpzN1FVRkpRU3hKUVVGSlNTeHhSa0ZEUkVNc1owSkJRVTFETEZOQlJFd3NSVUZEYVVJc1ZVRkJWVU1zUzBGQlZpeEZRVUZwUWp0QlFVTnNReXhUUVVGUFFTeExRVUZRTzBGQlEwUXNRMEZJUXl4M1EwRkxSRVlzWjBKQlFVMUhMRlZCVEV3c1JVRkxhMElzVlVGQlZVUXNTMEZCVml4RlFVRnBRanRCUVVOdVF5eFRRVUZQUlN4WlFVRkxReXhMUVVGTUxFTkJRVmRZTEZkQlFWZFpMRWRCUVZnc1JVRkJXQ3hGUVVFMlFrb3NTMEZCTjBJc1EwRkJVRHRCUVVORUxFTkJVRU1zZDBOQlUwUkdMR2RDUVVGTlR5eFZRVlJNTEVWQlUydENMRlZCUVZWTUxFdEJRVllzUlVGQmFVSTdRVUZEYmtNc1UwRkJUMDBzV1VGQlMwZ3NTMEZCVEN4RFFVRlhWQ3hYUVVGWFZTeEhRVUZZTEVWQlFWZ3NSVUZCTmtKS0xFdEJRVGRDTEVOQlFWQTdRVUZEUkN4RFFWaERMSGREUVdGRVJpeG5Ra0ZCVFZNc1ZVRmlUQ3hGUVdGclFpeFZRVUZWVUN4TFFVRldMRVZCUVdsQ08wRkJRMjVETEZOQlFVOVJMRmxCUVV0TUxFdEJRVXdzUTBGQlYxSXNWMEZCVjFNc1IwRkJXQ3hGUVVGWUxFVkJRVFpDU2l4TFFVRTNRaXhEUVVGUU8wRkJRMFFzUTBGbVF5eDNRMEZwUWtSR0xHZENRVUZOVnl4WFFXcENUQ3hGUVdsQ2JVSXNWVUZCVlZRc1MwRkJWaXhGUVVGcFFqdEJRVU53UXl4VFFVRlBRU3hMUVVGUU8wRkJRMFFzUTBGdVFrTXNkME5CY1VKRVJpeG5Ra0ZCVFZrc1dVRnlRa3dzUlVGeFFtOUNMRlZCUVZWV0xFdEJRVllzUlVGQmFVSTdRVUZEY2tNc1UwRkJUMFVzV1VGQlMwTXNTMEZCVEN4RFFVRlhiRUlzWVVGQllXMUNMRWRCUVdJc1JVRkJXQ3hGUVVFclFrb3NTMEZCTDBJc1EwRkJVRHRCUVVORUxFTkJka0pETEhkRFFYbENSRVlzWjBKQlFVMWhMRmxCZWtKTUxFVkJlVUp2UWl4VlFVRlZXQ3hMUVVGV0xFVkJRV2xDTzBGQlEzSkRMRk5CUVU5TkxGbEJRVXRJTEV0QlFVd3NRMEZCVjJoQ0xHRkJRV0ZwUWl4SFFVRmlMRVZCUVZnc1JVRkJLMEpLTEV0QlFTOUNMRU5CUVZBN1FVRkRSQ3hEUVROQ1F5eDNRMEUyUWtSR0xHZENRVUZOWXl4WlFUZENUQ3hGUVRaQ2IwSXNWVUZCVlZvc1MwRkJWaXhGUVVGcFFqdEJRVU55UXl4VFFVRlBVU3haUVVGTFRDeExRVUZNTEVOQlFWZG1MR0ZCUVdGblFpeEhRVUZpTEVWQlFWZ3NSVUZCSzBKS0xFdEJRUzlDTEVOQlFWQTdRVUZEUkN4RFFTOUNReXgzUTBGcFEwUkdMR2RDUVVGTlpTeFpRV3BEVEN4RlFXbERiMElzVlVGQlZXSXNTMEZCVml4RlFVRnBRanRCUVVOeVF5eFRRVUZQWXl4alFVRlBXQ3hMUVVGUUxFTkJRV0ZvUWl4aFFVRmhhVUlzUjBGQllpeEZRVUZpTEVWQlFXbERTaXhMUVVGcVF5eERRVUZRTzBGQlEwUXNRMEZ1UTBNc2QwTkJjVU5FUml4blFrRkJUV2xDTEZsQmNrTk1MRVZCY1VOdlFpeFZRVUZWWml4TFFVRldMRVZCUVdsQ08wRkJRM0pETEZOQlFVOW5RaXhqUVVGUFlpeExRVUZRTEVOQlFXRm1MR0ZCUVdGblFpeEhRVUZpTEVWQlFXSXNSVUZCYVVOS0xFdEJRV3BETEVOQlFWQTdRVUZEUkN4RFFYWkRReXgzUTBGNVEwUkdMR2RDUVVGTmJVSXNWVUY2UTB3c1JVRjVRMnRDTEZWQlFWVnFRaXhMUVVGV0xFVkJRV2xDTzBGQlEyNURMRk5CUVU5clFpeFpRVUZMWml4TFFVRk1MRU5CUVZkbUxHRkJRV0ZuUWl4SFFVRmlMRVZCUVZnc1JVRkJLMEpLTEV0QlFTOUNMRU5CUVZBN1FVRkRSQ3hEUVRORFF5eDNRMEUyUTBSR0xHZENRVUZOY1VJc1ZVRTNRMHdzUlVFMlEydENMRlZCUVZWdVFpeExRVUZXTEVWQlFXbENPMEZCUTI1RExGTkJRVTkyUWl4WlFVRkxNRUlzUzBGQlRDeERRVUZYWkN4aFFVRmhaU3hIUVVGaUxFVkJRVmdzUlVGQkswSktMRXRCUVM5Q0xFTkJRVkE3UVVGRFJDeERRUzlEUXl4M1EwRnBSRVJHTEdkQ1FVRk5jMElzVlVGcVJFd3NSVUZwUkd0Q0xGVkJRVlZ3UWl4TFFVRldMRVZCUVdsQ08wRkJRMjVETEZOQlFVOXdRaXhaUVVGTGRVSXNTMEZCVEN4RFFVRlhZaXhqUVVGall5eEhRVUZrTEVWQlFWZ3NSVUZCWjBOS0xFdEJRV2hETEVOQlFWQTdRVUZEUkN4RFFXNUVReXgxUWtGQlNqczdRVUUwUkVFc1NVRkJTWEZDTERoR1FVTkVka0lzWjBKQlFVMURMRk5CUkV3c1JVRkRhVUk3UVVGRGFrSjFRaXhOUVVScFFpeG5Ra0ZEV0VNc1RVRkVWeXhGUVVOSU8wRkJRMW9zVVVGQlNVTXNVMEZCVXpWQ0xGbEJRVmxSTEVkQlFWb3NSVUZCWWp0QlFVTkJMRk5CUVVzc1NVRkJTWEZDTEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNVWXNUMEZCVDBjc1RVRkJNMElzUlVGQmJVTXNSVUZCUlVRc1EwRkJja01zUlVGQmQwTTdRVUZEZEVORUxHRkJRVTlETEVOQlFWQXNTVUZCV1VZc1QwRkJUMFVzUTBGQlVDeERRVUZhTzBGQlEwUTdRVUZEUkN4WFFVRlBSQ3hOUVVGUU8wRkJRMFFzUjBGUVowSTdPMEZCVVdwQ1J5eFJRVUZOTzBGQlVsY3NRMEZFYWtJc01FTkJXVVEzUWl4blFrRkJUVWNzVlVGYVRDeEZRVmxyUWp0QlFVTnNRbkZDTEUxQlJHdENMR2RDUVVOYVF5eE5RVVJaTEVWQlEwbzdRVUZEV2l4UlFVRkpReXhUUVVGVE5VSXNXVUZCV1ZFc1IwRkJXaXhGUVVGaU8wRkJRMEVzVTBGQlN5eEpRVUZKY1VJc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkpSaXhQUVVGUFJ5eE5RVUV6UWl4RlFVRnRReXhGUVVGRlJDeERRVUZ5UXl4RlFVRjNRenRCUVVOMFEwUXNZVUZCVHl4SlFVRkpReXhEUVVGWUxFbEJRV2RDUml4UFFVRlBSU3hEUVVGUUxFVkJRVlZITEVOQlFURkNPMEZCUTBGS0xHRkJRVThzU1VGQlNVTXNRMEZCU2l4SFFVRlJMRU5CUVdZc1NVRkJiMEpHTEU5QlFVOUZMRU5CUVZBc1JVRkJWVWtzUTBGQk9VSTdRVUZEUkR0QlFVTkVMRmRCUVU5TUxFMUJRVkE3UVVGRFJDeEhRVkpwUWpzN1FVRlRiRUpITEZGQlFVMDdRVUZVV1N4RFFWcHNRaXd3UTBGM1FrUTNRaXhuUWtGQlRVOHNWVUY0UWt3c1JVRjNRbXRDTzBGQlEyeENhVUlzVVVGQlRWRXNVMEZFV1R0QlFVVnNRa2dzVVVGQlRUdEJRVVpaTEVOQmVFSnNRaXd3UTBFMlFrUTNRaXhuUWtGQlRWTXNWVUUzUWt3c1JVRTJRbXRDTzBGQlEyeENaU3hOUVVSclFpeG5Ra0ZEV2tNc1RVRkVXU3hGUVVOS08wRkJRMW9zVVVGQlNVTXNVMEZCVXpWQ0xGbEJRVmxSTEVkQlFWb3NSVUZCWWp0QlFVTkJMRk5CUVVzc1NVRkJTWEZDTEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNVWXNUMEZCVDBjc1RVRkJNMElzUlVGQmJVTXNSVUZCUlVRc1EwRkJja01zUlVGQmQwTTdRVUZEZEVNc1ZVRkJTVTBzU1VGQlNWSXNUMEZCVDBVc1EwRkJVQ3hEUVVGU08wRkJRMEZFTEdGQlFVOHNTVUZCU1VNc1EwRkJXQ3hKUVVGblFrMHNSVUZCUlVnc1EwRkJiRUk3UVVGRFFVb3NZVUZCVHl4SlFVRkpReXhEUVVGS0xFZEJRVkVzUTBGQlppeEpRVUZ2UWswc1JVRkJSVVlzUTBGQmRFSTdRVUZEUVV3c1lVRkJUeXhKUVVGSlF5eERRVUZLTEVkQlFWRXNRMEZCWml4SlFVRnZRazBzUlVGQlJVTXNRMEZCZEVJN1FVRkRRVklzWVVGQlR5eEpRVUZKUXl4RFFVRktMRWRCUVZFc1EwRkJaaXhKUVVGdlFrMHNSVUZCUlVVc1EwRkJkRUk3UVVGRFJEdEJRVU5FTEZkQlFVOVVMRTFCUVZBN1FVRkRSQ3hIUVZocFFqczdRVUZaYkVKSExGRkJRVTA3UVVGYVdTeERRVGRDYkVJc01FTkJORU5FTjBJc1owSkJRVTFYTEZkQk5VTk1MRVZCTkVOdFFqdEJRVU51UW1Fc1RVRkViVUlzWjBKQlEySkRMRTFCUkdFc1JVRkRURHRCUVVOYUxGRkJRVWxETEZOQlFWTnFReXhqUVVGallTeEhRVUZrTEVWQlFXSTdRVUZEUVN4VFFVRkxMRWxCUVVseFFpeEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWxHTEU5QlFVOUhMRTFCUVROQ0xFVkJRVzFETEVWQlFVVkVMRU5CUVhKRExFVkJRWGRETzBGQlEzUkRSQ3hoUVVGUFF5eERRVUZRTEVsQlFWbEdMRTlCUVU5RkxFTkJRVkFzUTBGQldqdEJRVU5FTzBGQlEwUXNWMEZCVDBRc1RVRkJVRHRCUVVORUxFZEJVR3RDT3p0QlFWRnVRa2NzVVVGQlRUdEJRVkpoTEVOQk5VTnVRaXd3UTBGMVJFUTNRaXhuUWtGQlRWa3NXVUYyUkV3c1JVRjFSRzlDTzBGQlEzQkNXU3hOUVVSdlFpeG5Ra0ZEWkVNc1RVRkVZeXhGUVVOT08wRkJRMW9zVVVGQlNVTXNVMEZCVTJwRExHTkJRV05oTEVkQlFXUXNSVUZCWWp0QlFVTkJMRk5CUVVzc1NVRkJTWEZDTEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNVWXNUMEZCVDBjc1RVRkJNMElzUlVGQmJVTXNSVUZCUlVRc1EwRkJja01zUlVGQmQwTTdRVUZEZEVORUxHRkJRVThzU1VGQlNVTXNRMEZCV0N4SlFVRm5Ra1lzVDBGQlQwVXNRMEZCVUN4RlFVRlZSeXhEUVVFeFFqdEJRVU5CU2l4aFFVRlBMRWxCUVVsRExFTkJRVW9zUjBGQlVTeERRVUZtTEVsQlFXOUNSaXhQUVVGUFJTeERRVUZRTEVWQlFWVkpMRU5CUVRsQ08wRkJRMFE3UVVGRFJDeFhRVUZQVEN4TlFVRlFPMEZCUTBRc1IwRlNiVUk3TzBGQlUzQkNSeXhSUVVGTk8wRkJWR01zUTBGMlJIQkNMREJEUVcxRlJEZENMR2RDUVVGTllTeFpRVzVGVEN4RlFXMUZiMEk3UVVGRGNFSlhMRkZCUVUxUkxGTkJSR003UVVGRmNFSklMRkZCUVUwN1FVRkdZeXhEUVc1RmNFSXNNRU5CZDBWRU4wSXNaMEpCUVUxakxGbEJlRVZNTEVWQmQwVnZRanRCUVVOd1FsVXNUVUZFYjBJc1owSkJRMlJETEUxQlJHTXNSVUZEVGp0QlFVTmFMRkZCUVVsRExGTkJRVk5xUXl4alFVRmpZU3hIUVVGa0xFVkJRV0k3UVVGRFFTeFRRVUZMTEVsQlFVbHhRaXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRWxCUVVsR0xFOUJRVTlITEUxQlFUTkNMRVZCUVcxRExFVkJRVVZFTEVOQlFYSkRMRVZCUVhkRE8wRkJRM1JETEZWQlFVbE5MRWxCUVVsU0xFOUJRVTlGTEVOQlFWQXNRMEZCVWp0QlFVTkJSQ3hoUVVGUExFbEJRVWxETEVOQlFWZ3NTVUZCWjBKTkxFVkJRVVZJTEVOQlFXeENPMEZCUTBGS0xHRkJRVThzU1VGQlNVTXNRMEZCU2l4SFFVRlJMRU5CUVdZc1NVRkJiMEpOTEVWQlFVVkdMRU5CUVhSQ08wRkJRMEZNTEdGQlFVOHNTVUZCU1VNc1EwRkJTaXhIUVVGUkxFTkJRV1lzU1VGQmIwSk5MRVZCUVVWRExFTkJRWFJDTzBGQlEwRlNMR0ZCUVU4c1NVRkJTVU1zUTBGQlNpeEhRVUZSTEVOQlFXWXNTVUZCYjBKTkxFVkJRVVZGTEVOQlFYUkNPMEZCUTBRN1FVRkRSQ3hYUVVGUFZDeE5RVUZRTzBGQlEwUXNSMEZZYlVJN08wRkJXWEJDUnl4UlFVRk5PMEZCV21Nc1EwRjRSWEJDTERCRFFYVkdSRGRDTEdkQ1FVRk5aU3haUVhaR1RDeEZRWFZHYjBJN1FVRkRjRUpUTEZGQlFVMVJMRk5CUkdNN1FVRkZjRUpJTEZGQlFVMDdRVUZHWXl4RFFYWkdjRUlzTUVOQk5FWkVOMElzWjBKQlFVMXBRaXhaUVRWR1RDeEZRVFJHYjBJN1FVRkRjRUpQTEUxQlJHOUNMR2RDUVVOa1F5eE5RVVJqTEVWQlEwNDdRVUZEV2l4UlFVRkpReXhUUVVGVGFrTXNZMEZCWTJFc1IwRkJaQ3hGUVVGaU8wRkJRMEVzVTBGQlN5eEpRVUZKY1VJc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkpSaXhQUVVGUFJ5eE5RVUV6UWl4RlFVRnRReXhGUVVGRlJDeERRVUZ5UXl4RlFVRjNRenRCUVVOMFF5eFZRVUZKVFN4SlFVRkpVaXhQUVVGUFJTeERRVUZRTEVOQlFWSTdRVUZEUVVRc1lVRkJUeXhKUVVGSlF5eERRVUZZTEVsQlFXZENUU3hGUVVGRlJ5eERRVUZzUWp0QlFVTkJWaXhoUVVGUExFbEJRVWxETEVOQlFVb3NSMEZCVVN4RFFVRm1MRWxCUVc5Q1RTeEZRVUZGU1N4RFFVRjBRanRCUVVOQldDeGhRVUZQTEVsQlFVbERMRU5CUVVvc1IwRkJVU3hEUVVGbUxFbEJRVzlDVFN4RlFVRkZTeXhEUVVGMFFqdEJRVU5CV2l4aFFVRlBMRWxCUVVsRExFTkJRVW9zUjBGQlVTeERRVUZtTEVsQlFXOUNUU3hGUVVGRlRTeERRVUYwUWp0QlFVTkVPMEZCUTBRc1YwRkJUMklzVFVGQlVEdEJRVU5FTEVkQldHMUNPenRCUVZsd1FrY3NVVUZCVFR0QlFWcGpMRU5CTlVad1Fpd3dRMEV5UjBRM1FpeG5Ra0ZCVFcxQ0xGVkJNMGRNTEVWQk1rZHJRanRCUVVOc1Frc3NUVUZFYTBJc1owSkJRMXBETEUxQlJGa3NSVUZEU2p0QlFVTmFMRkZCUVVsRExGTkJRVk5xUXl4alFVRmpZU3hIUVVGa0xFVkJRV0k3UVVGRFFTeFRRVUZMTEVsQlFVbHhRaXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRWxCUVVsR0xFOUJRVTlITEUxQlFUTkNMRVZCUVcxRExFVkJRVVZFTEVOQlFYSkRMRVZCUVhkRE8wRkJRM1JETEZWQlFVbE5MRWxCUVVsU0xFOUJRVTlGTEVOQlFWQXNRMEZCVWp0QlFVTkJSQ3hoUVVGUExFbEJRVWxETEVOQlFWZ3NTVUZCWjBKTkxFVkJRVVZQTEVkQlFXeENPMEZCUTBGa0xHRkJRVThzU1VGQlNVTXNRMEZCU2l4SFFVRlJMRU5CUVdZc1NVRkJiMEpOTEVWQlFVVlJMRWRCUVhSQ08wRkJRMEZtTEdGQlFVOHNTVUZCU1VNc1EwRkJTaXhIUVVGUkxFTkJRV1lzU1VGQmIwSk5MRVZCUVVWVExFZEJRWFJDTzBGQlEwRm9RaXhoUVVGUExFbEJRVWxETEVOQlFVb3NSMEZCVVN4RFFVRm1MRWxCUVc5Q1RTeEZRVUZGVlN4SFFVRjBRanRCUVVORU8wRkJRMFFzVjBGQlQycENMRTFCUVZBN1FVRkRSQ3hIUVZocFFqczdRVUZaYkVKSExGRkJRVTA3UVVGYVdTeERRVE5IYkVJc01FTkJNRWhFTjBJc1owSkJRVTF4UWl4VlFURklUQ3hGUVRCSWEwSTdRVUZEYkVKSExGRkJRVTFSTEZOQlJGazdRVUZGYkVKSUxGRkJRVTA3UVVGR1dTeERRVEZJYkVJc01FTkJaMGxFTjBJc1owSkJRVTF6UWl4VlFXaEpUQ3hGUVdkSmEwSTdRVUZEYkVKRkxFMUJSR3RDTEdkQ1FVTmFReXhOUVVSWkxFVkJRMG83UVVGRFdpeFJRVUZKUXl4VFFVRlRha01zWTBGQlkyRXNSMEZCWkN4RlFVRmlPMEZCUTBFc1UwRkJTeXhKUVVGSmNVSXNTVUZCU1N4RFFVRmlMRVZCUVdkQ1FTeEpRVUZKUml4UFFVRlBSeXhOUVVFelFpeEZRVUZ0UXl4RlFVRkZSQ3hEUVVGeVF5eEZRVUYzUXp0QlFVTjBReXhWUVVGSlRTeEpRVUZKVWl4UFFVRlBSU3hEUVVGUUxFTkJRVkk3UVVGRFFVUXNZVUZCVHl4TFFVRkxReXhEUVVGYUxFbEJRV2xDVFN4RlFVRkZUeXhIUVVGdVFqdEJRVU5CWkN4aFFVRlBMRXRCUVV0RExFTkJRVXdzUjBGQlV5eERRVUZvUWl4SlFVRnhRazBzUlVGQlJWRXNSMEZCZGtJN1FVRkRRV1lzWVVGQlR5eExRVUZMUXl4RFFVRk1MRWRCUVZNc1EwRkJhRUlzU1VGQmNVSk5MRVZCUVVWVExFZEJRWFpDTzBGQlEwRm9RaXhoUVVGUExFdEJRVXRETEVOQlFVd3NSMEZCVXl4RFFVRm9RaXhKUVVGeFFrMHNSVUZCUlZVc1IwRkJka0k3UVVGRFFXcENMR0ZCUVU4c1MwRkJTME1zUTBGQlRDeEhRVUZUTEVOQlFXaENMRWxCUVhGQ1RTeEZRVUZGVnl4SFFVRjJRanRCUVVOQmJFSXNZVUZCVHl4TFFVRkxReXhEUVVGTUxFZEJRVk1zUTBGQmFFSXNTVUZCY1VKTkxFVkJRVVZaTEVkQlFYWkNPMEZCUTBGdVFpeGhRVUZQTEV0QlFVdERMRU5CUVV3c1IwRkJVeXhEUVVGb1FpeEpRVUZ4UWswc1JVRkJSV0VzUjBGQmRrSTdRVUZEUVhCQ0xHRkJRVThzUzBGQlMwTXNRMEZCVEN4SFFVRlRMRU5CUVdoQ0xFbEJRWEZDVFN4RlFVRkZZeXhIUVVGMlFqdEJRVU5CY2tJc1lVRkJUeXhMUVVGTFF5eERRVUZNTEVkQlFWTXNRMEZCYUVJc1NVRkJjVUpOTEVWQlFVVmxMRWRCUVhaQ08wRkJRMEYwUWl4aFFVRlBMRXRCUVV0RExFTkJRVXdzUjBGQlV5eERRVUZvUWl4SlFVRnhRazBzUlVGQlJXZENMRWRCUVhaQ08wRkJRMEYyUWl4aFFVRlBMRXRCUVV0RExFTkJRVXdzUjBGQlV5eEZRVUZvUWl4SlFVRnpRazBzUlVGQlJXbENMRWRCUVhoQ08wRkJRMEY0UWl4aFFVRlBMRXRCUVV0RExFTkJRVXdzUjBGQlV5eEZRVUZvUWl4SlFVRnpRazBzUlVGQlJXdENMRWRCUVhoQ08wRkJRMEY2UWl4aFFVRlBMRXRCUVV0RExFTkJRVXdzUjBGQlV5eEZRVUZvUWl4SlFVRnpRazBzUlVGQlJXMUNMRWRCUVhoQ08wRkJRMEV4UWl4aFFVRlBMRXRCUVV0RExFTkJRVXdzUjBGQlV5eEZRVUZvUWl4SlFVRnpRazBzUlVGQlJXOUNMRWRCUVhoQ08wRkJRMEV6UWl4aFFVRlBMRXRCUVV0RExFTkJRVXdzUjBGQlV5eEZRVUZvUWl4SlFVRnpRazBzUlVGQlJYRkNMRWRCUVhoQ08wRkJRMEUxUWl4aFFVRlBMRXRCUVV0RExFTkJRVXdzUjBGQlV5eEZRVUZvUWl4SlFVRnpRazBzUlVGQlJYTkNMRWRCUVhoQ08wRkJRMFE3UVVGRFJDeFhRVUZQTjBJc1RVRkJVRHRCUVVORUxFZEJka0pwUWpzN1FVRjNRbXhDUnl4UlFVRk5PMEZCZUVKWkxFTkJhRWxzUWl4NVFrRkJTanM3U1VGclMzRkNNa0lzU1R0QlFVTnVRanM3T3pzN08wRkJUVUVzWjBKQlFWbERMRTFCUVZvc1JVRkJiMEpETEVsQlFYQkNMRVZCUVRCQ08wRkJRVUU3TzBGQlFVRTdPMEZCUTNoQ0xGTkJRVXRETEU5QlFVd3NSMEZCWlVZc1RVRkJaanRCUVVOQkxGTkJRVXRITEZkQlFVd3NSMEZCYlVJc1NVRkJTVU1zYjBKQlFVb3NRMEZCWlVvc1RVRkJaaXhEUVVGdVFqdEJRVU5CTEZOQlFVdExMRXRCUVV3c1IwRkJZVW9zU1VGQllqdEJRVU5CTEZOQlFVdExMR3RDUVVGTUxHbEZRVU5ITDBRc1owSkJRVTFETEZOQlJGUXNSVUZEY1VJc1EwRkVja0lzZFVOQlJVZEVMR2RDUVVGTlJ5eFZRVVpVTEVWQlJYTkNReXhaUVVGTGVFSXNUVUZCVEN4RFFVRlpMRU5CUVZvc1JVRkJaU3hEUVVGbUxFTkJSblJDTEhWRFFVZEhiMElzWjBKQlFVMVBMRlZCU0ZRc1JVRkhjMEpETEZsQlFVczFRaXhOUVVGTUxFTkJRVmtzUTBGQldpeEZRVUZsTEVOQlFXWXNSVUZCYTBJc1EwRkJiRUlzUTBGSWRFSXNkVU5CU1VkdlFpeG5Ra0ZCVFZNc1ZVRktWQ3hGUVVselFrTXNXVUZCU3psQ0xFMUJRVXdzUTBGQldTeERRVUZhTEVWQlFXVXNRMEZCWml4RlFVRnJRaXhEUVVGc1FpeEZRVUZ4UWl4RFFVRnlRaXhEUVVwMFFpeDFRMEZMUjI5Q0xHZENRVUZOVnl4WFFVeFVMRVZCUzNWQ0xFZEJUSFpDTEhWRFFVMUhXQ3huUWtGQlRWa3NXVUZPVkN4RlFVMTNRbElzV1VGQlMzaENMRTFCUVV3c1EwRkJXU3hEUVVGYUxFVkJRV1VzUTBGQlppeERRVTU0UWl4MVEwRlBSMjlDTEdkQ1FVRk5ZU3haUVZCVUxFVkJUM2RDVEN4WlFVRkxOVUlzVFVGQlRDeERRVUZaTEVOQlFWb3NSVUZCWlN4RFFVRm1MRVZCUVd0Q0xFTkJRV3hDTEVOQlVIaENMSFZEUVZGSGIwSXNaMEpCUVUxakxGbEJVbFFzUlVGUmQwSktMRmxCUVVzNVFpeE5RVUZNTEVOQlFWa3NRMEZCV2l4RlFVRmxMRU5CUVdZc1JVRkJhMElzUTBGQmJFSXNSVUZCY1VJc1EwRkJja0lzUTBGU2VFSXNkVU5CVTBkdlFpeG5Ra0ZCVFdVc1dVRlVWQ3hGUVZOM1FrTXNZMEZCVDNCRExFMUJRVkFzUTBGQll5eERRVUZrTEVWQlFXbENMRU5CUVdwQ0xFVkJRVzlDTEVOQlFYQkNMRU5CVkhoQ0xIVkRRVlZIYjBJc1owSkJRVTFwUWl4WlFWWlVMRVZCVlhkQ1F5eGpRVUZQZEVNc1RVRkJVQ3hEUVVGakxFTkJRV1FzUlVGQmFVSXNRMEZCYWtJc1JVRkJiMElzUTBGQmNFSXNSVUZCZFVJc1EwRkJka0lzUTBGV2VFSXNkVU5CVjBkdlFpeG5Ra0ZCVFcxQ0xGVkJXRlFzUlVGWGMwSkRMRmxCUVV0NFF5eE5RVUZNTEVWQldIUkNMSFZEUVZsSGIwSXNaMEpCUVUxeFFpeFZRVnBVTEVWQldYTkNNVU1zV1VGQlMwTXNUVUZCVEN4RlFWcDBRaXgxUTBGaFIyOUNMR2RDUVVGTmMwSXNWVUZpVkN4RlFXRnpRbmhETEZsQlFVdEdMRTFCUVV3c1JVRmlkRUlzZFVOQlkwZHZRaXhuUWtGQlRXZEZMR2RDUVdSVUxFVkJZelJDVGl4TFFVRkxUeXhqUVdScVF5eDFRMEZsUjJwRkxHZENRVUZOYTBVc2EwSkJabFFzUlVGbE9FSlNMRXRCUVV0VExHdENRV1p1UXp0QlFXbENRU3hUUVVGTFF5eFRRVUZNTEVkQlFXbENMRVZCUVdwQ08wRkJRMEVzVTBGQlMwTXNhVUpCUVV3c1IwRkJlVUlzUTBGQmVrSTdPMEZCUlVFc1UwRkJTME1zVlVGQlRDeEhRVUZyUWl4SlFVRkpkRVlzYTBKQlFVb3NRMEZCWjBJc1dVRkJUVHRCUVVOMFF5eGhRVUZQTEVsQlFVbDFSaXhqUVVGS0xFVkJRVkE3UVVGRFJDeExRVVpwUWl4RlFVVm1MRU5CUm1Vc1EwRkJiRUk3TzBGQlNVRXNVMEZCUzBNc1pVRkJUQ3hIUVVGMVFpeEpRVUZKZUVZc2EwSkJRVW9zUTBGQlowSXNXVUZCVFR0QlFVTXpReXhoUVVGUE8wRkJRMHg1Uml4bFFVRlBMRWxCUkVZN1FVRkZURU1zWTBGQlRTeEpRVVpFTzBGQlIweERMRmxCUVVrc1NVRklRenRCUVVsTVF5eG5Ra0ZCVVN4SlFVcElPMEZCUzB4RExHbENRVUZUTEVsQlRFbzdRVUZOVEVNc2EwSkJRVlU3UVVGT1RDeFBRVUZRTzBGQlVVUXNTMEZVYzBJc1JVRlRjRUlzUjBGVWIwSXNRMEZCZGtJN08wRkJWMEVzVTBGQlMwTXNaMEpCUVV3c1IwRkJkMElzU1VGQlNTOUdMR3RDUVVGS0xFTkJRV2RDTEZsQlFVMDdRVUZETlVNc1lVRkJUeXhKUVVGSlFTeHJRa0ZCU2l4RFFVRm5RaXhaUVVGTk8wRkJRek5DTEdWQlFVODdRVUZEVEhsR0xHbENRVUZQTEVsQlJFWTdRVUZGVEVNc1owSkJRVTBzU1VGR1JEdEJRVWRNUXl4alFVRkpMRWxCU0VNN1FVRkpURU1zYTBKQlFWRXNTVUZLU0R0QlFVdE1ReXh0UWtGQlV5eEpRVXhLTzBGQlRVeEhMSEZDUVVGWExFbEJUazQ3UVVGUFRFTXNiVUpCUVZNc1EwRkJReXhEUVZCTU8wRkJVVXhJTEc5Q1FVRlZPMEZCVWt3c1UwRkJVRHRCUVZWRUxFOUJXRTBzUlVGWFNpeEhRVmhKTEVOQlFWQTdRVUZaUkN4TFFXSjFRaXhGUVdGeVFpeEZRV0p4UWl4RFFVRjRRanRCUVdORU96czdPM2REUVVWdFFqdEJRVU5zUWl4WFFVRkxWQ3hwUWtGQlRDeEhRVUY1UWl4RFFVRjZRanRCUVVORU96czdkME5CUlcxQ08wRkJRMnhDTEZWQlFVMWFMRk5CUVZNc1MwRkJTMFVzVDBGQmNFSTdPMEZCUlVFc1ZVRkJTWFZDTEU5QlFVOHNTMEZCUzJJc2FVSkJRV2hDTzBGQlEwRXNWVUZCU1dFc1VVRkJVWHBDTEU5QlFVOHdRaXhMUVVGUUxFTkJRV0ZETEdWQlFYcENMRVZCUVRCRE8wRkJRM2hEUXl4blFrRkJVVU1zU1VGQlVpeHZRa0ZCT0VKS0xFbEJRVGxDTEc5RVFVRnBSbnBDTEU5QlFVOHdRaXhMUVVGUUxFTkJRV0ZETEdWQlFUbEdPMEZCUTBRN08wRkJSVVFzVjBGQlMyWXNhVUpCUVV3c1NVRkJNRUlzUTBGQk1VSTdRVUZEUVN4aFFVRlBZU3hKUVVGUU8wRkJRMFE3T3p0dFEwRkZZMHNzU1N4RlFVRk5ReXhGTEVWQlFVazdRVUZEZGtJc1YwRkJTM0JDTEZOQlFVd3NRMEZCWlcxQ0xFbEJRV1lzU1VGQmRVSkRMRVZCUVhaQ08wRkJRMFE3T3pzMFFrRkZVVHRCUVVOUUxGZEJRVXMxUWl4WFFVRk1MRU5CUVdsQ05rSXNTMEZCYWtJN1FVRkRRU3hYUVVGTFF5eExRVUZNTzBGQlEwUTdPenMwUWtGRlR6dEJRVU5PTEZkQlFVdHdRaXhWUVVGTUxFTkJRV2RDYjBJc1MwRkJhRUk3UVVGRFFTeFhRVUZMV0N4blFrRkJUQ3hEUVVGelFsY3NTMEZCZEVJN1FVRkRSRHM3TzIxRFFVVmpPMEZCUTJJc1lVRkJUeXhMUVVGTGNFSXNWVUZCVEN4RFFVRm5RbWhGTEVkQlFXaENMRVZCUVZBN1FVRkRSRHM3T3pSQ1FVVlBjVVlzU1N4RlFVRk5ReXhMTEVWQlFVODdRVUZEYmtJc1ZVRkJUVzVETEZOQlFWTXNTMEZCUzBVc1QwRkJjRUk3TzBGQlJVRTdRVUZEUVVZc1lVRkJUMjlETEdOQlFWQXNRMEZCYzBKR0xFdEJRVXRITEZsQlFUTkNPenRCUVVWQk8wRkJRMEZ5UXl4aFFVRlBjME1zVjBGQlVDeERRVU5GU2l4TFFVRkxTeXhMUVVGTUxFTkJRVmRzUlN4RFFVUmlMRVZCUlVVMlJDeExRVUZMU3l4TFFVRk1MRU5CUVZkcVJTeERRVVppTEVWQlIwVTBSQ3hMUVVGTFN5eExRVUZNTEVOQlFWYzNSQ3hEUVVoaUxFVkJTVVYzUkN4TFFVRkxTeXhMUVVGTUxFTkJRVmRETEVOQlNtSTdPMEZCVDBFN1FVRkRRU3hWUVVGSlF5eFpRVUZaTEVWQlFXaENPMEZCUTBFc1ZVRkJTVkFzUzBGQlMxRXNWMEZCVEN4SFFVRnRRbTVITEdkQ1FVRk5iMGNzVjBGQk4wSXNSVUZCTUVNN1FVRkRlRU5HTEd0Q1FVRlZSeXhMUVVGV0xFZEJRV3RDTEVOQlEyaENWaXhMUVVGTFZ5eE5RVUZNTEVOQlFWbHNSU3hEUVVSSkxFVkJSV2hDZFVRc1MwRkJTMWNzVFVGQlRDeERRVUZaYWtVc1EwRkdTU3hGUVVkb1FuTkVMRXRCUVV0WExFMUJRVXdzUTBGQldXaEZMRU5CU0Vrc1JVRkphRUp4UkN4TFFVRkxWeXhOUVVGTUxFTkJRVmt2UkN4RFFVcEpMRU5CUVd4Q08wRkJUVVE3UVVGRFJDeFZRVUZKYjBRc1MwRkJTMUVzVjBGQlRDeEhRVUZ0UW01SExHZENRVUZOZFVjc1YwRkJOMElzUlVGQk1FTTdRVUZEZUVOTUxHdENRVUZWVFN4TFFVRldMRWRCUVd0Q1lpeExRVUZMWXl4TlFVRjJRanRCUVVORU8wRkJRMFFzVlVGQlNXUXNTMEZCUzFFc1YwRkJUQ3hIUVVGdFFtNUhMR2RDUVVGTk1FY3NZVUZCTjBJc1JVRkJORU03UVVGRE1VTlNMR3RDUVVGVlV5eFBRVUZXTEVkQlFXOUNhRUlzUzBGQlMybENMRkZCUVhwQ08wRkJRMFE3UVVGRFJHNUVMR0ZCUVU5blF5eExRVUZRTEVOQlFXRlRMRk5CUVdJN08wRkJSVUU3UVVGRFFTeFhRVUZMTVVJc1pVRkJUQ3hEUVVGeFFtdENMRXRCUVhKQ096dEJRVVZCTEZkQlFVc3NTVUZCU1M5RUxFbEJRVWtzUTBGQllpeEZRVUZuUWtFc1NVRkJTV2xGTEUxQlFVMXBRaXhQUVVGT0xFTkJRV05xUml4TlFVRnNReXhGUVVFd1F5eEZRVUZGUkN4RFFVRTFReXhGUVVFclF6dEJRVU0zUXl4WlFVRkpPRU1zVVVGQlVXMUNMRTFCUVUxcFFpeFBRVUZPTEVOQlFXTkRMRWxCUVdRc1EwRkJiVUp1Uml4RFFVRnVRaXhEUVVGYU96dEJRVVZCTzBGQlEwRXNXVUZCU1N4RFFVRkRPRU1zVFVGQlRYTkRMRmxCUVU0c1IwRkJjVUp3UWl4TFFVRkxiMElzV1VGQk0wSXNUVUZCTmtNc1EwRkJha1FzUlVGQmIwUTdRVUZEYkVRN1FVRkRSRHM3UVVGRlJDeFpRVUZKUXl4WFFVRlhMRXRCUVV0NFF5eGxRVUZNTEVOQlFYRkNiRVVzUjBGQmNrSXNSVUZCWmp0QlFVTkJiVVVzWTBGQlRYZERMR1ZCUVU0c1EwRkJjMEpFTEZGQlFYUkNPMEZCUTBRN08wRkJSVVE3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBGcVNTeHJRa0ZCV1RKSExFdEJRVm83TzBGQlJVRXNWMEZCU3l4SlFVRkpMMFFzUzBGQlNTeERRVUZpTEVWQlFXZENRU3hMUVVGSlowVXNTMEZCUzNWQ0xFOUJRVXdzUTBGQllYUkdMRTFCUVdwRExFVkJRWGxETEVWQlFVVkVMRVZCUVRORExFVkJRVGhETzBGQlF6VkRMRmxCUVVreFF5eFJRVUZSTUVjc1MwRkJTM1ZDTEU5QlFVd3NRMEZCWVhaR0xFVkJRV0lzUTBGQldqdEJRVU5CTEZsQlFVbDNSaXhoUVVGaExFdEJRVXR3UXl4blFrRkJUQ3hEUVVGelFucEZMRWRCUVhSQ0xFVkJRV3BDTzBGQlEwRTJSeXh0UWtGQlYzcENMRXRCUVZnN08wRkJSVUVzWVVGQlN5eEpRVUZKTUVJc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkpMRXRCUVVzMVF5eGxRVUZNTEVOQlFYRkNOVU1zVFVGQmVrTXNSVUZCYVVRc1JVRkJSWGRHTEVOQlFXNUVMRVZCUVhORU8wRkJRM0JFTEdOQlFVbEtMRmxCUVZjc1MwRkJTM2hETEdWQlFVd3NRMEZCY1VKelF5eEpRVUZ5UWl4RFFVRXdRazBzUTBGQk1VSXNRMEZCWmp0QlFVTkJMR05CUVVsRExFOUJRVTlNTEZWQlFWTndReXhOUVVGVUxFTkJRV2RDTUVNc1dVRkJhRUlzUTBGQk5rSnlTU3hMUVVFM1FpeERRVUZZT3p0QlFVVkJMR05CUVVsdlNTeEpRVUZLTEVWQlFWVTdRVUZEVWl4blFrRkJTVVVzV1VGQldVb3NWMEZCVnpkSExFZEJRVmdzUlVGQmFFSTdRVUZEUVdsSUxITkNRVUZWT1VNc1MwRkJWaXhIUVVGclFuVkRMRlZCUVZOMlF5eExRVUV6UWp0QlFVTkJPRU1zYzBKQlFWVTNReXhKUVVGV0xFZEJRV2xDYzBNc1ZVRkJVM1JETEVsQlFURkNPMEZCUTBFMlF5eHpRa0ZCVlRWRExFVkJRVllzUjBGQlpYRkRMRlZCUVZOeVF5eEZRVUY0UWp0QlFVTkJORU1zYzBKQlFWVXpReXhOUVVGV0xFZEJRVzFDYjBNc1ZVRkJVM0JETEUxQlFUVkNPMEZCUTBFeVF5eHpRa0ZCVlRGRExFOUJRVllzUjBGQmIwSnRReXhWUVVGVGJrTXNUMEZCTjBJN1FVRkRRVEJETEhOQ1FVRlZka01zVTBGQlZpeEhRVUZ6UW5GRExFbEJRWFJDTzBGQlEwRkZMSE5DUVVGVmRFTXNUMEZCVml4SFFVRnZRaXhEUVVGRExFTkJRWEpDTzBGQlEwRnpReXh6UWtGQlZYcERMRkZCUVZZc1IwRkJjVUpyUXl4VlFVRlRiRU1zVVVGQk9VSTdRVUZEUkR0QlFVTkdPenRCUVVWRUxGbEJRVWt3UXl4WlFVRlpla2tzV1VGQldYVkNMRWRCUVZvc1JVRkJhRUk3UVVGRFFXdElMR3RDUVVGVmRra3NTMEZCVml4SFFVRnJRa0VzUzBGQmJFSTdRVUZEUVhWSkxHdENRVUZWZEVrc1MwRkJWaXhIUVVGclFtbEpMRlZCUVd4Q08wRkJRMFE3TzBGQlJVUTdRVUZEUVN4WFFVRkxMRWxCUVVsNFJpeE5RVUZKTEVOQlFXSXNSVUZCWjBKQkxFMUJRVWsxUXl4WlFVRlpOa01zVFVGQmFFTXNSVUZCZDBNc1JVRkJSVVFzUjBGQk1VTXNSVUZCTmtNN1FVRkRNME1zV1VGQlNUaEdMRTlCUVU4eFNTeFpRVUZaSzBnc1NVRkJXaXhEUVVGcFFtNUdMRWRCUVdwQ0xFTkJRVmc3UVVGRFFTeFpRVUZKTmtRc1MwRkJTeXhMUVVGTGNFSXNVMEZCVEN4RFFVRmxjVVFzUzBGQlMzaEpMRXRCUVhCQ0xFTkJRVlE3TzBGQlJVRjFSeXhYUVVGSFJ5eEpRVUZJTEVWQlFWTTRRaXhMUVVGTGRra3NTMEZCWkR0QlFVTkVPMEZCUTBZN096dHBRMEZGWVhkSkxFa3NSVUZCVFR0QlFVTnNRaXhWUVVGTmFrVXNVMEZCVXl4TFFVRkxSU3hQUVVGd1FqdEJRVU5CTEZWQlFVbG5SU3hSUVVGUlJDeExRVUZMZUVnc1MwRkJha0k3TzBGQlJVRXNWVUZCU1hsSUxGVkJRVlV6Uml4VFFVRmtMRVZCUVhsQ08wRkJRM1pDTWtZc1owSkJRVkZFTEV0QlFVdEZMRWRCUVdJN1FVRkRSRHM3UVVGRlJDeFZRVUZKUkN4VlFVRlZNMFlzVTBGQlpDeEZRVUY1UWp0QlFVTjJRakpHTEdkQ1FVRlJMRXRCUVVzMVJDeHJRa0ZCVEN4RFFVRjNRakpFTEV0QlFVdEhMRWxCUVRkQ0xFTkJRVkk3UVVGRFJEczdRVUZGUkN4VlFVRkpSaXhWUVVGVk0wWXNVMEZCWkN4RlFVRjVRanRCUVVOMlFuRkVMR2RDUVVGUlF5eEpRVUZTTEhWRFFVRnBSRzlETEV0QlFVdHVReXhKUVVGMFJEdEJRVU5CTzBGQlEwUTdPMEZCUlVRc1ZVRkRSVzFETEV0QlFVdEhMRWxCUVV3c1MwRkJZemRJTEdkQ1FVRk5aMFVzWjBKQlFYQkNMRWxCUTBFd1JDeExRVUZMUnl4SlFVRk1MRXRCUVdNM1NDeG5Ra0ZCVFd0RkxHdENRVVowUWl4RlFVZEZPMEZCUTBFc1dVRkJTWGRFTEV0QlFVczNSaXhKUVVGTUxFdEJRV05ITEZOQlFXeENMRVZCUVRaQ08wRkJRek5DTEdOQlFVa3dSaXhMUVVGTE4wWXNTVUZCVEN4TFFVRmpPRVlzVFVGQlRTOUdMRTFCUVhoQ0xFVkJRV2RETzBGQlF6bENlVVFzYjBKQlFWRjVReXhMUVVGU0xHMURRVUU0UTBnc1RVRkJUUzlHTEUxQlFYQkVMR2REUVVGeFJqaEdMRXRCUVVzM1JpeEpRVUV4Ump0QlFVTkJPMEZCUTBRN1FVRkRSQ3hqUVVGSmEwY3NVVUZCVVdwSkxGbEJRVmxSTEVkQlFWb3NSVUZCV2p0QlFVTkJMR1ZCUVVzc1NVRkJTVEJJTEZGQlFWRXNRMEZCYWtJc1JVRkJiMEpCTEZGQlFWRk1MRTFCUVUwdlJpeE5RVUZzUXl4RlFVRXdReXhGUVVGRmIwY3NTMEZCTlVNc1JVRkJiVVE3UVVGRGFrUkVMR3RDUVVGTlF5eExRVUZPTEVsQlFXVXNTMEZCUzBNc2FVSkJRVXdzUlVGQlpqdEJRVU5FTzBGQlEwUjRSU3hwUWtGQlQzbEZMR1ZCUVZBc1EwRkJkVUpTTEV0QlFVdHVReXhKUVVFMVFpeEZRVUZyUTI5RExFdEJRV3hETEVWQlFYbERTU3hMUVVGNlF6dEJRVU5FTEZOQlZrUXNUVUZWVHp0QlFVTk1kRVVzYVVKQlFVOHdSU3hWUVVGUUxFTkJRV3RDVkN4TFFVRkxia01zU1VGQmRrSXNSVUZCTmtKdlF5eExRVUUzUWl4RlFVRnZReXhMUVVGTFRTeHBRa0ZCVEN4RlFVRndRenRCUVVORU8wRkJRMFlzVDBGcVFrUXNUVUZwUWs4N1FVRkRUQ3haUVVGSlJ5eDFRa0ZCU2p0QlFVTkJMRmxCUVVsVUxHbENRVUZwUW5aSkxGbEJRV3BDTEVsQlFXbERkVWtzYVVKQlFXbENhRWtzVlVGQmRFUXNSVUZCYTBVN1FVRkRhRVU0UkN4cFFrRkJUelJGTEd0Q1FVRlFMRU5CUVRCQ1dDeExRVUZMYmtNc1NVRkJMMElzUlVGQmNVTnZReXhMUVVGeVF6dEJRVU5CTzBGQlEwUXNVMEZJUkN4TlFVbExMRWxCUVVsRUxFdEJRVXMzUml4SlFVRk1MRXRCUVdOSExGTkJRV3hDTEVWQlFUWkNPMEZCUTJoRExHTkJRVWx6Unl4bFFVRmxMMGNzZDBKQlFYZENiVWNzUzBGQlMwY3NTVUZCTjBJc1EwRkJia0k3UVVGRFFTeGpRVUZKVXl4aFFVRmhPVWNzU1VGQllpeExRVUZ6UWxFc1UwRkJNVUlzUlVGQmNVTTdRVUZEYmtOeFJDeHZRa0ZCVVhsRExFdEJRVklzUTBGQll5eHBSVUZCWkR0QlFVTkJPMEZCUTBRN1FVRkRSQ3hqUVVGSlNpeExRVUZMTjBZc1NVRkJUQ3hIUVVGWmVVY3NZVUZCWVhwSExFbEJRWHBDTEVkQlFXZERMRVZCUVhCRExFVkJRWGRETzBGQlEzUkRkMFFzYjBKQlFWRjVReXhMUVVGU0xFTkJRV01zTkVKQlFXUTdRVUZEUVR0QlFVTkVPMEZCUTBSTkxESkNRVUZwUWtVc1lVRkJZVGxITEVsQlFXSXNRMEZCYTBKdFJ5eExRVUZzUWl4RFFVRnFRanRCUVVORUxGTkJXRWtzVFVGWFJUdEJRVU5NTEdOQlFVbFpMRmxCUVZsNFNTeHRRa0ZCYlVJeVNDeExRVUZMUnl4SlFVRjRRaXhEUVVGb1FqdEJRVU5CVHl3eVFrRkJhVUpITEZWQlFWVmFMRXRCUVZZc1EwRkJha0k3UVVGRFJEdEJRVU5FYkVVc1pVRkJUeXRGTEZWQlFWQXNRMEZCYTBKa0xFdEJRVXR1UXl4SlFVRjJRaXhGUVVFMlFqWkRMR05CUVRkQ08wRkJRMFE3UVVGRFJqczdPekJDUVVWTFN5eEpMRVZCUVUwN1FVRkRWaXhWUVVGTmFFWXNVMEZCVXl4TFFVRkxSU3hQUVVGd1FqdEJRVU5CTEZWQlFVMHJSU3hoUVVGaExFdEJRVXM1UlN4WFFVRjRRanRCUVVaVkxGVkJSMFpqTEVsQlNFVXNSMEZIYVVRclJDeEpRVWhxUkN4RFFVZEdMMFFzU1VGSVJUdEJRVUZCTEZWQlIwbERMRVZCU0Vvc1IwRkhhVVE0UkN4SlFVaHFSQ3hEUVVkSk9VUXNSVUZJU2p0QlFVRkJMRlZCUjFGSExGRkJTRklzUjBGSGFVUXlSQ3hKUVVocVJDeERRVWRSTTBRc1VVRklVanRCUVVGQkxGVkJSMnRDUlN4VFFVaHNRaXhIUVVkcFJIbEVMRWxCU0dwRUxFTkJSMnRDZWtRc1UwRkliRUk3UVVGQlFTeFZRVWMyUWtnc1QwRklOMElzUjBGSGFVUTBSQ3hKUVVocVJDeERRVWMyUWpWRUxFOUJTRGRDTzBGQlFVRXNWVUZIYzBORUxFMUJTSFJETEVkQlIybEVOa1FzU1VGSWFrUXNRMEZIYzBNM1JDeE5RVWgwUXpzN1FVRkxWanRCUVVOQk8wRkJRMEU3TzBGQlEwRjZSaXh0UWtGQllYVkhMRXRCUVdJN1FVRkRRWEpITEcxQ1FVRmhjVWNzUzBGQllqdEJRVU5CY0Vjc2JVSkJRV0Z2Unl4TFFVRmlPMEZCUTBGdVJ5eHRRa0ZCWVcxSExFdEJRV0k3UVVGRFFXeEhMRzlDUVVGamEwY3NTMEZCWkR0QlFVTkJha2NzYjBKQlFXTnBSeXhMUVVGa08wRkJRMEZvUnl4cFFrRkJWMmRITEV0QlFWZzdRVUZEUVRsR0xHbENRVUZYT0VZc1MwRkJXRHRCUVVOQk4wWXNhVUpCUVZjMlJpeExRVUZZTzBGQlEwRTFSaXhyUWtGQldUUkdMRXRCUVZvN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRm9RaXhYUVVGTGFVVXNZMEZCVEN4RFFVRnZRamxLTEU5QlFYQkNPMEZCUTBFMFJTeGhRVUZQSzBVc1ZVRkJVQ3hEUVVGclFpeGhRVUZzUWl4RlFVRnBRekZLTEZsQlFVdDFRaXhMUVVGTUxFTkJRVmRpTEdOQlFXTmpMRWRCUVdRc1JVRkJXQ3hGUVVGblEzcENMRTlCUVdoRExFTkJRV3BET3p0QlFVVkJMRlZCUVVrclNpeFZRVUZWYWtzc1dVRkJTMnRMTEUxQlFVd3NRMEZCV1c1TExFOUJRVm9zUlVGQmNVSkRMRmxCUVV0dFN5eFJRVUZNTEVOQlFXTndTeXhQUVVGa0xFVkJRWFZDUnl4UFFVRjJRaXhEUVVGeVFpeERRVUZrTzBGQlEwRXNWVUZCU1N0S0xFOUJRVW9zUlVGQllUdEJRVU5ZYWtzc2IwSkJRVXR2U3l4VFFVRk1MRU5CUVdWeVN5eFBRVUZtTEVWQlFYZENhMHNzVDBGQmVFSTdRVUZEUVc1R0xHVkJRVThyUlN4VlFVRlFMRU5CUVd0Q0xHVkJRV3hDTEVWQlFXMUROMG9zV1VGQlN6QkNMRXRCUVV3c1EwRkJWMlFzWVVGQllXVXNSMEZCWWl4RlFVRllMRVZCUVN0Q05VSXNUMEZCTDBJc1EwRkJia003UVVGRFJEdEJRVU5FT3p0QlFVVkJMRmRCUVVzc1NVRkJTV2xFTEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNXMUVMRk5CUVZOc1JDeE5RVUUzUWl4RlFVRnhRMFFzUjBGQmNrTXNSVUZCTUVNN1FVRkRlRU1zV1VGQlNYRklMR1ZCUVdWc1JTeFRRVUZUYmtRc1EwRkJWQ3hEUVVGdVFqdEJRVU5CTEdGQlFVc3NTVUZCU1hOSUxFZEJRVlFzU1VGQlowSkVMRmxCUVdoQ0xFVkJRVGhDTzBGQlF6VkNMR1ZCUVV0RkxGbEJRVXdzUTBGQmEwSkdMR0ZCUVdGRExFZEJRV0lzUTBGQmJFSTdRVUZEUkR0QlFVTkdPenRCUVVWRU8wRkJRMEVzVjBGQlN5eEpRVUZKZEVnc1RVRkJTU3hEUVVGaUxFVkJRV2RDUVN4TlFVRkpjVVFzVlVGQlZXMUZMRTlCUVZZc1EwRkJhMEoyU0N4TlFVRjBReXhGUVVFNFF5eEZRVUZGUkN4SFFVRm9SQ3hGUVVGdFJEdEJRVU5xUkN4WlFVRkplVWdzVDBGQlQzQkZMRlZCUVZWdFJTeFBRVUZXTEVOQlFXdENlRWdzUjBGQmJFSXNRMEZCV0R0QlFVTkJMRmxCUVVrd1NDeFJRVUZSTVVVc1IwRkJSekJGTEV0QlFXWTdPMEZCUlVFN1FVRkRRU3haUVVGSk1VVXNSMEZCUnpKRkxHRkJRVkFzUlVGQmMwSTdRVUZEY0VJM1JpeHBRa0ZCVHpoR0xHVkJRVkFzUTBGQmRVSXNRMEZCZGtJc1JVRkJNRUkxUlN4SFFVRkhNa1VzWVVGQk4wSTdRVUZEUkRzN1FVRkZSRHRCUVVOQkxGbEJRVWt6UlN4SFFVRkhOa1VzV1VGQlVDeEZRVUZ4UWp0QlFVTnVRaTlHTEdsQ1FVRlBaMGNzWTBGQlVDeERRVUZ6UWpsRkxFZEJRVWMyUlN4WlFVRjZRanRCUVVORU96dEJRVVZFTzBGQlEwRXZSaXhsUVVGUGFVY3NaMEpCUVZBc1EwRkJkMEl2UlN4SFFVRkhaMFlzWTBGQk0wSTdPMEZCUlVFN1FVRkRRU3haUVVGSlF5eFZRVUZWYkVJc1YwRkJWMjFDTEZWQlFWZ3NRMEZCYzBKVUxFdEJRVXRWTEZsQlFUTkNMRVZCUVhsRGFrWXNUMEZCZWtNc1JVRkJhMFJFTEU5QlFVOXRSaXhMUVVGNlJDeERRVUZrTzBGQlEwRjBSeXhsUVVGUGRVY3NWVUZCVUN4RFFVRnJRa29zVDBGQmJFSTdPMEZCUlVFN1FVRkRRVzVITEdWQlFVOTNSeXhYUVVGUUxFTkJRVzFDWWl4TFFVRkxZeXhUUVVGNFFqczdRVUZGUVR0QlFVTkJMRmxCUVVsa0xFdEJRVXRsTEUxQlFWUXNSVUZCYVVJN1FVRkRaakZITEdsQ1FVRlBNa2NzVjBGQlVEdEJRVU5CTTBjc2FVSkJRVTgwUnl4bFFVRlFMRU5CUTBWcVFpeExRVUZMYTBJc1UwRkVVQ3hGUVVWRmJFSXNTMEZCUzIxQ0xGTkJSbEFzUlVGSFJXNUNMRXRCUVV0dlFpeGpRVWhRTEVWQlNVVndRaXhMUVVGTGNVSXNZMEZLVUR0QlFVMUJhRWdzYVVKQlFVOXBTQ3hoUVVGUUxFTkJRMFYwUWl4TFFVRkxkVUlzVVVGRVVDeEZRVVZGZGtJc1MwRkJTM2RDTEdGQlJsQTdRVUZKUVc1SUxHbENRVUZQYjBnc1pVRkJVQ3hEUVVGMVFucENMRXRCUVVzd1FpeFhRVUUxUWp0QlFVTkVPenRCUVVWRU8wRkJRMEVzV1VGQlNURkNMRXRCUVVzeVFpeFZRVUZVTEVWQlFYRkNPMEZCUTI1Q2RFZ3NhVUpCUVU5MVNDeGxRVUZRTzBGQlEwRjJTQ3hwUWtGQlQzZElMRmxCUVZBc1EwRkJiMEkzUWl4TFFVRkxPRUlzVlVGQmVrSTdRVUZEUkR0QlFVTkVMRmxCUVVrNVFpeExRVUZMSzBJc1YwRkJWQ3hGUVVGelFqdEJRVU53UWpGSUxHbENRVUZQTWtnc1owSkJRVkE3UVVGRFJEczdRVUZGUkR0QlFVTkJNMGdzWlVGQlR6UklMR05CUVZBc1EwRkJjMEpxUXl4TFFVRkxhME1zV1VGQk0wSTdRVUZEUVN4WlFVRkpiRU1zUzBGQlMydERMRmxCUVV3c1MwRkJjMEpETEdOQlFVbERMR05CUVRsQ0xFVkJRVGhETzBGQlF6VkRPMEZCUTBFdlNDeHBRa0ZCVDJkSkxHMUNRVUZRTEVOQlEwVnlReXhMUVVGTGMwTXNhVUpCUkZBc1JVRkZSWFJETEV0QlFVdDFReXhuUWtGR1VDeEZRVWRGZGtNc1MwRkJTM2RETEdsQ1FVaFFPMEZCUzBGdVNTeHBRa0ZCVDI5SkxHbENRVUZRTEVOQlEwVjZReXhMUVVGTE1FTXNiVUpCUkZBc1JVRkZSVEZETEV0QlFVc3lReXh2UWtGR1VDeEZRVWRGTTBNc1MwRkJTelJETEc5Q1FVaFFMRVZCU1VVMVF5eExRVUZMTmtNc2MwSkJTbEE3TzBGQlQwRTdRVUZEUVhoSkxHbENRVUZQZVVrc2EwSkJRVkFzUTBGRFJUbERMRXRCUVVzclF5eG5Ra0ZFVUN4RlFVVkZMME1zUzBGQlMyZEVMR1ZCUmxBc1JVRkhSV2hFTEV0QlFVdHBSQ3huUWtGSVVEdEJRVXRCTlVrc2FVSkJRVTgyU1N4blFrRkJVQ3hEUVVORmJFUXNTMEZCUzIxRUxHdENRVVJRTEVWQlJVVnVSQ3hMUVVGTGIwUXNiVUpCUmxBc1JVRkhSWEJFTEV0QlFVdHhSQ3h0UWtGSVVDeEZRVWxGY2tRc1MwRkJTM05FTEhGQ1FVcFFPMEZCVFVRN08wRkJSVVE3UVVGRFFXcEtMR1ZCUVU5clNpeEpRVUZRTEVOQlFWbG9TU3hIUVVGSGFVa3NUVUZCWml4RlFVRjFRblpFTEV0QlFYWkNPenRCUVVWQkxHRkJRVXQzUkN4cFFrRkJURHRCUVVORU8wRkJRMFk3T3pzN096dHJRa0ZxV0d0Q2Nrb3NTU0lzSW1acGJHVWlPaUppWVhObExYSmxibVJsY21WeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFM0xUSXdNVGdnV0dsaGJXVnVJRmxoYW1rZ1UyOW1kSGRoY21VZ1EyOHVMQ0JNZEdRdUlGeHVYRzVwYlhCdmNuUWdleUJTWldONVkyeGxVRzl2YkNCOUlHWnliMjBnSnk0dUwyMWxiVzl3Snp0Y2JtbHRjRzl5ZENCbGJuVnRjeUJtY205dElDY3VMaTlsYm5WdGN5YzdYRzVwYlhCdmNuUWdleUIyWldNeUxDQjJaV016TENCMlpXTTBMQ0J0WVhReUxDQnRZWFF6TENCdFlYUTBMQ0JqYjJ4dmNqTXNJR052Ykc5eU5DQjlJR1p5YjIwZ0p5NHVMeTR1TDJOdmNtVXZkbTFoZEdnbk8xeHVhVzF3YjNKMElGQnliMmR5WVcxTWFXSWdabkp2YlNBbkxpOXdjbTluY21GdExXeHBZaWM3WEc1cGJYQnZjblFnVm1sbGR5Qm1jbTl0SUNjdUwzWnBaWGNuTzF4dWFXMXdiM0owSUdkbWVDQm1jbTl0SUNjdUxpOW5abmduTzF4dVhHNXNaWFFnWDIwelgzUnRjQ0E5SUcxaGRETXVZM0psWVhSbEtDazdYRzVzWlhRZ1gyMDBYM1J0Y0NBOUlHMWhkRFF1WTNKbFlYUmxLQ2s3WEc1Y2JteGxkQ0JmYzNSaFoyVkpibVp2Y3lBOUlHNWxkeUJTWldONVkyeGxVRzl2YkNnb0tTQTlQaUI3WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnYzNSaFoyVTZJRzUxYkd3c1hHNGdJQ0FnYVhSbGJYTTZJRzUxYkd3c1hHNGdJSDA3WEc1OUxDQTRLVHRjYmx4dWJHVjBJRjltYkc5aGRESmZjRzl2YkNBOUlHNWxkeUJTWldONVkyeGxVRzl2YkNnb0tTQTlQaUI3WEc0Z0lISmxkSFZ5YmlCdVpYY2dSbXh2WVhRek1rRnljbUY1S0RJcE8xeHVmU3dnT0NrN1hHNWNibXhsZENCZlpteHZZWFF6WDNCdmIyd2dQU0J1WlhjZ1VtVmplV05zWlZCdmIyd29LQ2tnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdibVYzSUVac2IyRjBNekpCY25KaGVTZ3pLVHRjYm4wc0lEZ3BPMXh1WEc1c1pYUWdYMlpzYjJGME5GOXdiMjlzSUQwZ2JtVjNJRkpsWTNsamJHVlFiMjlzS0NncElEMCtJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QkdiRzloZERNeVFYSnlZWGtvTkNrN1hHNTlMQ0E0S1R0Y2JseHViR1YwSUY5bWJHOWhkRGxmY0c5dmJDQTlJRzVsZHlCU1pXTjVZMnhsVUc5dmJDZ29LU0E5UGlCN1hHNGdJSEpsZEhWeWJpQnVaWGNnUm14dllYUXpNa0Z5Y21GNUtEa3BPMXh1ZlN3Z09DazdYRzVjYm14bGRDQmZabXh2WVhReE5sOXdiMjlzSUQwZ2JtVjNJRkpsWTNsamJHVlFiMjlzS0NncElEMCtJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QkdiRzloZERNeVFYSnlZWGtvTVRZcE8xeHVmU3dnT0NrN1hHNWNibXhsZENCZlpteHZZWFEyTkY5d2IyOXNJRDBnYm1WM0lGSmxZM2xqYkdWUWIyOXNLQ2dwSUQwK0lIdGNiaUFnY21WMGRYSnVJRzVsZHlCR2JHOWhkRE15UVhKeVlYa29OalFwTzF4dWZTd2dPQ2s3WEc1Y2JteGxkQ0JmYVc1ME1sOXdiMjlzSUQwZ2JtVjNJRkpsWTNsamJHVlFiMjlzS0NncElEMCtJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QkpiblF6TWtGeWNtRjVLRElwTzF4dWZTd2dPQ2s3WEc1Y2JteGxkQ0JmYVc1ME0xOXdiMjlzSUQwZ2JtVjNJRkpsWTNsamJHVlFiMjlzS0NncElEMCtJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QkpiblF6TWtGeWNtRjVLRE1wTzF4dWZTd2dPQ2s3WEc1Y2JteGxkQ0JmYVc1ME5GOXdiMjlzSUQwZ2JtVjNJRkpsWTNsamJHVlFiMjlzS0NncElEMCtJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QkpiblF6TWtGeWNtRjVLRFFwTzF4dWZTd2dPQ2s3WEc1Y2JteGxkQ0JmYVc1ME5qUmZjRzl2YkNBOUlHNWxkeUJTWldONVkyeGxVRzl2YkNnb0tTQTlQaUI3WEc0Z0lISmxkSFZ5YmlCdVpYY2dTVzUwTXpKQmNuSmhlU2cyTkNrN1hHNTlMQ0E0S1R0Y2JseHViR1YwSUY5MGVYQmxNblZ1YVdadmNtMVdZV3gxWlNBOUlIdGNiaUFnVzJWdWRXMXpMbEJCVWtGTlgwbE9WRjA2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjJZV3gxWlR0Y2JpQWdmU3hjYmx4dUlDQmJaVzUxYlhNdVVFRlNRVTFmU1U1VU1sMDZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMlpXTXlMbUZ5Y21GNUtGOXBiblF5WDNCdmIyd3VZV1JrS0Nrc0lIWmhiSFZsS1R0Y2JpQWdmU3hjYmx4dUlDQmJaVzUxYlhNdVVFRlNRVTFmU1U1VU0xMDZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMlpXTXpMbUZ5Y21GNUtGOXBiblF6WDNCdmIyd3VZV1JrS0Nrc0lIWmhiSFZsS1R0Y2JpQWdmU3hjYmx4dUlDQmJaVzUxYlhNdVVFRlNRVTFmU1U1VU5GMDZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMlpXTTBMbUZ5Y21GNUtGOXBiblEwWDNCdmIyd3VZV1JrS0Nrc0lIWmhiSFZsS1R0Y2JpQWdmU3hjYmx4dUlDQmJaVzUxYlhNdVVFRlNRVTFmUmt4UFFWUmRPaUJtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RtRnNkV1U3WEc0Z0lIMHNYRzVjYmlBZ1cyVnVkVzF6TGxCQlVrRk5YMFpNVDBGVU1sMDZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMlpXTXlMbUZ5Y21GNUtGOW1iRzloZERKZmNHOXZiQzVoWkdRb0tTd2dkbUZzZFdVcE8xeHVJQ0I5TEZ4dVhHNGdJRnRsYm5WdGN5NVFRVkpCVFY5R1RFOUJWRE5kT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkbVZqTXk1aGNuSmhlU2hmWm14dllYUXpYM0J2YjJ3dVlXUmtLQ2tzSUhaaGJIVmxLVHRjYmlBZ2ZTeGNibHh1SUNCYlpXNTFiWE11VUVGU1FVMWZSa3hQUVZRMFhUb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhabFl6UXVZWEp5WVhrb1gyWnNiMkYwTkY5d2IyOXNMbUZrWkNncExDQjJZV3gxWlNrN1hHNGdJSDBzWEc1Y2JpQWdXMlZ1ZFcxekxsQkJVa0ZOWDBOUFRFOVNNMTA2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmpiMnh2Y2pNdVlYSnlZWGtvWDJac2IyRjBNMTl3YjI5c0xtRmtaQ2dwTENCMllXeDFaU2s3WEc0Z0lIMHNYRzVjYmlBZ1cyVnVkVzF6TGxCQlVrRk5YME5QVEU5U05GMDZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCamIyeHZjalF1WVhKeVlYa29YMlpzYjJGME5GOXdiMjlzTG1Ga1pDZ3BMQ0IyWVd4MVpTazdYRzRnSUgwc1hHNWNiaUFnVzJWdWRXMXpMbEJCVWtGTlgwMUJWREpkT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiV0YwTWk1aGNuSmhlU2hmWm14dllYUTBYM0J2YjJ3dVlXUmtLQ2tzSUhaaGJIVmxLVHRjYmlBZ2ZTeGNibHh1SUNCYlpXNTFiWE11VUVGU1FVMWZUVUZVTTEwNklHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ0WVhRekxtRnljbUY1S0Y5bWJHOWhkRGxmY0c5dmJDNWhaR1FvS1N3Z2RtRnNkV1VwTzF4dUlDQjlMRnh1WEc0Z0lGdGxiblZ0Y3k1UVFWSkJUVjlOUVZRMFhUb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUcxaGREUXVZWEp5WVhrb1gyWnNiMkYwTVRaZmNHOXZiQzVoWkdRb0tTd2dkbUZzZFdVcE8xeHVJQ0I5TEZ4dVhHNGdJQzh2SUZ0bGJuVnRjeTVRUVZKQlRWOVVSVmhVVlZKRlh6SkVYVG9nWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDOHZJSDBzWEc1Y2JpQWdMeThnVzJWdWRXMXpMbEJCVWtGTlgxUkZXRlJWVWtWZlExVkNSVjA2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQXZMeUI5TEZ4dWZUdGNibHh1YkdWMElGOTBlWEJsTW5WdWFXWnZjbTFCY25KaGVWWmhiSFZsSUQwZ2UxeHVJQ0JiWlc1MWJYTXVVRUZTUVUxZlNVNVVYVG9nZTF4dUlDQWdJR1oxYm1NZ0tIWmhiSFZsY3lrZ2UxeHVJQ0FnSUNBZ2JHVjBJSEpsYzNWc2RDQTlJRjlwYm5RMk5GOXdiMjlzTG1Ga1pDZ3BPMXh1SUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0IyWVd4MVpYTXViR1Z1WjNSb095QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwVzJsZElEMGdkbUZzZFdWelcybGRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0I5TEZ4dUlDQWdJSE5wZW1VNklERXNYRzRnSUgwc1hHNWNiaUFnVzJWdWRXMXpMbEJCVWtGTlgwbE9WREpkT2lCN1hHNGdJQ0FnWm5WdVl5QW9kbUZzZFdWektTQjdYRzRnSUNBZ0lDQnNaWFFnY21WemRXeDBJRDBnWDJsdWREWTBYM0J2YjJ3dVlXUmtLQ2s3WEc0Z0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhaaGJIVmxjeTVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE4xYkhSYk1pQXFJR2xkSUQwZ2RtRnNkV1Z6VzJsZExuZzdYRzRnSUNBZ0lDQWdJSEpsYzNWc2RGc3lJQ29nYVNBcklERmRJRDBnZG1Gc2RXVnpXMmxkTG5rN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lIMHNYRzRnSUNBZ2MybDZaVG9nTWl4Y2JpQWdmU3hjYmx4dUlDQmJaVzUxYlhNdVVFRlNRVTFmU1U1VU0xMDZJSHRjYmlBZ0lDQm1kVzVqT2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnYzJsNlpUb2dNeXhjYmlBZ2ZTeGNibHh1SUNCYlpXNTFiWE11VUVGU1FVMWZTVTVVTkYwNklIdGNiaUFnSUNCbWRXNWpJQ2gyWVd4MVpYTXBJSHRjYmlBZ0lDQWdJR3hsZENCeVpYTjFiSFFnUFNCZmFXNTBOalJmY0c5dmJDNWhaR1FvS1R0Y2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2RtRnNkV1Z6TG14bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCMklEMGdkbUZzZFdWelcybGRPMXh1SUNBZ0lDQWdJQ0J5WlhOMWJIUmJOQ0FxSUdsZElEMGdkaTU0TzF4dUlDQWdJQ0FnSUNCeVpYTjFiSFJiTkNBcUlHa2dLeUF4WFNBOUlIWXVlVHRjYmlBZ0lDQWdJQ0FnY21WemRXeDBXelFnS2lCcElDc2dNbDBnUFNCMkxubzdYRzRnSUNBZ0lDQWdJSEpsYzNWc2RGczBJQ29nYVNBcklETmRJRDBnZGk1M08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ0lDQjlMRnh1SUNBZ0lITnBlbVU2SURRc1hHNGdJSDBzWEc1Y2JpQWdXMlZ1ZFcxekxsQkJVa0ZOWDBaTVQwRlVYVG9nZTF4dUlDQWdJR1oxYm1NZ0tIWmhiSFZsY3lrZ2UxeHVJQ0FnSUNBZ2JHVjBJSEpsYzNWc2RDQTlJRjltYkc5aGREWTBYM0J2YjJ3dVlXUmtLQ2s3WEc0Z0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhaaGJIVmxjeTVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE4xYkhSYmFWMGdQU0IyWVd4MVpYTmJhVjA3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUgwc1hHNGdJQ0FnYzJsNlpUb2dNVnh1SUNCOUxGeHVYRzRnSUZ0bGJuVnRjeTVRUVZKQlRWOUdURTlCVkRKZE9pQjdYRzRnSUNBZ1puVnVZeUFvZG1Gc2RXVnpLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2NtVnpkV3gwSUQwZ1gyWnNiMkYwTmpSZmNHOXZiQzVoWkdRb0tUdGNiaUFnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dkbUZzZFdWekxteGxibWQwYURzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkRnN5SUNvZ2FWMGdQU0IyWVd4MVpYTmJhVjB1ZUR0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwV3pJZ0tpQnBJQ3NnTVYwZ1BTQjJZV3gxWlhOYmFWMHVlVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJQ0FnZlN4Y2JpQWdJQ0J6YVhwbE9pQXlMRnh1SUNCOUxGeHVYRzRnSUZ0bGJuVnRjeTVRUVZKQlRWOUdURTlCVkROZE9pQjdYRzRnSUNBZ1puVnVZem9nZFc1a1pXWnBibVZrTEZ4dUlDQWdJSE5wZW1VNklETXNYRzRnSUgwc1hHNWNiaUFnVzJWdWRXMXpMbEJCVWtGTlgwWk1UMEZVTkYwNklIdGNiaUFnSUNCbWRXNWpJQ2gyWVd4MVpYTXBJSHRjYmlBZ0lDQWdJR3hsZENCeVpYTjFiSFFnUFNCZlpteHZZWFEyTkY5d2IyOXNMbUZrWkNncE8xeHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQjJZV3gxWlhNdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElIWWdQU0IyWVd4MVpYTmJhVjA3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkRnMwSUNvZ2FWMGdQU0IyTG5nN1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZEZzMElDb2dhU0FySURGZElEMGdkaTU1TzF4dUlDQWdJQ0FnSUNCeVpYTjFiSFJiTkNBcUlHa2dLeUF5WFNBOUlIWXVlanRjYmlBZ0lDQWdJQ0FnY21WemRXeDBXelFnS2lCcElDc2dNMTBnUFNCMkxuYzdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJSDBzWEc0Z0lDQWdjMmw2WlRvZ05DeGNiaUFnZlN4Y2JseHVJQ0JiWlc1MWJYTXVVRUZTUVUxZlEwOU1UMUl6WFRvZ2UxeHVJQ0FnSUdaMWJtTTZJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQnphWHBsT2lBekxGeHVJQ0I5TEZ4dVhHNGdJRnRsYm5WdGN5NVFRVkpCVFY5RFQweFBValJkT2lCN1hHNGdJQ0FnWm5WdVl5QW9kbUZzZFdWektTQjdYRzRnSUNBZ0lDQnNaWFFnY21WemRXeDBJRDBnWDJac2IyRjBOalJmY0c5dmJDNWhaR1FvS1R0Y2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2RtRnNkV1Z6TG14bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCMklEMGdkbUZzZFdWelcybGRPMXh1SUNBZ0lDQWdJQ0J5WlhOMWJIUmJOQ0FxSUdsZElEMGdkaTV5TzF4dUlDQWdJQ0FnSUNCeVpYTjFiSFJiTkNBcUlHa2dLeUF4WFNBOUlIWXVaenRjYmlBZ0lDQWdJQ0FnY21WemRXeDBXelFnS2lCcElDc2dNbDBnUFNCMkxtSTdYRzRnSUNBZ0lDQWdJSEpsYzNWc2RGczBJQ29nYVNBcklETmRJRDBnZGk1aE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ0lDQjlMRnh1SUNBZ0lITnBlbVU2SURRc1hHNGdJSDBzWEc1Y2JpQWdXMlZ1ZFcxekxsQkJVa0ZOWDAxQlZESmRPaUI3WEc0Z0lDQWdablZ1WXlBb2RtRnNkV1Z6S1NCN1hHNGdJQ0FnSUNCc1pYUWdjbVZ6ZFd4MElEMGdYMlpzYjJGME5qUmZjRzl2YkM1aFpHUW9LVHRjYmlBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnZG1Gc2RXVnpMbXhsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IySUQwZ2RtRnNkV1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQnlaWE4xYkhSYk5DQXFJR2xkSUQwZ2RpNXRNREE3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkRnMwSUNvZ2FTQXJJREZkSUQwZ2RpNXRNREU3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkRnMwSUNvZ2FTQXJJREpkSUQwZ2RpNXRNREk3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkRnMwSUNvZ2FTQXJJRE5kSUQwZ2RpNXRNRE03WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUgwc1hHNGdJQ0FnYzJsNlpUb2dORnh1SUNCOUxGeHVYRzRnSUZ0bGJuVnRjeTVRUVZKQlRWOU5RVlF6WFRvZ2UxeHVJQ0FnSUdaMWJtTTZJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQnphWHBsT2lBNVhHNGdJSDBzWEc1Y2JseHVJQ0JiWlc1MWJYTXVVRUZTUVUxZlRVRlVORjA2SUh0Y2JpQWdJQ0JtZFc1aklDaDJZV3gxWlhNcElIdGNiaUFnSUNBZ0lHeGxkQ0J5WlhOMWJIUWdQU0JmWm14dllYUTJORjl3YjI5c0xtRmtaQ2dwTzF4dUlDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCMllXeDFaWE11YkdWdVozUm9PeUFySzJrcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhZZ1BTQjJZV3gxWlhOYmFWMDdYRzRnSUNBZ0lDQWdJSEpsYzNWc2RGc3hOaUFxSUdsZElEMGdkaTV0TURBN1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZEZzeE5pQXFJR2tnS3lBeFhTQTlJSFl1YlRBeE8xeHVJQ0FnSUNBZ0lDQnlaWE4xYkhSYk1UWWdLaUJwSUNzZ01sMGdQU0IyTG0wd01qdGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MFd6RTJJQ29nYVNBcklETmRJRDBnZGk1dE1ETTdYRzRnSUNBZ0lDQWdJSEpsYzNWc2RGc3hOaUFxSUdrZ0t5QTBYU0E5SUhZdWJUQTBPMXh1SUNBZ0lDQWdJQ0J5WlhOMWJIUmJNVFlnS2lCcElDc2dOVjBnUFNCMkxtMHdOVHRjYmlBZ0lDQWdJQ0FnY21WemRXeDBXekUySUNvZ2FTQXJJRFpkSUQwZ2RpNXRNRFk3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkRnN4TmlBcUlHa2dLeUEzWFNBOUlIWXViVEEzTzF4dUlDQWdJQ0FnSUNCeVpYTjFiSFJiTVRZZ0tpQnBJQ3NnT0YwZ1BTQjJMbTB3T0R0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwV3pFMklDb2dhU0FySURsZElEMGdkaTV0TURrN1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZEZzeE5pQXFJR2tnS3lBeE1GMGdQU0IyTG0weE1EdGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MFd6RTJJQ29nYVNBcklERXhYU0E5SUhZdWJURXhPMXh1SUNBZ0lDQWdJQ0J5WlhOMWJIUmJNVFlnS2lCcElDc2dNVEpkSUQwZ2RpNXRNVEk3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkRnN4TmlBcUlHa2dLeUF4TTEwZ1BTQjJMbTB4TXp0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwV3pFMklDb2dhU0FySURFMFhTQTlJSFl1YlRFME8xeHVJQ0FnSUNBZ0lDQnlaWE4xYkhSYk1UWWdLaUJwSUNzZ01UVmRJRDBnZGk1dE1UVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJSDBzWEc0Z0lDQWdjMmw2WlRvZ01UWmNiaUFnZlN4Y2JseHVJQ0F2THlCYlpXNTFiWE11VUVGU1FVMWZWRVZZVkZWU1JWOHlSRjA2SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQXZMeUI5TEZ4dVhHNGdJQzh2SUZ0bGJuVnRjeTVRUVZKQlRWOVVSVmhVVlZKRlgwTlZRa1ZkT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdMeThnZlN4Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFSmhjMlVnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRSEJoY21GdElIdG5abmd1UkdWMmFXTmxmU0JrWlhacFkyVmNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RITmNiaUFnSUNvZ1FIQmhjbUZ0SUh0blpuZ3VWR1Y0ZEhWeVpUSkVmU0J2Y0hSekxtUmxabUYxYkhSVVpYaDBkWEpsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdaMlo0TGxSbGVIUjFjbVZEZFdKbGZTQnZjSFJ6TG1SbFptRjFiSFJVWlhoMGRYSmxRM1ZpWlZ4dUlDQWdLaTljYmlBZ1kyOXVjM1J5ZFdOMGIzSW9aR1YyYVdObExDQnZjSFJ6S1NCN1hHNGdJQ0FnZEdocGN5NWZaR1YyYVdObElEMGdaR1YyYVdObE8xeHVJQ0FnSUhSb2FYTXVYM0J5YjJkeVlXMU1hV0lnUFNCdVpYY2dVSEp2WjNKaGJVeHBZaWhrWlhacFkyVXBPMXh1SUNBZ0lIUm9hWE11WDI5d2RITWdQU0J2Y0hSek8xeHVJQ0FnSUhSb2FYTXVYM1I1Y0dVeVpHVm1ZWFZzZEZaaGJIVmxJRDBnZTF4dUlDQWdJQ0FnVzJWdWRXMXpMbEJCVWtGTlgwbE9WRjA2SURBc1hHNGdJQ0FnSUNCYlpXNTFiWE11VUVGU1FVMWZTVTVVTWwwNklIWmxZekl1WTNKbFlYUmxLREFzSURBcExGeHVJQ0FnSUNBZ1cyVnVkVzF6TGxCQlVrRk5YMGxPVkROZE9pQjJaV016TG1OeVpXRjBaU2d3TENBd0xDQXdLU3hjYmlBZ0lDQWdJRnRsYm5WdGN5NVFRVkpCVFY5SlRsUTBYVG9nZG1Wak5DNWpjbVZoZEdVb01Dd2dNQ3dnTUN3Z01Da3NYRzRnSUNBZ0lDQmJaVzUxYlhNdVVFRlNRVTFmUmt4UFFWUmRPaUF3TGpBc1hHNGdJQ0FnSUNCYlpXNTFiWE11VUVGU1FVMWZSa3hQUVZReVhUb2dkbVZqTWk1amNtVmhkR1VvTUN3Z01Da3NYRzRnSUNBZ0lDQmJaVzUxYlhNdVVFRlNRVTFmUmt4UFFWUXpYVG9nZG1Wak15NWpjbVZoZEdVb01Dd2dNQ3dnTUNrc1hHNGdJQ0FnSUNCYlpXNTFiWE11VUVGU1FVMWZSa3hQUVZRMFhUb2dkbVZqTkM1amNtVmhkR1VvTUN3Z01Dd2dNQ3dnTUNrc1hHNGdJQ0FnSUNCYlpXNTFiWE11VUVGU1FVMWZRMDlNVDFJelhUb2dZMjlzYjNJekxtTnlaV0YwWlNnd0xDQXdMQ0F3S1N4Y2JpQWdJQ0FnSUZ0bGJuVnRjeTVRUVZKQlRWOURUMHhQVWpSZE9pQmpiMnh2Y2pRdVkzSmxZWFJsS0RBc0lEQXNJREFzSURFcExGeHVJQ0FnSUNBZ1cyVnVkVzF6TGxCQlVrRk5YMDFCVkRKZE9pQnRZWFF5TG1OeVpXRjBaU2dwTEZ4dUlDQWdJQ0FnVzJWdWRXMXpMbEJCVWtGTlgwMUJWRE5kT2lCdFlYUXpMbU55WldGMFpTZ3BMRnh1SUNBZ0lDQWdXMlZ1ZFcxekxsQkJVa0ZOWDAxQlZEUmRPaUJ0WVhRMExtTnlaV0YwWlNncExGeHVJQ0FnSUNBZ1cyVnVkVzF6TGxCQlVrRk5YMVJGV0ZSVlVrVmZNa1JkT2lCdmNIUnpMbVJsWm1GMWJIUlVaWGgwZFhKbExGeHVJQ0FnSUNBZ1cyVnVkVzF6TGxCQlVrRk5YMVJGV0ZSVlVrVmZRMVZDUlYwNklHOXdkSE11WkdWbVlYVnNkRlJsZUhSMWNtVkRkV0psTEZ4dUlDQWdJSDA3WEc0Z0lDQWdkR2hwY3k1ZmMzUmhaMlV5Wm00Z1BTQjdmVHRjYmlBZ0lDQjBhR2x6TGw5MWMyVmtWR1Y0ZEhWeVpWVnVhWFJ6SUQwZ01EdGNibHh1SUNBZ0lIUm9hWE11WDNacFpYZFFiMjlzY3lBOUlHNWxkeUJTWldONVkyeGxVRzl2YkNnb0tTQTlQaUI3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZacFpYY29LVHRjYmlBZ0lDQjlMQ0E0S1R0Y2JseHVJQ0FnSUhSb2FYTXVYMlJ5WVhkSmRHVnRjMUJ2YjJ4eklEMGdibVYzSUZKbFkzbGpiR1ZRYjI5c0tDZ3BJRDArSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUcxdlpHVnNPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQnViMlJsT2lCdWRXeHNMRnh1SUNBZ0lDQWdJQ0JwWVRvZ2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnWldabVpXTjBPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQmtaV1pwYm1Wek9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNCMWJtbG1iM0p0Y3pvZ2JuVnNiRnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlMQ0F4TURBcE8xeHVYRzRnSUNBZ2RHaHBjeTVmYzNSaFoyVkpkR1Z0YzFCdmIyeHpJRDBnYm1WM0lGSmxZM2xqYkdWUWIyOXNLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVbVZqZVdOc1pWQnZiMndvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUcxdlpHVnNPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQWdJRzV2WkdVNklHNTFiR3dzWEc0Z0lDQWdJQ0FnSUNBZ2FXRTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lDQWdaV1ptWldOME9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNBZ0lHUmxabWx1WlhNNklHNTFiR3dzWEc0Z0lDQWdJQ0FnSUNBZ2RHVmphRzVwY1hWbE9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNBZ0lITnZjblJMWlhrNklDMHhMRnh1SUNBZ0lDQWdJQ0FnSUhWdWFXWnZjbTF6T2lCdWRXeHNYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0I5TENBeE1EQXBPMXh1SUNBZ0lIMHNJREUyS1R0Y2JpQWdmVnh1WEc0Z0lGOXlaWE5sZEZSbGVIUjFaWEpWYm1sMEtDa2dlMXh1SUNBZ0lIUm9hWE11WDNWelpXUlVaWGgwZFhKbFZXNXBkSE1nUFNBd08xeHVJQ0I5WEc1Y2JpQWdYMkZzYkc5alZHVjRkSFZ5WlZWdWFYUW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ1pHVjJhV05sSUQwZ2RHaHBjeTVmWkdWMmFXTmxPMXh1WEc0Z0lDQWdiR1YwSUhWdWFYUWdQU0IwYUdsekxsOTFjMlZrVkdWNGRIVnlaVlZ1YVhSek8xeHVJQ0FnSUdsbUlDaDFibWwwSUQ0OUlHUmxkbWxqWlM1ZlkyRndjeTV0WVhoVVpYaDBkWEpsVlc1cGRITXBJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmloZ1ZISjVhVzVuSUhSdklIVnpaU0FrZTNWdWFYUjlJSFJsZUhSMWNtVWdkVzVwZEhNZ2QyaHBiR1VnZEdocGN5QkhVRlVnYzNWd2NHOXlkSE1nYjI1c2VTQWtlMlJsZG1salpTNWZZMkZ3Y3k1dFlYaFVaWGgwZFhKbFZXNXBkSE45WUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWZkWE5sWkZSbGVIUjFjbVZWYm1sMGN5QXJQU0F4TzF4dUlDQWdJSEpsZEhWeWJpQjFibWwwTzF4dUlDQjlYRzVjYmlBZ1gzSmxaMmx6ZEdWeVUzUmhaMlVvYm1GdFpTd2dabTRwSUh0Y2JpQWdJQ0IwYUdsekxsOXpkR0ZuWlRKbWJsdHVZVzFsWFNBOUlHWnVPMXh1SUNCOVhHNWNiaUFnWTJ4bFlYSWdLQ2tnZTF4dUlDQWdJSFJvYVhNdVgzQnliMmR5WVcxTWFXSXVZMnhsWVhJb0tUdGNiaUFnSUNCMGFHbHpMbkpsYzJWMEtDazdYRzRnSUgxY2JseHVJQ0J5WlhObGRDZ3BJSHRjYmlBZ0lDQjBhR2x6TGw5MmFXVjNVRzl2YkhNdWNtVnpaWFFvS1R0Y2JpQWdJQ0IwYUdsekxsOXpkR0ZuWlVsMFpXMXpVRzl2YkhNdWNtVnpaWFFvS1R0Y2JpQWdmVnh1WEc0Z0lGOXlaWEYxWlhOMFZtbGxkeWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmRtbGxkMUJ2YjJ4ekxtRmtaQ2dwTzF4dUlDQjlYRzVjYmlBZ1gzSmxibVJsY2loMmFXVjNMQ0J6WTJWdVpTa2dlMXh1SUNBZ0lHTnZibk4wSUdSbGRtbGpaU0E5SUhSb2FYTXVYMlJsZG1salpUdGNibHh1SUNBZ0lDOHZJSE5sZEhWd0lHWnlZVzFsWW5WbVptVnlYRzRnSUNBZ1pHVjJhV05sTG5ObGRFWnlZVzFsUW5WbVptVnlLSFpwWlhjdVgyWnlZVzFsWW5WbVptVnlLVHRjYmx4dUlDQWdJQzh2SUhObGRIVndJSFpwWlhkd2IzSjBYRzRnSUNBZ1pHVjJhV05sTG5ObGRGWnBaWGR3YjNKMEtGeHVJQ0FnSUNBZ2RtbGxkeTVmY21WamRDNTRMRnh1SUNBZ0lDQWdkbWxsZHk1ZmNtVmpkQzU1TEZ4dUlDQWdJQ0FnZG1sbGR5NWZjbVZqZEM1M0xGeHVJQ0FnSUNBZ2RtbGxkeTVmY21WamRDNW9YRzRnSUNBZ0tUdGNibHh1SUNBZ0lDOHZJSE5sZEhWd0lHTnNaV0Z5WEc0Z0lDQWdiR1YwSUdOc1pXRnlUM0IwY3lBOUlIdDlPMXh1SUNBZ0lHbG1JQ2gyYVdWM0xsOWpiR1ZoY2tac1lXZHpJQ1lnWlc1MWJYTXVRMHhGUVZKZlEwOU1UMUlwSUh0Y2JpQWdJQ0FnSUdOc1pXRnlUM0IwY3k1amIyeHZjaUE5SUZ0Y2JpQWdJQ0FnSUNBZ2RtbGxkeTVmWTI5c2IzSXVjaXhjYmlBZ0lDQWdJQ0FnZG1sbGR5NWZZMjlzYjNJdVp5eGNiaUFnSUNBZ0lDQWdkbWxsZHk1ZlkyOXNiM0l1WWl4Y2JpQWdJQ0FnSUNBZ2RtbGxkeTVmWTI5c2IzSXVZVnh1SUNBZ0lDQWdYVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFpwWlhjdVgyTnNaV0Z5Um14aFozTWdKaUJsYm5WdGN5NURURVZCVWw5RVJWQlVTQ2tnZTF4dUlDQWdJQ0FnWTJ4bFlYSlBjSFJ6TG1SbGNIUm9JRDBnZG1sbGR5NWZaR1Z3ZEdnN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMmFXVjNMbDlqYkdWaGNrWnNZV2R6SUNZZ1pXNTFiWE11UTB4RlFWSmZVMVJGVGtOSlRDa2dlMXh1SUNBZ0lDQWdZMnhsWVhKUGNIUnpMbk4wWlc1amFXd2dQU0IyYVdWM0xsOXpkR1Z1WTJsc08xeHVJQ0FnSUgxY2JpQWdJQ0JrWlhacFkyVXVZMnhsWVhJb1kyeGxZWEpQY0hSektUdGNibHh1SUNBZ0lDOHZJR2RsZENCaGJHd2daSEpoZHlCcGRHVnRjMXh1SUNBZ0lIUm9hWE11WDJSeVlYZEpkR1Z0YzFCdmIyeHpMbkpsYzJWMEtDazdYRzVjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSE5qWlc1bExsOXRiMlJsYkhNdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQWdJR3hsZENCdGIyUmxiQ0E5SUhOalpXNWxMbDl0YjJSbGJITXVaR0YwWVZ0cFhUdGNibHh1SUNBZ0lDQWdMeThnWm1sc2RHVnlJRzF2WkdWc0lHSjVJSFpwWlhkY2JpQWdJQ0FnSUdsbUlDZ29iVzlrWld3dVgyTjFiR3hwYm1kTllYTnJJQ1lnZG1sbGR5NWZZM1ZzYkdsdVowMWhjMnNwSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCc1pYUWdaSEpoZDBsMFpXMGdQU0IwYUdsekxsOWtjbUYzU1hSbGJYTlFiMjlzY3k1aFpHUW9LVHRjYmlBZ0lDQWdJRzF2WkdWc0xtVjRkSEpoWTNSRWNtRjNTWFJsYlNoa2NtRjNTWFJsYlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1ZFOUVUem9nZFhCa1lYUmxJR1p5ZFhOMGRXMWNiaUFnSUNBdkx5QlVUMFJQT2lCMmFYTmlhV3hwZEhrZ2RHVnpkRnh1SUNBZ0lDOHZJR1p5ZFhOMGRXMHVkWEJrWVhSbEtIWnBaWGN1WDNacFpYZFFjbTlxS1R0Y2JseHVJQ0FnSUM4dklHUnBjM0JoZEdOb0lHUnlZWGNnYVhSbGJYTWdkRzhnWkdsbVptVnlaVzUwSUhOMFlXZGxYRzRnSUNBZ1gzTjBZV2RsU1c1bWIzTXVjbVZ6WlhRb0tUdGNibHh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dkbWxsZHk1ZmMzUmhaMlZ6TG14bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ0lDQnNaWFFnYzNSaFoyVWdQU0IyYVdWM0xsOXpkR0ZuWlhOYmFWMDdYRzRnSUNBZ0lDQnNaWFFnYzNSaFoyVkpkR1Z0Y3lBOUlIUm9hWE11WDNOMFlXZGxTWFJsYlhOUWIyOXNjeTVoWkdRb0tUdGNiaUFnSUNBZ0lITjBZV2RsU1hSbGJYTXVjbVZ6WlhRb0tUdGNibHh1SUNBZ0lDQWdabTl5SUNoc1pYUWdhaUE5SURBN0lHb2dQQ0IwYUdsekxsOWtjbUYzU1hSbGJYTlFiMjlzY3k1c1pXNW5kR2c3SUNzcmFpa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pISmhkMGwwWlcwZ1BTQjBhR2x6TGw5a2NtRjNTWFJsYlhOUWIyOXNjeTVrWVhSaFcycGRPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2RHVmphQ0E5SUdSeVlYZEpkR1Z0TG1WbVptVmpkQzVuWlhSVVpXTm9ibWx4ZFdVb2MzUmhaMlVwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwWldOb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElITjBZV2RsU1hSbGJTQTlJSE4wWVdkbFNYUmxiWE11WVdSa0tDazdYRzRnSUNBZ0lDQWdJQ0FnYzNSaFoyVkpkR1Z0TG0xdlpHVnNJRDBnWkhKaGQwbDBaVzB1Ylc5a1pXdzdYRzRnSUNBZ0lDQWdJQ0FnYzNSaFoyVkpkR1Z0TG01dlpHVWdQU0JrY21GM1NYUmxiUzV1YjJSbE8xeHVJQ0FnSUNBZ0lDQWdJSE4wWVdkbFNYUmxiUzVwWVNBOUlHUnlZWGRKZEdWdExtbGhPMXh1SUNBZ0lDQWdJQ0FnSUhOMFlXZGxTWFJsYlM1bFptWmxZM1FnUFNCa2NtRjNTWFJsYlM1bFptWmxZM1E3WEc0Z0lDQWdJQ0FnSUNBZ2MzUmhaMlZKZEdWdExtUmxabWx1WlhNZ1BTQmtjbUYzU1hSbGJTNWtaV1pwYm1Wek8xeHVJQ0FnSUNBZ0lDQWdJSE4wWVdkbFNYUmxiUzUwWldOb2JtbHhkV1VnUFNCMFpXTm9PMXh1SUNBZ0lDQWdJQ0FnSUhOMFlXZGxTWFJsYlM1emIzSjBTMlY1SUQwZ0xURTdYRzRnSUNBZ0lDQWdJQ0FnYzNSaFoyVkpkR1Z0TG5WdWFXWnZjbTF6SUQwZ1pISmhkMGwwWlcwdWRXNXBabTl5YlhNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdiR1YwSUhOMFlXZGxTVzVtYnlBOUlGOXpkR0ZuWlVsdVptOXpMbUZrWkNncE8xeHVJQ0FnSUNBZ2MzUmhaMlZKYm1adkxuTjBZV2RsSUQwZ2MzUmhaMlU3WEc0Z0lDQWdJQ0J6ZEdGblpVbHVabTh1YVhSbGJYTWdQU0J6ZEdGblpVbDBaVzF6TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUhKbGJtUmxjaUJ6ZEdGblpYTmNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElGOXpkR0ZuWlVsdVptOXpMbXhsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnSUNCc1pYUWdhVzVtYnlBOUlGOXpkR0ZuWlVsdVptOXpMbVJoZEdGYmFWMDdYRzRnSUNBZ0lDQnNaWFFnWm00Z1BTQjBhR2x6TGw5emRHRm5aVEptYmx0cGJtWnZMbk4wWVdkbFhUdGNibHh1SUNBZ0lDQWdabTRvZG1sbGR5d2dhVzVtYnk1cGRHVnRjeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWDNObGRGQnliM0JsY25SNUlDaHdjbTl3S1NCN1hHNGdJQ0FnWTI5dWMzUWdaR1YyYVdObElEMGdkR2hwY3k1ZlpHVjJhV05sTzF4dUlDQWdJR3hsZENCd1lYSmhiU0E5SUhCeWIzQXVkbUZzZFdVN1hHNWNiaUFnSUNCcFppQW9jR0Z5WVcwZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnY0dGeVlXMGdQU0J3Y205d0xuWmhiRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvY0dGeVlXMGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2NHRnlZVzBnUFNCMGFHbHpMbDkwZVhCbE1tUmxabUYxYkhSV1lXeDFaVnR3Y205d0xuUjVjR1ZkTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNod1lYSmhiU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvWUVaaGFXeGxaQ0IwYnlCelpYUWdkR1ZqYUc1cGNYVmxJSEJ5YjNCbGNuUjVJQ1I3Y0hKdmNDNXVZVzFsZlN3Z2RtRnNkV1VnYm05MElHWnZkVzVrTG1BcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUhCeWIzQXVkSGx3WlNBOVBUMGdaVzUxYlhNdVVFRlNRVTFmVkVWWVZGVlNSVjh5UkNCOGZGeHVJQ0FnSUNBZ2NISnZjQzUwZVhCbElEMDlQU0JsYm5WdGN5NVFRVkpCVFY5VVJWaFVWVkpGWDBOVlFrVmNiaUFnSUNBcElIdGNiaUFnSUNBZ0lHbG1JQ2h3Y205d0xuTnBlbVVnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2NISnZjQzV6YVhwbElDRTlQU0J3WVhKaGJTNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtHQlVhR1VnYkdWdVozUm9JRzltSUhSbGVIUjFjbVVnWVhKeVlYa2dLQ1I3Y0dGeVlXMHViR1Z1WjNSb2ZTa2dhWE1nYm05MElHTnZjbkpsYm5Rb1pYaHdaV04wSUNSN2NISnZjQzV6YVhwbGZTa3VZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHeGxkQ0J6Ykc5MGN5QTlJRjlwYm5RMk5GOXdiMjlzTG1Ga1pDZ3BPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwYm1SbGVDQTlJREE3SUdsdVpHVjRJRHdnY0dGeVlXMHViR1Z1WjNSb095QXJLMmx1WkdWNEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYzJ4dmRITmJhVzVrWlhoZElEMGdkR2hwY3k1ZllXeHNiMk5VWlhoMGRYSmxWVzVwZENncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1JsZG1salpTNXpaWFJVWlhoMGRYSmxRWEp5WVhrb2NISnZjQzV1WVcxbExDQndZWEpoYlN3Z2MyeHZkSE1wTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWkdWMmFXTmxMbk5sZEZSbGVIUjFjbVVvY0hKdmNDNXVZVzFsTENCd1lYSmhiU3dnZEdocGN5NWZZV3hzYjJOVVpYaDBkWEpsVlc1cGRDZ3BLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2JHVjBJR052Ym5abGNuUmxaRlpoYkhWbE8xeHVJQ0FnSUNBZ2FXWWdLSEJoY21GdElHbHVjM1JoYm1ObGIyWWdSbXh2WVhRek1rRnljbUY1SUh4OElIQmhjbUZ0SUdsdWMzUmhibU5sYjJZZ1NXNTBNekpCY25KaGVTa2dlMXh1SUNBZ0lDQWdJQ0JrWlhacFkyVXVjMlYwVlc1cFptOXliVVJwY21WamRHeDVLSEJ5YjNBdWJtRnRaU3dnY0dGeVlXMHBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmxiSE5sSUdsbUlDaHdjbTl3TG5OcGVtVWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWTI5dWRtVnlkRUZ5Y21GNUlEMGdYM1I1Y0dVeWRXNXBabTl5YlVGeWNtRjVWbUZzZFdWYmNISnZjQzUwZVhCbFhUdGNiaUFnSUNBZ0lDQWdhV1lnS0dOdmJuWmxjblJCY25KaGVTNW1kVzVqSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RWYm1sbWIzSnRJR0Z5Y21GNUlHOW1JR052Ykc5eU15OXBiblF6TDJac2IyRjBNeTl0WVhReklHTmhiaUJ1YjNRZ1ltVWdjM1Z3Y0c5eWRIUmxaQ0VuS1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hCeWIzQXVjMmw2WlNBcUlHTnZiblpsY25SQmNuSmhlUzV6YVhwbElENGdOalFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NkVmJtbG1iM0p0SUdGeWNtRjVJR2x6SUhSdmJ5QnNiMjVuSVNjcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1MlpYSjBaV1JXWVd4MVpTQTlJR052Ym5abGNuUkJjbkpoZVM1bWRXNWpLSEJoY21GdEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JqYjI1MlpYSjBSbTRnUFNCZmRIbHdaVEoxYm1sbWIzSnRWbUZzZFdWYmNISnZjQzUwZVhCbFhUdGNiaUFnSUNBZ0lDQWdZMjl1ZG1WeWRHVmtWbUZzZFdVZ1BTQmpiMjUyWlhKMFJtNG9jR0Z5WVcwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1pHVjJhV05sTG5ObGRGVnVhV1p2Y20wb2NISnZjQzV1WVcxbExDQmpiMjUyWlhKMFpXUldZV3gxWlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1gyUnlZWGNvYVhSbGJTa2dlMXh1SUNBZ0lHTnZibk4wSUdSbGRtbGpaU0E5SUhSb2FYTXVYMlJsZG1salpUdGNiaUFnSUNCamIyNXpkQ0J3Y205bmNtRnRUR2xpSUQwZ2RHaHBjeTVmY0hKdlozSmhiVXhwWWp0Y2JpQWdJQ0JqYjI1emRDQjdJRzV2WkdVc0lHbGhMQ0IxYm1sbWIzSnRjeXdnZEdWamFHNXBjWFZsTENCa1pXWnBibVZ6TENCbFptWmxZM1FnZlNBOUlHbDBaVzA3WEc1Y2JpQWdJQ0F2THlCeVpYTmxkQ0IwYUdVZ2NHOXZiRnh1SUNBZ0lDOHZJRTVQVkVVNklIZGxJR05oYmlCMWMyVWdaSEpoZDBOdmRXNTBaWElnYjNCMGFXMXBlbVVnZEdocGMxeHVJQ0FnSUM4dklGUlBSRTg2SUhOb2IzVnNaQ0JpWlNCamIyNW1hV2QxY21GaWJHVmNiaUFnSUNCZlpteHZZWFF5WDNCdmIyd3VjbVZ6WlhRb0tUdGNiaUFnSUNCZlpteHZZWFF6WDNCdmIyd3VjbVZ6WlhRb0tUdGNiaUFnSUNCZlpteHZZWFEwWDNCdmIyd3VjbVZ6WlhRb0tUdGNiaUFnSUNCZlpteHZZWFE1WDNCdmIyd3VjbVZ6WlhRb0tUdGNiaUFnSUNCZlpteHZZWFF4Tmw5d2IyOXNMbkpsYzJWMEtDazdYRzRnSUNBZ1gyWnNiMkYwTmpSZmNHOXZiQzV5WlhObGRDZ3BPMXh1SUNBZ0lGOXBiblF5WDNCdmIyd3VjbVZ6WlhRb0tUdGNiaUFnSUNCZmFXNTBNMTl3YjI5c0xuSmxjMlYwS0NrN1hHNGdJQ0FnWDJsdWREUmZjRzl2YkM1eVpYTmxkQ2dwTzF4dUlDQWdJRjlwYm5RMk5GOXdiMjlzTG5KbGMyVjBLQ2s3WEc1Y2JpQWdJQ0F2THlCelpYUWdZMjl0Ylc5dUlIVnVhV1p2Y20xelhHNGdJQ0FnTHk4Z1ZFOUVUem9nZEhKNUlHTnZiVzFwZENCMGFHbHpJR1JsY0dWdVpITWdiMjRnWldabVpXTjBYRzRnSUNBZ0x5OGdlMXh1SUNBZ0lHNXZaR1V1WjJWMFYyOXliR1JOWVhSeWFYZ29YMjAwWDNSdGNDazdYRzRnSUNBZ1pHVjJhV05sTG5ObGRGVnVhV1p2Y20wb0oyTmpYMjFoZEZkdmNteGtKeXdnYldGME5DNWhjbkpoZVNoZlpteHZZWFF4Tmw5d2IyOXNMbUZrWkNncExDQmZiVFJmZEcxd0tTazdYRzVjYmlBZ0lDQnNaWFFnYVc1MlpYSnpaU0E5SUcxaGRETXVhVzUyWlhKMEtGOXRNMTkwYlhBc0lHMWhkRE11Wm5KdmJVMWhkRFFvWDIwelgzUnRjQ3dnWDIwMFgzUnRjQ2twTzF4dUlDQWdJR2xtSUNocGJuWmxjbk5sS1NCN1hHNGdJQ0FnSUNCdFlYUXpMblJ5WVc1emNHOXpaU2hmYlROZmRHMXdMQ0JwYm5abGNuTmxLVHRjYmlBZ0lDQWdJR1JsZG1salpTNXpaWFJWYm1sbWIzSnRLQ2RqWTE5dFlYUlhiM0pzWkVsVUp5d2diV0YwTXk1aGNuSmhlU2hmWm14dllYUTVYM0J2YjJ3dVlXUmtLQ2tzSUY5dE0xOTBiWEFwS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnZlZ4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCMWJtbG1iM0p0Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdiR1YwSUhSNWNHVlZibWxtYjNKdGN5QTlJSFZ1YVdadmNtMXpXMmxkTzF4dUlDQWdJQ0FnWm05eUlDaHNaWFFnYTJWNUlHbHVJSFI1Y0dWVmJtbG1iM0p0Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5elpYUlFjbTl3WlhKMGVTaDBlWEJsVlc1cFptOXliWE5iYTJWNVhTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdabTl5SUdWaFkyZ2djR0Z6YzF4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnZEdWamFHNXBjWFZsTGw5d1lYTnpaWE11YkdWdVozUm9PeUFySzJrcElIdGNiaUFnSUNBZ0lHeGxkQ0J3WVhOeklEMGdkR1ZqYUc1cGNYVmxMbDl3WVhOelpYTmJhVjA3WEc0Z0lDQWdJQ0JzWlhRZ1kyOTFiblFnUFNCcFlTNWpiM1Z1ZER0Y2JseHVJQ0FnSUNBZ0x5OGdjMlYwSUhabGNuUmxlQ0JpZFdabVpYSmNiaUFnSUNBZ0lHbG1JQ2hwWVM1ZmRtVnlkR1Y0UW5WbVptVnlLU0I3WEc0Z0lDQWdJQ0FnSUdSbGRtbGpaUzV6WlhSV1pYSjBaWGhDZFdabVpYSW9NQ3dnYVdFdVgzWmxjblJsZUVKMVptWmxjaWs3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklITmxkQ0JwYm1SbGVDQmlkV1ptWlhKY2JpQWdJQ0FnSUdsbUlDaHBZUzVmYVc1a1pYaENkV1ptWlhJcElIdGNiaUFnSUNBZ0lDQWdaR1YyYVdObExuTmxkRWx1WkdWNFFuVm1abVZ5S0dsaExsOXBibVJsZUVKMVptWmxjaWs3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklITmxkQ0J3Y21sdGFYUnBkbVVnZEhsd1pWeHVJQ0FnSUNBZ1pHVjJhV05sTG5ObGRGQnlhVzFwZEdsMlpWUjVjR1VvYVdFdVgzQnlhVzFwZEdsMlpWUjVjR1VwTzF4dVhHNGdJQ0FnSUNBdkx5QnpaWFFnY0hKdlozSmhiVnh1SUNBZ0lDQWdiR1YwSUhCeWIyZHlZVzBnUFNCd2NtOW5jbUZ0VEdsaUxtZGxkRkJ5YjJkeVlXMG9jR0Z6Y3k1ZmNISnZaM0poYlU1aGJXVXNJR1JsWm1sdVpYTXNJR1ZtWm1WamRDNWZibUZ0WlNrN1hHNGdJQ0FnSUNCa1pYWnBZMlV1YzJWMFVISnZaM0poYlNod2NtOW5jbUZ0S1R0Y2JseHVJQ0FnSUNBZ0x5OGdZM1ZzYkNCdGIyUmxYRzRnSUNBZ0lDQmtaWFpwWTJVdWMyVjBRM1ZzYkUxdlpHVW9jR0Z6Y3k1ZlkzVnNiRTF2WkdVcE8xeHVYRzRnSUNBZ0lDQXZMeUJpYkdWdVpGeHVJQ0FnSUNBZ2FXWWdLSEJoYzNNdVgySnNaVzVrS1NCN1hHNGdJQ0FnSUNBZ0lHUmxkbWxqWlM1bGJtRmliR1ZDYkdWdVpDZ3BPMXh1SUNBZ0lDQWdJQ0JrWlhacFkyVXVjMlYwUW14bGJtUkdkVzVqVTJWd0tGeHVJQ0FnSUNBZ0lDQWdJSEJoYzNNdVgySnNaVzVrVTNKakxGeHVJQ0FnSUNBZ0lDQWdJSEJoYzNNdVgySnNaVzVrUkhOMExGeHVJQ0FnSUNBZ0lDQWdJSEJoYzNNdVgySnNaVzVrVTNKalFXeHdhR0VzWEc0Z0lDQWdJQ0FnSUNBZ2NHRnpjeTVmWW14bGJtUkVjM1JCYkhCb1lWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JrWlhacFkyVXVjMlYwUW14bGJtUkZjVk5sY0NoY2JpQWdJQ0FnSUNBZ0lDQndZWE56TGw5aWJHVnVaRVZ4TEZ4dUlDQWdJQ0FnSUNBZ0lIQmhjM011WDJKc1pXNWtRV3h3YUdGRmNWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JrWlhacFkyVXVjMlYwUW14bGJtUkRiMnh2Y2pNeUtIQmhjM011WDJKc1pXNWtRMjlzYjNJcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMeUJrWlhCMGFDQjBaWE4wSUNZZ2QzSnBkR1ZjYmlBZ0lDQWdJR2xtSUNod1lYTnpMbDlrWlhCMGFGUmxjM1FwSUh0Y2JpQWdJQ0FnSUNBZ1pHVjJhV05sTG1WdVlXSnNaVVJsY0hSb1ZHVnpkQ2dwTzF4dUlDQWdJQ0FnSUNCa1pYWnBZMlV1YzJWMFJHVndkR2hHZFc1aktIQmhjM011WDJSbGNIUm9SblZ1WXlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9jR0Z6Y3k1ZlpHVndkR2hYY21sMFpTa2dlMXh1SUNBZ0lDQWdJQ0JrWlhacFkyVXVaVzVoWW14bFJHVndkR2hYY21sMFpTZ3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCemRHVnVZMmxzWEc0Z0lDQWdJQ0JrWlhacFkyVXVjMlYwVTNSbGJtTnBiRlJsYzNRb2NHRnpjeTVmYzNSbGJtTnBiRlJsYzNRcE8xeHVJQ0FnSUNBZ2FXWWdLSEJoYzNNdVgzTjBaVzVqYVd4VVpYTjBJRDA5UFNCblpuZ3VVMVJGVGtOSlRGOUZUa0ZDVEVVcElIdGNiaUFnSUNBZ0lDQWdMeThnWm5KdmJuUmNiaUFnSUNBZ0lDQWdaR1YyYVdObExuTmxkRk4wWlc1amFXeEdkVzVqUm5KdmJuUW9YRzRnSUNBZ0lDQWdJQ0FnY0dGemN5NWZjM1JsYm1OcGJFWjFibU5HY205dWRDeGNiaUFnSUNBZ0lDQWdJQ0J3WVhOekxsOXpkR1Z1WTJsc1VtVm1Sbkp2Ym5Rc1hHNGdJQ0FnSUNBZ0lDQWdjR0Z6Y3k1ZmMzUmxibU5wYkUxaGMydEdjbTl1ZEZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQmtaWFpwWTJVdWMyVjBVM1JsYm1OcGJFOXdSbkp2Ym5Rb1hHNGdJQ0FnSUNBZ0lDQWdjR0Z6Y3k1ZmMzUmxibU5wYkVaaGFXeFBjRVp5YjI1MExGeHVJQ0FnSUNBZ0lDQWdJSEJoYzNNdVgzTjBaVzVqYVd4YVJtRnBiRTl3Um5KdmJuUXNYRzRnSUNBZ0lDQWdJQ0FnY0dGemN5NWZjM1JsYm1OcGJGcFFZWE56VDNCR2NtOXVkQ3hjYmlBZ0lDQWdJQ0FnSUNCd1lYTnpMbDl6ZEdWdVkybHNWM0pwZEdWTllYTnJSbkp2Ym5SY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0F2THlCaVlXTnJYRzRnSUNBZ0lDQWdJR1JsZG1salpTNXpaWFJUZEdWdVkybHNSblZ1WTBKaFkyc29YRzRnSUNBZ0lDQWdJQ0FnY0dGemN5NWZjM1JsYm1OcGJFWjFibU5DWVdOckxGeHVJQ0FnSUNBZ0lDQWdJSEJoYzNNdVgzTjBaVzVqYVd4U1pXWkNZV05yTEZ4dUlDQWdJQ0FnSUNBZ0lIQmhjM011WDNOMFpXNWphV3hOWVhOclFtRmphMXh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCa1pYWnBZMlV1YzJWMFUzUmxibU5wYkU5d1FtRmpheWhjYmlBZ0lDQWdJQ0FnSUNCd1lYTnpMbDl6ZEdWdVkybHNSbUZwYkU5d1FtRmpheXhjYmlBZ0lDQWdJQ0FnSUNCd1lYTnpMbDl6ZEdWdVkybHNXa1poYVd4UGNFSmhZMnNzWEc0Z0lDQWdJQ0FnSUNBZ2NHRnpjeTVmYzNSbGJtTnBiRnBRWVhOelQzQkNZV05yTEZ4dUlDQWdJQ0FnSUNBZ0lIQmhjM011WDNOMFpXNWphV3hYY21sMFpVMWhjMnRDWVdOclhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUdSeVlYY2djR0Z6YzF4dUlDQWdJQ0FnWkdWMmFXTmxMbVJ5WVhjb2FXRXVYM04wWVhKMExDQmpiM1Z1ZENrN1hHNWNiaUFnSUNBZ0lIUm9hWE11WDNKbGMyVjBWR1Y0ZEhWbGNsVnVhWFFvS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjBpWFgwPSJdfQ==