(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/core/pass.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _gfx = require('../gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var Pass = function () {
            function Pass(name) {
                _classCallCheck(this, Pass);
                this._programName = name;
                this._cullMode = _gfx2.default.CULL_BACK;
                this._blend = false;
                this._blendEq = _gfx2.default.BLEND_FUNC_ADD;
                this._blendAlphaEq = _gfx2.default.BLEND_FUNC_ADD;
                this._blendSrc = _gfx2.default.BLEND_SRC_ALPHA;
                this._blendDst = _gfx2.default.BLEND_ONE_MINUS_SRC_ALPHA;
                this._blendSrcAlpha = _gfx2.default.BLEND_SRC_ALPHA;
                this._blendDstAlpha = _gfx2.default.BLEND_ONE_MINUS_SRC_ALPHA;
                this._blendColor = 4294967295;
                this._depthTest = false;
                this._depthWrite = false;
                this._depthFunc = _gfx2.default.DS_FUNC_LESS, this._stencilTest = _gfx2.default.STENCIL_INHERIT;
                this._stencilFuncFront = _gfx2.default.DS_FUNC_ALWAYS;
                this._stencilRefFront = 0;
                this._stencilMaskFront = 255;
                this._stencilFailOpFront = _gfx2.default.STENCIL_OP_KEEP;
                this._stencilZFailOpFront = _gfx2.default.STENCIL_OP_KEEP;
                this._stencilZPassOpFront = _gfx2.default.STENCIL_OP_KEEP;
                this._stencilWriteMaskFront = 255;
                this._stencilFuncBack = _gfx2.default.DS_FUNC_ALWAYS;
                this._stencilRefBack = 0;
                this._stencilMaskBack = 255;
                this._stencilFailOpBack = _gfx2.default.STENCIL_OP_KEEP;
                this._stencilZFailOpBack = _gfx2.default.STENCIL_OP_KEEP;
                this._stencilZPassOpBack = _gfx2.default.STENCIL_OP_KEEP;
                this._stencilWriteMaskBack = 255;
            }
            _createClass(Pass, [
                {
                    key: 'setCullMode',
                    value: function setCullMode() {
                        var cullMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _gfx2.default.CULL_BACK;
                        this._cullMode = cullMode;
                    }
                },
                {
                    key: 'setBlend',
                    value: function setBlend() {
                        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                        var blendEq = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _gfx2.default.BLEND_FUNC_ADD;
                        var blendSrc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _gfx2.default.BLEND_SRC_ALPHA;
                        var blendDst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _gfx2.default.BLEND_ONE_MINUS_SRC_ALPHA;
                        var blendAlphaEq = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _gfx2.default.BLEND_FUNC_ADD;
                        var blendSrcAlpha = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _gfx2.default.BLEND_SRC_ALPHA;
                        var blendDstAlpha = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : _gfx2.default.BLEND_ONE_MINUS_SRC_ALPHA;
                        var blendColor = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 4294967295;
                        this._blend = enabled;
                        this._blendEq = blendEq;
                        this._blendSrc = blendSrc;
                        this._blendDst = blendDst;
                        this._blendAlphaEq = blendAlphaEq;
                        this._blendSrcAlpha = blendSrcAlpha;
                        this._blendDstAlpha = blendDstAlpha;
                        this._blendColor = blendColor;
                    }
                },
                {
                    key: 'setDepth',
                    value: function setDepth() {
                        var depthTest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                        var depthWrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                        var depthFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _gfx2.default.DS_FUNC_LESS;
                        this._depthTest = depthTest;
                        this._depthWrite = depthWrite;
                        this._depthFunc = depthFunc;
                    }
                },
                {
                    key: 'setStencilFront',
                    value: function setStencilFront() {
                        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _gfx2.default.STENCIL_INHERIT;
                        var stencilFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _gfx2.default.DS_FUNC_ALWAYS;
                        var stencilRef = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var stencilMask = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 255;
                        var stencilFailOp = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _gfx2.default.STENCIL_OP_KEEP;
                        var stencilZFailOp = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _gfx2.default.STENCIL_OP_KEEP;
                        var stencilZPassOp = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : _gfx2.default.STENCIL_OP_KEEP;
                        var stencilWriteMask = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 255;
                        this._stencilTest = enabled;
                        this._stencilFuncFront = stencilFunc;
                        this._stencilRefFront = stencilRef;
                        this._stencilMaskFront = stencilMask;
                        this._stencilFailOpFront = stencilFailOp;
                        this._stencilZFailOpFront = stencilZFailOp;
                        this._stencilZPassOpFront = stencilZPassOp;
                        this._stencilWriteMaskFront = stencilWriteMask;
                    }
                },
                {
                    key: 'setStencilEnabled',
                    value: function setStencilEnabled() {
                        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _gfx2.default.STENCIL_INHERIT;
                        this._stencilTest = enabled;
                    }
                },
                {
                    key: 'setStencilBack',
                    value: function setStencilBack() {
                        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _gfx2.default.STENCIL_INHERIT;
                        var stencilFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _gfx2.default.DS_FUNC_ALWAYS;
                        var stencilRef = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var stencilMask = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 255;
                        var stencilFailOp = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _gfx2.default.STENCIL_OP_KEEP;
                        var stencilZFailOp = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _gfx2.default.STENCIL_OP_KEEP;
                        var stencilZPassOp = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : _gfx2.default.STENCIL_OP_KEEP;
                        var stencilWriteMask = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 255;
                        this._stencilTest = enabled;
                        this._stencilFuncBack = stencilFunc;
                        this._stencilRefBack = stencilRef;
                        this._stencilMaskBack = stencilMask;
                        this._stencilFailOpBack = stencilFailOp;
                        this._stencilZFailOpBack = stencilZFailOp;
                        this._stencilZPassOpBack = stencilZPassOp;
                        this._stencilWriteMaskBack = stencilWriteMask;
                    }
                }
            ]);
            return Pass;
        }();
        exports.default = Pass;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,