(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/core/program-lib.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _gfx = require('../gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var _shdID = 0;
        function _generateDefines(defineList) {
            var defines = [];
            var cache = {};
            for (var i = defineList.length - 1; i >= 0; i--) {
                var defs = defineList[i];
                for (var def in defs) {
                    var result = defs[def];
                    if (result === undefined)
                        continue;
                    if (cache[def] !== undefined)
                        continue;
                    if (typeof result !== 'number') {
                        result = result ? 1 : 0;
                    }
                    cache[def] = result;
                    defines.push('#define ' + def + ' ' + result);
                }
            }
            return defines.join('\n') + '\n';
        }
        function _replaceMacroNums(string, defineList) {
            var cache = {};
            var tmp = string;
            for (var i = defineList.length - 1; i >= 0; i--) {
                var defs = defineList[i];
                for (var def in defs) {
                    var result = defs[def];
                    if (result === undefined)
                        continue;
                    if (cache[def] !== undefined)
                        continue;
                    if (Number.isInteger(result)) {
                        cache[def] = result;
                    }
                }
            }
            for (var _def in cache) {
                var reg = new RegExp(_def, 'g');
                tmp = tmp.replace(reg, cache[_def]);
            }
            return tmp;
        }
        function _unrollLoops(string) {
            var pattern = /#pragma for (\w+) in range\(\s*(\d+)\s*,\s*(\d+)\s*\)([\s\S]+?)#pragma endFor/g;
            function replace(match, index, begin, end, snippet) {
                var unroll = '';
                var parsedBegin = parseInt(begin);
                var parsedEnd = parseInt(end);
                if (parsedBegin.isNaN || parsedEnd.isNaN) {
                    console.error('Unroll For Loops Error: begin and end of range must be an int num.');
                }
                for (var i = parsedBegin; i < parsedEnd; ++i) {
                    unroll += snippet.replace(new RegExp('{' + index + '}', 'g'), i);
                }
                return unroll;
            }
            return string.replace(pattern, replace);
        }
        var ProgramLib = function () {
            function ProgramLib(device) {
                _classCallCheck(this, ProgramLib);
                this._device = device;
                this._templates = {};
                this._cache = {};
            }
            _createClass(ProgramLib, [
                {
                    key: 'clear',
                    value: function clear() {
                        this._templates = {};
                        this._cache = {};
                    }
                },
                {
                    key: 'define',
                    value: function define(prog) {
                        var name = prog.name, vert = prog.vert, frag = prog.frag, defines = prog.defines, extensions = prog.extensions;
                        if (this._templates[name]) {
                            return;
                        }
                        var id = ++_shdID;
                        var offset = 0;
                        for (var i = 0; i < defines.length; ++i) {
                            var def = defines[i];
                            var cnt = 1;
                            if (def.type === 'number') {
                                var range = def.range || [];
                                def.min = range[0] || 0;
                                def.max = range[1] || 4;
                                cnt = Math.ceil(Math.log2(def.max - def.min));
                                def._map = function (value) {
                                    return value - this.min << this._offset;
                                }.bind(def);
                            } else {
                                def._map = function (value) {
                                    if (value) {
                                        return 1 << this._offset;
                                    }
                                    return 0;
                                }.bind(def);
                            }
                            offset += cnt;
                            def._offset = offset;
                        }
                        this._templates[name] = {
                            id: id,
                            name: name,
                            vert: vert,
                            frag: frag,
                            defines: defines,
                            attributes: prog.attributes,
                            uniforms: prog.uniforms,
                            extensions: prog.extensions
                        };
                    }
                },
                {
                    key: 'getTemplate',
                    value: function getTemplate(name) {
                        return this._templates[name];
                    }
                },
                {
                    key: 'hasProgram',
                    value: function hasProgram(name) {
                        return this._templates[name] !== undefined;
                    }
                },
                {
                    key: 'getKey',
                    value: function getKey(name, defineList) {
                        var tmpl = this._templates[name];
                        var key = 0;
                        for (var i = 0; i < tmpl.defines.length; ++i) {
                            var tmplDefs = tmpl.defines[i];
                            var value = this._getValueFromDefineList(tmplDefs.name, defineList);
                            if (value === undefined) {
                                continue;
                            }
                            key |= tmplDefs._map(value);
                        }
                        return tmpl.id + ':' + key;
                    }
                },
                {
                    key: 'getProgram',
                    value: function getProgram(name, defineList, errPrefix) {
                        var key = this.getKey(name, defineList);
                        var program = this._cache[key];
                        if (program) {
                            return program;
                        }
                        var tmpl = this._templates[name];
                        var customDef = _generateDefines(defineList);
                        var vert = _replaceMacroNums(tmpl.vert, defineList);
                        vert = customDef + _unrollLoops(vert);
                        var frag = _replaceMacroNums(tmpl.frag, defineList);
                        frag = customDef + _unrollLoops(frag);
                        program = new _gfx2.default.Program(this._device, {
                            vert: vert,
                            frag: frag
                        });
                        var errors = program.link();
                        if (errors) {
                            var vertLines = vert.split('\n');
                            var fragLines = frag.split('\n');
                            var defineLength = Object.keys(defineList).length;
                            errors.forEach(function (err) {
                                var line = err.line - 1;
                                var originLine = err.line - defineLength;
                                var lines = err.type === 'vs' ? vertLines : fragLines;
                                var source = lines[line];
                                var info = err.info || 'Failed to compile ' + err.type + ' ' + err.fileID + ' (ln ' + originLine + '): \n ' + err.message + ': \n  ' + source;
                                cc.error(errPrefix + ' : ' + info);
                            });
                        }
                        this._cache[key] = program;
                        return program;
                    }
                },
                {
                    key: '_getValueFromDefineList',
                    value: function _getValueFromDefineList(name, defineList) {
                        var value = void 0;
                        for (var i = defineList.length - 1; i >= 0; i--) {
                            value = defineList[i][name];
                            if (value !== undefined) {
                                return value;
                            }
                        }
                    }
                }
            ]);
            return ProgramLib;
        }();
        exports.default = ProgramLib;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,