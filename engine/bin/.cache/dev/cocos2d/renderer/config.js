(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/config.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _stageOffset = 0;
        var _name2stageID = {};
        exports.default = {
            addStage: function addStage(name) {
                if (_name2stageID[name] !== undefined) {
                    return;
                }
                var stageID = 1 << _stageOffset;
                _name2stageID[name] = stageID;
                _stageOffset += 1;
            },
            stageID: function stageID(name) {
                var id = _name2stageID[name];
                if (id === undefined) {
                    return -1;
                }
                return id;
            },
            stageIDs: function stageIDs(nameList) {
                var key = 0;
                for (var i = 0; i < nameList.length; ++i) {
                    var id = _name2stageID[nameList[i]];
                    if (id !== undefined) {
                        key |= id;
                    }
                }
                return key;
            }
        };
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyIsIi9Vc2Vycy96emYyMDE5L0Rlc2t0b3AvZGV2ZWxvcG1lbnQvc3VwcG9ydF9hc3RjL2VuZ2luZS9jb2NvczJkL3JlbmRlcmVyL2NvbmZpZy5qcyJdLCJuYW1lcyI6WyJfc3RhZ2VPZmZzZXQiLCJfbmFtZTJzdGFnZUlEIiwiYWRkU3RhZ2UiLCJuYW1lIiwidW5kZWZpbmVkIiwic3RhZ2VJRCIsImlkIiwic3RhZ2VJRHMiLCJuYW1lTGlzdCIsImtleSIsImkiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7SUFBQSxJQUFBLFNBQUEsR0FBQSxPQUFBLEdBQUEsVUFBQSxPQUFBLEVBQUE7QUFBQSxnQ0FBQTtBQUFBLEtBQUEsR0FFQSxVQUFBLE9BQUEsRUFBQTtBQUFBLFFBQ0EsT0FBQSxpQkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLEVBQUEsVUFBQSxDQUFBLENBREE7QUFBQSxLQUZBO0lBS2UsU0FBQSxRQUFBLENBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUE7QUFBQSxRQUNILElBQUEsQ0FBQSxPQUFBLEVBQWdCO0FBQUEsWUFBQSxpQkFBQSxDQUFBLGNBQUEsQ0FBQSxVQUFBLEVBQUEsTUFBQSxFQUFBO0FBQUEsU0FEYjtBQUFBOztRQUhmLElBQUlBLFlBQUFBLEdBQWUsQ0FBbkI7UUFDQSxJQUFJQyxhQUFBQSxHQUFnQixFQUFwQjswQkFFZTtBQUFBLFlBQ2JDLFFBQUFBLEVBQVUsU0FBQSxRQUFBLENBQVVDLElBQVYsRUFBZ0I7QUFBQSxnQkFFeEIsSUFBSUYsYUFBQUEsQ0FBY0UsSUFBZEYsTUFBd0JHLFNBQTVCLEVBQXVDO0FBQUEsb0JBQ3JDLE9BRHFDO0FBQUEsaUJBRmY7QUFBQSxnQkFNeEIsSUFBSUMsT0FBQUEsR0FBVSxLQUFLTCxZQUFuQixDQU53QjtBQUFBLGdCQU94QkMsYUFBQUEsQ0FBY0UsSUFBZEYsSUFBc0JJLE9BQXRCSixDQVB3QjtBQUFBLGdCQVN4QkQsWUFBQUEsSUFBZ0IsQ0FBaEJBLENBVHdCO0FBQUEsYUFEYjtBQUFBLFlBYWJLLE9BQUFBLEVBQVMsU0FBQSxPQUFBLENBQVVGLElBQVYsRUFBZ0I7QUFBQSxnQkFDdkIsSUFBSUcsRUFBQUEsR0FBS0wsYUFBQUEsQ0FBY0UsSUFBZEYsQ0FBVCxDQUR1QjtBQUFBLGdCQUV2QixJQUFJSyxFQUFBQSxLQUFPRixTQUFYLEVBQXNCO0FBQUEsb0JBQ3BCLE9BQU8sQ0FBQyxDQUFSLENBRG9CO0FBQUEsaUJBRkM7QUFBQSxnQkFLdkIsT0FBT0UsRUFBUCxDQUx1QjtBQUFBLGFBYlo7QUFBQSxZQXFCYkMsUUFBQUEsRUFBVSxTQUFBLFFBQUEsQ0FBVUMsUUFBVixFQUFvQjtBQUFBLGdCQUM1QixJQUFJQyxHQUFBQSxHQUFNLENBQVYsQ0FENEI7QUFBQSxnQkFFNUIsS0FBSyxJQUFJQyxDQUFBQSxHQUFJLENBQVIsQ0FBTCxDQUFnQkEsQ0FBQUEsR0FBSUYsUUFBQUEsQ0FBU0csTUFBN0IsRUFBcUMsRUFBRUQsQ0FBdkMsRUFBMEM7QUFBQSxvQkFDeEMsSUFBSUosRUFBQUEsR0FBS0wsYUFBQUEsQ0FBY08sUUFBQUEsQ0FBU0UsQ0FBVEYsQ0FBZFAsQ0FBVCxDQUR3QztBQUFBLG9CQUV4QyxJQUFJSyxFQUFBQSxLQUFPRixTQUFYLEVBQXNCO0FBQUEsd0JBQ3BCSyxHQUFBQSxJQUFPSCxFQUFQRyxDQURvQjtBQUFBLHFCQUZrQjtBQUFBLGlCQUZkO0FBQUEsZ0JBUTVCLE9BQU9BLEdBQVAsQ0FSNEI7QUFBQSxhQXJCakI7QUFBQTs0Q0FBQTtBQUFBO0lBR1BSLElBQWNFLE9BQWRGLEVBQXdCRztBQUFBQSxRQUMxQixRQUFBLENBQUEsUUFBQSxDQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUQwQkE7QUFBQUEsS0FBeEJIO1FBSWVELGlCQUFBQSxDQUFuQixrQkFBbUJBLENBQW5CLFVBQW1CQSxFQUFuQixZQUFBO0FBQUEsWUFDc0JLLFFBQUFBLENBQXRCLFFBQUEsQ0FBQSxPQUFzQkEsRUFBdEIsU0FBc0JBLEVBQXRCLFFBQXNCQSxFQUR0QjtBQUFBLFNBQW1CTCIsImZpbGUiOiJjb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxubGV0IF9zdGFnZU9mZnNldCA9IDA7XG5sZXQgX25hbWUyc3RhZ2VJRCA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFkZFN0YWdlOiBmdW5jdGlvbiAobmFtZSkge1xuICAgIC8vIGFscmVhZHkgYWRkZWRcbiAgICBpZiAoX25hbWUyc3RhZ2VJRFtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHN0YWdlSUQgPSAxIDw8IF9zdGFnZU9mZnNldDtcbiAgICBfbmFtZTJzdGFnZUlEW25hbWVdID0gc3RhZ2VJRDtcblxuICAgIF9zdGFnZU9mZnNldCArPSAxO1xuICB9LFxuXG4gIHN0YWdlSUQ6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgbGV0IGlkID0gX25hbWUyc3RhZ2VJRFtuYW1lXTtcbiAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICByZXR1cm4gaWQ7XG4gIH0sXG5cbiAgc3RhZ2VJRHM6IGZ1bmN0aW9uIChuYW1lTGlzdCkge1xuICAgIGxldCBrZXkgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZUxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxldCBpZCA9IF9uYW1lMnN0YWdlSURbbmFtZUxpc3RbaV1dO1xuICAgICAgaWYgKGlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5IHw9IGlkO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLy8gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbnZhciBfc3RhZ2VPZmZzZXQgPSAwO1xudmFyIF9uYW1lMnN0YWdlSUQgPSB7fTtcblxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBhZGRTdGFnZTogZnVuY3Rpb24gYWRkU3RhZ2UobmFtZSkge1xuICAgIC8vIGFscmVhZHkgYWRkZWRcbiAgICBpZiAoX25hbWUyc3RhZ2VJRFtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHN0YWdlSUQgPSAxIDw8IF9zdGFnZU9mZnNldDtcbiAgICBfbmFtZTJzdGFnZUlEW25hbWVdID0gc3RhZ2VJRDtcblxuICAgIF9zdGFnZU9mZnNldCArPSAxO1xuICB9LFxuXG4gIHN0YWdlSUQ6IGZ1bmN0aW9uIHN0YWdlSUQobmFtZSkge1xuICAgIHZhciBpZCA9IF9uYW1lMnN0YWdlSURbbmFtZV07XG4gICAgaWYgKGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgcmV0dXJuIGlkO1xuICB9LFxuXG4gIHN0YWdlSURzOiBmdW5jdGlvbiBzdGFnZUlEcyhuYW1lTGlzdCkge1xuICAgIHZhciBrZXkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZUxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBpZCA9IF9uYW1lMnN0YWdlSURbbmFtZUxpc3RbaV1dO1xuICAgICAgaWYgKGlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5IHw9IGlkO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnZibVpwWnk1cWN5SmRMQ0p1WVcxbGN5STZXeUpmYzNSaFoyVlBabVp6WlhRaUxDSmZibUZ0WlRKemRHRm5aVWxFSWl3aVlXUmtVM1JoWjJVaUxDSnVZVzFsSWl3aWRXNWtaV1pwYm1Wa0lpd2ljM1JoWjJWSlJDSXNJbWxrSWl3aWMzUmhaMlZKUkhNaUxDSnVZVzFsVEdsemRDSXNJbXRsZVNJc0lta2lMQ0pzWlc1bmRHZ2lYU3dpYldGd2NHbHVaM01pT2lJN096czdPMEZCUVVFN08wRkJSVUVzU1VGQlNVRXNaVUZCWlN4RFFVRnVRanRCUVVOQkxFbEJRVWxETEdkQ1FVRm5RaXhGUVVGd1FqczdhMEpCUldVN1FVRkRZa01zV1VGQlZTeHJRa0ZCVlVNc1NVRkJWaXhGUVVGblFqdEJRVU40UWp0QlFVTkJMRkZCUVVsR0xHTkJRV05GTEVsQlFXUXNUVUZCZDBKRExGTkJRVFZDTEVWQlFYVkRPMEZCUTNKRE8wRkJRMFE3TzBGQlJVUXNVVUZCU1VNc1ZVRkJWU3hMUVVGTFRDeFpRVUZ1UWp0QlFVTkJReXhyUWtGQlkwVXNTVUZCWkN4SlFVRnpRa1VzVDBGQmRFSTdPMEZCUlVGTUxHOUNRVUZuUWl4RFFVRm9RanRCUVVORUxFZEJXRms3TzBGQllXSkxMRmRCUVZNc2FVSkJRVlZHTEVsQlFWWXNSVUZCWjBJN1FVRkRka0lzVVVGQlNVY3NTMEZCUzB3c1kwRkJZMFVzU1VGQlpDeERRVUZVTzBGQlEwRXNVVUZCU1Vjc1QwRkJUMFlzVTBGQldDeEZRVUZ6UWp0QlFVTndRaXhoUVVGUExFTkJRVU1zUTBGQlVqdEJRVU5FTzBGQlEwUXNWMEZCVDBVc1JVRkJVRHRCUVVORUxFZEJia0paT3p0QlFYRkNZa01zV1VGQlZTeHJRa0ZCVlVNc1VVRkJWaXhGUVVGdlFqdEJRVU0xUWl4UlFVRkpReXhOUVVGTkxFTkJRVlk3UVVGRFFTeFRRVUZMTEVsQlFVbERMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1VZc1UwRkJVMGNzVFVGQk4wSXNSVUZCY1VNc1JVRkJSVVFzUTBGQmRrTXNSVUZCTUVNN1FVRkRlRU1zVlVGQlNVb3NTMEZCUzB3c1kwRkJZMDhzVTBGQlUwVXNRMEZCVkN4RFFVRmtMRU5CUVZRN1FVRkRRU3hWUVVGSlNpeFBRVUZQUml4VFFVRllMRVZCUVhOQ08wRkJRM0JDU3l4bFFVRlBTQ3hGUVVGUU8wRkJRMFE3UVVGRFJqdEJRVU5FTEZkQlFVOUhMRWRCUVZBN1FVRkRSRHRCUVRsQ1dTeERJaXdpWm1sc1pTSTZJbU52Ym1acFp5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE55MHlNREU0SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xseHVYRzVzWlhRZ1gzTjBZV2RsVDJabWMyVjBJRDBnTUR0Y2JteGxkQ0JmYm1GdFpUSnpkR0ZuWlVsRUlEMGdlMzA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUh0Y2JpQWdZV1JrVTNSaFoyVTZJR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdYRzRnSUNBZ0x5OGdZV3h5WldGa2VTQmhaR1JsWkZ4dUlDQWdJR2xtSUNoZmJtRnRaVEp6ZEdGblpVbEVXMjVoYldWZElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnYzNSaFoyVkpSQ0E5SURFZ1BEd2dYM04wWVdkbFQyWm1jMlYwTzF4dUlDQWdJRjl1WVcxbE1uTjBZV2RsU1VSYmJtRnRaVjBnUFNCemRHRm5aVWxFTzF4dVhHNGdJQ0FnWDNOMFlXZGxUMlptYzJWMElDczlJREU3WEc0Z0lIMHNYRzVjYmlBZ2MzUmhaMlZKUkRvZ1puVnVZM1JwYjI0Z0tHNWhiV1VwSUh0Y2JpQWdJQ0JzWlhRZ2FXUWdQU0JmYm1GdFpUSnpkR0ZuWlVsRVcyNWhiV1ZkTzF4dUlDQWdJR2xtSUNocFpDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnTFRFN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnBaRHRjYmlBZ2ZTeGNibHh1SUNCemRHRm5aVWxFY3pvZ1puVnVZM1JwYjI0Z0tHNWhiV1ZNYVhOMEtTQjdYRzRnSUNBZ2JHVjBJR3RsZVNBOUlEQTdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQnVZVzFsVEdsemRDNXNaVzVuZEdnN0lDc3JhU2tnZTF4dUlDQWdJQ0FnYkdWMElHbGtJRDBnWDI1aGJXVXljM1JoWjJWSlJGdHVZVzFsVEdsemRGdHBYVjA3WEc0Z0lDQWdJQ0JwWmlBb2FXUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnJaWGtnZkQwZ2FXUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJyWlhrN1hHNGdJSDFjYm4wN0lsMTkiXX0=