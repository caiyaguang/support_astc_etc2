(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/webview/webview-impl.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('../core/vmath');
        var utils = require('../core/platform/utils');
        var sys = require('../core/platform/CCSys');
        var _mat4_temp = _vmath.mat4.create();
        var WebViewImpl = cc.Class({
            name: 'WebViewImpl',
            ctor: function ctor() {
                this._EventList = {};
                this._visible = false;
                this._parent = null;
                this._div = null;
                this._iframe = null;
                this._listener = null;
                this._forceUpdate = true;
                this._m00 = 0;
                this._m01 = 0;
                this._m04 = 0;
                this._m05 = 0;
                this._m12 = 0;
                this._m13 = 0;
                this._w = 0;
                this._h = 0;
                this.__eventListeners = {};
            },
            _updateVisibility: function _updateVisibility() {
                if (!this._div)
                    return;
                var div = this._div;
                if (this._visible) {
                    div.style.visibility = 'visible';
                } else {
                    div.style.visibility = 'hidden';
                }
                this._forceUpdate = true;
            },
            _updateSize: function _updateSize(w, h) {
                var div = this._div;
                if (div) {
                    div.style.width = w + 'px';
                    div.style.height = h + 'px';
                }
            },
            _initEvent: function _initEvent() {
                var iframe = this._iframe;
                if (iframe) {
                    var cbs = this.__eventListeners, self = this;
                    cbs.load = function () {
                        self._dispatchEvent(WebViewImpl.EventType.LOADED);
                    };
                    cbs.error = function () {
                        self._dispatchEvent(WebViewImpl.EventType.ERROR);
                    };
                    iframe.addEventListener('load', cbs.load);
                    iframe.addEventListener('error', cbs.error);
                }
            },
            _initStyle: function _initStyle() {
                if (!this._div)
                    return;
                var div = this._div;
                div.style.position = 'absolute';
                div.style.bottom = '0px';
                div.style.left = '0px';
            },
            _setOpacity: function _setOpacity(opacity) {
                var iframe = this._iframe;
                if (iframe && iframe.style) {
                    iframe.style.opacity = opacity / 255;
                }
            },
            _createDom: function _createDom(w, h) {
                if (WebViewImpl._polyfill.enableDiv) {
                    this._div = document.createElement('div');
                    this._div.style['-webkit-overflow'] = 'auto';
                    this._div.style['-webkit-overflow-scrolling'] = 'touch';
                    this._iframe = document.createElement('iframe');
                    this._div.appendChild(this._iframe);
                    this._iframe.style.width = '100%';
                    this._iframe.style.height = '100%';
                } else {
                    this._div = this._iframe = document.createElement('iframe');
                }
                if (WebViewImpl._polyfill.enableBG)
                    this._div.style['background'] = '#FFF';
                this._div.style['background'] = '#FFF';
                this._div.style.height = h + 'px';
                this._div.style.width = w + 'px';
                this._div.style.overflow = 'scroll';
                this._iframe.style.border = 'none';
                cc.game.container.appendChild(this._div);
                this._updateVisibility();
            },
            _createNativeControl: function _createNativeControl(w, h) {
                this._createDom(w, h);
                this._initStyle();
                this._initEvent();
            },
            createDomElementIfNeeded: CC_EDITOR ? function (w, h) {
                this._div = document.createElement('div');
                this._div.style.background = 'rgba(255, 255, 255, 0.8)';
                this._div.style.color = 'rgb(51, 51, 51)';
                this._div.style.height = w + 'px';
                this._div.style.width = h + 'px';
                this._div.style.position = 'absolute';
                this._div.style.bottom = '0px';
                this._div.style.left = '0px';
                this._div.style['word-wrap'] = 'break-word';
                cc.game.container.appendChild(this._div);
            } : function (w, h) {
                if (!this._div) {
                    this._createNativeControl(w, h);
                } else {
                    this._updateSize(w, h);
                }
            },
            removeDom: function removeDom() {
                var div = this._div;
                if (div) {
                    var hasChild = utils.contains(cc.game.container, div);
                    if (hasChild)
                        cc.game.container.removeChild(div);
                    this._div = null;
                }
                var iframe = this._iframe;
                if (iframe) {
                    var cbs = this.__eventListeners;
                    iframe.removeEventListener('load', cbs.load);
                    iframe.removeEventListener('error', cbs.error);
                    cbs.load = null;
                    cbs.error = null;
                    this._iframe = null;
                }
            },
            setOnJSCallback: function setOnJSCallback(callback) {
            },
            setJavascriptInterfaceScheme: function setJavascriptInterfaceScheme(scheme) {
            },
            loadData: function loadData(data, MIMEType, encoding, baseURL) {
            },
            loadHTMLString: function loadHTMLString(string, baseURL) {
            },
            loadURL: CC_EDITOR ? function (url) {
                this._div.innerText = url;
            } : function (url) {
                var iframe = this._iframe;
                if (iframe) {
                    iframe.src = url;
                    var self = this;
                    var cb = function cb() {
                        self._loaded = true;
                        self._updateVisibility();
                        iframe.removeEventListener('load', cb);
                    };
                    iframe.addEventListener('load', cb);
                    this._dispatchEvent(WebViewImpl.EventType.LOADING);
                }
            },
            stopLoading: function stopLoading() {
                cc.logID(7800);
            },
            reload: function reload() {
                var iframe = this._iframe;
                if (iframe) {
                    var win = iframe.contentWindow;
                    if (win && win.location)
                        win.location.reload();
                }
            },
            canGoBack: function canGoBack() {
                cc.logID(7801);
                return true;
            },
            canGoForward: function canGoForward() {
                cc.logID(7802);
                return true;
            },
            goBack: function goBack() {
                try {
                    if (WebViewImpl._polyfill.closeHistory)
                        return cc.logID(7803);
                    var iframe = this._iframe;
                    if (iframe) {
                        var win = iframe.contentWindow;
                        if (win && win.location)
                            win.history.back.call(win);
                    }
                } catch (err) {
                    cc.log(err);
                }
            },
            goForward: function goForward() {
                try {
                    if (WebViewImpl._polyfill.closeHistory)
                        return cc.logID(7804);
                    var iframe = this._iframe;
                    if (iframe) {
                        var win = iframe.contentWindow;
                        if (win && win.location)
                            win.history.forward.call(win);
                    }
                } catch (err) {
                    cc.log(err);
                }
            },
            evaluateJS: function evaluateJS(str) {
                var iframe = this._iframe;
                if (iframe) {
                    var win = iframe.contentWindow;
                    try {
                        win.eval(str);
                        this._dispatchEvent(WebViewImpl.EventType.JS_EVALUATED);
                    } catch (err) {
                        console.error(err);
                    }
                }
            },
            setScalesPageToFit: function setScalesPageToFit() {
                cc.logID(7805);
            },
            setEventListener: function setEventListener(event, callback) {
                this._EventList[event] = callback;
            },
            removeEventListener: function removeEventListener(event) {
                this._EventList[event] = null;
            },
            _dispatchEvent: function _dispatchEvent(event) {
                var callback = this._EventList[event];
                if (callback)
                    callback.call(this, this, this._iframe.src);
            },
            _createRenderCmd: function _createRenderCmd() {
                return new WebViewImpl.RenderCmd(this);
            },
            destroy: function destroy() {
                this.removeDom();
            },
            setVisible: function setVisible(visible) {
                if (this._visible !== visible) {
                    this._visible = !!visible;
                    this._updateVisibility();
                }
            },
            updateMatrix: function updateMatrix(node) {
                if (!this._div || !this._visible)
                    return;
                node.getWorldMatrix(_mat4_temp);
                var renderCamera = cc.Camera._findRendererCamera(node);
                if (renderCamera) {
                    renderCamera.worldMatrixToScreen(_mat4_temp, _mat4_temp, cc.visibleRect.width, cc.visibleRect.height);
                }
                if (!this._forceUpdate && this._m00 === _mat4_temp.m00 && this._m01 === _mat4_temp.m01 && this._m04 === _mat4_temp.m04 && this._m05 === _mat4_temp.m05 && this._m12 === _mat4_temp.m12 && this._m13 === _mat4_temp.m13 && this._w === node._contentSize.width && this._h === node._contentSize.height) {
                    return;
                }
                this._m00 = _mat4_temp.m00;
                this._m01 = _mat4_temp.m01;
                this._m04 = _mat4_temp.m04;
                this._m05 = _mat4_temp.m05;
                this._m12 = _mat4_temp.m12;
                this._m13 = _mat4_temp.m13;
                this._w = node._contentSize.width;
                this._h = node._contentSize.height;
                var scaleX = cc.view._scaleX, scaleY = cc.view._scaleY;
                var dpr = cc.view._devicePixelRatio;
                scaleX /= dpr;
                scaleY /= dpr;
                var container = cc.game.container;
                var a = _mat4_temp.m00 * scaleX, b = _mat4_temp.m01, c = _mat4_temp.m04, d = _mat4_temp.m05 * scaleY;
                var offsetX = container && container.style.paddingLeft ? parseInt(container.style.paddingLeft) : 0;
                var offsetY = container && container.style.paddingBottom ? parseInt(container.style.paddingBottom) : 0;
                this._updateSize(this._w, this._h);
                var w = this._div.clientWidth * scaleX;
                var h = this._div.clientHeight * scaleY;
                var appx = w * _mat4_temp.m00 * node._anchorPoint.x;
                var appy = h * _mat4_temp.m05 * node._anchorPoint.y;
                var viewport = cc.view._viewportRect;
                offsetX += viewport.x / dpr;
                offsetY += viewport.y / dpr;
                var tx = _mat4_temp.m12 * scaleX - appx + offsetX, ty = _mat4_temp.m13 * scaleY - appy + offsetY;
                var matrix = 'matrix(' + a + ',' + -b + ',' + -c + ',' + d + ',' + tx + ',' + -ty + ')';
                this._div.style['transform'] = matrix;
                this._div.style['-webkit-transform'] = matrix;
                this._div.style['transform-origin'] = '0px 100% 0px';
                this._div.style['-webkit-transform-origin'] = '0px 100% 0px';
                this._setOpacity(node.opacity);
            }
        });
        WebViewImpl.EventType = {
            LOADING: 0,
            LOADED: 1,
            ERROR: 2,
            JS_EVALUATED: 3
        };
        var polyfill = WebViewImpl._polyfill = {
            devicePixelRatio: false,
            enableDiv: false
        };
        if (sys.os === sys.OS_IOS)
            polyfill.enableDiv = true;
        if (sys.isMobile) {
            if (sys.browserType === sys.BROWSER_TYPE_FIREFOX) {
                polyfill.enableBG = true;
            }
        } else {
            if (sys.browserType === sys.BROWSER_TYPE_IE) {
                polyfill.closeHistory = true;
            }
        }
        module.exports = WebViewImpl;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnZpZXctaW1wbC5qcyIsIi9Vc2Vycy96emYyMDE5L0Rlc2t0b3AvZGV2ZWxvcG1lbnQvc3VwcG9ydF9hc3RjL2VuZ2luZS9jb2NvczJkL3dlYnZpZXcvd2Vidmlldy1pbXBsLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsInN5cyIsIl9tYXQ0X3RlbXAiLCJtYXQ0IiwiY3JlYXRlIiwiV2ViVmlld0ltcGwiLCJjYyIsIkNsYXNzIiwibmFtZSIsImN0b3IiLCJfRXZlbnRMaXN0IiwiX3Zpc2libGUiLCJfcGFyZW50IiwiX2RpdiIsIl9pZnJhbWUiLCJfbGlzdGVuZXIiLCJfZm9yY2VVcGRhdGUiLCJfbTAwIiwiX20wMSIsIl9tMDQiLCJfbTA1IiwiX20xMiIsIl9tMTMiLCJfdyIsIl9oIiwiX19ldmVudExpc3RlbmVycyIsIl91cGRhdGVWaXNpYmlsaXR5IiwiZGl2Iiwic3R5bGUiLCJ2aXNpYmlsaXR5IiwiX3VwZGF0ZVNpemUiLCJ3IiwiaCIsIndpZHRoIiwiaGVpZ2h0IiwiX2luaXRFdmVudCIsImlmcmFtZSIsImNicyIsInNlbGYiLCJsb2FkIiwiX2Rpc3BhdGNoRXZlbnQiLCJFdmVudFR5cGUiLCJMT0FERUQiLCJlcnJvciIsIkVSUk9SIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9pbml0U3R5bGUiLCJwb3NpdGlvbiIsImJvdHRvbSIsImxlZnQiLCJfc2V0T3BhY2l0eSIsIm9wYWNpdHkiLCJfY3JlYXRlRG9tIiwiX3BvbHlmaWxsIiwiZW5hYmxlRGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJlbmFibGVCRyIsIm92ZXJmbG93IiwiYm9yZGVyIiwiZ2FtZSIsImNvbnRhaW5lciIsIl9jcmVhdGVOYXRpdmVDb250cm9sIiwiY3JlYXRlRG9tRWxlbWVudElmTmVlZGVkIiwiQ0NfRURJVE9SIiwiYmFja2dyb3VuZCIsImNvbG9yIiwicmVtb3ZlRG9tIiwiaGFzQ2hpbGQiLCJjb250YWlucyIsInJlbW92ZUNoaWxkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldE9uSlNDYWxsYmFjayIsImNhbGxiYWNrIiwic2V0SmF2YXNjcmlwdEludGVyZmFjZVNjaGVtZSIsInNjaGVtZSIsImxvYWREYXRhIiwiZGF0YSIsIk1JTUVUeXBlIiwiZW5jb2RpbmciLCJiYXNlVVJMIiwibG9hZEhUTUxTdHJpbmciLCJzdHJpbmciLCJsb2FkVVJMIiwidXJsIiwiaW5uZXJUZXh0Iiwic3JjIiwiY2IiLCJfbG9hZGVkIiwiTE9BRElORyIsInN0b3BMb2FkaW5nIiwibG9nSUQiLCJyZWxvYWQiLCJ3aW4iLCJjb250ZW50V2luZG93IiwibG9jYXRpb24iLCJjYW5Hb0JhY2siLCJjYW5Hb0ZvcndhcmQiLCJnb0JhY2siLCJjbG9zZUhpc3RvcnkiLCJoaXN0b3J5IiwiYmFjayIsImNhbGwiLCJlcnIiLCJsb2ciLCJnb0ZvcndhcmQiLCJmb3J3YXJkIiwiZXZhbHVhdGVKUyIsInN0ciIsImV2YWwiLCJKU19FVkFMVUFURUQiLCJjb25zb2xlIiwic2V0U2NhbGVzUGFnZVRvRml0Iiwic2V0RXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiX2NyZWF0ZVJlbmRlckNtZCIsIlJlbmRlckNtZCIsImRlc3Ryb3kiLCJzZXRWaXNpYmxlIiwidmlzaWJsZSIsInVwZGF0ZU1hdHJpeCIsIm5vZGUiLCJnZXRXb3JsZE1hdHJpeCIsInJlbmRlckNhbWVyYSIsIkNhbWVyYSIsIl9maW5kUmVuZGVyZXJDYW1lcmEiLCJ3b3JsZE1hdHJpeFRvU2NyZWVuIiwidmlzaWJsZVJlY3QiLCJtMDAiLCJtMDEiLCJtMDQiLCJtMDUiLCJtMTIiLCJtMTMiLCJfY29udGVudFNpemUiLCJzY2FsZVgiLCJ2aWV3IiwiX3NjYWxlWCIsInNjYWxlWSIsIl9zY2FsZVkiLCJkcHIiLCJfZGV2aWNlUGl4ZWxSYXRpbyIsImEiLCJiIiwiYyIsImQiLCJvZmZzZXRYIiwicGFkZGluZ0xlZnQiLCJwYXJzZUludCIsIm9mZnNldFkiLCJwYWRkaW5nQm90dG9tIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJhcHB4IiwiX2FuY2hvclBvaW50IiwieCIsImFwcHkiLCJ5Iiwidmlld3BvcnQiLCJfdmlld3BvcnRSZWN0IiwidHgiLCJ0eSIsIm1hdHJpeCIsInBvbHlmaWxsIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIm9zIiwiT1NfSU9TIiwiaXNNb2JpbGUiLCJicm93c2VyVHlwZSIsIkJST1dTRVJfVFlQRV9GSVJFRk9YIiwiQlJPV1NFUl9UWVBFX0lFIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQXlCQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7SUFFc0IsSUFBQSxVQUFBLEdBQUEsNENBQUE7Ozs7Ozs7Ozs7O1FBRnRCLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUE7UUFFQSxJQUFNQSxLQUFBQSxHQUFRQyxPQUFBQSxDQUFRLHdCQUFSQSxDQUFkO1FBQ0EsSUFBTUMsR0FBQUEsR0FBTUQsT0FBQUEsQ0FBUSx3QkFBUkEsQ0FBWjtRQUVBLElBQUlFLFVBQUFBLEdBQWFDLE1BQUFBLENBQUFBLElBQUFBLENBQUtDLE1BQUxELEVBQWpCO1FBRUEsSUFBSUUsV0FBQUEsR0FBY0MsRUFBQUEsQ0FBR0MsS0FBSEQsQ0FBUztBQUFBLFlBQ3ZCRSxJQUFBQSxFQUFNLGFBRGlCO0FBQUEsWUFHdkJDLElBQUFBLEVBSHVCLFNBQUEsSUFBQSxHQUdmO0FBQUEsZ0JBRUosS0FBS0MsVUFBTCxHQUFrQixFQUFsQixDQUZJO0FBQUEsZ0JBSUosS0FBS0MsUUFBTCxHQUFnQixLQUFoQixDQUpJO0FBQUEsZ0JBS0osS0FBS0MsT0FBTCxHQUFlLElBQWYsQ0FMSTtBQUFBLGdCQU1KLEtBQUtDLElBQUwsR0FBWSxJQUFaLENBTkk7QUFBQSxnQkFPSixLQUFLQyxPQUFMLEdBQWUsSUFBZixDQVBJO0FBQUEsZ0JBUUosS0FBS0MsU0FBTCxHQUFpQixJQUFqQixDQVJJO0FBQUEsZ0JBV0osS0FBS0Ms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QSxTQUFUN0MsQ0FBbEI7UUFtWEFELFdBQUFBLENBQVlvQyxTQUFacEMsR0FBd0I7QUFBQSxZQUNwQnFGLE9BQUFBLEVBQVMsQ0FEVztBQUFBLFlBRXBCaEQsTUFBQUEsRUFBUSxDQUZZO0FBQUEsWUFHcEJFLEtBQUFBLEVBQU8sQ0FIYTtBQUFBLFlBSXBCbUUsWUFBQUEsRUFBYyxDQUpNO0FBQUEsU0FBeEIxRztRQU9BLElBQUkrSixRQUFBQSxHQUFXL0osV0FBQUEsQ0FBWWdELFNBQVpoRCxHQUF3QjtBQUFBLFlBQ25DZ0ssZ0JBQUFBLEVBQWtCLEtBRGlCO0FBQUEsWUFFbkMvRyxTQUFBQSxFQUFXLEtBRndCO0FBQUEsU0FBdkM7UUFLQSxJQUFJckQsR0FBQUEsQ0FBSXFLLEVBQUpySyxLQUFXQSxHQUFBQSxDQUFJc0ssTUFBbkI7QUFBQSxZQUNJSCxRQUFBQSxDQUFTOUcsU0FBVDhHLEdBQXFCLElBQXJCQTtRQUVKLElBQUluSyxHQUFBQSxDQUFJdUssUUFBUixFQUFrQjtBQUFBLFlBQ2QsSUFBSXZLLEdBQUFBLENBQUl3SyxXQUFKeEssS0FBb0JBLEdBQUFBLENBQUl5SyxvQkFBNUIsRUFBa0Q7QUFBQSxnQkFDOUNOLFFBQUFBLENBQVMxRyxRQUFUMEcsR0FBb0IsSUFBcEJBLENBRDhDO0FBQUEsYUFEcEM7QUFBQSxTQUFsQixNQUtLO0FBQUEsWUFDRCxJQUFJbkssR0FBQUEsQ0FBSXdLLFdBQUp4SyxLQUFvQkEsR0FBQUEsQ0FBSTBLLGVBQTVCLEVBQTZDO0FBQUEsZ0JBQ3pDUCxRQUFBQSxDQUFTaEUsWUFBVGdFLEdBQXdCLElBQXhCQSxDQUR5QztBQUFBLGFBRDVDO0FBQUE7UUFNTFEsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJ2SyxXQUFqQnVLIiwiZmlsZSI6IndlYnZpZXctaW1wbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7IG1hdDQgfSBmcm9tICcuLi9jb3JlL3ZtYXRoJztcblxuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuLi9jb3JlL3BsYXRmb3JtL3V0aWxzJyk7XG5jb25zdCBzeXMgPSByZXF1aXJlKCcuLi9jb3JlL3BsYXRmb3JtL0NDU3lzJyk7XG5cbmxldCBfbWF0NF90ZW1wID0gbWF0NC5jcmVhdGUoKTtcblxubGV0IFdlYlZpZXdJbXBsID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6IFwiV2ViVmlld0ltcGxcIixcblxuICAgIGN0b3IgKCkge1xuICAgICAgICAvLyB0aGlzLnNldENvbnRlbnRTaXplKGNjLnNpemUoMzAwLCAyMDApKTtcbiAgICAgICAgdGhpcy5fRXZlbnRMaXN0ID0ge307XG5cbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9kaXYgPSBudWxsO1xuICAgICAgICB0aGlzLl9pZnJhbWUgPSBudWxsO1xuICAgICAgICB0aGlzLl9saXN0ZW5lciA9IG51bGw7XG5cbiAgICAgICAgLy8gdXBkYXRlIG1hdHJpeCBjYWNoZVxuICAgICAgICB0aGlzLl9mb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX20wMCA9IDA7XG4gICAgICAgIHRoaXMuX20wMSA9IDA7XG4gICAgICAgIHRoaXMuX20wNCA9IDA7XG4gICAgICAgIHRoaXMuX20wNSA9IDA7XG4gICAgICAgIHRoaXMuX20xMiA9IDA7XG4gICAgICAgIHRoaXMuX20xMyA9IDA7XG4gICAgICAgIHRoaXMuX3cgPSAwO1xuICAgICAgICB0aGlzLl9oID0gMDtcbiAgICAgICAgLy9cbiAgICAgICAgdGhpcy5fX2V2ZW50TGlzdGVuZXJzID0ge307XG4gICAgfSxcblxuICAgIF91cGRhdGVWaXNpYmlsaXR5ICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kaXYpIHJldHVybjtcbiAgICAgICAgbGV0IGRpdiA9IHRoaXMuX2RpdjtcbiAgICAgICAgaWYgKHRoaXMuX3Zpc2libGUpIHtcbiAgICAgICAgICAgIGRpdi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGl2LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9mb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgfSxcblxuICAgIF91cGRhdGVTaXplICh3LCBoKSB7XG4gICAgICAgIGxldCBkaXYgPSB0aGlzLl9kaXY7XG4gICAgICAgIGlmIChkaXYpIHtcbiAgICAgICAgICAgIGRpdi5zdHlsZS53aWR0aCA9IHcgKyBcInB4XCI7XG4gICAgICAgICAgICBkaXYuc3R5bGUuaGVpZ2h0ID0gaCArIFwicHhcIjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfaW5pdEV2ZW50ICgpIHtcbiAgICAgICAgbGV0IGlmcmFtZSA9IHRoaXMuX2lmcmFtZTtcbiAgICAgICAgaWYgKGlmcmFtZSkge1xuICAgICAgICAgICAgbGV0IGNicyA9IHRoaXMuX19ldmVudExpc3RlbmVycywgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBjYnMubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9kaXNwYXRjaEV2ZW50KFdlYlZpZXdJbXBsLkV2ZW50VHlwZS5MT0FERUQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNicy5lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9kaXNwYXRjaEV2ZW50KFdlYlZpZXdJbXBsLkV2ZW50VHlwZS5FUlJPUik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGNicy5sb2FkKTtcbiAgICAgICAgICAgIGlmcmFtZS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgY2JzLmVycm9yKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfaW5pdFN0eWxlICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kaXYpIHJldHVybjtcbiAgICAgICAgbGV0IGRpdiA9IHRoaXMuX2RpdjtcbiAgICAgICAgZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICBkaXYuc3R5bGUuYm90dG9tID0gXCIwcHhcIjtcbiAgICAgICAgZGl2LnN0eWxlLmxlZnQgPSBcIjBweFwiO1xuICAgIH0sXG5cbiAgICBfc2V0T3BhY2l0eSAob3BhY2l0eSkge1xuICAgICAgICBsZXQgaWZyYW1lID0gdGhpcy5faWZyYW1lO1xuICAgICAgICBpZiAoaWZyYW1lICYmIGlmcmFtZS5zdHlsZSkge1xuICAgICAgICAgICAgaWZyYW1lLnN0eWxlLm9wYWNpdHkgPSBvcGFjaXR5IC8gMjU1O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9jcmVhdGVEb20gKHcsIGgpIHtcbiAgICAgICAgaWYgKFdlYlZpZXdJbXBsLl9wb2x5ZmlsbC5lbmFibGVEaXYpIHtcbiAgICAgICAgICAgIHRoaXMuX2RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB0aGlzLl9kaXYuc3R5bGVbXCItd2Via2l0LW92ZXJmbG93XCJdID0gXCJhdXRvXCI7XG4gICAgICAgICAgICB0aGlzLl9kaXYuc3R5bGVbXCItd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZ1wiXSA9IFwidG91Y2hcIjtcbiAgICAgICAgICAgIHRoaXMuX2lmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG4gICAgICAgICAgICB0aGlzLl9kaXYuYXBwZW5kQ2hpbGQodGhpcy5faWZyYW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2lmcmFtZS5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICAgICAgdGhpcy5faWZyYW1lLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZGl2ID0gdGhpcy5faWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChXZWJWaWV3SW1wbC5fcG9seWZpbGwuZW5hYmxlQkcpXG4gICAgICAgICAgICB0aGlzLl9kaXYuc3R5bGVbXCJiYWNrZ3JvdW5kXCJdID0gXCIjRkZGXCI7XG5cbiAgICAgICAgdGhpcy5fZGl2LnN0eWxlW1wiYmFja2dyb3VuZFwiXSA9IFwiI0ZGRlwiO1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGUuaGVpZ2h0ID0gaCArIFwicHhcIjtcbiAgICAgICAgdGhpcy5fZGl2LnN0eWxlLndpZHRoID0gdyArIFwicHhcIjtcbiAgICAgICAgdGhpcy5fZGl2LnN0eWxlLm92ZXJmbG93ID0gXCJzY3JvbGxcIjtcbiAgICAgICAgdGhpcy5faWZyYW1lLnN0eWxlLmJvcmRlciA9IFwibm9uZVwiO1xuXG4gICAgICAgIGNjLmdhbWUuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX2Rpdik7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoKTtcbiAgICB9LFxuXG4gICAgX2NyZWF0ZU5hdGl2ZUNvbnRyb2wgKHcsIGgpIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlRG9tKHcsIGgpO1xuICAgICAgICB0aGlzLl9pbml0U3R5bGUoKTtcbiAgICAgICAgdGhpcy5faW5pdEV2ZW50KCk7XG4gICAgfSxcblxuICAgIGNyZWF0ZURvbUVsZW1lbnRJZk5lZWRlZDogQ0NfRURJVE9SID8gZnVuY3Rpb24gKHcsIGgpIHtcbiAgICAgICAgdGhpcy5fZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2Rpdi5zdHlsZS5iYWNrZ3JvdW5kID0gJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC44KSc7XG4gICAgICAgIHRoaXMuX2Rpdi5zdHlsZS5jb2xvciA9ICdyZ2IoNTEsIDUxLCA1MSknO1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGUuaGVpZ2h0ID0gdyArICdweCc7XG4gICAgICAgIHRoaXMuX2Rpdi5zdHlsZS53aWR0aCA9IGggKyAncHgnO1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGUuYm90dG9tID0gJzBweCc7XG4gICAgICAgIHRoaXMuX2Rpdi5zdHlsZS5sZWZ0ID0gJzBweCc7XG4gICAgICAgIHRoaXMuX2Rpdi5zdHlsZVsnd29yZC13cmFwJ10gPSAnYnJlYWstd29yZCc7XG4gICAgICAgIGNjLmdhbWUuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX2Rpdik7XG4gICAgfSA6IGZ1bmN0aW9uICh3LCBoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGl2KSB7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVOYXRpdmVDb250cm9sKHcsIGgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlU2l6ZSh3LCBoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZW1vdmVEb20gKCkge1xuICAgICAgICBsZXQgZGl2ID0gdGhpcy5fZGl2O1xuICAgICAgICBpZiAoZGl2KSB7XG4gICAgICAgICAgICBsZXQgaGFzQ2hpbGQgPSB1dGlscy5jb250YWlucyhjYy5nYW1lLmNvbnRhaW5lciwgZGl2KTtcbiAgICAgICAgICAgIGlmIChoYXNDaGlsZClcbiAgICAgICAgICAgICAgICBjYy5nYW1lLmNvbnRhaW5lci5yZW1vdmVDaGlsZChkaXYpO1xuXG4gICAgICAgICAgICB0aGlzLl9kaXYgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpZnJhbWUgPSB0aGlzLl9pZnJhbWU7XG4gICAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgICAgIGxldCBjYnMgPSB0aGlzLl9fZXZlbnRMaXN0ZW5lcnM7XG4gICAgICAgICAgICBpZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgY2JzLmxvYWQpO1xuICAgICAgICAgICAgaWZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBjYnMuZXJyb3IpO1xuICAgICAgICAgICAgY2JzLmxvYWQgPSBudWxsO1xuICAgICAgICAgICAgY2JzLmVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2lmcmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0T25KU0NhbGxiYWNrIChjYWxsYmFjaykge30sXG4gICAgc2V0SmF2YXNjcmlwdEludGVyZmFjZVNjaGVtZSAoc2NoZW1lKSB7fSxcbiAgICAvLyBwcml2YXRlIG1ldGhvZFxuICAgIGxvYWREYXRhIChkYXRhLCBNSU1FVHlwZSwgZW5jb2RpbmcsIGJhc2VVUkwpIHt9LFxuICAgIGxvYWRIVE1MU3RyaW5nIChzdHJpbmcsIGJhc2VVUkwpIHt9LFxuXG4gICAgLyoqXG4gICAgICogTG9hZCBhbiBVUkxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAgICovXG4gICAgbG9hZFVSTDogQ0NfRURJVE9SID8gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICB0aGlzLl9kaXYuaW5uZXJUZXh0ID0gdXJsO1xuICAgIH0gOiBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIGxldCBpZnJhbWUgPSB0aGlzLl9pZnJhbWU7XG4gICAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgICAgIGlmcmFtZS5zcmMgPSB1cmw7XG4gICAgICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBsZXQgY2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fbG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzZWxmLl91cGRhdGVWaXNpYmlsaXR5KCk7XG4gICAgICAgICAgICAgICAgaWZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGNiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgY2IpO1xuICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudChXZWJWaWV3SW1wbC5FdmVudFR5cGUuTE9BRElORyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3RvcCBsb2FkaW5nXG4gICAgICovXG4gICAgc3RvcExvYWRpbmcgKCkge1xuICAgICAgICBjYy5sb2dJRCg3ODAwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVsb2FkIHRoZSBXZWJWaWV3XG4gICAgICovXG4gICAgcmVsb2FkICgpIHtcbiAgICAgICAgbGV0IGlmcmFtZSA9IHRoaXMuX2lmcmFtZTtcbiAgICAgICAgaWYgKGlmcmFtZSkge1xuICAgICAgICAgICAgbGV0IHdpbiA9IGlmcmFtZS5jb250ZW50V2luZG93O1xuICAgICAgICAgICAgaWYgKHdpbiAmJiB3aW4ubG9jYXRpb24pXG4gICAgICAgICAgICAgICAgd2luLmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZSB3aGV0aGVyIHRvIGdvIGJhY2tcbiAgICAgKi9cbiAgICBjYW5Hb0JhY2sgKCkge1xuICAgICAgICBjYy5sb2dJRCg3ODAxKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZSB3aGV0aGVyIHRvIGdvIGZvcndhcmRcbiAgICAgKi9cbiAgICBjYW5Hb0ZvcndhcmQgKCkge1xuICAgICAgICBjYy5sb2dJRCg3ODAyKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGdvIGJhY2tcbiAgICAgKi9cbiAgICBnb0JhY2sgKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKFdlYlZpZXdJbXBsLl9wb2x5ZmlsbC5jbG9zZUhpc3RvcnkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNjLmxvZ0lEKDc4MDMpO1xuICAgICAgICAgICAgbGV0IGlmcmFtZSA9IHRoaXMuX2lmcmFtZTtcbiAgICAgICAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgICAgICAgICBsZXQgd2luID0gaWZyYW1lLmNvbnRlbnRXaW5kb3c7XG4gICAgICAgICAgICAgICAgaWYgKHdpbiAmJiB3aW4ubG9jYXRpb24pXG4gICAgICAgICAgICAgICAgICAgIHdpbi5oaXN0b3J5LmJhY2suY2FsbCh3aW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNjLmxvZyhlcnIpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGdvIGZvcndhcmRcbiAgICAgKi9cbiAgICBnb0ZvcndhcmQgKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKFdlYlZpZXdJbXBsLl9wb2x5ZmlsbC5jbG9zZUhpc3RvcnkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNjLmxvZ0lEKDc4MDQpO1xuICAgICAgICAgICAgbGV0IGlmcmFtZSA9IHRoaXMuX2lmcmFtZTtcbiAgICAgICAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgICAgICAgICBsZXQgd2luID0gaWZyYW1lLmNvbnRlbnRXaW5kb3c7XG4gICAgICAgICAgICAgICAgaWYgKHdpbiAmJiB3aW4ubG9jYXRpb24pXG4gICAgICAgICAgICAgICAgICAgIHdpbi5oaXN0b3J5LmZvcndhcmQuY2FsbCh3aW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNjLmxvZyhlcnIpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluIHRoZSB3ZWJ2aWV3IGV4ZWN1dGlvbiB3aXRoaW4gYSBwZXJpb2Qgb2YganMgc3RyaW5nXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICAgICAqL1xuICAgIGV2YWx1YXRlSlMgKHN0cikge1xuICAgICAgICBsZXQgaWZyYW1lID0gdGhpcy5faWZyYW1lO1xuICAgICAgICBpZiAoaWZyYW1lKSB7XG4gICAgICAgICAgICBsZXQgd2luID0gaWZyYW1lLmNvbnRlbnRXaW5kb3c7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHdpbi5ldmFsKHN0cik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudChXZWJWaWV3SW1wbC5FdmVudFR5cGUuSlNfRVZBTFVBVEVEKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMaW1pdGVkIHNjYWxlXG4gICAgICovXG4gICAgc2V0U2NhbGVzUGFnZVRvRml0ICgpIHtcbiAgICAgICAgY2MubG9nSUQoNzgwNSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBiaW5kaW5nIGV2ZW50XG4gICAgICogQHBhcmFtIHtXZWJWaWV3SW1wbC5FdmVudFR5cGV9IGV2ZW50XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBzZXRFdmVudExpc3RlbmVyIChldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fRXZlbnRMaXN0W2V2ZW50XSA9IGNhbGxiYWNrO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgZXZlbnRzXG4gICAgICogQHBhcmFtIHtXZWJWaWV3SW1wbC5FdmVudFR5cGV9IGV2ZW50XG4gICAgICovXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lciAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fRXZlbnRMaXN0W2V2ZW50XSA9IG51bGw7XG4gICAgfSxcblxuICAgIF9kaXNwYXRjaEV2ZW50IChldmVudCkge1xuICAgICAgICBsZXQgY2FsbGJhY2sgPSB0aGlzLl9FdmVudExpc3RbZXZlbnRdO1xuICAgICAgICBpZiAoY2FsbGJhY2spXG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHRoaXMsIHRoaXMuX2lmcmFtZS5zcmMpO1xuICAgIH0sXG5cbiAgICBfY3JlYXRlUmVuZGVyQ21kICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBXZWJWaWV3SW1wbC5SZW5kZXJDbWQodGhpcyk7XG4gICAgfSxcblxuICAgIGRlc3Ryb3kgKCkge1xuICAgICAgICB0aGlzLnJlbW92ZURvbSgpO1xuICAgIH0sXG5cbiAgICBzZXRWaXNpYmxlICh2aXNpYmxlKSB7XG4gICAgICAgIGlmICh0aGlzLl92aXNpYmxlICE9PSB2aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl92aXNpYmxlID0gISF2aXNpYmxlO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVmlzaWJpbGl0eSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHVwZGF0ZU1hdHJpeCAobm9kZSkge1xuICAgICAgICBpZiAoIXRoaXMuX2RpdiB8fCAhdGhpcy5fdmlzaWJsZSkgcmV0dXJuO1xuXG4gICAgICAgIG5vZGUuZ2V0V29ybGRNYXRyaXgoX21hdDRfdGVtcCk7XG4gICAgICAgIGxldCByZW5kZXJDYW1lcmEgPSBjYy5DYW1lcmEuX2ZpbmRSZW5kZXJlckNhbWVyYShub2RlKTtcbiAgICAgICAgaWYgKHJlbmRlckNhbWVyYSkge1xuICAgICAgICAgICAgcmVuZGVyQ2FtZXJhLndvcmxkTWF0cml4VG9TY3JlZW4oX21hdDRfdGVtcCwgX21hdDRfdGVtcCwgY2MudmlzaWJsZVJlY3Qud2lkdGgsIGNjLnZpc2libGVSZWN0LmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2ZvcmNlVXBkYXRlICYmXG4gICAgICAgICAgICB0aGlzLl9tMDAgPT09IF9tYXQ0X3RlbXAubTAwICYmIHRoaXMuX20wMSA9PT0gX21hdDRfdGVtcC5tMDEgJiZcbiAgICAgICAgICAgIHRoaXMuX20wNCA9PT0gX21hdDRfdGVtcC5tMDQgJiYgdGhpcy5fbTA1ID09PSBfbWF0NF90ZW1wLm0wNSAmJlxuICAgICAgICAgICAgdGhpcy5fbTEyID09PSBfbWF0NF90ZW1wLm0xMiAmJiB0aGlzLl9tMTMgPT09IF9tYXQ0X3RlbXAubTEzICYmXG4gICAgICAgICAgICB0aGlzLl93ID09PSBub2RlLl9jb250ZW50U2l6ZS53aWR0aCAmJiB0aGlzLl9oID09PSBub2RlLl9jb250ZW50U2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBtYXRyaXggY2FjaGVcbiAgICAgICAgdGhpcy5fbTAwID0gX21hdDRfdGVtcC5tMDA7XG4gICAgICAgIHRoaXMuX20wMSA9IF9tYXQ0X3RlbXAubTAxO1xuICAgICAgICB0aGlzLl9tMDQgPSBfbWF0NF90ZW1wLm0wNDtcbiAgICAgICAgdGhpcy5fbTA1ID0gX21hdDRfdGVtcC5tMDU7XG4gICAgICAgIHRoaXMuX20xMiA9IF9tYXQ0X3RlbXAubTEyO1xuICAgICAgICB0aGlzLl9tMTMgPSBfbWF0NF90ZW1wLm0xMztcbiAgICAgICAgdGhpcy5fdyA9IG5vZGUuX2NvbnRlbnRTaXplLndpZHRoO1xuICAgICAgICB0aGlzLl9oID0gbm9kZS5fY29udGVudFNpemUuaGVpZ2h0O1xuXG4gICAgICAgIGxldCBzY2FsZVggPSBjYy52aWV3Ll9zY2FsZVgsIHNjYWxlWSA9IGNjLnZpZXcuX3NjYWxlWTtcbiAgICAgICAgbGV0IGRwciA9IGNjLnZpZXcuX2RldmljZVBpeGVsUmF0aW87XG5cbiAgICAgICAgc2NhbGVYIC89IGRwcjtcbiAgICAgICAgc2NhbGVZIC89IGRwcjtcblxuICAgICAgICBsZXQgY29udGFpbmVyID0gY2MuZ2FtZS5jb250YWluZXI7XG4gICAgICAgIGxldCBhID0gX21hdDRfdGVtcC5tMDAgKiBzY2FsZVgsIGIgPSBfbWF0NF90ZW1wLm0wMSwgYyA9IF9tYXQ0X3RlbXAubTA0LCBkID0gX21hdDRfdGVtcC5tMDUgKiBzY2FsZVk7XG5cbiAgICAgICAgbGV0IG9mZnNldFggPSBjb250YWluZXIgJiYgY29udGFpbmVyLnN0eWxlLnBhZGRpbmdMZWZ0ID8gcGFyc2VJbnQoY29udGFpbmVyLnN0eWxlLnBhZGRpbmdMZWZ0KSA6IDA7XG4gICAgICAgIGxldCBvZmZzZXRZID0gY29udGFpbmVyICYmIGNvbnRhaW5lci5zdHlsZS5wYWRkaW5nQm90dG9tID8gcGFyc2VJbnQoY29udGFpbmVyLnN0eWxlLnBhZGRpbmdCb3R0b20pIDogMDtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2l6ZSh0aGlzLl93LCB0aGlzLl9oKTtcbiAgICAgICAgbGV0IHcgPSB0aGlzLl9kaXYuY2xpZW50V2lkdGggKiBzY2FsZVg7XG4gICAgICAgIGxldCBoID0gdGhpcy5fZGl2LmNsaWVudEhlaWdodCAqIHNjYWxlWTtcbiAgICAgICAgbGV0IGFwcHggPSAodyAqIF9tYXQ0X3RlbXAubTAwKSAqIG5vZGUuX2FuY2hvclBvaW50Lng7XG4gICAgICAgIGxldCBhcHB5ID0gKGggKiBfbWF0NF90ZW1wLm0wNSkgKiBub2RlLl9hbmNob3JQb2ludC55O1xuXG4gICAgICAgIGxldCB2aWV3cG9ydCA9IGNjLnZpZXcuX3ZpZXdwb3J0UmVjdDtcbiAgICAgICAgb2Zmc2V0WCArPSB2aWV3cG9ydC54IC8gZHByO1xuICAgICAgICBvZmZzZXRZICs9IHZpZXdwb3J0LnkgLyBkcHI7XG5cbiAgICAgICAgbGV0IHR4ID0gX21hdDRfdGVtcC5tMTIgKiBzY2FsZVggLSBhcHB4ICsgb2Zmc2V0WCwgdHkgPSBfbWF0NF90ZW1wLm0xMyAqIHNjYWxlWSAtIGFwcHkgKyBvZmZzZXRZO1xuXG4gICAgICAgIGxldCBtYXRyaXggPSBcIm1hdHJpeChcIiArIGEgKyBcIixcIiArIC1iICsgXCIsXCIgKyAtYyArIFwiLFwiICsgZCArIFwiLFwiICsgdHggKyBcIixcIiArIC10eSArIFwiKVwiO1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGVbJ3RyYW5zZm9ybSddID0gbWF0cml4O1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGVbJy13ZWJraXQtdHJhbnNmb3JtJ10gPSBtYXRyaXg7XG4gICAgICAgIHRoaXMuX2Rpdi5zdHlsZVsndHJhbnNmb3JtLW9yaWdpbiddID0gJzBweCAxMDAlIDBweCc7XG4gICAgICAgIHRoaXMuX2Rpdi5zdHlsZVsnLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luJ10gPSAnMHB4IDEwMCUgMHB4JztcblxuICAgICAgICAvLyBjaGFnbmVkIGlmcmFtZSBvcGFjaXR5XG4gICAgICAgIHRoaXMuX3NldE9wYWNpdHkobm9kZS5vcGFjaXR5KTtcbiAgICB9XG59KTtcblxuV2ViVmlld0ltcGwuRXZlbnRUeXBlID0ge1xuICAgIExPQURJTkc6IDAsXG4gICAgTE9BREVEOiAxLFxuICAgIEVSUk9SOiAyLFxuICAgIEpTX0VWQUxVQVRFRDogM1xufTtcblxubGV0IHBvbHlmaWxsID0gV2ViVmlld0ltcGwuX3BvbHlmaWxsID0ge1xuICAgIGRldmljZVBpeGVsUmF0aW86IGZhbHNlLFxuICAgIGVuYWJsZURpdjogZmFsc2Vcbn07XG5cbmlmIChzeXMub3MgPT09IHN5cy5PU19JT1MpXG4gICAgcG9seWZpbGwuZW5hYmxlRGl2ID0gdHJ1ZTtcblxuaWYgKHN5cy5pc01vYmlsZSkge1xuICAgIGlmIChzeXMuYnJvd3NlclR5cGUgPT09IHN5cy5CUk9XU0VSX1RZUEVfRklSRUZPWCkge1xuICAgICAgICBwb2x5ZmlsbC5lbmFibGVCRyA9IHRydWU7XG4gICAgfVxufVxuZWxzZSB7XG4gICAgaWYgKHN5cy5icm93c2VyVHlwZSA9PT0gc3lzLkJST1dTRVJfVFlQRV9JRSkge1xuICAgICAgICBwb2x5ZmlsbC5jbG9zZUhpc3RvcnkgPSB0cnVlO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXZWJWaWV3SW1wbDsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdm1hdGggPSByZXF1aXJlKCcuLi9jb3JlL3ZtYXRoJyk7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL2NvcmUvcGxhdGZvcm0vdXRpbHMnKTsgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRIRSBTT0ZUV0FSRS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBzeXMgPSByZXF1aXJlKCcuLi9jb3JlL3BsYXRmb3JtL0NDU3lzJyk7XG5cbnZhciBfbWF0NF90ZW1wID0gX3ZtYXRoLm1hdDQuY3JlYXRlKCk7XG5cbnZhciBXZWJWaWV3SW1wbCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiBcIldlYlZpZXdJbXBsXCIsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKCkge1xuICAgICAgICAvLyB0aGlzLnNldENvbnRlbnRTaXplKGNjLnNpemUoMzAwLCAyMDApKTtcbiAgICAgICAgdGhpcy5fRXZlbnRMaXN0ID0ge307XG5cbiAgICAgICAgdGhpcy5fdmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9kaXYgPSBudWxsO1xuICAgICAgICB0aGlzLl9pZnJhbWUgPSBudWxsO1xuICAgICAgICB0aGlzLl9saXN0ZW5lciA9IG51bGw7XG5cbiAgICAgICAgLy8gdXBkYXRlIG1hdHJpeCBjYWNoZVxuICAgICAgICB0aGlzLl9mb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX20wMCA9IDA7XG4gICAgICAgIHRoaXMuX20wMSA9IDA7XG4gICAgICAgIHRoaXMuX20wNCA9IDA7XG4gICAgICAgIHRoaXMuX20wNSA9IDA7XG4gICAgICAgIHRoaXMuX20xMiA9IDA7XG4gICAgICAgIHRoaXMuX20xMyA9IDA7XG4gICAgICAgIHRoaXMuX3cgPSAwO1xuICAgICAgICB0aGlzLl9oID0gMDtcbiAgICAgICAgLy9cbiAgICAgICAgdGhpcy5fX2V2ZW50TGlzdGVuZXJzID0ge307XG4gICAgfSxcbiAgICBfdXBkYXRlVmlzaWJpbGl0eTogZnVuY3Rpb24gX3VwZGF0ZVZpc2liaWxpdHkoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGl2KSByZXR1cm47XG4gICAgICAgIHZhciBkaXYgPSB0aGlzLl9kaXY7XG4gICAgICAgIGlmICh0aGlzLl92aXNpYmxlKSB7XG4gICAgICAgICAgICBkaXYuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpdi5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZm9yY2VVcGRhdGUgPSB0cnVlO1xuICAgIH0sXG4gICAgX3VwZGF0ZVNpemU6IGZ1bmN0aW9uIF91cGRhdGVTaXplKHcsIGgpIHtcbiAgICAgICAgdmFyIGRpdiA9IHRoaXMuX2RpdjtcbiAgICAgICAgaWYgKGRpdikge1xuICAgICAgICAgICAgZGl2LnN0eWxlLndpZHRoID0gdyArIFwicHhcIjtcbiAgICAgICAgICAgIGRpdi5zdHlsZS5oZWlnaHQgPSBoICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBfaW5pdEV2ZW50OiBmdW5jdGlvbiBfaW5pdEV2ZW50KCkge1xuICAgICAgICB2YXIgaWZyYW1lID0gdGhpcy5faWZyYW1lO1xuICAgICAgICBpZiAoaWZyYW1lKSB7XG4gICAgICAgICAgICB2YXIgY2JzID0gdGhpcy5fX2V2ZW50TGlzdGVuZXJzLFxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgY2JzLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fZGlzcGF0Y2hFdmVudChXZWJWaWV3SW1wbC5FdmVudFR5cGUuTE9BREVEKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYnMuZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fZGlzcGF0Y2hFdmVudChXZWJWaWV3SW1wbC5FdmVudFR5cGUuRVJST1IpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmcmFtZS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBjYnMubG9hZCk7XG4gICAgICAgICAgICBpZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGNicy5lcnJvcik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIF9pbml0U3R5bGU6IGZ1bmN0aW9uIF9pbml0U3R5bGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGl2KSByZXR1cm47XG4gICAgICAgIHZhciBkaXYgPSB0aGlzLl9kaXY7XG4gICAgICAgIGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgZGl2LnN0eWxlLmJvdHRvbSA9IFwiMHB4XCI7XG4gICAgICAgIGRpdi5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICB9LFxuICAgIF9zZXRPcGFjaXR5OiBmdW5jdGlvbiBfc2V0T3BhY2l0eShvcGFjaXR5KSB7XG4gICAgICAgIHZhciBpZnJhbWUgPSB0aGlzLl9pZnJhbWU7XG4gICAgICAgIGlmIChpZnJhbWUgJiYgaWZyYW1lLnN0eWxlKSB7XG4gICAgICAgICAgICBpZnJhbWUuc3R5bGUub3BhY2l0eSA9IG9wYWNpdHkgLyAyNTU7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIF9jcmVhdGVEb206IGZ1bmN0aW9uIF9jcmVhdGVEb20odywgaCkge1xuICAgICAgICBpZiAoV2ViVmlld0ltcGwuX3BvbHlmaWxsLmVuYWJsZURpdikge1xuICAgICAgICAgICAgdGhpcy5fZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHRoaXMuX2Rpdi5zdHlsZVtcIi13ZWJraXQtb3ZlcmZsb3dcIl0gPSBcImF1dG9cIjtcbiAgICAgICAgICAgIHRoaXMuX2Rpdi5zdHlsZVtcIi13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nXCJdID0gXCJ0b3VjaFwiO1xuICAgICAgICAgICAgdGhpcy5faWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgICAgICAgICAgIHRoaXMuX2Rpdi5hcHBlbmRDaGlsZCh0aGlzLl9pZnJhbWUpO1xuICAgICAgICAgICAgdGhpcy5faWZyYW1lLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgICAgICB0aGlzLl9pZnJhbWUuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9kaXYgPSB0aGlzLl9pZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFdlYlZpZXdJbXBsLl9wb2x5ZmlsbC5lbmFibGVCRykgdGhpcy5fZGl2LnN0eWxlW1wiYmFja2dyb3VuZFwiXSA9IFwiI0ZGRlwiO1xuXG4gICAgICAgIHRoaXMuX2Rpdi5zdHlsZVtcImJhY2tncm91bmRcIl0gPSBcIiNGRkZcIjtcbiAgICAgICAgdGhpcy5fZGl2LnN0eWxlLmhlaWdodCA9IGggKyBcInB4XCI7XG4gICAgICAgIHRoaXMuX2Rpdi5zdHlsZS53aWR0aCA9IHcgKyBcInB4XCI7XG4gICAgICAgIHRoaXMuX2Rpdi5zdHlsZS5vdmVyZmxvdyA9IFwic2Nyb2xsXCI7XG4gICAgICAgIHRoaXMuX2lmcmFtZS5zdHlsZS5ib3JkZXIgPSBcIm5vbmVcIjtcblxuICAgICAgICBjYy5nYW1lLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9kaXYpO1xuICAgICAgICB0aGlzLl91cGRhdGVWaXNpYmlsaXR5KCk7XG4gICAgfSxcbiAgICBfY3JlYXRlTmF0aXZlQ29udHJvbDogZnVuY3Rpb24gX2NyZWF0ZU5hdGl2ZUNvbnRyb2wodywgaCkge1xuICAgICAgICB0aGlzLl9jcmVhdGVEb20odywgaCk7XG4gICAgICAgIHRoaXMuX2luaXRTdHlsZSgpO1xuICAgICAgICB0aGlzLl9pbml0RXZlbnQoKTtcbiAgICB9LFxuXG5cbiAgICBjcmVhdGVEb21FbGVtZW50SWZOZWVkZWQ6IENDX0VESVRPUiA/IGZ1bmN0aW9uICh3LCBoKSB7XG4gICAgICAgIHRoaXMuX2RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGUuYmFja2dyb3VuZCA9ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCknO1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGUuY29sb3IgPSAncmdiKDUxLCA1MSwgNTEpJztcbiAgICAgICAgdGhpcy5fZGl2LnN0eWxlLmhlaWdodCA9IHcgKyAncHgnO1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGUud2lkdGggPSBoICsgJ3B4JztcbiAgICAgICAgdGhpcy5fZGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgdGhpcy5fZGl2LnN0eWxlLmJvdHRvbSA9ICcwcHgnO1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGUubGVmdCA9ICcwcHgnO1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGVbJ3dvcmQtd3JhcCddID0gJ2JyZWFrLXdvcmQnO1xuICAgICAgICBjYy5nYW1lLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9kaXYpO1xuICAgIH0gOiBmdW5jdGlvbiAodywgaCkge1xuICAgICAgICBpZiAoIXRoaXMuX2Rpdikge1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlTmF0aXZlQ29udHJvbCh3LCBoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVNpemUodywgaCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVtb3ZlRG9tOiBmdW5jdGlvbiByZW1vdmVEb20oKSB7XG4gICAgICAgIHZhciBkaXYgPSB0aGlzLl9kaXY7XG4gICAgICAgIGlmIChkaXYpIHtcbiAgICAgICAgICAgIHZhciBoYXNDaGlsZCA9IHV0aWxzLmNvbnRhaW5zKGNjLmdhbWUuY29udGFpbmVyLCBkaXYpO1xuICAgICAgICAgICAgaWYgKGhhc0NoaWxkKSBjYy5nYW1lLmNvbnRhaW5lci5yZW1vdmVDaGlsZChkaXYpO1xuXG4gICAgICAgICAgICB0aGlzLl9kaXYgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZnJhbWUgPSB0aGlzLl9pZnJhbWU7XG4gICAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgICAgIHZhciBjYnMgPSB0aGlzLl9fZXZlbnRMaXN0ZW5lcnM7XG4gICAgICAgICAgICBpZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgY2JzLmxvYWQpO1xuICAgICAgICAgICAgaWZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBjYnMuZXJyb3IpO1xuICAgICAgICAgICAgY2JzLmxvYWQgPSBudWxsO1xuICAgICAgICAgICAgY2JzLmVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2lmcmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNldE9uSlNDYWxsYmFjazogZnVuY3Rpb24gc2V0T25KU0NhbGxiYWNrKGNhbGxiYWNrKSB7fSxcbiAgICBzZXRKYXZhc2NyaXB0SW50ZXJmYWNlU2NoZW1lOiBmdW5jdGlvbiBzZXRKYXZhc2NyaXB0SW50ZXJmYWNlU2NoZW1lKHNjaGVtZSkge30sXG5cbiAgICAvLyBwcml2YXRlIG1ldGhvZFxuICAgIGxvYWREYXRhOiBmdW5jdGlvbiBsb2FkRGF0YShkYXRhLCBNSU1FVHlwZSwgZW5jb2RpbmcsIGJhc2VVUkwpIHt9LFxuICAgIGxvYWRIVE1MU3RyaW5nOiBmdW5jdGlvbiBsb2FkSFRNTFN0cmluZyhzdHJpbmcsIGJhc2VVUkwpIHt9LFxuXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIGFuIFVSTFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAgICAgKi9cbiAgICBsb2FkVVJMOiBDQ19FRElUT1IgPyBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHRoaXMuX2Rpdi5pbm5lclRleHQgPSB1cmw7XG4gICAgfSA6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgdmFyIGlmcmFtZSA9IHRoaXMuX2lmcmFtZTtcbiAgICAgICAgaWYgKGlmcmFtZSkge1xuICAgICAgICAgICAgaWZyYW1lLnNyYyA9IHVybDtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHZhciBjYiA9IGZ1bmN0aW9uIGNiKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuX2xvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2VsZi5fdXBkYXRlVmlzaWJpbGl0eSgpO1xuICAgICAgICAgICAgICAgIGlmcmFtZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCBjYik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGNiKTtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnQoV2ViVmlld0ltcGwuRXZlbnRUeXBlLkxPQURJTkcpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN0b3AgbG9hZGluZ1xuICAgICAqL1xuICAgIHN0b3BMb2FkaW5nOiBmdW5jdGlvbiBzdG9wTG9hZGluZygpIHtcbiAgICAgICAgY2MubG9nSUQoNzgwMCk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUmVsb2FkIHRoZSBXZWJWaWV3XG4gICAgICovXG4gICAgcmVsb2FkOiBmdW5jdGlvbiByZWxvYWQoKSB7XG4gICAgICAgIHZhciBpZnJhbWUgPSB0aGlzLl9pZnJhbWU7XG4gICAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgICAgIHZhciB3aW4gPSBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICAgICAgICAgIGlmICh3aW4gJiYgd2luLmxvY2F0aW9uKSB3aW4ubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgd2hldGhlciB0byBnbyBiYWNrXG4gICAgICovXG4gICAgY2FuR29CYWNrOiBmdW5jdGlvbiBjYW5Hb0JhY2soKSB7XG4gICAgICAgIGNjLmxvZ0lEKDc4MDEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgd2hldGhlciB0byBnbyBmb3J3YXJkXG4gICAgICovXG4gICAgY2FuR29Gb3J3YXJkOiBmdW5jdGlvbiBjYW5Hb0ZvcndhcmQoKSB7XG4gICAgICAgIGNjLmxvZ0lEKDc4MDIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBnbyBiYWNrXG4gICAgICovXG4gICAgZ29CYWNrOiBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoV2ViVmlld0ltcGwuX3BvbHlmaWxsLmNsb3NlSGlzdG9yeSkgcmV0dXJuIGNjLmxvZ0lEKDc4MDMpO1xuICAgICAgICAgICAgdmFyIGlmcmFtZSA9IHRoaXMuX2lmcmFtZTtcbiAgICAgICAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2luID0gaWZyYW1lLmNvbnRlbnRXaW5kb3c7XG4gICAgICAgICAgICAgICAgaWYgKHdpbiAmJiB3aW4ubG9jYXRpb24pIHdpbi5oaXN0b3J5LmJhY2suY2FsbCh3aW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNjLmxvZyhlcnIpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogZ28gZm9yd2FyZFxuICAgICAqL1xuICAgIGdvRm9yd2FyZDogZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKFdlYlZpZXdJbXBsLl9wb2x5ZmlsbC5jbG9zZUhpc3RvcnkpIHJldHVybiBjYy5sb2dJRCg3ODA0KTtcbiAgICAgICAgICAgIHZhciBpZnJhbWUgPSB0aGlzLl9pZnJhbWU7XG4gICAgICAgICAgICBpZiAoaWZyYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpbiA9IGlmcmFtZS5jb250ZW50V2luZG93O1xuICAgICAgICAgICAgICAgIGlmICh3aW4gJiYgd2luLmxvY2F0aW9uKSB3aW4uaGlzdG9yeS5mb3J3YXJkLmNhbGwod2luKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjYy5sb2coZXJyKTtcbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEluIHRoZSB3ZWJ2aWV3IGV4ZWN1dGlvbiB3aXRoaW4gYSBwZXJpb2Qgb2YganMgc3RyaW5nXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICAgICAqL1xuICAgIGV2YWx1YXRlSlM6IGZ1bmN0aW9uIGV2YWx1YXRlSlMoc3RyKSB7XG4gICAgICAgIHZhciBpZnJhbWUgPSB0aGlzLl9pZnJhbWU7XG4gICAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgICAgIHZhciB3aW4gPSBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgd2luLmV2YWwoc3RyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwYXRjaEV2ZW50KFdlYlZpZXdJbXBsLkV2ZW50VHlwZS5KU19FVkFMVUFURUQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogTGltaXRlZCBzY2FsZVxuICAgICAqL1xuICAgIHNldFNjYWxlc1BhZ2VUb0ZpdDogZnVuY3Rpb24gc2V0U2NhbGVzUGFnZVRvRml0KCkge1xuICAgICAgICBjYy5sb2dJRCg3ODA1KTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmluZGluZyBldmVudFxuICAgICAqIEBwYXJhbSB7V2ViVmlld0ltcGwuRXZlbnRUeXBlfSBldmVudFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgc2V0RXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gc2V0RXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fRXZlbnRMaXN0W2V2ZW50XSA9IGNhbGxiYWNrO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBldmVudHNcbiAgICAgKiBAcGFyYW0ge1dlYlZpZXdJbXBsLkV2ZW50VHlwZX0gZXZlbnRcbiAgICAgKi9cbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX0V2ZW50TGlzdFtldmVudF0gPSBudWxsO1xuICAgIH0sXG4gICAgX2Rpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uIF9kaXNwYXRjaEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRoaXMuX0V2ZW50TGlzdFtldmVudF07XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2suY2FsbCh0aGlzLCB0aGlzLCB0aGlzLl9pZnJhbWUuc3JjKTtcbiAgICB9LFxuICAgIF9jcmVhdGVSZW5kZXJDbWQ6IGZ1bmN0aW9uIF9jcmVhdGVSZW5kZXJDbWQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgV2ViVmlld0ltcGwuUmVuZGVyQ21kKHRoaXMpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVEb20oKTtcbiAgICB9LFxuICAgIHNldFZpc2libGU6IGZ1bmN0aW9uIHNldFZpc2libGUodmlzaWJsZSkge1xuICAgICAgICBpZiAodGhpcy5fdmlzaWJsZSAhPT0gdmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5fdmlzaWJsZSA9ICEhdmlzaWJsZTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdXBkYXRlTWF0cml4OiBmdW5jdGlvbiB1cGRhdGVNYXRyaXgobm9kZSkge1xuICAgICAgICBpZiAoIXRoaXMuX2RpdiB8fCAhdGhpcy5fdmlzaWJsZSkgcmV0dXJuO1xuXG4gICAgICAgIG5vZGUuZ2V0V29ybGRNYXRyaXgoX21hdDRfdGVtcCk7XG4gICAgICAgIHZhciByZW5kZXJDYW1lcmEgPSBjYy5DYW1lcmEuX2ZpbmRSZW5kZXJlckNhbWVyYShub2RlKTtcbiAgICAgICAgaWYgKHJlbmRlckNhbWVyYSkge1xuICAgICAgICAgICAgcmVuZGVyQ2FtZXJhLndvcmxkTWF0cml4VG9TY3JlZW4oX21hdDRfdGVtcCwgX21hdDRfdGVtcCwgY2MudmlzaWJsZVJlY3Qud2lkdGgsIGNjLnZpc2libGVSZWN0LmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2ZvcmNlVXBkYXRlICYmIHRoaXMuX20wMCA9PT0gX21hdDRfdGVtcC5tMDAgJiYgdGhpcy5fbTAxID09PSBfbWF0NF90ZW1wLm0wMSAmJiB0aGlzLl9tMDQgPT09IF9tYXQ0X3RlbXAubTA0ICYmIHRoaXMuX20wNSA9PT0gX21hdDRfdGVtcC5tMDUgJiYgdGhpcy5fbTEyID09PSBfbWF0NF90ZW1wLm0xMiAmJiB0aGlzLl9tMTMgPT09IF9tYXQ0X3RlbXAubTEzICYmIHRoaXMuX3cgPT09IG5vZGUuX2NvbnRlbnRTaXplLndpZHRoICYmIHRoaXMuX2ggPT09IG5vZGUuX2NvbnRlbnRTaXplLmhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIG1hdHJpeCBjYWNoZVxuICAgICAgICB0aGlzLl9tMDAgPSBfbWF0NF90ZW1wLm0wMDtcbiAgICAgICAgdGhpcy5fbTAxID0gX21hdDRfdGVtcC5tMDE7XG4gICAgICAgIHRoaXMuX20wNCA9IF9tYXQ0X3RlbXAubTA0O1xuICAgICAgICB0aGlzLl9tMDUgPSBfbWF0NF90ZW1wLm0wNTtcbiAgICAgICAgdGhpcy5fbTEyID0gX21hdDRfdGVtcC5tMTI7XG4gICAgICAgIHRoaXMuX20xMyA9IF9tYXQ0X3RlbXAubTEzO1xuICAgICAgICB0aGlzLl93ID0gbm9kZS5fY29udGVudFNpemUud2lkdGg7XG4gICAgICAgIHRoaXMuX2ggPSBub2RlLl9jb250ZW50U2l6ZS5oZWlnaHQ7XG5cbiAgICAgICAgdmFyIHNjYWxlWCA9IGNjLnZpZXcuX3NjYWxlWCxcbiAgICAgICAgICAgIHNjYWxlWSA9IGNjLnZpZXcuX3NjYWxlWTtcbiAgICAgICAgdmFyIGRwciA9IGNjLnZpZXcuX2RldmljZVBpeGVsUmF0aW87XG5cbiAgICAgICAgc2NhbGVYIC89IGRwcjtcbiAgICAgICAgc2NhbGVZIC89IGRwcjtcblxuICAgICAgICB2YXIgY29udGFpbmVyID0gY2MuZ2FtZS5jb250YWluZXI7XG4gICAgICAgIHZhciBhID0gX21hdDRfdGVtcC5tMDAgKiBzY2FsZVgsXG4gICAgICAgICAgICBiID0gX21hdDRfdGVtcC5tMDEsXG4gICAgICAgICAgICBjID0gX21hdDRfdGVtcC5tMDQsXG4gICAgICAgICAgICBkID0gX21hdDRfdGVtcC5tMDUgKiBzY2FsZVk7XG5cbiAgICAgICAgdmFyIG9mZnNldFggPSBjb250YWluZXIgJiYgY29udGFpbmVyLnN0eWxlLnBhZGRpbmdMZWZ0ID8gcGFyc2VJbnQoY29udGFpbmVyLnN0eWxlLnBhZGRpbmdMZWZ0KSA6IDA7XG4gICAgICAgIHZhciBvZmZzZXRZID0gY29udGFpbmVyICYmIGNvbnRhaW5lci5zdHlsZS5wYWRkaW5nQm90dG9tID8gcGFyc2VJbnQoY29udGFpbmVyLnN0eWxlLnBhZGRpbmdCb3R0b20pIDogMDtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2l6ZSh0aGlzLl93LCB0aGlzLl9oKTtcbiAgICAgICAgdmFyIHcgPSB0aGlzLl9kaXYuY2xpZW50V2lkdGggKiBzY2FsZVg7XG4gICAgICAgIHZhciBoID0gdGhpcy5fZGl2LmNsaWVudEhlaWdodCAqIHNjYWxlWTtcbiAgICAgICAgdmFyIGFwcHggPSB3ICogX21hdDRfdGVtcC5tMDAgKiBub2RlLl9hbmNob3JQb2ludC54O1xuICAgICAgICB2YXIgYXBweSA9IGggKiBfbWF0NF90ZW1wLm0wNSAqIG5vZGUuX2FuY2hvclBvaW50Lnk7XG5cbiAgICAgICAgdmFyIHZpZXdwb3J0ID0gY2Mudmlldy5fdmlld3BvcnRSZWN0O1xuICAgICAgICBvZmZzZXRYICs9IHZpZXdwb3J0LnggLyBkcHI7XG4gICAgICAgIG9mZnNldFkgKz0gdmlld3BvcnQueSAvIGRwcjtcblxuICAgICAgICB2YXIgdHggPSBfbWF0NF90ZW1wLm0xMiAqIHNjYWxlWCAtIGFwcHggKyBvZmZzZXRYLFxuICAgICAgICAgICAgdHkgPSBfbWF0NF90ZW1wLm0xMyAqIHNjYWxlWSAtIGFwcHkgKyBvZmZzZXRZO1xuXG4gICAgICAgIHZhciBtYXRyaXggPSBcIm1hdHJpeChcIiArIGEgKyBcIixcIiArIC1iICsgXCIsXCIgKyAtYyArIFwiLFwiICsgZCArIFwiLFwiICsgdHggKyBcIixcIiArIC10eSArIFwiKVwiO1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGVbJ3RyYW5zZm9ybSddID0gbWF0cml4O1xuICAgICAgICB0aGlzLl9kaXYuc3R5bGVbJy13ZWJraXQtdHJhbnNmb3JtJ10gPSBtYXRyaXg7XG4gICAgICAgIHRoaXMuX2Rpdi5zdHlsZVsndHJhbnNmb3JtLW9yaWdpbiddID0gJzBweCAxMDAlIDBweCc7XG4gICAgICAgIHRoaXMuX2Rpdi5zdHlsZVsnLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luJ10gPSAnMHB4IDEwMCUgMHB4JztcblxuICAgICAgICAvLyBjaGFnbmVkIGlmcmFtZSBvcGFjaXR5XG4gICAgICAgIHRoaXMuX3NldE9wYWNpdHkobm9kZS5vcGFjaXR5KTtcbiAgICB9XG59KTtcblxuV2ViVmlld0ltcGwuRXZlbnRUeXBlID0ge1xuICAgIExPQURJTkc6IDAsXG4gICAgTE9BREVEOiAxLFxuICAgIEVSUk9SOiAyLFxuICAgIEpTX0VWQUxVQVRFRDogM1xufTtcblxudmFyIHBvbHlmaWxsID0gV2ViVmlld0ltcGwuX3BvbHlmaWxsID0ge1xuICAgIGRldmljZVBpeGVsUmF0aW86IGZhbHNlLFxuICAgIGVuYWJsZURpdjogZmFsc2Vcbn07XG5cbmlmIChzeXMub3MgPT09IHN5cy5PU19JT1MpIHBvbHlmaWxsLmVuYWJsZURpdiA9IHRydWU7XG5cbmlmIChzeXMuaXNNb2JpbGUpIHtcbiAgICBpZiAoc3lzLmJyb3dzZXJUeXBlID09PSBzeXMuQlJPV1NFUl9UWVBFX0ZJUkVGT1gpIHtcbiAgICAgICAgcG9seWZpbGwuZW5hYmxlQkcgPSB0cnVlO1xuICAgIH1cbn0gZWxzZSB7XG4gICAgaWYgKHN5cy5icm93c2VyVHlwZSA9PT0gc3lzLkJST1dTRVJfVFlQRV9JRSkge1xuICAgICAgICBwb2x5ZmlsbC5jbG9zZUhpc3RvcnkgPSB0cnVlO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXZWJWaWV3SW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZblpwWlhjdGFXMXdiQzVxY3lKZExDSnVZVzFsY3lJNld5SjFkR2xzY3lJc0luSmxjWFZwY21VaUxDSnplWE1pTENKZmJXRjBORjkwWlcxd0lpd2liV0YwTkNJc0ltTnlaV0YwWlNJc0lsZGxZbFpwWlhkSmJYQnNJaXdpWTJNaUxDSkRiR0Z6Y3lJc0ltNWhiV1VpTENKamRHOXlJaXdpWDBWMlpXNTBUR2x6ZENJc0lsOTJhWE5wWW14bElpd2lYM0JoY21WdWRDSXNJbDlrYVhZaUxDSmZhV1p5WVcxbElpd2lYMnhwYzNSbGJtVnlJaXdpWDJadmNtTmxWWEJrWVhSbElpd2lYMjB3TUNJc0lsOXRNREVpTENKZmJUQTBJaXdpWDIwd05TSXNJbDl0TVRJaUxDSmZiVEV6SWl3aVgzY2lMQ0pmYUNJc0lsOWZaWFpsYm5STWFYTjBaVzVsY25NaUxDSmZkWEJrWVhSbFZtbHphV0pwYkdsMGVTSXNJbVJwZGlJc0luTjBlV3hsSWl3aWRtbHphV0pwYkdsMGVTSXNJbDkxY0dSaGRHVlRhWHBsSWl3aWR5SXNJbWdpTENKM2FXUjBhQ0lzSW1obGFXZG9kQ0lzSWw5cGJtbDBSWFpsYm5RaUxDSnBabkpoYldVaUxDSmpZbk1pTENKelpXeG1JaXdpYkc5aFpDSXNJbDlrYVhOd1lYUmphRVYyWlc1MElpd2lSWFpsYm5SVWVYQmxJaXdpVEU5QlJFVkVJaXdpWlhKeWIzSWlMQ0pGVWxKUFVpSXNJbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0pmYVc1cGRGTjBlV3hsSWl3aWNHOXphWFJwYjI0aUxDSmliM1IwYjIwaUxDSnNaV1owSWl3aVgzTmxkRTl3WVdOcGRIa2lMQ0p2Y0dGamFYUjVJaXdpWDJOeVpXRjBaVVJ2YlNJc0lsOXdiMng1Wm1sc2JDSXNJbVZ1WVdKc1pVUnBkaUlzSW1SdlkzVnRaVzUwSWl3aVkzSmxZWFJsUld4bGJXVnVkQ0lzSW1Gd2NHVnVaRU5vYVd4a0lpd2laVzVoWW14bFFrY2lMQ0p2ZG1WeVpteHZkeUlzSW1KdmNtUmxjaUlzSW1kaGJXVWlMQ0pqYjI1MFlXbHVaWElpTENKZlkzSmxZWFJsVG1GMGFYWmxRMjl1ZEhKdmJDSXNJbU55WldGMFpVUnZiVVZzWlcxbGJuUkpaazVsWldSbFpDSXNJa05EWDBWRVNWUlBVaUlzSW1KaFkydG5jbTkxYm1RaUxDSmpiMnh2Y2lJc0luSmxiVzkyWlVSdmJTSXNJbWhoYzBOb2FXeGtJaXdpWTI5dWRHRnBibk1pTENKeVpXMXZkbVZEYUdsc1pDSXNJbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElpTENKelpYUlBia3BUUTJGc2JHSmhZMnNpTENKallXeHNZbUZqYXlJc0luTmxkRXBoZG1GelkzSnBjSFJKYm5SbGNtWmhZMlZUWTJobGJXVWlMQ0p6WTJobGJXVWlMQ0pzYjJGa1JHRjBZU0lzSW1SaGRHRWlMQ0pOU1UxRlZIbHdaU0lzSW1WdVkyOWthVzVuSWl3aVltRnpaVlZTVENJc0lteHZZV1JJVkUxTVUzUnlhVzVuSWl3aWMzUnlhVzVuSWl3aWJHOWhaRlZTVENJc0luVnliQ0lzSW1sdWJtVnlWR1Y0ZENJc0luTnlZeUlzSW1OaUlpd2lYMnh2WVdSbFpDSXNJa3hQUVVSSlRrY2lMQ0p6ZEc5d1RHOWhaR2x1WnlJc0lteHZaMGxFSWl3aWNtVnNiMkZrSWl3aWQybHVJaXdpWTI5dWRHVnVkRmRwYm1SdmR5SXNJbXh2WTJGMGFXOXVJaXdpWTJGdVIyOUNZV05ySWl3aVkyRnVSMjlHYjNKM1lYSmtJaXdpWjI5Q1lXTnJJaXdpWTJ4dmMyVklhWE4wYjNKNUlpd2lhR2x6ZEc5eWVTSXNJbUpoWTJzaUxDSmpZV3hzSWl3aVpYSnlJaXdpYkc5bklpd2laMjlHYjNKM1lYSmtJaXdpWm05eWQyRnlaQ0lzSW1WMllXeDFZWFJsU2xNaUxDSnpkSElpTENKbGRtRnNJaXdpU2xOZlJWWkJURlZCVkVWRUlpd2lZMjl1YzI5c1pTSXNJbk5sZEZOallXeGxjMUJoWjJWVWIwWnBkQ0lzSW5ObGRFVjJaVzUwVEdsemRHVnVaWElpTENKbGRtVnVkQ0lzSWw5amNtVmhkR1ZTWlc1a1pYSkRiV1FpTENKU1pXNWtaWEpEYldRaUxDSmtaWE4wY205NUlpd2ljMlYwVm1semFXSnNaU0lzSW5acGMybGliR1VpTENKMWNHUmhkR1ZOWVhSeWFYZ2lMQ0p1YjJSbElpd2laMlYwVjI5eWJHUk5ZWFJ5YVhnaUxDSnlaVzVrWlhKRFlXMWxjbUVpTENKRFlXMWxjbUVpTENKZlptbHVaRkpsYm1SbGNtVnlRMkZ0WlhKaElpd2lkMjl5YkdSTllYUnlhWGhVYjFOamNtVmxiaUlzSW5acGMybGliR1ZTWldOMElpd2liVEF3SWl3aWJUQXhJaXdpYlRBMElpd2liVEExSWl3aWJURXlJaXdpYlRFeklpd2lYMk52Ym5SbGJuUlRhWHBsSWl3aWMyTmhiR1ZZSWl3aWRtbGxkeUlzSWw5elkyRnNaVmdpTENKelkyRnNaVmtpTENKZmMyTmhiR1ZaSWl3aVpIQnlJaXdpWDJSbGRtbGpaVkJwZUdWc1VtRjBhVzhpTENKaElpd2lZaUlzSW1NaUxDSmtJaXdpYjJabWMyVjBXQ0lzSW5CaFpHUnBibWRNWldaMElpd2ljR0Z5YzJWSmJuUWlMQ0p2Wm1aelpYUlpJaXdpY0dGa1pHbHVaMEp2ZEhSdmJTSXNJbU5zYVdWdWRGZHBaSFJvSWl3aVkyeHBaVzUwU0dWcFoyaDBJaXdpWVhCd2VDSXNJbDloYm1Ob2IzSlFiMmx1ZENJc0luZ2lMQ0poY0hCNUlpd2llU0lzSW5acFpYZHdiM0owSWl3aVgzWnBaWGR3YjNKMFVtVmpkQ0lzSW5SNElpd2lkSGtpTENKdFlYUnlhWGdpTENKd2IyeDVabWxzYkNJc0ltUmxkbWxqWlZCcGVHVnNVbUYwYVc4aUxDSnZjeUlzSWs5VFgwbFBVeUlzSW1selRXOWlhV3hsSWl3aVluSnZkM05sY2xSNWNHVWlMQ0pDVWs5WFUwVlNYMVJaVUVWZlJrbFNSVVpQV0NJc0lrSlNUMWRUUlZKZlZGbFFSVjlKUlNJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQmVVSkJPenRCUVVWQkxFbEJRVTFCTEZGQlFWRkRMRkZCUVZFc2QwSkJRVklzUTBGQlpDeERMRU5CTTBKQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk5FSkJMRWxCUVUxRExFMUJRVTFFTEZGQlFWRXNkMEpCUVZJc1EwRkJXanM3UVVGRlFTeEpRVUZKUlN4aFFVRmhReXhaUVVGTFF5eE5RVUZNTEVWQlFXcENPenRCUVVWQkxFbEJRVWxETEdOQlFXTkRMRWRCUVVkRExFdEJRVWdzUTBGQlV6dEJRVU4yUWtNc1ZVRkJUU3hoUVVScFFqczdRVUZIZGtKRExGRkJTSFZDTEd0Q1FVZG1PMEZCUTBvN1FVRkRRU3hoUVVGTFF5eFZRVUZNTEVkQlFXdENMRVZCUVd4Q096dEJRVVZCTEdGQlFVdERMRkZCUVV3c1IwRkJaMElzUzBGQmFFSTdRVUZEUVN4aFFVRkxReXhQUVVGTUxFZEJRV1VzU1VGQlpqdEJRVU5CTEdGQlFVdERMRWxCUVV3c1IwRkJXU3hKUVVGYU8wRkJRMEVzWVVGQlMwTXNUMEZCVEN4SFFVRmxMRWxCUVdZN1FVRkRRU3hoUVVGTFF5eFRRVUZNTEVkQlFXbENMRWxCUVdwQ096dEJRVVZCTzBGQlEwRXNZVUZCUzBNc1dVRkJUQ3hIUVVGdlFpeEpRVUZ3UWp0QlFVTkJMR0ZCUVV0RExFbEJRVXdzUjBGQldTeERRVUZhTzBGQlEwRXNZVUZCUzBNc1NVRkJUQ3hIUVVGWkxFTkJRVm83UVVGRFFTeGhRVUZMUXl4SlFVRk1MRWRCUVZrc1EwRkJXanRCUVVOQkxHRkJRVXRETEVsQlFVd3NSMEZCV1N4RFFVRmFPMEZCUTBFc1lVRkJTME1zU1VGQlRDeEhRVUZaTEVOQlFWbzdRVUZEUVN4aFFVRkxReXhKUVVGTUxFZEJRVmtzUTBGQldqdEJRVU5CTEdGQlFVdERMRVZCUVV3c1IwRkJWU3hEUVVGV08wRkJRMEVzWVVGQlMwTXNSVUZCVEN4SFFVRlZMRU5CUVZZN1FVRkRRVHRCUVVOQkxHRkJRVXRETEdkQ1FVRk1MRWRCUVhkQ0xFVkJRWGhDTzBGQlEwZ3NTMEY2UW5OQ08wRkJNa0oyUWtNc2NVSkJNMEoxUWl3clFrRXlRa1k3UVVGRGFrSXNXVUZCU1N4RFFVRkRMRXRCUVV0aUxFbEJRVllzUlVGQlowSTdRVUZEYUVJc1dVRkJTV01zVFVGQlRTeExRVUZMWkN4SlFVRm1PMEZCUTBFc1dVRkJTU3hMUVVGTFJpeFJRVUZVTEVWQlFXMUNPMEZCUTJablFpeG5Ra0ZCU1VNc1MwRkJTaXhEUVVGVlF5eFZRVUZXTEVkQlFYVkNMRk5CUVhaQ08wRkJRMGdzVTBGR1JDeE5RVWRMTzBGQlEwUkdMR2RDUVVGSlF5eExRVUZLTEVOQlFWVkRMRlZCUVZZc1IwRkJkVUlzVVVGQmRrSTdRVUZEU0R0QlFVTkVMR0ZCUVV0aUxGbEJRVXdzUjBGQmIwSXNTVUZCY0VJN1FVRkRTQ3hMUVhKRGMwSTdRVUYxUTNaQ1l5eGxRWFpEZFVJc2RVSkJkVU5XUXl4RFFYWkRWU3hGUVhWRFVFTXNRMEYyUTA4c1JVRjFRMG83UVVGRFppeFpRVUZKVEN4TlFVRk5MRXRCUVV0a0xFbEJRV1k3UVVGRFFTeFpRVUZKWXl4SFFVRktMRVZCUVZNN1FVRkRURUVzWjBKQlFVbERMRXRCUVVvc1EwRkJWVXNzUzBGQlZpeEhRVUZyUWtZc1NVRkJTU3hKUVVGMFFqdEJRVU5CU2l4blFrRkJTVU1zUzBGQlNpeERRVUZWVFN4TlFVRldMRWRCUVcxQ1JpeEpRVUZKTEVsQlFYWkNPMEZCUTBnN1FVRkRTaXhMUVRkRGMwSTdRVUVyUTNaQ1J5eGpRUzlEZFVJc2QwSkJLME5VTzBGQlExWXNXVUZCU1VNc1UwRkJVeXhMUVVGTGRFSXNUMEZCYkVJN1FVRkRRU3haUVVGSmMwSXNUVUZCU2l4RlFVRlpPMEZCUTFJc1owSkJRVWxETEUxQlFVMHNTMEZCUzFvc1owSkJRV1k3UVVGQlFTeG5Ra0ZCYVVOaExFOUJRVThzU1VGQmVFTTdRVUZEUVVRc1owSkJRVWxGTEVsQlFVb3NSMEZCVnl4WlFVRlpPMEZCUTI1Q1JDeHhRa0ZCUzBVc1kwRkJUQ3hEUVVGdlFtNURMRmxCUVZsdlF5eFRRVUZhTEVOQlFYTkNReXhOUVVFeFF6dEJRVU5JTEdGQlJrUTdRVUZIUVV3c1owSkJRVWxOTEV0QlFVb3NSMEZCV1N4WlFVRlpPMEZCUTNCQ1RDeHhRa0ZCUzBVc1kwRkJUQ3hEUVVGdlFtNURMRmxCUVZsdlF5eFRRVUZhTEVOQlFYTkNSeXhMUVVFeFF6dEJRVU5JTEdGQlJrUTdRVUZIUVZJc2JVSkJRVTlUTEdkQ1FVRlFMRU5CUVhkQ0xFMUJRWGhDTEVWQlFXZERVaXhKUVVGSlJTeEpRVUZ3UXp0QlFVTkJTQ3h0UWtGQlQxTXNaMEpCUVZBc1EwRkJkMElzVDBGQmVFSXNSVUZCYVVOU0xFbEJRVWxOTEV0QlFYSkRPMEZCUTBnN1FVRkRTaXhMUVRWRWMwSTdRVUU0UkhaQ1J5eGpRVGxFZFVJc2QwSkJPRVJVTzBGQlExWXNXVUZCU1N4RFFVRkRMRXRCUVV0cVF5eEpRVUZXTEVWQlFXZENPMEZCUTJoQ0xGbEJRVWxqTEUxQlFVMHNTMEZCUzJRc1NVRkJaanRCUVVOQll5eFpRVUZKUXl4TFFVRktMRU5CUVZWdFFpeFJRVUZXTEVkQlFYRkNMRlZCUVhKQ08wRkJRMEZ3UWl4WlFVRkpReXhMUVVGS0xFTkJRVlZ2UWl4TlFVRldMRWRCUVcxQ0xFdEJRVzVDTzBGQlEwRnlRaXhaUVVGSlF5eExRVUZLTEVOQlFWVnhRaXhKUVVGV0xFZEJRV2xDTEV0QlFXcENPMEZCUTBnc1MwRndSWE5DTzBGQmMwVjJRa01zWlVGMFJYVkNMSFZDUVhORlZrTXNUMEYwUlZVc1JVRnpSVVE3UVVGRGJFSXNXVUZCU1dZc1UwRkJVeXhMUVVGTGRFSXNUMEZCYkVJN1FVRkRRU3haUVVGSmMwSXNWVUZCVlVFc1QwRkJUMUlzUzBGQmNrSXNSVUZCTkVJN1FVRkRlRUpSTEcxQ1FVRlBVaXhMUVVGUUxFTkJRV0YxUWl4UFFVRmlMRWRCUVhWQ1FTeFZRVUZWTEVkQlFXcERPMEZCUTBnN1FVRkRTaXhMUVRORmMwSTdRVUUyUlhaQ1F5eGpRVGRGZFVJc2MwSkJOa1ZZY2tJc1EwRTNSVmNzUlVFMlJWSkRMRU5CTjBWUkxFVkJOa1ZNTzBGQlEyUXNXVUZCU1ROQ0xGbEJRVmxuUkN4VFFVRmFMRU5CUVhOQ1F5eFRRVUV4UWl4RlFVRnhRenRCUVVOcVF5eHBRa0ZCUzNwRExFbEJRVXdzUjBGQldUQkRMRk5CUVZORExHRkJRVlFzUTBGQmRVSXNTMEZCZGtJc1EwRkJXanRCUVVOQkxHbENRVUZMTTBNc1NVRkJUQ3hEUVVGVlpTeExRVUZXTEVOQlFXZENMR3RDUVVGb1FpeEpRVUZ6UXl4TlFVRjBRenRCUVVOQkxHbENRVUZMWml4SlFVRk1MRU5CUVZWbExFdEJRVllzUTBGQlowSXNORUpCUVdoQ0xFbEJRV2RFTEU5QlFXaEVPMEZCUTBFc2FVSkJRVXRrTEU5QlFVd3NSMEZCWlhsRExGTkJRVk5ETEdGQlFWUXNRMEZCZFVJc1VVRkJka0lzUTBGQlpqdEJRVU5CTEdsQ1FVRkxNME1zU1VGQlRDeERRVUZWTkVNc1YwRkJWaXhEUVVGelFpeExRVUZMTTBNc1QwRkJNMEk3UVVGRFFTeHBRa0ZCUzBFc1QwRkJUQ3hEUVVGaFl5eExRVUZpTEVOQlFXMUNTeXhMUVVGdVFpeEhRVUV5UWl4TlFVRXpRanRCUVVOQkxHbENRVUZMYmtJc1QwRkJUQ3hEUVVGaFl5eExRVUZpTEVOQlFXMUNUU3hOUVVGdVFpeEhRVUUwUWl4TlFVRTFRanRCUVVOSUxGTkJVa1FzVFVGVFN6dEJRVU5FTEdsQ1FVRkxja0lzU1VGQlRDeEhRVUZaTEV0QlFVdERMRTlCUVV3c1IwRkJaWGxETEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUlzVVVGQmRrSXNRMEZCTTBJN1FVRkRTRHM3UVVGRlJDeFpRVUZKYmtRc1dVRkJXV2RFTEZOQlFWb3NRMEZCYzBKTExGRkJRVEZDTEVWQlEwa3NTMEZCU3pkRExFbEJRVXdzUTBGQlZXVXNTMEZCVml4RFFVRm5RaXhaUVVGb1FpeEpRVUZuUXl4TlFVRm9RenM3UVVGRlNpeGhRVUZMWml4SlFVRk1MRU5CUVZWbExFdEJRVllzUTBGQlowSXNXVUZCYUVJc1NVRkJaME1zVFVGQmFFTTdRVUZEUVN4aFFVRkxaaXhKUVVGTUxFTkJRVlZsTEV0QlFWWXNRMEZCWjBKTkxFMUJRV2hDTEVkQlFYbENSaXhKUVVGSkxFbEJRVGRDTzBGQlEwRXNZVUZCUzI1Q0xFbEJRVXdzUTBGQlZXVXNTMEZCVml4RFFVRm5Ra3NzUzBGQmFFSXNSMEZCZDBKR0xFbEJRVWtzU1VGQk5VSTdRVUZEUVN4aFFVRkxiRUlzU1VGQlRDeERRVUZWWlN4TFFVRldMRU5CUVdkQ0swSXNVVUZCYUVJc1IwRkJNa0lzVVVGQk0wSTdRVUZEUVN4aFFVRkxOME1zVDBGQlRDeERRVUZoWXl4TFFVRmlMRU5CUVcxQ1owTXNUVUZCYmtJc1IwRkJORUlzVFVGQk5VSTdPMEZCUlVGMFJDeFhRVUZIZFVRc1NVRkJTQ3hEUVVGUlF5eFRRVUZTTEVOQlFXdENUQ3hYUVVGc1FpeERRVUU0UWl4TFFVRkxOVU1zU1VGQmJrTTdRVUZEUVN4aFFVRkxZU3hwUWtGQlREdEJRVU5JTEV0QmRFZHpRanRCUVhkSGRrSnhReXgzUWtGNFIzVkNMR2REUVhkSFJHaERMRU5CZUVkRExFVkJkMGRGUXl4RFFYaEhSaXhGUVhkSFN6dEJRVU40UWl4aFFVRkxiMElzVlVGQlRDeERRVUZuUW5KQ0xFTkJRV2hDTEVWQlFXMUNReXhEUVVGdVFqdEJRVU5CTEdGQlFVdGpMRlZCUVV3N1FVRkRRU3hoUVVGTFdDeFZRVUZNTzBGQlEwZ3NTMEUxUjNOQ096czdRVUU0UjNaQ05rSXNPRUpCUVRCQ1F5eFpRVUZaTEZWQlFWVnNReXhEUVVGV0xFVkJRV0ZETEVOQlFXSXNSVUZCWjBJN1FVRkRiRVFzWVVGQlMyNUNMRWxCUVV3c1IwRkJXVEJETEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUlzUzBGQmRrSXNRMEZCV2p0QlFVTkJMR0ZCUVVzelF5eEpRVUZNTEVOQlFWVmxMRXRCUVZZc1EwRkJaMEp6UXl4VlFVRm9RaXhIUVVFMlFpd3dRa0ZCTjBJN1FVRkRRU3hoUVVGTGNrUXNTVUZCVEN4RFFVRlZaU3hMUVVGV0xFTkJRV2RDZFVNc1MwRkJhRUlzUjBGQmQwSXNhVUpCUVhoQ08wRkJRMEVzWVVGQlMzUkVMRWxCUVV3c1EwRkJWV1VzUzBGQlZpeERRVUZuUWswc1RVRkJhRUlzUjBGQmVVSklMRWxCUVVrc1NVRkJOMEk3UVVGRFFTeGhRVUZMYkVJc1NVRkJUQ3hEUVVGVlpTeExRVUZXTEVOQlFXZENTeXhMUVVGb1FpeEhRVUYzUWtRc1NVRkJTU3hKUVVFMVFqdEJRVU5CTEdGQlFVdHVRaXhKUVVGTUxFTkJRVlZsTEV0QlFWWXNRMEZCWjBKdFFpeFJRVUZvUWl4SFFVRXlRaXhWUVVFelFqdEJRVU5CTEdGQlFVdHNReXhKUVVGTUxFTkJRVlZsTEV0QlFWWXNRMEZCWjBKdlFpeE5RVUZvUWl4SFFVRjVRaXhMUVVGNlFqdEJRVU5CTEdGQlFVdHVReXhKUVVGTUxFTkJRVlZsTEV0QlFWWXNRMEZCWjBKeFFpeEpRVUZvUWl4SFFVRjFRaXhMUVVGMlFqdEJRVU5CTEdGQlFVdHdReXhKUVVGTUxFTkJRVlZsTEV0QlFWWXNRMEZCWjBJc1YwRkJhRUlzU1VGQkswSXNXVUZCTDBJN1FVRkRRWFJDTEZkQlFVZDFSQ3hKUVVGSUxFTkJRVkZETEZOQlFWSXNRMEZCYTBKTUxGZEJRV3hDTEVOQlFUaENMRXRCUVVzMVF5eEpRVUZ1UXp0QlFVTklMRXRCV0hsQ0xFZEJWM1JDTEZWQlFWVnJRaXhEUVVGV0xFVkJRV0ZETEVOQlFXSXNSVUZCWjBJN1FVRkRhRUlzV1VGQlNTeERRVUZETEV0QlFVdHVRaXhKUVVGV0xFVkJRV2RDTzBGQlExb3NhVUpCUVV0clJDeHZRa0ZCVEN4RFFVRXdRbWhETEVOQlFURkNMRVZCUVRaQ1F5eERRVUUzUWp0QlFVTklMRk5CUmtRc1RVRkhTenRCUVVORUxHbENRVUZMUml4WFFVRk1MRU5CUVdsQ1F5eERRVUZxUWl4RlFVRnZRa01zUTBGQmNFSTdRVUZEU0R0QlFVTktMRXRCYUVselFqczdRVUZyU1haQ2IwTXNZVUZzU1hWQ0xIVkNRV3RKVmp0QlFVTlVMRmxCUVVsNlF5eE5RVUZOTEV0QlFVdGtMRWxCUVdZN1FVRkRRU3haUVVGSll5eEhRVUZLTEVWQlFWTTdRVUZEVEN4blFrRkJTVEJETEZkQlFWZDBSU3hOUVVGTmRVVXNVVUZCVGl4RFFVRmxhRVVzUjBGQlIzVkVMRWxCUVVnc1EwRkJVVU1zVTBGQmRrSXNSVUZCYTBOdVF5eEhRVUZzUXl4RFFVRm1PMEZCUTBFc1owSkJRVWt3UXl4UlFVRktMRVZCUTBrdlJDeEhRVUZIZFVRc1NVRkJTQ3hEUVVGUlF5eFRRVUZTTEVOQlFXdENVeXhYUVVGc1FpeERRVUU0UWpWRExFZEJRVGxDT3p0QlFVVktMR2xDUVVGTFpDeEpRVUZNTEVkQlFWa3NTVUZCV2p0QlFVTklPMEZCUTBRc1dVRkJTWFZDTEZOQlFWTXNTMEZCUzNSQ0xFOUJRV3hDTzBGQlEwRXNXVUZCU1hOQ0xFMUJRVW9zUlVGQldUdEJRVU5TTEdkQ1FVRkpReXhOUVVGTkxFdEJRVXRhTEdkQ1FVRm1PMEZCUTBGWExHMUNRVUZQYjBNc2JVSkJRVkFzUTBGQk1rSXNUVUZCTTBJc1JVRkJiVU51UXl4SlFVRkpSU3hKUVVGMlF6dEJRVU5CU0N4dFFrRkJUMjlETEcxQ1FVRlFMRU5CUVRKQ0xFOUJRVE5DTEVWQlFXOURia01zU1VGQlNVMHNTMEZCZUVNN1FVRkRRVTRzWjBKQlFVbEZMRWxCUVVvc1IwRkJWeXhKUVVGWU8wRkJRMEZHTEdkQ1FVRkpUU3hMUVVGS0xFZEJRVmtzU1VGQldqdEJRVU5CTEdsQ1FVRkxOMElzVDBGQlRDeEhRVUZsTEVsQlFXWTdRVUZEU0R0QlFVTktMRXRCY0VwelFqdEJRWE5LZGtJeVJDeHRRa0YwU25WQ0xESkNRWE5LVGtNc1VVRjBTazBzUlVGelNra3NRMEZCUlN4RFFYUktUanRCUVhWS2RrSkRMR2REUVhaS2RVSXNkME5CZFVwUFF5eE5RWFpLVUN4RlFYVktaU3hEUVVGRkxFTkJka3BxUWpzN1FVRjNTblpDTzBGQlEwRkRMRmxCZWtwMVFpeHZRa0Y1U21KRExFbEJla3BoTEVWQmVVcFFReXhSUVhwS1R5eEZRWGxLUjBNc1VVRjZTa2dzUlVGNVNtRkRMRTlCZWtwaUxFVkJlVXB6UWl4RFFVRkZMRU5CZWtwNFFqdEJRVEJLZGtKRExHdENRVEZLZFVJc01FSkJNRXBRUXl4TlFURktUeXhGUVRCS1EwWXNUMEV4U2tRc1JVRXdTbFVzUTBGQlJTeERRVEZLV2pzN08wRkJORXAyUWpzN096dEJRVWxCUnl4aFFVRlRia0lzV1VGQldTeFZRVUZWYjBJc1IwRkJWaXhGUVVGbE8wRkJRMmhETEdGQlFVdDRSU3hKUVVGTUxFTkJRVlY1UlN4VFFVRldMRWRCUVhOQ1JDeEhRVUYwUWp0QlFVTklMRXRCUmxFc1IwRkZUQ3hWUVVGVlFTeEhRVUZXTEVWQlFXVTdRVUZEWml4WlFVRkpha1FzVTBGQlV5eExRVUZMZEVJc1QwRkJiRUk3UVVGRFFTeFpRVUZKYzBJc1RVRkJTaXhGUVVGWk8wRkJRMUpCTEcxQ1FVRlBiVVFzUjBGQlVDeEhRVUZoUml4SFFVRmlPMEZCUTBFc1owSkJRVWt2UXl4UFFVRlBMRWxCUVZnN1FVRkRRU3huUWtGQlNXdEVMRXRCUVVzc1UwRkJURUVzUlVGQlN5eEhRVUZaTzBGQlEycENiRVFzY1VKQlFVdHRSQ3hQUVVGTUxFZEJRV1VzU1VGQlpqdEJRVU5CYmtRc2NVSkJRVXRhTEdsQ1FVRk1PMEZCUTBGVkxIVkNRVUZQYjBNc2JVSkJRVkFzUTBGQk1rSXNUVUZCTTBJc1JVRkJiVU5uUWl4RlFVRnVRenRCUVVOSUxHRkJTa1E3UVVGTFFYQkVMRzFDUVVGUFV5eG5Ra0ZCVUN4RFFVRjNRaXhOUVVGNFFpeEZRVUZuUXpKRExFVkJRV2hETzBGQlEwRXNhVUpCUVV0b1JDeGpRVUZNTEVOQlFXOUNia01zV1VGQldXOURMRk5CUVZvc1EwRkJjMEpwUkN4UFFVRXhRenRCUVVOSU8wRkJRMG9zUzBFdlMzTkNPenRCUVdsTWRrSTdPenRCUVVkQlF5eGxRWEJNZFVJc2VVSkJiMHhTTzBGQlExaHlSaXhYUVVGSGMwWXNTMEZCU0N4RFFVRlRMRWxCUVZRN1FVRkRTQ3hMUVhSTWMwSTdPenRCUVhkTWRrSTdPenRCUVVkQlF5eFZRVE5NZFVJc2IwSkJNa3hpTzBGQlEwNHNXVUZCU1hwRUxGTkJRVk1zUzBGQlMzUkNMRTlCUVd4Q08wRkJRMEVzV1VGQlNYTkNMRTFCUVVvc1JVRkJXVHRCUVVOU0xHZENRVUZKTUVRc1RVRkJUVEZFTEU5QlFVOHlSQ3hoUVVGcVFqdEJRVU5CTEdkQ1FVRkpSQ3hQUVVGUFFTeEpRVUZKUlN4UlFVRm1MRVZCUTBsR0xFbEJRVWxGTEZGQlFVb3NRMEZCWVVnc1RVRkJZanRCUVVOUU8wRkJRMG9zUzBGc1RYTkNPenM3UVVGdlRYWkNPenM3UVVGSFFVa3NZVUYyVFhWQ0xIVkNRWFZOVmp0QlFVTlVNMFlzVjBGQlIzTkdMRXRCUVVnc1EwRkJVeXhKUVVGVU8wRkJRMEVzWlVGQlR5eEpRVUZRTzBGQlEwZ3NTMEV4VFhOQ096czdRVUUwVFhaQ096czdRVUZIUVUwc1owSkJMMDExUWl3d1FrRXJUVkE3UVVGRFdqVkdMRmRCUVVkelJpeExRVUZJTEVOQlFWTXNTVUZCVkR0QlFVTkJMR1ZCUVU4c1NVRkJVRHRCUVVOSUxFdEJiRTV6UWpzN08wRkJiMDUyUWpzN08wRkJSMEZQTEZWQmRrNTFRaXh2UWtGMVRtSTdRVUZEVGl4WlFVRkpPMEZCUTBFc1owSkJRVWs1Uml4WlFVRlpaMFFzVTBGQldpeERRVUZ6UWl0RExGbEJRVEZDTEVWQlEwa3NUMEZCVHpsR0xFZEJRVWR6Uml4TFFVRklMRU5CUVZNc1NVRkJWQ3hEUVVGUU8wRkJRMG9zWjBKQlFVbDRSQ3hUUVVGVExFdEJRVXQwUWl4UFFVRnNRanRCUVVOQkxHZENRVUZKYzBJc1RVRkJTaXhGUVVGWk8wRkJRMUlzYjBKQlFVa3dSQ3hOUVVGTk1VUXNUMEZCVHpKRUxHRkJRV3BDTzBGQlEwRXNiMEpCUVVsRUxFOUJRVTlCTEVsQlFVbEZMRkZCUVdZc1JVRkRTVVlzU1VGQlNVOHNUMEZCU2l4RFFVRlpReXhKUVVGYUxFTkJRV2xDUXl4SlFVRnFRaXhEUVVGelFsUXNSMEZCZEVJN1FVRkRVRHRCUVVOS0xGTkJWRVFzUTBGVFJTeFBRVUZQVlN4SFFVRlFMRVZCUVZrN1FVRkRWbXhITEdWQlFVZHRSeXhIUVVGSUxFTkJRVTlFTEVkQlFWQTdRVUZEU0R0QlFVTktMRXRCY0U5elFqczdPMEZCYzA5MlFqczdPMEZCUjBGRkxHRkJlazkxUWl4MVFrRjVUMVk3UVVGRFZDeFpRVUZKTzBGQlEwRXNaMEpCUVVseVJ5eFpRVUZaWjBRc1UwRkJXaXhEUVVGelFpdERMRmxCUVRGQ0xFVkJRMGtzVDBGQlR6bEdMRWRCUVVkelJpeExRVUZJTEVOQlFWTXNTVUZCVkN4RFFVRlFPMEZCUTBvc1owSkJRVWw0UkN4VFFVRlRMRXRCUVV0MFFpeFBRVUZzUWp0QlFVTkJMR2RDUVVGSmMwSXNUVUZCU2l4RlFVRlpPMEZCUTFJc2IwSkJRVWt3UkN4TlFVRk5NVVFzVDBGQlR6SkVMR0ZCUVdwQ08wRkJRMEVzYjBKQlFVbEVMRTlCUVU5QkxFbEJRVWxGTEZGQlFXWXNSVUZEU1VZc1NVRkJTVThzVDBGQlNpeERRVUZaVFN4UFFVRmFMRU5CUVc5Q1NpeEpRVUZ3UWl4RFFVRjVRbFFzUjBGQmVrSTdRVUZEVUR0QlFVTktMRk5CVkVRc1EwRlRSU3hQUVVGUFZTeEhRVUZRTEVWQlFWazdRVUZEVm14SExHVkJRVWR0Unl4SFFVRklMRU5CUVU5RUxFZEJRVkE3UVVGRFNEdEJRVU5LTEV0QmRGQnpRanM3TzBGQmQxQjJRanM3T3p0QlFVbEJTU3hqUVRWUWRVSXNjMEpCTkZCWVF5eEhRVFZRVnl4RlFUUlFUanRCUVVOaUxGbEJRVWw2UlN4VFFVRlRMRXRCUVV0MFFpeFBRVUZzUWp0QlFVTkJMRmxCUVVselFpeE5RVUZLTEVWQlFWazdRVUZEVWl4blFrRkJTVEJFTEUxQlFVMHhSQ3hQUVVGUE1rUXNZVUZCYWtJN1FVRkRRU3huUWtGQlNUdEJRVU5CUkN4dlFrRkJTV2RDTEVsQlFVb3NRMEZCVTBRc1IwRkJWRHRCUVVOQkxIRkNRVUZMY2tVc1kwRkJUQ3hEUVVGdlFtNURMRmxCUVZsdlF5eFRRVUZhTEVOQlFYTkNjMFVzV1VGQk1VTTdRVUZEU0N4aFFVaEVMRU5CUjBVc1QwRkJUMUFzUjBGQlVDeEZRVUZaTzBGQlExWlJMSGRDUVVGUmNrVXNTMEZCVWl4RFFVRmpOa1FzUjBGQlpEdEJRVU5JTzBGQlEwbzdRVUZEU2l4TFFYWlJjMEk3T3p0QlFYbFJka0k3T3p0QlFVZEJVeXh6UWtFMVVYVkNMR2REUVRSUlJEdEJRVU5zUWpOSExGZEJRVWR6Uml4TFFVRklMRU5CUVZNc1NVRkJWRHRCUVVOSUxFdEJPVkZ6UWpzN08wRkJaMUoyUWpzN096czdRVUZMUVhOQ0xHOUNRWEpTZFVJc05FSkJjVkpNUXl4TFFYSlNTeXhGUVhGU1JYcERMRkZCY2xKR0xFVkJjVkpaTzBGQlF5OUNMR0ZCUVV0b1JTeFZRVUZNTEVOQlFXZENlVWNzUzBGQmFFSXNTVUZCZVVKNlF5eFJRVUY2UWp0QlFVTklMRXRCZGxKelFqczdPMEZCZVZKMlFqczdPenRCUVVsQlJpeDFRa0UzVW5WQ0xDdENRVFpTUmpKRExFdEJOMUpGTEVWQk5sSkxPMEZCUTNoQ0xHRkJRVXQ2Unl4VlFVRk1MRU5CUVdkQ2VVY3NTMEZCYUVJc1NVRkJlVUlzU1VGQmVrSTdRVUZEU0N4TFFTOVNjMEk3UVVGcFUzWkNNMFVzYTBKQmFsTjFRaXd3UWtGcFUxQXlSU3hMUVdwVFR5eEZRV2xUUVR0QlFVTnVRaXhaUVVGSmVrTXNWMEZCVnl4TFFVRkxhRVVzVlVGQlRDeERRVUZuUW5sSExFdEJRV2hDTEVOQlFXWTdRVUZEUVN4WlFVRkpla01zVVVGQlNpeEZRVU5KUVN4VFFVRlROa0lzU1VGQlZDeERRVUZqTEVsQlFXUXNSVUZCYjBJc1NVRkJjRUlzUlVGQk1FSXNTMEZCUzNwR0xFOUJRVXdzUTBGQllYbEZMRWRCUVhaRE8wRkJRMUFzUzBGeVUzTkNPMEZCZFZOMlFqWkNMRzlDUVhaVGRVSXNPRUpCZFZOSU8wRkJRMmhDTEdWQlFVOHNTVUZCU1M5SExGbEJRVmxuU0N4VFFVRm9RaXhEUVVFd1FpeEpRVUV4UWl4RFFVRlFPMEZCUTBnc1MwRjZVM05DTzBGQk1sTjJRa01zVjBFelUzVkNMSEZDUVRKVFdqdEJRVU5RTEdGQlFVdHNSQ3hUUVVGTU8wRkJRMGdzUzBFM1UzTkNPMEZCSzFOMlFtMUVMR05CTDFOMVFpeHpRa0VyVTFoRExFOUJMMU5YTEVWQksxTkdPMEZCUTJwQ0xGbEJRVWtzUzBGQlN6ZEhMRkZCUVV3c1MwRkJhMEkyUnl4UFFVRjBRaXhGUVVFclFqdEJRVU16UWl4cFFrRkJTemRITEZGQlFVd3NSMEZCWjBJc1EwRkJReXhEUVVGRE5rY3NUMEZCYkVJN1FVRkRRU3hwUWtGQlN6bEdMR2xDUVVGTU8wRkJRMGc3UVVGRFNpeExRWEJVYzBJN1FVRnpWSFpDSzBZc1owSkJkRlIxUWl4M1FrRnpWRlJETEVsQmRGUlRMRVZCYzFSSU8wRkJRMmhDTEZsQlFVa3NRMEZCUXl4TFFVRkxOMGNzU1VGQlRpeEpRVUZqTEVOQlFVTXNTMEZCUzBZc1VVRkJlRUlzUlVGQmEwTTdPMEZCUld4REswY3NZVUZCUzBNc1kwRkJUQ3hEUVVGdlFucElMRlZCUVhCQ08wRkJRMEVzV1VGQlNUQklMR1ZCUVdWMFNDeEhRVUZIZFVnc1RVRkJTQ3hEUVVGVlF5eHRRa0ZCVml4RFFVRTRRa29zU1VGQk9VSXNRMEZCYmtJN1FVRkRRU3haUVVGSlJTeFpRVUZLTEVWQlFXdENPMEZCUTJSQkxIbENRVUZoUnl4dFFrRkJZaXhEUVVGcFF6ZElMRlZCUVdwRExFVkJRVFpEUVN4VlFVRTNReXhGUVVGNVJFa3NSMEZCUnpCSUxGZEJRVWdzUTBGQlpTOUdMRXRCUVhoRkxFVkJRU3RGTTBJc1IwRkJSekJJTEZkQlFVZ3NRMEZCWlRsR0xFMUJRVGxHTzBGQlEwZzdPMEZCUlVRc1dVRkJTU3hEUVVGRExFdEJRVXRzUWl4WlFVRk9MRWxCUTBFc1MwRkJTME1zU1VGQlRDeExRVUZqWml4WFFVRlhLMGdzUjBGRWVrSXNTVUZEWjBNc1MwRkJTeTlITEVsQlFVd3NTMEZCWTJoQ0xGZEJRVmRuU1N4SFFVUjZSQ3hKUVVWQkxFdEJRVXN2Unl4SlFVRk1MRXRCUVdOcVFpeFhRVUZYYVVrc1IwRkdla0lzU1VGRlowTXNTMEZCU3k5SExFbEJRVXdzUzBGQlkyeENMRmRCUVZkclNTeEhRVVo2UkN4SlFVZEJMRXRCUVVzdlJ5eEpRVUZNTEV0QlFXTnVRaXhYUVVGWGJVa3NSMEZJZWtJc1NVRkhaME1zUzBGQlN5OUhMRWxCUVV3c1MwRkJZM0JDTEZkQlFWZHZTU3hIUVVoNlJDeEpRVWxCTEV0QlFVc3ZSeXhGUVVGTUxFdEJRVmx0Unl4TFFVRkxZU3haUVVGTUxFTkJRV3RDZEVjc1MwRktPVUlzU1VGSmRVTXNTMEZCUzFRc1JVRkJUQ3hMUVVGWmEwY3NTMEZCUzJFc1dVRkJUQ3hEUVVGclFuSkhMRTFCU25wRkxFVkJTV2xHTzBGQlF6ZEZPMEZCUTBnN08wRkJSVVE3UVVGRFFTeGhRVUZMYWtJc1NVRkJUQ3hIUVVGWlppeFhRVUZYSzBnc1IwRkJka0k3UVVGRFFTeGhRVUZMTDBjc1NVRkJUQ3hIUVVGWmFFSXNWMEZCVjJkSkxFZEJRWFpDTzBGQlEwRXNZVUZCU3k5SExFbEJRVXdzUjBGQldXcENMRmRCUVZkcFNTeEhRVUYyUWp0QlFVTkJMR0ZCUVVzdlJ5eEpRVUZNTEVkQlFWbHNRaXhYUVVGWGEwa3NSMEZCZGtJN1FVRkRRU3hoUVVGTEwwY3NTVUZCVEN4SFFVRlpia0lzVjBGQlYyMUpMRWRCUVhaQ08wRkJRMEVzWVVGQlN5OUhMRWxCUVV3c1IwRkJXWEJDTEZkQlFWZHZTU3hIUVVGMlFqdEJRVU5CTEdGQlFVc3ZSeXhGUVVGTUxFZEJRVlZ0Unl4TFFVRkxZU3haUVVGTUxFTkJRV3RDZEVjc1MwRkJOVUk3UVVGRFFTeGhRVUZMVkN4RlFVRk1MRWRCUVZWclJ5eExRVUZMWVN4WlFVRk1MRU5CUVd0Q2NrY3NUVUZCTlVJN08wRkJSVUVzV1VGQlNYTkhMRk5CUVZOc1NTeEhRVUZIYlVrc1NVRkJTQ3hEUVVGUlF5eFBRVUZ5UWp0QlFVRkJMRmxCUVRoQ1F5eFRRVUZUY2trc1IwRkJSMjFKTEVsQlFVZ3NRMEZCVVVjc1QwRkJMME03UVVGRFFTeFpRVUZKUXl4TlFVRk5ka2tzUjBGQlIyMUpMRWxCUVVnc1EwRkJVVXNzYVVKQlFXeENPenRCUVVWQlRpeHJRa0ZCVlVzc1IwRkJWanRCUVVOQlJpeHJRa0ZCVlVVc1IwRkJWanM3UVVGRlFTeFpRVUZKTDBVc1dVRkJXWGhFTEVkQlFVZDFSQ3hKUVVGSUxFTkJRVkZETEZOQlFYaENPMEZCUTBFc1dVRkJTV2xHTEVsQlFVazNTU3hYUVVGWEswZ3NSMEZCV0N4SFFVRnBRazhzVFVGQmVrSTdRVUZCUVN4WlFVRnBRMUVzU1VGQlNUbEpMRmRCUVZkblNTeEhRVUZvUkR0QlFVRkJMRmxCUVhGRVpTeEpRVUZKTDBrc1YwRkJWMmxKTEVkQlFYQkZPMEZCUVVFc1dVRkJlVVZsTEVsQlFVbG9TaXhYUVVGWGEwa3NSMEZCV0N4SFFVRnBRazhzVFVGQk9VWTdPMEZCUlVFc1dVRkJTVkVzVlVGQlZYSkdMR0ZCUVdGQkxGVkJRVlZzUXl4TFFVRldMRU5CUVdkQ2QwZ3NWMEZCTjBJc1IwRkJNa05ETEZOQlFWTjJSaXhWUVVGVmJFTXNTMEZCVml4RFFVRm5RbmRJTEZkQlFYcENMRU5CUVRORExFZEJRVzFHTEVOQlFXcEhPMEZCUTBFc1dVRkJTVVVzVlVGQlZYaEdMR0ZCUVdGQkxGVkJRVlZzUXl4TFFVRldMRU5CUVdkQ01rZ3NZVUZCTjBJc1IwRkJOa05HTEZOQlFWTjJSaXhWUVVGVmJFTXNTMEZCVml4RFFVRm5RakpJTEdGQlFYcENMRU5CUVRkRExFZEJRWFZHTEVOQlFYSkhPMEZCUTBFc1lVRkJTM3BJTEZkQlFVd3NRMEZCYVVJc1MwRkJTMUFzUlVGQmRFSXNSVUZCTUVJc1MwRkJTME1zUlVGQkwwSTdRVUZEUVN4WlFVRkpUeXhKUVVGSkxFdEJRVXRzUWl4SlFVRk1MRU5CUVZVeVNTeFhRVUZXTEVkQlFYZENhRUlzVFVGQmFFTTdRVUZEUVN4WlFVRkplRWNzU1VGQlNTeExRVUZMYmtJc1NVRkJUQ3hEUVVGVk5Fa3NXVUZCVml4SFFVRjVRbVFzVFVGQmFrTTdRVUZEUVN4WlFVRkpaU3hQUVVGUk0wZ3NTVUZCU1RkQ0xGZEJRVmNyU0N4SFFVRm9RaXhIUVVGMVFsQXNTMEZCUzJsRExGbEJRVXdzUTBGQmEwSkRMRU5CUVhCRU8wRkJRMEVzV1VGQlNVTXNUMEZCVVRkSUxFbEJRVWs1UWl4WFFVRlhhMGtzUjBGQmFFSXNSMEZCZFVKV0xFdEJRVXRwUXl4WlFVRk1MRU5CUVd0Q1J5eERRVUZ3UkRzN1FVRkZRU3haUVVGSlF5eFhRVUZYZWtvc1IwRkJSMjFKTEVsQlFVZ3NRMEZCVVhWQ0xHRkJRWFpDTzBGQlEwRmlMRzFDUVVGWFdTeFRRVUZUU0N4RFFVRlVMRWRCUVdGbUxFZEJRWGhDTzBGQlEwRlRMRzFDUVVGWFV5eFRRVUZUUkN4RFFVRlVMRWRCUVdGcVFpeEhRVUY0UWpzN1FVRkZRU3haUVVGSmIwSXNTMEZCU3k5S0xGZEJRVmR0U1N4SFFVRllMRWRCUVdsQ1J5eE5RVUZxUWl4SFFVRXdRbXRDTEVsQlFURkNMRWRCUVdsRFVDeFBRVUV4UXp0QlFVRkJMRmxCUVcxRVpTeExRVUZMYUVzc1YwRkJWMjlKTEVkQlFWZ3NSMEZCYVVKTExFMUJRV3BDTEVkQlFUQkNhMElzU1VGQk1VSXNSMEZCYVVOUUxFOUJRWHBHT3p0QlFVVkJMRmxCUVVsaExGTkJRVk1zV1VGQldYQkNMRU5CUVZvc1IwRkJaMElzUjBGQmFFSXNSMEZCYzBJc1EwRkJRME1zUTBGQmRrSXNSMEZCTWtJc1IwRkJNMElzUjBGQmFVTXNRMEZCUTBNc1EwRkJiRU1zUjBGQmMwTXNSMEZCZEVNc1IwRkJORU5ETEVOQlFUVkRMRWRCUVdkRUxFZEJRV2hFTEVkQlFYTkVaU3hGUVVGMFJDeEhRVUV5UkN4SFFVRXpSQ3hIUVVGcFJTeERRVUZEUXl4RlFVRnNSU3hIUVVGMVJTeEhRVUZ3Ump0QlFVTkJMR0ZCUVV0eVNpeEpRVUZNTEVOQlFWVmxMRXRCUVZZc1EwRkJaMElzVjBGQmFFSXNTVUZCSzBKMVNTeE5RVUV2UWp0QlFVTkJMR0ZCUVV0MFNpeEpRVUZNTEVOQlFWVmxMRXRCUVZZc1EwRkJaMElzYlVKQlFXaENMRWxCUVhWRGRVa3NUVUZCZGtNN1FVRkRRU3hoUVVGTGRFb3NTVUZCVEN4RFFVRlZaU3hMUVVGV0xFTkJRV2RDTEd0Q1FVRm9RaXhKUVVGelF5eGpRVUYwUXp0QlFVTkJMR0ZCUVV0bUxFbEJRVXdzUTBGQlZXVXNTMEZCVml4RFFVRm5RaXd3UWtGQmFFSXNTVUZCT0VNc1kwRkJPVU03TzBGQlJVRTdRVUZEUVN4aFFVRkxjMElzVjBGQlRDeERRVUZwUW5kRkxFdEJRVXQyUlN4UFFVRjBRanRCUVVOSU8wRkJhRmh6UWl4RFFVRlVMRU5CUVd4Q096dEJRVzFZUVRsRExGbEJRVmx2UXl4VFFVRmFMRWRCUVhkQ08wRkJRM0JDYVVRc1lVRkJVeXhEUVVSWE8wRkJSWEJDYUVRc1dVRkJVU3hEUVVaWk8wRkJSM0JDUlN4WFFVRlBMRU5CU0dFN1FVRkpjRUp0UlN4clFrRkJZenRCUVVwTkxFTkJRWGhDT3p0QlFVOUJMRWxCUVVseFJDeFhRVUZYTDBvc1dVRkJXV2RFTEZOQlFWb3NSMEZCZDBJN1FVRkRia05uU0N4elFrRkJhMElzUzBGRWFVSTdRVUZGYmtNdlJ5eGxRVUZYTzBGQlJuZENMRU5CUVhaRE96dEJRVXRCTEVsQlFVbHlSQ3hKUVVGSmNVc3NSVUZCU2l4TFFVRlhja3NzU1VGQlNYTkxMRTFCUVc1Q0xFVkJRMGxJTEZOQlFWTTVSeXhUUVVGVUxFZEJRWEZDTEVsQlFYSkNPenRCUVVWS0xFbEJRVWx5UkN4SlFVRkpkVXNzVVVGQlVpeEZRVUZyUWp0QlFVTmtMRkZCUVVsMlN5eEpRVUZKZDBzc1YwRkJTaXhMUVVGdlFuaExMRWxCUVVsNVN5eHZRa0ZCTlVJc1JVRkJhMFE3UVVGRE9VTk9MR2xDUVVGVE1VY3NVVUZCVkN4SFFVRnZRaXhKUVVGd1FqdEJRVU5JTzBGQlEwb3NRMEZLUkN4TlFVdExPMEZCUTBRc1VVRkJTWHBFTEVsQlFVbDNTeXhYUVVGS0xFdEJRVzlDZUVzc1NVRkJTVEJMTEdWQlFUVkNMRVZCUVRaRE8wRkJRM3BEVUN4cFFrRkJVMmhGTEZsQlFWUXNSMEZCZDBJc1NVRkJlRUk3UVVGRFNEdEJRVU5LT3p0QlFVVkVkMFVzVDBGQlQwTXNUMEZCVUN4SFFVRnBRbmhMTEZkQlFXcENJaXdpWm1sc1pTSTZJbmRsWW5acFpYY3RhVzF3YkM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTNMVEl3TVRnZ1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVYRzVjYmlCb2RIUndjem92TDNkM2R5NWpiMk52Y3k1amIyMHZYRzVjYmlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVNCamIzQjVYRzRnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmxibWRwYm1VZ2MyOTFjbU5sSUdOdlpHVWdLSFJvWlNCY0lsTnZablIzWVhKbFhDSXBMQ0JoSUd4cGJXbDBaV1FzWEc0Z2QyOXliR1IzYVdSbExDQnliM2xoYkhSNUxXWnlaV1VzSUc1dmJpMWhjM05wWjI1aFlteGxMQ0J5WlhadlkyRmliR1VnWVc1a0lHNXZiaTFsZUdOc2RYTnBkbVVnYkdsalpXNXpaVnh1SUhSdklIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZiR1ZzZVNCMGJ5QmtaWFpsYkc5d0lHZGhiV1Z6SUc5dUlIbHZkWElnZEdGeVoyVjBJSEJzWVhSbWIzSnRjeTRnV1c5MUlITm9ZV3hzWEc0Z2JtOTBJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52Wm5SM1lYSmxJR1p2Y2lCa1pYWmxiRzl3YVc1bklHOTBhR1Z5SUhOdlpuUjNZWEpsSUc5eUlIUnZiMnh6SUhSb1lYUW5jMXh1SUhWelpXUWdabTl5SUdSbGRtVnNiM0JwYm1jZ1oyRnRaWE11SUZsdmRTQmhjbVVnYm05MElHZHlZVzUwWldRZ2RHOGdjSFZpYkdsemFDd2daR2x6ZEhKcFluVjBaU3hjYmlCemRXSnNhV05sYm5ObExDQmhibVF2YjNJZ2MyVnNiQ0JqYjNCcFpYTWdiMllnUTI5amIzTWdRM0psWVhSdmNpNWNibHh1SUZSb1pTQnpiMlowZDJGeVpTQnZjaUIwYjI5c2N5QnBiaUIwYUdseklFeHBZMlZ1YzJVZ1FXZHlaV1Z0Wlc1MElHRnlaU0JzYVdObGJuTmxaQ3dnYm05MElITnZiR1F1WEc0Z1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVJSEpsYzJWeWRtVnpJR0ZzYkNCeWFXZG9kSE1nYm05MElHVjRjSEpsYzNOc2VTQm5jbUZ1ZEdWa0lIUnZJSGx2ZFM1Y2JseHVJRlJJUlNCVFQwWlVWMEZTUlNCSlV5QlFVazlXU1VSRlJDQmNJa0ZUSUVsVFhDSXNJRmRKVkVoUFZWUWdWMEZTVWtGT1ZGa2dUMFlnUVU1WklFdEpUa1FzSUVWWVVGSkZVMU1nVDFKY2JpQkpUVkJNU1VWRUxDQkpUa05NVlVSSlRrY2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBJRlJJUlNCWFFWSlNRVTVVU1VWVElFOUdJRTFGVWtOSVFVNVVRVUpKVEVsVVdTeGNiaUJHU1ZST1JWTlRJRVpQVWlCQklGQkJVbFJKUTFWTVFWSWdVRlZTVUU5VFJTQkJUa1FnVGs5T1NVNUdVa2xPUjBWTlJVNVVMaUJKVGlCT1R5QkZWa1ZPVkNCVFNFRk1UQ0JVU0VWY2JpQkJWVlJJVDFKVElFOVNJRU5QVUZsU1NVZElWQ0JJVDB4RVJWSlRJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRU5NUVVsTkxDQkVRVTFCUjBWVElFOVNJRTlVU0VWU1hHNGdURWxCUWtsTVNWUlpMQ0JYU0VWVVNFVlNJRWxPSUVGT0lFRkRWRWxQVGlCUFJpQkRUMDVVVWtGRFZDd2dWRTlTVkNCUFVpQlBWRWhGVWxkSlUwVXNJRUZTU1ZOSlRrY2dSbEpQVFN4Y2JpQlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVFQwWlVWMEZTUlNCUFVpQlVTRVVnVlZORklFOVNJRTlVU0VWU0lFUkZRVXhKVGtkVElFbE9YRzRnVkVoRklGTlBSbFJYUVZKRkxseHVJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibWx0Y0c5eWRDQjdJRzFoZERRZ2ZTQm1jbTl0SUNjdUxpOWpiM0psTDNadFlYUm9KenRjYmx4dVkyOXVjM1FnZFhScGJITWdQU0J5WlhGMWFYSmxLQ2N1TGk5amIzSmxMM0JzWVhSbWIzSnRMM1YwYVd4ekp5azdYRzVqYjI1emRDQnplWE1nUFNCeVpYRjFhWEpsS0NjdUxpOWpiM0psTDNCc1lYUm1iM0p0TDBORFUzbHpKeWs3WEc1Y2JteGxkQ0JmYldGME5GOTBaVzF3SUQwZ2JXRjBOQzVqY21WaGRHVW9LVHRjYmx4dWJHVjBJRmRsWWxacFpYZEpiWEJzSUQwZ1kyTXVRMnhoYzNNb2UxeHVJQ0FnSUc1aGJXVTZJRndpVjJWaVZtbGxkMGx0Y0d4Y0lpeGNibHh1SUNBZ0lHTjBiM0lnS0NrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUIwYUdsekxuTmxkRU52Ym5SbGJuUlRhWHBsS0dOakxuTnBlbVVvTXpBd0xDQXlNREFwS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmUlhabGJuUk1hWE4wSUQwZ2UzMDdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkbWx6YVdKc1pTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d1lYSmxiblFnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWthWFlnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXBabkpoYldVZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlzYVhOMFpXNWxjaUE5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2RYQmtZWFJsSUcxaGRISnBlQ0JqWVdOb1pWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bWIzSmpaVlZ3WkdGMFpTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDIwd01DQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjB3TVNBOUlEQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMHdOQ0E5SURBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDIwd05TQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjB4TWlBOUlEQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMHhNeUE5SURBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNjZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOW9JRDBnTUR0Y2JpQWdJQ0FnSUNBZ0x5OWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlgyVjJaVzUwVEdsemRHVnVaWEp6SUQwZ2UzMDdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOTFjR1JoZEdWV2FYTnBZbWxzYVhSNUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5a2FYWXBJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdiR1YwSUdScGRpQTlJSFJvYVhNdVgyUnBkanRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDNacGMybGliR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JwZGk1emRIbHNaUzUyYVhOcFltbHNhWFI1SUQwZ0ozWnBjMmxpYkdVbk8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdsMkxuTjBlV3hsTG5acGMybGlhV3hwZEhrZ1BTQW5hR2xrWkdWdUp6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxsOW1iM0pqWlZWd1pHRjBaU0E5SUhSeWRXVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOTFjR1JoZEdWVGFYcGxJQ2gzTENCb0tTQjdYRzRnSUNBZ0lDQWdJR3hsZENCa2FYWWdQU0IwYUdsekxsOWthWFk3WEc0Z0lDQWdJQ0FnSUdsbUlDaGthWFlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JwZGk1emRIbHNaUzUzYVdSMGFDQTlJSGNnS3lCY0luQjRYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWFl1YzNSNWJHVXVhR1ZwWjJoMElEMGdhQ0FySUZ3aWNIaGNJanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmYVc1cGRFVjJaVzUwSUNncElIdGNiaUFnSUNBZ0lDQWdiR1YwSUdsbWNtRnRaU0E5SUhSb2FYTXVYMmxtY21GdFpUdGNiaUFnSUNBZ0lDQWdhV1lnS0dsbWNtRnRaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdOaWN5QTlJSFJvYVhNdVgxOWxkbVZ1ZEV4cGMzUmxibVZ5Y3l3Z2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCalluTXViRzloWkNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxsOWthWE53WVhSamFFVjJaVzUwS0ZkbFlsWnBaWGRKYlhCc0xrVjJaVzUwVkhsd1pTNU1UMEZFUlVRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05pY3k1bGNuSnZjaUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3htTGw5a2FYTndZWFJqYUVWMlpXNTBLRmRsWWxacFpYZEpiWEJzTGtWMlpXNTBWSGx3WlM1RlVsSlBVaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWnlZVzFsTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWENKc2IyRmtYQ0lzSUdOaWN5NXNiMkZrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtY21GdFpTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtGd2laWEp5YjNKY0lpd2dZMkp6TG1WeWNtOXlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmYVc1cGRGTjBlV3hsSUNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDlrYVhZcElISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2JHVjBJR1JwZGlBOUlIUm9hWE11WDJScGRqdGNiaUFnSUNBZ0lDQWdaR2wyTG5OMGVXeGxMbkJ2YzJsMGFXOXVJRDBnWENKaFluTnZiSFYwWlZ3aU8xeHVJQ0FnSUNBZ0lDQmthWFl1YzNSNWJHVXVZbTkwZEc5dElEMGdYQ0l3Y0hoY0lqdGNiaUFnSUNBZ0lDQWdaR2wyTG5OMGVXeGxMbXhsWm5RZ1BTQmNJakJ3ZUZ3aU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCZmMyVjBUM0JoWTJsMGVTQW9iM0JoWTJsMGVTa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FXWnlZVzFsSUQwZ2RHaHBjeTVmYVdaeVlXMWxPMXh1SUNBZ0lDQWdJQ0JwWmlBb2FXWnlZVzFsSUNZbUlHbG1jbUZ0WlM1emRIbHNaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1p5WVcxbExuTjBlV3hsTG05d1lXTnBkSGtnUFNCdmNHRmphWFI1SUM4Z01qVTFPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjlqY21WaGRHVkViMjBnS0hjc0lHZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGZGxZbFpwWlhkSmJYQnNMbDl3YjJ4NVptbHNiQzVsYm1GaWJHVkVhWFlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyUnBkaUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0prYVhaY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlrYVhZdWMzUjViR1ZiWENJdGQyVmlhMmwwTFc5MlpYSm1iRzkzWENKZElEMGdYQ0poZFhSdlhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlrYVhZdWMzUjViR1ZiWENJdGQyVmlhMmwwTFc5MlpYSm1iRzkzTFhOamNtOXNiR2x1WjF3aVhTQTlJRndpZEc5MVkyaGNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJsbWNtRnRaU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9YQ0pwWm5KaGJXVmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5a2FYWXVZWEJ3Wlc1a1EyaHBiR1FvZEdocGN5NWZhV1p5WVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmxtY21GdFpTNXpkSGxzWlM1M2FXUjBhQ0E5SUZ3aU1UQXdKVndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFXWnlZVzFsTG5OMGVXeGxMbWhsYVdkb2RDQTlJRndpTVRBd0pWd2lPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWkdsMklEMGdkR2hwY3k1ZmFXWnlZVzFsSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2hjSW1sbWNtRnRaVndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoWFpXSldhV1YzU1cxd2JDNWZjRzlzZVdacGJHd3VaVzVoWW14bFFrY3BYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlrYVhZdWMzUjViR1ZiWENKaVlXTnJaM0p2ZFc1a1hDSmRJRDBnWENJalJrWkdYQ0k3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkdsMkxuTjBlV3hsVzF3aVltRmphMmR5YjNWdVpGd2lYU0E5SUZ3aUkwWkdSbHdpTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrYVhZdWMzUjViR1V1YUdWcFoyaDBJRDBnYUNBcklGd2ljSGhjSWp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkdsMkxuTjBlV3hsTG5kcFpIUm9JRDBnZHlBcklGd2ljSGhjSWp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkdsMkxuTjBlV3hsTG05MlpYSm1iRzkzSUQwZ1hDSnpZM0p2Ykd4Y0lqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXWnlZVzFsTG5OMGVXeGxMbUp2Y21SbGNpQTlJRndpYm05dVpWd2lPMXh1WEc0Z0lDQWdJQ0FnSUdOakxtZGhiV1V1WTI5dWRHRnBibVZ5TG1Gd2NHVnVaRU5vYVd4a0tIUm9hWE11WDJScGRpazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzVndaR0YwWlZacGMybGlhV3hwZEhrb0tUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gyTnlaV0YwWlU1aGRHbDJaVU52Ym5SeWIyd2dLSGNzSUdncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkzSmxZWFJsUkc5dEtIY3NJR2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlwYm1sMFUzUjViR1VvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYVc1cGRFVjJaVzUwS0NrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdOeVpXRjBaVVJ2YlVWc1pXMWxiblJKWms1bFpXUmxaRG9nUTBOZlJVUkpWRTlTSUQ4Z1puVnVZM1JwYjI0Z0tIY3NJR2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkdsMklEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlJwZGk1emRIbHNaUzVpWVdOclozSnZkVzVrSUQwZ0ozSm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dNQzQ0S1NjN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJScGRpNXpkSGxzWlM1amIyeHZjaUE5SUNkeVoySW9OVEVzSURVeExDQTFNU2tuTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrYVhZdWMzUjViR1V1YUdWcFoyaDBJRDBnZHlBcklDZHdlQ2M3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlJwZGk1emRIbHNaUzUzYVdSMGFDQTlJR2dnS3lBbmNIZ25PMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWthWFl1YzNSNWJHVXVjRzl6YVhScGIyNGdQU0FuWVdKemIyeDFkR1VuTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrYVhZdWMzUjViR1V1WW05MGRHOXRJRDBnSnpCd2VDYzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUnBkaTV6ZEhsc1pTNXNaV1owSUQwZ0p6QndlQ2M3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlJwZGk1emRIbHNaVnNuZDI5eVpDMTNjbUZ3SjEwZ1BTQW5ZbkpsWVdzdGQyOXlaQ2M3WEc0Z0lDQWdJQ0FnSUdOakxtZGhiV1V1WTI5dWRHRnBibVZ5TG1Gd2NHVnVaRU5vYVd4a0tIUm9hWE11WDJScGRpazdYRzRnSUNBZ2ZTQTZJR1oxYm1OMGFXOXVJQ2gzTENCb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmWkdsMktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlqY21WaGRHVk9ZWFJwZG1WRGIyNTBjbTlzS0hjc0lHZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxVMmw2WlNoM0xDQm9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J5WlcxdmRtVkViMjBnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWkdsMklEMGdkR2hwY3k1ZlpHbDJPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pHbDJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYUdGelEyaHBiR1FnUFNCMWRHbHNjeTVqYjI1MFlXbHVjeWhqWXk1bllXMWxMbU52Ym5SaGFXNWxjaXdnWkdsMktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZWE5EYUdsc1pDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZeTVuWVcxbExtTnZiblJoYVc1bGNpNXlaVzF2ZG1WRGFHbHNaQ2hrYVhZcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlrYVhZZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHeGxkQ0JwWm5KaGJXVWdQU0IwYUdsekxsOXBabkpoYldVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwWm5KaGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqWW5NZ1BTQjBhR2x6TGw5ZlpYWmxiblJNYVhOMFpXNWxjbk03WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBabkpoYldVdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaGNJbXh2WVdSY0lpd2dZMkp6TG14dllXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWnlZVzFsTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb1hDSmxjbkp2Y2x3aUxDQmpZbk11WlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kySnpMbXh2WVdRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkp6TG1WeWNtOXlJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmxtY21GdFpTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ2MyVjBUMjVLVTBOaGJHeGlZV05ySUNoallXeHNZbUZqYXlrZ2UzMHNYRzRnSUNBZ2MyVjBTbUYyWVhOamNtbHdkRWx1ZEdWeVptRmpaVk5qYUdWdFpTQW9jMk5vWlcxbEtTQjdmU3hjYmlBZ0lDQXZMeUJ3Y21sMllYUmxJRzFsZEdodlpGeHVJQ0FnSUd4dllXUkVZWFJoSUNoa1lYUmhMQ0JOU1UxRlZIbHdaU3dnWlc1amIyUnBibWNzSUdKaGMyVlZVa3dwSUh0OUxGeHVJQ0FnSUd4dllXUklWRTFNVTNSeWFXNW5JQ2h6ZEhKcGJtY3NJR0poYzJWVlVrd3BJSHQ5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1RHOWhaQ0JoYmlCVlVreGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2RYSnNYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JHOWhaRlZTVERvZ1EwTmZSVVJKVkU5U0lEOGdablZ1WTNScGIyNGdLSFZ5YkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a2FYWXVhVzV1WlhKVVpYaDBJRDBnZFhKc08xeHVJQ0FnSUgwZ09pQm1kVzVqZEdsdmJpQW9kWEpzS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JwWm5KaGJXVWdQU0IwYUdsekxsOXBabkpoYldVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwWm5KaGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1jbUZ0WlM1emNtTWdQU0IxY213N1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2MyVnNaaUE5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZMklnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmJHOWhaR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxsOTFjR1JoZEdWV2FYTnBZbWxzYVhSNUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1p5WVcxbExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9YQ0pzYjJGa1hDSXNJR05pS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBabkpoYldVdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loY0lteHZZV1JjSWl3Z1kySXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWkdsemNHRjBZMmhGZG1WdWRDaFhaV0pXYVdWM1NXMXdiQzVGZG1WdWRGUjVjR1V1VEU5QlJFbE9SeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UzUnZjQ0JzYjJGa2FXNW5YRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzUnZjRXh2WVdScGJtY2dLQ2tnZTF4dUlDQWdJQ0FnSUNCall5NXNiMmRKUkNnM09EQXdLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1Wc2IyRmtJSFJvWlNCWFpXSldhV1YzWEc0Z0lDQWdJQ292WEc0Z0lDQWdjbVZzYjJGa0lDZ3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHbG1jbUZ0WlNBOUlIUm9hWE11WDJsbWNtRnRaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHbG1jbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIZHBiaUE5SUdsbWNtRnRaUzVqYjI1MFpXNTBWMmx1Wkc5M08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZHBiaUFtSmlCM2FXNHViRzlqWVhScGIyNHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmx1TG14dlkyRjBhVzl1TG5KbGJHOWhaQ2dwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFUmxkR1Z5YldsdVpTQjNhR1YwYUdWeUlIUnZJR2R2SUdKaFkydGNiaUFnSUNBZ0tpOWNiaUFnSUNCallXNUhiMEpoWTJzZ0tDa2dlMXh1SUNBZ0lDQWdJQ0JqWXk1c2IyZEpSQ2czT0RBeEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVSbGRHVnliV2x1WlNCM2FHVjBhR1Z5SUhSdklHZHZJR1p2Y25kaGNtUmNiaUFnSUNBZ0tpOWNiaUFnSUNCallXNUhiMFp2Y25kaGNtUWdLQ2tnZTF4dUlDQWdJQ0FnSUNCall5NXNiMmRKUkNnM09EQXlLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlHZHZJR0poWTJ0Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuYjBKaFkyc2dLQ2tnZTF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRmRsWWxacFpYZEpiWEJzTGw5d2IyeDVabWxzYkM1amJHOXpaVWhwYzNSdmNua3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmpMbXh2WjBsRUtEYzRNRE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdsbWNtRnRaU0E5SUhSb2FYTXVYMmxtY21GdFpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBabkpoYldVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZDJsdUlEMGdhV1p5WVcxbExtTnZiblJsYm5SWGFXNWtiM2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZHBiaUFtSmlCM2FXNHViRzlqWVhScGIyNHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkcGJpNW9hWE4wYjNKNUxtSmhZMnN1WTJGc2JDaDNhVzRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxteHZaeWhsY25JcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR2R2SUdadmNuZGhjbVJjYmlBZ0lDQWdLaTljYmlBZ0lDQm5iMFp2Y25kaGNtUWdLQ2tnZTF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRmRsWWxacFpYZEpiWEJzTGw5d2IyeDVabWxzYkM1amJHOXpaVWhwYzNSdmNua3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmpMbXh2WjBsRUtEYzRNRFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdsbWNtRnRaU0E5SUhSb2FYTXVYMmxtY21GdFpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBabkpoYldVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZDJsdUlEMGdhV1p5WVcxbExtTnZiblJsYm5SWGFXNWtiM2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZHBiaUFtSmlCM2FXNHViRzlqWVhScGIyNHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkcGJpNW9hWE4wYjNKNUxtWnZjbmRoY21RdVkyRnNiQ2gzYVc0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmpMbXh2WnlobGNuSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVsdUlIUm9aU0IzWldKMmFXVjNJR1Y0WldOMWRHbHZiaUIzYVhSb2FXNGdZU0J3WlhKcGIyUWdiMllnYW5NZ2MzUnlhVzVuWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSE4wY2x4dUlDQWdJQ0FxTDF4dUlDQWdJR1YyWVd4MVlYUmxTbE1nS0hOMGNpa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FXWnlZVzFsSUQwZ2RHaHBjeTVmYVdaeVlXMWxPMXh1SUNBZ0lDQWdJQ0JwWmlBb2FXWnlZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2QybHVJRDBnYVdaeVlXMWxMbU52Ym5SbGJuUlhhVzVrYjNjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBiaTVsZG1Gc0tITjBjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaR2x6Y0dGMFkyaEZkbVZ1ZENoWFpXSldhV1YzU1cxd2JDNUZkbVZ1ZEZSNWNHVXVTbE5mUlZaQlRGVkJWRVZFS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvWlhKeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQk1hVzFwZEdWa0lITmpZV3hsWEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwVTJOaGJHVnpVR0ZuWlZSdlJtbDBJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyTXViRzluU1VRb056Z3dOU2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZSb1pTQmlhVzVrYVc1bklHVjJaVzUwWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRYWldKV2FXVjNTVzF3YkM1RmRtVnVkRlI1Y0dWOUlHVjJaVzUwWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWTJGc2JHSmhZMnRjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJGZG1WdWRFeHBjM1JsYm1WeUlDaGxkbVZ1ZEN3Z1kyRnNiR0poWTJzcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlJYWmxiblJNYVhOMFcyVjJaVzUwWFNBOUlHTmhiR3hpWVdOck8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkVaV3hsZEdVZ1pYWmxiblJ6WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRYWldKV2FXVjNTVzF3YkM1RmRtVnVkRlI1Y0dWOUlHVjJaVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaUFvWlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZSWFpsYm5STWFYTjBXMlYyWlc1MFhTQTlJRzUxYkd3N1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5a2FYTndZWFJqYUVWMlpXNTBJQ2hsZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1kyRnNiR0poWTJzZ1BTQjBhR2x6TGw5RmRtVnVkRXhwYzNSYlpYWmxiblJkTzF4dUlDQWdJQ0FnSUNCcFppQW9ZMkZzYkdKaFkyc3BYRzRnSUNBZ0lDQWdJQ0FnSUNCallXeHNZbUZqYXk1allXeHNLSFJvYVhNc0lIUm9hWE1zSUhSb2FYTXVYMmxtY21GdFpTNXpjbU1wTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmWTNKbFlYUmxVbVZ1WkdWeVEyMWtJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlhaV0pXYVdWM1NXMXdiQzVTWlc1a1pYSkRiV1FvZEdocGN5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHUmxjM1J5YjNrZ0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxiVzkyWlVSdmJTZ3BPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnpaWFJXYVhOcFlteGxJQ2gyYVhOcFlteGxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5MmFYTnBZbXhsSUNFOVBTQjJhWE5wWW14bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkyYVhOcFlteGxJRDBnSVNGMmFYTnBZbXhsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsVm1semFXSnBiR2wwZVNncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lIVndaR0YwWlUxaGRISnBlQ0FvYm05a1pTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDJScGRpQjhmQ0FoZEdocGN5NWZkbWx6YVdKc1pTa2djbVYwZFhKdU8xeHVYRzRnSUNBZ0lDQWdJRzV2WkdVdVoyVjBWMjl5YkdSTllYUnlhWGdvWDIxaGREUmZkR1Z0Y0NrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J5Wlc1a1pYSkRZVzFsY21FZ1BTQmpZeTVEWVcxbGNtRXVYMlpwYm1SU1pXNWtaWEpsY2tOaGJXVnlZU2h1YjJSbEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGJtUmxja05oYldWeVlTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5UTJGdFpYSmhMbmR2Y214a1RXRjBjbWw0Vkc5VFkzSmxaVzRvWDIxaGREUmZkR1Z0Y0N3Z1gyMWhkRFJmZEdWdGNDd2dZMk11ZG1semFXSnNaVkpsWTNRdWQybGtkR2dzSUdOakxuWnBjMmxpYkdWU1pXTjBMbWhsYVdkb2RDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVgyWnZjbU5sVlhCa1lYUmxJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5dE1EQWdQVDA5SUY5dFlYUTBYM1JsYlhBdWJUQXdJQ1ltSUhSb2FYTXVYMjB3TVNBOVBUMGdYMjFoZERSZmRHVnRjQzV0TURFZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjB3TkNBOVBUMGdYMjFoZERSZmRHVnRjQzV0TURRZ0ppWWdkR2hwY3k1ZmJUQTFJRDA5UFNCZmJXRjBORjkwWlcxd0xtMHdOU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJURXlJRDA5UFNCZmJXRjBORjkwWlcxd0xtMHhNaUFtSmlCMGFHbHpMbDl0TVRNZ1BUMDlJRjl0WVhRMFgzUmxiWEF1YlRFeklDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkzSUQwOVBTQnViMlJsTGw5amIyNTBaVzUwVTJsNlpTNTNhV1IwYUNBbUppQjBhR2x6TGw5b0lEMDlQU0J1YjJSbExsOWpiMjUwWlc1MFUybDZaUzVvWldsbmFIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUhWd1pHRjBaU0J0WVhSeWFYZ2dZMkZqYUdWY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYlRBd0lEMGdYMjFoZERSZmRHVnRjQzV0TURBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDIwd01TQTlJRjl0WVhRMFgzUmxiWEF1YlRBeE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5dE1EUWdQU0JmYldGME5GOTBaVzF3TG0wd05EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJUQTFJRDBnWDIxaGREUmZkR1Z0Y0M1dE1EVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMHhNaUE5SUY5dFlYUTBYM1JsYlhBdWJURXlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRNVE1nUFNCZmJXRjBORjkwWlcxd0xtMHhNenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkeUE5SUc1dlpHVXVYMk52Ym5SbGJuUlRhWHBsTG5kcFpIUm9PMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOW9JRDBnYm05a1pTNWZZMjl1ZEdWdWRGTnBlbVV1YUdWcFoyaDBPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnpZMkZzWlZnZ1BTQmpZeTUyYVdWM0xsOXpZMkZzWlZnc0lITmpZV3hsV1NBOUlHTmpMblpwWlhjdVgzTmpZV3hsV1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJR1J3Y2lBOUlHTmpMblpwWlhjdVgyUmxkbWxqWlZCcGVHVnNVbUYwYVc4N1hHNWNiaUFnSUNBZ0lDQWdjMk5oYkdWWUlDODlJR1J3Y2p0Y2JpQWdJQ0FnSUNBZ2MyTmhiR1ZaSUM4OUlHUndjanRjYmx4dUlDQWdJQ0FnSUNCc1pYUWdZMjl1ZEdGcGJtVnlJRDBnWTJNdVoyRnRaUzVqYjI1MFlXbHVaWEk3WEc0Z0lDQWdJQ0FnSUd4bGRDQmhJRDBnWDIxaGREUmZkR1Z0Y0M1dE1EQWdLaUJ6WTJGc1pWZ3NJR0lnUFNCZmJXRjBORjkwWlcxd0xtMHdNU3dnWXlBOUlGOXRZWFEwWDNSbGJYQXViVEEwTENCa0lEMGdYMjFoZERSZmRHVnRjQzV0TURVZ0tpQnpZMkZzWlZrN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUc5bVpuTmxkRmdnUFNCamIyNTBZV2x1WlhJZ0ppWWdZMjl1ZEdGcGJtVnlMbk4wZVd4bExuQmhaR1JwYm1kTVpXWjBJRDhnY0dGeWMyVkpiblFvWTI5dWRHRnBibVZ5TG5OMGVXeGxMbkJoWkdScGJtZE1aV1owS1NBNklEQTdYRzRnSUNBZ0lDQWdJR3hsZENCdlptWnpaWFJaSUQwZ1kyOXVkR0ZwYm1WeUlDWW1JR052Ym5SaGFXNWxjaTV6ZEhsc1pTNXdZV1JrYVc1blFtOTBkRzl0SUQ4Z2NHRnljMlZKYm5Rb1kyOXVkR0ZwYm1WeUxuTjBlV3hsTG5CaFpHUnBibWRDYjNSMGIyMHBJRG9nTUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxVMmw2WlNoMGFHbHpMbDkzTENCMGFHbHpMbDlvS1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJSGNnUFNCMGFHbHpMbDlrYVhZdVkyeHBaVzUwVjJsa2RHZ2dLaUJ6WTJGc1pWZzdYRzRnSUNBZ0lDQWdJR3hsZENCb0lEMGdkR2hwY3k1ZlpHbDJMbU5zYVdWdWRFaGxhV2RvZENBcUlITmpZV3hsV1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJR0Z3Y0hnZ1BTQW9keUFxSUY5dFlYUTBYM1JsYlhBdWJUQXdLU0FxSUc1dlpHVXVYMkZ1WTJodmNsQnZhVzUwTG5nN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JoY0hCNUlEMGdLR2dnS2lCZmJXRjBORjkwWlcxd0xtMHdOU2tnS2lCdWIyUmxMbDloYm1Ob2IzSlFiMmx1ZEM1NU8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCMmFXVjNjRzl5ZENBOUlHTmpMblpwWlhjdVgzWnBaWGR3YjNKMFVtVmpkRHRjYmlBZ0lDQWdJQ0FnYjJabWMyVjBXQ0FyUFNCMmFXVjNjRzl5ZEM1NElDOGdaSEJ5TzF4dUlDQWdJQ0FnSUNCdlptWnpaWFJaSUNzOUlIWnBaWGR3YjNKMExua2dMeUJrY0hJN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUhSNElEMGdYMjFoZERSZmRHVnRjQzV0TVRJZ0tpQnpZMkZzWlZnZ0xTQmhjSEI0SUNzZ2IyWm1jMlYwV0N3Z2RIa2dQU0JmYldGME5GOTBaVzF3TG0weE15QXFJSE5qWVd4bFdTQXRJR0Z3Y0hrZ0t5QnZabVp6WlhSWk8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCdFlYUnlhWGdnUFNCY0ltMWhkSEpwZUNoY0lpQXJJR0VnS3lCY0lpeGNJaUFySUMxaUlDc2dYQ0lzWENJZ0t5QXRZeUFySUZ3aUxGd2lJQ3NnWkNBcklGd2lMRndpSUNzZ2RIZ2dLeUJjSWl4Y0lpQXJJQzEwZVNBcklGd2lLVndpTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrYVhZdWMzUjViR1ZiSjNSeVlXNXpabTl5YlNkZElEMGdiV0YwY21sNE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a2FYWXVjM1I1YkdWYkp5MTNaV0pyYVhRdGRISmhibk5tYjNKdEoxMGdQU0J0WVhSeWFYZzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUnBkaTV6ZEhsc1pWc25kSEpoYm5ObWIzSnRMVzl5YVdkcGJpZGRJRDBnSnpCd2VDQXhNREFsSURCd2VDYzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUnBkaTV6ZEhsc1pWc25MWGRsWW10cGRDMTBjbUZ1YzJadmNtMHRiM0pwWjJsdUoxMGdQU0FuTUhCNElERXdNQ1VnTUhCNEp6dGNibHh1SUNBZ0lDQWdJQ0F2THlCamFHRm5ibVZrSUdsbWNtRnRaU0J2Y0dGamFYUjVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTmxkRTl3WVdOcGRIa29ibTlrWlM1dmNHRmphWFI1S1R0Y2JpQWdJQ0I5WEc1OUtUdGNibHh1VjJWaVZtbGxkMGx0Y0d3dVJYWmxiblJVZVhCbElEMGdlMXh1SUNBZ0lFeFBRVVJKVGtjNklEQXNYRzRnSUNBZ1RFOUJSRVZFT2lBeExGeHVJQ0FnSUVWU1VrOVNPaUF5TEZ4dUlDQWdJRXBUWDBWV1FVeFZRVlJGUkRvZ00xeHVmVHRjYmx4dWJHVjBJSEJ2YkhsbWFXeHNJRDBnVjJWaVZtbGxkMGx0Y0d3dVgzQnZiSGxtYVd4c0lEMGdlMXh1SUNBZ0lHUmxkbWxqWlZCcGVHVnNVbUYwYVc4NklHWmhiSE5sTEZ4dUlDQWdJR1Z1WVdKc1pVUnBkam9nWm1Gc2MyVmNibjA3WEc1Y2JtbG1JQ2h6ZVhNdWIzTWdQVDA5SUhONWN5NVBVMTlKVDFNcFhHNGdJQ0FnY0c5c2VXWnBiR3d1Wlc1aFlteGxSR2wySUQwZ2RISjFaVHRjYmx4dWFXWWdLSE41Y3k1cGMwMXZZbWxzWlNrZ2UxeHVJQ0FnSUdsbUlDaHplWE11WW5KdmQzTmxjbFI1Y0dVZ1BUMDlJSE41Y3k1Q1VrOVhVMFZTWDFSWlVFVmZSa2xTUlVaUFdDa2dlMXh1SUNBZ0lDQWdJQ0J3YjJ4NVptbHNiQzVsYm1GaWJHVkNSeUE5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVmVnh1Wld4elpTQjdYRzRnSUNBZ2FXWWdLSE41Y3k1aWNtOTNjMlZ5Vkhsd1pTQTlQVDBnYzNsekxrSlNUMWRUUlZKZlZGbFFSVjlKUlNrZ2UxeHVJQ0FnSUNBZ0lDQndiMng1Wm1sc2JDNWpiRzl6WlVocGMzUnZjbmtnUFNCMGNuVmxPMXh1SUNBZ0lIMWNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCWFpXSldhV1YzU1cxd2JEc2lYWDA9Il19