(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/actions/tween.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var TweenAction = cc.Class({
            name: 'cc.TweenAction',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, props, opts) {
                this._opts = opts = opts || Object.create(null);
                this._props = Object.create(null);
                opts.progress = opts.progress || this.progress;
                if (opts.easing && typeof opts.easing === 'string') {
                    var easingName = opts.easing;
                    opts.easing = cc.easing[easingName];
                    !opts.easing && cc.warnID(1031, easingName);
                }
                var relative = this._opts.relative;
                for (var name in props) {
                    var value = props[name];
                    var easing = void 0, progress = void 0;
                    if (value.value !== undefined && (value.easing || value.progress)) {
                        if (typeof value.easing === 'string') {
                            easing = cc.easing[value.easing];
                            !easing && cc.warnID(1031, value.easing);
                        } else {
                            easing = value.easing;
                        }
                        progress = value.progress;
                        value = value.value;
                    }
                    var isNumber = typeof value === 'number';
                    if (!isNumber && (!value.lerp || relative && !value.add && !value.mul || !value.clone)) {
                        cc.warn('Can not animate ' + name + ' property, because it do not have [lerp, (add|mul), clone] function.');
                        continue;
                    }
                    var prop = Object.create(null);
                    prop.value = value;
                    prop.easing = easing;
                    prop.progress = progress;
                    this._props[name] = prop;
                }
                this._originProps = props;
                this.initWithDuration(duration);
            },
            clone: function clone() {
                var action = new TweenAction(this._duration, this._originProps, this._opts);
                this._cloneDecoration(action);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                var relative = !!this._opts.relative;
                var props = this._props;
                for (var name in props) {
                    var value = target[name];
                    var prop = props[name];
                    if (typeof value === 'number') {
                        prop.start = value;
                        prop.current = value;
                        prop.end = relative ? value + prop.value : prop.value;
                    } else {
                        prop.start = value.clone();
                        prop.current = value.clone();
                        prop.end = relative ? (value.add || value.mul).call(value, prop.value) : prop.value;
                    }
                }
            },
            update: function update(t) {
                var opts = this._opts;
                var easingTime = t;
                if (opts.easing)
                    easingTime = opts.easing(t);
                var target = this.target;
                if (!target)
                    return;
                var props = this._props;
                var progress = this._opts.progress;
                for (var name in props) {
                    var prop = props[name];
                    var time = prop.easing ? prop.easing(t) : easingTime;
                    var current = prop.current = (prop.progress || progress)(prop.start, prop.end, prop.current, time);
                    target[name] = current;
                }
            },
            progress: function progress(start, end, current, t) {
                if (typeof start === 'number') {
                    current = start + (end - start) * t;
                } else {
                    start.lerp(end, t, current);
                }
                return current;
            }
        });
        var SetAction = cc.Class({
            name: 'cc.SetAction',
            extends: cc.ActionInstant,
            ctor: function ctor(props) {
                this._props = {};
                props !== undefined && this.init(props);
            },
            init: function init(props) {
                for (var name in props) {
                    this._props[name] = props[name];
                }
                return true;
            },
            update: function update() {
                var props = this._props;
                var target = this.target;
                for (var name in props) {
                    target[name] = props[name];
                }
            },
            clone: function clone() {
                var action = new SetAction();
                action.init(this._props);
                return action;
            }
        });
        function Tween(target) {
            this._actions = [];
            this._finalAction = null;
            this._target = target;
        }
        Tween.prototype.then = function (other) {
            if (other instanceof cc.Action) {
                this._actions.push(other.clone());
            } else {
                this._actions.push(other._union());
            }
            return this;
        };
        Tween.prototype.target = function (target) {
            this._target = target;
            return this;
        };
        Tween.prototype.start = function () {
            if (!this._target) {
                cc.warn('Please set target to tween first');
                return this;
            }
            if (this._finalAction) {
                cc.director.getActionManager().removeAction(this._finalAction);
            }
            this._finalAction = this._union();
            cc.director.getActionManager().addAction(this._finalAction, this._target, false);
            return this;
        };
        Tween.prototype.stop = function () {
            if (this._finalAction) {
                cc.director.getActionManager().removeAction(this._finalAction);
            }
            return this;
        };
        Tween.prototype.clone = function (target) {
            var action = this._union();
            return cc.tween(target).then(action.clone());
        };
        Tween.prototype.union = function () {
            var action = this._union();
            this._actions.length = 0;
            this._actions.push(action);
            return this;
        };
        Tween.prototype._union = function () {
            var actions = this._actions;
            if (actions.length === 1) {
                actions = actions[0];
            } else {
                actions = cc.sequence(actions);
            }
            return actions;
        };
        var tmp_args = [];
        function wrapAction(action) {
            return function () {
                tmp_args.length = 0;
                for (var l = arguments.length, i = 0; i < l; i++) {
                    var arg = tmp_args[i] = arguments[i];
                    if (arg instanceof Tween) {
                        tmp_args[i] = arg._union();
                    }
                }
                return action.apply(this, tmp_args);
            };
        }
        var actions = {
            to: function to(duration, props, opts) {
                opts = opts || Object.create(null);
                opts.relative = false;
                return new TweenAction(duration, props, opts);
            },
            by: function by(duration, props, opts) {
                opts = opts || Object.create(null);
                opts.relative = true;
                return new TweenAction(duration, props, opts);
            },
            set: function set(props) {
                return new SetAction(props);
            },
            delay: cc.delayTime,
            call: cc.callFunc,
            hide: cc.hide,
            show: cc.show,
            removeSelf: cc.removeSelf,
            sequence: wrapAction(cc.sequence),
            parallel: wrapAction(cc.spawn)
        };
        var previousAsInputActions = {
            repeat: cc.repeat,
            repeatForever: cc.repeatForever,
            reverseTime: cc.reverseTime
        };
        var keys = Object.keys(actions);
        var _loop = function _loop(i) {
            var key = keys[i];
            Tween.prototype[key] = function () {
                var action = actions[key].apply(actions, arguments);
                this._actions.push(action);
                return this;
            };
        };
        for (var i = 0; i < keys.length; i++) {
            _loop(i);
        }
        keys = Object.keys(previousAsInputActions);
        var _loop2 = function _loop2(i) {
            var key = keys[i];
            Tween.prototype[key] = function () {
                var actions = this._actions;
                var action = arguments[arguments.length - 1];
                var length = arguments.length - 1;
                if (action instanceof cc.Tween) {
                    action = action._union();
                } else if (!(action instanceof cc.Action)) {
                    action = actions[actions.length - 1];
                    actions.length -= 1;
                    length += 1;
                }
                var args = [action];
                for (var _i = 0; _i < length; _i++) {
                    args.push(arguments[_i]);
                }
                action = previousAsInputActions[key].apply(this, args);
                actions.push(action);
                return this;
            };
        };
        for (var i = 0; i < keys.length; i++) {
            _loop2(i);
        }
        cc.tween = function (target) {
            return new Tween(target);
        };
        cc.Tween = Tween;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,