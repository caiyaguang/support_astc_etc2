(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/particle/CCParticleSystem.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var macro = require('../core/platform/CCMacro');
        var ParticleAsset = require('./CCParticleAsset');
        var RenderComponent = require('../core/components/CCRenderComponent');
        var codec = require('../compression/ZipUtils');
        var PNGReader = require('./CCPNGReader');
        var tiffReader = require('./CCTIFFReader');
        var textureUtil = require('../core/utils/texture-util');
        var RenderFlow = require('../core/renderer/render-flow');
        var ParticleSimulator = require('./particle-simulator');
        var Material = require('../core/assets/material/CCMaterial');
        var BlendFunc = require('../core/utils/blend-func');
        function getImageFormatByData(imgData) {
            if (imgData.length > 8 && imgData[0] === 137 && imgData[1] === 80 && imgData[2] === 78 && imgData[3] === 71 && imgData[4] === 13 && imgData[5] === 10 && imgData[6] === 26 && imgData[7] === 10) {
                return macro.ImageFormat.PNG;
            }
            if (imgData.length > 2 && (imgData[0] === 73 && imgData[1] === 73 || imgData[0] === 77 && imgData[1] === 77 || imgData[0] === 255 && imgData[1] === 216)) {
                return macro.ImageFormat.TIFF;
            }
            return macro.ImageFormat.UNKNOWN;
        }
        function getParticleComponents(node) {
            var parent = node.parent, comp = node.getComponent(cc.ParticleSystem);
            if (!parent || !comp) {
                return node.getComponentsInChildren(cc.ParticleSystem);
            }
            return getParticleComponents(parent);
        }
        var EmitterMode = cc.Enum({
            GRAVITY: 0,
            RADIUS: 1
        });
        var PositionType = cc.Enum({
            FREE: 0,
            RELATIVE: 1,
            GROUPED: 2
        });
        var properties = {
            preview: {
                default: true,
                editorOnly: true,
                notify: CC_EDITOR && function () {
                    this.resetSystem();
                    if (!this.preview) {
                        this.stopSystem();
                        this.disableRender();
                    }
                    cc.engine.repaintInEditMode();
                },
                animatable: false,
                tooltip: CC_DEV && 'i18n:COMPONENT.particle_system.preview'
            },
            _custom: false,
            custom: {
                get: function get() {
                    return this._custom;
                },
                set: function set(value) {
                    if (CC_EDITOR && !value && !this._file) {
                        return cc.warnID(6000);
                    }
                    if (this._custom !== value) {
                        this._custom = value;
                        this._applyFile();
                        if (CC_EDITOR) {
                            cc.engine.repaintInEditMode();
                        }
                    }
                },
                animatable: false,
                tooltip: CC_DEV && 'i18n:COMPONENT.particle_system.custom'
            },
            _file: {
                default: null,
                type: ParticleAsset
            },
            file: {
                get: function get() {
                    return this._file;
                },
                set: function set(value, force) {
                    if (this._file !== value || CC_EDITOR && force) {
                        this._file = value;
                        if (value) {
                            this._applyFile();
                            if (CC_EDITOR) {
                                cc.engine.repaintInEditMode();
                            }
                        } else {
                            this.custom = true;
                        }
                    }
                },
                animatable: false,
                type: ParticleAsset,
                tooltip: CC_DEV && 'i18n:COMPONENT.particle_system.file'
            },
            _spriteFrame: {
                default: null,
                type: cc.SpriteFrame
            },
            spriteFrame: {
                get: function get() {
                    return this._spriteFrame;
                },
                set: function set(value, force) {
                    var lastSprite = this._renderSpriteFrame;
                    if (CC_EDITOR) {
                        if (!force && lastSprite === value) {
                            return;
                        }
                    } else {
                        if (lastSprite === value) {
                            return;
                        }
                    }
                    this._renderSpriteFrame = value;
                    if (!value || value._uuid) {
                        this._spriteFrame = value;
                    }
                    if ((lastSprite && lastSprite.getTexture()) !== (value && value.getTexture())) {
                        this._texture = null;
                        this._applySpriteFrame(lastSprite);
                    }
                    if (CC_EDITOR) {
                        this.node.emit('spriteframe-changed', this);
                    }
                },
                type: cc.SpriteFrame,
                tooltip: CC_DEV && 'i18n:COMPONENT.particle_system.spriteFrame'
            },
            _texture: {
                default: null,
                type: cc.Texture2D,
                editorOnly: true
            },
            texture: {
                get: function get() {
                    return this._texture;
                },
                set: function set(value) {
                    if (value) {
                        cc.warnID(6017);
                    }
                },
                type: cc.Texture2D,
                tooltip: CC_DEV && 'i18n:COMPONENT.particle_system.texture',
                readonly: true,
                visible: false,
                animatable: false
            },
            particleCount: {
                visible: false,
                get: function get() {
                    return this._simulator.particles.length;
                },
                readonly: true
            },
            _stopped: true,
            stopped: {
                get: function get() {
                    return this._stopped;
                },
                animatable: false,
                visible: false
            },
            playOnLoad: true,
            autoRemoveOnFinish: {
                default: false,
                animatable: false,
                tooltip: CC_DEV && 'i18n:COMPONENT.particle_system.autoRemoveOnFinish'
            },
            active: {
                get: function get() {
                    return this._simulator.active;
                },
                visible: false
            },
            totalParticles: 150,
            duration: -1,
            emissionRate: 10,
            life: 1,
            lifeVar: 0,
            _startColor: null,
            startColor: {
                type: cc.Color,
                get: function get() {
                    return this._startColor;
                },
                set: function set(val) {
                    this._startColor.r = val.r;
                    this._startColor.g = val.g;
                    this._startColor.b = val.b;
                    this._startColor.a = val.a;
                }
            },
            _startColorVar: null,
            startColorVar: {
                type: cc.Color,
                get: function get() {
                    return this._startColorVar;
                },
                set: function set(val) {
                    this._startColorVar.r = val.r;
                    this._startColorVar.g = val.g;
                    this._startColorVar.b = val.b;
                    this._startColorVar.a = val.a;
                }
            },
            _endColor: null,
            endColor: {
                type: cc.Color,
                get: function get() {
                    return this._endColor;
                },
                set: function set(val) {
                    this._endColor.r = val.r;
                    this._endColor.g = val.g;
                    this._endColor.b = val.b;
                    this._endColor.a = val.a;
                }
            },
            _endColorVar: null,
            endColorVar: {
                type: cc.Color,
                get: function get() {
                    return this._endColorVar;
                },
                set: function set(val) {
                    this._endColorVar.r = val.r;
                    this._endColorVar.g = val.g;
                    this._endColorVar.b = val.b;
                    this._endColorVar.a = val.a;
                }
            },
            angle: 90,
            angleVar: 20,
            startSize: 50,
            startSizeVar: 0,
            endSize: 0,
            endSizeVar: 0,
            startSpin: 0,
            startSpinVar: 0,
            endSpin: 0,
            endSpinVar: 0,
            sourcePos: cc.Vec2.ZERO,
            posVar: cc.Vec2.ZERO,
            _positionType: {
                default: PositionType.FREE,
                formerlySerializedAs: 'positionType'
            },
            positionType: {
                type: PositionType,
                get: function get() {
                    return this._positionType;
                },
                set: function set(val) {
                    var material = this.getMaterial(0);
                    if (material) {
                        material.define('_USE_MODEL', val !== PositionType.FREE);
                    }
                    this._positionType = val;
                }
            },
            emitterMode: {
                default: EmitterMode.GRAVITY,
                type: EmitterMode
            },
            gravity: cc.Vec2.ZERO,
            speed: 180,
            speedVar: 50,
            tangentialAccel: 80,
            tangentialAccelVar: 0,
            radialAccel: 0,
            radialAccelVar: 0,
            rotationIsDir: false,
            startRadius: 0,
            startRadiusVar: 0,
            endRadius: 0,
            endRadiusVar: 0,
            rotatePerS: 0,
            rotatePerSVar: 0
        };
        var ParticleSystem = cc.Class({
            name: 'cc.ParticleSystem',
            extends: RenderComponent,
            mixins: [BlendFunc],
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.renderers/ParticleSystem',
                inspector: 'packages://inspector/inspectors/comps/particle-system.js',
                playOnFocus: true,
                executeInEditMode: true
            },
            ctor: function ctor() {
                this._previewTimer = null;
                this._focused = false;
                this._simulator = new ParticleSimulator(this);
                this._startColor = cc.color(255, 255, 255, 255);
                this._startColorVar = cc.color(0, 0, 0, 0);
                this._endColor = cc.color(255, 255, 255, 0);
                this._endColorVar = cc.color(0, 0, 0, 0);
                this._renderSpriteFrame = null;
            },
            properties: properties,
            statics: {
                DURATION_INFINITY: -1,
                START_SIZE_EQUAL_TO_END_SIZE: -1,
                START_RADIUS_EQUAL_TO_END_RADIUS: -1,
                EmitterMode: EmitterMode,
                PositionType: PositionType,
                _PNGReader: PNGReader,
                _TIFFReader: tiffReader
            },
            onFocusInEditor: CC_EDITOR && function () {
                this._focused = true;
                var components = getParticleComponents(this.node);
                for (var i = 0; i < components.length; ++i) {
                    components[i]._startPreview();
                }
            },
            onLostFocusInEditor: CC_EDITOR && function () {
                this._focused = false;
                var components = getParticleComponents(this.node);
                for (var i = 0; i < components.length; ++i) {
                    components[i]._stopPreview();
                }
            },
            _startPreview: CC_EDITOR && function () {
                if (this.preview) {
                    this.resetSystem();
                }
            },
            _stopPreview: CC_EDITOR && function () {
                if (this.preview) {
                    this.resetSystem();
                    this.stopSystem();
                    this.disableRender();
                    cc.engine.repaintInEditMode();
                }
                if (this._previewTimer) {
                    clearInterval(this._previewTimer);
                }
            },
            _convertTextureToSpriteFrame: CC_EDITOR && function () {
                if (this._spriteFrame) {
                    return;
                }
                var texture = this.texture;
                if (!texture || !texture._uuid) {
                    return;
                }
                var _this = this;
                Editor.assetdb.queryMetaInfoByUuid(texture._uuid, function (err, metaInfo) {
                    if (err)
                        return Editor.error(err);
                    var meta = JSON.parse(metaInfo.json);
                    if (meta.type === 'raw') {
                        var NodeUtils = Editor.require('app://editor/page/scene-utils/utils/node');
                        var nodePath = NodeUtils.getNodePath(_this.node);
                        return Editor.warn('The texture ' + metaInfo.assetUrl + ' used by particle ' + nodePath + ' does not contain any SpriteFrame, please set the texture type to Sprite and reassign the SpriteFrame to the particle component.');
                    } else {
                        var Url = require('fire-url');
                        var name = Url.basenameNoExt(metaInfo.assetPath);
                        var uuid = meta.subMetas[name].uuid;
                        cc.AssetLibrary.loadAsset(uuid, function (err, sp) {
                            if (err)
                                return Editor.error(err);
                            _this._texture = null;
                            _this.spriteFrame = sp;
                        });
                    }
                });
            },
            __preload: function __preload() {
                if (CC_EDITOR) {
                    this._convertTextureToSpriteFrame();
                }
                if (this._custom && this.spriteFrame && !this._renderSpriteFrame) {
                    this._applySpriteFrame(this.spriteFrame);
                } else if (this._file) {
                    if (this._custom) {
                        var missCustomTexture = !this._texture;
                        if (missCustomTexture) {
                            this._applyFile();
                        }
                    } else {
                        this._applyFile();
                    }
                }
                if (!CC_EDITOR || cc.engine.isPlaying) {
                    if (this.playOnLoad) {
                        this.resetSystem();
                    }
                }
                if (CC_EDITOR && !(this._startColor instanceof cc.Color)) {
                    this._startColor = cc.color(this._startColor);
                    this._startColorVar = cc.color(this._startColorVar);
                    this._endColor = cc.color(this._endColor);
                    this._endColorVar = cc.color(this._endColorVar);
                }
            },
            onEnable: function onEnable() {
                this._super();
                this.node._renderFlag &= ~RenderFlow.FLAG_RENDER;
                this._activateMaterial();
            },
            onDestroy: function onDestroy() {
                if (this.autoRemoveOnFinish) {
                    this.autoRemoveOnFinish = false;
                }
                if (this._buffer) {
                    this._buffer.destroy();
                    this._buffer = null;
                }
                this._ia = null;
                this._simulator._uvFilled = 0;
                this._super();
            },
            lateUpdate: function lateUpdate(dt) {
                if (!this._simulator.finished && this._ia) {
                    this._simulator.step(dt);
                }
            },
            addParticle: function addParticle() {
            },
            stopSystem: function stopSystem() {
                this._stopped = true;
                this._simulator.stop();
            },
            resetSystem: function resetSystem() {
                this._stopped = false;
                this._simulator.reset();
                this._activateMaterial();
            },
            isFull: function isFull() {
                return this.particleCount >= this.totalParticles;
            },
            setTextureWithRect: function setTextureWithRect(texture, rect) {
                if (texture instanceof cc.Texture2D) {
                    this.spriteFrame = new cc.SpriteFrame(texture, rect);
                }
            },
            _applyFile: function _applyFile() {
                var file = this._file;
                if (file) {
                    var self = this;
                    cc.loader.load(file.nativeUrl, function (err, content) {
                        if (err || !content) {
                            cc.errorID(6029);
                            return;
                        }
                        if (!self.isValid) {
                            return;
                        }
                        self._plistFile = file.nativeUrl;
                        if (!self._custom) {
                            self._initWithDictionary(content);
                        }
                        if (!self._spriteFrame) {
                            if (file.spriteFrame) {
                                self.spriteFrame = file.spriteFrame;
                            } else if (self._custom) {
                                self._initTextureWithDictionary(content);
                            }
                        } else if (!self._renderSpriteFrame && self._spriteFrame) {
                            self._applySpriteFrame(self.spriteFrame);
                        }
                    });
                }
            },
            _initTextureWithDictionary: function _initTextureWithDictionary(dict) {
                var imgPath = cc.path.changeBasename(this._plistFile, dict['textureFileName'] || '');
                if (dict['textureFileName']) {
                    textureUtil.loadImage(imgPath, function (error, texture) {
                        if (error) {
                            dict['textureFileName'] = undefined;
                            this._initTextureWithDictionary(dict);
                        } else {
                            this.spriteFrame = new cc.SpriteFrame(texture);
                        }
                    }, this);
                } else if (dict['textureImageData']) {
                    var textureData = dict['textureImageData'];
                    if (textureData && textureData.length > 0) {
                        var tex = cc.loader.getRes(imgPath);
                        if (!tex) {
                            var buffer = codec.unzipBase64AsArray(textureData, 1);
                            if (!buffer) {
                                cc.logID(6030);
                                return false;
                            }
                            var imageFormat = getImageFormatByData(buffer);
                            if (imageFormat !== macro.ImageFormat.TIFF && imageFormat !== macro.ImageFormat.PNG) {
                                cc.logID(6031);
                                return false;
                            }
                            var canvasObj = document.createElement('canvas');
                            if (imageFormat === macro.ImageFormat.PNG) {
                                var myPngObj = new PNGReader(buffer);
                                myPngObj.render(canvasObj);
                            } else {
                                tiffReader.parseTIFF(buffer, canvasObj);
                            }
                            tex = textureUtil.cacheImage(imgPath, canvasObj);
                        }
                        if (!tex)
                            cc.logID(6032);
                        this.spriteFrame = new cc.SpriteFrame(tex);
                    } else {
                        return false;
                    }
                }
                return true;
            },
            _initWithDictionary: function _initWithDictionary(dict) {
                this.totalParticles = parseInt(dict['maxParticles'] || 0);
                this.life = parseFloat(dict['particleLifespan'] || 0);
                this.lifeVar = parseFloat(dict['particleLifespanVariance'] || 0);
                var _tempEmissionRate = dict['emissionRate'];
                if (_tempEmissionRate) {
                    this.emissionRate = _tempEmissionRate;
                } else {
                    this.emissionRate = Math.min(this.totalParticles / this.life, Number.MAX_VALUE);
                }
                this.duration = parseFloat(dict['duration'] || 0);
                this.srcBlendFactor = parseInt(dict['blendFuncSource'] || macro.SRC_ALPHA);
                this.dstBlendFactor = parseInt(dict['blendFuncDestination'] || macro.ONE_MINUS_SRC_ALPHA);
                var locStartColor = this._startColor;
                locStartColor.r = parseFloat(dict['startColorRed'] || 0) * 255;
                locStartColor.g = parseFloat(dict['startColorGreen'] || 0) * 255;
                locStartColor.b = parseFloat(dict['startColorBlue'] || 0) * 255;
                locStartColor.a = parseFloat(dict['startColorAlpha'] || 0) * 255;
                var locStartColorVar = this._startColorVar;
                locStartColorVar.r = parseFloat(dict['startColorVarianceRed'] || 0) * 255;
                locStartColorVar.g = parseFloat(dict['startColorVarianceGreen'] || 0) * 255;
                locStartColorVar.b = parseFloat(dict['startColorVarianceBlue'] || 0) * 255;
                locStartColorVar.a = parseFloat(dict['startColorVarianceAlpha'] || 0) * 255;
                var locEndColor = this._endColor;
                locEndColor.r = parseFloat(dict['finishColorRed'] || 0) * 255;
                locEndColor.g = parseFloat(dict['finishColorGreen'] || 0) * 255;
                locEndColor.b = parseFloat(dict['finishColorBlue'] || 0) * 255;
                locEndColor.a = parseFloat(dict['finishColorAlpha'] || 0) * 255;
                var locEndColorVar = this._endColorVar;
                locEndColorVar.r = parseFloat(dict['finishColorVarianceRed'] || 0) * 255;
                locEndColorVar.g = parseFloat(dict['finishColorVarianceGreen'] || 0) * 255;
                locEndColorVar.b = parseFloat(dict['finishColorVarianceBlue'] || 0) * 255;
                locEndColorVar.a = parseFloat(dict['finishColorVarianceAlpha'] || 0) * 255;
                this.startSize = parseFloat(dict['startParticleSize'] || 0);
                this.startSizeVar = parseFloat(dict['startParticleSizeVariance'] || 0);
                this.endSize = parseFloat(dict['finishParticleSize'] || 0);
                this.endSizeVar = parseFloat(dict['finishParticleSizeVariance'] || 0);
                this.positionType = parseFloat(dict['positionType'] || PositionType.RELATIVE);
                this.sourcePos.x = 0;
                this.sourcePos.y = 0;
                this.posVar.x = parseFloat(dict['sourcePositionVariancex'] || 0);
                this.posVar.y = parseFloat(dict['sourcePositionVariancey'] || 0);
                this.angle = parseFloat(dict['angle'] || 0);
                this.angleVar = parseFloat(dict['angleVariance'] || 0);
                this.startSpin = parseFloat(dict['rotationStart'] || 0);
                this.startSpinVar = parseFloat(dict['rotationStartVariance'] || 0);
                this.endSpin = parseFloat(dict['rotationEnd'] || 0);
                this.endSpinVar = parseFloat(dict['rotationEndVariance'] || 0);
                this.emitterMode = parseInt(dict['emitterType'] || EmitterMode.GRAVITY);
                if (this.emitterMode === EmitterMode.GRAVITY) {
                    this.gravity.x = parseFloat(dict['gravityx'] || 0);
                    this.gravity.y = parseFloat(dict['gravityy'] || 0);
                    this.speed = parseFloat(dict['speed'] || 0);
                    this.speedVar = parseFloat(dict['speedVariance'] || 0);
                    this.radialAccel = parseFloat(dict['radialAcceleration'] || 0);
                    this.radialAccelVar = parseFloat(dict['radialAccelVariance'] || 0);
                    this.tangentialAccel = parseFloat(dict['tangentialAcceleration'] || 0);
                    this.tangentialAccelVar = parseFloat(dict['tangentialAccelVariance'] || 0);
                    var locRotationIsDir = dict['rotationIsDir'] || '';
                    if (locRotationIsDir !== null) {
                        locRotationIsDir = locRotationIsDir.toString().toLowerCase();
                        this.rotationIsDir = locRotationIsDir === 'true' || locRotationIsDir === '1';
                    } else {
                        this.rotationIsDir = false;
                    }
                } else if (this.emitterMode === EmitterMode.RADIUS) {
                    this.startRadius = parseFloat(dict['maxRadius'] || 0);
                    this.startRadiusVar = parseFloat(dict['maxRadiusVariance'] || 0);
                    this.endRadius = parseFloat(dict['minRadius'] || 0);
                    this.endRadiusVar = parseFloat(dict['minRadiusVariance'] || 0);
                    this.rotatePerS = parseFloat(dict['rotatePerSecond'] || 0);
                    this.rotatePerSVar = parseFloat(dict['rotatePerSecondVariance'] || 0);
                } else {
                    cc.warnID(6009);
                    return false;
                }
                this._initTextureWithDictionary(dict);
                return true;
            },
            _onTextureLoaded: function _onTextureLoaded() {
                this._texture = this._renderSpriteFrame.getTexture();
                this._simulator.updateUVs(true);
                this._activateMaterial();
            },
            _applySpriteFrame: function _applySpriteFrame(oldFrame) {
                if (oldFrame && oldFrame.off) {
                    oldFrame.off('load', this._onTextureLoaded, this);
                }
                var spriteFrame = this._renderSpriteFrame = this._renderSpriteFrame || this._spriteFrame;
                if (spriteFrame) {
                    if (spriteFrame.textureLoaded()) {
                        this._onTextureLoaded(null);
                    } else {
                        spriteFrame.once('load', this._onTextureLoaded, this);
                        spriteFrame.ensureLoadTexture();
                    }
                }
            },
            _activateMaterial: function _activateMaterial() {
                if (!this._texture || !this._texture.loaded) {
                    this.markForCustomIARender(false);
                    if (this._renderSpriteFrame) {
                        this._applySpriteFrame();
                    }
                    return;
                }
                if (!this._ia) {
                    ParticleSystem._assembler.createIA(this);
                }
                var material = this.sharedMaterials[0];
                if (!material) {
                    material = Material.getInstantiatedBuiltinMaterial('2d-sprite', this);
                } else {
                    material = Material.getInstantiatedMaterial(material, this);
                }
                material.define('_USE_MODEL', this._positionType !== PositionType.FREE);
                material.setProperty('texture', this._texture);
                this.setMaterial(0, material);
                this.markForCustomIARender(true);
            },
            _finishedSimulation: function _finishedSimulation() {
                if (CC_EDITOR) {
                    if (this.preview && this._focused && !this.active && !cc.engine.isPlaying) {
                        this.resetSystem();
                    }
                    return;
                }
                this.resetSystem();
                this.stopSystem();
                this.disableRender();
                if (this.autoRemoveOnFinish && this._stopped) {
                    this.node.destroy();
                }
            }
        });
        cc.ParticleSystem = module.exports = ParticleSystem;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDUGFydGljbGVTeXN0ZW0uanMiLCIvVXNlcnMvenpmMjAxOS9EZXNrdG9wL2RldmVsb3BtZW50L3N1cHBvcnRfYXN0Yy9lbmdpbmUvY29jb3MyZC9wYXJ0aWNsZS9DQ1BhcnRpY2xlU3lzdGVtLmpzIl0sIm5hbWVzIjpbIm1hY3JvIiwicmVxdWlyZSIsIlBhcnRpY2xlQXNzZXQiLCJSZW5kZXJDb21wb25lbnQiLCJjb2RlYyIsIlBOR1JlYWRlciIsInRpZmZSZWFkZXIiLCJ0ZXh0dXJlVXRpbCIsIlJlbmRlckZsb3ciLCJQYXJ0aWNsZVNpbXVsYXRvciIsIk1hdGVyaWFsIiwiQmxlbmRGdW5jIiwiZ2V0SW1hZ2VGb3JtYXRCeURhdGEiLCJpbWdEYXRhIiwibGVuZ3RoIiwiSW1hZ2VGb3JtYXQiLCJQTkciLCJUSUZGIiwiVU5LTk9XTiIsImdldFBhcnRpY2xlQ29tcG9uZW50cyIsIm5vZGUiLCJwYXJlbnQiLCJjb21wIiwiZ2V0Q29tcG9uZW50IiwiY2MiLCJQYXJ0aWNsZVN5c3RlbSIsImdldENvbXBvbmVudHNJbkNoaWxkcmVuIiwiRW1pdHRlck1vZGUiLCJFbnVtIiwiR1JBVklUWSIsIlJBRElVUyIsIlBvc2l0aW9uVHlwZSIsIkZSRUUiLCJSRUxBVElWRSIsIkdST1VQRUQiLCJwcm9wZXJ0aWVzIiwicHJldmlldyIsImRlZmF1bHQiLCJlZGl0b3JPbmx5Iiwibm90aWZ5IiwiQ0NfRURJVE9SIiwicmVzZXRTeXN0ZW0iLCJzdG9wU3lzdGVtIiwiZGlzYWJsZVJlbmRlciIsImVuZ2luZSIsInJlcGFpbnRJbkVkaXRNb2RlIiwiYW5pbWF0YWJsZSIsInRvb2x0aXAiLCJDQ19ERVYiLCJfY3VzdG9tIiwiY3VzdG9tIiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJfZmlsZSIsIndhcm5JRCIsIl9hcHBseUZpbGUiLCJ0eXBlIiwiZmlsZSIsImZvcmNlIiwiX3Nwcml0ZUZyYW1lIiwiU3ByaXRlRnJhbWUiLCJzcHJpdGVGcmFtZSIsImxhc3RTcHJpdGUiLCJfcmVuZGVyU3ByaXRlRnJhbWUiLCJfdXVpZCIsImdldFRleHR1cmUiLCJfdGV4dHVyZSIsIl9hcHBseVNwcml0ZUZyYW1lIiwiZW1pdCIsIlRleHR1cmUyRCIsInRleHR1cmUiLCJyZWFkb25seSIsInZpc2libGUiLCJwYXJ0aWNsZUNvdW50IiwiX3NpbXVsYXRvciIsInBhcnRpY2xlcyIsIl9zdG9wcGVkIiwic3RvcHBlZCIsInBsYXlPbkxvYWQiLCJhdXRvUmVtb3ZlT25GaW5pc2giLCJhY3RpdmUiLCJ0b3RhbFBhcnRpY2xlcyIsImR1cmF0aW9uIiwiZW1pc3Npb25SYXRlIiwibGlmZSIsImxpZmVWYXIiLCJfc3RhcnRDb2xvciIsInN0YXJ0Q29sb3IiLCJDb2xvciIsInZhbCIsInIiLCJnIiwiYiIsImEiLCJfc3RhcnRDb2xvclZhciIsInN0YXJ0Q29sb3JWYXIiLCJfZW5kQ29sb3IiLCJlbmRDb2xvciIsIl9lbmRDb2xvclZhciIsImVuZENvbG9yVmFyIiwiYW5nbGUiLCJhbmdsZVZhciIsInN0YXJ0U2l6ZSIsInN0YXJ0U2l6ZVZhciIsImVuZFNpemUiLCJlbmRTaXplVmFyIiwic3RhcnRTcGluIiwic3RhcnRTcGluVmFyIiwiZW5kU3BpbiIsImVuZFNwaW5WYXIiLCJzb3VyY2VQb3MiLCJWZWMyIiwiWkVSTyIsInBvc1ZhciIsIl9wb3NpdGlvblR5cGUiLCJmb3JtZXJseVNlcmlhbGl6ZWRBcyIsInBvc2l0aW9uVHlwZSIsIm1hdGVyaWFsIiwiZ2V0TWF0ZXJpYWwiLCJkZWZpbmUiLCJlbWl0dGVyTW9kZSIsImdyYXZpdHkiLCJzcGVlZCIsInNwZWVkVmFyIiwidGFuZ2VudGlhbEFjY2VsIiwidGFuZ2VudGlhbEFjY2VsVmFyIiwicmFkaWFsQWNjZWwiLCJyYWRpYWxBY2NlbFZhciIsInJvdGF0aW9uSXNEaXIiLCJzdGFydFJhZGl1cyIsInN0YXJ0UmFkaXVzVmFyIiwiZW5kUmFkaXVzIiwiZW5kUmFkaXVzVmFyIiwicm90YXRlUGVyUyIsInJvdGF0ZVBlclNWYXIiLCJDbGFzcyIsIm5hbWUiLCJleHRlbmRzIiwibWl4aW5zIiwiZWRpdG9yIiwibWVudSIsImluc3BlY3RvciIsInBsYXlPbkZvY3VzIiwiZXhlY3V0ZUluRWRpdE1vZGUiLCJjdG9yIiwiX3ByZXZpZXdUaW1lciIsIl9mb2N1c2VkIiwiY29sb3IiLCJzdGF0aWNzIiwiRFVSQVRJT05fSU5GSU5JVFkiLCJTVEFSVF9TSVpFX0VRVUFMX1RPX0VORF9TSVpFIiwiU1RBUlRfUkFESVVTX0VRVUFMX1RPX0VORF9SQURJVVMiLCJfUE5HUmVhZGVyIiwiX1RJRkZSZWFkZXIiLCJvbkZvY3VzSW5FZGl0b3IiLCJjb21wb25lbnRzIiwiaSIsIl9zdGFydFByZXZpZXciLCJvbkxvc3RGb2N1c0luRWRpdG9yIiwiX3N0b3BQcmV2aWV3IiwiY2xlYXJJbnRlcnZhbCIsIl9jb252ZXJ0VGV4dHVyZVRvU3ByaXRlRnJhbWUiLCJfdGhpcyIsIkVkaXRvciIsImFzc2V0ZGIiLCJxdWVyeU1ldGFJbmZvQnlVdWlkIiwiZXJyIiwibWV0YUluZm8iLCJlcnJvciIsIm1ldGEiLCJKU09OIiwicGFyc2UiLCJqc29uIiwiTm9kZVV0aWxzIiwibm9kZVBhdGgiLCJnZXROb2RlUGF0aCIsIndhcm4iLCJhc3NldFVybCIsIlVybCIsImJhc2VuYW1lTm9FeHQiLCJhc3NldFBhdGgiLCJ1dWlkIiwic3ViTWV0YXMiLCJBc3NldExpYnJhcnkiLCJsb2FkQXNzZXQiLCJzcCIsIl9fcHJlbG9hZCIsIm1pc3NDdXN0b21UZXh0dXJlIiwiaXNQbGF5aW5nIiwib25FbmFibGUiLCJfc3VwZXIiLCJfcmVuZGVyRmxhZyIsIkZMQUdfUkVOREVSIiwiX2FjdGl2YXRlTWF0ZXJpYWwiLCJvbkRlc3Ryb3kiLCJfYnVmZmVyIiwiZGVzdHJveSIsIl9pYSIsIl91dkZpbGxlZCIsImxhdGVVcGRhdGUiLCJkdCIsImZpbmlzaGVkIiwic3RlcCIsImFkZFBhcnRpY2xlIiwic3RvcCIsInJlc2V0IiwiaXNGdWxsIiwic2V0VGV4dHVyZVdpdGhSZWN0IiwicmVjdCIsInNlbGYiLCJsb2FkZXIiLCJsb2FkIiwibmF0aXZlVXJsIiwiY29udGVudCIsImVycm9ySUQiLCJpc1ZhbGlkIiwiX3BsaXN0RmlsZSIsIl9pbml0V2l0aERpY3Rpb25hcnkiLCJfaW5pdFRleHR1cmVXaXRoRGljdGlvbmFyeSIsImRpY3QiLCJpbWdQYXRoIiwicGF0aCIsImNoYW5nZUJhc2VuYW1lIiwibG9hZEltYWdlIiwidW5kZWZpbmVkIiwidGV4dHVyZURhdGEiLCJ0ZXgiLCJnZXRSZXMiLCJidWZmZXIiLCJ1bnppcEJhc2U2NEFzQXJyYXkiLCJsb2dJRCIsImltYWdlRm9ybWF0IiwiY2FudmFzT2JqIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwibXlQbmdPYmoiLCJyZW5kZXIiLCJwYXJzZVRJRkYiLCJjYWNoZUltYWdlIiwicGFyc2VJbnQiLCJwYXJzZUZsb2F0IiwiX3RlbXBFbWlzc2lvblJhdGUiLCJNYXRoIiwibWluIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwic3JjQmxlbmRGYWN0b3IiLCJTUkNfQUxQSEEiLCJkc3RCbGVuZEZhY3RvciIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJsb2NTdGFydENvbG9yIiwibG9jU3RhcnRDb2xvclZhciIsImxvY0VuZENvbG9yIiwibG9jRW5kQ29sb3JWYXIiLCJ4IiwieSIsImxvY1JvdGF0aW9uSXNEaXIiLCJ0b1N0cmluZyIsInRvTG93ZXJDYXNlIiwiX29uVGV4dHVyZUxvYWRlZCIsInVwZGF0ZVVWcyIsIm9sZEZyYW1lIiwib2ZmIiwidGV4dHVyZUxvYWRlZCIsIm9uY2UiLCJlbnN1cmVMb2FkVGV4dHVyZSIsImxvYWRlZCIsIm1hcmtGb3JDdXN0b21JQVJlbmRlciIsIl9hc3NlbWJsZXIiLCJjcmVhdGVJQSIsInNoYXJlZE1hdGVyaWFscyIsImdldEluc3RhbnRpYXRlZEJ1aWx0aW5NYXRlcmlhbCIsImdldEluc3RhbnRpYXRlZE1hdGVyaWFsIiwic2V0UHJvcGVydHkiLCJzZXRNYXRlcmlhbCIsIl9maW5pc2hlZFNpbXVsYXRpb24iLCJtb2R1bGUiLCJleHBvcnRz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b0JBSVgsT0FKVztBQUFBLGlCQURjO0FBQUEsZ0JBTzdCLEtBQUtBLFdBQUwsR0FQNkI7QUFBQSxnQkFRN0IsS0FBS0MsVUFBTCxHQVI2QjtBQUFBLGdCQVM3QixLQUFLQyxhQUFMLEdBVDZCO0FBQUEsZ0JBVTdCLElBQUksS0FBS3FDLGtCQUFMLElBQTJCLEtBQUtILFFBQXBDLEVBQThDO0FBQUEsb0JBQzFDLEtBQUt6RCxJQUFMLENBQVVpTCxPQUFWLEdBRDBDO0FBQUEsaUJBVmpCO0FBQUEsYUFqaEJQO0FBQUEsU0FBVDdLLENBQXJCO1FBaWlCQUEsRUFBQUEsQ0FBR0MsY0FBSEQsR0FBb0I2UCxNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQjVQLGNBQXJDRCIsImZpbGUiOiJDQ1BhcnRpY2xlU3lzdGVtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5jb25zdCBtYWNybyA9IHJlcXVpcmUoJy4uL2NvcmUvcGxhdGZvcm0vQ0NNYWNybycpO1xuY29uc3QgUGFydGljbGVBc3NldCA9IHJlcXVpcmUoJy4vQ0NQYXJ0aWNsZUFzc2V0Jyk7XG5jb25zdCBSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi9jb3JlL2NvbXBvbmVudHMvQ0NSZW5kZXJDb21wb25lbnQnKTtcbmNvbnN0IGNvZGVjID0gcmVxdWlyZSgnLi4vY29tcHJlc3Npb24vWmlwVXRpbHMnKTtcbmNvbnN0IFBOR1JlYWRlciA9IHJlcXVpcmUoJy4vQ0NQTkdSZWFkZXInKTtcbmNvbnN0IHRpZmZSZWFkZXIgPSByZXF1aXJlKCcuL0NDVElGRlJlYWRlcicpO1xuY29uc3QgdGV4dHVyZVV0aWwgPSByZXF1aXJlKCcuLi9jb3JlL3V0aWxzL3RleHR1cmUtdXRpbCcpO1xuY29uc3QgUmVuZGVyRmxvdyA9IHJlcXVpcmUoJy4uL2NvcmUvcmVuZGVyZXIvcmVuZGVyLWZsb3cnKTtcbmNvbnN0IFBhcnRpY2xlU2ltdWxhdG9yID0gcmVxdWlyZSgnLi9wYXJ0aWNsZS1zaW11bGF0b3InKTtcbmNvbnN0IE1hdGVyaWFsID0gcmVxdWlyZSgnLi4vY29yZS9hc3NldHMvbWF0ZXJpYWwvQ0NNYXRlcmlhbCcpO1xuY29uc3QgQmxlbmRGdW5jID0gcmVxdWlyZSgnLi4vY29yZS91dGlscy9ibGVuZC1mdW5jJyk7XG5cbmZ1bmN0aW9uIGdldEltYWdlRm9ybWF0QnlEYXRhIChpbWdEYXRhKSB7XG4gICAgLy8gaWYgaXQgaXMgYSBwbmcgZmlsZSBidWZmZXIuXG4gICAgaWYgKGltZ0RhdGEubGVuZ3RoID4gOCAmJiBpbWdEYXRhWzBdID09PSAweDg5XG4gICAgICAgICYmIGltZ0RhdGFbMV0gPT09IDB4NTBcbiAgICAgICAgJiYgaW1nRGF0YVsyXSA9PT0gMHg0RVxuICAgICAgICAmJiBpbWdEYXRhWzNdID09PSAweDQ3XG4gICAgICAgICYmIGltZ0RhdGFbNF0gPT09IDB4MERcbiAgICAgICAgJiYgaW1nRGF0YVs1XSA9PT0gMHgwQVxuICAgICAgICAmJiBpbWdEYXRhWzZdID09PSAweDFBXG4gICAgICAgICYmIGltZ0RhdGFbN10gPT09IDB4MEEpIHtcbiAgICAgICAgcmV0dXJuIG1hY3JvLkltYWdlRm9ybWF0LlBORztcbiAgICB9XG5cbiAgICAvLyBpZiBpdCBpcyBhIHRpZmYgZmlsZSBidWZmZXIuXG4gICAgaWYgKGltZ0RhdGEubGVuZ3RoID4gMiAmJiAoKGltZ0RhdGFbMF0gPT09IDB4NDkgJiYgaW1nRGF0YVsxXSA9PT0gMHg0OSlcbiAgICAgICAgfHwgKGltZ0RhdGFbMF0gPT09IDB4NGQgJiYgaW1nRGF0YVsxXSA9PT0gMHg0ZClcbiAgICAgICAgfHwgKGltZ0RhdGFbMF0gPT09IDB4ZmYgJiYgaW1nRGF0YVsxXSA9PT0gMHhkOCkpKSB7XG4gICAgICAgIHJldHVybiBtYWNyby5JbWFnZUZvcm1hdC5USUZGO1xuICAgIH1cbiAgICByZXR1cm4gbWFjcm8uSW1hZ2VGb3JtYXQuVU5LTk9XTjtcbn1cblxuLy9cbmZ1bmN0aW9uIGdldFBhcnRpY2xlQ29tcG9uZW50cyAobm9kZSkge1xuICAgIGxldCBwYXJlbnQgPSBub2RlLnBhcmVudCwgY29tcCA9IG5vZGUuZ2V0Q29tcG9uZW50KGNjLlBhcnRpY2xlU3lzdGVtKTtcbiAgICBpZiAoIXBhcmVudCB8fCAhY29tcCkge1xuICAgICAgICByZXR1cm4gbm9kZS5nZXRDb21wb25lbnRzSW5DaGlsZHJlbihjYy5QYXJ0aWNsZVN5c3RlbSk7XG4gICAgfVxuICAgIHJldHVybiBnZXRQYXJ0aWNsZUNvbXBvbmVudHMocGFyZW50KTtcbn1cblxuXG4vKipcbiAqICEjZW4gRW51bSBmb3IgZW1pdHRlciBtb2Rlc1xuICogISN6aCDlj5HlsITmqKHlvI9cbiAqIEBlbnVtIFBhcnRpY2xlU3lzdGVtLkVtaXR0ZXJNb2RlXG4gKi9cbnZhciBFbWl0dGVyTW9kZSA9IGNjLkVudW0oe1xuICAgIC8qKlxuICAgICAqICEjZW4gVXNlcyBncmF2aXR5LCBzcGVlZCwgcmFkaWFsIGFuZCB0YW5nZW50aWFsIGFjY2VsZXJhdGlvbi5cbiAgICAgKiAhI3poIOmHjeWKm+aooeW8j++8jOaooeaLn+mHjeWKm++8jOWPr+iuqeeykuWtkOWbtOe7leS4gOS4quS4reW/g+eCueenu+i/keaIluenu+i/nOOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBHUkFWSVRZXG4gICAgICovXG4gICAgR1JBVklUWTogMCxcbiAgICAvKipcbiAgICAgKiAhI2VuIFVzZXMgcmFkaXVzIG1vdmVtZW50ICsgcm90YXRpb24uXG4gICAgICogISN6aCDljYrlvoTmqKHlvI/vvIzlj6/ku6Xkvb/nspLlrZDku6XlnIblnIjmlrnlvI/ml4vovazvvIzlroPkuZ/lj6/ku6XliJvpgKDonrrml4vmlYjmnpzorqnnspLlrZDmgKXpgJ/liY3ov5vmiJblkI7pgIDjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gUkFESVVTIC0gVXNlcyByYWRpdXMgbW92ZW1lbnQgKyByb3RhdGlvbi5cbiAgICAgKi9cbiAgICBSQURJVVM6IDFcbn0pO1xuXG4vKipcbiAqICEjZW4gRW51bSBmb3IgcGFydGljbGVzIG1vdmVtZW50IHR5cGUuXG4gKiAhI3poIOeykuWtkOS9jee9ruexu+Wei1xuICogQGVudW0gUGFydGljbGVTeXN0ZW0uUG9zaXRpb25UeXBlXG4gKi9cbnZhciBQb3NpdGlvblR5cGUgPSBjYy5FbnVtKHtcbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogTGl2aW5nIHBhcnRpY2xlcyBhcmUgYXR0YWNoZWQgdG8gdGhlIHdvcmxkIGFuZCBhcmUgdW5hZmZlY3RlZCBieSBlbWl0dGVyIHJlcG9zaXRpb25pbmcuXG4gICAgICogISN6aFxuICAgICAqIOiHqueUseaooeW8j++8jOebuOWvueS6juS4lueVjOWdkOagh++8jOS4jeS8mumaj+eykuWtkOiKgueCueenu+WKqOiAjOenu+WKqOOAgu+8iOWPr+S6p+eUn+eBq+eEsOOAgeiSuOaxveetieaViOaenO+8iVxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBGUkVFXG4gICAgICovXG4gICAgRlJFRTogMCxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBMaXZpbmcgcGFydGljbGVzIGFyZSBhdHRhY2hlZCB0byB0aGUgd29ybGQgYnV0IHdpbGwgZm9sbG93IHRoZSBlbWl0dGVyIHJlcG9zaXRpb25pbmcuPGJyLz5cbiAgICAgKiBVc2UgY2FzZTogQXR0YWNoIGFuIGVtaXR0ZXIgdG8gYW4gc3ByaXRlLCBhbmQgeW91IHdhbnQgdGhhdCB0aGUgZW1pdHRlciBmb2xsb3dzIHRoZSBzcHJpdGUuXG4gICAgICogISN6aFxuICAgICAqIOebuOWvueaooeW8j++8jOeykuWtkOS8mumaj+eItuiKgueCueenu+WKqOiAjOenu+WKqO+8jOWPr+eUqOS6juWItuS9nOenu+WKqOinkuiJsui6q+S4iueahOeJueaViOetieetieOAgu+8iOivpemAiemhueWcqCBDcmVhdG9yIOS4reaaguaXtuS4jeaUr+aMge+8iVxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBSRUxBVElWRVxuICAgICAqL1xuICAgIFJFTEFUSVZFOiAxLFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIExpdmluZyBwYXJ0aWNsZXMgYXJlIGF0dGFjaGVkIHRvIHRoZSBlbWl0dGVyIGFuZCBhcmUgdHJhbnNsYXRlZCBhbG9uZyB3aXRoIGl0LlxuICAgICAqICEjemhcbiAgICAgKiDmlbTnu4TmqKHlvI/vvIznspLlrZDot5/pmo/lj5HlsITlmajnp7vliqjjgILvvIjkuI3kvJrlj5HnlJ/mi5blsL7vvIlcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gR1JPVVBFRFxuICAgICAqL1xuICAgIEdST1VQRUQ6IDJcbn0pO1xuXG4vKipcbiAqIEBjbGFzcyBQYXJ0aWNsZVN5c3RlbVxuICovXG5cbnZhciBwcm9wZXJ0aWVzID0ge1xuICAgIC8qKlxuICAgICAqICEjZW4gUGxheSBwYXJ0aWNsZSBpbiBlZGl0IG1vZGUuXG4gICAgICogISN6aCDlnKjnvJbovpHlmajmqKHlvI/kuIvpooTop4jnspLlrZDvvIzlkK/nlKjlkI7pgInkuK3nspLlrZDml7bvvIznspLlrZDlsIboh6rliqjmkq3mlL7jgIJcbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHByZXZpZXdcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHByZXZpZXc6IHtcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgZWRpdG9yT25seTogdHJ1ZSxcbiAgICAgICAgbm90aWZ5OiBDQ19FRElUT1IgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yZXNldFN5c3RlbSgpO1xuICAgICAgICAgICAgaWYgKCAhdGhpcy5wcmV2aWV3ICkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcFN5c3RlbSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZVJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2MuZW5naW5lLnJlcGFpbnRJbkVkaXRNb2RlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGFibGU6IGZhbHNlLFxuICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnBhcnRpY2xlX3N5c3RlbS5wcmV2aWV3J1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogSWYgc2V0IGN1c3RvbSB0byB0cnVlLCB0aGVuIHVzZSBjdXN0b20gcHJvcGVydGllcyBpbnN0ZWFkb2YgcmVhZCBwYXJ0aWNsZSBmaWxlLlxuICAgICAqICEjemgg5piv5ZCm6Ieq5a6a5LmJ57KS5a2Q5bGe5oCn44CCXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBjdXN0b21cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIF9jdXN0b206IGZhbHNlLFxuICAgIGN1c3RvbToge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXN0b207XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoQ0NfRURJVE9SICYmICF2YWx1ZSAmJiAhdGhpcy5fZmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYy53YXJuSUQoNjAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fY3VzdG9tICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1c3RvbSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FwcGx5RmlsZSgpO1xuICAgICAgICAgICAgICAgIGlmIChDQ19FRElUT1IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2MuZW5naW5lLnJlcGFpbnRJbkVkaXRNb2RlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5wYXJ0aWNsZV9zeXN0ZW0uY3VzdG9tJ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBwbGlzdCBmaWxlLlxuICAgICAqICEjemggcGxpc3Qg5qC85byP55qE57KS5a2Q6YWN572u5paH5Lu244CCXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGZpbGVcbiAgICAgKiBAZGVmYXVsdCBcIlwiXG4gICAgICovXG4gICAgX2ZpbGU6IHtcbiAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgdHlwZTogUGFydGljbGVBc3NldFxuICAgIH0sXG4gICAgZmlsZToge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWxlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSwgZm9yY2UpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9maWxlICE9PSB2YWx1ZSB8fCAoQ0NfRURJVE9SICYmIGZvcmNlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwbHlGaWxlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChDQ19FRElUT1IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLmVuZ2luZS5yZXBhaW50SW5FZGl0TW9kZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1c3RvbSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdHlwZTogUGFydGljbGVBc3NldCxcbiAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5wYXJ0aWNsZV9zeXN0ZW0uZmlsZSdcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTcHJpdGVGcmFtZSB1c2VkIGZvciBwYXJ0aWNsZXMgZGlzcGxheVxuICAgICAqICEjemgg55So5LqO57KS5a2Q5ZGI546w55qEIFNwcml0ZUZyYW1lXG4gICAgICogQHByb3BlcnR5IHNwcml0ZUZyYW1lXG4gICAgICogQHR5cGUge1Nwcml0ZUZyYW1lfVxuICAgICAqL1xuICAgIF9zcHJpdGVGcmFtZToge1xuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZVxuICAgIH0sXG4gICAgc3ByaXRlRnJhbWU6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3ByaXRlRnJhbWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlLCBmb3JjZSkge1xuICAgICAgICAgICAgdmFyIGxhc3RTcHJpdGUgPSB0aGlzLl9yZW5kZXJTcHJpdGVGcmFtZTtcbiAgICAgICAgICAgIGlmIChDQ19FRElUT1IpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZvcmNlICYmIGxhc3RTcHJpdGUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobGFzdFNwcml0ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3JlbmRlclNwcml0ZUZyYW1lID0gdmFsdWU7XG5cbiAgICAgICAgICAgIGlmICghdmFsdWUgfHwgdmFsdWUuX3V1aWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zcHJpdGVGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoKGxhc3RTcHJpdGUgJiYgbGFzdFNwcml0ZS5nZXRUZXh0dXJlKCkpICE9PSAodmFsdWUgJiYgdmFsdWUuZ2V0VGV4dHVyZSgpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RleHR1cmUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FwcGx5U3ByaXRlRnJhbWUobGFzdFNwcml0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLmVtaXQoJ3Nwcml0ZWZyYW1lLWNoYW5nZWQnLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWUsXG4gICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQucGFydGljbGVfc3lzdGVtLnNwcml0ZUZyYW1lJ1xuICAgIH0sXG5cblxuICAgIC8vIGp1c3QgdXNlZCB0byByZWFkIGRhdGEgZnJvbSAxLnhcbiAgICBfdGV4dHVyZToge1xuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB0eXBlOiBjYy5UZXh0dXJlMkQsXG4gICAgICAgIGVkaXRvck9ubHk6IHRydWUsXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGV4dHVyZSBvZiBQYXJ0aWNsZSBTeXN0ZW0sIHJlYWRvbmx5LCBwbGVhc2UgdXNlIHNwcml0ZUZyYW1lIHRvIHNldHVwIG5ldyB0ZXh0dXJl44CCXG4gICAgICogISN6aCDnspLlrZDotLTlm77vvIzlj6ror7vlsZ7mgKfvvIzor7fkvb/nlKggc3ByaXRlRnJhbWUg5bGe5oCn5p2l5pu/5o2i6LS05Zu+44CCXG4gICAgICogQHByb3BlcnR5IHRleHR1cmVcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHRleHR1cmU6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNjLndhcm5JRCg2MDE3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogY2MuVGV4dHVyZTJELFxuICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnBhcnRpY2xlX3N5c3RlbS50ZXh0dXJlJyxcbiAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBhbmltYXRhYmxlOiBmYWxzZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEN1cnJlbnQgcXVhbnRpdHkgb2YgcGFydGljbGVzIHRoYXQgYXJlIGJlaW5nIHNpbXVsYXRlZC5cbiAgICAgKiAhI3poIOW9k+WJjeaSreaUvueahOeykuWtkOaVsOmHj+OAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBwYXJ0aWNsZUNvdW50XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcGFydGljbGVDb3VudDoge1xuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaW11bGF0b3IucGFydGljbGVzLmxlbmd0aDtcbiAgICAgICAgfSxcbiAgICAgICAgcmVhZG9ubHk6IHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBJbmRpY2F0ZSB3aGV0aGVyIHRoZSBzeXN0ZW0gc2ltdWxhdGlvbiBoYXZlIHN0b3BwZWQuXG4gICAgICogISN6aCDmjIfnpLrnspLlrZDmkq3mlL7mmK/lkKblrozmr5XjgIJcbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHN0b3BwZWRcbiAgICAgKi9cbiAgICBfc3RvcHBlZDogdHJ1ZSxcbiAgICBzdG9wcGVkOiB7XG4gICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RvcHBlZDtcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0YWJsZTogZmFsc2UsXG4gICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gSWYgc2V0IHRvIHRydWUsIHRoZSBwYXJ0aWNsZSBzeXN0ZW0gd2lsbCBhdXRvbWF0aWNhbGx5IHN0YXJ0IHBsYXlpbmcgb24gb25Mb2FkLlxuICAgICAqICEjemgg5aaC5p6c6K6+572u5Li6IHRydWUg6L+Q6KGM5pe25Lya6Ieq5Yqo5Y+R5bCE57KS5a2Q44CCXG4gICAgICogQHByb3BlcnR5IHBsYXlPbkxvYWRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgcGxheU9uTG9hZDogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gSW5kaWNhdGUgd2hldGhlciB0aGUgb3duZXIgbm9kZSB3aWxsIGJlIGF1dG8tcmVtb3ZlZCB3aGVuIGl0IGhhcyBubyBwYXJ0aWNsZXMgbGVmdC5cbiAgICAgKiAhI3poIOeykuWtkOaSreaUvuWujOavleWQjuiHquWKqOmUgOavgeaJgOWcqOeahOiKgueCueOAglxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gYXV0b1JlbW92ZU9uRmluaXNoXG4gICAgICovXG4gICAgYXV0b1JlbW92ZU9uRmluaXNoOiB7XG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICBhbmltYXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5wYXJ0aWNsZV9zeXN0ZW0uYXV0b1JlbW92ZU9uRmluaXNoJ1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEluZGljYXRlIHdoZXRoZXIgdGhlIHBhcnRpY2xlIHN5c3RlbSBpcyBhY3RpdmF0ZWQuXG4gICAgICogISN6aCDmmK/lkKbmv4DmtLvnspLlrZDjgIJcbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGFjdGl2ZVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGFjdGl2ZToge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaW11bGF0b3IuYWN0aXZlO1xuICAgICAgICB9LFxuICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIE1heGltdW0gcGFydGljbGVzIG9mIHRoZSBzeXN0ZW0uXG4gICAgICogISN6aCDnspLlrZDmnIDlpKfmlbDph4/jgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gdG90YWxQYXJ0aWNsZXNcbiAgICAgKiBAZGVmYXVsdCAxNTBcbiAgICAgKi9cbiAgICB0b3RhbFBhcnRpY2xlczogMTUwLFxuICAgIC8qKlxuICAgICAqICEjZW4gSG93IG1hbnkgc2Vjb25kcyB0aGUgZW1pdHRlciB3aWwgcnVuLiAtMSBtZWFucyAnZm9yZXZlcicuXG4gICAgICogISN6aCDlj5HlsITlmajnlJ/lrZjml7bpl7TvvIzljZXkvY3np5LvvIwtMeihqOekuuaMgee7reWPkeWwhOOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBkdXJhdGlvblxuICAgICAqIEBkZWZhdWx0IFBhcnRpY2xlU3lzdGVtLkRVUkFUSU9OX0lORklOSVRZXG4gICAgICovXG4gICAgZHVyYXRpb246IC0xLFxuICAgIC8qKlxuICAgICAqICEjZW4gRW1pc3Npb24gcmF0ZSBvZiB0aGUgcGFydGljbGVzLlxuICAgICAqICEjemgg5q+P56eS5Y+R5bCE55qE57KS5a2Q5pWw55uu44CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGVtaXNzaW9uUmF0ZVxuICAgICAqIEBkZWZhdWx0IDEwXG4gICAgICovXG4gICAgZW1pc3Npb25SYXRlOiAxMCxcbiAgICAvKipcbiAgICAgKiAhI2VuIExpZmUgb2YgZWFjaCBwYXJ0aWNsZSBzZXR0ZXIuXG4gICAgICogISN6aCDnspLlrZDnmoTov5DooYzml7bpl7TjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gbGlmZVxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICBsaWZlOiAxLFxuICAgIC8qKlxuICAgICAqICEjZW4gVmFyaWF0aW9uIG9mIGxpZmUuXG4gICAgICogISN6aCDnspLlrZDnmoTov5DooYzml7bpl7Tlj5jljJbojIPlm7TjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gbGlmZVZhclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBsaWZlVmFyOiAwLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTdGFydCBjb2xvciBvZiBlYWNoIHBhcnRpY2xlLlxuICAgICAqICEjemgg57KS5a2Q5Yid5aeL6aKc6Imy44CCXG4gICAgICogQHByb3BlcnR5IHtjYy5Db2xvcn0gc3RhcnRDb2xvclxuICAgICAqIEBkZWZhdWx0IHtyOiAyNTUsIGc6IDI1NSwgYjogMjU1LCBhOiAyNTV9XG4gICAgICovXG4gICAgX3N0YXJ0Q29sb3I6IG51bGwsXG4gICAgc3RhcnRDb2xvcjoge1xuICAgICAgICB0eXBlOiBjYy5Db2xvcixcbiAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGFydENvbG9yO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgKHZhbCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRDb2xvci5yID0gdmFsLnI7XG4gICAgICAgICAgICB0aGlzLl9zdGFydENvbG9yLmcgPSB2YWwuZztcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0Q29sb3IuYiA9IHZhbC5iO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRDb2xvci5hID0gdmFsLmE7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqICEjZW4gVmFyaWF0aW9uIG9mIHRoZSBzdGFydCBjb2xvci5cbiAgICAgKiAhI3poIOeykuWtkOWIneWni+minOiJsuWPmOWMluiMg+WbtOOAglxuICAgICAqIEBwcm9wZXJ0eSB7Y2MuQ29sb3J9IHN0YXJ0Q29sb3JWYXJcbiAgICAgKiBAZGVmYXVsdCB7cjogMCwgZzogMCwgYjogMCwgYTogMH1cbiAgICAgKi9cbiAgICBfc3RhcnRDb2xvclZhcjogbnVsbCxcbiAgICBzdGFydENvbG9yVmFyOiB7XG4gICAgICAgIHR5cGU6IGNjLkNvbG9yLFxuICAgICAgICBnZXQgKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0Q29sb3JWYXI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGFydENvbG9yVmFyLnIgPSB2YWwucjtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0Q29sb3JWYXIuZyA9IHZhbC5nO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRDb2xvclZhci5iID0gdmFsLmI7XG4gICAgICAgICAgICB0aGlzLl9zdGFydENvbG9yVmFyLmEgPSB2YWwuYTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogISNlbiBFbmRpbmcgY29sb3Igb2YgZWFjaCBwYXJ0aWNsZS5cbiAgICAgKiAhI3poIOeykuWtkOe7k+adn+minOiJsuOAglxuICAgICAqIEBwcm9wZXJ0eSB7Y2MuQ29sb3J9IGVuZENvbG9yXG4gICAgICogQGRlZmF1bHQge3I6IDI1NSwgZzogMjU1LCBiOiAyNTUsIGE6IDB9XG4gICAgICovXG4gICAgX2VuZENvbG9yOiBudWxsLFxuICAgIGVuZENvbG9yOiB7XG4gICAgICAgIHR5cGU6IGNjLkNvbG9yLFxuICAgICAgICBnZXQgKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VuZENvbG9yO1xuICAgICAgICB9LFxuICAgICAgICBzZXQgKHZhbCkge1xuICAgICAgICAgICAgdGhpcy5fZW5kQ29sb3IuciA9IHZhbC5yO1xuICAgICAgICAgICAgdGhpcy5fZW5kQ29sb3IuZyA9IHZhbC5nO1xuICAgICAgICAgICAgdGhpcy5fZW5kQ29sb3IuYiA9IHZhbC5iO1xuICAgICAgICAgICAgdGhpcy5fZW5kQ29sb3IuYSA9IHZhbC5hO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiAhI2VuIFZhcmlhdGlvbiBvZiB0aGUgZW5kIGNvbG9yLlxuICAgICAqICEjemgg57KS5a2Q57uT5p2f6aKc6Imy5Y+Y5YyW6IyD5Zu044CCXG4gICAgICogQHByb3BlcnR5IHtjYy5Db2xvcn0gZW5kQ29sb3JWYXJcbiAgICAgKiBAZGVmYXVsdCB7cjogMCwgZzogMCwgYjogMCwgYTogMH1cbiAgICAgKi9cbiAgICBfZW5kQ29sb3JWYXI6IG51bGwsXG4gICAgZW5kQ29sb3JWYXI6IHtcbiAgICAgICAgdHlwZTogY2MuQ29sb3IsXG4gICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5kQ29sb3JWYXI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmRDb2xvclZhci5yID0gdmFsLnI7XG4gICAgICAgICAgICB0aGlzLl9lbmRDb2xvclZhci5nID0gdmFsLmc7XG4gICAgICAgICAgICB0aGlzLl9lbmRDb2xvclZhci5iID0gdmFsLmI7XG4gICAgICAgICAgICB0aGlzLl9lbmRDb2xvclZhci5hID0gdmFsLmE7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBBbmdsZSBvZiBlYWNoIHBhcnRpY2xlIHNldHRlci5cbiAgICAgKiAhI3poIOeykuWtkOinkuW6puOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBhbmdsZVxuICAgICAqIEBkZWZhdWx0IDkwXG4gICAgICovXG4gICAgYW5nbGU6IDkwLFxuICAgIC8qKlxuICAgICAqICEjZW4gVmFyaWF0aW9uIG9mIGFuZ2xlIG9mIGVhY2ggcGFydGljbGUgc2V0dGVyLlxuICAgICAqICEjemgg57KS5a2Q6KeS5bqm5Y+Y5YyW6IyD5Zu044CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGFuZ2xlVmFyXG4gICAgICogQGRlZmF1bHQgMjBcbiAgICAgKi9cbiAgICBhbmdsZVZhcjogMjAsXG4gICAgLyoqXG4gICAgICogISNlbiBTdGFydCBzaXplIGluIHBpeGVscyBvZiBlYWNoIHBhcnRpY2xlLlxuICAgICAqICEjemgg57KS5a2Q55qE5Yid5aeL5aSn5bCP44CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHN0YXJ0U2l6ZVxuICAgICAqIEBkZWZhdWx0IDUwXG4gICAgICovXG4gICAgc3RhcnRTaXplOiA1MCxcbiAgICAvKipcbiAgICAgKiAhI2VuIFZhcmlhdGlvbiBvZiBzdGFydCBzaXplIGluIHBpeGVscy5cbiAgICAgKiAhI3poIOeykuWtkOWIneWni+Wkp+Wwj+eahOWPmOWMluiMg+WbtOOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzdGFydFNpemVWYXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgc3RhcnRTaXplVmFyOiAwLFxuICAgIC8qKlxuICAgICAqICEjZW4gRW5kIHNpemUgaW4gcGl4ZWxzIG9mIGVhY2ggcGFydGljbGUuXG4gICAgICogISN6aCDnspLlrZDnu5PmnZ/ml7bnmoTlpKflsI/jgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gZW5kU2l6ZVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBlbmRTaXplOiAwLFxuICAgIC8qKlxuICAgICAqICEjZW4gVmFyaWF0aW9uIG9mIGVuZCBzaXplIGluIHBpeGVscy5cbiAgICAgKiAhI3poIOeykuWtkOe7k+adn+Wkp+Wwj+eahOWPmOWMluiMg+WbtOOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBlbmRTaXplVmFyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIGVuZFNpemVWYXI6IDAsXG4gICAgLyoqXG4gICAgICogISNlbiBTdGFydCBhbmdsZSBvZiBlYWNoIHBhcnRpY2xlLlxuICAgICAqICEjemgg57KS5a2Q5byA5aeL6Ieq5peL6KeS5bqm44CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHN0YXJ0U3BpblxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBzdGFydFNwaW46IDAsXG4gICAgLyoqXG4gICAgICogISNlbiBWYXJpYXRpb24gb2Ygc3RhcnQgYW5nbGUuXG4gICAgICogISN6aCDnspLlrZDlvIDlp4voh6rml4vop5Lluqblj5jljJbojIPlm7TjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gc3RhcnRTcGluVmFyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHN0YXJ0U3BpblZhcjogMCxcbiAgICAvKipcbiAgICAgKiAhI2VuIEVuZCBhbmdsZSBvZiBlYWNoIHBhcnRpY2xlLlxuICAgICAqICEjemgg57KS5a2Q57uT5p2f6Ieq5peL6KeS5bqm44CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGVuZFNwaW5cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgZW5kU3BpbjogMCxcbiAgICAvKipcbiAgICAgKiAhI2VuIFZhcmlhdGlvbiBvZiBlbmQgYW5nbGUuXG4gICAgICogISN6aCDnspLlrZDnu5PmnZ/oh6rml4vop5Lluqblj5jljJbojIPlm7TjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gZW5kU3BpblZhclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBlbmRTcGluVmFyOiAwLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTb3VyY2UgcG9zaXRpb24gb2YgdGhlIGVtaXR0ZXIuXG4gICAgICogISN6aCDlj5HlsITlmajkvY3nva7jgIJcbiAgICAgKiBAcHJvcGVydHkge1ZlYzJ9IHNvdXJjZVBvc1xuICAgICAqIEBkZWZhdWx0IGNjLlZlYzIuWkVST1xuICAgICAqL1xuICAgIHNvdXJjZVBvczogY2MuVmVjMi5aRVJPLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBWYXJpYXRpb24gb2Ygc291cmNlIHBvc2l0aW9uLlxuICAgICAqICEjemgg5Y+R5bCE5Zmo5L2N572u55qE5Y+Y5YyW6IyD5Zu044CC77yI5qiq5ZCR5ZKM57q15ZCR77yJXG4gICAgICogQHByb3BlcnR5IHtWZWMyfSBwb3NWYXJcbiAgICAgKiBAZGVmYXVsdCBjYy5WZWMyLlpFUk9cbiAgICAgKi9cbiAgICBwb3NWYXI6IGNjLlZlYzIuWkVSTyxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUGFydGljbGVzIG1vdmVtZW50IHR5cGUuXG4gICAgICogISN6aCDnspLlrZDkvY3nva7nsbvlnovjgIJcbiAgICAgKiBAcHJvcGVydHkge1BhcnRpY2xlU3lzdGVtLlBvc2l0aW9uVHlwZX0gcG9zaXRpb25UeXBlXG4gICAgICogQGRlZmF1bHQgUGFydGljbGVTeXN0ZW0uUG9zaXRpb25UeXBlLkZSRUVcbiAgICAgKi9cbiAgICBfcG9zaXRpb25UeXBlOiB7XG4gICAgICAgIGRlZmF1bHQ6IFBvc2l0aW9uVHlwZS5GUkVFLFxuICAgICAgICBmb3JtZXJseVNlcmlhbGl6ZWRBczogXCJwb3NpdGlvblR5cGVcIlxuICAgIH0sXG5cbiAgICBwb3NpdGlvblR5cGU6IHtcbiAgICAgICAgdHlwZTogUG9zaXRpb25UeXBlLFxuICAgICAgICBnZXQgKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uVHlwZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0ICh2YWwpIHtcbiAgICAgICAgICAgIGxldCBtYXRlcmlhbCA9IHRoaXMuZ2V0TWF0ZXJpYWwoMCk7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5kZWZpbmUoJ19VU0VfTU9ERUwnLCB2YWwgIT09IFBvc2l0aW9uVHlwZS5GUkVFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uVHlwZSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFBhcnRpY2xlcyBlbWl0dGVyIG1vZGVzLlxuICAgICAqICEjemgg5Y+R5bCE5Zmo57G75Z6L44CCXG4gICAgICogQHByb3BlcnR5IHtQYXJ0aWNsZVN5c3RlbS5FbWl0dGVyTW9kZX0gZW1pdHRlck1vZGVcbiAgICAgKiBAZGVmYXVsdCBQYXJ0aWNsZVN5c3RlbS5FbWl0dGVyTW9kZS5HUkFWSVRZXG4gICAgICovXG4gICAgZW1pdHRlck1vZGU6IHtcbiAgICAgICAgZGVmYXVsdDogRW1pdHRlck1vZGUuR1JBVklUWSxcbiAgICAgICAgdHlwZTogRW1pdHRlck1vZGVcbiAgICB9LFxuXG4gICAgLy8gR1JBVklUWSBNT0RFXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEdyYXZpdHkgb2YgdGhlIGVtaXR0ZXIuXG4gICAgICogISN6aCDph43lipvjgIJcbiAgICAgKiBAcHJvcGVydHkge1ZlYzJ9IGdyYXZpdHlcbiAgICAgKiBAZGVmYXVsdCBjYy5WZWMyLlpFUk9cbiAgICAgKi9cbiAgICBncmF2aXR5OiBjYy5WZWMyLlpFUk8sXG4gICAgLyoqXG4gICAgICogISNlbiBTcGVlZCBvZiB0aGUgZW1pdHRlci5cbiAgICAgKiAhI3poIOmAn+W6puOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzcGVlZFxuICAgICAqIEBkZWZhdWx0IDE4MFxuICAgICAqL1xuICAgIHNwZWVkOiAxODAsXG4gICAgLyoqXG4gICAgICogISNlbiBWYXJpYXRpb24gb2YgdGhlIHNwZWVkLlxuICAgICAqICEjemgg6YCf5bqm5Y+Y5YyW6IyD5Zu044CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHNwZWVkVmFyXG4gICAgICogQGRlZmF1bHQgNTBcbiAgICAgKi9cbiAgICBzcGVlZFZhcjogNTAsXG4gICAgLyoqXG4gICAgICogISNlbiBUYW5nZW50aWFsIGFjY2VsZXJhdGlvbiBvZiBlYWNoIHBhcnRpY2xlLiBPbmx5IGF2YWlsYWJsZSBpbiAnR3Jhdml0eScgbW9kZS5cbiAgICAgKiAhI3poIOavj+S4queykuWtkOeahOWIh+WQkeWKoOmAn+W6pu+8jOWNs+WeguebtOS6jumHjeWKm+aWueWQkeeahOWKoOmAn+W6pu+8jOWPquacieWcqOmHjeWKm+aooeW8j+S4i+WPr+eUqOOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0YW5nZW50aWFsQWNjZWxcbiAgICAgKiBAZGVmYXVsdCA4MFxuICAgICAqL1xuICAgIHRhbmdlbnRpYWxBY2NlbDogODAsXG4gICAgLyoqXG4gICAgICogISNlbiBWYXJpYXRpb24gb2YgdGhlIHRhbmdlbnRpYWwgYWNjZWxlcmF0aW9uLlxuICAgICAqICEjemgg5q+P5Liq57KS5a2Q55qE5YiH5ZCR5Yqg6YCf5bqm5Y+Y5YyW6IyD5Zu044CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHRhbmdlbnRpYWxBY2NlbFZhclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0YW5nZW50aWFsQWNjZWxWYXI6IDAsXG4gICAgLyoqXG4gICAgICogISNlbiBBY2NlbGVyYXRpb24gb2YgZWFjaCBwYXJ0aWNsZS4gT25seSBhdmFpbGFibGUgaW4gJ0dyYXZpdHknIG1vZGUuXG4gICAgICogISN6aCDnspLlrZDlvoTlkJHliqDpgJ/luqbvvIzljbPlubPooYzkuo7ph43lipvmlrnlkJHnmoTliqDpgJ/luqbvvIzlj6rmnInlnKjph43lipvmqKHlvI/kuIvlj6/nlKjjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gcmFkaWFsQWNjZWxcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgcmFkaWFsQWNjZWw6IDAsXG4gICAgLyoqXG4gICAgICogISNlbiBWYXJpYXRpb24gb2YgdGhlIHJhZGlhbCBhY2NlbGVyYXRpb24uXG4gICAgICogISN6aCDnspLlrZDlvoTlkJHliqDpgJ/luqblj5jljJbojIPlm7TjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gcmFkaWFsQWNjZWxWYXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgcmFkaWFsQWNjZWxWYXI6IDAsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEluZGljYXRlIHdoZXRoZXIgdGhlIHJvdGF0aW9uIG9mIGVhY2ggcGFydGljbGUgZXF1YWxzIHRvIGl0cyBkaXJlY3Rpb24uIE9ubHkgYXZhaWxhYmxlIGluICdHcmF2aXR5JyBtb2RlLlxuICAgICAqICEjemgg5q+P5Liq57KS5a2Q55qE5peL6L2s5piv5ZCm562J5LqO5YW25pa55ZCR77yM5Y+q5pyJ5Zyo6YeN5Yqb5qih5byP5LiL5Y+v55So44CCXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSByb3RhdGlvbklzRGlyXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICByb3RhdGlvbklzRGlyOiBmYWxzZSxcblxuICAgIC8vIFJBRElVUyBNT0RFXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFN0YXJ0aW5nIHJhZGl1cyBvZiB0aGUgcGFydGljbGVzLiBPbmx5IGF2YWlsYWJsZSBpbiAnUmFkaXVzJyBtb2RlLlxuICAgICAqICEjemgg5Yid5aeL5Y2K5b6E77yM6KGo56S657KS5a2Q5Ye655Sf5pe255u45a+55Y+R5bCE5Zmo55qE6Led56a777yM5Y+q5pyJ5Zyo5Y2K5b6E5qih5byP5LiL5Y+v55So44CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHN0YXJ0UmFkaXVzXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHN0YXJ0UmFkaXVzOiAwLFxuICAgIC8qKlxuICAgICAqICEjZW4gVmFyaWF0aW9uIG9mIHRoZSBzdGFydGluZyByYWRpdXMuXG4gICAgICogISN6aCDliJ3lp4vljYrlvoTlj5jljJbojIPlm7TjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gc3RhcnRSYWRpdXNWYXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgc3RhcnRSYWRpdXNWYXI6IDAsXG4gICAgLyoqXG4gICAgICogISNlbiBFbmRpbmcgcmFkaXVzIG9mIHRoZSBwYXJ0aWNsZXMuIE9ubHkgYXZhaWxhYmxlIGluICdSYWRpdXMnIG1vZGUuXG4gICAgICogISN6aCDnu5PmnZ/ljYrlvoTvvIzlj6rmnInlnKjljYrlvoTmqKHlvI/kuIvlj6/nlKjjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gZW5kUmFkaXVzXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIGVuZFJhZGl1czogMCxcbiAgICAvKipcbiAgICAgKiAhI2VuIFZhcmlhdGlvbiBvZiB0aGUgZW5kaW5nIHJhZGl1cy5cbiAgICAgKiAhI3poIOe7k+adn+WNiuW+hOWPmOWMluiMg+WbtOOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBlbmRSYWRpdXNWYXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgZW5kUmFkaXVzVmFyOiAwLFxuICAgIC8qKlxuICAgICAqICEjZW4gTnVtYmVyIG9mIGRlZ3Jlc3MgdG8gcm90YXRlIGEgcGFydGljbGUgYXJvdW5kIHRoZSBzb3VyY2UgcG9zIHBlciBzZWNvbmQuIE9ubHkgYXZhaWxhYmxlIGluICdSYWRpdXMnIG1vZGUuXG4gICAgICogISN6aCDnspLlrZDmr4/np5Llm7Tnu5Xotbflp4vngrnnmoTml4vovazop5LluqbvvIzlj6rmnInlnKjljYrlvoTmqKHlvI/kuIvlj6/nlKjjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gcm90YXRlUGVyU1xuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICByb3RhdGVQZXJTOiAwLFxuICAgIC8qKlxuICAgICAqICEjZW4gVmFyaWF0aW9uIG9mIHRoZSBkZWdyZXNzIHRvIHJvdGF0ZSBhIHBhcnRpY2xlIGFyb3VuZCB0aGUgc291cmNlIHBvcyBwZXIgc2Vjb25kLlxuICAgICAqICEjemgg57KS5a2Q5q+P56eS5Zu057uV6LW35aeL54K555qE5peL6L2s6KeS5bqm5Y+Y5YyW6IyD5Zu044CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHJvdGF0ZVBlclNWYXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgcm90YXRlUGVyU1ZhcjogMFxuXG59O1xuXG4vKipcbiAqIFBhcnRpY2xlIFN5c3RlbSBiYXNlIGNsYXNzLiA8YnIvPlxuICogQXR0cmlidXRlcyBvZiBhIFBhcnRpY2xlIFN5c3RlbTo8YnIvPlxuICogIC0gZW1taXNpb24gcmF0ZSBvZiB0aGUgcGFydGljbGVzPGJyLz5cbiAqICAtIEdyYXZpdHkgTW9kZSAoTW9kZSBBKTogPGJyLz5cbiAqICAtIGdyYXZpdHkgPGJyLz5cbiAqICAtIGRpcmVjdGlvbiA8YnIvPlxuICogIC0gc3BlZWQgKy0gIHZhcmlhbmNlIDxici8+XG4gKiAgLSB0YW5nZW50aWFsIGFjY2VsZXJhdGlvbiArLSB2YXJpYW5jZTxici8+XG4gKiAgLSByYWRpYWwgYWNjZWxlcmF0aW9uICstIHZhcmlhbmNlPGJyLz5cbiAqICAtIFJhZGl1cyBNb2RlIChNb2RlIEIpOiAgICAgIDxici8+XG4gKiAgLSBzdGFydFJhZGl1cyArLSB2YXJpYW5jZSAgICA8YnIvPlxuICogIC0gZW5kUmFkaXVzICstIHZhcmlhbmNlICAgICAgPGJyLz5cbiAqICAtIHJvdGF0ZSArLSB2YXJpYW5jZSAgICAgICAgIDxici8+XG4gKiAgLSBQcm9wZXJ0aWVzIGNvbW1vbiB0byBhbGwgbW9kZXM6IDxici8+XG4gKiAgLSBsaWZlICstIGxpZmUgdmFyaWFuY2UgICAgICA8YnIvPlxuICogIC0gc3RhcnQgc3BpbiArLSB2YXJpYW5jZSAgICAgPGJyLz5cbiAqICAtIGVuZCBzcGluICstIHZhcmlhbmNlICAgICAgIDxici8+XG4gKiAgLSBzdGFydCBzaXplICstIHZhcmlhbmNlICAgICA8YnIvPlxuICogIC0gZW5kIHNpemUgKy0gdmFyaWFuY2UgICAgICAgPGJyLz5cbiAqICAtIHN0YXJ0IGNvbG9yICstIHZhcmlhbmNlICAgIDxici8+XG4gKiAgLSBlbmQgY29sb3IgKy0gdmFyaWFuY2UgICAgICA8YnIvPlxuICogIC0gbGlmZSArLSB2YXJpYW5jZSAgICAgICAgICAgPGJyLz5cbiAqICAtIGJsZW5kaW5nIGZ1bmN0aW9uICAgICAgICAgIDxici8+XG4gKiAgLSB0ZXh0dXJlICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICogPGJyLz5cbiAqIGNvY29zMmQgYWxzbyBzdXBwb3J0cyBwYXJ0aWNsZXMgZ2VuZXJhdGVkIGJ5IFBhcnRpY2xlIERlc2lnbmVyIChodHRwOi8vcGFydGljbGVkZXNpZ25lci43MXNxdWFyZWQuY29tLykuPGJyLz5cbiAqICdSYWRpdXMgTW9kZScgaW4gUGFydGljbGUgRGVzaWduZXIgdXNlcyBhIGZpeGVkIGVtaXQgcmF0ZSBvZiAzMCBoei4gU2luY2UgdGhhdCBjYW4ndCBiZSBndWFyYXRlZWQgaW4gY29jb3MyZCwgIDxici8+XG4gKiBjb2NvczJkIHVzZXMgYSBhbm90aGVyIGFwcHJvYWNoLCBidXQgdGhlIHJlc3VsdHMgYXJlIGFsbW9zdCBpZGVudGljYWwuPGJyLz5cbiAqIGNvY29zMmQgc3VwcG9ydHMgYWxsIHRoZSB2YXJpYWJsZXMgdXNlZCBieSBQYXJ0aWNsZSBEZXNpZ25lciBwbHVzIGEgYml0IG1vcmU6ICA8YnIvPlxuICogIC0gc3Bpbm5pbmcgcGFydGljbGVzIChzdXBwb3J0ZWQgd2hlbiB1c2luZyBQYXJ0aWNsZVN5c3RlbSkgICAgICAgPGJyLz5cbiAqICAtIHRhbmdlbnRpYWwgYWNjZWxlcmF0aW9uIChHcmF2aXR5IG1vZGUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gKiAgLSByYWRpYWwgYWNjZWxlcmF0aW9uIChHcmF2aXR5IG1vZGUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICogIC0gcmFkaXVzIGRpcmVjdGlvbiAoUmFkaXVzIG1vZGUpIChQYXJ0aWNsZSBEZXNpZ25lciBzdXBwb3J0cyBvdXR3YXJkcyB0byBpbndhcmRzIGRpcmVjdGlvbiBvbmx5KSA8YnIvPlxuICogSXQgaXMgcG9zc2libGUgdG8gY3VzdG9taXplIGFueSBvZiB0aGUgYWJvdmUgbWVudGlvbmVkIHByb3BlcnRpZXMgaW4gcnVudGltZS4gRXhhbXBsZTogICA8YnIvPlxuICpcbiAqIEBleGFtcGxlXG4gKiBlbWl0dGVyLnJhZGlhbEFjY2VsID0gMTU7XG4gKiBlbWl0dGVyLnN0YXJ0U3BpbiA9IDA7XG4gKlxuICogQGNsYXNzIFBhcnRpY2xlU3lzdGVtXG4gKiBAZXh0ZW5kcyBSZW5kZXJDb21wb25lbnRcbiAqL1xudmFyIFBhcnRpY2xlU3lzdGVtID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5QYXJ0aWNsZVN5c3RlbScsXG4gICAgZXh0ZW5kczogUmVuZGVyQ29tcG9uZW50LFxuICAgIG1peGluczogW0JsZW5kRnVuY10sXG4gICAgZWRpdG9yOiBDQ19FRElUT1IgJiYge1xuICAgICAgICBtZW51OiAnaTE4bjpNQUlOX01FTlUuY29tcG9uZW50LnJlbmRlcmVycy9QYXJ0aWNsZVN5c3RlbScsXG4gICAgICAgIGluc3BlY3RvcjogJ3BhY2thZ2VzOi8vaW5zcGVjdG9yL2luc3BlY3RvcnMvY29tcHMvcGFydGljbGUtc3lzdGVtLmpzJyxcbiAgICAgICAgcGxheU9uRm9jdXM6IHRydWUsXG4gICAgICAgIGV4ZWN1dGVJbkVkaXRNb2RlOiB0cnVlXG4gICAgfSxcblxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcHJldmlld1RpbWVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZm9jdXNlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX3NpbXVsYXRvciA9IG5ldyBQYXJ0aWNsZVNpbXVsYXRvcih0aGlzKTtcblxuICAgICAgICAvLyBjb2xvcnNcbiAgICAgICAgdGhpcy5fc3RhcnRDb2xvciA9IGNjLmNvbG9yKDI1NSwgMjU1LCAyNTUsIDI1NSk7XG4gICAgICAgIHRoaXMuX3N0YXJ0Q29sb3JWYXIgPSBjYy5jb2xvcigwLCAwLCAwLCAwKTtcbiAgICAgICAgdGhpcy5fZW5kQ29sb3IgPSBjYy5jb2xvcigyNTUsIDI1NSwgMjU1LCAwKTtcbiAgICAgICAgdGhpcy5fZW5kQ29sb3JWYXIgPSBjYy5jb2xvcigwLCAwLCAwLCAwKTtcblxuICAgICAgICAvLyBUaGUgdGVtcG9yYXJ5IFNwcml0ZUZyYW1lIG9iamVjdCB1c2VkIGZvciB0aGUgcmVuZGVyZXIuIEJlY2F1c2UgdGhlcmUgaXMgbm8gY29ycmVzcG9uZGluZyBhc3NldCwgaXQgY2FuJ3QgYmUgc2VyaWFsaXplZC5cbiAgICAgICAgdGhpcy5fcmVuZGVyU3ByaXRlRnJhbWUgPSBudWxsO1xuICAgIH0sXG5cbiAgICBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXG4gICAgc3RhdGljczoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSBQYXJ0aWNsZSBlbWl0dGVyIGxpdmVzIGZvcmV2ZXIuXG4gICAgICAgICAqICEjemgg6KGo56S65Y+R5bCE5Zmo5rC45LmF5a2Y5ZyoXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBEVVJBVElPTl9JTkZJTklUWVxuICAgICAgICAgKiBAZGVmYXVsdCAtMVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgRFVSQVRJT05fSU5GSU5JVFk6IC0xLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSBzdGFydGluZyBzaXplIG9mIHRoZSBwYXJ0aWNsZSBpcyBlcXVhbCB0byB0aGUgZW5kaW5nIHNpemUuXG4gICAgICAgICAqICEjemgg6KGo56S657KS5a2Q55qE6LW35aeL5aSn5bCP562J5LqO57uT5p2f5aSn5bCP44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBTVEFSVF9TSVpFX0VRVUFMX1RPX0VORF9TSVpFXG4gICAgICAgICAqIEBkZWZhdWx0IC0xXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICBTVEFSVF9TSVpFX0VRVUFMX1RPX0VORF9TSVpFOiAtMSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgc3RhcnRpbmcgcmFkaXVzIG9mIHRoZSBwYXJ0aWNsZSBpcyBlcXVhbCB0byB0aGUgZW5kaW5nIHJhZGl1cy5cbiAgICAgICAgICogISN6aCDooajnpLrnspLlrZDnmoTotbflp4vljYrlvoTnrYnkuo7nu5PmnZ/ljYrlvoTjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFNUQVJUX1JBRElVU19FUVVBTF9UT19FTkRfUkFESVVTXG4gICAgICAgICAqIEBkZWZhdWx0IC0xXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHJlYWRvbmx5XG4gICAgICAgICAqL1xuICAgICAgICBTVEFSVF9SQURJVVNfRVFVQUxfVE9fRU5EX1JBRElVUzogLTEsXG5cbiAgICAgICAgRW1pdHRlck1vZGU6IEVtaXR0ZXJNb2RlLFxuICAgICAgICBQb3NpdGlvblR5cGU6IFBvc2l0aW9uVHlwZSxcblxuXG4gICAgICAgIF9QTkdSZWFkZXI6IFBOR1JlYWRlcixcbiAgICAgICAgX1RJRkZSZWFkZXI6IHRpZmZSZWFkZXIsXG4gICAgfSxcblxuICAgIC8vIEVESVRPUiBSRUxBVEVEIE1FVEhPRFNcblxuICAgIG9uRm9jdXNJbkVkaXRvcjogQ0NfRURJVE9SICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZm9jdXNlZCA9IHRydWU7XG4gICAgICAgIGxldCBjb21wb25lbnRzID0gZ2V0UGFydGljbGVDb21wb25lbnRzKHRoaXMubm9kZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29tcG9uZW50c1tpXS5fc3RhcnRQcmV2aWV3KCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25Mb3N0Rm9jdXNJbkVkaXRvcjogQ0NfRURJVE9SICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgY29tcG9uZW50cyA9IGdldFBhcnRpY2xlQ29tcG9uZW50cyh0aGlzLm5vZGUpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbXBvbmVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHNbaV0uX3N0b3BQcmV2aWV3KCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3N0YXJ0UHJldmlldzogQ0NfRURJVE9SICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJldmlldykge1xuICAgICAgICAgICAgdGhpcy5yZXNldFN5c3RlbSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9zdG9wUHJldmlldzogQ0NfRURJVE9SICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJldmlldykge1xuICAgICAgICAgICAgdGhpcy5yZXNldFN5c3RlbSgpO1xuICAgICAgICAgICAgdGhpcy5zdG9wU3lzdGVtKCk7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVSZW5kZXIoKTtcbiAgICAgICAgICAgIGNjLmVuZ2luZS5yZXBhaW50SW5FZGl0TW9kZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcmV2aWV3VGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fcHJldmlld1RpbWVyKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBMSUZFLUNZQ0xFIE1FVEhPRFNcblxuICAgIC8vIGp1c3QgdXNlZCB0byByZWFkIGRhdGEgZnJvbSAxLnhcbiAgICBfY29udmVydFRleHR1cmVUb1Nwcml0ZUZyYW1lOiBDQ19FRElUT1IgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fc3ByaXRlRnJhbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGV4dHVyZSA9IHRoaXMudGV4dHVyZTtcbiAgICAgICAgaWYgKCF0ZXh0dXJlIHx8ICF0ZXh0dXJlLl91dWlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBFZGl0b3IuYXNzZXRkYi5xdWVyeU1ldGFJbmZvQnlVdWlkKHRleHR1cmUuX3V1aWQsIGZ1bmN0aW9uIChlcnIsIG1ldGFJbmZvKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gRWRpdG9yLmVycm9yKGVycik7XG4gICAgICAgICAgICBsZXQgbWV0YSA9IEpTT04ucGFyc2UobWV0YUluZm8uanNvbik7XG4gICAgICAgICAgICBpZiAobWV0YS50eXBlID09PSAncmF3Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IE5vZGVVdGlscyA9IEVkaXRvci5yZXF1aXJlKCdhcHA6Ly9lZGl0b3IvcGFnZS9zY2VuZS11dGlscy91dGlscy9ub2RlJyk7XG4gICAgICAgICAgICAgICAgbGV0IG5vZGVQYXRoID0gTm9kZVV0aWxzLmdldE5vZGVQYXRoKF90aGlzLm5vZGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBFZGl0b3Iud2FybihgVGhlIHRleHR1cmUgJHttZXRhSW5mby5hc3NldFVybH0gdXNlZCBieSBwYXJ0aWNsZSAke25vZGVQYXRofSBkb2VzIG5vdCBjb250YWluIGFueSBTcHJpdGVGcmFtZSwgcGxlYXNlIHNldCB0aGUgdGV4dHVyZSB0eXBlIHRvIFNwcml0ZSBhbmQgcmVhc3NpZ24gdGhlIFNwcml0ZUZyYW1lIHRvIHRoZSBwYXJ0aWNsZSBjb21wb25lbnQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgVXJsID0gcmVxdWlyZSgnZmlyZS11cmwnKTtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IFVybC5iYXNlbmFtZU5vRXh0KG1ldGFJbmZvLmFzc2V0UGF0aCk7XG4gICAgICAgICAgICAgICAgbGV0IHV1aWQgPSBtZXRhLnN1Yk1ldGFzW25hbWVdLnV1aWQ7XG4gICAgICAgICAgICAgICAgY2MuQXNzZXRMaWJyYXJ5LmxvYWRBc3NldCh1dWlkLCBmdW5jdGlvbiAoZXJyLCBzcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gRWRpdG9yLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl90ZXh0dXJlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3ByaXRlRnJhbWUgPSBzcDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIF9fcHJlbG9hZDogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGlmIChDQ19FRElUT1IpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnZlcnRUZXh0dXJlVG9TcHJpdGVGcmFtZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2N1c3RvbSAmJiB0aGlzLnNwcml0ZUZyYW1lICYmICF0aGlzLl9yZW5kZXJTcHJpdGVGcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5fYXBwbHlTcHJpdGVGcmFtZSh0aGlzLnNwcml0ZUZyYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9maWxlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY3VzdG9tKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1pc3NDdXN0b21UZXh0dXJlID0gIXRoaXMuX3RleHR1cmU7XG4gICAgICAgICAgICAgICAgaWYgKG1pc3NDdXN0b21UZXh0dXJlKSB7IFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcHBseUZpbGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hcHBseUZpbGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhdXRvIHBsYXlcbiAgICAgICAgaWYgKCFDQ19FRElUT1IgfHwgY2MuZW5naW5lLmlzUGxheWluZykge1xuICAgICAgICAgICAgaWYgKHRoaXMucGxheU9uTG9hZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRTeXN0ZW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBVcGdyYWRlIGNvbG9yIHR5cGUgZnJvbSB2Mi4wLjBcbiAgICAgICAgaWYgKENDX0VESVRPUiAmJiAhKHRoaXMuX3N0YXJ0Q29sb3IgaW5zdGFuY2VvZiBjYy5Db2xvcikpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0Q29sb3IgPSBjYy5jb2xvcih0aGlzLl9zdGFydENvbG9yKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0Q29sb3JWYXIgPSBjYy5jb2xvcih0aGlzLl9zdGFydENvbG9yVmFyKTtcbiAgICAgICAgICAgIHRoaXMuX2VuZENvbG9yID0gY2MuY29sb3IodGhpcy5fZW5kQ29sb3IpO1xuICAgICAgICAgICAgdGhpcy5fZW5kQ29sb3JWYXIgPSBjYy5jb2xvcih0aGlzLl9lbmRDb2xvclZhcik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25FbmFibGUgKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICB0aGlzLm5vZGUuX3JlbmRlckZsYWcgJj0gflJlbmRlckZsb3cuRkxBR19SRU5ERVI7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlTWF0ZXJpYWwoKTtcbiAgICB9LFxuXG4gICAgb25EZXN0cm95ICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXV0b1JlbW92ZU9uRmluaXNoKSB7XG4gICAgICAgICAgICB0aGlzLmF1dG9SZW1vdmVPbkZpbmlzaCA9IGZhbHNlOyAgICAvLyBhbHJlYWR5IHJlbW92ZWRcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9idWZmZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pYSA9IG51bGw7XG4gICAgICAgIC8vIHJlc2V0IHV2IGRhdGEgc28gbmV4dCB0aW1lIHNpbXVsYXRvciB3aWxsIHJlZmlsbCBidWZmZXIgdXYgaW5mbyB3aGVuIGV4aXQgZWRpdCBtb2RlIGZyb20gcHJlZmFiLlxuICAgICAgICB0aGlzLl9zaW11bGF0b3IuX3V2RmlsbGVkID0gMDtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICB9LFxuICAgIFxuICAgIGxhdGVVcGRhdGUgKGR0KSB7XG4gICAgICAgIGlmICghdGhpcy5fc2ltdWxhdG9yLmZpbmlzaGVkICYmIHRoaXMuX2lhKSB7XG4gICAgICAgICAgICB0aGlzLl9zaW11bGF0b3Iuc3RlcChkdCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gQVBJU1xuXG4gICAgLypcbiAgICAgKiAhI2VuIEFkZCBhIHBhcnRpY2xlIHRvIHRoZSBlbWl0dGVyLlxuICAgICAqICEjemgg5re75Yqg5LiA5Liq57KS5a2Q5Yiw5Y+R5bCE5Zmo5Lit44CCXG4gICAgICogQG1ldGhvZCBhZGRQYXJ0aWNsZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgYWRkUGFydGljbGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gTm90IGltcGxlbWVudGVkXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gU3RvcCBlbWl0dGluZyBwYXJ0aWNsZXMuIFJ1bm5pbmcgcGFydGljbGVzIHdpbGwgY29udGludWUgdG8gcnVuIHVudGlsIHRoZXkgZGllLlxuICAgICAqICEjemgg5YGc5q2i5Y+R5bCE5Zmo5Y+R5bCE57KS5a2Q77yM5Y+R5bCE5Ye65Y6755qE57KS5a2Q5bCG57un57ut6L+Q6KGM77yM55u06Iez57KS5a2Q55Sf5ZG957uT5p2f44CCXG4gICAgICogQG1ldGhvZCBzdG9wU3lzdGVtXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBzdG9wIHBhcnRpY2xlIHN5c3RlbS5cbiAgICAgKiBteVBhcnRpY2xlU3lzdGVtLnN0b3BTeXN0ZW0oKTtcbiAgICAgKi9cbiAgICBzdG9wU3lzdGVtOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zaW11bGF0b3Iuc3RvcCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEtpbGwgYWxsIGxpdmluZyBwYXJ0aWNsZXMuXG4gICAgICogISN6aCDmnYDmrbvmiYDmnInlrZjlnKjnmoTnspLlrZDvvIznhLblkI7ph43mlrDlkK/liqjnspLlrZDlj5HlsITlmajjgIJcbiAgICAgKiBAbWV0aG9kIHJlc2V0U3lzdGVtXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBwbGF5IHBhcnRpY2xlIHN5c3RlbS5cbiAgICAgKiBteVBhcnRpY2xlU3lzdGVtLnJlc2V0U3lzdGVtKCk7XG4gICAgICovXG4gICAgcmVzZXRTeXN0ZW06IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zaW11bGF0b3IucmVzZXQoKTtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGVNYXRlcmlhbCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFdoZXRoZXIgb3Igbm90IHRoZSBzeXN0ZW0gaXMgZnVsbC5cbiAgICAgKiAhI3poIOWPkeWwhOWZqOS4reeykuWtkOaYr+WQpuWkp+S6juetieS6juiuvue9rueahOaAu+eykuWtkOaVsOmHj+OAglxuICAgICAqIEBtZXRob2QgaXNGdWxsXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0Z1bGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnBhcnRpY2xlQ291bnQgPj0gdGhpcy50b3RhbFBhcnRpY2xlcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0cyBhIG5ldyB0ZXh0dXJlIHdpdGggYSByZWN0LiBUaGUgcmVjdCBpcyBpbiB0ZXh0dXJlIHBvc2l0aW9uIGFuZCBzaXplLlxuICAgICAqIFBsZWFzZSB1c2Ugc3ByaXRlRnJhbWUgcHJvcGVydHkgaW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkIHNpbmNlIHYxLjlcbiAgICAgKiAhI3poIOiuvue9ruS4gOW8oOaWsOi0tOWbvuWSjOWFs+iBlOeahOefqeW9ouOAglxuICAgICAqIOivt+ebtOaOpeiuvue9riBzcHJpdGVGcmFtZSDlsZ7mgKfvvIzov5nkuKrlh73mlbDku44gdjEuOSDniYjmnKzlvIDlp4vlt7Lnu4/ooqvlup/lvINcbiAgICAgKiBAbWV0aG9kIHNldFRleHR1cmVXaXRoUmVjdFxuICAgICAqIEBwYXJhbSB7VGV4dHVyZTJEfSB0ZXh0dXJlXG4gICAgICogQHBhcmFtIHtSZWN0fSByZWN0XG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdjEuOVxuICAgICAqL1xuICAgIHNldFRleHR1cmVXaXRoUmVjdDogZnVuY3Rpb24gKHRleHR1cmUsIHJlY3QpIHtcbiAgICAgICAgaWYgKHRleHR1cmUgaW5zdGFuY2VvZiBjYy5UZXh0dXJlMkQpIHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlRnJhbWUgPSBuZXcgY2MuU3ByaXRlRnJhbWUodGV4dHVyZSwgcmVjdCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gUFJJVkFURSBNRVRIT0RTXG5cbiAgICBfYXBwbHlGaWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBmaWxlID0gdGhpcy5fZmlsZTtcbiAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGNjLmxvYWRlci5sb2FkKGZpbGUubmF0aXZlVXJsLCBmdW5jdGlvbiAoZXJyLCBjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVyciB8fCAhY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDYwMjkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghc2VsZi5pc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLl9wbGlzdEZpbGUgPSBmaWxlLm5hdGl2ZVVybDtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYuX2N1c3RvbSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbml0V2l0aERpY3Rpb25hcnkoY29udGVudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLl9zcHJpdGVGcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZS5zcHJpdGVGcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zcHJpdGVGcmFtZSA9IGZpbGUuc3ByaXRlRnJhbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VsZi5fY3VzdG9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9pbml0VGV4dHVyZVdpdGhEaWN0aW9uYXJ5KGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFzZWxmLl9yZW5kZXJTcHJpdGVGcmFtZSAmJiBzZWxmLl9zcHJpdGVGcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9hcHBseVNwcml0ZUZyYW1lKHNlbGYuc3ByaXRlRnJhbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9pbml0VGV4dHVyZVdpdGhEaWN0aW9uYXJ5OiBmdW5jdGlvbiAoZGljdCkge1xuICAgICAgICBsZXQgaW1nUGF0aCA9IGNjLnBhdGguY2hhbmdlQmFzZW5hbWUodGhpcy5fcGxpc3RGaWxlLCBkaWN0W1widGV4dHVyZUZpbGVOYW1lXCJdIHx8ICcnKTtcbiAgICAgICAgLy8gdGV4dHVyZVxuICAgICAgICBpZiAoZGljdFtcInRleHR1cmVGaWxlTmFtZVwiXSkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIGdldCB0aGUgdGV4dHVyZSBmcm9tIHRoZSBjYWNoZVxuICAgICAgICAgICAgdGV4dHVyZVV0aWwubG9hZEltYWdlKGltZ1BhdGgsIGZ1bmN0aW9uIChlcnJvciwgdGV4dHVyZSkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBkaWN0W1widGV4dHVyZUZpbGVOYW1lXCJdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0VGV4dHVyZVdpdGhEaWN0aW9uYXJ5KGRpY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcHJpdGVGcmFtZSA9IG5ldyBjYy5TcHJpdGVGcmFtZSh0ZXh0dXJlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfSBlbHNlIGlmIChkaWN0W1widGV4dHVyZUltYWdlRGF0YVwiXSkge1xuICAgICAgICAgICAgbGV0IHRleHR1cmVEYXRhID0gZGljdFtcInRleHR1cmVJbWFnZURhdGFcIl07XG5cbiAgICAgICAgICAgIGlmICh0ZXh0dXJlRGF0YSAmJiB0ZXh0dXJlRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRleCA9IGNjLmxvYWRlci5nZXRSZXMoaW1nUGF0aCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCF0ZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJ1ZmZlciA9IGNvZGVjLnVuemlwQmFzZTY0QXNBcnJheSh0ZXh0dXJlRGF0YSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYy5sb2dJRCg2MDMwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWFnZUZvcm1hdCA9IGdldEltYWdlRm9ybWF0QnlEYXRhKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZUZvcm1hdCAhPT0gbWFjcm8uSW1hZ2VGb3JtYXQuVElGRiAmJiBpbWFnZUZvcm1hdCAhPT0gbWFjcm8uSW1hZ2VGb3JtYXQuUE5HKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYy5sb2dJRCg2MDMxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBjYW52YXNPYmogPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZihpbWFnZUZvcm1hdCA9PT0gbWFjcm8uSW1hZ2VGb3JtYXQuUE5HKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBteVBuZ09iaiA9IG5ldyBQTkdSZWFkZXIoYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG15UG5nT2JqLnJlbmRlcihjYW52YXNPYmopO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGlmZlJlYWRlci5wYXJzZVRJRkYoYnVmZmVyLGNhbnZhc09iaik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGV4ID0gdGV4dHVyZVV0aWwuY2FjaGVJbWFnZShpbWdQYXRoLCBjYW52YXNPYmopO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIXRleClcbiAgICAgICAgICAgICAgICAgICAgY2MubG9nSUQoNjAzMik7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogVXNlIGNjLmxvYWRlciB0byBsb2FkIGFzeW5jaHJvbm91c2x5IHRoZSBTcHJpdGVGcmFtZSBvYmplY3QsIGF2b2lkIHVzaW5nIHRleHR1cmVVdGlsXG4gICAgICAgICAgICAgICAgdGhpcy5zcHJpdGVGcmFtZSA9IG5ldyBjYy5TcHJpdGVGcmFtZSh0ZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvLyBwYXJzaW5nIHByb2Nlc3NcbiAgICBfaW5pdFdpdGhEaWN0aW9uYXJ5OiBmdW5jdGlvbiAoZGljdCkge1xuICAgICAgICB0aGlzLnRvdGFsUGFydGljbGVzID0gcGFyc2VJbnQoZGljdFtcIm1heFBhcnRpY2xlc1wiXSB8fCAwKTtcblxuICAgICAgICAvLyBsaWZlIHNwYW5cbiAgICAgICAgdGhpcy5saWZlID0gcGFyc2VGbG9hdChkaWN0W1wicGFydGljbGVMaWZlc3BhblwiXSB8fCAwKTtcbiAgICAgICAgdGhpcy5saWZlVmFyID0gcGFyc2VGbG9hdChkaWN0W1wicGFydGljbGVMaWZlc3BhblZhcmlhbmNlXCJdIHx8IDApO1xuXG4gICAgICAgIC8vIGVtaXNzaW9uIFJhdGVcbiAgICAgICAgbGV0IF90ZW1wRW1pc3Npb25SYXRlID0gZGljdFtcImVtaXNzaW9uUmF0ZVwiXTtcbiAgICAgICAgaWYgKF90ZW1wRW1pc3Npb25SYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXNzaW9uUmF0ZSA9IF90ZW1wRW1pc3Npb25SYXRlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbWlzc2lvblJhdGUgPSBNYXRoLm1pbih0aGlzLnRvdGFsUGFydGljbGVzIC8gdGhpcy5saWZlLCBOdW1iZXIuTUFYX1ZBTFVFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGR1cmF0aW9uXG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBwYXJzZUZsb2F0KGRpY3RbXCJkdXJhdGlvblwiXSB8fCAwKTtcblxuICAgICAgICAvLyBibGVuZCBmdW5jdGlvblxuICAgICAgICB0aGlzLnNyY0JsZW5kRmFjdG9yID0gcGFyc2VJbnQoZGljdFtcImJsZW5kRnVuY1NvdXJjZVwiXSB8fCBtYWNyby5TUkNfQUxQSEEpO1xuICAgICAgICB0aGlzLmRzdEJsZW5kRmFjdG9yID0gcGFyc2VJbnQoZGljdFtcImJsZW5kRnVuY0Rlc3RpbmF0aW9uXCJdIHx8IG1hY3JvLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXG4gICAgICAgIC8vIGNvbG9yXG4gICAgICAgIGxldCBsb2NTdGFydENvbG9yID0gdGhpcy5fc3RhcnRDb2xvcjtcbiAgICAgICAgbG9jU3RhcnRDb2xvci5yID0gcGFyc2VGbG9hdChkaWN0W1wic3RhcnRDb2xvclJlZFwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jU3RhcnRDb2xvci5nID0gcGFyc2VGbG9hdChkaWN0W1wic3RhcnRDb2xvckdyZWVuXCJdIHx8IDApICogMjU1O1xuICAgICAgICBsb2NTdGFydENvbG9yLmIgPSBwYXJzZUZsb2F0KGRpY3RbXCJzdGFydENvbG9yQmx1ZVwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jU3RhcnRDb2xvci5hID0gcGFyc2VGbG9hdChkaWN0W1wic3RhcnRDb2xvckFscGhhXCJdIHx8IDApICogMjU1O1xuXG4gICAgICAgIGxldCBsb2NTdGFydENvbG9yVmFyID0gdGhpcy5fc3RhcnRDb2xvclZhcjtcbiAgICAgICAgbG9jU3RhcnRDb2xvclZhci5yID0gcGFyc2VGbG9hdChkaWN0W1wic3RhcnRDb2xvclZhcmlhbmNlUmVkXCJdIHx8IDApICogMjU1O1xuICAgICAgICBsb2NTdGFydENvbG9yVmFyLmcgPSBwYXJzZUZsb2F0KGRpY3RbXCJzdGFydENvbG9yVmFyaWFuY2VHcmVlblwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jU3RhcnRDb2xvclZhci5iID0gcGFyc2VGbG9hdChkaWN0W1wic3RhcnRDb2xvclZhcmlhbmNlQmx1ZVwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jU3RhcnRDb2xvclZhci5hID0gcGFyc2VGbG9hdChkaWN0W1wic3RhcnRDb2xvclZhcmlhbmNlQWxwaGFcIl0gfHwgMCkgKiAyNTU7XG5cbiAgICAgICAgbGV0IGxvY0VuZENvbG9yID0gdGhpcy5fZW5kQ29sb3I7XG4gICAgICAgIGxvY0VuZENvbG9yLnIgPSBwYXJzZUZsb2F0KGRpY3RbXCJmaW5pc2hDb2xvclJlZFwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jRW5kQ29sb3IuZyA9IHBhcnNlRmxvYXQoZGljdFtcImZpbmlzaENvbG9yR3JlZW5cIl0gfHwgMCkgKiAyNTU7XG4gICAgICAgIGxvY0VuZENvbG9yLmIgPSBwYXJzZUZsb2F0KGRpY3RbXCJmaW5pc2hDb2xvckJsdWVcIl0gfHwgMCkgKiAyNTU7XG4gICAgICAgIGxvY0VuZENvbG9yLmEgPSBwYXJzZUZsb2F0KGRpY3RbXCJmaW5pc2hDb2xvckFscGhhXCJdIHx8IDApICogMjU1O1xuXG4gICAgICAgIGxldCBsb2NFbmRDb2xvclZhciA9IHRoaXMuX2VuZENvbG9yVmFyO1xuICAgICAgICBsb2NFbmRDb2xvclZhci5yID0gcGFyc2VGbG9hdChkaWN0W1wiZmluaXNoQ29sb3JWYXJpYW5jZVJlZFwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jRW5kQ29sb3JWYXIuZyA9IHBhcnNlRmxvYXQoZGljdFtcImZpbmlzaENvbG9yVmFyaWFuY2VHcmVlblwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jRW5kQ29sb3JWYXIuYiA9IHBhcnNlRmxvYXQoZGljdFtcImZpbmlzaENvbG9yVmFyaWFuY2VCbHVlXCJdIHx8IDApICogMjU1O1xuICAgICAgICBsb2NFbmRDb2xvclZhci5hID0gcGFyc2VGbG9hdChkaWN0W1wiZmluaXNoQ29sb3JWYXJpYW5jZUFscGhhXCJdIHx8IDApICogMjU1O1xuXG4gICAgICAgIC8vIHBhcnRpY2xlIHNpemVcbiAgICAgICAgdGhpcy5zdGFydFNpemUgPSBwYXJzZUZsb2F0KGRpY3RbXCJzdGFydFBhcnRpY2xlU2l6ZVwiXSB8fCAwKTtcbiAgICAgICAgdGhpcy5zdGFydFNpemVWYXIgPSBwYXJzZUZsb2F0KGRpY3RbXCJzdGFydFBhcnRpY2xlU2l6ZVZhcmlhbmNlXCJdIHx8IDApO1xuICAgICAgICB0aGlzLmVuZFNpemUgPSBwYXJzZUZsb2F0KGRpY3RbXCJmaW5pc2hQYXJ0aWNsZVNpemVcIl0gfHwgMCk7XG4gICAgICAgIHRoaXMuZW5kU2l6ZVZhciA9IHBhcnNlRmxvYXQoZGljdFtcImZpbmlzaFBhcnRpY2xlU2l6ZVZhcmlhbmNlXCJdIHx8IDApO1xuXG4gICAgICAgIC8vIHBvc2l0aW9uXG4gICAgICAgIC8vIE1ha2UgZW1wdHkgcG9zaXRpb25UeXBlIHZhbHVlIGFuZCBvbGQgdmVyc2lvbiBjb21wYXRpYmxlXG4gICAgICAgIHRoaXMucG9zaXRpb25UeXBlID0gcGFyc2VGbG9hdChkaWN0Wydwb3NpdGlvblR5cGUnXSB8fCBQb3NpdGlvblR5cGUuUkVMQVRJVkUpO1xuICAgICAgICAvLyBmb3IgXG4gICAgICAgIHRoaXMuc291cmNlUG9zLnggPSAwO1xuICAgICAgICB0aGlzLnNvdXJjZVBvcy55ID0gMDtcbiAgICAgICAgdGhpcy5wb3NWYXIueCA9IHBhcnNlRmxvYXQoZGljdFtcInNvdXJjZVBvc2l0aW9uVmFyaWFuY2V4XCJdIHx8IDApO1xuICAgICAgICB0aGlzLnBvc1Zhci55ID0gcGFyc2VGbG9hdChkaWN0W1wic291cmNlUG9zaXRpb25WYXJpYW5jZXlcIl0gfHwgMCk7XG4gICAgICAgIFxuICAgICAgICAvLyBhbmdsZVxuICAgICAgICB0aGlzLmFuZ2xlID0gcGFyc2VGbG9hdChkaWN0W1wiYW5nbGVcIl0gfHwgMCk7XG4gICAgICAgIHRoaXMuYW5nbGVWYXIgPSBwYXJzZUZsb2F0KGRpY3RbXCJhbmdsZVZhcmlhbmNlXCJdIHx8IDApO1xuXG4gICAgICAgIC8vIFNwaW5uaW5nXG4gICAgICAgIHRoaXMuc3RhcnRTcGluID0gcGFyc2VGbG9hdChkaWN0W1wicm90YXRpb25TdGFydFwiXSB8fCAwKTtcbiAgICAgICAgdGhpcy5zdGFydFNwaW5WYXIgPSBwYXJzZUZsb2F0KGRpY3RbXCJyb3RhdGlvblN0YXJ0VmFyaWFuY2VcIl0gfHwgMCk7XG4gICAgICAgIHRoaXMuZW5kU3BpbiA9IHBhcnNlRmxvYXQoZGljdFtcInJvdGF0aW9uRW5kXCJdIHx8IDApO1xuICAgICAgICB0aGlzLmVuZFNwaW5WYXIgPSBwYXJzZUZsb2F0KGRpY3RbXCJyb3RhdGlvbkVuZFZhcmlhbmNlXCJdIHx8IDApO1xuXG4gICAgICAgIHRoaXMuZW1pdHRlck1vZGUgPSBwYXJzZUludChkaWN0W1wiZW1pdHRlclR5cGVcIl0gfHwgRW1pdHRlck1vZGUuR1JBVklUWSk7XG5cbiAgICAgICAgLy8gTW9kZSBBOiBHcmF2aXR5ICsgdGFuZ2VudGlhbCBhY2NlbCArIHJhZGlhbCBhY2NlbFxuICAgICAgICBpZiAodGhpcy5lbWl0dGVyTW9kZSA9PT0gRW1pdHRlck1vZGUuR1JBVklUWSkge1xuICAgICAgICAgICAgLy8gZ3Jhdml0eVxuICAgICAgICAgICAgdGhpcy5ncmF2aXR5LnggPSBwYXJzZUZsb2F0KGRpY3RbXCJncmF2aXR5eFwiXSB8fCAwKTtcbiAgICAgICAgICAgIHRoaXMuZ3Jhdml0eS55ID0gcGFyc2VGbG9hdChkaWN0W1wiZ3Jhdml0eXlcIl0gfHwgMCk7XG5cbiAgICAgICAgICAgIC8vIHNwZWVkXG4gICAgICAgICAgICB0aGlzLnNwZWVkID0gcGFyc2VGbG9hdChkaWN0W1wic3BlZWRcIl0gfHwgMCk7XG4gICAgICAgICAgICB0aGlzLnNwZWVkVmFyID0gcGFyc2VGbG9hdChkaWN0W1wic3BlZWRWYXJpYW5jZVwiXSB8fCAwKTtcblxuICAgICAgICAgICAgLy8gcmFkaWFsIGFjY2VsZXJhdGlvblxuICAgICAgICAgICAgdGhpcy5yYWRpYWxBY2NlbCA9IHBhcnNlRmxvYXQoZGljdFtcInJhZGlhbEFjY2VsZXJhdGlvblwiXSB8fCAwKTtcbiAgICAgICAgICAgIHRoaXMucmFkaWFsQWNjZWxWYXIgPSBwYXJzZUZsb2F0KGRpY3RbXCJyYWRpYWxBY2NlbFZhcmlhbmNlXCJdIHx8IDApO1xuXG4gICAgICAgICAgICAvLyB0YW5nZW50aWFsIGFjY2VsZXJhdGlvblxuICAgICAgICAgICAgdGhpcy50YW5nZW50aWFsQWNjZWwgPSBwYXJzZUZsb2F0KGRpY3RbXCJ0YW5nZW50aWFsQWNjZWxlcmF0aW9uXCJdIHx8IDApO1xuICAgICAgICAgICAgdGhpcy50YW5nZW50aWFsQWNjZWxWYXIgPSBwYXJzZUZsb2F0KGRpY3RbXCJ0YW5nZW50aWFsQWNjZWxWYXJpYW5jZVwiXSB8fCAwKTtcblxuICAgICAgICAgICAgLy8gcm90YXRpb24gaXMgZGlyXG4gICAgICAgICAgICBsZXQgbG9jUm90YXRpb25Jc0RpciA9IGRpY3RbXCJyb3RhdGlvbklzRGlyXCJdIHx8IFwiXCI7XG4gICAgICAgICAgICBpZiAobG9jUm90YXRpb25Jc0RpciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxvY1JvdGF0aW9uSXNEaXIgPSBsb2NSb3RhdGlvbklzRGlyLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdGF0aW9uSXNEaXIgPSAobG9jUm90YXRpb25Jc0RpciA9PT0gXCJ0cnVlXCIgfHwgbG9jUm90YXRpb25Jc0RpciA9PT0gXCIxXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3RhdGlvbklzRGlyID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5lbWl0dGVyTW9kZSA9PT0gRW1pdHRlck1vZGUuUkFESVVTKSB7XG4gICAgICAgICAgICAvLyBvciBNb2RlIEI6IHJhZGl1cyBtb3ZlbWVudFxuICAgICAgICAgICAgdGhpcy5zdGFydFJhZGl1cyA9IHBhcnNlRmxvYXQoZGljdFtcIm1heFJhZGl1c1wiXSB8fCAwKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRSYWRpdXNWYXIgPSBwYXJzZUZsb2F0KGRpY3RbXCJtYXhSYWRpdXNWYXJpYW5jZVwiXSB8fCAwKTtcbiAgICAgICAgICAgIHRoaXMuZW5kUmFkaXVzID0gcGFyc2VGbG9hdChkaWN0W1wibWluUmFkaXVzXCJdIHx8IDApO1xuICAgICAgICAgICAgdGhpcy5lbmRSYWRpdXNWYXIgPSBwYXJzZUZsb2F0KGRpY3RbXCJtaW5SYWRpdXNWYXJpYW5jZVwiXSB8fCAwKTtcbiAgICAgICAgICAgIHRoaXMucm90YXRlUGVyUyA9IHBhcnNlRmxvYXQoZGljdFtcInJvdGF0ZVBlclNlY29uZFwiXSB8fCAwKTtcbiAgICAgICAgICAgIHRoaXMucm90YXRlUGVyU1ZhciA9IHBhcnNlRmxvYXQoZGljdFtcInJvdGF0ZVBlclNlY29uZFZhcmlhbmNlXCJdIHx8IDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2Mud2FybklEKDYwMDkpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faW5pdFRleHR1cmVXaXRoRGljdGlvbmFyeShkaWN0KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIF9vblRleHR1cmVMb2FkZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdGV4dHVyZSA9IHRoaXMuX3JlbmRlclNwcml0ZUZyYW1lLmdldFRleHR1cmUoKTtcbiAgICAgICAgdGhpcy5fc2ltdWxhdG9yLnVwZGF0ZVVWcyh0cnVlKTtcbiAgICAgICAgLy8gUmVhY3RpdmF0ZSBtYXRlcmlhbFxuICAgICAgICB0aGlzLl9hY3RpdmF0ZU1hdGVyaWFsKCk7XG4gICAgfSxcblxuICAgIF9hcHBseVNwcml0ZUZyYW1lOiBmdW5jdGlvbiAob2xkRnJhbWUpIHtcbiAgICAgICAgaWYgKG9sZEZyYW1lICYmIG9sZEZyYW1lLm9mZikge1xuICAgICAgICAgICAgb2xkRnJhbWUub2ZmKCdsb2FkJywgdGhpcy5fb25UZXh0dXJlTG9hZGVkLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzcHJpdGVGcmFtZSA9IHRoaXMuX3JlbmRlclNwcml0ZUZyYW1lID0gdGhpcy5fcmVuZGVyU3ByaXRlRnJhbWUgfHwgdGhpcy5fc3ByaXRlRnJhbWU7XG4gICAgICAgIGlmIChzcHJpdGVGcmFtZSkge1xuICAgICAgICAgICAgaWYgKHNwcml0ZUZyYW1lLnRleHR1cmVMb2FkZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uVGV4dHVyZUxvYWRlZChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwcml0ZUZyYW1lLm9uY2UoJ2xvYWQnLCB0aGlzLl9vblRleHR1cmVMb2FkZWQsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHNwcml0ZUZyYW1lLmVuc3VyZUxvYWRUZXh0dXJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2FjdGl2YXRlTWF0ZXJpYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90ZXh0dXJlIHx8ICF0aGlzLl90ZXh0dXJlLmxvYWRlZCkge1xuICAgICAgICAgICAgdGhpcy5tYXJrRm9yQ3VzdG9tSUFSZW5kZXIoZmFsc2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3JlbmRlclNwcml0ZUZyYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXBwbHlTcHJpdGVGcmFtZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICghdGhpcy5faWEpIHtcbiAgICAgICAgICAgIFBhcnRpY2xlU3lzdGVtLl9hc3NlbWJsZXIuY3JlYXRlSUEodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWF0ZXJpYWwgPSB0aGlzLnNoYXJlZE1hdGVyaWFsc1swXTtcbiAgICAgICAgaWYgKCFtYXRlcmlhbCkge1xuICAgICAgICAgICAgbWF0ZXJpYWwgPSBNYXRlcmlhbC5nZXRJbnN0YW50aWF0ZWRCdWlsdGluTWF0ZXJpYWwoJzJkLXNwcml0ZScsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWF0ZXJpYWwgPSBNYXRlcmlhbC5nZXRJbnN0YW50aWF0ZWRNYXRlcmlhbChtYXRlcmlhbCwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbiBjYXNlIHRoZSBwbGlzdCBsb3N0IHBvc2l0aW9uVHlwZVxuICAgICAgICBtYXRlcmlhbC5kZWZpbmUoJ19VU0VfTU9ERUwnLCB0aGlzLl9wb3NpdGlvblR5cGUgIT09IFBvc2l0aW9uVHlwZS5GUkVFKTtcbiAgICAgICAgbWF0ZXJpYWwuc2V0UHJvcGVydHkoJ3RleHR1cmUnLCB0aGlzLl90ZXh0dXJlKTtcblxuICAgICAgICB0aGlzLnNldE1hdGVyaWFsKDAsIG1hdGVyaWFsKTtcbiAgICAgICAgdGhpcy5tYXJrRm9yQ3VzdG9tSUFSZW5kZXIodHJ1ZSk7XG4gICAgfSxcbiAgICBcbiAgICBfZmluaXNoZWRTaW11bGF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChDQ19FRElUT1IpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXZpZXcgJiYgdGhpcy5fZm9jdXNlZCAmJiAhdGhpcy5hY3RpdmUgJiYgIWNjLmVuZ2luZS5pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0U3lzdGVtKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXNldFN5c3RlbSgpO1xuICAgICAgICB0aGlzLnN0b3BTeXN0ZW0oKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlUmVuZGVyKCk7XG4gICAgICAgIGlmICh0aGlzLmF1dG9SZW1vdmVPbkZpbmlzaCAmJiB0aGlzLl9zdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbmNjLlBhcnRpY2xlU3lzdGVtID0gbW9kdWxlLmV4cG9ydHMgPSBQYXJ0aWNsZVN5c3RlbTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBtYWNybyA9IHJlcXVpcmUoJy4uL2NvcmUvcGxhdGZvcm0vQ0NNYWNybycpO1xudmFyIFBhcnRpY2xlQXNzZXQgPSByZXF1aXJlKCcuL0NDUGFydGljbGVBc3NldCcpO1xudmFyIFJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uL2NvcmUvY29tcG9uZW50cy9DQ1JlbmRlckNvbXBvbmVudCcpO1xudmFyIGNvZGVjID0gcmVxdWlyZSgnLi4vY29tcHJlc3Npb24vWmlwVXRpbHMnKTtcbnZhciBQTkdSZWFkZXIgPSByZXF1aXJlKCcuL0NDUE5HUmVhZGVyJyk7XG52YXIgdGlmZlJlYWRlciA9IHJlcXVpcmUoJy4vQ0NUSUZGUmVhZGVyJyk7XG52YXIgdGV4dHVyZVV0aWwgPSByZXF1aXJlKCcuLi9jb3JlL3V0aWxzL3RleHR1cmUtdXRpbCcpO1xudmFyIFJlbmRlckZsb3cgPSByZXF1aXJlKCcuLi9jb3JlL3JlbmRlcmVyL3JlbmRlci1mbG93Jyk7XG52YXIgUGFydGljbGVTaW11bGF0b3IgPSByZXF1aXJlKCcuL3BhcnRpY2xlLXNpbXVsYXRvcicpO1xudmFyIE1hdGVyaWFsID0gcmVxdWlyZSgnLi4vY29yZS9hc3NldHMvbWF0ZXJpYWwvQ0NNYXRlcmlhbCcpO1xudmFyIEJsZW5kRnVuYyA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbHMvYmxlbmQtZnVuYycpO1xuXG5mdW5jdGlvbiBnZXRJbWFnZUZvcm1hdEJ5RGF0YShpbWdEYXRhKSB7XG4gICAgLy8gaWYgaXQgaXMgYSBwbmcgZmlsZSBidWZmZXIuXG4gICAgaWYgKGltZ0RhdGEubGVuZ3RoID4gOCAmJiBpbWdEYXRhWzBdID09PSAweDg5ICYmIGltZ0RhdGFbMV0gPT09IDB4NTAgJiYgaW1nRGF0YVsyXSA9PT0gMHg0RSAmJiBpbWdEYXRhWzNdID09PSAweDQ3ICYmIGltZ0RhdGFbNF0gPT09IDB4MEQgJiYgaW1nRGF0YVs1XSA9PT0gMHgwQSAmJiBpbWdEYXRhWzZdID09PSAweDFBICYmIGltZ0RhdGFbN10gPT09IDB4MEEpIHtcbiAgICAgICAgcmV0dXJuIG1hY3JvLkltYWdlRm9ybWF0LlBORztcbiAgICB9XG5cbiAgICAvLyBpZiBpdCBpcyBhIHRpZmYgZmlsZSBidWZmZXIuXG4gICAgaWYgKGltZ0RhdGEubGVuZ3RoID4gMiAmJiAoaW1nRGF0YVswXSA9PT0gMHg0OSAmJiBpbWdEYXRhWzFdID09PSAweDQ5IHx8IGltZ0RhdGFbMF0gPT09IDB4NGQgJiYgaW1nRGF0YVsxXSA9PT0gMHg0ZCB8fCBpbWdEYXRhWzBdID09PSAweGZmICYmIGltZ0RhdGFbMV0gPT09IDB4ZDgpKSB7XG4gICAgICAgIHJldHVybiBtYWNyby5JbWFnZUZvcm1hdC5USUZGO1xuICAgIH1cbiAgICByZXR1cm4gbWFjcm8uSW1hZ2VGb3JtYXQuVU5LTk9XTjtcbn1cblxuLy9cbmZ1bmN0aW9uIGdldFBhcnRpY2xlQ29tcG9uZW50cyhub2RlKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50LFxuICAgICAgICBjb21wID0gbm9kZS5nZXRDb21wb25lbnQoY2MuUGFydGljbGVTeXN0ZW0pO1xuICAgIGlmICghcGFyZW50IHx8ICFjb21wKSB7XG4gICAgICAgIHJldHVybiBub2RlLmdldENvbXBvbmVudHNJbkNoaWxkcmVuKGNjLlBhcnRpY2xlU3lzdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldFBhcnRpY2xlQ29tcG9uZW50cyhwYXJlbnQpO1xufVxuXG4vKipcbiAqICEjZW4gRW51bSBmb3IgZW1pdHRlciBtb2Rlc1xuICogISN6aCDlj5HlsITmqKHlvI9cbiAqIEBlbnVtIFBhcnRpY2xlU3lzdGVtLkVtaXR0ZXJNb2RlXG4gKi9cbnZhciBFbWl0dGVyTW9kZSA9IGNjLkVudW0oe1xuICAgIC8qKlxuICAgICAqICEjZW4gVXNlcyBncmF2aXR5LCBzcGVlZCwgcmFkaWFsIGFuZCB0YW5nZW50aWFsIGFjY2VsZXJhdGlvbi5cbiAgICAgKiAhI3poIOmHjeWKm+aooeW8j++8jOaooeaLn+mHjeWKm++8jOWPr+iuqeeykuWtkOWbtOe7leS4gOS4quS4reW/g+eCueenu+i/keaIluenu+i/nOOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBHUkFWSVRZXG4gICAgICovXG4gICAgR1JBVklUWTogMCxcbiAgICAvKipcbiAgICAgKiAhI2VuIFVzZXMgcmFkaXVzIG1vdmVtZW50ICsgcm90YXRpb24uXG4gICAgICogISN6aCDljYrlvoTmqKHlvI/vvIzlj6/ku6Xkvb/nspLlrZDku6XlnIblnIjmlrnlvI/ml4vovazvvIzlroPkuZ/lj6/ku6XliJvpgKDonrrml4vmlYjmnpzorqnnspLlrZDmgKXpgJ/liY3ov5vmiJblkI7pgIDjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gUkFESVVTIC0gVXNlcyByYWRpdXMgbW92ZW1lbnQgKyByb3RhdGlvbi5cbiAgICAgKi9cbiAgICBSQURJVVM6IDFcbn0pO1xuXG4vKipcbiAqICEjZW4gRW51bSBmb3IgcGFydGljbGVzIG1vdmVtZW50IHR5cGUuXG4gKiAhI3poIOeykuWtkOS9jee9ruexu+Wei1xuICogQGVudW0gUGFydGljbGVTeXN0ZW0uUG9zaXRpb25UeXBlXG4gKi9cbnZhciBQb3NpdGlvblR5cGUgPSBjYy5FbnVtKHtcbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogTGl2aW5nIHBhcnRpY2xlcyBhcmUgYXR0YWNoZWQgdG8gdGhlIHdvcmxkIGFuZCBhcmUgdW5hZmZlY3RlZCBieSBlbWl0dGVyIHJlcG9zaXRpb25pbmcuXG4gICAgICogISN6aFxuICAgICAqIOiHqueUseaooeW8j++8jOebuOWvueS6juS4lueVjOWdkOagh++8jOS4jeS8mumaj+eykuWtkOiKgueCueenu+WKqOiAjOenu+WKqOOAgu+8iOWPr+S6p+eUn+eBq+eEsOOAgeiSuOaxveetieaViOaenO+8iVxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBGUkVFXG4gICAgICovXG4gICAgRlJFRTogMCxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBMaXZpbmcgcGFydGljbGVzIGFyZSBhdHRhY2hlZCB0byB0aGUgd29ybGQgYnV0IHdpbGwgZm9sbG93IHRoZSBlbWl0dGVyIHJlcG9zaXRpb25pbmcuPGJyLz5cbiAgICAgKiBVc2UgY2FzZTogQXR0YWNoIGFuIGVtaXR0ZXIgdG8gYW4gc3ByaXRlLCBhbmQgeW91IHdhbnQgdGhhdCB0aGUgZW1pdHRlciBmb2xsb3dzIHRoZSBzcHJpdGUuXG4gICAgICogISN6aFxuICAgICAqIOebuOWvueaooeW8j++8jOeykuWtkOS8mumaj+eItuiKgueCueenu+WKqOiAjOenu+WKqO+8jOWPr+eUqOS6juWItuS9nOenu+WKqOinkuiJsui6q+S4iueahOeJueaViOetieetieOAgu+8iOivpemAiemhueWcqCBDcmVhdG9yIOS4reaaguaXtuS4jeaUr+aMge+8iVxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBSRUxBVElWRVxuICAgICAqL1xuICAgIFJFTEFUSVZFOiAxLFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIExpdmluZyBwYXJ0aWNsZXMgYXJlIGF0dGFjaGVkIHRvIHRoZSBlbWl0dGVyIGFuZCBhcmUgdHJhbnNsYXRlZCBhbG9uZyB3aXRoIGl0LlxuICAgICAqICEjemhcbiAgICAgKiDmlbTnu4TmqKHlvI/vvIznspLlrZDot5/pmo/lj5HlsITlmajnp7vliqjjgILvvIjkuI3kvJrlj5HnlJ/mi5blsL7vvIlcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gR1JPVVBFRFxuICAgICAqL1xuICAgIEdST1VQRUQ6IDJcbn0pO1xuXG4vKipcbiAqIEBjbGFzcyBQYXJ0aWNsZVN5c3RlbVxuICovXG5cbnZhciBwcm9wZXJ0aWVzID0ge1xuICAgIC8qKlxuICAgICAqICEjZW4gUGxheSBwYXJ0aWNsZSBpbiBlZGl0IG1vZGUuXG4gICAgICogISN6aCDlnKjnvJbovpHlmajmqKHlvI/kuIvpooTop4jnspLlrZDvvIzlkK/nlKjlkI7pgInkuK3nspLlrZDml7bvvIznspLlrZDlsIboh6rliqjmkq3mlL7jgIJcbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHByZXZpZXdcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHByZXZpZXc6IHtcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgZWRpdG9yT25seTogdHJ1ZSxcbiAgICAgICAgbm90aWZ5OiBDQ19FRElUT1IgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yZXNldFN5c3RlbSgpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByZXZpZXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BTeXN0ZW0oKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVSZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNjLmVuZ2luZS5yZXBhaW50SW5FZGl0TW9kZSgpO1xuICAgICAgICB9LFxuICAgICAgICBhbmltYXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5wYXJ0aWNsZV9zeXN0ZW0ucHJldmlldydcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIElmIHNldCBjdXN0b20gdG8gdHJ1ZSwgdGhlbiB1c2UgY3VzdG9tIHByb3BlcnRpZXMgaW5zdGVhZG9mIHJlYWQgcGFydGljbGUgZmlsZS5cbiAgICAgKiAhI3poIOaYr+WQpuiHquWumuS5ieeykuWtkOWxnuaAp+OAglxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gY3VzdG9tXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBfY3VzdG9tOiBmYWxzZSxcbiAgICBjdXN0b206IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY3VzdG9tO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKENDX0VESVRPUiAmJiAhdmFsdWUgJiYgIXRoaXMuX2ZpbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2Mud2FybklEKDYwMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX2N1c3RvbSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXN0b20gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9hcHBseUZpbGUoKTtcbiAgICAgICAgICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmVuZ2luZS5yZXBhaW50SW5FZGl0TW9kZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0YWJsZTogZmFsc2UsXG4gICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQucGFydGljbGVfc3lzdGVtLmN1c3RvbSdcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgcGxpc3QgZmlsZS5cbiAgICAgKiAhI3poIHBsaXN0IOagvOW8j+eahOeykuWtkOmFjee9ruaWh+S7tuOAglxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBmaWxlXG4gICAgICogQGRlZmF1bHQgXCJcIlxuICAgICAqL1xuICAgIF9maWxlOiB7XG4gICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgIHR5cGU6IFBhcnRpY2xlQXNzZXRcbiAgICB9LFxuICAgIGZpbGU6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZmlsZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUsIGZvcmNlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZmlsZSAhPT0gdmFsdWUgfHwgQ0NfRURJVE9SICYmIGZvcmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcHBseUZpbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKENDX0VESVRPUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2MuZW5naW5lLnJlcGFpbnRJbkVkaXRNb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1c3RvbSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdHlwZTogUGFydGljbGVBc3NldCxcbiAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5wYXJ0aWNsZV9zeXN0ZW0uZmlsZSdcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTcHJpdGVGcmFtZSB1c2VkIGZvciBwYXJ0aWNsZXMgZGlzcGxheVxuICAgICAqICEjemgg55So5LqO57KS5a2Q5ZGI546w55qEIFNwcml0ZUZyYW1lXG4gICAgICogQHByb3BlcnR5IHNwcml0ZUZyYW1lXG4gICAgICogQHR5cGUge1Nwcml0ZUZyYW1lfVxuICAgICAqL1xuICAgIF9zcHJpdGVGcmFtZToge1xuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZVxuICAgIH0sXG4gICAgc3ByaXRlRnJhbWU6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3ByaXRlRnJhbWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlLCBmb3JjZSkge1xuICAgICAgICAgICAgdmFyIGxhc3RTcHJpdGUgPSB0aGlzLl9yZW5kZXJTcHJpdGVGcmFtZTtcbiAgICAgICAgICAgIGlmIChDQ19FRElUT1IpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZvcmNlICYmIGxhc3RTcHJpdGUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0U3ByaXRlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyU3ByaXRlRnJhbWUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS5fdXVpZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nwcml0ZUZyYW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgobGFzdFNwcml0ZSAmJiBsYXN0U3ByaXRlLmdldFRleHR1cmUoKSkgIT09ICh2YWx1ZSAmJiB2YWx1ZS5nZXRUZXh0dXJlKCkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dHVyZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXBwbHlTcHJpdGVGcmFtZShsYXN0U3ByaXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChDQ19FRElUT1IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUuZW1pdCgnc3ByaXRlZnJhbWUtY2hhbmdlZCcsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZSxcbiAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5wYXJ0aWNsZV9zeXN0ZW0uc3ByaXRlRnJhbWUnXG4gICAgfSxcblxuICAgIC8vIGp1c3QgdXNlZCB0byByZWFkIGRhdGEgZnJvbSAxLnhcbiAgICBfdGV4dHVyZToge1xuICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICB0eXBlOiBjYy5UZXh0dXJlMkQsXG4gICAgICAgIGVkaXRvck9ubHk6IHRydWVcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUZXh0dXJlIG9mIFBhcnRpY2xlIFN5c3RlbSwgcmVhZG9ubHksIHBsZWFzZSB1c2Ugc3ByaXRlRnJhbWUgdG8gc2V0dXAgbmV3IHRleHR1cmXjgIJcbiAgICAgKiAhI3poIOeykuWtkOi0tOWbvu+8jOWPquivu+WxnuaAp++8jOivt+S9v+eUqCBzcHJpdGVGcmFtZSDlsZ7mgKfmnaXmm7/mjaLotLTlm77jgIJcbiAgICAgKiBAcHJvcGVydHkgdGV4dHVyZVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgdGV4dHVyZToge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0dXJlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDYwMTcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiBjYy5UZXh0dXJlMkQsXG4gICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQucGFydGljbGVfc3lzdGVtLnRleHR1cmUnLFxuICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIGFuaW1hdGFibGU6IGZhbHNlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gQ3VycmVudCBxdWFudGl0eSBvZiBwYXJ0aWNsZXMgdGhhdCBhcmUgYmVpbmcgc2ltdWxhdGVkLlxuICAgICAqICEjemgg5b2T5YmN5pKt5pS+55qE57KS5a2Q5pWw6YeP44CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHBhcnRpY2xlQ291bnRcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBwYXJ0aWNsZUNvdW50OiB7XG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaW11bGF0b3IucGFydGljbGVzLmxlbmd0aDtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkb25seTogdHJ1ZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEluZGljYXRlIHdoZXRoZXIgdGhlIHN5c3RlbSBzaW11bGF0aW9uIGhhdmUgc3RvcHBlZC5cbiAgICAgKiAhI3poIOaMh+ekuueykuWtkOaSreaUvuaYr+WQpuWujOavleOAglxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gc3RvcHBlZFxuICAgICAqL1xuICAgIF9zdG9wcGVkOiB0cnVlLFxuICAgIHN0b3BwZWQ6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RvcHBlZDtcbiAgICAgICAgfSxcblxuICAgICAgICBhbmltYXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIHBhcnRpY2xlIHN5c3RlbSB3aWxsIGF1dG9tYXRpY2FsbHkgc3RhcnQgcGxheWluZyBvbiBvbkxvYWQuXG4gICAgICogISN6aCDlpoLmnpzorr7nva7kuLogdHJ1ZSDov5DooYzml7bkvJroh6rliqjlj5HlsITnspLlrZDjgIJcbiAgICAgKiBAcHJvcGVydHkgcGxheU9uTG9hZFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBwbGF5T25Mb2FkOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBJbmRpY2F0ZSB3aGV0aGVyIHRoZSBvd25lciBub2RlIHdpbGwgYmUgYXV0by1yZW1vdmVkIHdoZW4gaXQgaGFzIG5vIHBhcnRpY2xlcyBsZWZ0LlxuICAgICAqICEjemgg57KS5a2Q5pKt5pS+5a6M5q+V5ZCO6Ieq5Yqo6ZSA5q+B5omA5Zyo55qE6IqC54K544CCXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBhdXRvUmVtb3ZlT25GaW5pc2hcbiAgICAgKi9cbiAgICBhdXRvUmVtb3ZlT25GaW5pc2g6IHtcbiAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgIGFuaW1hdGFibGU6IGZhbHNlLFxuICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnBhcnRpY2xlX3N5c3RlbS5hdXRvUmVtb3ZlT25GaW5pc2gnXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gSW5kaWNhdGUgd2hldGhlciB0aGUgcGFydGljbGUgc3lzdGVtIGlzIGFjdGl2YXRlZC5cbiAgICAgKiAhI3poIOaYr+WQpua/gOa0u+eykuWtkOOAglxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gYWN0aXZlXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgYWN0aXZlOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpbXVsYXRvci5hY3RpdmU7XG4gICAgICAgIH0sXG4gICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gTWF4aW11bSBwYXJ0aWNsZXMgb2YgdGhlIHN5c3RlbS5cbiAgICAgKiAhI3poIOeykuWtkOacgOWkp+aVsOmHj+OAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0b3RhbFBhcnRpY2xlc1xuICAgICAqIEBkZWZhdWx0IDE1MFxuICAgICAqL1xuICAgIHRvdGFsUGFydGljbGVzOiAxNTAsXG4gICAgLyoqXG4gICAgICogISNlbiBIb3cgbWFueSBzZWNvbmRzIHRoZSBlbWl0dGVyIHdpbCBydW4uIC0xIG1lYW5zICdmb3JldmVyJy5cbiAgICAgKiAhI3poIOWPkeWwhOWZqOeUn+WtmOaXtumXtO+8jOWNleS9jeenku+8jC0x6KGo56S65oyB57ut5Y+R5bCE44CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGR1cmF0aW9uXG4gICAgICogQGRlZmF1bHQgUGFydGljbGVTeXN0ZW0uRFVSQVRJT05fSU5GSU5JVFlcbiAgICAgKi9cbiAgICBkdXJhdGlvbjogLTEsXG4gICAgLyoqXG4gICAgICogISNlbiBFbWlzc2lvbiByYXRlIG9mIHRoZSBwYXJ0aWNsZXMuXG4gICAgICogISN6aCDmr4/np5Llj5HlsITnmoTnspLlrZDmlbDnm67jgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gZW1pc3Npb25SYXRlXG4gICAgICogQGRlZmF1bHQgMTBcbiAgICAgKi9cbiAgICBlbWlzc2lvblJhdGU6IDEwLFxuICAgIC8qKlxuICAgICAqICEjZW4gTGlmZSBvZiBlYWNoIHBhcnRpY2xlIHNldHRlci5cbiAgICAgKiAhI3poIOeykuWtkOeahOi/kOihjOaXtumXtOOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBsaWZlXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIGxpZmU6IDEsXG4gICAgLyoqXG4gICAgICogISNlbiBWYXJpYXRpb24gb2YgbGlmZS5cbiAgICAgKiAhI3poIOeykuWtkOeahOi/kOihjOaXtumXtOWPmOWMluiMg+WbtOOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBsaWZlVmFyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIGxpZmVWYXI6IDAsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFN0YXJ0IGNvbG9yIG9mIGVhY2ggcGFydGljbGUuXG4gICAgICogISN6aCDnspLlrZDliJ3lp4vpopzoibLjgIJcbiAgICAgKiBAcHJvcGVydHkge2NjLkNvbG9yfSBzdGFydENvbG9yXG4gICAgICogQGRlZmF1bHQge3I6IDI1NSwgZzogMjU1LCBiOiAyNTUsIGE6IDI1NX1cbiAgICAgKi9cbiAgICBfc3RhcnRDb2xvcjogbnVsbCxcbiAgICBzdGFydENvbG9yOiB7XG4gICAgICAgIHR5cGU6IGNjLkNvbG9yLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGFydENvbG9yO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0Q29sb3IuciA9IHZhbC5yO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRDb2xvci5nID0gdmFsLmc7XG4gICAgICAgICAgICB0aGlzLl9zdGFydENvbG9yLmIgPSB2YWwuYjtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0Q29sb3IuYSA9IHZhbC5hO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiAhI2VuIFZhcmlhdGlvbiBvZiB0aGUgc3RhcnQgY29sb3IuXG4gICAgICogISN6aCDnspLlrZDliJ3lp4vpopzoibLlj5jljJbojIPlm7TjgIJcbiAgICAgKiBAcHJvcGVydHkge2NjLkNvbG9yfSBzdGFydENvbG9yVmFyXG4gICAgICogQGRlZmF1bHQge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDB9XG4gICAgICovXG4gICAgX3N0YXJ0Q29sb3JWYXI6IG51bGwsXG4gICAgc3RhcnRDb2xvclZhcjoge1xuICAgICAgICB0eXBlOiBjYy5Db2xvcixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnRDb2xvclZhcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGFydENvbG9yVmFyLnIgPSB2YWwucjtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0Q29sb3JWYXIuZyA9IHZhbC5nO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRDb2xvclZhci5iID0gdmFsLmI7XG4gICAgICAgICAgICB0aGlzLl9zdGFydENvbG9yVmFyLmEgPSB2YWwuYTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogISNlbiBFbmRpbmcgY29sb3Igb2YgZWFjaCBwYXJ0aWNsZS5cbiAgICAgKiAhI3poIOeykuWtkOe7k+adn+minOiJsuOAglxuICAgICAqIEBwcm9wZXJ0eSB7Y2MuQ29sb3J9IGVuZENvbG9yXG4gICAgICogQGRlZmF1bHQge3I6IDI1NSwgZzogMjU1LCBiOiAyNTUsIGE6IDB9XG4gICAgICovXG4gICAgX2VuZENvbG9yOiBudWxsLFxuICAgIGVuZENvbG9yOiB7XG4gICAgICAgIHR5cGU6IGNjLkNvbG9yLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbmRDb2xvcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmRDb2xvci5yID0gdmFsLnI7XG4gICAgICAgICAgICB0aGlzLl9lbmRDb2xvci5nID0gdmFsLmc7XG4gICAgICAgICAgICB0aGlzLl9lbmRDb2xvci5iID0gdmFsLmI7XG4gICAgICAgICAgICB0aGlzLl9lbmRDb2xvci5hID0gdmFsLmE7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqICEjZW4gVmFyaWF0aW9uIG9mIHRoZSBlbmQgY29sb3IuXG4gICAgICogISN6aCDnspLlrZDnu5PmnZ/popzoibLlj5jljJbojIPlm7TjgIJcbiAgICAgKiBAcHJvcGVydHkge2NjLkNvbG9yfSBlbmRDb2xvclZhclxuICAgICAqIEBkZWZhdWx0IHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAwfVxuICAgICAqL1xuICAgIF9lbmRDb2xvclZhcjogbnVsbCxcbiAgICBlbmRDb2xvclZhcjoge1xuICAgICAgICB0eXBlOiBjYy5Db2xvcixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5kQ29sb3JWYXI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgICAgICAgdGhpcy5fZW5kQ29sb3JWYXIuciA9IHZhbC5yO1xuICAgICAgICAgICAgdGhpcy5fZW5kQ29sb3JWYXIuZyA9IHZhbC5nO1xuICAgICAgICAgICAgdGhpcy5fZW5kQ29sb3JWYXIuYiA9IHZhbC5iO1xuICAgICAgICAgICAgdGhpcy5fZW5kQ29sb3JWYXIuYSA9IHZhbC5hO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gQW5nbGUgb2YgZWFjaCBwYXJ0aWNsZSBzZXR0ZXIuXG4gICAgICogISN6aCDnspLlrZDop5LluqbjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gYW5nbGVcbiAgICAgKiBAZGVmYXVsdCA5MFxuICAgICAqL1xuICAgIGFuZ2xlOiA5MCxcbiAgICAvKipcbiAgICAgKiAhI2VuIFZhcmlhdGlvbiBvZiBhbmdsZSBvZiBlYWNoIHBhcnRpY2xlIHNldHRlci5cbiAgICAgKiAhI3poIOeykuWtkOinkuW6puWPmOWMluiMg+WbtOOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBhbmdsZVZhclxuICAgICAqIEBkZWZhdWx0IDIwXG4gICAgICovXG4gICAgYW5nbGVWYXI6IDIwLFxuICAgIC8qKlxuICAgICAqICEjZW4gU3RhcnQgc2l6ZSBpbiBwaXhlbHMgb2YgZWFjaCBwYXJ0aWNsZS5cbiAgICAgKiAhI3poIOeykuWtkOeahOWIneWni+Wkp+Wwj+OAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzdGFydFNpemVcbiAgICAgKiBAZGVmYXVsdCA1MFxuICAgICAqL1xuICAgIHN0YXJ0U2l6ZTogNTAsXG4gICAgLyoqXG4gICAgICogISNlbiBWYXJpYXRpb24gb2Ygc3RhcnQgc2l6ZSBpbiBwaXhlbHMuXG4gICAgICogISN6aCDnspLlrZDliJ3lp4vlpKflsI/nmoTlj5jljJbojIPlm7TjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gc3RhcnRTaXplVmFyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHN0YXJ0U2l6ZVZhcjogMCxcbiAgICAvKipcbiAgICAgKiAhI2VuIEVuZCBzaXplIGluIHBpeGVscyBvZiBlYWNoIHBhcnRpY2xlLlxuICAgICAqICEjemgg57KS5a2Q57uT5p2f5pe255qE5aSn5bCP44CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGVuZFNpemVcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgZW5kU2l6ZTogMCxcbiAgICAvKipcbiAgICAgKiAhI2VuIFZhcmlhdGlvbiBvZiBlbmQgc2l6ZSBpbiBwaXhlbHMuXG4gICAgICogISN6aCDnspLlrZDnu5PmnZ/lpKflsI/nmoTlj5jljJbojIPlm7TjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gZW5kU2l6ZVZhclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBlbmRTaXplVmFyOiAwLFxuICAgIC8qKlxuICAgICAqICEjZW4gU3RhcnQgYW5nbGUgb2YgZWFjaCBwYXJ0aWNsZS5cbiAgICAgKiAhI3poIOeykuWtkOW8gOWni+iHquaXi+inkuW6puOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzdGFydFNwaW5cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgc3RhcnRTcGluOiAwLFxuICAgIC8qKlxuICAgICAqICEjZW4gVmFyaWF0aW9uIG9mIHN0YXJ0IGFuZ2xlLlxuICAgICAqICEjemgg57KS5a2Q5byA5aeL6Ieq5peL6KeS5bqm5Y+Y5YyW6IyD5Zu044CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHN0YXJ0U3BpblZhclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBzdGFydFNwaW5WYXI6IDAsXG4gICAgLyoqXG4gICAgICogISNlbiBFbmQgYW5nbGUgb2YgZWFjaCBwYXJ0aWNsZS5cbiAgICAgKiAhI3poIOeykuWtkOe7k+adn+iHquaXi+inkuW6puOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBlbmRTcGluXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIGVuZFNwaW46IDAsXG4gICAgLyoqXG4gICAgICogISNlbiBWYXJpYXRpb24gb2YgZW5kIGFuZ2xlLlxuICAgICAqICEjemgg57KS5a2Q57uT5p2f6Ieq5peL6KeS5bqm5Y+Y5YyW6IyD5Zu044CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGVuZFNwaW5WYXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgZW5kU3BpblZhcjogMCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gU291cmNlIHBvc2l0aW9uIG9mIHRoZSBlbWl0dGVyLlxuICAgICAqICEjemgg5Y+R5bCE5Zmo5L2N572u44CCXG4gICAgICogQHByb3BlcnR5IHtWZWMyfSBzb3VyY2VQb3NcbiAgICAgKiBAZGVmYXVsdCBjYy5WZWMyLlpFUk9cbiAgICAgKi9cbiAgICBzb3VyY2VQb3M6IGNjLlZlYzIuWkVSTyxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVmFyaWF0aW9uIG9mIHNvdXJjZSBwb3NpdGlvbi5cbiAgICAgKiAhI3poIOWPkeWwhOWZqOS9jee9rueahOWPmOWMluiMg+WbtOOAgu+8iOaoquWQkeWSjOe6teWQke+8iVxuICAgICAqIEBwcm9wZXJ0eSB7VmVjMn0gcG9zVmFyXG4gICAgICogQGRlZmF1bHQgY2MuVmVjMi5aRVJPXG4gICAgICovXG4gICAgcG9zVmFyOiBjYy5WZWMyLlpFUk8sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFBhcnRpY2xlcyBtb3ZlbWVudCB0eXBlLlxuICAgICAqICEjemgg57KS5a2Q5L2N572u57G75Z6L44CCXG4gICAgICogQHByb3BlcnR5IHtQYXJ0aWNsZVN5c3RlbS5Qb3NpdGlvblR5cGV9IHBvc2l0aW9uVHlwZVxuICAgICAqIEBkZWZhdWx0IFBhcnRpY2xlU3lzdGVtLlBvc2l0aW9uVHlwZS5GUkVFXG4gICAgICovXG4gICAgX3Bvc2l0aW9uVHlwZToge1xuICAgICAgICBkZWZhdWx0OiBQb3NpdGlvblR5cGUuRlJFRSxcbiAgICAgICAgZm9ybWVybHlTZXJpYWxpemVkQXM6IFwicG9zaXRpb25UeXBlXCJcbiAgICB9LFxuXG4gICAgcG9zaXRpb25UeXBlOiB7XG4gICAgICAgIHR5cGU6IFBvc2l0aW9uVHlwZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb25UeXBlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IHRoaXMuZ2V0TWF0ZXJpYWwoMCk7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC5kZWZpbmUoJ19VU0VfTU9ERUwnLCB2YWwgIT09IFBvc2l0aW9uVHlwZS5GUkVFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uVHlwZSA9IHZhbDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFBhcnRpY2xlcyBlbWl0dGVyIG1vZGVzLlxuICAgICAqICEjemgg5Y+R5bCE5Zmo57G75Z6L44CCXG4gICAgICogQHByb3BlcnR5IHtQYXJ0aWNsZVN5c3RlbS5FbWl0dGVyTW9kZX0gZW1pdHRlck1vZGVcbiAgICAgKiBAZGVmYXVsdCBQYXJ0aWNsZVN5c3RlbS5FbWl0dGVyTW9kZS5HUkFWSVRZXG4gICAgICovXG4gICAgZW1pdHRlck1vZGU6IHtcbiAgICAgICAgZGVmYXVsdDogRW1pdHRlck1vZGUuR1JBVklUWSxcbiAgICAgICAgdHlwZTogRW1pdHRlck1vZGVcbiAgICB9LFxuXG4gICAgLy8gR1JBVklUWSBNT0RFXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEdyYXZpdHkgb2YgdGhlIGVtaXR0ZXIuXG4gICAgICogISN6aCDph43lipvjgIJcbiAgICAgKiBAcHJvcGVydHkge1ZlYzJ9IGdyYXZpdHlcbiAgICAgKiBAZGVmYXVsdCBjYy5WZWMyLlpFUk9cbiAgICAgKi9cbiAgICBncmF2aXR5OiBjYy5WZWMyLlpFUk8sXG4gICAgLyoqXG4gICAgICogISNlbiBTcGVlZCBvZiB0aGUgZW1pdHRlci5cbiAgICAgKiAhI3poIOmAn+W6puOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBzcGVlZFxuICAgICAqIEBkZWZhdWx0IDE4MFxuICAgICAqL1xuICAgIHNwZWVkOiAxODAsXG4gICAgLyoqXG4gICAgICogISNlbiBWYXJpYXRpb24gb2YgdGhlIHNwZWVkLlxuICAgICAqICEjemgg6YCf5bqm5Y+Y5YyW6IyD5Zu044CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHNwZWVkVmFyXG4gICAgICogQGRlZmF1bHQgNTBcbiAgICAgKi9cbiAgICBzcGVlZFZhcjogNTAsXG4gICAgLyoqXG4gICAgICogISNlbiBUYW5nZW50aWFsIGFjY2VsZXJhdGlvbiBvZiBlYWNoIHBhcnRpY2xlLiBPbmx5IGF2YWlsYWJsZSBpbiAnR3Jhdml0eScgbW9kZS5cbiAgICAgKiAhI3poIOavj+S4queykuWtkOeahOWIh+WQkeWKoOmAn+W6pu+8jOWNs+WeguebtOS6jumHjeWKm+aWueWQkeeahOWKoOmAn+W6pu+8jOWPquacieWcqOmHjeWKm+aooeW8j+S4i+WPr+eUqOOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB0YW5nZW50aWFsQWNjZWxcbiAgICAgKiBAZGVmYXVsdCA4MFxuICAgICAqL1xuICAgIHRhbmdlbnRpYWxBY2NlbDogODAsXG4gICAgLyoqXG4gICAgICogISNlbiBWYXJpYXRpb24gb2YgdGhlIHRhbmdlbnRpYWwgYWNjZWxlcmF0aW9uLlxuICAgICAqICEjemgg5q+P5Liq57KS5a2Q55qE5YiH5ZCR5Yqg6YCf5bqm5Y+Y5YyW6IyD5Zu044CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHRhbmdlbnRpYWxBY2NlbFZhclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0YW5nZW50aWFsQWNjZWxWYXI6IDAsXG4gICAgLyoqXG4gICAgICogISNlbiBBY2NlbGVyYXRpb24gb2YgZWFjaCBwYXJ0aWNsZS4gT25seSBhdmFpbGFibGUgaW4gJ0dyYXZpdHknIG1vZGUuXG4gICAgICogISN6aCDnspLlrZDlvoTlkJHliqDpgJ/luqbvvIzljbPlubPooYzkuo7ph43lipvmlrnlkJHnmoTliqDpgJ/luqbvvIzlj6rmnInlnKjph43lipvmqKHlvI/kuIvlj6/nlKjjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gcmFkaWFsQWNjZWxcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgcmFkaWFsQWNjZWw6IDAsXG4gICAgLyoqXG4gICAgICogISNlbiBWYXJpYXRpb24gb2YgdGhlIHJhZGlhbCBhY2NlbGVyYXRpb24uXG4gICAgICogISN6aCDnspLlrZDlvoTlkJHliqDpgJ/luqblj5jljJbojIPlm7TjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gcmFkaWFsQWNjZWxWYXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgcmFkaWFsQWNjZWxWYXI6IDAsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEluZGljYXRlIHdoZXRoZXIgdGhlIHJvdGF0aW9uIG9mIGVhY2ggcGFydGljbGUgZXF1YWxzIHRvIGl0cyBkaXJlY3Rpb24uIE9ubHkgYXZhaWxhYmxlIGluICdHcmF2aXR5JyBtb2RlLlxuICAgICAqICEjemgg5q+P5Liq57KS5a2Q55qE5peL6L2s5piv5ZCm562J5LqO5YW25pa55ZCR77yM5Y+q5pyJ5Zyo6YeN5Yqb5qih5byP5LiL5Y+v55So44CCXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSByb3RhdGlvbklzRGlyXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICByb3RhdGlvbklzRGlyOiBmYWxzZSxcblxuICAgIC8vIFJBRElVUyBNT0RFXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFN0YXJ0aW5nIHJhZGl1cyBvZiB0aGUgcGFydGljbGVzLiBPbmx5IGF2YWlsYWJsZSBpbiAnUmFkaXVzJyBtb2RlLlxuICAgICAqICEjemgg5Yid5aeL5Y2K5b6E77yM6KGo56S657KS5a2Q5Ye655Sf5pe255u45a+55Y+R5bCE5Zmo55qE6Led56a777yM5Y+q5pyJ5Zyo5Y2K5b6E5qih5byP5LiL5Y+v55So44CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHN0YXJ0UmFkaXVzXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHN0YXJ0UmFkaXVzOiAwLFxuICAgIC8qKlxuICAgICAqICEjZW4gVmFyaWF0aW9uIG9mIHRoZSBzdGFydGluZyByYWRpdXMuXG4gICAgICogISN6aCDliJ3lp4vljYrlvoTlj5jljJbojIPlm7TjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gc3RhcnRSYWRpdXNWYXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgc3RhcnRSYWRpdXNWYXI6IDAsXG4gICAgLyoqXG4gICAgICogISNlbiBFbmRpbmcgcmFkaXVzIG9mIHRoZSBwYXJ0aWNsZXMuIE9ubHkgYXZhaWxhYmxlIGluICdSYWRpdXMnIG1vZGUuXG4gICAgICogISN6aCDnu5PmnZ/ljYrlvoTvvIzlj6rmnInlnKjljYrlvoTmqKHlvI/kuIvlj6/nlKjjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gZW5kUmFkaXVzXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIGVuZFJhZGl1czogMCxcbiAgICAvKipcbiAgICAgKiAhI2VuIFZhcmlhdGlvbiBvZiB0aGUgZW5kaW5nIHJhZGl1cy5cbiAgICAgKiAhI3poIOe7k+adn+WNiuW+hOWPmOWMluiMg+WbtOOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBlbmRSYWRpdXNWYXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgZW5kUmFkaXVzVmFyOiAwLFxuICAgIC8qKlxuICAgICAqICEjZW4gTnVtYmVyIG9mIGRlZ3Jlc3MgdG8gcm90YXRlIGEgcGFydGljbGUgYXJvdW5kIHRoZSBzb3VyY2UgcG9zIHBlciBzZWNvbmQuIE9ubHkgYXZhaWxhYmxlIGluICdSYWRpdXMnIG1vZGUuXG4gICAgICogISN6aCDnspLlrZDmr4/np5Llm7Tnu5Xotbflp4vngrnnmoTml4vovazop5LluqbvvIzlj6rmnInlnKjljYrlvoTmqKHlvI/kuIvlj6/nlKjjgIJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gcm90YXRlUGVyU1xuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICByb3RhdGVQZXJTOiAwLFxuICAgIC8qKlxuICAgICAqICEjZW4gVmFyaWF0aW9uIG9mIHRoZSBkZWdyZXNzIHRvIHJvdGF0ZSBhIHBhcnRpY2xlIGFyb3VuZCB0aGUgc291cmNlIHBvcyBwZXIgc2Vjb25kLlxuICAgICAqICEjemgg57KS5a2Q5q+P56eS5Zu057uV6LW35aeL54K555qE5peL6L2s6KeS5bqm5Y+Y5YyW6IyD5Zu044CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHJvdGF0ZVBlclNWYXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgcm90YXRlUGVyU1ZhcjogMFxuXG59O1xuXG4vKipcbiAqIFBhcnRpY2xlIFN5c3RlbSBiYXNlIGNsYXNzLiA8YnIvPlxuICogQXR0cmlidXRlcyBvZiBhIFBhcnRpY2xlIFN5c3RlbTo8YnIvPlxuICogIC0gZW1taXNpb24gcmF0ZSBvZiB0aGUgcGFydGljbGVzPGJyLz5cbiAqICAtIEdyYXZpdHkgTW9kZSAoTW9kZSBBKTogPGJyLz5cbiAqICAtIGdyYXZpdHkgPGJyLz5cbiAqICAtIGRpcmVjdGlvbiA8YnIvPlxuICogIC0gc3BlZWQgKy0gIHZhcmlhbmNlIDxici8+XG4gKiAgLSB0YW5nZW50aWFsIGFjY2VsZXJhdGlvbiArLSB2YXJpYW5jZTxici8+XG4gKiAgLSByYWRpYWwgYWNjZWxlcmF0aW9uICstIHZhcmlhbmNlPGJyLz5cbiAqICAtIFJhZGl1cyBNb2RlIChNb2RlIEIpOiAgICAgIDxici8+XG4gKiAgLSBzdGFydFJhZGl1cyArLSB2YXJpYW5jZSAgICA8YnIvPlxuICogIC0gZW5kUmFkaXVzICstIHZhcmlhbmNlICAgICAgPGJyLz5cbiAqICAtIHJvdGF0ZSArLSB2YXJpYW5jZSAgICAgICAgIDxici8+XG4gKiAgLSBQcm9wZXJ0aWVzIGNvbW1vbiB0byBhbGwgbW9kZXM6IDxici8+XG4gKiAgLSBsaWZlICstIGxpZmUgdmFyaWFuY2UgICAgICA8YnIvPlxuICogIC0gc3RhcnQgc3BpbiArLSB2YXJpYW5jZSAgICAgPGJyLz5cbiAqICAtIGVuZCBzcGluICstIHZhcmlhbmNlICAgICAgIDxici8+XG4gKiAgLSBzdGFydCBzaXplICstIHZhcmlhbmNlICAgICA8YnIvPlxuICogIC0gZW5kIHNpemUgKy0gdmFyaWFuY2UgICAgICAgPGJyLz5cbiAqICAtIHN0YXJ0IGNvbG9yICstIHZhcmlhbmNlICAgIDxici8+XG4gKiAgLSBlbmQgY29sb3IgKy0gdmFyaWFuY2UgICAgICA8YnIvPlxuICogIC0gbGlmZSArLSB2YXJpYW5jZSAgICAgICAgICAgPGJyLz5cbiAqICAtIGJsZW5kaW5nIGZ1bmN0aW9uICAgICAgICAgIDxici8+XG4gKiAgLSB0ZXh0dXJlICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICogPGJyLz5cbiAqIGNvY29zMmQgYWxzbyBzdXBwb3J0cyBwYXJ0aWNsZXMgZ2VuZXJhdGVkIGJ5IFBhcnRpY2xlIERlc2lnbmVyIChodHRwOi8vcGFydGljbGVkZXNpZ25lci43MXNxdWFyZWQuY29tLykuPGJyLz5cbiAqICdSYWRpdXMgTW9kZScgaW4gUGFydGljbGUgRGVzaWduZXIgdXNlcyBhIGZpeGVkIGVtaXQgcmF0ZSBvZiAzMCBoei4gU2luY2UgdGhhdCBjYW4ndCBiZSBndWFyYXRlZWQgaW4gY29jb3MyZCwgIDxici8+XG4gKiBjb2NvczJkIHVzZXMgYSBhbm90aGVyIGFwcHJvYWNoLCBidXQgdGhlIHJlc3VsdHMgYXJlIGFsbW9zdCBpZGVudGljYWwuPGJyLz5cbiAqIGNvY29zMmQgc3VwcG9ydHMgYWxsIHRoZSB2YXJpYWJsZXMgdXNlZCBieSBQYXJ0aWNsZSBEZXNpZ25lciBwbHVzIGEgYml0IG1vcmU6ICA8YnIvPlxuICogIC0gc3Bpbm5pbmcgcGFydGljbGVzIChzdXBwb3J0ZWQgd2hlbiB1c2luZyBQYXJ0aWNsZVN5c3RlbSkgICAgICAgPGJyLz5cbiAqICAtIHRhbmdlbnRpYWwgYWNjZWxlcmF0aW9uIChHcmF2aXR5IG1vZGUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gKiAgLSByYWRpYWwgYWNjZWxlcmF0aW9uIChHcmF2aXR5IG1vZGUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICogIC0gcmFkaXVzIGRpcmVjdGlvbiAoUmFkaXVzIG1vZGUpIChQYXJ0aWNsZSBEZXNpZ25lciBzdXBwb3J0cyBvdXR3YXJkcyB0byBpbndhcmRzIGRpcmVjdGlvbiBvbmx5KSA8YnIvPlxuICogSXQgaXMgcG9zc2libGUgdG8gY3VzdG9taXplIGFueSBvZiB0aGUgYWJvdmUgbWVudGlvbmVkIHByb3BlcnRpZXMgaW4gcnVudGltZS4gRXhhbXBsZTogICA8YnIvPlxuICpcbiAqIEBleGFtcGxlXG4gKiBlbWl0dGVyLnJhZGlhbEFjY2VsID0gMTU7XG4gKiBlbWl0dGVyLnN0YXJ0U3BpbiA9IDA7XG4gKlxuICogQGNsYXNzIFBhcnRpY2xlU3lzdGVtXG4gKiBAZXh0ZW5kcyBSZW5kZXJDb21wb25lbnRcbiAqL1xudmFyIFBhcnRpY2xlU3lzdGVtID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5QYXJ0aWNsZVN5c3RlbScsXG4gICAgZXh0ZW5kczogUmVuZGVyQ29tcG9uZW50LFxuICAgIG1peGluczogW0JsZW5kRnVuY10sXG4gICAgZWRpdG9yOiBDQ19FRElUT1IgJiYge1xuICAgICAgICBtZW51OiAnaTE4bjpNQUlOX01FTlUuY29tcG9uZW50LnJlbmRlcmVycy9QYXJ0aWNsZVN5c3RlbScsXG4gICAgICAgIGluc3BlY3RvcjogJ3BhY2thZ2VzOi8vaW5zcGVjdG9yL2luc3BlY3RvcnMvY29tcHMvcGFydGljbGUtc3lzdGVtLmpzJyxcbiAgICAgICAgcGxheU9uRm9jdXM6IHRydWUsXG4gICAgICAgIGV4ZWN1dGVJbkVkaXRNb2RlOiB0cnVlXG4gICAgfSxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoKSB7XG4gICAgICAgIHRoaXMuX3ByZXZpZXdUaW1lciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ZvY3VzZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl9zaW11bGF0b3IgPSBuZXcgUGFydGljbGVTaW11bGF0b3IodGhpcyk7XG5cbiAgICAgICAgLy8gY29sb3JzXG4gICAgICAgIHRoaXMuX3N0YXJ0Q29sb3IgPSBjYy5jb2xvcigyNTUsIDI1NSwgMjU1LCAyNTUpO1xuICAgICAgICB0aGlzLl9zdGFydENvbG9yVmFyID0gY2MuY29sb3IoMCwgMCwgMCwgMCk7XG4gICAgICAgIHRoaXMuX2VuZENvbG9yID0gY2MuY29sb3IoMjU1LCAyNTUsIDI1NSwgMCk7XG4gICAgICAgIHRoaXMuX2VuZENvbG9yVmFyID0gY2MuY29sb3IoMCwgMCwgMCwgMCk7XG5cbiAgICAgICAgLy8gVGhlIHRlbXBvcmFyeSBTcHJpdGVGcmFtZSBvYmplY3QgdXNlZCBmb3IgdGhlIHJlbmRlcmVyLiBCZWNhdXNlIHRoZXJlIGlzIG5vIGNvcnJlc3BvbmRpbmcgYXNzZXQsIGl0IGNhbid0IGJlIHNlcmlhbGl6ZWQuXG4gICAgICAgIHRoaXMuX3JlbmRlclNwcml0ZUZyYW1lID0gbnVsbDtcbiAgICB9LFxuXG4gICAgcHJvcGVydGllczogcHJvcGVydGllcyxcblxuICAgIHN0YXRpY3M6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgUGFydGljbGUgZW1pdHRlciBsaXZlcyBmb3JldmVyLlxuICAgICAgICAgKiAhI3poIOihqOekuuWPkeWwhOWZqOawuOS5heWtmOWcqFxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gRFVSQVRJT05fSU5GSU5JVFlcbiAgICAgICAgICogQGRlZmF1bHQgLTFcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcmVhZG9ubHlcbiAgICAgICAgICovXG4gICAgICAgIERVUkFUSU9OX0lORklOSVRZOiAtMSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgc3RhcnRpbmcgc2l6ZSBvZiB0aGUgcGFydGljbGUgaXMgZXF1YWwgdG8gdGhlIGVuZGluZyBzaXplLlxuICAgICAgICAgKiAhI3poIOihqOekuueykuWtkOeahOi1t+Wni+Wkp+Wwj+etieS6jue7k+adn+Wkp+Wwj+OAglxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gU1RBUlRfU0laRV9FUVVBTF9UT19FTkRfU0laRVxuICAgICAgICAgKiBAZGVmYXVsdCAtMVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgU1RBUlRfU0laRV9FUVVBTF9UT19FTkRfU0laRTogLTEsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gVGhlIHN0YXJ0aW5nIHJhZGl1cyBvZiB0aGUgcGFydGljbGUgaXMgZXF1YWwgdG8gdGhlIGVuZGluZyByYWRpdXMuXG4gICAgICAgICAqICEjemgg6KGo56S657KS5a2Q55qE6LW35aeL5Y2K5b6E562J5LqO57uT5p2f5Y2K5b6E44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBTVEFSVF9SQURJVVNfRVFVQUxfVE9fRU5EX1JBRElVU1xuICAgICAgICAgKiBAZGVmYXVsdCAtMVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEByZWFkb25seVxuICAgICAgICAgKi9cbiAgICAgICAgU1RBUlRfUkFESVVTX0VRVUFMX1RPX0VORF9SQURJVVM6IC0xLFxuXG4gICAgICAgIEVtaXR0ZXJNb2RlOiBFbWl0dGVyTW9kZSxcbiAgICAgICAgUG9zaXRpb25UeXBlOiBQb3NpdGlvblR5cGUsXG5cbiAgICAgICAgX1BOR1JlYWRlcjogUE5HUmVhZGVyLFxuICAgICAgICBfVElGRlJlYWRlcjogdGlmZlJlYWRlclxuICAgIH0sXG5cbiAgICAvLyBFRElUT1IgUkVMQVRFRCBNRVRIT0RTXG5cbiAgICBvbkZvY3VzSW5FZGl0b3I6IENDX0VESVRPUiAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2ZvY3VzZWQgPSB0cnVlO1xuICAgICAgICB2YXIgY29tcG9uZW50cyA9IGdldFBhcnRpY2xlQ29tcG9uZW50cyh0aGlzLm5vZGUpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvbmVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHNbaV0uX3N0YXJ0UHJldmlldygpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uTG9zdEZvY3VzSW5FZGl0b3I6IENDX0VESVRPUiAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNvbXBvbmVudHMgPSBnZXRQYXJ0aWNsZUNvbXBvbmVudHModGhpcy5ub2RlKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb25lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb21wb25lbnRzW2ldLl9zdG9wUHJldmlldygpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9zdGFydFByZXZpZXc6IENDX0VESVRPUiAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnByZXZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRTeXN0ZW0oKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfc3RvcFByZXZpZXc6IENDX0VESVRPUiAmJiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnByZXZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRTeXN0ZW0oKTtcbiAgICAgICAgICAgIHRoaXMuc3RvcFN5c3RlbSgpO1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlUmVuZGVyKCk7XG4gICAgICAgICAgICBjYy5lbmdpbmUucmVwYWludEluRWRpdE1vZGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcHJldmlld1RpbWVyKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX3ByZXZpZXdUaW1lcik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gTElGRS1DWUNMRSBNRVRIT0RTXG5cbiAgICAvLyBqdXN0IHVzZWQgdG8gcmVhZCBkYXRhIGZyb20gMS54XG4gICAgX2NvbnZlcnRUZXh0dXJlVG9TcHJpdGVGcmFtZTogQ0NfRURJVE9SICYmIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Nwcml0ZUZyYW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRleHR1cmUgPSB0aGlzLnRleHR1cmU7XG4gICAgICAgIGlmICghdGV4dHVyZSB8fCAhdGV4dHVyZS5fdXVpZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgRWRpdG9yLmFzc2V0ZGIucXVlcnlNZXRhSW5mb0J5VXVpZCh0ZXh0dXJlLl91dWlkLCBmdW5jdGlvbiAoZXJyLCBtZXRhSW5mbykge1xuICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIEVkaXRvci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgdmFyIG1ldGEgPSBKU09OLnBhcnNlKG1ldGFJbmZvLmpzb24pO1xuICAgICAgICAgICAgaWYgKG1ldGEudHlwZSA9PT0gJ3JhdycpIHtcbiAgICAgICAgICAgICAgICB2YXIgTm9kZVV0aWxzID0gRWRpdG9yLnJlcXVpcmUoJ2FwcDovL2VkaXRvci9wYWdlL3NjZW5lLXV0aWxzL3V0aWxzL25vZGUnKTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZVBhdGggPSBOb2RlVXRpbHMuZ2V0Tm9kZVBhdGgoX3RoaXMubm9kZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEVkaXRvci53YXJuKCdUaGUgdGV4dHVyZSAnICsgbWV0YUluZm8uYXNzZXRVcmwgKyAnIHVzZWQgYnkgcGFydGljbGUgJyArIG5vZGVQYXRoICsgJyBkb2VzIG5vdCBjb250YWluIGFueSBTcHJpdGVGcmFtZSwgcGxlYXNlIHNldCB0aGUgdGV4dHVyZSB0eXBlIHRvIFNwcml0ZSBhbmQgcmVhc3NpZ24gdGhlIFNwcml0ZUZyYW1lIHRvIHRoZSBwYXJ0aWNsZSBjb21wb25lbnQuJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBVcmwgPSByZXF1aXJlKCdmaXJlLXVybCcpO1xuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gVXJsLmJhc2VuYW1lTm9FeHQobWV0YUluZm8uYXNzZXRQYXRoKTtcbiAgICAgICAgICAgICAgICB2YXIgdXVpZCA9IG1ldGEuc3ViTWV0YXNbbmFtZV0udXVpZDtcbiAgICAgICAgICAgICAgICBjYy5Bc3NldExpYnJhcnkubG9hZEFzc2V0KHV1aWQsIGZ1bmN0aW9uIChlcnIsIHNwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBFZGl0b3IuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RleHR1cmUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zcHJpdGVGcmFtZSA9IHNwO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgX19wcmVsb2FkOiBmdW5jdGlvbiBfX3ByZWxvYWQoKSB7XG5cbiAgICAgICAgaWYgKENDX0VESVRPUikge1xuICAgICAgICAgICAgdGhpcy5fY29udmVydFRleHR1cmVUb1Nwcml0ZUZyYW1lKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fY3VzdG9tICYmIHRoaXMuc3ByaXRlRnJhbWUgJiYgIXRoaXMuX3JlbmRlclNwcml0ZUZyYW1lKSB7XG4gICAgICAgICAgICB0aGlzLl9hcHBseVNwcml0ZUZyYW1lKHRoaXMuc3ByaXRlRnJhbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2ZpbGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXN0b20pIHtcbiAgICAgICAgICAgICAgICB2YXIgbWlzc0N1c3RvbVRleHR1cmUgPSAhdGhpcy5fdGV4dHVyZTtcbiAgICAgICAgICAgICAgICBpZiAobWlzc0N1c3RvbVRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwbHlGaWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hcHBseUZpbGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhdXRvIHBsYXlcbiAgICAgICAgaWYgKCFDQ19FRElUT1IgfHwgY2MuZW5naW5lLmlzUGxheWluZykge1xuICAgICAgICAgICAgaWYgKHRoaXMucGxheU9uTG9hZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRTeXN0ZW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBVcGdyYWRlIGNvbG9yIHR5cGUgZnJvbSB2Mi4wLjBcbiAgICAgICAgaWYgKENDX0VESVRPUiAmJiAhKHRoaXMuX3N0YXJ0Q29sb3IgaW5zdGFuY2VvZiBjYy5Db2xvcikpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0Q29sb3IgPSBjYy5jb2xvcih0aGlzLl9zdGFydENvbG9yKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0Q29sb3JWYXIgPSBjYy5jb2xvcih0aGlzLl9zdGFydENvbG9yVmFyKTtcbiAgICAgICAgICAgIHRoaXMuX2VuZENvbG9yID0gY2MuY29sb3IodGhpcy5fZW5kQ29sb3IpO1xuICAgICAgICAgICAgdGhpcy5fZW5kQ29sb3JWYXIgPSBjYy5jb2xvcih0aGlzLl9lbmRDb2xvclZhcik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25FbmFibGU6IGZ1bmN0aW9uIG9uRW5hYmxlKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICB0aGlzLm5vZGUuX3JlbmRlckZsYWcgJj0gflJlbmRlckZsb3cuRkxBR19SRU5ERVI7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlTWF0ZXJpYWwoKTtcbiAgICB9LFxuICAgIG9uRGVzdHJveTogZnVuY3Rpb24gb25EZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5hdXRvUmVtb3ZlT25GaW5pc2gpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0b1JlbW92ZU9uRmluaXNoID0gZmFsc2U7IC8vIGFscmVhZHkgcmVtb3ZlZFxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9idWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlci5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLl9idWZmZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lhID0gbnVsbDtcbiAgICAgICAgLy8gcmVzZXQgdXYgZGF0YSBzbyBuZXh0IHRpbWUgc2ltdWxhdG9yIHdpbGwgcmVmaWxsIGJ1ZmZlciB1diBpbmZvIHdoZW4gZXhpdCBlZGl0IG1vZGUgZnJvbSBwcmVmYWIuXG4gICAgICAgIHRoaXMuX3NpbXVsYXRvci5fdXZGaWxsZWQgPSAwO1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgIH0sXG4gICAgbGF0ZVVwZGF0ZTogZnVuY3Rpb24gbGF0ZVVwZGF0ZShkdCkge1xuICAgICAgICBpZiAoIXRoaXMuX3NpbXVsYXRvci5maW5pc2hlZCAmJiB0aGlzLl9pYSkge1xuICAgICAgICAgICAgdGhpcy5fc2ltdWxhdG9yLnN0ZXAoZHQpO1xuICAgICAgICB9XG4gICAgfSxcblxuXG4gICAgLy8gQVBJU1xuXG4gICAgLypcbiAgICAgKiAhI2VuIEFkZCBhIHBhcnRpY2xlIHRvIHRoZSBlbWl0dGVyLlxuICAgICAqICEjemgg5re75Yqg5LiA5Liq57KS5a2Q5Yiw5Y+R5bCE5Zmo5Lit44CCXG4gICAgICogQG1ldGhvZCBhZGRQYXJ0aWNsZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgYWRkUGFydGljbGU6IGZ1bmN0aW9uIGFkZFBhcnRpY2xlKCkge1xuICAgICAgICAvLyBOb3QgaW1wbGVtZW50ZWRcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBTdG9wIGVtaXR0aW5nIHBhcnRpY2xlcy4gUnVubmluZyBwYXJ0aWNsZXMgd2lsbCBjb250aW51ZSB0byBydW4gdW50aWwgdGhleSBkaWUuXG4gICAgICogISN6aCDlgZzmraLlj5HlsITlmajlj5HlsITnspLlrZDvvIzlj5HlsITlh7rljrvnmoTnspLlrZDlsIbnu6fnu63ov5DooYzvvIznm7Toh7PnspLlrZDnlJ/lkb3nu5PmnZ/jgIJcbiAgICAgKiBAbWV0aG9kIHN0b3BTeXN0ZW1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIHN0b3AgcGFydGljbGUgc3lzdGVtLlxuICAgICAqIG15UGFydGljbGVTeXN0ZW0uc3RvcFN5c3RlbSgpO1xuICAgICAqL1xuICAgIHN0b3BTeXN0ZW06IGZ1bmN0aW9uIHN0b3BTeXN0ZW0oKSB7XG4gICAgICAgIHRoaXMuX3N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zaW11bGF0b3Iuc3RvcCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEtpbGwgYWxsIGxpdmluZyBwYXJ0aWNsZXMuXG4gICAgICogISN6aCDmnYDmrbvmiYDmnInlrZjlnKjnmoTnspLlrZDvvIznhLblkI7ph43mlrDlkK/liqjnspLlrZDlj5HlsITlmajjgIJcbiAgICAgKiBAbWV0aG9kIHJlc2V0U3lzdGVtXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBwbGF5IHBhcnRpY2xlIHN5c3RlbS5cbiAgICAgKiBteVBhcnRpY2xlU3lzdGVtLnJlc2V0U3lzdGVtKCk7XG4gICAgICovXG4gICAgcmVzZXRTeXN0ZW06IGZ1bmN0aW9uIHJlc2V0U3lzdGVtKCkge1xuICAgICAgICB0aGlzLl9zdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3NpbXVsYXRvci5yZXNldCgpO1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZU1hdGVyaWFsKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gV2hldGhlciBvciBub3QgdGhlIHN5c3RlbSBpcyBmdWxsLlxuICAgICAqICEjemgg5Y+R5bCE5Zmo5Lit57KS5a2Q5piv5ZCm5aSn5LqO562J5LqO6K6+572u55qE5oC757KS5a2Q5pWw6YeP44CCXG4gICAgICogQG1ldGhvZCBpc0Z1bGxcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzRnVsbDogZnVuY3Rpb24gaXNGdWxsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJ0aWNsZUNvdW50ID49IHRoaXMudG90YWxQYXJ0aWNsZXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gU2V0cyBhIG5ldyB0ZXh0dXJlIHdpdGggYSByZWN0LiBUaGUgcmVjdCBpcyBpbiB0ZXh0dXJlIHBvc2l0aW9uIGFuZCBzaXplLlxuICAgICAqIFBsZWFzZSB1c2Ugc3ByaXRlRnJhbWUgcHJvcGVydHkgaW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkIHNpbmNlIHYxLjlcbiAgICAgKiAhI3poIOiuvue9ruS4gOW8oOaWsOi0tOWbvuWSjOWFs+iBlOeahOefqeW9ouOAglxuICAgICAqIOivt+ebtOaOpeiuvue9riBzcHJpdGVGcmFtZSDlsZ7mgKfvvIzov5nkuKrlh73mlbDku44gdjEuOSDniYjmnKzlvIDlp4vlt7Lnu4/ooqvlup/lvINcbiAgICAgKiBAbWV0aG9kIHNldFRleHR1cmVXaXRoUmVjdFxuICAgICAqIEBwYXJhbSB7VGV4dHVyZTJEfSB0ZXh0dXJlXG4gICAgICogQHBhcmFtIHtSZWN0fSByZWN0XG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdjEuOVxuICAgICAqL1xuICAgIHNldFRleHR1cmVXaXRoUmVjdDogZnVuY3Rpb24gc2V0VGV4dHVyZVdpdGhSZWN0KHRleHR1cmUsIHJlY3QpIHtcbiAgICAgICAgaWYgKHRleHR1cmUgaW5zdGFuY2VvZiBjYy5UZXh0dXJlMkQpIHtcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlRnJhbWUgPSBuZXcgY2MuU3ByaXRlRnJhbWUodGV4dHVyZSwgcmVjdCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gUFJJVkFURSBNRVRIT0RTXG5cbiAgICBfYXBwbHlGaWxlOiBmdW5jdGlvbiBfYXBwbHlGaWxlKCkge1xuICAgICAgICB2YXIgZmlsZSA9IHRoaXMuX2ZpbGU7XG4gICAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICBjYy5sb2FkZXIubG9hZChmaWxlLm5hdGl2ZVVybCwgZnVuY3Rpb24gKGVyciwgY29udGVudCkge1xuICAgICAgICAgICAgICAgIGlmIChlcnIgfHwgIWNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3JJRCg2MDI5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYuaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2VsZi5fcGxpc3RGaWxlID0gZmlsZS5uYXRpdmVVcmw7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxmLl9jdXN0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5faW5pdFdpdGhEaWN0aW9uYXJ5KGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghc2VsZi5fc3ByaXRlRnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUuc3ByaXRlRnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3ByaXRlRnJhbWUgPSBmaWxlLnNwcml0ZUZyYW1lO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGYuX2N1c3RvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5faW5pdFRleHR1cmVXaXRoRGljdGlvbmFyeShjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXNlbGYuX3JlbmRlclNwcml0ZUZyYW1lICYmIHNlbGYuX3Nwcml0ZUZyYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2FwcGx5U3ByaXRlRnJhbWUoc2VsZi5zcHJpdGVGcmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2luaXRUZXh0dXJlV2l0aERpY3Rpb25hcnk6IGZ1bmN0aW9uIF9pbml0VGV4dHVyZVdpdGhEaWN0aW9uYXJ5KGRpY3QpIHtcbiAgICAgICAgdmFyIGltZ1BhdGggPSBjYy5wYXRoLmNoYW5nZUJhc2VuYW1lKHRoaXMuX3BsaXN0RmlsZSwgZGljdFtcInRleHR1cmVGaWxlTmFtZVwiXSB8fCAnJyk7XG4gICAgICAgIC8vIHRleHR1cmVcbiAgICAgICAgaWYgKGRpY3RbXCJ0ZXh0dXJlRmlsZU5hbWVcIl0pIHtcbiAgICAgICAgICAgIC8vIFRyeSB0byBnZXQgdGhlIHRleHR1cmUgZnJvbSB0aGUgY2FjaGVcbiAgICAgICAgICAgIHRleHR1cmVVdGlsLmxvYWRJbWFnZShpbWdQYXRoLCBmdW5jdGlvbiAoZXJyb3IsIHRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZGljdFtcInRleHR1cmVGaWxlTmFtZVwiXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdFRleHR1cmVXaXRoRGljdGlvbmFyeShkaWN0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwcml0ZUZyYW1lID0gbmV3IGNjLlNwcml0ZUZyYW1lKHRleHR1cmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9IGVsc2UgaWYgKGRpY3RbXCJ0ZXh0dXJlSW1hZ2VEYXRhXCJdKSB7XG4gICAgICAgICAgICB2YXIgdGV4dHVyZURhdGEgPSBkaWN0W1widGV4dHVyZUltYWdlRGF0YVwiXTtcblxuICAgICAgICAgICAgaWYgKHRleHR1cmVEYXRhICYmIHRleHR1cmVEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgdGV4ID0gY2MubG9hZGVyLmdldFJlcyhpbWdQYXRoKTtcblxuICAgICAgICAgICAgICAgIGlmICghdGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBjb2RlYy51bnppcEJhc2U2NEFzQXJyYXkodGV4dHVyZURhdGEsIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2MubG9nSUQoNjAzMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgaW1hZ2VGb3JtYXQgPSBnZXRJbWFnZUZvcm1hdEJ5RGF0YShidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VGb3JtYXQgIT09IG1hY3JvLkltYWdlRm9ybWF0LlRJRkYgJiYgaW1hZ2VGb3JtYXQgIT09IG1hY3JvLkltYWdlRm9ybWF0LlBORykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2MubG9nSUQoNjAzMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgY2FudmFzT2JqID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlRm9ybWF0ID09PSBtYWNyby5JbWFnZUZvcm1hdC5QTkcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBteVBuZ09iaiA9IG5ldyBQTkdSZWFkZXIoYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG15UG5nT2JqLnJlbmRlcihjYW52YXNPYmopO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGlmZlJlYWRlci5wYXJzZVRJRkYoYnVmZmVyLCBjYW52YXNPYmopO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRleCA9IHRleHR1cmVVdGlsLmNhY2hlSW1hZ2UoaW1nUGF0aCwgY2FudmFzT2JqKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRleCkgY2MubG9nSUQoNjAzMik7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogVXNlIGNjLmxvYWRlciB0byBsb2FkIGFzeW5jaHJvbm91c2x5IHRoZSBTcHJpdGVGcmFtZSBvYmplY3QsIGF2b2lkIHVzaW5nIHRleHR1cmVVdGlsXG4gICAgICAgICAgICAgICAgdGhpcy5zcHJpdGVGcmFtZSA9IG5ldyBjYy5TcHJpdGVGcmFtZSh0ZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8vIHBhcnNpbmcgcHJvY2Vzc1xuICAgIF9pbml0V2l0aERpY3Rpb25hcnk6IGZ1bmN0aW9uIF9pbml0V2l0aERpY3Rpb25hcnkoZGljdCkge1xuICAgICAgICB0aGlzLnRvdGFsUGFydGljbGVzID0gcGFyc2VJbnQoZGljdFtcIm1heFBhcnRpY2xlc1wiXSB8fCAwKTtcblxuICAgICAgICAvLyBsaWZlIHNwYW5cbiAgICAgICAgdGhpcy5saWZlID0gcGFyc2VGbG9hdChkaWN0W1wicGFydGljbGVMaWZlc3BhblwiXSB8fCAwKTtcbiAgICAgICAgdGhpcy5saWZlVmFyID0gcGFyc2VGbG9hdChkaWN0W1wicGFydGljbGVMaWZlc3BhblZhcmlhbmNlXCJdIHx8IDApO1xuXG4gICAgICAgIC8vIGVtaXNzaW9uIFJhdGVcbiAgICAgICAgdmFyIF90ZW1wRW1pc3Npb25SYXRlID0gZGljdFtcImVtaXNzaW9uUmF0ZVwiXTtcbiAgICAgICAgaWYgKF90ZW1wRW1pc3Npb25SYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXNzaW9uUmF0ZSA9IF90ZW1wRW1pc3Npb25SYXRlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbWlzc2lvblJhdGUgPSBNYXRoLm1pbih0aGlzLnRvdGFsUGFydGljbGVzIC8gdGhpcy5saWZlLCBOdW1iZXIuTUFYX1ZBTFVFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGR1cmF0aW9uXG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBwYXJzZUZsb2F0KGRpY3RbXCJkdXJhdGlvblwiXSB8fCAwKTtcblxuICAgICAgICAvLyBibGVuZCBmdW5jdGlvblxuICAgICAgICB0aGlzLnNyY0JsZW5kRmFjdG9yID0gcGFyc2VJbnQoZGljdFtcImJsZW5kRnVuY1NvdXJjZVwiXSB8fCBtYWNyby5TUkNfQUxQSEEpO1xuICAgICAgICB0aGlzLmRzdEJsZW5kRmFjdG9yID0gcGFyc2VJbnQoZGljdFtcImJsZW5kRnVuY0Rlc3RpbmF0aW9uXCJdIHx8IG1hY3JvLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXG4gICAgICAgIC8vIGNvbG9yXG4gICAgICAgIHZhciBsb2NTdGFydENvbG9yID0gdGhpcy5fc3RhcnRDb2xvcjtcbiAgICAgICAgbG9jU3RhcnRDb2xvci5yID0gcGFyc2VGbG9hdChkaWN0W1wic3RhcnRDb2xvclJlZFwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jU3RhcnRDb2xvci5nID0gcGFyc2VGbG9hdChkaWN0W1wic3RhcnRDb2xvckdyZWVuXCJdIHx8IDApICogMjU1O1xuICAgICAgICBsb2NTdGFydENvbG9yLmIgPSBwYXJzZUZsb2F0KGRpY3RbXCJzdGFydENvbG9yQmx1ZVwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jU3RhcnRDb2xvci5hID0gcGFyc2VGbG9hdChkaWN0W1wic3RhcnRDb2xvckFscGhhXCJdIHx8IDApICogMjU1O1xuXG4gICAgICAgIHZhciBsb2NTdGFydENvbG9yVmFyID0gdGhpcy5fc3RhcnRDb2xvclZhcjtcbiAgICAgICAgbG9jU3RhcnRDb2xvclZhci5yID0gcGFyc2VGbG9hdChkaWN0W1wic3RhcnRDb2xvclZhcmlhbmNlUmVkXCJdIHx8IDApICogMjU1O1xuICAgICAgICBsb2NTdGFydENvbG9yVmFyLmcgPSBwYXJzZUZsb2F0KGRpY3RbXCJzdGFydENvbG9yVmFyaWFuY2VHcmVlblwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jU3RhcnRDb2xvclZhci5iID0gcGFyc2VGbG9hdChkaWN0W1wic3RhcnRDb2xvclZhcmlhbmNlQmx1ZVwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jU3RhcnRDb2xvclZhci5hID0gcGFyc2VGbG9hdChkaWN0W1wic3RhcnRDb2xvclZhcmlhbmNlQWxwaGFcIl0gfHwgMCkgKiAyNTU7XG5cbiAgICAgICAgdmFyIGxvY0VuZENvbG9yID0gdGhpcy5fZW5kQ29sb3I7XG4gICAgICAgIGxvY0VuZENvbG9yLnIgPSBwYXJzZUZsb2F0KGRpY3RbXCJmaW5pc2hDb2xvclJlZFwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jRW5kQ29sb3IuZyA9IHBhcnNlRmxvYXQoZGljdFtcImZpbmlzaENvbG9yR3JlZW5cIl0gfHwgMCkgKiAyNTU7XG4gICAgICAgIGxvY0VuZENvbG9yLmIgPSBwYXJzZUZsb2F0KGRpY3RbXCJmaW5pc2hDb2xvckJsdWVcIl0gfHwgMCkgKiAyNTU7XG4gICAgICAgIGxvY0VuZENvbG9yLmEgPSBwYXJzZUZsb2F0KGRpY3RbXCJmaW5pc2hDb2xvckFscGhhXCJdIHx8IDApICogMjU1O1xuXG4gICAgICAgIHZhciBsb2NFbmRDb2xvclZhciA9IHRoaXMuX2VuZENvbG9yVmFyO1xuICAgICAgICBsb2NFbmRDb2xvclZhci5yID0gcGFyc2VGbG9hdChkaWN0W1wiZmluaXNoQ29sb3JWYXJpYW5jZVJlZFwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jRW5kQ29sb3JWYXIuZyA9IHBhcnNlRmxvYXQoZGljdFtcImZpbmlzaENvbG9yVmFyaWFuY2VHcmVlblwiXSB8fCAwKSAqIDI1NTtcbiAgICAgICAgbG9jRW5kQ29sb3JWYXIuYiA9IHBhcnNlRmxvYXQoZGljdFtcImZpbmlzaENvbG9yVmFyaWFuY2VCbHVlXCJdIHx8IDApICogMjU1O1xuICAgICAgICBsb2NFbmRDb2xvclZhci5hID0gcGFyc2VGbG9hdChkaWN0W1wiZmluaXNoQ29sb3JWYXJpYW5jZUFscGhhXCJdIHx8IDApICogMjU1O1xuXG4gICAgICAgIC8vIHBhcnRpY2xlIHNpemVcbiAgICAgICAgdGhpcy5zdGFydFNpemUgPSBwYXJzZUZsb2F0KGRpY3RbXCJzdGFydFBhcnRpY2xlU2l6ZVwiXSB8fCAwKTtcbiAgICAgICAgdGhpcy5zdGFydFNpemVWYXIgPSBwYXJzZUZsb2F0KGRpY3RbXCJzdGFydFBhcnRpY2xlU2l6ZVZhcmlhbmNlXCJdIHx8IDApO1xuICAgICAgICB0aGlzLmVuZFNpemUgPSBwYXJzZUZsb2F0KGRpY3RbXCJmaW5pc2hQYXJ0aWNsZVNpemVcIl0gfHwgMCk7XG4gICAgICAgIHRoaXMuZW5kU2l6ZVZhciA9IHBhcnNlRmxvYXQoZGljdFtcImZpbmlzaFBhcnRpY2xlU2l6ZVZhcmlhbmNlXCJdIHx8IDApO1xuXG4gICAgICAgIC8vIHBvc2l0aW9uXG4gICAgICAgIC8vIE1ha2UgZW1wdHkgcG9zaXRpb25UeXBlIHZhbHVlIGFuZCBvbGQgdmVyc2lvbiBjb21wYXRpYmxlXG4gICAgICAgIHRoaXMucG9zaXRpb25UeXBlID0gcGFyc2VGbG9hdChkaWN0Wydwb3NpdGlvblR5cGUnXSB8fCBQb3NpdGlvblR5cGUuUkVMQVRJVkUpO1xuICAgICAgICAvLyBmb3IgXG4gICAgICAgIHRoaXMuc291cmNlUG9zLnggPSAwO1xuICAgICAgICB0aGlzLnNvdXJjZVBvcy55ID0gMDtcbiAgICAgICAgdGhpcy5wb3NWYXIueCA9IHBhcnNlRmxvYXQoZGljdFtcInNvdXJjZVBvc2l0aW9uVmFyaWFuY2V4XCJdIHx8IDApO1xuICAgICAgICB0aGlzLnBvc1Zhci55ID0gcGFyc2VGbG9hdChkaWN0W1wic291cmNlUG9zaXRpb25WYXJpYW5jZXlcIl0gfHwgMCk7XG5cbiAgICAgICAgLy8gYW5nbGVcbiAgICAgICAgdGhpcy5hbmdsZSA9IHBhcnNlRmxvYXQoZGljdFtcImFuZ2xlXCJdIHx8IDApO1xuICAgICAgICB0aGlzLmFuZ2xlVmFyID0gcGFyc2VGbG9hdChkaWN0W1wiYW5nbGVWYXJpYW5jZVwiXSB8fCAwKTtcblxuICAgICAgICAvLyBTcGlubmluZ1xuICAgICAgICB0aGlzLnN0YXJ0U3BpbiA9IHBhcnNlRmxvYXQoZGljdFtcInJvdGF0aW9uU3RhcnRcIl0gfHwgMCk7XG4gICAgICAgIHRoaXMuc3RhcnRTcGluVmFyID0gcGFyc2VGbG9hdChkaWN0W1wicm90YXRpb25TdGFydFZhcmlhbmNlXCJdIHx8IDApO1xuICAgICAgICB0aGlzLmVuZFNwaW4gPSBwYXJzZUZsb2F0KGRpY3RbXCJyb3RhdGlvbkVuZFwiXSB8fCAwKTtcbiAgICAgICAgdGhpcy5lbmRTcGluVmFyID0gcGFyc2VGbG9hdChkaWN0W1wicm90YXRpb25FbmRWYXJpYW5jZVwiXSB8fCAwKTtcblxuICAgICAgICB0aGlzLmVtaXR0ZXJNb2RlID0gcGFyc2VJbnQoZGljdFtcImVtaXR0ZXJUeXBlXCJdIHx8IEVtaXR0ZXJNb2RlLkdSQVZJVFkpO1xuXG4gICAgICAgIC8vIE1vZGUgQTogR3Jhdml0eSArIHRhbmdlbnRpYWwgYWNjZWwgKyByYWRpYWwgYWNjZWxcbiAgICAgICAgaWYgKHRoaXMuZW1pdHRlck1vZGUgPT09IEVtaXR0ZXJNb2RlLkdSQVZJVFkpIHtcbiAgICAgICAgICAgIC8vIGdyYXZpdHlcbiAgICAgICAgICAgIHRoaXMuZ3Jhdml0eS54ID0gcGFyc2VGbG9hdChkaWN0W1wiZ3Jhdml0eXhcIl0gfHwgMCk7XG4gICAgICAgICAgICB0aGlzLmdyYXZpdHkueSA9IHBhcnNlRmxvYXQoZGljdFtcImdyYXZpdHl5XCJdIHx8IDApO1xuXG4gICAgICAgICAgICAvLyBzcGVlZFxuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IHBhcnNlRmxvYXQoZGljdFtcInNwZWVkXCJdIHx8IDApO1xuICAgICAgICAgICAgdGhpcy5zcGVlZFZhciA9IHBhcnNlRmxvYXQoZGljdFtcInNwZWVkVmFyaWFuY2VcIl0gfHwgMCk7XG5cbiAgICAgICAgICAgIC8vIHJhZGlhbCBhY2NlbGVyYXRpb25cbiAgICAgICAgICAgIHRoaXMucmFkaWFsQWNjZWwgPSBwYXJzZUZsb2F0KGRpY3RbXCJyYWRpYWxBY2NlbGVyYXRpb25cIl0gfHwgMCk7XG4gICAgICAgICAgICB0aGlzLnJhZGlhbEFjY2VsVmFyID0gcGFyc2VGbG9hdChkaWN0W1wicmFkaWFsQWNjZWxWYXJpYW5jZVwiXSB8fCAwKTtcblxuICAgICAgICAgICAgLy8gdGFuZ2VudGlhbCBhY2NlbGVyYXRpb25cbiAgICAgICAgICAgIHRoaXMudGFuZ2VudGlhbEFjY2VsID0gcGFyc2VGbG9hdChkaWN0W1widGFuZ2VudGlhbEFjY2VsZXJhdGlvblwiXSB8fCAwKTtcbiAgICAgICAgICAgIHRoaXMudGFuZ2VudGlhbEFjY2VsVmFyID0gcGFyc2VGbG9hdChkaWN0W1widGFuZ2VudGlhbEFjY2VsVmFyaWFuY2VcIl0gfHwgMCk7XG5cbiAgICAgICAgICAgIC8vIHJvdGF0aW9uIGlzIGRpclxuICAgICAgICAgICAgdmFyIGxvY1JvdGF0aW9uSXNEaXIgPSBkaWN0W1wicm90YXRpb25Jc0RpclwiXSB8fCBcIlwiO1xuICAgICAgICAgICAgaWYgKGxvY1JvdGF0aW9uSXNEaXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsb2NSb3RhdGlvbklzRGlyID0gbG9jUm90YXRpb25Jc0Rpci50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3RhdGlvbklzRGlyID0gbG9jUm90YXRpb25Jc0RpciA9PT0gXCJ0cnVlXCIgfHwgbG9jUm90YXRpb25Jc0RpciA9PT0gXCIxXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucm90YXRpb25Jc0RpciA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZW1pdHRlck1vZGUgPT09IEVtaXR0ZXJNb2RlLlJBRElVUykge1xuICAgICAgICAgICAgLy8gb3IgTW9kZSBCOiByYWRpdXMgbW92ZW1lbnRcbiAgICAgICAgICAgIHRoaXMuc3RhcnRSYWRpdXMgPSBwYXJzZUZsb2F0KGRpY3RbXCJtYXhSYWRpdXNcIl0gfHwgMCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0UmFkaXVzVmFyID0gcGFyc2VGbG9hdChkaWN0W1wibWF4UmFkaXVzVmFyaWFuY2VcIl0gfHwgMCk7XG4gICAgICAgICAgICB0aGlzLmVuZFJhZGl1cyA9IHBhcnNlRmxvYXQoZGljdFtcIm1pblJhZGl1c1wiXSB8fCAwKTtcbiAgICAgICAgICAgIHRoaXMuZW5kUmFkaXVzVmFyID0gcGFyc2VGbG9hdChkaWN0W1wibWluUmFkaXVzVmFyaWFuY2VcIl0gfHwgMCk7XG4gICAgICAgICAgICB0aGlzLnJvdGF0ZVBlclMgPSBwYXJzZUZsb2F0KGRpY3RbXCJyb3RhdGVQZXJTZWNvbmRcIl0gfHwgMCk7XG4gICAgICAgICAgICB0aGlzLnJvdGF0ZVBlclNWYXIgPSBwYXJzZUZsb2F0KGRpY3RbXCJyb3RhdGVQZXJTZWNvbmRWYXJpYW5jZVwiXSB8fCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNjLndhcm5JRCg2MDA5KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2luaXRUZXh0dXJlV2l0aERpY3Rpb25hcnkoZGljdCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBfb25UZXh0dXJlTG9hZGVkOiBmdW5jdGlvbiBfb25UZXh0dXJlTG9hZGVkKCkge1xuICAgICAgICB0aGlzLl90ZXh0dXJlID0gdGhpcy5fcmVuZGVyU3ByaXRlRnJhbWUuZ2V0VGV4dHVyZSgpO1xuICAgICAgICB0aGlzLl9zaW11bGF0b3IudXBkYXRlVVZzKHRydWUpO1xuICAgICAgICAvLyBSZWFjdGl2YXRlIG1hdGVyaWFsXG4gICAgICAgIHRoaXMuX2FjdGl2YXRlTWF0ZXJpYWwoKTtcbiAgICB9LFxuXG4gICAgX2FwcGx5U3ByaXRlRnJhbWU6IGZ1bmN0aW9uIF9hcHBseVNwcml0ZUZyYW1lKG9sZEZyYW1lKSB7XG4gICAgICAgIGlmIChvbGRGcmFtZSAmJiBvbGRGcmFtZS5vZmYpIHtcbiAgICAgICAgICAgIG9sZEZyYW1lLm9mZignbG9hZCcsIHRoaXMuX29uVGV4dHVyZUxvYWRlZCwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3ByaXRlRnJhbWUgPSB0aGlzLl9yZW5kZXJTcHJpdGVGcmFtZSA9IHRoaXMuX3JlbmRlclNwcml0ZUZyYW1lIHx8IHRoaXMuX3Nwcml0ZUZyYW1lO1xuICAgICAgICBpZiAoc3ByaXRlRnJhbWUpIHtcbiAgICAgICAgICAgIGlmIChzcHJpdGVGcmFtZS50ZXh0dXJlTG9hZGVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vblRleHR1cmVMb2FkZWQobnVsbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwcml0ZUZyYW1lLm9uY2UoJ2xvYWQnLCB0aGlzLl9vblRleHR1cmVMb2FkZWQsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHNwcml0ZUZyYW1lLmVuc3VyZUxvYWRUZXh0dXJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2FjdGl2YXRlTWF0ZXJpYWw6IGZ1bmN0aW9uIF9hY3RpdmF0ZU1hdGVyaWFsKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3RleHR1cmUgfHwgIXRoaXMuX3RleHR1cmUubG9hZGVkKSB7XG4gICAgICAgICAgICB0aGlzLm1hcmtGb3JDdXN0b21JQVJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fcmVuZGVyU3ByaXRlRnJhbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hcHBseVNwcml0ZUZyYW1lKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5faWEpIHtcbiAgICAgICAgICAgIFBhcnRpY2xlU3lzdGVtLl9hc3NlbWJsZXIuY3JlYXRlSUEodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWF0ZXJpYWwgPSB0aGlzLnNoYXJlZE1hdGVyaWFsc1swXTtcbiAgICAgICAgaWYgKCFtYXRlcmlhbCkge1xuICAgICAgICAgICAgbWF0ZXJpYWwgPSBNYXRlcmlhbC5nZXRJbnN0YW50aWF0ZWRCdWlsdGluTWF0ZXJpYWwoJzJkLXNwcml0ZScsIHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF0ZXJpYWwgPSBNYXRlcmlhbC5nZXRJbnN0YW50aWF0ZWRNYXRlcmlhbChtYXRlcmlhbCwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbiBjYXNlIHRoZSBwbGlzdCBsb3N0IHBvc2l0aW9uVHlwZVxuICAgICAgICBtYXRlcmlhbC5kZWZpbmUoJ19VU0VfTU9ERUwnLCB0aGlzLl9wb3NpdGlvblR5cGUgIT09IFBvc2l0aW9uVHlwZS5GUkVFKTtcbiAgICAgICAgbWF0ZXJpYWwuc2V0UHJvcGVydHkoJ3RleHR1cmUnLCB0aGlzLl90ZXh0dXJlKTtcblxuICAgICAgICB0aGlzLnNldE1hdGVyaWFsKDAsIG1hdGVyaWFsKTtcbiAgICAgICAgdGhpcy5tYXJrRm9yQ3VzdG9tSUFSZW5kZXIodHJ1ZSk7XG4gICAgfSxcblxuICAgIF9maW5pc2hlZFNpbXVsYXRpb246IGZ1bmN0aW9uIF9maW5pc2hlZFNpbXVsYXRpb24oKSB7XG4gICAgICAgIGlmIChDQ19FRElUT1IpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXZpZXcgJiYgdGhpcy5fZm9jdXNlZCAmJiAhdGhpcy5hY3RpdmUgJiYgIWNjLmVuZ2luZS5pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0U3lzdGVtKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXNldFN5c3RlbSgpO1xuICAgICAgICB0aGlzLnN0b3BTeXN0ZW0oKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlUmVuZGVyKCk7XG4gICAgICAgIGlmICh0aGlzLmF1dG9SZW1vdmVPbkZpbmlzaCAmJiB0aGlzLl9zdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGUuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbmNjLlBhcnRpY2xlU3lzdGVtID0gbW9kdWxlLmV4cG9ydHMgPSBQYXJ0aWNsZVN5c3RlbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRVR0Z5ZEdsamJHVlRlWE4wWlcwdWFuTWlYU3dpYm1GdFpYTWlPbHNpYldGamNtOGlMQ0p5WlhGMWFYSmxJaXdpVUdGeWRHbGpiR1ZCYzNObGRDSXNJbEpsYm1SbGNrTnZiWEJ2Ym1WdWRDSXNJbU52WkdWaklpd2lVRTVIVW1WaFpHVnlJaXdpZEdsbVpsSmxZV1JsY2lJc0luUmxlSFIxY21WVmRHbHNJaXdpVW1WdVpHVnlSbXh2ZHlJc0lsQmhjblJwWTJ4bFUybHRkV3hoZEc5eUlpd2lUV0YwWlhKcFlXd2lMQ0pDYkdWdVpFWjFibU1pTENKblpYUkpiV0ZuWlVadmNtMWhkRUo1UkdGMFlTSXNJbWx0WjBSaGRHRWlMQ0pzWlc1bmRHZ2lMQ0pKYldGblpVWnZjbTFoZENJc0lsQk9SeUlzSWxSSlJrWWlMQ0pWVGt0T1QxZE9JaXdpWjJWMFVHRnlkR2xqYkdWRGIyMXdiMjVsYm5Seklpd2libTlrWlNJc0luQmhjbVZ1ZENJc0ltTnZiWEFpTENKblpYUkRiMjF3YjI1bGJuUWlMQ0pqWXlJc0lsQmhjblJwWTJ4bFUzbHpkR1Z0SWl3aVoyVjBRMjl0Y0c5dVpXNTBjMGx1UTJocGJHUnlaVzRpTENKRmJXbDBkR1Z5VFc5a1pTSXNJa1Z1ZFcwaUxDSkhVa0ZXU1ZSWklpd2lVa0ZFU1ZWVElpd2lVRzl6YVhScGIyNVVlWEJsSWl3aVJsSkZSU0lzSWxKRlRFRlVTVlpGSWl3aVIxSlBWVkJGUkNJc0luQnliM0JsY25ScFpYTWlMQ0p3Y21WMmFXVjNJaXdpWkdWbVlYVnNkQ0lzSW1Wa2FYUnZjazl1YkhraUxDSnViM1JwWm5raUxDSkRRMTlGUkVsVVQxSWlMQ0p5WlhObGRGTjVjM1JsYlNJc0luTjBiM0JUZVhOMFpXMGlMQ0prYVhOaFlteGxVbVZ1WkdWeUlpd2laVzVuYVc1bElpd2ljbVZ3WVdsdWRFbHVSV1JwZEUxdlpHVWlMQ0poYm1sdFlYUmhZbXhsSWl3aWRHOXZiSFJwY0NJc0lrTkRYMFJGVmlJc0lsOWpkWE4wYjIwaUxDSmpkWE4wYjIwaUxDSm5aWFFpTENKelpYUWlMQ0oyWVd4MVpTSXNJbDltYVd4bElpd2lkMkZ5YmtsRUlpd2lYMkZ3Y0d4NVJtbHNaU0lzSW5SNWNHVWlMQ0ptYVd4bElpd2labTl5WTJVaUxDSmZjM0J5YVhSbFJuSmhiV1VpTENKVGNISnBkR1ZHY21GdFpTSXNJbk53Y21sMFpVWnlZVzFsSWl3aWJHRnpkRk53Y21sMFpTSXNJbDl5Wlc1a1pYSlRjSEpwZEdWR2NtRnRaU0lzSWw5MWRXbGtJaXdpWjJWMFZHVjRkSFZ5WlNJc0lsOTBaWGgwZFhKbElpd2lYMkZ3Y0d4NVUzQnlhWFJsUm5KaGJXVWlMQ0psYldsMElpd2lWR1Y0ZEhWeVpUSkVJaXdpZEdWNGRIVnlaU0lzSW5KbFlXUnZibXg1SWl3aWRtbHphV0pzWlNJc0luQmhjblJwWTJ4bFEyOTFiblFpTENKZmMybHRkV3hoZEc5eUlpd2ljR0Z5ZEdsamJHVnpJaXdpWDNOMGIzQndaV1FpTENKemRHOXdjR1ZrSWl3aWNHeGhlVTl1VEc5aFpDSXNJbUYxZEc5U1pXMXZkbVZQYmtacGJtbHphQ0lzSW1GamRHbDJaU0lzSW5SdmRHRnNVR0Z5ZEdsamJHVnpJaXdpWkhWeVlYUnBiMjRpTENKbGJXbHpjMmx2YmxKaGRHVWlMQ0pzYVdabElpd2liR2xtWlZaaGNpSXNJbDl6ZEdGeWRFTnZiRzl5SWl3aWMzUmhjblJEYjJ4dmNpSXNJa052Ykc5eUlpd2lkbUZzSWl3aWNpSXNJbWNpTENKaUlpd2lZU0lzSWw5emRHRnlkRU52Ykc5eVZtRnlJaXdpYzNSaGNuUkRiMnh2Y2xaaGNpSXNJbDlsYm1SRGIyeHZjaUlzSW1WdVpFTnZiRzl5SWl3aVgyVnVaRU52Ykc5eVZtRnlJaXdpWlc1a1EyOXNiM0pXWVhJaUxDSmhibWRzWlNJc0ltRnVaMnhsVm1GeUlpd2ljM1JoY25SVGFYcGxJaXdpYzNSaGNuUlRhWHBsVm1GeUlpd2laVzVrVTJsNlpTSXNJbVZ1WkZOcGVtVldZWElpTENKemRHRnlkRk53YVc0aUxDSnpkR0Z5ZEZOd2FXNVdZWElpTENKbGJtUlRjR2x1SWl3aVpXNWtVM0JwYmxaaGNpSXNJbk52ZFhKalpWQnZjeUlzSWxabFl6SWlMQ0phUlZKUElpd2ljRzl6Vm1GeUlpd2lYM0J2YzJsMGFXOXVWSGx3WlNJc0ltWnZjbTFsY214NVUyVnlhV0ZzYVhwbFpFRnpJaXdpY0c5emFYUnBiMjVVZVhCbElpd2liV0YwWlhKcFlXd2lMQ0puWlhSTllYUmxjbWxoYkNJc0ltUmxabWx1WlNJc0ltVnRhWFIwWlhKTmIyUmxJaXdpWjNKaGRtbDBlU0lzSW5Od1pXVmtJaXdpYzNCbFpXUldZWElpTENKMFlXNW5aVzUwYVdGc1FXTmpaV3dpTENKMFlXNW5aVzUwYVdGc1FXTmpaV3hXWVhJaUxDSnlZV1JwWVd4QlkyTmxiQ0lzSW5KaFpHbGhiRUZqWTJWc1ZtRnlJaXdpY205MFlYUnBiMjVKYzBScGNpSXNJbk4wWVhKMFVtRmthWFZ6SWl3aWMzUmhjblJTWVdScGRYTldZWElpTENKbGJtUlNZV1JwZFhNaUxDSmxibVJTWVdScGRYTldZWElpTENKeWIzUmhkR1ZRWlhKVElpd2ljbTkwWVhSbFVHVnlVMVpoY2lJc0lrTnNZWE56SWl3aWJtRnRaU0lzSW1WNGRHVnVaSE1pTENKdGFYaHBibk1pTENKbFpHbDBiM0lpTENKdFpXNTFJaXdpYVc1emNHVmpkRzl5SWl3aWNHeGhlVTl1Um05amRYTWlMQ0psZUdWamRYUmxTVzVGWkdsMFRXOWtaU0lzSW1OMGIzSWlMQ0pmY0hKbGRtbGxkMVJwYldWeUlpd2lYMlp2WTNWelpXUWlMQ0pqYjJ4dmNpSXNJbk4wWVhScFkzTWlMQ0pFVlZKQlZFbFBUbDlKVGtaSlRrbFVXU0lzSWxOVVFWSlVYMU5KV2tWZlJWRlZRVXhmVkU5ZlJVNUVYMU5KV2tVaUxDSlRWRUZTVkY5U1FVUkpWVk5mUlZGVlFVeGZWRTlmUlU1RVgxSkJSRWxWVXlJc0lsOVFUa2RTWldGa1pYSWlMQ0pmVkVsR1JsSmxZV1JsY2lJc0ltOXVSbTlqZFhOSmJrVmthWFJ2Y2lJc0ltTnZiWEJ2Ym1WdWRITWlMQ0pwSWl3aVgzTjBZWEowVUhKbGRtbGxkeUlzSW05dVRHOXpkRVp2WTNWelNXNUZaR2wwYjNJaUxDSmZjM1J2Y0ZCeVpYWnBaWGNpTENKamJHVmhja2x1ZEdWeWRtRnNJaXdpWDJOdmJuWmxjblJVWlhoMGRYSmxWRzlUY0hKcGRHVkdjbUZ0WlNJc0lsOTBhR2x6SWl3aVJXUnBkRzl5SWl3aVlYTnpaWFJrWWlJc0luRjFaWEo1VFdWMFlVbHVabTlDZVZWMWFXUWlMQ0psY25JaUxDSnRaWFJoU1c1bWJ5SXNJbVZ5Y205eUlpd2liV1YwWVNJc0lrcFRUMDRpTENKd1lYSnpaU0lzSW1wemIyNGlMQ0pPYjJSbFZYUnBiSE1pTENKdWIyUmxVR0YwYUNJc0ltZGxkRTV2WkdWUVlYUm9JaXdpZDJGeWJpSXNJbUZ6YzJWMFZYSnNJaXdpVlhKc0lpd2lZbUZ6Wlc1aGJXVk9iMFY0ZENJc0ltRnpjMlYwVUdGMGFDSXNJblYxYVdRaUxDSnpkV0pOWlhSaGN5SXNJa0Z6YzJWMFRHbGljbUZ5ZVNJc0lteHZZV1JCYzNObGRDSXNJbk53SWl3aVgxOXdjbVZzYjJGa0lpd2liV2x6YzBOMWMzUnZiVlJsZUhSMWNtVWlMQ0pwYzFCc1lYbHBibWNpTENKdmJrVnVZV0pzWlNJc0lsOXpkWEJsY2lJc0lsOXlaVzVrWlhKR2JHRm5JaXdpUmt4QlIxOVNSVTVFUlZJaUxDSmZZV04wYVhaaGRHVk5ZWFJsY21saGJDSXNJbTl1UkdWemRISnZlU0lzSWw5aWRXWm1aWElpTENKa1pYTjBjbTk1SWl3aVgybGhJaXdpWDNWMlJtbHNiR1ZrSWl3aWJHRjBaVlZ3WkdGMFpTSXNJbVIwSWl3aVptbHVhWE5vWldRaUxDSnpkR1Z3SWl3aVlXUmtVR0Z5ZEdsamJHVWlMQ0p6ZEc5d0lpd2ljbVZ6WlhRaUxDSnBjMFoxYkd3aUxDSnpaWFJVWlhoMGRYSmxWMmwwYUZKbFkzUWlMQ0p5WldOMElpd2ljMlZzWmlJc0lteHZZV1JsY2lJc0lteHZZV1FpTENKdVlYUnBkbVZWY213aUxDSmpiMjUwWlc1MElpd2laWEp5YjNKSlJDSXNJbWx6Vm1Gc2FXUWlMQ0pmY0d4cGMzUkdhV3hsSWl3aVgybHVhWFJYYVhSb1JHbGpkR2x2Ym1GeWVTSXNJbDlwYm1sMFZHVjRkSFZ5WlZkcGRHaEVhV04wYVc5dVlYSjVJaXdpWkdsamRDSXNJbWx0WjFCaGRHZ2lMQ0p3WVhSb0lpd2lZMmhoYm1kbFFtRnpaVzVoYldVaUxDSnNiMkZrU1cxaFoyVWlMQ0oxYm1SbFptbHVaV1FpTENKMFpYaDBkWEpsUkdGMFlTSXNJblJsZUNJc0ltZGxkRkpsY3lJc0ltSjFabVpsY2lJc0luVnVlbWx3UW1GelpUWTBRWE5CY25KaGVTSXNJbXh2WjBsRUlpd2lhVzFoWjJWR2IzSnRZWFFpTENKallXNTJZWE5QWW1vaUxDSmtiMk4xYldWdWRDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSnRlVkJ1WjA5aWFpSXNJbkpsYm1SbGNpSXNJbkJoY25ObFZFbEdSaUlzSW1OaFkyaGxTVzFoWjJVaUxDSndZWEp6WlVsdWRDSXNJbkJoY25ObFJteHZZWFFpTENKZmRHVnRjRVZ0YVhOemFXOXVVbUYwWlNJc0lrMWhkR2dpTENKdGFXNGlMQ0pPZFcxaVpYSWlMQ0pOUVZoZlZrRk1WVVVpTENKemNtTkNiR1Z1WkVaaFkzUnZjaUlzSWxOU1ExOUJURkJJUVNJc0ltUnpkRUpzWlc1a1JtRmpkRzl5SWl3aVQwNUZYMDFKVGxWVFgxTlNRMTlCVEZCSVFTSXNJbXh2WTFOMFlYSjBRMjlzYjNJaUxDSnNiMk5UZEdGeWRFTnZiRzl5Vm1GeUlpd2liRzlqUlc1a1EyOXNiM0lpTENKc2IyTkZibVJEYjJ4dmNsWmhjaUlzSW5naUxDSjVJaXdpYkc5alVtOTBZWFJwYjI1SmMwUnBjaUlzSW5SdlUzUnlhVzVuSWl3aWRHOU1iM2RsY2tOaGMyVWlMQ0pmYjI1VVpYaDBkWEpsVEc5aFpHVmtJaXdpZFhCa1lYUmxWVlp6SWl3aWIyeGtSbkpoYldVaUxDSnZabVlpTENKMFpYaDBkWEpsVEc5aFpHVmtJaXdpYjI1alpTSXNJbVZ1YzNWeVpVeHZZV1JVWlhoMGRYSmxJaXdpYkc5aFpHVmtJaXdpYldGeWEwWnZja04xYzNSdmJVbEJVbVZ1WkdWeUlpd2lYMkZ6YzJWdFlteGxjaUlzSW1OeVpXRjBaVWxCSWl3aWMyaGhjbVZrVFdGMFpYSnBZV3h6SWl3aVoyVjBTVzV6ZEdGdWRHbGhkR1ZrUW5WcGJIUnBiazFoZEdWeWFXRnNJaXdpWjJWMFNXNXpkR0Z1ZEdsaGRHVmtUV0YwWlhKcFlXd2lMQ0p6WlhSUWNtOXdaWEowZVNJc0luTmxkRTFoZEdWeWFXRnNJaXdpWDJacGJtbHphR1ZrVTJsdGRXeGhkR2x2YmlJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJNRUpCTEVsQlFVMUJMRkZCUVZGRExGRkJRVkVzTUVKQlFWSXNRMEZCWkR0QlFVTkJMRWxCUVUxRExHZENRVUZuUWtRc1VVRkJVU3h0UWtGQlVpeERRVUYwUWp0QlFVTkJMRWxCUVUxRkxHdENRVUZyUWtZc1VVRkJVU3h6UTBGQlVpeERRVUY0UWp0QlFVTkJMRWxCUVUxSExGRkJRVkZJTEZGQlFWRXNlVUpCUVZJc1EwRkJaRHRCUVVOQkxFbEJRVTFKTEZsQlFWbEtMRkZCUVZFc1pVRkJVaXhEUVVGc1FqdEJRVU5CTEVsQlFVMUxMR0ZCUVdGTUxGRkJRVkVzWjBKQlFWSXNRMEZCYmtJN1FVRkRRU3hKUVVGTlRTeGpRVUZqVGl4UlFVRlJMRFJDUVVGU0xFTkJRWEJDTzBGQlEwRXNTVUZCVFU4c1lVRkJZVkFzVVVGQlVTdzRRa0ZCVWl4RFFVRnVRanRCUVVOQkxFbEJRVTFSTEc5Q1FVRnZRbElzVVVGQlVTeHpRa0ZCVWl4RFFVRXhRanRCUVVOQkxFbEJRVTFUTEZkQlFWZFVMRkZCUVZFc2IwTkJRVklzUTBGQmFrSTdRVUZEUVN4SlFVRk5WU3haUVVGWlZpeFJRVUZSTERCQ1FVRlNMRU5CUVd4Q096dEJRVVZCTEZOQlFWTlhMRzlDUVVGVUxFTkJRU3RDUXl4UFFVRXZRaXhGUVVGM1F6dEJRVU53UXp0QlFVTkJMRkZCUVVsQkxGRkJRVkZETEUxQlFWSXNSMEZCYVVJc1EwRkJha0lzU1VGQmMwSkVMRkZCUVZFc1EwRkJVaXhOUVVGbExFbEJRWEpETEVsQlEwZEJMRkZCUVZFc1EwRkJVaXhOUVVGbExFbEJSR3hDTEVsQlJVZEJMRkZCUVZFc1EwRkJVaXhOUVVGbExFbEJSbXhDTEVsQlIwZEJMRkZCUVZFc1EwRkJVaXhOUVVGbExFbEJTR3hDTEVsQlNVZEJMRkZCUVZFc1EwRkJVaXhOUVVGbExFbEJTbXhDTEVsQlMwZEJMRkZCUVZFc1EwRkJVaXhOUVVGbExFbEJUR3hDTEVsQlRVZEJMRkZCUVZFc1EwRkJVaXhOUVVGbExFbEJUbXhDTEVsQlQwZEJMRkZCUVZFc1EwRkJVaXhOUVVGbExFbEJVSFJDTEVWQlR6UkNPMEZCUTNoQ0xHVkJRVTlpTEUxQlFVMWxMRmRCUVU0c1EwRkJhMEpETEVkQlFYcENPMEZCUTBnN08wRkJSVVE3UVVGRFFTeFJRVUZKU0N4UlFVRlJReXhOUVVGU0xFZEJRV2xDTEVOQlFXcENMRXRCUVhkQ1JDeFJRVUZSTEVOQlFWSXNUVUZCWlN4SlFVRm1MRWxCUVhWQ1FTeFJRVUZSTEVOQlFWSXNUVUZCWlN4SlFVRjJReXhKUVVOdVFrRXNVVUZCVVN4RFFVRlNMRTFCUVdVc1NVRkJaaXhKUVVGMVFrRXNVVUZCVVN4RFFVRlNMRTFCUVdVc1NVRkVia0lzU1VGRmJrSkJMRkZCUVZFc1EwRkJVaXhOUVVGbExFbEJRV1lzU1VGQmRVSkJMRkZCUVZFc1EwRkJVaXhOUVVGbExFbEJSakZETEVOQlFVb3NSVUZGYzBRN1FVRkRiRVFzWlVGQlQySXNUVUZCVFdVc1YwRkJUaXhEUVVGclFrVXNTVUZCZWtJN1FVRkRTRHRCUVVORUxGZEJRVTlxUWl4TlFVRk5aU3hYUVVGT0xFTkJRV3RDUnl4UFFVRjZRanRCUVVOSU96dEJRVVZFTzBGQlEwRXNVMEZCVTBNc2NVSkJRVlFzUTBGQlowTkRMRWxCUVdoRExFVkJRWE5ETzBGQlEyeERMRkZCUVVsRExGTkJRVk5FTEV0QlFVdERMRTFCUVd4Q08wRkJRVUVzVVVGQk1FSkRMRTlCUVU5R0xFdEJRVXRITEZsQlFVd3NRMEZCYTBKRExFZEJRVWRETEdOQlFYSkNMRU5CUVdwRE8wRkJRMEVzVVVGQlNTeERRVUZEU2l4TlFVRkVMRWxCUVZjc1EwRkJRME1zU1VGQmFFSXNSVUZCYzBJN1FVRkRiRUlzWlVGQlQwWXNTMEZCUzAwc2RVSkJRVXdzUTBGQk5rSkdMRWRCUVVkRExHTkJRV2hETEVOQlFWQTdRVUZEU0R0QlFVTkVMRmRCUVU5T0xITkNRVUZ6UWtVc1RVRkJkRUlzUTBGQlVEdEJRVU5JT3p0QlFVZEVPenM3T3p0QlFVdEJMRWxCUVVsTkxHTkJRV05JTEVkQlFVZEpMRWxCUVVnc1EwRkJVVHRCUVVOMFFqczdPenM3UVVGTFFVTXNZVUZCVXl4RFFVNWhPMEZCVDNSQ096czdPenRCUVV0QlF5eFpRVUZSTzBGQldtTXNRMEZCVWl4RFFVRnNRanM3UVVGbFFUczdPenM3UVVGTFFTeEpRVUZKUXl4bFFVRmxVQ3hIUVVGSFNTeEpRVUZJTEVOQlFWRTdRVUZEZGtJN096czdPenM3UVVGUFFVa3NWVUZCVFN4RFFWSnBRanM3UVVGVmRrSTdPenM3T3pzN08wRkJVVUZETEdOQlFWVXNRMEZzUW1FN08wRkJiMEoyUWpzN096czdPenRCUVU5QlF5eGhRVUZUTzBGQk0wSmpMRU5CUVZJc1EwRkJia0k3TzBGQk9FSkJPenM3TzBGQlNVRXNTVUZCU1VNc1lVRkJZVHRCUVVOaU96czdPenM3UVVGTlFVTXNZVUZCVXp0QlFVTk1ReXhwUWtGQlV5eEpRVVJLTzBGQlJVeERMRzlDUVVGWkxFbEJSbEE3UVVGSFRFTXNaMEpCUVZGRExHRkJRV0VzV1VGQldUdEJRVU0zUWl4cFFrRkJTME1zVjBGQlREdEJRVU5CTEdkQ1FVRkxMRU5CUVVNc1MwRkJTMHdzVDBGQldDeEZRVUZ4UWp0QlFVTnFRaXh4UWtGQlMwMHNWVUZCVER0QlFVTkJMSEZDUVVGTFF5eGhRVUZNTzBGQlEwZzdRVUZEUkc1Q0xHVkJRVWR2UWl4TlFVRklMRU5CUVZWRExHbENRVUZXTzBGQlEwZ3NVMEZXU1R0QlFWZE1ReXh2UWtGQldTeExRVmhRTzBGQldVeERMR2xDUVVGVFF5eFZRVUZWTzBGQldtUXNTMEZRU1RzN1FVRnpRbUk3T3pzN096czdRVUZQUVVNc1lVRkJVeXhMUVRkQ1NUdEJRVGhDWWtNc1dVRkJVVHRCUVVOS1F5eGhRVUZMTEdWQlFWazdRVUZEWWl4dFFrRkJUeXhMUVVGTFJpeFBRVUZhTzBGQlEwZ3NVMEZJUnp0QlFVbEtSeXhoUVVGTExHRkJRVlZETEV0QlFWWXNSVUZCYVVJN1FVRkRiRUlzWjBKQlFVbGlMR0ZCUVdFc1EwRkJRMkVzUzBGQlpDeEpRVUYxUWl4RFFVRkRMRXRCUVV0RExFdEJRV3BETEVWQlFYZERPMEZCUTNCRExIVkNRVUZQT1VJc1IwRkJSeXRDTEUxQlFVZ3NRMEZCVlN4SlFVRldMRU5CUVZBN1FVRkRTRHRCUVVORUxHZENRVUZKTEV0QlFVdE9MRTlCUVV3c1MwRkJhVUpKTEV0QlFYSkNMRVZCUVRSQ08wRkJRM2hDTEhGQ1FVRkxTaXhQUVVGTUxFZEJRV1ZKTEV0QlFXWTdRVUZEUVN4eFFrRkJTMGNzVlVGQlREdEJRVU5CTEc5Q1FVRkphRUlzVTBGQlNpeEZRVUZsTzBGQlExaG9RaXgxUWtGQlIyOUNMRTFCUVVnc1EwRkJWVU1zYVVKQlFWWTdRVUZEU0R0QlFVTktPMEZCUTBvc1UwRm1SenRCUVdkQ1NrTXNiMEpCUVZrc1MwRm9RbEk3UVVGcFFrcERMR2xDUVVGVFF5eFZRVUZWTzBGQmFrSm1MRXRCT1VKTE96dEJRV3RFWWpzN096czdPMEZCVFVGTkxGZEJRVTg3UVVGRFNHcENMR2xDUVVGVExFbEJSRTQ3UVVGRlNHOUNMR05CUVUxMlJEdEJRVVpJTEV0QmVFUk5PMEZCTkVSaWQwUXNWVUZCVFR0QlFVTkdVQ3hoUVVGTExHVkJRVms3UVVGRFlpeHRRa0ZCVHl4TFFVRkxSeXhMUVVGYU8wRkJRMGdzVTBGSVF6dEJRVWxHUml4aFFVRkxMR0ZCUVZWRExFdEJRVllzUlVGQmFVSk5MRXRCUVdwQ0xFVkJRWGRDTzBGQlEzcENMR2RDUVVGSkxFdEJRVXRNTEV0QlFVd3NTMEZCWlVRc1MwRkJaaXhKUVVGNVFtSXNZVUZCWVcxQ0xFdEJRVEZETEVWQlFXdEVPMEZCUXpsRExIRkNRVUZMVEN4TFFVRk1MRWRCUVdGRUxFdEJRV0k3UVVGRFFTeHZRa0ZCU1VFc1MwRkJTaXhGUVVGWE8wRkJRMUFzZVVKQlFVdEhMRlZCUVV3N1FVRkRRU3gzUWtGQlNXaENMRk5CUVVvc1JVRkJaVHRCUVVOWWFFSXNNa0pCUVVkdlFpeE5RVUZJTEVOQlFWVkRMR2xDUVVGV08wRkJRMGc3UVVGRFNpeHBRa0ZNUkN4TlFVMUxPMEZCUTBRc2VVSkJRVXRMTEUxQlFVd3NSMEZCWXl4SlFVRmtPMEZCUTBnN1FVRkRTanRCUVVOS0xGTkJha0pETzBGQmEwSkdTaXh2UWtGQldTeExRV3hDVmp0QlFXMUNSbGNzWTBGQlRYWkVMR0ZCYmtKS08wRkJiMEpHTmtNc2FVSkJRVk5ETEZWQlFWVTdRVUZ3UW1wQ0xFdEJOVVJQT3p0QlFXMUdZanM3T3pzN08wRkJUVUZaTEd0Q1FVRmpPMEZCUTFaMlFpeHBRa0ZCVXl4SlFVUkRPMEZCUlZadlFpeGpRVUZOYWtNc1IwRkJSM0ZETzBGQlJrTXNTMEY2UmtRN1FVRTJSbUpETEdsQ1FVRmhPMEZCUTFSWUxHRkJRVXNzWlVGQldUdEJRVU5pTEcxQ1FVRlBMRXRCUVV0VExGbEJRVm83UVVGRFNDeFRRVWhSTzBGQlNWUlNMR0ZCUVVzc1lVRkJWVU1zUzBGQlZpeEZRVUZwUWswc1MwRkJha0lzUlVGQmQwSTdRVUZEZWtJc1owSkJRVWxKTEdGQlFXRXNTMEZCUzBNc2EwSkJRWFJDTzBGQlEwRXNaMEpCUVVsNFFpeFRRVUZLTEVWQlFXVTdRVUZEV0N4dlFrRkJTU3hEUVVGRGJVSXNTMEZCUkN4SlFVRlZTU3hsUVVGbFZpeExRVUUzUWl4RlFVRnZRenRCUVVOb1F6dEJRVU5JTzBGQlEwb3NZVUZLUkN4TlFVdExPMEZCUTBRc2IwSkJRVWxWTEdWQlFXVldMRXRCUVc1Q0xFVkJRVEJDTzBGQlEzUkNPMEZCUTBnN1FVRkRTanRCUVVORUxHbENRVUZMVnl4clFrRkJUQ3hIUVVFd1FsZ3NTMEZCTVVJN08wRkJSVUVzWjBKQlFVa3NRMEZCUTBFc1MwRkJSQ3hKUVVGVlFTeE5RVUZOV1N4TFFVRndRaXhGUVVFeVFqdEJRVU4yUWl4eFFrRkJTMHdzV1VGQlRDeEhRVUZ2UWxBc1MwRkJjRUk3UVVGRFNEczdRVUZGUkN4blFrRkJTU3hEUVVGRFZTeGpRVUZqUVN4WFFVRlhSeXhWUVVGWUxFVkJRV1lzVDBGQk5rTmlMRk5CUVZOQkxFMUJRVTFoTEZWQlFVNHNSVUZCZEVRc1EwRkJTaXhGUVVFclJUdEJRVU16UlN4eFFrRkJTME1zVVVGQlRDeEhRVUZuUWl4SlFVRm9RanRCUVVOQkxIRkNRVUZMUXl4cFFrRkJUQ3hEUVVGMVFrd3NWVUZCZGtJN1FVRkRTRHRCUVVORUxHZENRVUZKZGtJc1UwRkJTaXhGUVVGbE8wRkJRMWdzY1VKQlFVdHdRaXhKUVVGTUxFTkJRVlZwUkN4SlFVRldMRU5CUVdVc2NVSkJRV1lzUlVGQmMwTXNTVUZCZEVNN1FVRkRTRHRCUVVOS0xGTkJOMEpSTzBGQk9FSlVXaXhqUVVGTmFrTXNSMEZCUjNGRExGZEJPVUpCTzBGQkswSlVaQ3hwUWtGQlUwTXNWVUZCVlR0QlFTOUNWaXhMUVRkR1FUczdRVUZuU1dJN1FVRkRRVzFDTEdOQlFWVTdRVUZEVGpsQ0xHbENRVUZUTEVsQlJFZzdRVUZGVG05Q0xHTkJRVTFxUXl4SFFVRkhPRU1zVTBGR1NEdEJRVWRPYUVNc2IwSkJRVms3UVVGSVRpeExRV3BKUnpzN1FVRjFTV0k3T3pzN096czdRVUZQUVdsRExHRkJRVk03UVVGRFRIQkNMR0ZCUVVzc1pVRkJXVHRCUVVOaUxHMUNRVUZQTEV0QlFVdG5RaXhSUVVGYU8wRkJRMGdzVTBGSVNUdEJRVWxNWml4aFFVRkxMR0ZCUVZWRExFdEJRVllzUlVGQmFVSTdRVUZEYkVJc1owSkJRVWxCTEV0QlFVb3NSVUZCVnp0QlFVTlFOMElzYlVKQlFVY3JRaXhOUVVGSUxFTkJRVlVzU1VGQlZqdEJRVU5JTzBGQlEwb3NVMEZTU1R0QlFWTk1SU3hqUVVGTmFrTXNSMEZCUnpoRExGTkJWRW83UVVGVlRIWkNMR2xDUVVGVFF5eFZRVUZWTEhkRFFWWmtPMEZCVjB4M1FpeHJRa0ZCVlN4SlFWaE1PMEZCV1V4RExHbENRVUZUTEV0QldrbzdRVUZoVEROQ0xHOUNRVUZaTzBGQllsQXNTMEU1U1VrN08wRkJPRXBpT3pzN096czdRVUZOUVRSQ0xHMUNRVUZsTzBGQlExaEVMR2xDUVVGVExFdEJSRVU3UVVGRldIUkNMRmRCUmxjc2FVSkJSVW83UVVGRFNDeHRRa0ZCVHl4TFFVRkxkMElzVlVGQlRDeERRVUZuUWtNc1UwRkJhRUlzUTBGQk1FSTVSQ3hOUVVGcVF6dEJRVU5JTEZOQlNsVTdPMEZCUzFnd1JDeHJRa0ZCVlR0QlFVeERMRXRCY0V0R096dEJRVFJMWWpzN096czdRVUZMUVVzc1kwRkJWU3hKUVdwTVJ6dEJRV3RNWWtNc1lVRkJVenRCUVVOTU0wSXNWMEZFU3l4cFFrRkRSVHRCUVVOSUxHMUNRVUZQTEV0QlFVc3dRaXhSUVVGYU8wRkJRMGdzVTBGSVNUczdRVUZKVEM5Q0xHOUNRVUZaTEV0QlNsQTdRVUZMVERKQ0xHbENRVUZUTzBGQlRFb3NTMEZzVEVrN08wRkJNRXhpT3pzN096czdPMEZCVDBGTkxHZENRVUZaTEVsQmFrMURPenRCUVcxTllqczdPenM3UVVGTFFVTXNkMEpCUVc5Q08wRkJRMmhDTTBNc2FVSkJRVk1zUzBGRVR6dEJRVVZvUWxNc2IwSkJRVmtzUzBGR1NUdEJRVWRvUWtNc2FVSkJRVk5ETEZWQlFWVTdRVUZJU0N4TFFYaE5VRHM3UVVFNFRXSTdPenM3T3p0QlFVMUJhVU1zV1VGQlVUdEJRVU5LT1VJc1lVRkJTeXhsUVVGWk8wRkJRMklzYlVKQlFVOHNTMEZCUzNkQ0xGVkJRVXdzUTBGQlowSk5MRTFCUVhaQ08wRkJRMGdzVTBGSVJ6dEJRVWxLVWl4cFFrRkJVenRCUVVwTUxFdEJjRTVMT3p0QlFUSk9ZanM3T3pzN08wRkJUVUZUTEc5Q1FVRm5RaXhIUVdwUFNEdEJRV3RQWWpzN096czdPMEZCVFVGRExHTkJRVlVzUTBGQlF5eERRWGhQUlR0QlFYbFBZanM3T3pzN08wRkJUVUZETEd0Q1FVRmpMRVZCTDA5RU8wRkJaMUJpT3pzN096czdRVUZOUVVNc1ZVRkJUU3hEUVhSUVR6dEJRWFZRWWpzN096czdPMEZCVFVGRExHRkJRVk1zUTBFM1VFazdPMEZCSzFCaU96czdPenM3UVVGTlFVTXNhVUpCUVdFc1NVRnlVVUU3UVVGelVXSkRMR2RDUVVGWk8wRkJRMUl2UWl4alFVRk5ha01zUjBGQlIybEZMRXRCUkVRN1FVRkZVblJETEZkQlJsRXNhVUpCUlVRN1FVRkRTQ3h0UWtGQlR5eExRVUZMYjBNc1YwRkJXanRCUVVOSUxGTkJTazg3UVVGTFVtNURMRmRCVEZFc1pVRkxTSE5ETEVkQlRFY3NSVUZMUlR0QlFVTk9MR2xDUVVGTFNDeFhRVUZNTEVOQlFXbENTU3hEUVVGcVFpeEhRVUZ4UWtRc1NVRkJTVU1zUTBGQmVrSTdRVUZEUVN4cFFrRkJTMG9zVjBGQlRDeERRVUZwUWtzc1EwRkJha0lzUjBGQmNVSkdMRWxCUVVsRkxFTkJRWHBDTzBGQlEwRXNhVUpCUVV0TUxGZEJRVXdzUTBGQmFVSk5MRU5CUVdwQ0xFZEJRWEZDU0N4SlFVRkpSeXhEUVVGNlFqdEJRVU5CTEdsQ1FVRkxUaXhYUVVGTUxFTkJRV2xDVHl4RFFVRnFRaXhIUVVGeFFrb3NTVUZCU1Vrc1EwRkJla0k3UVVGRFNEdEJRVlpQTEV0QmRGRkRPMEZCYTFKaU96czdPenM3UVVGTlFVTXNiMEpCUVdkQ0xFbEJlRkpJTzBGQmVWSmlReXh0UWtGQlpUdEJRVU5ZZGtNc1kwRkJUV3BETEVkQlFVZHBSU3hMUVVSRk8wRkJSVmgwUXl4WFFVWlhMR2xDUVVWS08wRkJRMGdzYlVKQlFVOHNTMEZCU3pSRExHTkJRVm83UVVGRFNDeFRRVXBWTzBGQlMxZ3pReXhYUVV4WExHVkJTMDV6UXl4SFFVeE5MRVZCUzBRN1FVRkRUaXhwUWtGQlMwc3NZMEZCVEN4RFFVRnZRa29zUTBGQmNFSXNSMEZCZDBKRUxFbEJRVWxETEVOQlFUVkNPMEZCUTBFc2FVSkJRVXRKTEdOQlFVd3NRMEZCYjBKSUxFTkJRWEJDTEVkQlFYZENSaXhKUVVGSlJTeERRVUUxUWp0QlFVTkJMR2xDUVVGTFJ5eGpRVUZNTEVOQlFXOUNSaXhEUVVGd1FpeEhRVUYzUWtnc1NVRkJTVWNzUTBGQk5VSTdRVUZEUVN4cFFrRkJTMFVzWTBGQlRDeERRVUZ2UWtRc1EwRkJjRUlzUjBGQmQwSktMRWxCUVVsSkxFTkJRVFZDTzBGQlEwZzdRVUZXVlN4TFFYcFNSanRCUVhGVFlqczdPenM3TzBGQlRVRkhMR1ZCUVZjc1NVRXpVMFU3UVVFMFUySkRMR05CUVZVN1FVRkRUbnBETEdOQlFVMXFReXhIUVVGSGFVVXNTMEZFU0R0QlFVVk9kRU1zVjBGR1RTeHBRa0ZGUXp0QlFVTklMRzFDUVVGUExFdEJRVXM0UXl4VFFVRmFPMEZCUTBnc1UwRktTenRCUVV0T04wTXNWMEZNVFN4bFFVdEVjME1zUjBGTVF5eEZRVXRKTzBGQlEwNHNhVUpCUVV0UExGTkJRVXdzUTBGQlpVNHNRMEZCWml4SFFVRnRRa1FzU1VGQlNVTXNRMEZCZGtJN1FVRkRRU3hwUWtGQlMwMHNVMEZCVEN4RFFVRmxUQ3hEUVVGbUxFZEJRVzFDUml4SlFVRkpSU3hEUVVGMlFqdEJRVU5CTEdsQ1FVRkxTeXhUUVVGTUxFTkJRV1ZLTEVOQlFXWXNSMEZCYlVKSUxFbEJRVWxITEVOQlFYWkNPMEZCUTBFc2FVSkJRVXRKTEZOQlFVd3NRMEZCWlVnc1EwRkJaaXhIUVVGdFFrb3NTVUZCU1Vrc1EwRkJka0k3UVVGRFNEdEJRVlpMTEV0Qk5WTkhPMEZCZDFSaU96czdPenM3UVVGTlFVc3NhMEpCUVdNc1NVRTVWRVE3UVVFclZHSkRMR2xDUVVGaE8wRkJRMVF6UXl4alFVRk5ha01zUjBGQlIybEZMRXRCUkVFN1FVRkZWSFJETEZkQlJsTXNhVUpCUlVZN1FVRkRTQ3h0UWtGQlR5eExRVUZMWjBRc1dVRkJXanRCUVVOSUxGTkJTbEU3UVVGTFZDOURMRmRCVEZNc1pVRkxTbk5ETEVkQlRFa3NSVUZMUXp0QlFVTk9MR2xDUVVGTFV5eFpRVUZNTEVOQlFXdENVaXhEUVVGc1FpeEhRVUZ6UWtRc1NVRkJTVU1zUTBGQk1VSTdRVUZEUVN4cFFrRkJTMUVzV1VGQlRDeERRVUZyUWxBc1EwRkJiRUlzUjBGQmMwSkdMRWxCUVVsRkxFTkJRVEZDTzBGQlEwRXNhVUpCUVV0UExGbEJRVXdzUTBGQmEwSk9MRU5CUVd4Q0xFZEJRWE5DU0N4SlFVRkpSeXhEUVVFeFFqdEJRVU5CTEdsQ1FVRkxUU3haUVVGTUxFTkJRV3RDVEN4RFFVRnNRaXhIUVVGelFrb3NTVUZCU1Vrc1EwRkJNVUk3UVVGRFNEdEJRVlpSTEV0QkwxUkJPenRCUVRSVllqczdPenM3TzBGQlRVRlBMRmRCUVU4c1JVRnNWazA3UVVGdFZtSTdPenM3T3p0QlFVMUJReXhqUVVGVkxFVkJlbFpITzBGQk1GWmlPenM3T3pzN1FVRk5RVU1zWlVGQlZ5eEZRV2hYUlR0QlFXbFhZanM3T3pzN08wRkJUVUZETEd0Q1FVRmpMRU5CZGxkRU8wRkJkMWRpT3pzN096czdRVUZOUVVNc1lVRkJVeXhEUVRsWFNUdEJRU3RYWWpzN096czdPMEZCVFVGRExHZENRVUZaTEVOQmNsaERPMEZCYzFoaU96czdPenM3UVVGTlFVTXNaVUZCVnl4RFFUVllSVHRCUVRaWVlqczdPenM3TzBGQlRVRkRMR3RDUVVGakxFTkJibGxFTzBGQmIxbGlPenM3T3pzN1FVRk5RVU1zWVVGQlV5eERRVEZaU1R0QlFUSlpZanM3T3pzN08wRkJUVUZETEdkQ1FVRlpMRU5CYWxwRE96dEJRVzFhWWpzN096czdPMEZCVFVGRExHVkJRVmQyUml4SFFVRkhkMFlzU1VGQlNDeERRVUZSUXl4SlFYcGFUanM3UVVFeVdtSTdPenM3T3p0QlFVMUJReXhaUVVGUk1VWXNSMEZCUjNkR0xFbEJRVWdzUTBGQlVVTXNTVUZxWVVnN08wRkJiV0ZpT3pzN096czdRVUZOUVVVc2JVSkJRV1U3UVVGRFdEbEZMR2xDUVVGVFRpeGhRVUZoUXl4SlFVUllPMEZCUlZodlJpdzRRa0ZCYzBJN1FVRkdXQ3hMUVhwaFJqczdRVUU0WVdKRExHdENRVUZqTzBGQlExWTFSQ3hqUVVGTk1VSXNXVUZFU1R0QlFVVldiMElzVjBGR1ZTeHBRa0ZGU0R0QlFVTklMRzFDUVVGUExFdEJRVXRuUlN4aFFVRmFPMEZCUTBnc1UwRktVenRCUVV0V0wwUXNWMEZNVlN4bFFVdE1jME1zUjBGTVN5eEZRVXRCTzBGQlEwNHNaMEpCUVVrMFFpeFhRVUZYTEV0QlFVdERMRmRCUVV3c1EwRkJhVUlzUTBGQmFrSXNRMEZCWmp0QlFVTkJMR2RDUVVGSlJDeFJRVUZLTEVWQlFXTTdRVUZEVmtFc2VVSkJRVk5GTEUxQlFWUXNRMEZCWjBJc1dVRkJhRUlzUlVGQk9FSTVRaXhSUVVGUk0wUXNZVUZCWVVNc1NVRkJia1E3UVVGRFNEdEJRVU5FTEdsQ1FVRkxiVVlzWVVGQlRDeEhRVUZ4UW5wQ0xFZEJRWEpDTzBGQlEwZzdRVUZZVXl4TFFUbGhSRHM3UVVFMFltSTdPenM3T3p0QlFVMUJLMElzYVVKQlFXRTdRVUZEVkhCR0xHbENRVUZUVml4WlFVRlpSU3hQUVVSYU8wRkJSVlEwUWl4alFVRk5PVUk3UVVGR1J5eExRV3hqUVRzN1FVRjFZMkk3TzBGQlJVRTdPenM3T3p0QlFVMUJLMFlzWVVGQlUyeEhMRWRCUVVkM1JpeEpRVUZJTEVOQlFWRkRMRWxCTDJOS08wRkJaMlJpT3pzN096czdRVUZOUVZVc1YwRkJUeXhIUVhSa1RUdEJRWFZrWWpzN096czdPMEZCVFVGRExHTkJRVlVzUlVFM1pFYzdRVUU0WkdJN096czdPenRCUVUxQlF5eHhRa0ZCYVVJc1JVRndaVW83UVVGeFpXSTdPenM3T3p0QlFVMUJReXgzUWtGQmIwSXNRMEV6WlZBN1FVRTBaV0k3T3pzN096dEJRVTFCUXl4cFFrRkJZU3hEUVd4bVFUdEJRVzFtWWpzN096czdPMEZCVFVGRExHOUNRVUZuUWl4RFFYcG1TRHM3UVVFeVptSTdPenM3T3p0QlFVMUJReXh0UWtGQlpTeExRV3BuUWtZN08wRkJiV2RDWWpzN1FVRkZRVHM3T3pzN08wRkJUVUZETEdsQ1FVRmhMRU5CTTJkQ1FUdEJRVFJuUW1JN096czdPenRCUVUxQlF5eHZRa0ZCWjBJc1EwRnNhRUpJTzBGQmJXaENZanM3T3pzN08wRkJUVUZETEdWQlFWY3NRMEY2YUVKRk8wRkJNR2hDWWpzN096czdPMEZCVFVGRExHdENRVUZqTEVOQmFHbENSRHRCUVdscFFtSTdPenM3T3p0QlFVMUJReXhuUWtGQldTeERRWFpwUWtNN1FVRjNhVUppT3pzN096czdRVUZOUVVNc2JVSkJRV1U3TzBGQk9XbENSaXhEUVVGcVFqczdRVUZyYWtKQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk1rTkJMRWxCUVVrNVJ5eHBRa0ZCYVVKRUxFZEJRVWRuU0N4TFFVRklMRU5CUVZNN1FVRkRNVUpETEZWQlFVMHNiVUpCUkc5Q08wRkJSVEZDUXl4aFFVRlRka2tzWlVGR2FVSTdRVUZITVVKM1NTeFpRVUZSTEVOQlFVTm9TU3hUUVVGRUxFTkJTR3RDTzBGQlNURkNhVWtzV1VGQlVYQkhMR0ZCUVdFN1FVRkRha0p4Unl4alFVRk5MRzFFUVVSWE8wRkJSV3BDUXl4dFFrRkJWeXd3UkVGR1RUdEJRVWRxUWtNc2NVSkJRV0VzU1VGSVNUdEJRVWxxUWtNc01rSkJRVzFDTzBGQlNrWXNTMEZLU3pzN1FVRlhNVUpETEZWQlFVMHNaMEpCUVZrN1FVRkRaQ3hoUVVGTFF5eGhRVUZNTEVkQlFYRkNMRWxCUVhKQ08wRkJRMEVzWVVGQlMwTXNVVUZCVEN4SFFVRm5RaXhMUVVGb1FqczdRVUZGUVN4aFFVRkxlRVVzVlVGQlRDeEhRVUZyUWl4SlFVRkpiRVVzYVVKQlFVb3NRMEZCYzBJc1NVRkJkRUlzUTBGQmJFSTdPMEZCUlVFN1FVRkRRU3hoUVVGTE9FVXNWMEZCVEN4SFFVRnRRaTlFTEVkQlFVYzBTQ3hMUVVGSUxFTkJRVk1zUjBGQlZDeEZRVUZqTEVkQlFXUXNSVUZCYlVJc1IwRkJia0lzUlVGQmQwSXNSMEZCZUVJc1EwRkJia0k3UVVGRFFTeGhRVUZMY2tRc1kwRkJUQ3hIUVVGelFuWkZMRWRCUVVjMFNDeExRVUZJTEVOQlFWTXNRMEZCVkN4RlFVRlpMRU5CUVZvc1JVRkJaU3hEUVVGbUxFVkJRV3RDTEVOQlFXeENMRU5CUVhSQ08wRkJRMEVzWVVGQlMyNUVMRk5CUVV3c1IwRkJhVUo2UlN4SFFVRkhORWdzUzBGQlNDeERRVUZUTEVkQlFWUXNSVUZCWXl4SFFVRmtMRVZCUVcxQ0xFZEJRVzVDTEVWQlFYZENMRU5CUVhoQ0xFTkJRV3BDTzBGQlEwRXNZVUZCUzJwRUxGbEJRVXdzUjBGQmIwSXpSU3hIUVVGSE5FZ3NTMEZCU0N4RFFVRlRMRU5CUVZRc1JVRkJXU3hEUVVGYUxFVkJRV1VzUTBGQlppeEZRVUZyUWl4RFFVRnNRaXhEUVVGd1FqczdRVUZGUVR0QlFVTkJMR0ZCUVV0d1JpeHJRa0ZCVEN4SFFVRXdRaXhKUVVFeFFqdEJRVU5JTEV0QmVrSjVRanM3UVVFeVFqRkNOMElzWjBKQlFWbEJMRlZCTTBKak96dEJRVFpDTVVKclNDeGhRVUZUT3p0QlFVVk1PenM3T3pzN096dEJRVkZCUXl3eVFrRkJiVUlzUTBGQlF5eERRVlptT3p0QlFWbE1PenM3T3pzN096dEJRVkZCUXl4elEwRkJPRUlzUTBGQlF5eERRWEJDTVVJN08wRkJjMEpNT3pzN096czdPenRCUVZGQlF5d3dRMEZCYTBNc1EwRkJReXhEUVRsQ09VSTdPMEZCWjBOTU4wZ3NjVUpCUVdGQkxGZEJhRU5TTzBGQmFVTk1TU3h6UWtGQlkwRXNXVUZxUTFRN08wRkJiME5NTUVnc2IwSkJRVmx3U2l4VFFYQkRVRHRCUVhGRFRIRktMSEZDUVVGaGNFbzdRVUZ5UTFJc1MwRTNRbWxDT3p0QlFYRkZNVUk3TzBGQlJVRnhTaXh4UWtGQmFVSnVTQ3hoUVVGaExGbEJRVms3UVVGRGRFTXNZVUZCU3pKSExGRkJRVXdzUjBGQlowSXNTVUZCYUVJN1FVRkRRU3haUVVGSlV5eGhRVUZoZWtrc2MwSkJRWE5DTEV0QlFVdERMRWxCUVROQ0xFTkJRV3BDTzBGQlEwRXNZVUZCU3l4SlFVRkplVWtzU1VGQlNTeERRVUZpTEVWQlFXZENRU3hKUVVGSlJDeFhRVUZYT1Vrc1RVRkJMMElzUlVGQmRVTXNSVUZCUlN0SkxFTkJRWHBETEVWQlFUUkRPMEZCUTNoRFJDeDFRa0ZCVjBNc1EwRkJXQ3hGUVVGalF5eGhRVUZrTzBGQlEwZzdRVUZEU2l4TFFUZEZlVUk3TzBGQkswVXhRa01zZVVKQlFYRkNka2dzWVVGQllTeFpRVUZaTzBGQlF6RkRMR0ZCUVVzeVJ5eFJRVUZNTEVkQlFXZENMRXRCUVdoQ08wRkJRMEVzV1VGQlNWTXNZVUZCWVhwSkxITkNRVUZ6UWl4TFFVRkxReXhKUVVFelFpeERRVUZxUWp0QlFVTkJMR0ZCUVVzc1NVRkJTWGxKTEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNVUXNWMEZCVnpsSkxFMUJRUzlDTEVWQlFYVkRMRVZCUVVVclNTeERRVUY2UXl4RlFVRTBRenRCUVVONFEwUXNkVUpCUVZkRExFTkJRVmdzUlVGQlkwY3NXVUZCWkR0QlFVTklPMEZCUTBvc1MwRnlSbmxDT3p0QlFYVkdNVUpHTEcxQ1FVRmxkRWdzWVVGQllTeFpRVUZaTzBGQlEzQkRMRmxCUVVrc1MwRkJTMG9zVDBGQlZDeEZRVUZyUWp0QlFVTmtMR2xDUVVGTFN5eFhRVUZNTzBGQlEwZzdRVUZEU2l4TFFUTkdlVUk3TzBGQk5rWXhRblZJTEd0Q1FVRmplRWdzWVVGQllTeFpRVUZaTzBGQlEyNURMRmxCUVVrc1MwRkJTMG9zVDBGQlZDeEZRVUZyUWp0QlFVTmtMR2xDUVVGTFN5eFhRVUZNTzBGQlEwRXNhVUpCUVV0RExGVkJRVXc3UVVGRFFTeHBRa0ZCUzBNc1lVRkJURHRCUVVOQmJrSXNaVUZCUjI5Q0xFMUJRVWdzUTBGQlZVTXNhVUpCUVZZN1FVRkRTRHRCUVVORUxGbEJRVWtzUzBGQlMzRkhMR0ZCUVZRc1JVRkJkMEk3UVVGRGNFSmxMREJDUVVGakxFdEJRVXRtTEdGQlFXNUNPMEZCUTBnN1FVRkRTaXhMUVhaSGVVSTdPMEZCZVVjeFFqczdRVUZGUVR0QlFVTkJaMElzYTBOQlFUaENNVWdzWVVGQllTeFpRVUZaTzBGQlEyNUVMRmxCUVVrc1MwRkJTMjlDTEZsQlFWUXNSVUZCZFVJN1FVRkRia0k3UVVGRFNEdEJRVU5FTEZsQlFVbFhMRlZCUVZVc1MwRkJTMEVzVDBGQmJrSTdRVUZEUVN4WlFVRkpMRU5CUVVOQkxFOUJRVVFzU1VGQldTeERRVUZEUVN4UlFVRlJUaXhMUVVGNlFpeEZRVUZuUXp0QlFVTTFRanRCUVVOSU96dEJRVVZFTEZsQlFVbHJSeXhSUVVGUkxFbEJRVm83UVVGRFFVTXNaVUZCVDBNc1QwRkJVQ3hEUVVGbFF5eHRRa0ZCWml4RFFVRnRReTlHTEZGQlFWRk9MRXRCUVRORExFVkJRV3RFTEZWQlFWVnpSeXhIUVVGV0xFVkJRV1ZETEZGQlFXWXNSVUZCZVVJN1FVRkRka1VzWjBKQlFVbEVMRWRCUVVvc1JVRkJVeXhQUVVGUFNDeFBRVUZQU3l4TFFVRlFMRU5CUVdGR0xFZEJRV0lzUTBGQlVEdEJRVU5VTEdkQ1FVRkpSeXhQUVVGUFF5eExRVUZMUXl4TFFVRk1MRU5CUVZkS0xGTkJRVk5MTEVsQlFYQkNMRU5CUVZnN1FVRkRRU3huUWtGQlNVZ3NTMEZCUzJwSUxFbEJRVXdzUzBGQll5eExRVUZzUWl4RlFVRjVRanRCUVVOeVFpeHZRa0ZCVFhGSUxGbEJRVmxXTEU5QlFVOXVTeXhQUVVGUUxFTkJRV1VzTUVOQlFXWXNRMEZCYkVJN1FVRkRRU3h2UWtGQlNUaExMRmRCUVZkRUxGVkJRVlZGTEZkQlFWWXNRMEZCYzBKaUxFMUJRVTB2U1N4SlFVRTFRaXhEUVVGbU8wRkJRMEVzZFVKQlFVOW5TaXhQUVVGUFlTeEpRVUZRTEd0Q1FVRXlRbFFzVTBGQlUxVXNVVUZCY0VNc01FSkJRV2xGU0N4UlFVRnFSU3h6U1VGQlVEdEJRVU5JTEdGQlNrUXNUVUZMU3p0QlFVTkVMRzlDUVVGSlNTeE5RVUZOYkV3c1VVRkJVU3hWUVVGU0xFTkJRVlk3UVVGRFFTeHZRa0ZCU1hkSkxFOUJRVTh3UXl4SlFVRkpReXhoUVVGS0xFTkJRV3RDV2l4VFFVRlRZU3hUUVVFelFpeERRVUZZTzBGQlEwRXNiMEpCUVVsRExFOUJRVTlhTEV0QlFVdGhMRkZCUVV3c1EwRkJZemxETEVsQlFXUXNSVUZCYjBJMlF5eEpRVUV2UWp0QlFVTkJPVW9zYlVKQlFVZG5TeXhaUVVGSUxFTkJRV2RDUXl4VFFVRm9RaXhEUVVFd1FrZ3NTVUZCTVVJc1JVRkJaME1zVlVGQlZXWXNSMEZCVml4RlFVRmxiVUlzUlVGQlppeEZRVUZ0UWp0QlFVTXZReXgzUWtGQlNXNUNMRWRCUVVvc1JVRkJVeXhQUVVGUFNDeFBRVUZQU3l4TFFVRlFMRU5CUVdGR0xFZEJRV0lzUTBGQlVEdEJRVU5VU2l3d1FrRkJUV2hITEZGQlFVNHNSMEZCYVVJc1NVRkJha0k3UVVGRFFXZEhMREJDUVVGTmNrY3NWMEZCVGl4SFFVRnZRalJJTEVWQlFYQkNPMEZCUTBnc2FVSkJTa1E3UVVGTFNEdEJRVU5LTEZOQmJFSkVPMEZCYlVKSUxFdEJla2w1UWpzN1FVRXlTVEZDUXl4bFFVRlhMSEZDUVVGWk96dEJRVVZ1UWl4WlFVRkpia29zVTBGQlNpeEZRVUZsTzBGQlExZ3NhVUpCUVVzd1NDdzBRa0ZCVER0QlFVTklPenRCUVVWRUxGbEJRVWtzUzBGQlMycElMRTlCUVV3c1NVRkJaMElzUzBGQlMyRXNWMEZCY2tJc1NVRkJiME1zUTBGQlF5eExRVUZMUlN4clFrRkJPVU1zUlVGQmEwVTdRVUZET1VRc2FVSkJRVXRKTEdsQ1FVRk1MRU5CUVhWQ0xFdEJRVXRPTEZkQlFUVkNPMEZCUTBnc1UwRkdSQ3hOUVVkTExFbEJRVWtzUzBGQlMxSXNTMEZCVkN4RlFVRm5RanRCUVVOcVFpeG5Ra0ZCU1N4TFFVRkxUQ3hQUVVGVUxFVkJRV3RDTzBGQlEyUXNiMEpCUVVreVNTeHZRa0ZCYjBJc1EwRkJReXhMUVVGTGVrZ3NVVUZCT1VJN1FVRkRRU3h2UWtGQlNYbElMR2xDUVVGS0xFVkJRWFZDTzBGQlEyNUNMSGxDUVVGTGNFa3NWVUZCVER0QlFVTklPMEZCUTBvc1lVRk1SQ3hOUVUxTE8wRkJRMFFzY1VKQlFVdEJMRlZCUVV3N1FVRkRTRHRCUVVOS08wRkJRMFE3UVVGRFFTeFpRVUZKTEVOQlFVTm9RaXhUUVVGRUxFbEJRV05vUWl4SFFVRkhiMElzVFVGQlNDeERRVUZWYVVvc1UwRkJOVUlzUlVGQmRVTTdRVUZEYmtNc1owSkJRVWtzUzBGQlN6bEhMRlZCUVZRc1JVRkJjVUk3UVVGRGFrSXNjVUpCUVV0MFF5eFhRVUZNTzBGQlEwZzdRVUZEU2p0QlFVTkVPMEZCUTBFc1dVRkJTVVFzWVVGQllTeEZRVUZGTEV0QlFVc3JReXhYUVVGTUxGbEJRVFJDTDBRc1IwRkJSMmxGTEV0QlFXcERMRU5CUVdwQ0xFVkJRVEJFTzBGQlEzUkVMR2xDUVVGTFJpeFhRVUZNTEVkQlFXMUNMMFFzUjBGQlJ6UklMRXRCUVVnc1EwRkJVeXhMUVVGTE4wUXNWMEZCWkN4RFFVRnVRanRCUVVOQkxHbENRVUZMVVN4alFVRk1MRWRCUVhOQ2RrVXNSMEZCUnpSSUxFdEJRVWdzUTBGQlV5eExRVUZMY2tRc1kwRkJaQ3hEUVVGMFFqdEJRVU5CTEdsQ1FVRkxSU3hUUVVGTUxFZEJRV2xDZWtVc1IwRkJSelJJTEV0QlFVZ3NRMEZCVXl4TFFVRkxia1FzVTBGQlpDeERRVUZxUWp0QlFVTkJMR2xDUVVGTFJTeFpRVUZNTEVkQlFXOUNNMFVzUjBGQlJ6UklMRXRCUVVnc1EwRkJVeXhMUVVGTGFrUXNXVUZCWkN4RFFVRndRanRCUVVOSU8wRkJRMG9zUzBFMVMzbENPenRCUVRoTE1VSXlSaXhaUVRsTE1FSXNjMEpCT0V0a08wRkJRMUlzWVVGQlMwTXNUVUZCVER0QlFVTkJMR0ZCUVVzelN5eEpRVUZNTEVOQlFWVTBTeXhYUVVGV0xFbEJRWGxDTEVOQlFVTjRUQ3hYUVVGWGVVd3NWMEZCY2tNN1FVRkRRU3hoUVVGTFF5eHBRa0ZCVER0QlFVTklMRXRCYkV4NVFqdEJRVzlNTVVKRExHRkJjRXd3UWl4MVFrRnZUR0k3UVVGRFZDeFpRVUZKTEV0QlFVdHVTQ3hyUWtGQlZDeEZRVUUyUWp0QlFVTjZRaXhwUWtGQlMwRXNhMEpCUVV3c1IwRkJNRUlzUzBGQk1VSXNRMEZFZVVJc1EwRkRWenRCUVVOMlF6dEJRVU5FTEZsQlFVa3NTMEZCUzI5SUxFOUJRVlFzUlVGQmEwSTdRVUZEWkN4cFFrRkJTMEVzVDBGQlRDeERRVUZoUXl4UFFVRmlPMEZCUTBFc2FVSkJRVXRFTEU5QlFVd3NSMEZCWlN4SlFVRm1PMEZCUTBnN1FVRkRSQ3hoUVVGTFJTeEhRVUZNTEVkQlFWY3NTVUZCV0R0QlFVTkJPMEZCUTBFc1lVRkJTek5JTEZWQlFVd3NRMEZCWjBJMFNDeFRRVUZvUWl4SFFVRTBRaXhEUVVFMVFqdEJRVU5CTEdGQlFVdFNMRTFCUVV3N1FVRkRTQ3hMUVdoTmVVSTdRVUZyVFRGQ1V5eGpRV3hOTUVJc2MwSkJhMDFrUXl4RlFXeE5ZeXhGUVd0TlZqdEJRVU5hTEZsQlFVa3NRMEZCUXl4TFFVRkxPVWdzVlVGQlRDeERRVUZuUWl0SUxGRkJRV3BDTEVsQlFUWkNMRXRCUVV0S0xFZEJRWFJETEVWQlFUSkRPMEZCUTNaRExHbENRVUZMTTBnc1ZVRkJUQ3hEUVVGblFtZEpMRWxCUVdoQ0xFTkJRWEZDUml4RlFVRnlRanRCUVVOSU8wRkJRMG9zUzBGMFRYbENPenM3UVVGM1RURkNPenRCUVVWQk96czdPenM3UVVGTlFVY3NhVUpCUVdFc2RVSkJRVms3UVVGRGNrSTdRVUZEU0N4TFFXeE9lVUk3TzBGQmIwNHhRanM3T3pzN096czdRVUZSUVd4TExHZENRVUZaTEhOQ1FVRlpPMEZCUTNCQ0xHRkJRVXR0UXl4UlFVRk1MRWRCUVdkQ0xFbEJRV2hDTzBGQlEwRXNZVUZCUzBZc1ZVRkJUQ3hEUVVGblFtdEpMRWxCUVdoQ08wRkJRMGdzUzBFdlRubENPenRCUVdsUE1VSTdPenM3T3pzN08wRkJVVUZ3U3l4cFFrRkJZU3gxUWtGQldUdEJRVU55UWl4aFFVRkxiME1zVVVGQlRDeEhRVUZuUWl4TFFVRm9RanRCUVVOQkxHRkJRVXRHTEZWQlFVd3NRMEZCWjBKdFNTeExRVUZvUWp0QlFVTkJMR0ZCUVV0YUxHbENRVUZNTzBGQlEwZ3NTMEUzVDNsQ096dEJRU3RQTVVJN096czdPenRCUVUxQllTeFpRVUZSTEd0Q1FVRlpPMEZCUTJoQ0xHVkJRVkVzUzBGQlMzSkpMR0ZCUVV3c1NVRkJjMElzUzBGQlMxRXNZMEZCYmtNN1FVRkRTQ3hMUVhaUWVVSTdPMEZCZVZBeFFqczdPenM3T3pzN096dEJRVlZCT0Vnc2QwSkJRVzlDTERSQ1FVRlZla2tzVDBGQlZpeEZRVUZ0UWpCSkxFbEJRVzVDTEVWQlFYbENPMEZCUTNwRExGbEJRVWt4U1N4dFFrRkJiVUl2UXl4SFFVRkhPRU1zVTBGQk1VSXNSVUZCY1VNN1FVRkRha01zYVVKQlFVdFNMRmRCUVV3c1IwRkJiVUlzU1VGQlNYUkRMRWRCUVVkeFF5eFhRVUZRTEVOQlFXMUNWU3hQUVVGdVFpeEZRVUUwUWpCSkxFbEJRVFZDTEVOQlFXNUNPMEZCUTBnN1FVRkRTaXhMUVhaUmVVSTdPMEZCZVZFeFFqczdRVUZGUVhwS0xHZENRVUZaTEhOQ1FVRlpPMEZCUTNCQ0xGbEJRVWxGTEU5QlFVOHNTMEZCUzBvc1MwRkJhRUk3UVVGRFFTeFpRVUZKU1N4SlFVRktMRVZCUVZVN1FVRkRUaXhuUWtGQlNYZEtMRTlCUVU4c1NVRkJXRHRCUVVOQk1Vd3NaVUZCUnpKTUxFMUJRVWdzUTBGQlZVTXNTVUZCVml4RFFVRmxNVW9zUzBGQlN6SktMRk5CUVhCQ0xFVkJRU3RDTEZWQlFWVTVReXhIUVVGV0xFVkJRV1VyUXl4UFFVRm1MRVZCUVhkQ08wRkJRMjVFTEc5Q1FVRkpMME1zVDBGQlR5eERRVUZESzBNc1QwRkJXaXhGUVVGeFFqdEJRVU5xUWpsTUxIVkNRVUZISzB3c1QwRkJTQ3hEUVVGWExFbEJRVmc3UVVGRFFUdEJRVU5JTzBGQlEwUXNiMEpCUVVrc1EwRkJRMHdzUzBGQlMwMHNUMEZCVml4RlFVRnRRanRCUVVObU8wRkJRMGc3TzBGQlJVUk9MSEZDUVVGTFR5eFZRVUZNTEVkQlFXdENMMG9zUzBGQlN6SktMRk5CUVhaQ08wRkJRMEVzYjBKQlFVa3NRMEZCUTBnc1MwRkJTMnBMTEU5QlFWWXNSVUZCYlVJN1FVRkRabWxMTEhsQ1FVRkxVU3h0UWtGQlRDeERRVUY1UWtvc1QwRkJla0k3UVVGRFNEczdRVUZGUkN4dlFrRkJTU3hEUVVGRFNpeExRVUZMZEVvc1dVRkJWaXhGUVVGM1FqdEJRVU53UWl4M1FrRkJTVVlzUzBGQlMwa3NWMEZCVkN4RlFVRnpRanRCUVVOc1FtOUtMRFpDUVVGTGNFb3NWMEZCVEN4SFFVRnRRa29zUzBGQlMwa3NWMEZCZUVJN1FVRkRTQ3h4UWtGR1JDeE5RVWRMTEVsQlFVbHZTaXhMUVVGTGFrc3NUMEZCVkN4RlFVRnJRanRCUVVOdVFtbExMRFpDUVVGTFV5d3dRa0ZCVEN4RFFVRm5RMHdzVDBGQmFFTTdRVUZEU0R0QlFVTktMR2xDUVZCRUxFMUJVVXNzU1VGQlNTeERRVUZEU2l4TFFVRkxiRW9zYTBKQlFVNHNTVUZCTkVKclNpeExRVUZMZEVvc1dVRkJja01zUlVGQmJVUTdRVUZEY0VSelNpeDVRa0ZCU3psSkxHbENRVUZNTEVOQlFYVkNPRWtzUzBGQlMzQktMRmRCUVRWQ08wRkJRMGc3UVVGRFNpeGhRWHBDUkR0QlFUQkNTRHRCUVVOS0xFdEJNVk41UWpzN1FVRTBVekZDTmtvc1owTkJRVFJDTEc5RFFVRlZReXhKUVVGV0xFVkJRV2RDTzBGQlEzaERMRmxCUVVsRExGVkJRVlZ5VFN4SFFVRkhjMDBzU1VGQlNDeERRVUZSUXl4alFVRlNMRU5CUVhWQ0xFdEJRVXRPTEZWQlFUVkNMRVZCUVhkRFJ5eExRVUZMTEdsQ1FVRk1MRXRCUVRKQ0xFVkJRVzVGTEVOQlFXUTdRVUZEUVR0QlFVTkJMRmxCUVVsQkxFdEJRVXNzYVVKQlFVd3NRMEZCU2l4RlFVRTJRanRCUVVONlFqdEJRVU5CY2s0c2QwSkJRVmw1VGl4VFFVRmFMRU5CUVhOQ1NDeFBRVUYwUWl4RlFVRXJRaXhWUVVGVmNFUXNTMEZCVml4RlFVRnBRbXhITEU5QlFXcENMRVZCUVRCQ08wRkJRM0pFTEc5Q1FVRkphMGNzUzBGQlNpeEZRVUZYTzBGQlExQnRSQ3g1UWtGQlN5eHBRa0ZCVEN4SlFVRXdRa3NzVTBGQk1VSTdRVUZEUVN4NVFrRkJTMDRzTUVKQlFVd3NRMEZCWjBORExFbEJRV2hETzBGQlEwZ3NhVUpCU0VRc1RVRkpTenRCUVVORUxIbENRVUZMT1Vvc1YwRkJUQ3hIUVVGdFFpeEpRVUZKZEVNc1IwRkJSM0ZETEZkQlFWQXNRMEZCYlVKVkxFOUJRVzVDTEVOQlFXNUNPMEZCUTBnN1FVRkRTaXhoUVZKRUxFVkJVVWNzU1VGU1NEdEJRVk5JTEZOQldFUXNUVUZYVHl4SlFVRkpjVW9zUzBGQlN5eHJRa0ZCVEN4RFFVRktMRVZCUVRoQ08wRkJRMnBETEdkQ1FVRkpUU3hqUVVGalRpeExRVUZMTEd0Q1FVRk1MRU5CUVd4Q096dEJRVVZCTEdkQ1FVRkpUU3hsUVVGbFFTeFpRVUZaY0U0c1RVRkJXaXhIUVVGeFFpeERRVUY0UXl4RlFVRXlRenRCUVVOMlF5eHZRa0ZCU1hGT0xFMUJRVTB6VFN4SFFVRkhNa3dzVFVGQlNDeERRVUZWYVVJc1RVRkJWaXhEUVVGcFFsQXNUMEZCYWtJc1EwRkJWanM3UVVGRlFTeHZRa0ZCU1N4RFFVRkRUU3hIUVVGTUxFVkJRVlU3UVVGRFRpeDNRa0ZCU1VVc1UwRkJVMnBQTEUxQlFVMXJUeXhyUWtGQlRpeERRVUY1UWtvc1YwRkJla0lzUlVGQmMwTXNRMEZCZEVNc1EwRkJZanRCUVVOQkxIZENRVUZKTEVOQlFVTkhMRTFCUVV3c1JVRkJZVHRCUVVOVU4wMHNNa0pCUVVjclRTeExRVUZJTEVOQlFWTXNTVUZCVkR0QlFVTkJMQ3RDUVVGUExFdEJRVkE3UVVGRFNEczdRVUZGUkN4M1FrRkJTVU1zWTBGQll6Vk9MSEZDUVVGeFFubE9MRTFCUVhKQ0xFTkJRV3hDTzBGQlEwRXNkMEpCUVVsSExHZENRVUZuUW5oUExFMUJRVTFsTEZkQlFVNHNRMEZCYTBKRkxFbEJRV3hETEVsQlFUQkRkVTRzWjBKQlFXZENlRThzVFVGQlRXVXNWMEZCVGl4RFFVRnJRa01zUjBGQmFFWXNSVUZCY1VZN1FVRkRha1pSTERKQ1FVRkhLMDBzUzBGQlNDeERRVUZUTEVsQlFWUTdRVUZEUVN3clFrRkJUeXhMUVVGUU8wRkJRMGc3TzBGQlJVUXNkMEpCUVVsRkxGbEJRVmxETEZOQlFWTkRMR0ZCUVZRc1EwRkJkVUlzVVVGQmRrSXNRMEZCYUVJN1FVRkRRU3gzUWtGQlIwZ3NaMEpCUVdkQ2VFOHNUVUZCVFdVc1YwRkJUaXhEUVVGclFrTXNSMEZCY2tNc1JVRkJlVU03UVVGRGNrTXNORUpCUVVrMFRpeFhRVUZYTEVsQlFVbDJUeXhUUVVGS0xFTkJRV05uVHl4TlFVRmtMRU5CUVdZN1FVRkRRVThzYVVOQlFWTkRMRTFCUVZRc1EwRkJaMEpLTEZOQlFXaENPMEZCUTBnc2NVSkJTRVFzVFVGSFR6dEJRVU5JYms4c2JVTkJRVmQzVHl4VFFVRllMRU5CUVhGQ1ZDeE5RVUZ5UWl4RlFVRTBRa2tzVTBGQk5VSTdRVUZEU0R0QlFVTkVUaXd3UWtGQlRUVk9MRmxCUVZsM1R5eFZRVUZhTEVOQlFYVkNiRUlzVDBGQmRrSXNSVUZCWjBOWkxGTkJRV2hETEVOQlFVNDdRVUZEU0RzN1FVRkZSQ3h2UWtGQlNTeERRVUZEVGl4SFFVRk1MRVZCUTBrelRTeEhRVUZISzAwc1MwRkJTQ3hEUVVGVExFbEJRVlE3UVVGRFNqdEJRVU5CTEhGQ1FVRkxla3NzVjBGQlRDeEhRVUZ0UWl4SlFVRkpkRU1zUjBGQlIzRkRMRmRCUVZBc1EwRkJiVUp6U3l4SFFVRnVRaXhEUVVGdVFqdEJRVU5JTEdGQk9VSkVMRTFCSzBKTE8wRkJRMFFzZFVKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRSQ3hsUVVGUExFbEJRVkE3UVVGRFNDeExRV3BYZVVJN08wRkJiVmN4UWp0QlFVTkJWQ3g1UWtGQmNVSXNOa0pCUVZWRkxFbEJRVllzUlVGQlowSTdRVUZEYWtNc1lVRkJTekZKTEdOQlFVd3NSMEZCYzBJNFNpeFRRVUZUY0VJc1MwRkJTeXhqUVVGTUxFdEJRWGRDTEVOQlFXcERMRU5CUVhSQ096dEJRVVZCTzBGQlEwRXNZVUZCUzNaSkxFbEJRVXdzUjBGQldUUktMRmRCUVZkeVFpeExRVUZMTEd0Q1FVRk1MRXRCUVRSQ0xFTkJRWFpETEVOQlFWbzdRVUZEUVN4aFFVRkxkRWtzVDBGQlRDeEhRVUZsTWtvc1YwRkJWM0pDTEV0QlFVc3NNRUpCUVV3c1MwRkJiME1zUTBGQkwwTXNRMEZCWmpzN1FVRkZRVHRCUVVOQkxGbEJRVWx6UWl4dlFrRkJiMEowUWl4TFFVRkxMR05CUVV3c1EwRkJlRUk3UVVGRFFTeFpRVUZKYzBJc2FVSkJRVW9zUlVGQmRVSTdRVUZEYmtJc2FVSkJRVXM1U2l4WlFVRk1MRWRCUVc5Q09Fb3NhVUpCUVhCQ08wRkJRMGdzVTBGR1JDeE5RVWRMTzBGQlEwUXNhVUpCUVVzNVNpeFpRVUZNTEVkQlFXOUNLMG9zUzBGQlMwTXNSMEZCVEN4RFFVRlRMRXRCUVV0c1N5eGpRVUZNTEVkQlFYTkNMRXRCUVV0SExFbEJRWEJETEVWQlFUQkRaMHNzVDBGQlQwTXNVMEZCYWtRc1EwRkJjRUk3UVVGRFNEczdRVUZGUkR0QlFVTkJMR0ZCUVV0dVN5eFJRVUZNTEVkQlFXZENPRW9zVjBGQlYzSkNMRXRCUVVzc1ZVRkJUQ3hMUVVGdlFpeERRVUV2UWl4RFFVRm9RanM3UVVGRlFUdEJRVU5CTEdGQlFVc3lRaXhqUVVGTUxFZEJRWE5DVUN4VFFVRlRjRUlzUzBGQlN5eHBRa0ZCVEN4TFFVRXlRalZPTEUxQlFVMTNVQ3hUUVVFeFF5eERRVUYwUWp0QlFVTkJMR0ZCUVV0RExHTkJRVXdzUjBGQmMwSlVMRk5CUVZOd1FpeExRVUZMTEhOQ1FVRk1MRXRCUVdkRE5VNHNUVUZCVFRCUUxHMUNRVUV2UXl4RFFVRjBRanM3UVVGRlFUdEJRVU5CTEZsQlFVbERMR2RDUVVGblFpeExRVUZMY0Vzc1YwRkJla0k3UVVGRFFXOUxMSE5DUVVGamFFc3NRMEZCWkN4SFFVRnJRbk5LTEZkQlFWZHlRaXhMUVVGTExHVkJRVXdzUzBGQmVVSXNRMEZCY0VNc1NVRkJlVU1zUjBGQk0wUTdRVUZEUVN0Q0xITkNRVUZqTDBvc1EwRkJaQ3hIUVVGclFuRktMRmRCUVZkeVFpeExRVUZMTEdsQ1FVRk1MRXRCUVRKQ0xFTkJRWFJETEVsQlFUSkRMRWRCUVRkRU8wRkJRMEVyUWl4elFrRkJZemxLTEVOQlFXUXNSMEZCYTBKdlNpeFhRVUZYY2tJc1MwRkJTeXhuUWtGQlRDeExRVUV3UWl4RFFVRnlReXhKUVVFd1F5eEhRVUUxUkR0QlFVTkJLMElzYzBKQlFXTTNTaXhEUVVGa0xFZEJRV3RDYlVvc1YwRkJWM0pDTEV0QlFVc3NhVUpCUVV3c1MwRkJNa0lzUTBGQmRFTXNTVUZCTWtNc1IwRkJOMFE3TzBGQlJVRXNXVUZCU1dkRExHMUNRVUZ0UWl4TFFVRkxOMG9zWTBGQk5VSTdRVUZEUVRaS0xIbENRVUZwUW1wTExFTkJRV3BDTEVkQlFYRkNjMG9zVjBGQlYzSkNMRXRCUVVzc2RVSkJRVXdzUzBGQmFVTXNRMEZCTlVNc1NVRkJhVVFzUjBGQmRFVTdRVUZEUVdkRExIbENRVUZwUW1oTExFTkJRV3BDTEVkQlFYRkNjVW9zVjBGQlYzSkNMRXRCUVVzc2VVSkJRVXdzUzBGQmJVTXNRMEZCT1VNc1NVRkJiVVFzUjBGQmVFVTdRVUZEUVdkRExIbENRVUZwUWk5S0xFTkJRV3BDTEVkQlFYRkNiMG9zVjBGQlYzSkNMRXRCUVVzc2QwSkJRVXdzUzBGQmEwTXNRMEZCTjBNc1NVRkJhMFFzUjBGQmRrVTdRVUZEUVdkRExIbENRVUZwUWpsS0xFTkJRV3BDTEVkQlFYRkNiVW9zVjBGQlYzSkNMRXRCUVVzc2VVSkJRVXdzUzBGQmJVTXNRMEZCT1VNc1NVRkJiVVFzUjBGQmVFVTdPMEZCUlVFc1dVRkJTV2xETEdOQlFXTXNTMEZCU3pWS0xGTkJRWFpDTzBGQlEwRTBTaXh2UWtGQldXeExMRU5CUVZvc1IwRkJaMEp6U2l4WFFVRlhja0lzUzBGQlN5eG5Ra0ZCVEN4TFFVRXdRaXhEUVVGeVF5eEpRVUV3UXl4SFFVRXhSRHRCUVVOQmFVTXNiMEpCUVZscVN5eERRVUZhTEVkQlFXZENjVW9zVjBGQlYzSkNMRXRCUVVzc2EwSkJRVXdzUzBGQk5FSXNRMEZCZGtNc1NVRkJORU1zUjBGQk5VUTdRVUZEUVdsRExHOUNRVUZaYUVzc1EwRkJXaXhIUVVGblFtOUtMRmRCUVZkeVFpeExRVUZMTEdsQ1FVRk1MRXRCUVRKQ0xFTkJRWFJETEVsQlFUSkRMRWRCUVRORU8wRkJRMEZwUXl4dlFrRkJXUzlLTEVOQlFWb3NSMEZCWjBKdFNpeFhRVUZYY2tJc1MwRkJTeXhyUWtGQlRDeExRVUUwUWl4RFFVRjJReXhKUVVFMFF5eEhRVUUxUkRzN1FVRkZRU3haUVVGSmEwTXNhVUpCUVdsQ0xFdEJRVXN6U2l4WlFVRXhRanRCUVVOQk1rb3NkVUpCUVdWdVN5eERRVUZtTEVkQlFXMUNjMG9zVjBGQlYzSkNMRXRCUVVzc2QwSkJRVXdzUzBGQmEwTXNRMEZCTjBNc1NVRkJhMFFzUjBGQmNrVTdRVUZEUVd0RExIVkNRVUZsYkVzc1EwRkJaaXhIUVVGdFFuRktMRmRCUVZkeVFpeExRVUZMTERCQ1FVRk1MRXRCUVc5RExFTkJRUzlETEVsQlFXOUVMRWRCUVhaRk8wRkJRMEZyUXl4MVFrRkJaV3BMTEVOQlFXWXNSMEZCYlVKdlNpeFhRVUZYY2tJc1MwRkJTeXg1UWtGQlRDeExRVUZ0UXl4RFFVRTVReXhKUVVGdFJDeEhRVUYwUlR0QlFVTkJhME1zZFVKQlFXVm9TeXhEUVVGbUxFZEJRVzFDYlVvc1YwRkJWM0pDTEV0QlFVc3NNRUpCUVV3c1MwRkJiME1zUTBGQkwwTXNTVUZCYjBRc1IwRkJka1U3TzBGQlJVRTdRVUZEUVN4aFFVRkxja2dzVTBGQlRDeEhRVUZwUWpCSkxGZEJRVmR5UWl4TFFVRkxMRzFDUVVGTUxFdEJRVFpDTEVOQlFYaERMRU5CUVdwQ08wRkJRMEVzWVVGQlMzQklMRmxCUVV3c1IwRkJiMEo1U1N4WFFVRlhja0lzUzBGQlN5d3lRa0ZCVEN4TFFVRnhReXhEUVVGb1JDeERRVUZ3UWp0QlFVTkJMR0ZCUVV0dVNDeFBRVUZNTEVkQlFXVjNTU3hYUVVGWGNrSXNTMEZCU3l4dlFrRkJUQ3hMUVVFNFFpeERRVUY2UXl4RFFVRm1PMEZCUTBFc1lVRkJTMnhJTEZWQlFVd3NSMEZCYTBKMVNTeFhRVUZYY2tJc1MwRkJTeXcwUWtGQlRDeExRVUZ6UXl4RFFVRnFSQ3hEUVVGc1FqczdRVUZGUVR0QlFVTkJPMEZCUTBFc1lVRkJTM1pITEZsQlFVd3NSMEZCYjBJMFNDeFhRVUZYY2tJc1MwRkJTeXhqUVVGTUxFdEJRWGRDTjB3c1lVRkJZVVVzVVVGQmFFUXNRMEZCY0VJN1FVRkRRVHRCUVVOQkxHRkJRVXM0UlN4VFFVRk1MRU5CUVdWblNpeERRVUZtTEVkQlFXMUNMRU5CUVc1Q08wRkJRMEVzWVVGQlMyaEtMRk5CUVV3c1EwRkJaV2xLTEVOQlFXWXNSMEZCYlVJc1EwRkJia0k3UVVGRFFTeGhRVUZMT1Vrc1RVRkJUQ3hEUVVGWk5ra3NRMEZCV2l4SFFVRm5RbVFzVjBGQlYzSkNMRXRCUVVzc2VVSkJRVXdzUzBGQmJVTXNRMEZCT1VNc1EwRkJhRUk3UVVGRFFTeGhRVUZMTVVjc1RVRkJUQ3hEUVVGWk9Fa3NRMEZCV2l4SFFVRm5RbVlzVjBGQlYzSkNMRXRCUVVzc2VVSkJRVXdzUzBGQmJVTXNRMEZCT1VNc1EwRkJhRUk3TzBGQlJVRTdRVUZEUVN4aFFVRkxka2dzUzBGQlRDeEhRVUZoTkVrc1YwRkJWM0pDTEV0QlFVc3NUMEZCVEN4TFFVRnBRaXhEUVVFMVFpeERRVUZpTzBGQlEwRXNZVUZCUzNSSUxGRkJRVXdzUjBGQlowSXlTU3hYUVVGWGNrSXNTMEZCU3l4bFFVRk1MRXRCUVhsQ0xFTkJRWEJETEVOQlFXaENPenRCUVVWQk8wRkJRMEVzWVVGQlMycElMRk5CUVV3c1IwRkJhVUp6U1N4WFFVRlhja0lzUzBGQlN5eGxRVUZNTEV0QlFYbENMRU5CUVhCRExFTkJRV3BDTzBGQlEwRXNZVUZCUzJoSUxGbEJRVXdzUjBGQmIwSnhTU3hYUVVGWGNrSXNTMEZCU3l4MVFrRkJUQ3hMUVVGcFF5eERRVUUxUXl4RFFVRndRanRCUVVOQkxHRkJRVXN2Unl4UFFVRk1MRWRCUVdWdlNTeFhRVUZYY2tJc1MwRkJTeXhoUVVGTUxFdEJRWFZDTEVOQlFXeERMRU5CUVdZN1FVRkRRU3hoUVVGTE9VY3NWVUZCVEN4SFFVRnJRbTFKTEZkQlFWZHlRaXhMUVVGTExIRkNRVUZNTEV0QlFTdENMRU5CUVRGRExFTkJRV3hDT3p0QlFVVkJMR0ZCUVV0dVJ5eFhRVUZNTEVkQlFXMUNkVWdzVTBGQlUzQkNMRXRCUVVzc1lVRkJUQ3hMUVVGMVFtcE5MRmxCUVZsRkxFOUJRVFZETEVOQlFXNUNPenRCUVVWQk8wRkJRMEVzV1VGQlNTeExRVUZMTkVZc1YwRkJUQ3hMUVVGeFFqbEdMRmxCUVZsRkxFOUJRWEpETEVWQlFUaERPMEZCUXpGRE8wRkJRMEVzYVVKQlFVczJSaXhQUVVGTUxFTkJRV0Z4U1N4RFFVRmlMRWRCUVdsQ1pDeFhRVUZYY2tJc1MwRkJTeXhWUVVGTUxFdEJRVzlDTEVOQlFTOUNMRU5CUVdwQ08wRkJRMEVzYVVKQlFVdHNSeXhQUVVGTUxFTkJRV0Z6U1N4RFFVRmlMRWRCUVdsQ1ppeFhRVUZYY2tJc1MwRkJTeXhWUVVGTUxFdEJRVzlDTEVOQlFTOUNMRU5CUVdwQ096dEJRVVZCTzBGQlEwRXNhVUpCUVV0cVJ5eExRVUZNTEVkQlFXRnpTQ3hYUVVGWGNrSXNTMEZCU3l4UFFVRk1MRXRCUVdsQ0xFTkJRVFZDTEVOQlFXSTdRVUZEUVN4cFFrRkJTMmhITEZGQlFVd3NSMEZCWjBKeFNDeFhRVUZYY2tJc1MwRkJTeXhsUVVGTUxFdEJRWGxDTEVOQlFYQkRMRU5CUVdoQ096dEJRVVZCTzBGQlEwRXNhVUpCUVVzM1JpeFhRVUZNTEVkQlFXMUNhMGdzVjBGQlYzSkNMRXRCUVVzc2IwSkJRVXdzUzBGQk9FSXNRMEZCZWtNc1EwRkJia0k3UVVGRFFTeHBRa0ZCU3pWR0xHTkJRVXdzUjBGQmMwSnBTQ3hYUVVGWGNrSXNTMEZCU3l4eFFrRkJUQ3hMUVVFclFpeERRVUV4UXl4RFFVRjBRanM3UVVGRlFUdEJRVU5CTEdsQ1FVRkxMMFlzWlVGQlRDeEhRVUYxUW05SUxGZEJRVmR5UWl4TFFVRkxMSGRDUVVGTUxFdEJRV3RETEVOQlFUZERMRU5CUVhaQ08wRkJRMEVzYVVKQlFVczVSaXhyUWtGQlRDeEhRVUV3UW0xSUxGZEJRVmR5UWl4TFFVRkxMSGxDUVVGTUxFdEJRVzFETEVOQlFUbERMRU5CUVRGQ096dEJRVVZCTzBGQlEwRXNaMEpCUVVseFF5eHRRa0ZCYlVKeVF5eExRVUZMTEdWQlFVd3NTMEZCZVVJc1JVRkJhRVE3UVVGRFFTeG5Ra0ZCU1hGRExIRkNRVUZ4UWl4SlFVRjZRaXhGUVVFclFqdEJRVU16UWtFc2JVTkJRVzFDUVN4cFFrRkJhVUpETEZGQlFXcENMRWRCUVRSQ1F5eFhRVUUxUWl4RlFVRnVRanRCUVVOQkxIRkNRVUZMYkVrc1lVRkJUQ3hIUVVGelFtZEpMSEZDUVVGeFFpeE5RVUZ5UWl4SlFVRXJRa0VzY1VKQlFYRkNMRWRCUVRGRk8wRkJRMGdzWVVGSVJDeE5RVWxMTzBGQlEwUXNjVUpCUVV0b1NTeGhRVUZNTEVkQlFYRkNMRXRCUVhKQ08wRkJRMGc3UVVGRFNpeFRRVEZDUkN4TlFUQkNUeXhKUVVGSkxFdEJRVXRTTEZkQlFVd3NTMEZCY1VJNVJpeFpRVUZaUnl4TlFVRnlReXhGUVVFMlF6dEJRVU5vUkR0QlFVTkJMR2xDUVVGTGIwY3NWMEZCVEN4SFFVRnRRaXRITEZkQlFWZHlRaXhMUVVGTExGZEJRVXdzUzBGQmNVSXNRMEZCYUVNc1EwRkJia0k3UVVGRFFTeHBRa0ZCUzNwR0xHTkJRVXdzUjBGQmMwSTRSeXhYUVVGWGNrSXNTMEZCU3l4dFFrRkJUQ3hMUVVFMlFpeERRVUY0UXl4RFFVRjBRanRCUVVOQkxHbENRVUZMZUVZc1UwRkJUQ3hIUVVGcFFqWkhMRmRCUVZkeVFpeExRVUZMTEZkQlFVd3NTMEZCY1VJc1EwRkJhRU1zUTBGQmFrSTdRVUZEUVN4cFFrRkJTM1pHTEZsQlFVd3NSMEZCYjBJMFJ5eFhRVUZYY2tJc1MwRkJTeXh0UWtGQlRDeExRVUUyUWl4RFFVRjRReXhEUVVGd1FqdEJRVU5CTEdsQ1FVRkxkRVlzVlVGQlRDeEhRVUZyUWpKSExGZEJRVmR5UWl4TFFVRkxMR2xDUVVGTUxFdEJRVEpDTEVOQlFYUkRMRU5CUVd4Q08wRkJRMEVzYVVKQlFVdHlSaXhoUVVGTUxFZEJRWEZDTUVjc1YwRkJWM0pDTEV0QlFVc3NlVUpCUVV3c1MwRkJiVU1zUTBGQk9VTXNRMEZCY2tJN1FVRkRTQ3hUUVZKTkxFMUJVVUU3UVVGRFNIQk5MR1ZCUVVjclFpeE5RVUZJTEVOQlFWVXNTVUZCVmp0QlFVTkJMRzFDUVVGUExFdEJRVkE3UVVGRFNEczdRVUZGUkN4aFFVRkxiMHNzTUVKQlFVd3NRMEZCWjBORExFbEJRV2hETzBGQlEwRXNaVUZCVHl4SlFVRlFPMEZCUTBnc1MwRjZaSGxDT3p0QlFUSmtNVUozUXl4elFrRkJhMElzTkVKQlFWazdRVUZETVVJc1lVRkJTMnBOTEZGQlFVd3NSMEZCWjBJc1MwRkJTMGdzYTBKQlFVd3NRMEZCZDBKRkxGVkJRWGhDTEVWQlFXaENPMEZCUTBFc1lVRkJTMU1zVlVGQlRDeERRVUZuUWpCTUxGTkJRV2hDTEVOQlFUQkNMRWxCUVRGQ08wRkJRMEU3UVVGRFFTeGhRVUZMYmtVc2FVSkJRVXc3UVVGRFNDeExRV2hsZVVJN08wRkJhMlV4UWpsSUxIVkNRVUZ0UWl3eVFrRkJWV3ROTEZGQlFWWXNSVUZCYjBJN1FVRkRia01zV1VGQlNVRXNXVUZCV1VFc1UwRkJVME1zUjBGQmVrSXNSVUZCT0VJN1FVRkRNVUpFTEhGQ1FVRlRReXhIUVVGVUxFTkJRV0VzVFVGQllpeEZRVUZ4UWl4TFFVRkxTQ3huUWtGQk1VSXNSVUZCTkVNc1NVRkJOVU03UVVGRFNEczdRVUZGUkN4WlFVRkpkRTBzWTBGQll5eExRVUZMUlN4clFrRkJUQ3hIUVVFd1FpeExRVUZMUVN4clFrRkJUQ3hKUVVFeVFpeExRVUZMU2l4WlFVRTFSVHRCUVVOQkxGbEJRVWxGTEZkQlFVb3NSVUZCYVVJN1FVRkRZaXhuUWtGQlNVRXNXVUZCV1RCTkxHRkJRVm9zUlVGQlNpeEZRVUZwUXp0QlFVTTNRaXh4UWtGQlMwb3NaMEpCUVV3c1EwRkJjMElzU1VGQmRFSTdRVUZEU0N4aFFVWkVMRTFCUjBzN1FVRkRSSFJOTERSQ1FVRlpNazBzU1VGQldpeERRVUZwUWl4TlFVRnFRaXhGUVVGNVFpeExRVUZMVEN4blFrRkJPVUlzUlVGQlowUXNTVUZCYUVRN1FVRkRRWFJOTERSQ1FVRlpORTBzYVVKQlFWbzdRVUZEU0R0QlFVTktPMEZCUTBvc1MwRnFabmxDT3p0QlFXMW1NVUo0UlN4MVFrRkJiVUlzTmtKQlFWazdRVUZETTBJc1dVRkJTU3hEUVVGRExFdEJRVXN2U0N4UlFVRk9MRWxCUVd0Q0xFTkJRVU1zUzBGQlMwRXNVVUZCVEN4RFFVRmpkMDBzVFVGQmNrTXNSVUZCTmtNN1FVRkRla01zYVVKQlFVdERMSEZDUVVGTUxFTkJRVEpDTEV0QlFUTkNPMEZCUTBFc1owSkJRVWtzUzBGQlN6Vk5MR3RDUVVGVUxFVkJRVFpDTzBGQlEzcENMSEZDUVVGTFNTeHBRa0ZCVER0QlFVTklPenRCUVVWRU8wRkJRMGc3TzBGQlJVUXNXVUZCU1N4RFFVRkRMRXRCUVV0clNTeEhRVUZXTEVWQlFXVTdRVUZEV0RkTExESkNRVUZsYjFBc1ZVRkJaaXhEUVVFd1FrTXNVVUZCTVVJc1EwRkJiVU1zU1VGQmJrTTdRVUZEU0RzN1FVRkZSQ3haUVVGSmVFb3NWMEZCVnl4TFFVRkxlVW9zWlVGQlRDeERRVUZ4UWl4RFFVRnlRaXhEUVVGbU8wRkJRMEVzV1VGQlNTeERRVUZEZWtvc1VVRkJUQ3hGUVVGbE8wRkJRMWhCTEhWQ1FVRlhOVWNzVTBGQlUzTlJMRGhDUVVGVUxFTkJRWGRETEZkQlFYaERMRVZCUVhGRUxFbEJRWEpFTEVOQlFWZzdRVUZEU0N4VFFVWkVMRTFCUjBzN1FVRkRSREZLTEhWQ1FVRlhOVWNzVTBGQlUzVlJMSFZDUVVGVUxFTkJRV2xETTBvc1VVRkJha01zUlVGQk1rTXNTVUZCTTBNc1EwRkJXRHRCUVVOSU96dEJRVVZFTzBGQlEwRkJMR2xDUVVGVFJTeE5RVUZVTEVOQlFXZENMRmxCUVdoQ0xFVkJRVGhDTEV0QlFVdE1MR0ZCUVV3c1MwRkJkVUp3Uml4aFFVRmhReXhKUVVGc1JUdEJRVU5CYzBZc2FVSkJRVk0wU2l4WFFVRlVMRU5CUVhGQ0xGTkJRWEpDTEVWQlFXZERMRXRCUVVzdlRTeFJRVUZ5UXpzN1FVRkZRU3hoUVVGTFowNHNWMEZCVEN4RFFVRnBRaXhEUVVGcVFpeEZRVUZ2UWpkS0xGRkJRWEJDTzBGQlEwRXNZVUZCUzNOS0xIRkNRVUZNTEVOQlFUSkNMRWxCUVROQ08wRkJRMGdzUzBFdlowSjVRanM3UVVGcGFFSXhRbEVzZVVKQlFYRkNMQ3RDUVVGWk8wRkJRemRDTEZsQlFVazFUeXhUUVVGS0xFVkJRV1U3UVVGRFdDeG5Ra0ZCU1N4TFFVRkxTaXhQUVVGTUxFbEJRV2RDTEV0QlFVc3JSeXhSUVVGeVFpeEpRVUZwUXl4RFFVRkRMRXRCUVV0c1JTeE5RVUYyUXl4SlFVRnBSQ3hEUVVGRGVrUXNSMEZCUjI5Q0xFMUJRVWdzUTBGQlZXbEtMRk5CUVdoRkxFVkJRVEpGTzBGQlEzWkZMSEZDUVVGTGNFb3NWMEZCVER0QlFVTklPMEZCUTBRN1FVRkRTRHRCUVVORUxHRkJRVXRCTEZkQlFVdzdRVUZEUVN4aFFVRkxReXhWUVVGTU8wRkJRMEVzWVVGQlMwTXNZVUZCVER0QlFVTkJMRmxCUVVrc1MwRkJTM0ZETEd0Q1FVRk1MRWxCUVRKQ0xFdEJRVXRJTEZGQlFYQkRMRVZCUVRoRE8wRkJRekZETEdsQ1FVRkxla1FzU1VGQlRDeERRVUZWYVV3c1QwRkJWanRCUVVOSU8wRkJRMG83UVVFNWFFSjVRaXhEUVVGVUxFTkJRWEpDT3p0QlFXbHBRa0UzU3l4SFFVRkhReXhqUVVGSUxFZEJRVzlDTkZBc1QwRkJUME1zVDBGQlVDeEhRVUZwUWpkUUxHTkJRWEpESWl3aVptbHNaU0k2SWtORFVHRnlkR2xqYkdWVGVYTjBaVzB1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE15MHlNREUySUVOb2RXdHZibWNnVkdWamFHNXZiRzluYVdWeklFbHVZeTVjYmlCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRjdE1qQXhPQ0JZYVdGdFpXNGdXV0ZxYVNCVGIyWjBkMkZ5WlNCRGJ5NHNJRXgwWkM1Y2JseHVJR2gwZEhCek9pOHZkM2QzTG1OdlkyOXpMbU52YlM5Y2JseHVJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhJR052Y0hsY2JpQnZaaUIwYUdseklITnZablIzWVhKbElHRnVaQ0JoYzNOdlkybGhkR1ZrSUdWdVoybHVaU0J6YjNWeVkyVWdZMjlrWlNBb2RHaGxJRndpVTI5bWRIZGhjbVZjSWlrc0lHRWdiR2x0YVhSbFpDeGNiaUFnZDI5eWJHUjNhV1JsTENCeWIzbGhiSFI1TFdaeVpXVXNJRzV2YmkxaGMzTnBaMjVoWW14bExDQnlaWFp2WTJGaWJHVWdZVzVrSUc1dmJpMWxlR05zZFhOcGRtVWdiR2xqWlc1elpWeHVJSFJ2SUhWelpTQkRiMk52Y3lCRGNtVmhkRzl5SUhOdmJHVnNlU0IwYnlCa1pYWmxiRzl3SUdkaGJXVnpJRzl1SUhsdmRYSWdkR0Z5WjJWMElIQnNZWFJtYjNKdGN5NGdXVzkxSUhOb1lXeHNYRzRnSUc1dmRDQjFjMlVnUTI5amIzTWdRM0psWVhSdmNpQnpiMlowZDJGeVpTQm1iM0lnWkdWMlpXeHZjR2x1WnlCdmRHaGxjaUJ6YjJaMGQyRnlaU0J2Y2lCMGIyOXNjeUIwYUdGMEozTmNiaUFnZFhObFpDQm1iM0lnWkdWMlpXeHZjR2x1WnlCbllXMWxjeTRnV1c5MUlHRnlaU0J1YjNRZ1ozSmhiblJsWkNCMGJ5QndkV0pzYVhOb0xDQmthWE4wY21saWRYUmxMRnh1SUNCemRXSnNhV05sYm5ObExDQmhibVF2YjNJZ2MyVnNiQ0JqYjNCcFpYTWdiMllnUTI5amIzTWdRM0psWVhSdmNpNWNibHh1SUZSb1pTQnpiMlowZDJGeVpTQnZjaUIwYjI5c2N5QnBiaUIwYUdseklFeHBZMlZ1YzJVZ1FXZHlaV1Z0Wlc1MElHRnlaU0JzYVdObGJuTmxaQ3dnYm05MElITnZiR1F1WEc0Z1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVJSEpsYzJWeWRtVnpJR0ZzYkNCeWFXZG9kSE1nYm05MElHVjRjSEpsYzNOc2VTQm5jbUZ1ZEdWa0lIUnZJSGx2ZFM1Y2JseHVJRlJJUlNCVFQwWlVWMEZTUlNCSlV5QlFVazlXU1VSRlJDQmNJa0ZUSUVsVFhDSXNJRmRKVkVoUFZWUWdWMEZTVWtGT1ZGa2dUMFlnUVU1WklFdEpUa1FzSUVWWVVGSkZVMU1nVDFKY2JpQkpUVkJNU1VWRUxDQkpUa05NVlVSSlRrY2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBJRlJJUlNCWFFWSlNRVTVVU1VWVElFOUdJRTFGVWtOSVFVNVVRVUpKVEVsVVdTeGNiaUJHU1ZST1JWTlRJRVpQVWlCQklGQkJVbFJKUTFWTVFWSWdVRlZTVUU5VFJTQkJUa1FnVGs5T1NVNUdVa2xPUjBWTlJVNVVMaUJKVGlCT1R5QkZWa1ZPVkNCVFNFRk1UQ0JVU0VWY2JpQkJWVlJJVDFKVElFOVNJRU5QVUZsU1NVZElWQ0JJVDB4RVJWSlRJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRU5NUVVsTkxDQkVRVTFCUjBWVElFOVNJRTlVU0VWU1hHNGdURWxCUWtsTVNWUlpMQ0JYU0VWVVNFVlNJRWxPSUVGT0lFRkRWRWxQVGlCUFJpQkRUMDVVVWtGRFZDd2dWRTlTVkNCUFVpQlBWRWhGVWxkSlUwVXNJRUZTU1ZOSlRrY2dSbEpQVFN4Y2JpQlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVFQwWlVWMEZTUlNCUFVpQlVTRVVnVlZORklFOVNJRTlVU0VWU0lFUkZRVXhKVGtkVElFbE9YRzRnVkVoRklGTlBSbFJYUVZKRkxseHVJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibU52Ym5OMElHMWhZM0p2SUQwZ2NtVnhkV2x5WlNnbkxpNHZZMjl5WlM5d2JHRjBabTl5YlM5RFEwMWhZM0p2SnlrN1hHNWpiMjV6ZENCUVlYSjBhV05zWlVGemMyVjBJRDBnY21WeGRXbHlaU2duTGk5RFExQmhjblJwWTJ4bFFYTnpaWFFuS1R0Y2JtTnZibk4wSUZKbGJtUmxja052YlhCdmJtVnVkQ0E5SUhKbGNYVnBjbVVvSnk0dUwyTnZjbVV2WTI5dGNHOXVaVzUwY3k5RFExSmxibVJsY2tOdmJYQnZibVZ1ZENjcE8xeHVZMjl1YzNRZ1kyOWtaV01nUFNCeVpYRjFhWEpsS0NjdUxpOWpiMjF3Y21WemMybHZiaTlhYVhCVmRHbHNjeWNwTzF4dVkyOXVjM1FnVUU1SFVtVmhaR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOURRMUJPUjFKbFlXUmxjaWNwTzF4dVkyOXVjM1FnZEdsbVpsSmxZV1JsY2lBOUlISmxjWFZwY21Vb0p5NHZRME5VU1VaR1VtVmhaR1Z5SnlrN1hHNWpiMjV6ZENCMFpYaDBkWEpsVlhScGJDQTlJSEpsY1hWcGNtVW9KeTR1TDJOdmNtVXZkWFJwYkhNdmRHVjRkSFZ5WlMxMWRHbHNKeWs3WEc1amIyNXpkQ0JTWlc1a1pYSkdiRzkzSUQwZ2NtVnhkV2x5WlNnbkxpNHZZMjl5WlM5eVpXNWtaWEpsY2k5eVpXNWtaWEl0Wm14dmR5Y3BPMXh1WTI5dWMzUWdVR0Z5ZEdsamJHVlRhVzExYkdGMGIzSWdQU0J5WlhGMWFYSmxLQ2N1TDNCaGNuUnBZMnhsTFhOcGJYVnNZWFJ2Y2ljcE8xeHVZMjl1YzNRZ1RXRjBaWEpwWVd3Z1BTQnlaWEYxYVhKbEtDY3VMaTlqYjNKbEwyRnpjMlYwY3k5dFlYUmxjbWxoYkM5RFEwMWhkR1Z5YVdGc0p5azdYRzVqYjI1emRDQkNiR1Z1WkVaMWJtTWdQU0J5WlhGMWFYSmxLQ2N1TGk5amIzSmxMM1YwYVd4ekwySnNaVzVrTFdaMWJtTW5LVHRjYmx4dVpuVnVZM1JwYjI0Z1oyVjBTVzFoWjJWR2IzSnRZWFJDZVVSaGRHRWdLR2x0WjBSaGRHRXBJSHRjYmlBZ0lDQXZMeUJwWmlCcGRDQnBjeUJoSUhCdVp5Qm1hV3hsSUdKMVptWmxjaTVjYmlBZ0lDQnBaaUFvYVcxblJHRjBZUzVzWlc1bmRHZ2dQaUE0SUNZbUlHbHRaMFJoZEdGYk1GMGdQVDA5SURCNE9EbGNiaUFnSUNBZ0lDQWdKaVlnYVcxblJHRjBZVnN4WFNBOVBUMGdNSGcxTUZ4dUlDQWdJQ0FnSUNBbUppQnBiV2RFWVhSaFd6SmRJRDA5UFNBd2VEUkZYRzRnSUNBZ0lDQWdJQ1ltSUdsdFowUmhkR0ZiTTEwZ1BUMDlJREI0TkRkY2JpQWdJQ0FnSUNBZ0ppWWdhVzFuUkdGMFlWczBYU0E5UFQwZ01IZ3dSRnh1SUNBZ0lDQWdJQ0FtSmlCcGJXZEVZWFJoV3pWZElEMDlQU0F3ZURCQlhHNGdJQ0FnSUNBZ0lDWW1JR2x0WjBSaGRHRmJObDBnUFQwOUlEQjRNVUZjYmlBZ0lDQWdJQ0FnSmlZZ2FXMW5SR0YwWVZzM1hTQTlQVDBnTUhnd1FTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV0ZqY204dVNXMWhaMlZHYjNKdFlYUXVVRTVITzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUdsbUlHbDBJR2x6SUdFZ2RHbG1aaUJtYVd4bElHSjFabVpsY2k1Y2JpQWdJQ0JwWmlBb2FXMW5SR0YwWVM1c1pXNW5kR2dnUGlBeUlDWW1JQ2dvYVcxblJHRjBZVnN3WFNBOVBUMGdNSGcwT1NBbUppQnBiV2RFWVhSaFd6RmRJRDA5UFNBd2VEUTVLVnh1SUNBZ0lDQWdJQ0I4ZkNBb2FXMW5SR0YwWVZzd1hTQTlQVDBnTUhnMFpDQW1KaUJwYldkRVlYUmhXekZkSUQwOVBTQXdlRFJrS1Z4dUlDQWdJQ0FnSUNCOGZDQW9hVzFuUkdGMFlWc3dYU0E5UFQwZ01IaG1aaUFtSmlCcGJXZEVZWFJoV3pGZElEMDlQU0F3ZUdRNEtTa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzFoWTNKdkxrbHRZV2RsUm05eWJXRjBMbFJKUmtZN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnRZV055Ynk1SmJXRm5aVVp2Y20xaGRDNVZUa3RPVDFkT08xeHVmVnh1WEc0dkwxeHVablZ1WTNScGIyNGdaMlYwVUdGeWRHbGpiR1ZEYjIxd2IyNWxiblJ6SUNodWIyUmxLU0I3WEc0Z0lDQWdiR1YwSUhCaGNtVnVkQ0E5SUc1dlpHVXVjR0Z5Wlc1MExDQmpiMjF3SUQwZ2JtOWtaUzVuWlhSRGIyMXdiMjVsYm5Rb1kyTXVVR0Z5ZEdsamJHVlRlWE4wWlcwcE8xeHVJQ0FnSUdsbUlDZ2hjR0Z5Wlc1MElIeDhJQ0ZqYjIxd0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnViMlJsTG1kbGRFTnZiWEJ2Ym1WdWRITkpia05vYVd4a2NtVnVLR05qTGxCaGNuUnBZMnhsVTNsemRHVnRLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdkbGRGQmhjblJwWTJ4bFEyOXRjRzl1Wlc1MGN5aHdZWEpsYm5RcE8xeHVmVnh1WEc1Y2JpOHFLbHh1SUNvZ0lTTmxiaUJGYm5WdElHWnZjaUJsYldsMGRHVnlJRzF2WkdWelhHNGdLaUFoSTNwb0lPV1BrZVd3aE9hb29lVzhqMXh1SUNvZ1FHVnVkVzBnVUdGeWRHbGpiR1ZUZVhOMFpXMHVSVzFwZEhSbGNrMXZaR1ZjYmlBcUwxeHVkbUZ5SUVWdGFYUjBaWEpOYjJSbElEMGdZMk11Ulc1MWJTaDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVmMyVnpJR2R5WVhacGRIa3NJSE53WldWa0xDQnlZV1JwWVd3Z1lXNWtJSFJoYm1kbGJuUnBZV3dnWVdOalpXeGxjbUYwYVc5dUxseHVJQ0FnSUNBcUlDRWplbWdnNlllTjVZcWI1cWloNWJ5UDc3eU01cWloNW91ZjZZZU41WXFiNzd5TTVZK3Y2SzZwNTdLUzVhMlE1WnUwNTd1VjVMaUE1TGlxNUxpdDViK0Q1NEs1NTZlNzZMK1I1b2lXNTZlNzZMK2M0NENDWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0T2RXMWlaWEo5SUVkU1FWWkpWRmxjYmlBZ0lDQWdLaTljYmlBZ0lDQkhVa0ZXU1ZSWk9pQXdMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZYTmxjeUJ5WVdScGRYTWdiVzkyWlcxbGJuUWdLeUJ5YjNSaGRHbHZiaTVjYmlBZ0lDQWdLaUFoSTNwb0lPV05pdVcraE9hb29lVzhqKys4ak9XUHIrUzdwZVM5ditleWt1V3RrT1M3cGVXY2h1V2NpT2FXdWVXOGorYVhpK2k5ck8rOGpPV3VnK1M1bitXUHIrUzdwZVdJbSttQW9PaWV1dWFYaSthVmlPYWVuT2l1cWVleWt1V3RrT2FBcGVtQW4rV0pqZWkvbSthSWx1V1FqdW1BZ09PQWdseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdUblZ0WW1WeWZTQlNRVVJKVlZNZ0xTQlZjMlZ6SUhKaFpHbDFjeUJ0YjNabGJXVnVkQ0FySUhKdmRHRjBhVzl1TGx4dUlDQWdJQ0FxTDF4dUlDQWdJRkpCUkVsVlV6b2dNVnh1ZlNrN1hHNWNiaThxS2x4dUlDb2dJU05sYmlCRmJuVnRJR1p2Y2lCd1lYSjBhV05zWlhNZ2JXOTJaVzFsYm5RZ2RIbHdaUzVjYmlBcUlDRWplbWdnNTdLUzVhMlE1TDJONTcydTU3Rzc1WjZMWEc0Z0tpQkFaVzUxYlNCUVlYSjBhV05zWlZONWMzUmxiUzVRYjNOcGRHbHZibFI1Y0dWY2JpQXFMMXh1ZG1GeUlGQnZjMmwwYVc5dVZIbHdaU0E5SUdOakxrVnVkVzBvZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0tpQk1hWFpwYm1jZ2NHRnlkR2xqYkdWeklHRnlaU0JoZEhSaFkyaGxaQ0IwYnlCMGFHVWdkMjl5YkdRZ1lXNWtJR0Z5WlNCMWJtRm1abVZqZEdWa0lHSjVJR1Z0YVhSMFpYSWdjbVZ3YjNOcGRHbHZibWx1Wnk1Y2JpQWdJQ0FnS2lBaEkzcG9YRzRnSUNBZ0lDb2c2SWVxNTVTeDVxaWg1YnlQNzd5TTU1dTQ1YSs1NUxxTzVMaVc1NVdNNVoyUTVxQ0g3N3lNNUxpTjVMeWE2WnFQNTdLUzVhMlE2SXFDNTRLNTU2ZTc1WXFvNklDTTU2ZTc1WXFvNDRDQzc3eUk1WSt2NUxxbjU1U2Y1NEdyNTRTdzQ0Q0I2Sks0NXJHOTU2Mko1cFdJNXA2Yzc3eUpYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRVpTUlVWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JHVWtWRk9pQXdMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJseHVJQ0FnSUNBcUlFeHBkbWx1WnlCd1lYSjBhV05zWlhNZ1lYSmxJR0YwZEdGamFHVmtJSFJ2SUhSb1pTQjNiM0pzWkNCaWRYUWdkMmxzYkNCbWIyeHNiM2NnZEdobElHVnRhWFIwWlhJZ2NtVndiM05wZEdsdmJtbHVaeTQ4WW5JdlBseHVJQ0FnSUNBcUlGVnpaU0JqWVhObE9pQkJkSFJoWTJnZ1lXNGdaVzFwZEhSbGNpQjBieUJoYmlCemNISnBkR1VzSUdGdVpDQjViM1VnZDJGdWRDQjBhR0YwSUhSb1pTQmxiV2wwZEdWeUlHWnZiR3h2ZDNNZ2RHaGxJSE53Y21sMFpTNWNiaUFnSUNBZ0tpQWhJM3BvWEc0Z0lDQWdJQ29nNTV1NDVhKzU1cWloNWJ5UDc3eU01N0tTNWEyUTVMeWE2WnFQNTRpMjZJcUM1NEs1NTZlNzVZcW82SUNNNTZlNzVZcW83N3lNNVkrdjU1U281THFPNVlpMjVMMmM1NmU3NVlxbzZLZVM2SW15NkxxcjVMaUs1NXFFNTRtNTVwV0k1NjJKNTYySjQ0Q0M3N3lJNksrbDZZQ0o2YUc1NVp5b0lFTnlaV0YwYjNJZzVMaXQ1cHFDNXBlMjVMaU41cFN2NW95Qjc3eUpYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRkpGVEVGVVNWWkZYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1VrVk1RVlJKVmtVNklERXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdVhHNGdJQ0FnSUNvZ1RHbDJhVzVuSUhCaGNuUnBZMnhsY3lCaGNtVWdZWFIwWVdOb1pXUWdkRzhnZEdobElHVnRhWFIwWlhJZ1lXNWtJR0Z5WlNCMGNtRnVjMnhoZEdWa0lHRnNiMjVuSUhkcGRHZ2dhWFF1WEc0Z0lDQWdJQ29nSVNONmFGeHVJQ0FnSUNBcUlPYVZ0T2U3aE9hb29lVzhqKys4ak9leWt1V3RrT2kzbittYWorV1BrZVd3aE9XWnFPZW51K1dLcU9PQWd1KzhpT1M0amVTOG11V1BrZWVVbithTGx1V3d2dSs4aVZ4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1RuVnRZbVZ5ZlNCSFVrOVZVRVZFWEc0Z0lDQWdJQ292WEc0Z0lDQWdSMUpQVlZCRlJEb2dNbHh1ZlNrN1hHNWNiaThxS2x4dUlDb2dRR05zWVhOeklGQmhjblJwWTJ4bFUzbHpkR1Z0WEc0Z0tpOWNibHh1ZG1GeUlIQnliM0JsY25ScFpYTWdQU0I3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlFiR0Y1SUhCaGNuUnBZMnhsSUdsdUlHVmthWFFnYlc5a1pTNWNiaUFnSUNBZ0tpQWhJM3BvSU9XY3FPZThsdWkra2VXWnFPYW9vZVc4aitTNGkrbWloT2luaU9leWt1V3RrTys4ak9XUXIrZVVxT1dRanVtQWllUzRyZWV5a3VXdGtPYVh0dSs4ak9leWt1V3RrT1d3aHVpSHF1V0txT2FTcmVhVXZ1T0FnbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3UW05dmJHVmhibjBnY0hKbGRtbGxkMXh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJR1poYkhObFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hKbGRtbGxkem9nZTF4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsWkdsMGIzSlBibXg1T2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0J1YjNScFpuazZJRU5EWDBWRVNWUlBVaUFtSmlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsYzJWMFUzbHpkR1Z0S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lDRjBhR2x6TG5CeVpYWnBaWGNnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEc5d1UzbHpkR1Z0S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrYVhOaFlteGxVbVZ1WkdWeUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1bGJtZHBibVV1Y21Wd1lXbHVkRWx1UldScGRFMXZaR1VvS1R0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdZVzVwYldGMFlXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJSFJ2YjJ4MGFYQTZJRU5EWDBSRlZpQW1KaUFuYVRFNGJqcERUMDFRVDA1RlRsUXVjR0Z5ZEdsamJHVmZjM2x6ZEdWdExuQnlaWFpwWlhjblhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdLaUJKWmlCelpYUWdZM1Z6ZEc5dElIUnZJSFJ5ZFdVc0lIUm9aVzRnZFhObElHTjFjM1J2YlNCd2NtOXdaWEowYVdWeklHbHVjM1JsWVdSdlppQnlaV0ZrSUhCaGNuUnBZMnhsSUdacGJHVXVYRzRnSUNBZ0lDb2dJU042YUNEbW1LL2xrS2JvaDZybHJwcmt1WW5uc3BMbHJaRGxzWjdtZ0tmamdJSmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMEp2YjJ4bFlXNTlJR04xYzNSdmJWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElHWmhiSE5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdYMk4xYzNSdmJUb2dabUZzYzJVc1hHNGdJQ0FnWTNWemRHOXRPaUI3WEc0Z0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJOMWMzUnZiVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hEUTE5RlJFbFVUMUlnSmlZZ0lYWmhiSFZsSUNZbUlDRjBhR2x6TGw5bWFXeGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05qTG5kaGNtNUpSQ2cyTURBd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqZFhOMGIyMGdJVDA5SUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZM1Z6ZEc5dElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWVhCd2JIbEdhV3hsS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRU5EWDBWRVNWUlBVaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZeTVsYm1kcGJtVXVjbVZ3WVdsdWRFbHVSV1JwZEUxdlpHVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdGdWFXMWhkR0ZpYkdVNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCMGIyOXNkR2x3T2lCRFExOUVSVllnSmlZZ0oya3hPRzQ2UTA5TlVFOU9SVTVVTG5CaGNuUnBZMnhsWDNONWMzUmxiUzVqZFhOMGIyMG5YRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJSEJzYVhOMElHWnBiR1V1WEc0Z0lDQWdJQ29nSVNONmFDQndiR2x6ZENEbW9Memx2SS9ubW9UbnNwTGxyWkRwaFkzbnZhN21sb2ZrdTdiamdJSmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlM04wY21sdVozMGdabWxzWlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUZ3aVhDSmNiaUFnSUNBZ0tpOWNiaUFnSUNCZlptbHNaVG9nZTF4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2lCdWRXeHNMRnh1SUNBZ0lDQWdJQ0IwZVhCbE9pQlFZWEowYVdOc1pVRnpjMlYwWEc0Z0lDQWdmU3hjYmlBZ0lDQm1hV3hsT2lCN1hHNGdJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyWnBiR1U3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRnS0haaGJIVmxMQ0JtYjNKalpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyWnBiR1VnSVQwOUlIWmhiSFZsSUh4OElDaERRMTlGUkVsVVQxSWdKaVlnWm05eVkyVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZabWxzWlNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWhjSEJzZVVacGJHVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRU5EWDBWRVNWUlBVaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJNdVpXNW5hVzVsTG5KbGNHRnBiblJKYmtWa2FYUk5iMlJsS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM1Z6ZEc5dElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lHRnVhVzFoZEdGaWJHVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCUVlYSjBhV05zWlVGemMyVjBMRnh1SUNBZ0lDQWdJQ0IwYjI5c2RHbHdPaUJEUTE5RVJWWWdKaVlnSjJreE9HNDZRMDlOVUU5T1JVNVVMbkJoY25ScFkyeGxYM041YzNSbGJTNW1hV3hsSjF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRk53Y21sMFpVWnlZVzFsSUhWelpXUWdabTl5SUhCaGNuUnBZMnhsY3lCa2FYTndiR0Y1WEc0Z0lDQWdJQ29nSVNONmFDRG5sS2prdW83bnNwTGxyWkRsa1lqbmpyRG5tb1FnVTNCeWFYUmxSbkpoYldWY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2MzQnlhWFJsUm5KaGJXVmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1UzQnlhWFJsUm5KaGJXVjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gzTndjbWwwWlVaeVlXMWxPaUI3WEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2SUc1MWJHd3NYRzRnSUNBZ0lDQWdJSFI1Y0dVNklHTmpMbE53Y21sMFpVWnlZVzFsWEc0Z0lDQWdmU3hjYmlBZ0lDQnpjSEpwZEdWR2NtRnRaVG9nZTF4dUlDQWdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5emNISnBkR1ZHY21GdFpUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnYzJWME9pQm1kVzVqZEdsdmJpQW9kbUZzZFdVc0lHWnZjbU5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JHRnpkRk53Y21sMFpTQTlJSFJvYVhNdVgzSmxibVJsY2xOd2NtbDBaVVp5WVcxbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFTkRYMFZFU1ZSUFVpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFptOXlZMlVnSmlZZ2JHRnpkRk53Y21sMFpTQTlQVDBnZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHNZWE4wVTNCeWFYUmxJRDA5UFNCMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNtVnVaR1Z5VTNCeWFYUmxSbkpoYldVZ1BTQjJZV3gxWlR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjJZV3gxWlNCOGZDQjJZV3gxWlM1ZmRYVnBaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM053Y21sMFpVWnlZVzFsSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvYkdGemRGTndjbWwwWlNBbUppQnNZWE4wVTNCeWFYUmxMbWRsZEZSbGVIUjFjbVVvS1NrZ0lUMDlJQ2gyWVd4MVpTQW1KaUIyWVd4MVpTNW5aWFJVWlhoMGRYSmxLQ2twS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZEdWNGRIVnlaU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZllYQndiSGxUY0hKcGRHVkdjbUZ0WlNoc1lYTjBVM0J5YVhSbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoRFExOUZSRWxVVDFJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG01dlpHVXVaVzFwZENnbmMzQnlhWFJsWm5KaGJXVXRZMmhoYm1kbFpDY3NJSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCall5NVRjSEpwZEdWR2NtRnRaU3hjYmlBZ0lDQWdJQ0FnZEc5dmJIUnBjRG9nUTBOZlJFVldJQ1ltSUNkcE1UaHVPa05QVFZCUFRrVk9WQzV3WVhKMGFXTnNaVjl6ZVhOMFpXMHVjM0J5YVhSbFJuSmhiV1VuWEc0Z0lDQWdmU3hjYmx4dVhHNGdJQ0FnTHk4Z2FuVnpkQ0IxYzJWa0lIUnZJSEpsWVdRZ1pHRjBZU0JtY205dElERXVlRnh1SUNBZ0lGOTBaWGgwZFhKbE9pQjdYRzRnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lIUjVjR1U2SUdOakxsUmxlSFIxY21VeVJDeGNiaUFnSUNBZ0lDQWdaV1JwZEc5eVQyNXNlVG9nZEhKMVpTeGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVVpYaDBkWEpsSUc5bUlGQmhjblJwWTJ4bElGTjVjM1JsYlN3Z2NtVmhaRzl1Ykhrc0lIQnNaV0Z6WlNCMWMyVWdjM0J5YVhSbFJuSmhiV1VnZEc4Z2MyVjBkWEFnYm1WM0lIUmxlSFIxY21YamdJSmNiaUFnSUNBZ0tpQWhJM3BvSU9leWt1V3RrT2kwdE9XYnZ1KzhqT1dQcXVpdnUrV3hudWFBcCsrOGpPaXZ0K1M5ditlVXFDQnpjSEpwZEdWR2NtRnRaU0Rsc1o3bWdLZm1uYVhtbTcvbWphTG90TFRsbTc3amdJSmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dkR1Y0ZEhWeVpWeHVJQ0FnSUNBcUlFQjBlWEJsSUh0VGRISnBibWQ5WEc0Z0lDQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdkR1Y0ZEhWeVpUb2dlMXh1SUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkwWlhoMGRYSmxPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCelpYUTZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11ZDJGeWJrbEVLRFl3TVRjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCall5NVVaWGgwZFhKbE1rUXNYRzRnSUNBZ0lDQWdJSFJ2YjJ4MGFYQTZJRU5EWDBSRlZpQW1KaUFuYVRFNGJqcERUMDFRVDA1RlRsUXVjR0Z5ZEdsamJHVmZjM2x6ZEdWdExuUmxlSFIxY21VbkxGeHVJQ0FnSUNBZ0lDQnlaV0ZrYjI1c2VUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtbHphV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdGdWFXMWhkR0ZpYkdVNklHWmhiSE5sWEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdRM1Z5Y21WdWRDQnhkV0Z1ZEdsMGVTQnZaaUJ3WVhKMGFXTnNaWE1nZEdoaGRDQmhjbVVnWW1WcGJtY2djMmx0ZFd4aGRHVmtMbHh1SUNBZ0lDQXFJQ0VqZW1nZzViMlQ1WW1ONXBLdDVwUys1NXFFNTdLUzVhMlE1cFd3NlllUDQ0Q0NYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJSEJoY25ScFkyeGxRMjkxYm5SY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3WVhKMGFXTnNaVU52ZFc1ME9pQjdYRzRnSUNBZ0lDQWdJSFpwYzJsaWJHVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQm5aWFFnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTnBiWFZzWVhSdmNpNXdZWEowYVdOc1pYTXViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J5WldGa2IyNXNlVG9nZEhKMVpWeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUVsdVpHbGpZWFJsSUhkb1pYUm9aWElnZEdobElITjVjM1JsYlNCemFXMTFiR0YwYVc5dUlHaGhkbVVnYzNSdmNIQmxaQzVjYmlBZ0lDQWdLaUFoSTNwb0lPYU1oK2VrdXVleWt1V3RrT2FTcmVhVXZ1YVlyK1dRcHVXdWpPYXZsZU9BZ2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1FtOXZiR1ZoYm4wZ2MzUnZjSEJsWkZ4dUlDQWdJQ0FxTDF4dUlDQWdJRjl6ZEc5d2NHVmtPaUIwY25WbExGeHVJQ0FnSUhOMGIzQndaV1E2SUh0Y2JpQWdJQ0FnSUNBZ1oyVjBJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5emRHOXdjR1ZrTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQmhibWx0WVhSaFlteGxPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdkbWx6YVdKc1pUb2dabUZzYzJWY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJKWmlCelpYUWdkRzhnZEhKMVpTd2dkR2hsSUhCaGNuUnBZMnhsSUhONWMzUmxiU0IzYVd4c0lHRjFkRzl0WVhScFkyRnNiSGtnYzNSaGNuUWdjR3hoZVdsdVp5QnZiaUJ2Ymt4dllXUXVYRzRnSUNBZ0lDb2dJU042YUNEbHBvTG1ucHpvcnI3bnZhN2t1TG9nZEhKMVpTRG92NURvb1l6bWw3Ymt2SnJvaDZybGlxamxqNUhsc0lUbnNwTGxyWkRqZ0lKY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2NHeGhlVTl1VEc5aFpGeHVJQ0FnSUNBcUlFQjBlWEJsSUh0aWIyOXNaV0Z1ZlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUhSeWRXVmNiaUFnSUNBZ0tpOWNiaUFnSUNCd2JHRjVUMjVNYjJGa09pQjBjblZsTEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJKYm1ScFkyRjBaU0IzYUdWMGFHVnlJSFJvWlNCdmQyNWxjaUJ1YjJSbElIZHBiR3dnWW1VZ1lYVjBieTF5WlcxdmRtVmtJSGRvWlc0Z2FYUWdhR0Z6SUc1dklIQmhjblJwWTJ4bGN5QnNaV1owTGx4dUlDQWdJQ0FxSUNFamVtZ2c1N0tTNWEyUTVwS3Q1cFMrNWE2TTVxK1Y1WkNPNkllcTVZcW82WlNBNXErQjVvbUE1WnlvNTVxRTZJcUM1NEs1NDRDQ1hHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdENiMjlzWldGdWZTQmhkWFJ2VW1WdGIzWmxUMjVHYVc1cGMyaGNiaUFnSUNBZ0tpOWNiaUFnSUNCaGRYUnZVbVZ0YjNabFQyNUdhVzVwYzJnNklIdGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHRnVhVzFoZEdGaWJHVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQjBiMjlzZEdsd09pQkRRMTlFUlZZZ0ppWWdKMmt4T0c0NlEwOU5VRTlPUlU1VUxuQmhjblJwWTJ4bFgzTjVjM1JsYlM1aGRYUnZVbVZ0YjNabFQyNUdhVzVwYzJnblhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnU1c1a2FXTmhkR1VnZDJobGRHaGxjaUIwYUdVZ2NHRnlkR2xqYkdVZ2MzbHpkR1Z0SUdseklHRmpkR2wyWVhSbFpDNWNiaUFnSUNBZ0tpQWhJM3BvSU9hWXIrV1FwdWEvZ09hMHUrZXlrdVd0a09PQWdseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdRbTl2YkdWaGJuMGdZV04wYVhabFhHNGdJQ0FnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWVdOMGFYWmxPaUI3WEc0Z0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNOcGJYVnNZWFJ2Y2k1aFkzUnBkbVU3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lIWnBjMmxpYkdVNklHWmhiSE5sWEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdUV0Y0YVcxMWJTQndZWEowYVdOc1pYTWdiMllnZEdobElITjVjM1JsYlM1Y2JpQWdJQ0FnS2lBaEkzcG9JT2V5a3VXdGtPYWNnT1drcCthVnNPbUhqK09BZ2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1RuVnRZbVZ5ZlNCMGIzUmhiRkJoY25ScFkyeGxjMXh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJREUxTUZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJ2ZEdGc1VHRnlkR2xqYkdWek9pQXhOVEFzWEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQkliM2NnYldGdWVTQnpaV052Ym1SeklIUm9aU0JsYldsMGRHVnlJSGRwYkNCeWRXNHVJQzB4SUcxbFlXNXpJQ2RtYjNKbGRtVnlKeTVjYmlBZ0lDQWdLaUFoSTNwb0lPV1BrZVd3aE9XWnFPZVVuK1d0bU9hWHR1bVh0Tys4ak9XTmxlUzlqZWVua3UrOGpDMHg2S0dvNTZTNjVveUI1N3V0NVkrUjViQ0U0NENDWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0T2RXMWlaWEo5SUdSMWNtRjBhVzl1WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnVUdGeWRHbGpiR1ZUZVhOMFpXMHVSRlZTUVZSSlQwNWZTVTVHU1U1SlZGbGNiaUFnSUNBZ0tpOWNiaUFnSUNCa2RYSmhkR2x2YmpvZ0xURXNYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCRmJXbHpjMmx2YmlCeVlYUmxJRzltSUhSb1pTQndZWEowYVdOc1pYTXVYRzRnSUNBZ0lDb2dJU042YUNEbXI0L25wNUxsajVIbHNJVG5tb1Ruc3BMbHJaRG1sYkRubTY3amdJSmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdaVzFwYzNOcGIyNVNZWFJsWEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnTVRCY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JsYldsemMybHZibEpoZEdVNklERXdMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1RHbG1aU0J2WmlCbFlXTm9JSEJoY25ScFkyeGxJSE5sZEhSbGNpNWNiaUFnSUNBZ0tpQWhJM3BvSU9leWt1V3RrT2VhaE9pL2tPaWhqT2FYdHVtWHRPT0FnbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0JzYVdabFhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ01WeHVJQ0FnSUNBcUwxeHVJQ0FnSUd4cFptVTZJREVzWEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQldZWEpwWVhScGIyNGdiMllnYkdsbVpTNWNiaUFnSUNBZ0tpQWhJM3BvSU9leWt1V3RrT2VhaE9pL2tPaWhqT2FYdHVtWHRPV1BtT1dNbHVpTWcrV2J0T09BZ2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1RuVnRZbVZ5ZlNCc2FXWmxWbUZ5WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnTUZ4dUlDQWdJQ0FxTDF4dUlDQWdJR3hwWm1WV1lYSTZJREFzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRk4wWVhKMElHTnZiRzl5SUc5bUlHVmhZMmdnY0dGeWRHbGpiR1V1WEc0Z0lDQWdJQ29nSVNONmFDRG5zcExsclpEbGlKM2xwNHZwb3B6b2liTGpnSUpjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTJOakxrTnZiRzl5ZlNCemRHRnlkRU52Ykc5eVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ2UzSTZJREkxTlN3Z1p6b2dNalUxTENCaU9pQXlOVFVzSUdFNklESTFOWDFjYmlBZ0lDQWdLaTljYmlBZ0lDQmZjM1JoY25SRGIyeHZjam9nYm5Wc2JDeGNiaUFnSUNCemRHRnlkRU52Ykc5eU9pQjdYRzRnSUNBZ0lDQWdJSFI1Y0dVNklHTmpMa052Ykc5eUxGeHVJQ0FnSUNBZ0lDQm5aWFFnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTjBZWEowUTI5c2IzSTdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUhObGRDQW9kbUZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0Z5ZEVOdmJHOXlMbklnUFNCMllXd3VjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOMFlYSjBRMjlzYjNJdVp5QTlJSFpoYkM1bk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjM1JoY25SRGIyeHZjaTVpSUQwZ2RtRnNMbUk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emRHRnlkRU52Ykc5eUxtRWdQU0IyWVd3dVlUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCV1lYSnBZWFJwYjI0Z2IyWWdkR2hsSUhOMFlYSjBJR052Ykc5eUxseHVJQ0FnSUNBcUlDRWplbWdnNTdLUzVhMlE1WWlkNWFlTDZhS2M2SW15NVkrWTVZeVc2SXlENVp1MDQ0Q0NYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRqWXk1RGIyeHZjbjBnYzNSaGNuUkRiMnh2Y2xaaGNseHVJQ0FnSUNBcUlFQmtaV1poZFd4MElIdHlPaUF3TENCbk9pQXdMQ0JpT2lBd0xDQmhPaUF3ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRjl6ZEdGeWRFTnZiRzl5Vm1GeU9pQnVkV3hzTEZ4dUlDQWdJSE4wWVhKMFEyOXNiM0pXWVhJNklIdGNiaUFnSUNBZ0lDQWdkSGx3WlRvZ1kyTXVRMjlzYjNJc1hHNGdJQ0FnSUNBZ0lHZGxkQ0FvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmMzUmhjblJEYjJ4dmNsWmhjanRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2MyVjBJQ2gyWVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM04wWVhKMFEyOXNiM0pXWVhJdWNpQTlJSFpoYkM1eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjM1JoY25SRGIyeHZjbFpoY2k1bklEMGdkbUZzTG1jN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0Z5ZEVOdmJHOXlWbUZ5TG1JZ1BTQjJZV3d1WWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTjBZWEowUTI5c2IzSldZWEl1WVNBOUlIWmhiQzVoTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRVZ1WkdsdVp5QmpiMnh2Y2lCdlppQmxZV05vSUhCaGNuUnBZMnhsTGx4dUlDQWdJQ0FxSUNFamVtZ2c1N0tTNWEyUTU3dVQ1cDJmNmFLYzZJbXk0NENDWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0all5NURiMnh2Y24wZ1pXNWtRMjlzYjNKY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCN2Nqb2dNalUxTENCbk9pQXlOVFVzSUdJNklESTFOU3dnWVRvZ01IMWNiaUFnSUNBZ0tpOWNiaUFnSUNCZlpXNWtRMjlzYjNJNklHNTFiR3dzWEc0Z0lDQWdaVzVrUTI5c2IzSTZJSHRjYmlBZ0lDQWdJQ0FnZEhsd1pUb2dZMk11UTI5c2IzSXNYRzRnSUNBZ0lDQWdJR2RsZENBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZaVzVrUTI5c2IzSTdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUhObGRDQW9kbUZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWxibVJEYjJ4dmNpNXlJRDBnZG1Gc0xuSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlsYm1SRGIyeHZjaTVuSUQwZ2RtRnNMbWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJtUkRiMnh2Y2k1aUlEMGdkbUZzTG1JN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWxibVJEYjJ4dmNpNWhJRDBnZG1Gc0xtRTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZtRnlhV0YwYVc5dUlHOW1JSFJvWlNCbGJtUWdZMjlzYjNJdVhHNGdJQ0FnSUNvZ0lTTjZhQ0Ruc3BMbHJaRG51NVBtblovcG9wem9pYkxsajVqbGpKYm9qSVBsbTdUamdJSmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMk5qTGtOdmJHOXlmU0JsYm1SRGIyeHZjbFpoY2x4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUh0eU9pQXdMQ0JuT2lBd0xDQmlPaUF3TENCaE9pQXdmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOWxibVJEYjJ4dmNsWmhjam9nYm5Wc2JDeGNiaUFnSUNCbGJtUkRiMnh2Y2xaaGNqb2dlMXh1SUNBZ0lDQWdJQ0IwZVhCbE9pQmpZeTVEYjJ4dmNpeGNiaUFnSUNBZ0lDQWdaMlYwSUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWxibVJEYjJ4dmNsWmhjanRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2MyVjBJQ2gyWVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlZ1WkVOdmJHOXlWbUZ5TG5JZ1BTQjJZV3d1Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyVnVaRU52Ykc5eVZtRnlMbWNnUFNCMllXd3VaenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJWdVpFTnZiRzl5Vm1GeUxtSWdQU0IyWVd3dVlqdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlZ1WkVOdmJHOXlWbUZ5TG1FZ1BTQjJZV3d1WVR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUVGdVoyeGxJRzltSUdWaFkyZ2djR0Z5ZEdsamJHVWdjMlYwZEdWeUxseHVJQ0FnSUNBcUlDRWplbWdnNTdLUzVhMlE2S2VTNWJxbTQ0Q0NYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJR0Z1WjJ4bFhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ09UQmNiaUFnSUNBZ0tpOWNiaUFnSUNCaGJtZHNaVG9nT1RBc1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJXWVhKcFlYUnBiMjRnYjJZZ1lXNW5iR1VnYjJZZ1pXRmphQ0J3WVhKMGFXTnNaU0J6WlhSMFpYSXVYRzRnSUNBZ0lDb2dJU042YUNEbnNwTGxyWkRvcDVMbHVxYmxqNWpsakpib2pJUGxtN1RqZ0lKY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwNTFiV0psY24wZ1lXNW5iR1ZXWVhKY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENBeU1GeHVJQ0FnSUNBcUwxeHVJQ0FnSUdGdVoyeGxWbUZ5T2lBeU1DeGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZOMFlYSjBJSE5wZW1VZ2FXNGdjR2w0Wld4eklHOW1JR1ZoWTJnZ2NHRnlkR2xqYkdVdVhHNGdJQ0FnSUNvZ0lTTjZhQ0Ruc3BMbHJaRG5tb1RsaUozbHA0dmxwS2Zsc0kvamdJSmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdjM1JoY25SVGFYcGxYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdOVEJjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0Z5ZEZOcGVtVTZJRFV3TEZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWbUZ5YVdGMGFXOXVJRzltSUhOMFlYSjBJSE5wZW1VZ2FXNGdjR2w0Wld4ekxseHVJQ0FnSUNBcUlDRWplbWdnNTdLUzVhMlE1WWlkNWFlTDVhU241YkNQNTVxRTVZK1k1WXlXNkl5RDVadTA0NENDWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0T2RXMWlaWEo5SUhOMFlYSjBVMmw2WlZaaGNseHVJQ0FnSUNBcUlFQmtaV1poZFd4MElEQmNiaUFnSUNBZ0tpOWNiaUFnSUNCemRHRnlkRk5wZW1WV1lYSTZJREFzWEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQkZibVFnYzJsNlpTQnBiaUJ3YVhobGJITWdiMllnWldGamFDQndZWEowYVdOc1pTNWNiaUFnSUNBZ0tpQWhJM3BvSU9leWt1V3RrT2U3aythZG4rYVh0dWVhaE9Xa3ArV3dqK09BZ2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1RuVnRZbVZ5ZlNCbGJtUlRhWHBsWEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnTUZ4dUlDQWdJQ0FxTDF4dUlDQWdJR1Z1WkZOcGVtVTZJREFzWEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQldZWEpwWVhScGIyNGdiMllnWlc1a0lITnBlbVVnYVc0Z2NHbDRaV3h6TGx4dUlDQWdJQ0FxSUNFamVtZ2c1N0tTNWEyUTU3dVQ1cDJmNWFTbjViQ1A1NXFFNVkrWTVZeVc2SXlENVp1MDQ0Q0NYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJR1Z1WkZOcGVtVldZWEpjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F3WEc0Z0lDQWdJQ292WEc0Z0lDQWdaVzVrVTJsNlpWWmhjam9nTUN4Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRk4wWVhKMElHRnVaMnhsSUc5bUlHVmhZMmdnY0dGeWRHbGpiR1V1WEc0Z0lDQWdJQ29nSVNONmFDRG5zcExsclpEbHZJRGxwNHZvaDZybWw0dm9wNUxsdXFiamdJSmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdjM1JoY25SVGNHbHVYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdNRnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjBZWEowVTNCcGJqb2dNQ3hjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGWmhjbWxoZEdsdmJpQnZaaUJ6ZEdGeWRDQmhibWRzWlM1Y2JpQWdJQ0FnS2lBaEkzcG9JT2V5a3VXdGtPVzhnT1duaStpSHF1YVhpK2lua3VXNnB1V1BtT1dNbHVpTWcrV2J0T09BZ2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1RuVnRZbVZ5ZlNCemRHRnlkRk53YVc1V1lYSmNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXdYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzUmhjblJUY0dsdVZtRnlPaUF3TEZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdSVzVrSUdGdVoyeGxJRzltSUdWaFkyZ2djR0Z5ZEdsamJHVXVYRzRnSUNBZ0lDb2dJU042YUNEbnNwTGxyWkRudTVQbW5aL29oNnJtbDR2b3A1TGx1cWJqZ0lKY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwNTFiV0psY24wZ1pXNWtVM0JwYmx4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURCY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JsYm1SVGNHbHVPaUF3TEZ4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWbUZ5YVdGMGFXOXVJRzltSUdWdVpDQmhibWRzWlM1Y2JpQWdJQ0FnS2lBaEkzcG9JT2V5a3VXdGtPZTdrK2FkbitpSHF1YVhpK2lua3VXNnB1V1BtT1dNbHVpTWcrV2J0T09BZ2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1RuVnRZbVZ5ZlNCbGJtUlRjR2x1Vm1GeVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ01GeHVJQ0FnSUNBcUwxeHVJQ0FnSUdWdVpGTndhVzVXWVhJNklEQXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGTnZkWEpqWlNCd2IzTnBkR2x2YmlCdlppQjBhR1VnWlcxcGRIUmxjaTVjYmlBZ0lDQWdLaUFoSTNwb0lPV1BrZVd3aE9XWnFPUzlqZWU5cnVPQWdseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdWbVZqTW4wZ2MyOTFjbU5sVUc5elhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ1kyTXVWbVZqTWk1YVJWSlBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyOTFjbU5sVUc5ek9pQmpZeTVXWldNeUxscEZVazhzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlpoY21saGRHbHZiaUJ2WmlCemIzVnlZMlVnY0c5emFYUnBiMjR1WEc0Z0lDQWdJQ29nSVNONmFDRGxqNUhsc0lUbG1hamt2WTNudmE3bm1vVGxqNWpsakpib2pJUGxtN1RqZ0lMdnZJam1xS3Jsa0pIbGtvem51clhsa0pIdnZJbGNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMVpsWXpKOUlIQnZjMVpoY2x4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUdOakxsWmxZekl1V2tWU1QxeHVJQ0FnSUNBcUwxeHVJQ0FnSUhCdmMxWmhjam9nWTJNdVZtVmpNaTVhUlZKUExGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCUVlYSjBhV05zWlhNZ2JXOTJaVzFsYm5RZ2RIbHdaUzVjYmlBZ0lDQWdLaUFoSTNwb0lPZXlrdVd0a09TOWplZTlydWV4dStXZWkrT0FnbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VUdGeWRHbGpiR1ZUZVhOMFpXMHVVRzl6YVhScGIyNVVlWEJsZlNCd2IzTnBkR2x2YmxSNWNHVmNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQlFZWEowYVdOc1pWTjVjM1JsYlM1UWIzTnBkR2x2YmxSNWNHVXVSbEpGUlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRjl3YjNOcGRHbHZibFI1Y0dVNklIdGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REb2dVRzl6YVhScGIyNVVlWEJsTGtaU1JVVXNYRzRnSUNBZ0lDQWdJR1p2Y20xbGNteDVVMlZ5YVdGc2FYcGxaRUZ6T2lCY0luQnZjMmwwYVc5dVZIbHdaVndpWEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEJ2YzJsMGFXOXVWSGx3WlRvZ2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCUWIzTnBkR2x2YmxSNWNHVXNYRzRnSUNBZ0lDQWdJR2RsZENBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjRzl6YVhScGIyNVVlWEJsTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQnpaWFFnS0haaGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzFoZEdWeWFXRnNJRDBnZEdocGN5NW5aWFJOWVhSbGNtbGhiQ2d3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodFlYUmxjbWxoYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhkR1Z5YVdGc0xtUmxabWx1WlNnblgxVlRSVjlOVDBSRlRDY3NJSFpoYkNBaFBUMGdVRzl6YVhScGIyNVVlWEJsTGtaU1JVVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjRzl6YVhScGIyNVVlWEJsSUQwZ2RtRnNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdVR0Z5ZEdsamJHVnpJR1Z0YVhSMFpYSWdiVzlrWlhNdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RsajVIbHNJVGxtYWpuc2J2bG5vdmpnSUpjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTFCaGNuUnBZMnhsVTNsemRHVnRMa1Z0YVhSMFpYSk5iMlJsZlNCbGJXbDBkR1Z5VFc5a1pWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElGQmhjblJwWTJ4bFUzbHpkR1Z0TGtWdGFYUjBaWEpOYjJSbExrZFNRVlpKVkZsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JsYldsMGRHVnlUVzlrWlRvZ2UxeHVJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQkZiV2wwZEdWeVRXOWtaUzVIVWtGV1NWUlpMRnh1SUNBZ0lDQWdJQ0IwZVhCbE9pQkZiV2wwZEdWeVRXOWtaVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZMeUJIVWtGV1NWUlpJRTFQUkVWY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnUjNKaGRtbDBlU0J2WmlCMGFHVWdaVzFwZEhSbGNpNWNiaUFnSUNBZ0tpQWhJM3BvSU9tSGplV0ttK09BZ2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1ZtVmpNbjBnWjNKaGRtbDBlVnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJR05qTGxabFl6SXVXa1ZTVDF4dUlDQWdJQ0FxTDF4dUlDQWdJR2R5WVhacGRIazZJR05qTGxabFl6SXVXa1ZTVHl4Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRk53WldWa0lHOW1JSFJvWlNCbGJXbDBkR1Z5TGx4dUlDQWdJQ0FxSUNFamVtZ2c2WUNmNWJxbTQ0Q0NYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJSE53WldWa1hHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ01UZ3dYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzQmxaV1E2SURFNE1DeGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZaaGNtbGhkR2x2YmlCdlppQjBhR1VnYzNCbFpXUXVYRzRnSUNBZ0lDb2dJU042YUNEcGdKL2x1cWJsajVqbGpKYm9qSVBsbTdUamdJSmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdjM0JsWldSV1lYSmNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQTFNRnh1SUNBZ0lDQXFMMXh1SUNBZ0lITndaV1ZrVm1GeU9pQTFNQ3hjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGUmhibWRsYm5ScFlXd2dZV05qWld4bGNtRjBhVzl1SUc5bUlHVmhZMmdnY0dGeWRHbGpiR1V1SUU5dWJIa2dZWFpoYVd4aFlteGxJR2x1SUNkSGNtRjJhWFI1SnlCdGIyUmxMbHh1SUNBZ0lDQXFJQ0VqZW1nZzVxK1A1TGlxNTdLUzVhMlE1NXFFNVlpSDVaQ1I1WXFnNllDZjVicW03N3lNNVkyejVaNkM1NXUwNUxxTzZZZU41WXFiNXBhNTVaQ1I1NXFFNVlxZzZZQ2Y1YnFtNzd5TTVZK3E1cHlKNVp5bzZZZU41WXFiNXFpaDVieVA1TGlMNVkrdjU1U280NENDWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0T2RXMWlaWEo5SUhSaGJtZGxiblJwWVd4QlkyTmxiRnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJRGd3WEc0Z0lDQWdJQ292WEc0Z0lDQWdkR0Z1WjJWdWRHbGhiRUZqWTJWc09pQTRNQ3hjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGWmhjbWxoZEdsdmJpQnZaaUIwYUdVZ2RHRnVaMlZ1ZEdsaGJDQmhZMk5sYkdWeVlYUnBiMjR1WEc0Z0lDQWdJQ29nSVNONmFDRG1yNC9rdUtybnNwTGxyWkRubW9UbGlJZmxrSkhsaXFEcGdKL2x1cWJsajVqbGpKYm9qSVBsbTdUamdJSmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdkR0Z1WjJWdWRHbGhiRUZqWTJWc1ZtRnlYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdNRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUmhibWRsYm5ScFlXeEJZMk5sYkZaaGNqb2dNQ3hjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlFRmpZMlZzWlhKaGRHbHZiaUJ2WmlCbFlXTm9JSEJoY25ScFkyeGxMaUJQYm14NUlHRjJZV2xzWVdKc1pTQnBiaUFuUjNKaGRtbDBlU2NnYlc5a1pTNWNiaUFnSUNBZ0tpQWhJM3BvSU9leWt1V3RrT1craE9XUWtlV0tvT21BbitXNnB1KzhqT1dOcytXNXMraWhqT1M2anVtSGplV0ttK2FXdWVXUWtlZWFoT1dLb09tQW4rVzZwdSs4ak9XUHF1YWNpZVdjcU9tSGplV0ttK2Fvb2VXOGorUzRpK1dQcitlVXFPT0FnbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0J5WVdScFlXeEJZMk5sYkZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURCY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5WVdScFlXeEJZMk5sYkRvZ01DeGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZaaGNtbGhkR2x2YmlCdlppQjBhR1VnY21Ga2FXRnNJR0ZqWTJWc1pYSmhkR2x2Ymk1Y2JpQWdJQ0FnS2lBaEkzcG9JT2V5a3VXdGtPVytoT1dRa2VXS29PbUFuK1c2cHVXUG1PV01sdWlNZytXYnRPT0FnbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0J5WVdScFlXeEJZMk5sYkZaaGNseHVJQ0FnSUNBcUlFQmtaV1poZFd4MElEQmNiaUFnSUNBZ0tpOWNiaUFnSUNCeVlXUnBZV3hCWTJObGJGWmhjam9nTUN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnU1c1a2FXTmhkR1VnZDJobGRHaGxjaUIwYUdVZ2NtOTBZWFJwYjI0Z2IyWWdaV0ZqYUNCd1lYSjBhV05zWlNCbGNYVmhiSE1nZEc4Z2FYUnpJR1JwY21WamRHbHZiaTRnVDI1c2VTQmhkbUZwYkdGaWJHVWdhVzRnSjBkeVlYWnBkSGtuSUcxdlpHVXVYRzRnSUNBZ0lDb2dJU042YUNEbXI0L2t1S3Juc3BMbHJaRG5tb1RtbDR2b3Zhem1tSy9sa0tibnJZbmt1bzdsaGJibWxybmxrSkh2dkl6bGo2cm1uSW5sbktqcGg0M2xpcHZtcUtIbHZJL2t1SXZsajYvbmxLampnSUpjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTBKdmIyeGxZVzU5SUhKdmRHRjBhVzl1U1hORWFYSmNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQm1ZV3h6WlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEp2ZEdGMGFXOXVTWE5FYVhJNklHWmhiSE5sTEZ4dVhHNGdJQ0FnTHk4Z1VrRkVTVlZUSUUxUFJFVmNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1UzUmhjblJwYm1jZ2NtRmthWFZ6SUc5bUlIUm9aU0J3WVhKMGFXTnNaWE11SUU5dWJIa2dZWFpoYVd4aFlteGxJR2x1SUNkU1lXUnBkWE1uSUcxdlpHVXVYRzRnSUNBZ0lDb2dJU042YUNEbGlKM2xwNHZsallybHZvVHZ2SXpvb2FqbnBMcm5zcExsclpEbGg3cm5sSi9tbDdibm03amxyN25sajVIbHNJVGxtYWpubW9Ub3Q1M25wcnZ2dkl6bGo2cm1uSW5sbktqbGpZcmx2b1RtcUtIbHZJL2t1SXZsajYvbmxLampnSUpjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTA1MWJXSmxjbjBnYzNSaGNuUlNZV1JwZFhOY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENBd1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNSaGNuUlNZV1JwZFhNNklEQXNYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCV1lYSnBZWFJwYjI0Z2IyWWdkR2hsSUhOMFlYSjBhVzVuSUhKaFpHbDFjeTVjYmlBZ0lDQWdLaUFoSTNwb0lPV0luZVduaStXTml1VytoT1dQbU9XTWx1aU1nK1didE9PQWdseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdUblZ0WW1WeWZTQnpkR0Z5ZEZKaFpHbDFjMVpoY2x4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURCY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZEdGeWRGSmhaR2wxYzFaaGNqb2dNQ3hjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlFVnVaR2x1WnlCeVlXUnBkWE1nYjJZZ2RHaGxJSEJoY25ScFkyeGxjeTRnVDI1c2VTQmhkbUZwYkdGaWJHVWdhVzRnSjFKaFpHbDFjeWNnYlc5a1pTNWNiaUFnSUNBZ0tpQWhJM3BvSU9lN2srYWRuK1dOaXVXK2hPKzhqT1dQcXVhY2llV2NxT1dOaXVXK2hPYW9vZVc4aitTNGkrV1ByK2VVcU9PQWdseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdUblZ0WW1WeWZTQmxibVJTWVdScGRYTmNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXdYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1pXNWtVbUZrYVhWek9pQXdMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZtRnlhV0YwYVc5dUlHOW1JSFJvWlNCbGJtUnBibWNnY21Ga2FYVnpMbHh1SUNBZ0lDQXFJQ0VqZW1nZzU3dVQ1cDJmNVkySzViNkU1WStZNVl5VzZJeUQ1WnUwNDRDQ1hHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdE9kVzFpWlhKOUlHVnVaRkpoWkdsMWMxWmhjbHh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJREJjYmlBZ0lDQWdLaTljYmlBZ0lDQmxibVJTWVdScGRYTldZWEk2SURBc1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJPZFcxaVpYSWdiMllnWkdWbmNtVnpjeUIwYnlCeWIzUmhkR1VnWVNCd1lYSjBhV05zWlNCaGNtOTFibVFnZEdobElITnZkWEpqWlNCd2IzTWdjR1Z5SUhObFkyOXVaQzRnVDI1c2VTQmhkbUZwYkdGaWJHVWdhVzRnSjFKaFpHbDFjeWNnYlc5a1pTNWNiaUFnSUNBZ0tpQWhJM3BvSU9leWt1V3RrT2F2aitlbmt1V2J0T2U3bGVpMXQrV25pK2VDdWVlYWhPYVhpK2k5ck9pbmt1VzZwdSs4ak9XUHF1YWNpZVdjcU9XTml1VytoT2Fvb2VXOGorUzRpK1dQcitlVXFPT0FnbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0J5YjNSaGRHVlFaWEpUWEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnTUZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEp2ZEdGMFpWQmxjbE02SURBc1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJXWVhKcFlYUnBiMjRnYjJZZ2RHaGxJR1JsWjNKbGMzTWdkRzhnY205MFlYUmxJR0VnY0dGeWRHbGpiR1VnWVhKdmRXNWtJSFJvWlNCemIzVnlZMlVnY0c5eklIQmxjaUJ6WldOdmJtUXVYRzRnSUNBZ0lDb2dJU042YUNEbnNwTGxyWkRtcjQvbnA1TGxtN1RudTVYb3RiZmxwNHZuZ3Jubm1vVG1sNHZvdmF6b3A1TGx1cWJsajVqbGpKYm9qSVBsbTdUamdJSmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdjbTkwWVhSbFVHVnlVMVpoY2x4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURCY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5YjNSaGRHVlFaWEpUVm1GeU9pQXdYRzVjYm4wN1hHNWNiaThxS2x4dUlDb2dVR0Z5ZEdsamJHVWdVM2x6ZEdWdElHSmhjMlVnWTJ4aGMzTXVJRHhpY2k4K1hHNGdLaUJCZEhSeWFXSjFkR1Z6SUc5bUlHRWdVR0Z5ZEdsamJHVWdVM2x6ZEdWdE9qeGljaTgrWEc0Z0tpQWdMU0JsYlcxcGMybHZiaUJ5WVhSbElHOW1JSFJvWlNCd1lYSjBhV05zWlhNOFluSXZQbHh1SUNvZ0lDMGdSM0poZG1sMGVTQk5iMlJsSUNoTmIyUmxJRUVwT2lBOFluSXZQbHh1SUNvZ0lDMGdaM0poZG1sMGVTQThZbkl2UGx4dUlDb2dJQzBnWkdseVpXTjBhVzl1SUR4aWNpOCtYRzRnS2lBZ0xTQnpjR1ZsWkNBckxTQWdkbUZ5YVdGdVkyVWdQR0p5THo1Y2JpQXFJQ0F0SUhSaGJtZGxiblJwWVd3Z1lXTmpaV3hsY21GMGFXOXVJQ3N0SUhaaGNtbGhibU5sUEdKeUx6NWNiaUFxSUNBdElISmhaR2xoYkNCaFkyTmxiR1Z5WVhScGIyNGdLeTBnZG1GeWFXRnVZMlU4WW5JdlBseHVJQ29nSUMwZ1VtRmthWFZ6SUUxdlpHVWdLRTF2WkdVZ1FpazZJQ0FnSUNBZ1BHSnlMejVjYmlBcUlDQXRJSE4wWVhKMFVtRmthWFZ6SUNzdElIWmhjbWxoYm1ObElDQWdJRHhpY2k4K1hHNGdLaUFnTFNCbGJtUlNZV1JwZFhNZ0t5MGdkbUZ5YVdGdVkyVWdJQ0FnSUNBOFluSXZQbHh1SUNvZ0lDMGdjbTkwWVhSbElDc3RJSFpoY21saGJtTmxJQ0FnSUNBZ0lDQWdQR0p5THo1Y2JpQXFJQ0F0SUZCeWIzQmxjblJwWlhNZ1kyOXRiVzl1SUhSdklHRnNiQ0J0YjJSbGN6b2dQR0p5THo1Y2JpQXFJQ0F0SUd4cFptVWdLeTBnYkdsbVpTQjJZWEpwWVc1alpTQWdJQ0FnSUR4aWNpOCtYRzRnS2lBZ0xTQnpkR0Z5ZENCemNHbHVJQ3N0SUhaaGNtbGhibU5sSUNBZ0lDQThZbkl2UGx4dUlDb2dJQzBnWlc1a0lITndhVzRnS3kwZ2RtRnlhV0Z1WTJVZ0lDQWdJQ0FnUEdKeUx6NWNiaUFxSUNBdElITjBZWEowSUhOcGVtVWdLeTBnZG1GeWFXRnVZMlVnSUNBZ0lEeGljaTgrWEc0Z0tpQWdMU0JsYm1RZ2MybDZaU0FyTFNCMllYSnBZVzVqWlNBZ0lDQWdJQ0E4WW5JdlBseHVJQ29nSUMwZ2MzUmhjblFnWTI5c2IzSWdLeTBnZG1GeWFXRnVZMlVnSUNBZ1BHSnlMejVjYmlBcUlDQXRJR1Z1WkNCamIyeHZjaUFyTFNCMllYSnBZVzVqWlNBZ0lDQWdJRHhpY2k4K1hHNGdLaUFnTFNCc2FXWmxJQ3N0SUhaaGNtbGhibU5sSUNBZ0lDQWdJQ0FnSUNBOFluSXZQbHh1SUNvZ0lDMGdZbXhsYm1ScGJtY2dablZ1WTNScGIyNGdJQ0FnSUNBZ0lDQWdQR0p5THo1Y2JpQXFJQ0F0SUhSbGVIUjFjbVVnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4aWNpOCtYRzRnS2lBOFluSXZQbHh1SUNvZ1kyOWpiM015WkNCaGJITnZJSE4xY0hCdmNuUnpJSEJoY25ScFkyeGxjeUJuWlc1bGNtRjBaV1FnWW5rZ1VHRnlkR2xqYkdVZ1JHVnphV2R1WlhJZ0tHaDBkSEE2THk5d1lYSjBhV05zWldSbGMybG5ibVZ5TGpjeGMzRjFZWEpsWkM1amIyMHZLUzQ4WW5JdlBseHVJQ29nSjFKaFpHbDFjeUJOYjJSbEp5QnBiaUJRWVhKMGFXTnNaU0JFWlhOcFoyNWxjaUIxYzJWeklHRWdabWw0WldRZ1pXMXBkQ0J5WVhSbElHOW1JRE13SUdoNkxpQlRhVzVqWlNCMGFHRjBJR05oYmlkMElHSmxJR2QxWVhKaGRHVmxaQ0JwYmlCamIyTnZjekprTENBZ1BHSnlMejVjYmlBcUlHTnZZMjl6TW1RZ2RYTmxjeUJoSUdGdWIzUm9aWElnWVhCd2NtOWhZMmdzSUdKMWRDQjBhR1VnY21WemRXeDBjeUJoY21VZ1lXeHRiM04wSUdsa1pXNTBhV05oYkM0OFluSXZQbHh1SUNvZ1kyOWpiM015WkNCemRYQndiM0owY3lCaGJHd2dkR2hsSUhaaGNtbGhZbXhsY3lCMWMyVmtJR0o1SUZCaGNuUnBZMnhsSUVSbGMybG5ibVZ5SUhCc2RYTWdZU0JpYVhRZ2JXOXlaVG9nSUR4aWNpOCtYRzRnS2lBZ0xTQnpjR2x1Ym1sdVp5QndZWEowYVdOc1pYTWdLSE4xY0hCdmNuUmxaQ0IzYUdWdUlIVnphVzVuSUZCaGNuUnBZMnhsVTNsemRHVnRLU0FnSUNBZ0lDQThZbkl2UGx4dUlDb2dJQzBnZEdGdVoyVnVkR2xoYkNCaFkyTmxiR1Z5WVhScGIyNGdLRWR5WVhacGRIa2diVzlrWlNrZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR0p5THo1Y2JpQXFJQ0F0SUhKaFpHbGhiQ0JoWTJObGJHVnlZWFJwYjI0Z0tFZHlZWFpwZEhrZ2JXOWtaU2tnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhpY2k4K1hHNGdLaUFnTFNCeVlXUnBkWE1nWkdseVpXTjBhVzl1SUNoU1lXUnBkWE1nYlc5a1pTa2dLRkJoY25ScFkyeGxJRVJsYzJsbmJtVnlJSE4xY0hCdmNuUnpJRzkxZEhkaGNtUnpJSFJ2SUdsdWQyRnlaSE1nWkdseVpXTjBhVzl1SUc5dWJIa3BJRHhpY2k4K1hHNGdLaUJKZENCcGN5QndiM056YVdKc1pTQjBieUJqZFhOMGIyMXBlbVVnWVc1NUlHOW1JSFJvWlNCaFltOTJaU0J0Wlc1MGFXOXVaV1FnY0hKdmNHVnlkR2xsY3lCcGJpQnlkVzUwYVcxbExpQkZlR0Z0Y0d4bE9pQWdJRHhpY2k4K1hHNGdLbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJR1Z0YVhSMFpYSXVjbUZrYVdGc1FXTmpaV3dnUFNBeE5UdGNiaUFxSUdWdGFYUjBaWEl1YzNSaGNuUlRjR2x1SUQwZ01EdGNiaUFxWEc0Z0tpQkFZMnhoYzNNZ1VHRnlkR2xqYkdWVGVYTjBaVzFjYmlBcUlFQmxlSFJsYm1SeklGSmxibVJsY2tOdmJYQnZibVZ1ZEZ4dUlDb3ZYRzUyWVhJZ1VHRnlkR2xqYkdWVGVYTjBaVzBnUFNCall5NURiR0Z6Y3loN1hHNGdJQ0FnYm1GdFpUb2dKMk5qTGxCaGNuUnBZMnhsVTNsemRHVnRKeXhjYmlBZ0lDQmxlSFJsYm1Sek9pQlNaVzVrWlhKRGIyMXdiMjVsYm5Rc1hHNGdJQ0FnYldsNGFXNXpPaUJiUW14bGJtUkdkVzVqWFN4Y2JpQWdJQ0JsWkdsMGIzSTZJRU5EWDBWRVNWUlBVaUFtSmlCN1hHNGdJQ0FnSUNBZ0lHMWxiblU2SUNkcE1UaHVPazFCU1U1ZlRVVk9WUzVqYjIxd2IyNWxiblF1Y21WdVpHVnlaWEp6TDFCaGNuUnBZMnhsVTNsemRHVnRKeXhjYmlBZ0lDQWdJQ0FnYVc1emNHVmpkRzl5T2lBbmNHRmphMkZuWlhNNkx5OXBibk53WldOMGIzSXZhVzV6Y0dWamRHOXljeTlqYjIxd2N5OXdZWEowYVdOc1pTMXplWE4wWlcwdWFuTW5MRnh1SUNBZ0lDQWdJQ0J3YkdGNVQyNUdiMk4xY3pvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWlhobFkzVjBaVWx1UldScGRFMXZaR1U2SUhSeWRXVmNiaUFnSUNCOUxGeHVYRzRnSUNBZ1kzUnZjam9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2NtVjJhV1YzVkdsdFpYSWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bWIyTjFjMlZrSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJsdGRXeGhkRzl5SUQwZ2JtVjNJRkJoY25ScFkyeGxVMmx0ZFd4aGRHOXlLSFJvYVhNcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUdOdmJHOXljMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0Z5ZEVOdmJHOXlJRDBnWTJNdVkyOXNiM0lvTWpVMUxDQXlOVFVzSURJMU5Td2dNalUxS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSaGNuUkRiMnh2Y2xaaGNpQTlJR05qTG1OdmJHOXlLREFzSURBc0lEQXNJREFwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlsYm1SRGIyeHZjaUE5SUdOakxtTnZiRzl5S0RJMU5Td2dNalUxTENBeU5UVXNJREFwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlsYm1SRGIyeHZjbFpoY2lBOUlHTmpMbU52Ykc5eUtEQXNJREFzSURBc0lEQXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGUm9aU0IwWlcxd2IzSmhjbmtnVTNCeWFYUmxSbkpoYldVZ2IySnFaV04wSUhWelpXUWdabTl5SUhSb1pTQnlaVzVrWlhKbGNpNGdRbVZqWVhWelpTQjBhR1Z5WlNCcGN5QnVieUJqYjNKeVpYTndiMjVrYVc1bklHRnpjMlYwTENCcGRDQmpZVzRuZENCaVpTQnpaWEpwWVd4cGVtVmtMbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaVzVrWlhKVGNISnBkR1ZHY21GdFpTQTlJRzUxYkd3N1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhCeWIzQmxjblJwWlhNNklIQnliM0JsY25ScFpYTXNYRzVjYmlBZ0lDQnpkR0YwYVdOek9pQjdYRzVjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJRkJoY25ScFkyeGxJR1Z0YVhSMFpYSWdiR2wyWlhNZ1ptOXlaWFpsY2k1Y2JpQWdJQ0FnSUNBZ0lDb2dJU042YUNEb29ham5wTHJsajVIbHNJVGxtYWptc0xqa3VZWGxyWmpsbktoY2JpQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRVJWVWtGVVNVOU9YMGxPUmtsT1NWUlpYRzRnSUNBZ0lDQWdJQ0FxSUVCa1pXWmhkV3gwSUMweFhHNGdJQ0FnSUNBZ0lDQXFJRUJ6ZEdGMGFXTmNiaUFnSUNBZ0lDQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQkVWVkpCVkVsUFRsOUpUa1pKVGtsVVdUb2dMVEVzWEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNGdWR2hsSUhOMFlYSjBhVzVuSUhOcGVtVWdiMllnZEdobElIQmhjblJwWTJ4bElHbHpJR1Z4ZFdGc0lIUnZJSFJvWlNCbGJtUnBibWNnYzJsNlpTNWNiaUFnSUNBZ0lDQWdJQ29nSVNONmFDRG9vYWpucExybnNwTGxyWkRubW9Ub3RiZmxwNHZscEtmbHNJL25yWW5rdW83bnU1UG1uWi9scEtmbHNJL2pnSUpjYmlBZ0lDQWdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdE9kVzFpWlhKOUlGTlVRVkpVWDFOSldrVmZSVkZWUVV4ZlZFOWZSVTVFWDFOSldrVmNiaUFnSUNBZ0lDQWdJQ29nUUdSbFptRjFiSFFnTFRGY2JpQWdJQ0FnSUNBZ0lDb2dRSE4wWVhScFkxeHVJQ0FnSUNBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lGTlVRVkpVWDFOSldrVmZSVkZWUVV4ZlZFOWZSVTVFWDFOSldrVTZJQzB4TEZ4dVhHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lBaEkyVnVJRlJvWlNCemRHRnlkR2x1WnlCeVlXUnBkWE1nYjJZZ2RHaGxJSEJoY25ScFkyeGxJR2x6SUdWeGRXRnNJSFJ2SUhSb1pTQmxibVJwYm1jZ2NtRmthWFZ6TGx4dUlDQWdJQ0FnSUNBZ0tpQWhJM3BvSU9paHFPZWt1dWV5a3VXdGtPZWFoT2kxdCtXbmkrV05pdVcraE9ldGllUzZqdWU3aythZG4rV05pdVcraE9PQWdseHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTA1MWJXSmxjbjBnVTFSQlVsUmZVa0ZFU1ZWVFgwVlJWVUZNWDFSUFgwVk9SRjlTUVVSSlZWTmNiaUFnSUNBZ0lDQWdJQ29nUUdSbFptRjFiSFFnTFRGY2JpQWdJQ0FnSUNBZ0lDb2dRSE4wWVhScFkxeHVJQ0FnSUNBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lGTlVRVkpVWDFKQlJFbFZVMTlGVVZWQlRGOVVUMTlGVGtSZlVrRkVTVlZUT2lBdE1TeGNibHh1SUNBZ0lDQWdJQ0JGYldsMGRHVnlUVzlrWlRvZ1JXMXBkSFJsY2sxdlpHVXNYRzRnSUNBZ0lDQWdJRkJ2YzJsMGFXOXVWSGx3WlRvZ1VHOXphWFJwYjI1VWVYQmxMRnh1WEc1Y2JpQWdJQ0FnSUNBZ1gxQk9SMUpsWVdSbGNqb2dVRTVIVW1WaFpHVnlMRnh1SUNBZ0lDQWdJQ0JmVkVsR1JsSmxZV1JsY2pvZ2RHbG1abEpsWVdSbGNpeGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5OGdSVVJKVkU5U0lGSkZURUZVUlVRZ1RVVlVTRTlFVTF4dVhHNGdJQ0FnYjI1R2IyTjFjMGx1UldScGRHOXlPaUJEUTE5RlJFbFVUMUlnSmlZZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOW1iMk4xYzJWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2JHVjBJR052YlhCdmJtVnVkSE1nUFNCblpYUlFZWEowYVdOc1pVTnZiWEJ2Ym1WdWRITW9kR2hwY3k1dWIyUmxLVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCamIyMXdiMjVsYm5SekxteGxibWQwYURzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjF3YjI1bGJuUnpXMmxkTGw5emRHRnlkRkJ5WlhacFpYY29LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J2Ymt4dmMzUkdiMk4xYzBsdVJXUnBkRzl5T2lCRFExOUZSRWxVVDFJZ0ppWWdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDltYjJOMWMyVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJR3hsZENCamIyMXdiMjVsYm5SeklEMGdaMlYwVUdGeWRHbGpiR1ZEYjIxd2IyNWxiblJ6S0hSb2FYTXVibTlrWlNrN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dZMjl0Y0c5dVpXNTBjeTVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dGNHOXVaVzUwYzF0cFhTNWZjM1J2Y0ZCeVpYWnBaWGNvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCZmMzUmhjblJRY21WMmFXVjNPaUJEUTE5RlJFbFVUMUlnSmlZZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3Y21WMmFXVjNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMyVjBVM2x6ZEdWdEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYM04wYjNCUWNtVjJhV1YzT2lCRFExOUZSRWxVVDFJZ0ppWWdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1d2NtVjJhV1YzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxjMlYwVTNsemRHVnRLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMGIzQlRlWE4wWlcwb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR2x6WVdKc1pWSmxibVJsY2lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJNdVpXNW5hVzVsTG5KbGNHRnBiblJKYmtWa2FYUk5iMlJsS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM0J5WlhacFpYZFVhVzFsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSkpiblJsY25aaGJDaDBhR2x6TGw5d2NtVjJhV1YzVkdsdFpYSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzh2SUV4SlJrVXRRMWxEVEVVZ1RVVlVTRTlFVTF4dVhHNGdJQ0FnTHk4Z2FuVnpkQ0IxYzJWa0lIUnZJSEpsWVdRZ1pHRjBZU0JtY205dElERXVlRnh1SUNBZ0lGOWpiMjUyWlhKMFZHVjRkSFZ5WlZSdlUzQnlhWFJsUm5KaGJXVTZJRU5EWDBWRVNWUlBVaUFtSmlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDl6Y0hKcGRHVkdjbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUd4bGRDQjBaWGgwZFhKbElEMGdkR2hwY3k1MFpYaDBkWEpsTzF4dUlDQWdJQ0FnSUNCcFppQW9JWFJsZUhSMWNtVWdmSHdnSVhSbGVIUjFjbVV1WDNWMWFXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJRVZrYVhSdmNpNWhjM05sZEdSaUxuRjFaWEo1VFdWMFlVbHVabTlDZVZWMWFXUW9kR1Y0ZEhWeVpTNWZkWFZwWkN3Z1puVnVZM1JwYjI0Z0tHVnljaXdnYldWMFlVbHVabThwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGNuSXBJSEpsZEhWeWJpQkZaR2wwYjNJdVpYSnliM0lvWlhKeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnRaWFJoSUQwZ1NsTlBUaTV3WVhKelpTaHRaWFJoU1c1bWJ5NXFjMjl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodFpYUmhMblI1Y0dVZ1BUMDlJQ2R5WVhjbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1RtOWtaVlYwYVd4eklEMGdSV1JwZEc5eUxuSmxjWFZwY21Vb0oyRndjRG92TDJWa2FYUnZjaTl3WVdkbEwzTmpaVzVsTFhWMGFXeHpMM1YwYVd4ekwyNXZaR1VuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdibTlrWlZCaGRHZ2dQU0JPYjJSbFZYUnBiSE11WjJWMFRtOWtaVkJoZEdnb1gzUm9hWE11Ym05a1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFVmthWFJ2Y2k1M1lYSnVLR0JVYUdVZ2RHVjRkSFZ5WlNBa2UyMWxkR0ZKYm1adkxtRnpjMlYwVlhKc2ZTQjFjMlZrSUdKNUlIQmhjblJwWTJ4bElDUjdibTlrWlZCaGRHaDlJR1J2WlhNZ2JtOTBJR052Ym5SaGFXNGdZVzU1SUZOd2NtbDBaVVp5WVcxbExDQndiR1ZoYzJVZ2MyVjBJSFJvWlNCMFpYaDBkWEpsSUhSNWNHVWdkRzhnVTNCeWFYUmxJR0Z1WkNCeVpXRnpjMmxuYmlCMGFHVWdVM0J5YVhSbFJuSmhiV1VnZEc4Z2RHaGxJSEJoY25ScFkyeGxJR052YlhCdmJtVnVkQzVnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQlZjbXdnUFNCeVpYRjFhWEpsS0NkbWFYSmxMWFZ5YkNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1WVcxbElEMGdWWEpzTG1KaGMyVnVZVzFsVG05RmVIUW9iV1YwWVVsdVptOHVZWE56WlhSUVlYUm9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RYVnBaQ0E5SUcxbGRHRXVjM1ZpVFdWMFlYTmJibUZ0WlYwdWRYVnBaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWXk1QmMzTmxkRXhwWW5KaGNua3ViRzloWkVGemMyVjBLSFYxYVdRc0lHWjFibU4wYVc5dUlDaGxjbklzSUhOd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxjbklwSUhKbGRIVnliaUJGWkdsMGIzSXVaWEp5YjNJb1pYSnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDNSbGVIUjFjbVVnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV6Y0hKcGRHVkdjbUZ0WlNBOUlITndPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDE5d2NtVnNiMkZrT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tFTkRYMFZFU1ZSUFVpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTI5dWRtVnlkRlJsZUhSMWNtVlViMU53Y21sMFpVWnlZVzFsS0NrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWTNWemRHOXRJQ1ltSUhSb2FYTXVjM0J5YVhSbFJuSmhiV1VnSmlZZ0lYUm9hWE11WDNKbGJtUmxjbE53Y21sMFpVWnlZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWhjSEJzZVZOd2NtbDBaVVp5WVcxbEtIUm9hWE11YzNCeWFYUmxSbkpoYldVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSFJvYVhNdVgyWnBiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqZFhOMGIyMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JXbHpjME4xYzNSdmJWUmxlSFIxY21VZ1BTQWhkR2hwY3k1ZmRHVjRkSFZ5WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iV2x6YzBOMWMzUnZiVlJsZUhSMWNtVXBJSHNnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJGd2NHeDVSbWxzWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJGd2NHeDVSbWxzWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJR0YxZEc4Z2NHeGhlVnh1SUNBZ0lDQWdJQ0JwWmlBb0lVTkRYMFZFU1ZSUFVpQjhmQ0JqWXk1bGJtZHBibVV1YVhOUWJHRjVhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3YkdGNVQyNU1iMkZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WlhObGRGTjVjM1JsYlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJRlZ3WjNKaFpHVWdZMjlzYjNJZ2RIbHdaU0JtY205dElIWXlMakF1TUZ4dUlDQWdJQ0FnSUNCcFppQW9RME5mUlVSSlZFOVNJQ1ltSUNFb2RHaHBjeTVmYzNSaGNuUkRiMnh2Y2lCcGJuTjBZVzVqWlc5bUlHTmpMa052Ykc5eUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSaGNuUkRiMnh2Y2lBOUlHTmpMbU52Ykc5eUtIUm9hWE11WDNOMFlYSjBRMjlzYjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjM1JoY25SRGIyeHZjbFpoY2lBOUlHTmpMbU52Ykc5eUtIUm9hWE11WDNOMFlYSjBRMjlzYjNKV1lYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWlc1a1EyOXNiM0lnUFNCall5NWpiMnh2Y2loMGFHbHpMbDlsYm1SRGIyeHZjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJtUkRiMnh2Y2xaaGNpQTlJR05qTG1OdmJHOXlLSFJvYVhNdVgyVnVaRU52Ykc5eVZtRnlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J2YmtWdVlXSnNaU0FvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOMWNHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibTlrWlM1ZmNtVnVaR1Z5Um14aFp5QW1QU0IrVW1WdVpHVnlSbXh2ZHk1R1RFRkhYMUpGVGtSRlVqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZllXTjBhWFpoZEdWTllYUmxjbWxoYkNncE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCdmJrUmxjM1J5YjNrZ0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVoZFhSdlVtVnRiM1psVDI1R2FXNXBjMmdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlYVjBiMUpsYlc5MlpVOXVSbWx1YVhOb0lEMGdabUZzYzJVN0lDQWdJQzh2SUdGc2NtVmhaSGtnY21WdGIzWmxaRnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5aWRXWm1aWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgySjFabVpsY2k1a1pYTjBjbTk1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWlkV1ptWlhJZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJsaElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0x5OGdjbVZ6WlhRZ2RYWWdaR0YwWVNCemJ5QnVaWGgwSUhScGJXVWdjMmx0ZFd4aGRHOXlJSGRwYkd3Z2NtVm1hV3hzSUdKMVptWmxjaUIxZGlCcGJtWnZJSGRvWlc0Z1pYaHBkQ0JsWkdsMElHMXZaR1VnWm5KdmJTQndjbVZtWVdJdVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOcGJYVnNZWFJ2Y2k1ZmRYWkdhV3hzWldRZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpkWEJsY2lncE8xeHVJQ0FnSUgwc1hHNGdJQ0FnWEc0Z0lDQWdiR0YwWlZWd1pHRjBaU0FvWkhRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDl6YVcxMWJHRjBiM0l1Wm1sdWFYTm9aV1FnSmlZZ2RHaHBjeTVmYVdFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM05wYlhWc1lYUnZjaTV6ZEdWd0tHUjBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2THlCQlVFbFRYRzVjYmlBZ0lDQXZLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1FXUmtJR0VnY0dGeWRHbGpiR1VnZEc4Z2RHaGxJR1Z0YVhSMFpYSXVYRzRnSUNBZ0lDb2dJU042YUNEbXQ3dmxpcURrdUlEa3VLcm5zcExsclpEbGlMRGxqNUhsc0lUbG1hamt1SzNqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdGa1pGQmhjblJwWTJ4bFhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1FtOXZiR1ZoYm4xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JoWkdSUVlYSjBhV05zWlRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCT2IzUWdhVzF3YkdWdFpXNTBaV1JjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlRkRzl3SUdWdGFYUjBhVzVuSUhCaGNuUnBZMnhsY3k0Z1VuVnVibWx1WnlCd1lYSjBhV05zWlhNZ2QybHNiQ0JqYjI1MGFXNTFaU0IwYnlCeWRXNGdkVzUwYVd3Z2RHaGxlU0JrYVdVdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RsZ1p6bXJhTGxqNUhsc0lUbG1hamxqNUhsc0lUbnNwTGxyWkR2dkl6bGo1SGxzSVRsaDdybGpydm5tb1Ruc3BMbHJaRGxzSWJudTZmbnU2M292NURvb1l6dnZJem5tN1RvaDdQbnNwTGxyWkRubEovbGtiM251NVBtblovamdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lITjBiM0JUZVhOMFpXMWNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnSUNBcUlDOHZJSE4wYjNBZ2NHRnlkR2xqYkdVZ2MzbHpkR1Z0TGx4dUlDQWdJQ0FxSUcxNVVHRnlkR2xqYkdWVGVYTjBaVzB1YzNSdmNGTjVjM1JsYlNncE8xeHVJQ0FnSUNBcUwxeHVJQ0FnSUhOMGIzQlRlWE4wWlcwNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM1J2Y0hCbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOcGJYVnNZWFJ2Y2k1emRHOXdLQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdTMmxzYkNCaGJHd2diR2wyYVc1bklIQmhjblJwWTJ4bGN5NWNiaUFnSUNBZ0tpQWhJM3BvSU9hZGdPYXR1K2FKZ09hY2llV3RtT1djcU9lYWhPZXlrdVd0a08rOGpPZUV0dVdRanVtSGplYVdzT1dRcitXS3FPZXlrdVd0a09XUGtlV3doT1dacU9PQWdseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2NtVnpaWFJUZVhOMFpXMWNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnSUNBcUlDOHZJSEJzWVhrZ2NHRnlkR2xqYkdVZ2MzbHpkR1Z0TGx4dUlDQWdJQ0FxSUcxNVVHRnlkR2xqYkdWVGVYTjBaVzB1Y21WelpYUlRlWE4wWlcwb0tUdGNiaUFnSUNBZ0tpOWNiaUFnSUNCeVpYTmxkRk41YzNSbGJUb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6ZEc5d2NHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTnBiWFZzWVhSdmNpNXlaWE5sZENncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFkzUnBkbUYwWlUxaGRHVnlhV0ZzS0NrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVjJobGRHaGxjaUJ2Y2lCdWIzUWdkR2hsSUhONWMzUmxiU0JwY3lCbWRXeHNMbHh1SUNBZ0lDQXFJQ0VqZW1nZzVZK1I1YkNFNVptbzVMaXQ1N0tTNWEyUTVwaXY1WkNtNWFTbjVMcU81NjJKNUxxTzZLNis1NzJ1NTVxRTVvQzc1N0tTNWEyUTVwV3c2WWVQNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCcGMwWjFiR3hjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRDYjI5c1pXRnVmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHbHpSblZzYkRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSFJvYVhNdWNHRnlkR2xqYkdWRGIzVnVkQ0ErUFNCMGFHbHpMblJ2ZEdGc1VHRnlkR2xqYkdWektUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVFpYUnpJR0VnYm1WM0lIUmxlSFIxY21VZ2QybDBhQ0JoSUhKbFkzUXVJRlJvWlNCeVpXTjBJR2x6SUdsdUlIUmxlSFIxY21VZ2NHOXphWFJwYjI0Z1lXNWtJSE5wZW1VdVhHNGdJQ0FnSUNvZ1VHeGxZWE5sSUhWelpTQnpjSEpwZEdWR2NtRnRaU0J3Y205d1pYSjBlU0JwYm5OMFpXRmtMQ0IwYUdseklHWjFibU4wYVc5dUlHbHpJR1JsY0hKbFkyRjBaV1FnYzJsdVkyVWdkakV1T1Z4dUlDQWdJQ0FxSUNFamVtZ2c2SzYrNTcydTVMaUE1YnlnNXBhdzZMUzA1WnUrNVpLTTVZV3o2SUdVNTVxRTU1K3A1YjJpNDRDQ1hHNGdJQ0FnSUNvZzZLKzM1NXUwNW82bDZLNis1NzJ1SUhOd2NtbDBaVVp5WVcxbElPV3hudWFBcCsrOGpPaS9tZVM0cXVXSHZlYVZzT1M3amlCMk1TNDVJT2VKaU9hY3JPVzhnT1duaStXM3N1ZTdqK2lpcStXNm4rVzhnMXh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdjMlYwVkdWNGRIVnlaVmRwZEdoU1pXTjBYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFVaWGgwZFhKbE1rUjlJSFJsZUhSMWNtVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZM1I5SUhKbFkzUmNiaUFnSUNBZ0tpQkFaR1Z3Y21WallYUmxaQ0J6YVc1alpTQjJNUzQ1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwVkdWNGRIVnlaVmRwZEdoU1pXTjBPaUJtZFc1amRHbHZiaUFvZEdWNGRIVnlaU3dnY21WamRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHVjRkSFZ5WlNCcGJuTjBZVzVqWlc5bUlHTmpMbFJsZUhSMWNtVXlSQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emNISnBkR1ZHY21GdFpTQTlJRzVsZHlCall5NVRjSEpwZEdWR2NtRnRaU2gwWlhoMGRYSmxMQ0J5WldOMEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZMeUJRVWtsV1FWUkZJRTFGVkVoUFJGTmNibHh1SUNBZ0lGOWhjSEJzZVVacGJHVTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR1pwYkdVZ1BTQjBhR2x6TGw5bWFXeGxPMXh1SUNBZ0lDQWdJQ0JwWmlBb1ptbHNaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhObGJHWWdQU0IwYUdsek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJNdWJHOWhaR1Z5TG14dllXUW9abWxzWlM1dVlYUnBkbVZWY213c0lHWjFibU4wYVc5dUlDaGxjbklzSUdOdmJuUmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aWEp5SUh4OElDRmpiMjUwWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOakxtVnljbTl5U1VRb05qQXlPU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z6Wld4bUxtbHpWbUZzYVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJHWXVYM0JzYVhOMFJtbHNaU0E5SUdacGJHVXVibUYwYVhabFZYSnNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGMyVnNaaTVmWTNWemRHOXRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxiR1l1WDJsdWFYUlhhWFJvUkdsamRHbHZibUZ5ZVNoamIyNTBaVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhObGJHWXVYM053Y21sMFpVWnlZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWFXeGxMbk53Y21sMFpVWnlZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeG1Mbk53Y21sMFpVWnlZVzFsSUQwZ1ptbHNaUzV6Y0hKcGRHVkdjbUZ0WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoelpXeG1MbDlqZFhOMGIyMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgybHVhWFJVWlhoMGRYSmxWMmwwYUVScFkzUnBiMjVoY25rb1kyOXVkR1Z1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvSVhObGJHWXVYM0psYm1SbGNsTndjbWwwWlVaeVlXMWxJQ1ltSUhObGJHWXVYM053Y21sMFpVWnlZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgyRndjR3g1VTNCeWFYUmxSbkpoYldVb2MyVnNaaTV6Y0hKcGRHVkdjbUZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gybHVhWFJVWlhoMGRYSmxWMmwwYUVScFkzUnBiMjVoY25rNklHWjFibU4wYVc5dUlDaGthV04wS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JwYldkUVlYUm9JRDBnWTJNdWNHRjBhQzVqYUdGdVoyVkNZWE5sYm1GdFpTaDBhR2x6TGw5d2JHbHpkRVpwYkdVc0lHUnBZM1JiWENKMFpYaDBkWEpsUm1sc1pVNWhiV1ZjSWwwZ2ZId2dKeWNwTzF4dUlDQWdJQ0FnSUNBdkx5QjBaWGgwZFhKbFhHNGdJQ0FnSUNBZ0lHbG1JQ2hrYVdOMFcxd2lkR1Y0ZEhWeVpVWnBiR1ZPWVcxbFhDSmRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJVY25rZ2RHOGdaMlYwSUhSb1pTQjBaWGgwZFhKbElHWnliMjBnZEdobElHTmhZMmhsWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBaWGgwZFhKbFZYUnBiQzVzYjJGa1NXMWhaMlVvYVcxblVHRjBhQ3dnWm5WdVkzUnBiMjRnS0dWeWNtOXlMQ0IwWlhoMGRYSmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwWTNSYlhDSjBaWGgwZFhKbFJtbHNaVTVoYldWY0lsMGdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJsdWFYUlVaWGgwZFhKbFYybDBhRVJwWTNScGIyNWhjbmtvWkdsamRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTndjbWwwWlVaeVlXMWxJRDBnYm1WM0lHTmpMbE53Y21sMFpVWnlZVzFsS0hSbGVIUjFjbVVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSUhSb2FYTXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dScFkzUmJYQ0owWlhoMGRYSmxTVzFoWjJWRVlYUmhYQ0pkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RHVjRkSFZ5WlVSaGRHRWdQU0JrYVdOMFcxd2lkR1Y0ZEhWeVpVbHRZV2RsUkdGMFlWd2lYVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSbGVIUjFjbVZFWVhSaElDWW1JSFJsZUhSMWNtVkVZWFJoTG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZEdWNElEMGdZMk11Ykc5aFpHVnlMbWRsZEZKbGN5aHBiV2RRWVhSb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhSbGVDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZblZtWm1WeUlEMGdZMjlrWldNdWRXNTZhWEJDWVhObE5qUkJjMEZ5Y21GNUtIUmxlSFIxY21WRVlYUmhMQ0F4S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGaWRXWm1aWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOakxteHZaMGxFS0RZd016QXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2x0WVdkbFJtOXliV0YwSUQwZ1oyVjBTVzFoWjJWR2IzSnRZWFJDZVVSaGRHRW9ZblZtWm1WeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHRZV2RsUm05eWJXRjBJQ0U5UFNCdFlXTnlieTVKYldGblpVWnZjbTFoZEM1VVNVWkdJQ1ltSUdsdFlXZGxSbTl5YldGMElDRTlQU0J0WVdOeWJ5NUpiV0ZuWlVadmNtMWhkQzVRVGtjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbXh2WjBsRUtEWXdNekVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdOaGJuWmhjMDlpYWlBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvWENKallXNTJZWE5jSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtS0dsdFlXZGxSbTl5YldGMElEMDlQU0J0WVdOeWJ5NUpiV0ZuWlVadmNtMWhkQzVRVGtjcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzE1VUc1blQySnFJRDBnYm1WM0lGQk9SMUpsWVdSbGNpaGlkV1ptWlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JYbFFibWRQWW1vdWNtVnVaR1Z5S0dOaGJuWmhjMDlpYWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhV1ptVW1WaFpHVnlMbkJoY25ObFZFbEdSaWhpZFdabVpYSXNZMkZ1ZG1GelQySnFLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWlhnZ1BTQjBaWGgwZFhKbFZYUnBiQzVqWVdOb1pVbHRZV2RsS0dsdFoxQmhkR2dzSUdOaGJuWmhjMDlpYWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doZEdWNEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWXk1c2IyZEpSQ2cyTURNeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJVVDBSUE9pQlZjMlVnWTJNdWJHOWhaR1Z5SUhSdklHeHZZV1FnWVhONWJtTm9jbTl1YjNWemJIa2dkR2hsSUZOd2NtbDBaVVp5WVcxbElHOWlhbVZqZEN3Z1lYWnZhV1FnZFhOcGJtY2dkR1Y0ZEhWeVpWVjBhV3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTndjbWwwWlVaeVlXMWxJRDBnYm1WM0lHTmpMbE53Y21sMFpVWnlZVzFsS0hSbGVDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4dklIQmhjbk5wYm1jZ2NISnZZMlZ6YzF4dUlDQWdJRjlwYm1sMFYybDBhRVJwWTNScGIyNWhjbms2SUdaMWJtTjBhVzl1SUNoa2FXTjBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzkwWVd4UVlYSjBhV05zWlhNZ1BTQndZWEp6WlVsdWRDaGthV04wVzF3aWJXRjRVR0Z5ZEdsamJHVnpYQ0pkSUh4OElEQXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHeHBabVVnYzNCaGJseHVJQ0FnSUNBZ0lDQjBhR2x6TG14cFptVWdQU0J3WVhKelpVWnNiMkYwS0dScFkzUmJYQ0p3WVhKMGFXTnNaVXhwWm1WemNHRnVYQ0pkSUh4OElEQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxteHBabVZXWVhJZ1BTQndZWEp6WlVac2IyRjBLR1JwWTNSYlhDSndZWEowYVdOc1pVeHBabVZ6Y0dGdVZtRnlhV0Z1WTJWY0lsMGdmSHdnTUNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnWlcxcGMzTnBiMjRnVW1GMFpWeHVJQ0FnSUNBZ0lDQnNaWFFnWDNSbGJYQkZiV2x6YzJsdmJsSmhkR1VnUFNCa2FXTjBXMXdpWlcxcGMzTnBiMjVTWVhSbFhDSmRPMXh1SUNBZ0lDQWdJQ0JwWmlBb1gzUmxiWEJGYldsemMybHZibEpoZEdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaVzFwYzNOcGIyNVNZWFJsSUQwZ1gzUmxiWEJGYldsemMybHZibEpoZEdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnRhWE56YVc5dVVtRjBaU0E5SUUxaGRHZ3ViV2x1S0hSb2FYTXVkRzkwWVd4UVlYSjBhV05zWlhNZ0x5QjBhR2x6TG14cFptVXNJRTUxYldKbGNpNU5RVmhmVmtGTVZVVXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdaSFZ5WVhScGIyNWNiaUFnSUNBZ0lDQWdkR2hwY3k1a2RYSmhkR2x2YmlBOUlIQmhjbk5sUm14dllYUW9aR2xqZEZ0Y0ltUjFjbUYwYVc5dVhDSmRJSHg4SURBcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUdKc1pXNWtJR1oxYm1OMGFXOXVYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzSmpRbXhsYm1SR1lXTjBiM0lnUFNCd1lYSnpaVWx1ZENoa2FXTjBXMXdpWW14bGJtUkdkVzVqVTI5MWNtTmxYQ0pkSUh4OElHMWhZM0p2TGxOU1ExOUJURkJJUVNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkhOMFFteGxibVJHWVdOMGIzSWdQU0J3WVhKelpVbHVkQ2hrYVdOMFcxd2lZbXhsYm1SR2RXNWpSR1Z6ZEdsdVlYUnBiMjVjSWwwZ2ZId2diV0ZqY204dVQwNUZYMDFKVGxWVFgxTlNRMTlCVEZCSVFTazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1kyOXNiM0pjYmlBZ0lDQWdJQ0FnYkdWMElHeHZZMU4wWVhKMFEyOXNiM0lnUFNCMGFHbHpMbDl6ZEdGeWRFTnZiRzl5TzF4dUlDQWdJQ0FnSUNCc2IyTlRkR0Z5ZEVOdmJHOXlMbklnUFNCd1lYSnpaVVpzYjJGMEtHUnBZM1JiWENKemRHRnlkRU52Ykc5eVVtVmtYQ0pkSUh4OElEQXBJQ29nTWpVMU8xeHVJQ0FnSUNBZ0lDQnNiMk5UZEdGeWRFTnZiRzl5TG1jZ1BTQndZWEp6WlVac2IyRjBLR1JwWTNSYlhDSnpkR0Z5ZEVOdmJHOXlSM0psWlc1Y0lsMGdmSHdnTUNrZ0tpQXlOVFU3WEc0Z0lDQWdJQ0FnSUd4dlkxTjBZWEowUTI5c2IzSXVZaUE5SUhCaGNuTmxSbXh2WVhRb1pHbGpkRnRjSW5OMFlYSjBRMjlzYjNKQ2JIVmxYQ0pkSUh4OElEQXBJQ29nTWpVMU8xeHVJQ0FnSUNBZ0lDQnNiMk5UZEdGeWRFTnZiRzl5TG1FZ1BTQndZWEp6WlVac2IyRjBLR1JwWTNSYlhDSnpkR0Z5ZEVOdmJHOXlRV3h3YUdGY0lsMGdmSHdnTUNrZ0tpQXlOVFU3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJR3h2WTFOMFlYSjBRMjlzYjNKV1lYSWdQU0IwYUdsekxsOXpkR0Z5ZEVOdmJHOXlWbUZ5TzF4dUlDQWdJQ0FnSUNCc2IyTlRkR0Z5ZEVOdmJHOXlWbUZ5TG5JZ1BTQndZWEp6WlVac2IyRjBLR1JwWTNSYlhDSnpkR0Z5ZEVOdmJHOXlWbUZ5YVdGdVkyVlNaV1JjSWwwZ2ZId2dNQ2tnS2lBeU5UVTdYRzRnSUNBZ0lDQWdJR3h2WTFOMFlYSjBRMjlzYjNKV1lYSXVaeUE5SUhCaGNuTmxSbXh2WVhRb1pHbGpkRnRjSW5OMFlYSjBRMjlzYjNKV1lYSnBZVzVqWlVkeVpXVnVYQ0pkSUh4OElEQXBJQ29nTWpVMU8xeHVJQ0FnSUNBZ0lDQnNiMk5UZEdGeWRFTnZiRzl5Vm1GeUxtSWdQU0J3WVhKelpVWnNiMkYwS0dScFkzUmJYQ0p6ZEdGeWRFTnZiRzl5Vm1GeWFXRnVZMlZDYkhWbFhDSmRJSHg4SURBcElDb2dNalUxTzF4dUlDQWdJQ0FnSUNCc2IyTlRkR0Z5ZEVOdmJHOXlWbUZ5TG1FZ1BTQndZWEp6WlVac2IyRjBLR1JwWTNSYlhDSnpkR0Z5ZEVOdmJHOXlWbUZ5YVdGdVkyVkJiSEJvWVZ3aVhTQjhmQ0F3S1NBcUlESTFOVHRjYmx4dUlDQWdJQ0FnSUNCc1pYUWdiRzlqUlc1a1EyOXNiM0lnUFNCMGFHbHpMbDlsYm1SRGIyeHZjanRjYmlBZ0lDQWdJQ0FnYkc5alJXNWtRMjlzYjNJdWNpQTlJSEJoY25ObFJteHZZWFFvWkdsamRGdGNJbVpwYm1semFFTnZiRzl5VW1Wa1hDSmRJSHg4SURBcElDb2dNalUxTzF4dUlDQWdJQ0FnSUNCc2IyTkZibVJEYjJ4dmNpNW5JRDBnY0dGeWMyVkdiRzloZENoa2FXTjBXMXdpWm1sdWFYTm9RMjlzYjNKSGNtVmxibHdpWFNCOGZDQXdLU0FxSURJMU5UdGNiaUFnSUNBZ0lDQWdiRzlqUlc1a1EyOXNiM0l1WWlBOUlIQmhjbk5sUm14dllYUW9aR2xqZEZ0Y0ltWnBibWx6YUVOdmJHOXlRbXgxWlZ3aVhTQjhmQ0F3S1NBcUlESTFOVHRjYmlBZ0lDQWdJQ0FnYkc5alJXNWtRMjlzYjNJdVlTQTlJSEJoY25ObFJteHZZWFFvWkdsamRGdGNJbVpwYm1semFFTnZiRzl5UVd4d2FHRmNJbDBnZkh3Z01Da2dLaUF5TlRVN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUd4dlkwVnVaRU52Ykc5eVZtRnlJRDBnZEdocGN5NWZaVzVrUTI5c2IzSldZWEk3WEc0Z0lDQWdJQ0FnSUd4dlkwVnVaRU52Ykc5eVZtRnlMbklnUFNCd1lYSnpaVVpzYjJGMEtHUnBZM1JiWENKbWFXNXBjMmhEYjJ4dmNsWmhjbWxoYm1ObFVtVmtYQ0pkSUh4OElEQXBJQ29nTWpVMU8xeHVJQ0FnSUNBZ0lDQnNiMk5GYm1SRGIyeHZjbFpoY2k1bklEMGdjR0Z5YzJWR2JHOWhkQ2hrYVdOMFcxd2labWx1YVhOb1EyOXNiM0pXWVhKcFlXNWpaVWR5WldWdVhDSmRJSHg4SURBcElDb2dNalUxTzF4dUlDQWdJQ0FnSUNCc2IyTkZibVJEYjJ4dmNsWmhjaTVpSUQwZ2NHRnljMlZHYkc5aGRDaGthV04wVzF3aVptbHVhWE5vUTI5c2IzSldZWEpwWVc1alpVSnNkV1ZjSWwwZ2ZId2dNQ2tnS2lBeU5UVTdYRzRnSUNBZ0lDQWdJR3h2WTBWdVpFTnZiRzl5Vm1GeUxtRWdQU0J3WVhKelpVWnNiMkYwS0dScFkzUmJYQ0ptYVc1cGMyaERiMnh2Y2xaaGNtbGhibU5sUVd4d2FHRmNJbDBnZkh3Z01Da2dLaUF5TlRVN1hHNWNiaUFnSUNBZ0lDQWdMeThnY0dGeWRHbGpiR1VnYzJsNlpWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYSjBVMmw2WlNBOUlIQmhjbk5sUm14dllYUW9aR2xqZEZ0Y0luTjBZWEowVUdGeWRHbGpiR1ZUYVhwbFhDSmRJSHg4SURBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYSjBVMmw2WlZaaGNpQTlJSEJoY25ObFJteHZZWFFvWkdsamRGdGNJbk4wWVhKMFVHRnlkR2xqYkdWVGFYcGxWbUZ5YVdGdVkyVmNJbDBnZkh3Z01DazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXNWtVMmw2WlNBOUlIQmhjbk5sUm14dllYUW9aR2xqZEZ0Y0ltWnBibWx6YUZCaGNuUnBZMnhsVTJsNlpWd2lYU0I4ZkNBd0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJtUlRhWHBsVm1GeUlEMGdjR0Z5YzJWR2JHOWhkQ2hrYVdOMFcxd2labWx1YVhOb1VHRnlkR2xqYkdWVGFYcGxWbUZ5YVdGdVkyVmNJbDBnZkh3Z01DazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2NHOXphWFJwYjI1Y2JpQWdJQ0FnSUNBZ0x5OGdUV0ZyWlNCbGJYQjBlU0J3YjNOcGRHbHZibFI1Y0dVZ2RtRnNkV1VnWVc1a0lHOXNaQ0IyWlhKemFXOXVJR052YlhCaGRHbGliR1ZjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiM05wZEdsdmJsUjVjR1VnUFNCd1lYSnpaVVpzYjJGMEtHUnBZM1JiSjNCdmMybDBhVzl1Vkhsd1pTZGRJSHg4SUZCdmMybDBhVzl1Vkhsd1pTNVNSVXhCVkVsV1JTazdYRzRnSUNBZ0lDQWdJQzh2SUdadmNpQmNiaUFnSUNBZ0lDQWdkR2hwY3k1emIzVnlZMlZRYjNNdWVDQTlJREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMjkxY21ObFVHOXpMbmtnUFNBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CdmMxWmhjaTU0SUQwZ2NHRnljMlZHYkc5aGRDaGthV04wVzF3aWMyOTFjbU5sVUc5emFYUnBiMjVXWVhKcFlXNWpaWGhjSWwwZ2ZId2dNQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjRzl6Vm1GeUxua2dQU0J3WVhKelpVWnNiMkYwS0dScFkzUmJYQ0p6YjNWeVkyVlFiM05wZEdsdmJsWmhjbWxoYm1ObGVWd2lYU0I4ZkNBd0tUdGNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQzh2SUdGdVoyeGxYRzRnSUNBZ0lDQWdJSFJvYVhNdVlXNW5iR1VnUFNCd1lYSnpaVVpzYjJGMEtHUnBZM1JiWENKaGJtZHNaVndpWFNCOGZDQXdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWhibWRzWlZaaGNpQTlJSEJoY25ObFJteHZZWFFvWkdsamRGdGNJbUZ1WjJ4bFZtRnlhV0Z1WTJWY0lsMGdmSHdnTUNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnVTNCcGJtNXBibWRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkR0Z5ZEZOd2FXNGdQU0J3WVhKelpVWnNiMkYwS0dScFkzUmJYQ0p5YjNSaGRHbHZibE4wWVhKMFhDSmRJSHg4SURBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYSjBVM0JwYmxaaGNpQTlJSEJoY25ObFJteHZZWFFvWkdsamRGdGNJbkp2ZEdGMGFXOXVVM1JoY25SV1lYSnBZVzVqWlZ3aVhTQjhmQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYm1SVGNHbHVJRDBnY0dGeWMyVkdiRzloZENoa2FXTjBXMXdpY205MFlYUnBiMjVGYm1SY0lsMGdmSHdnTUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wlc1a1UzQnBibFpoY2lBOUlIQmhjbk5sUm14dllYUW9aR2xqZEZ0Y0luSnZkR0YwYVc5dVJXNWtWbUZ5YVdGdVkyVmNJbDBnZkh3Z01DazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwZEdWeVRXOWtaU0E5SUhCaGNuTmxTVzUwS0dScFkzUmJYQ0psYldsMGRHVnlWSGx3WlZ3aVhTQjhmQ0JGYldsMGRHVnlUVzlrWlM1SFVrRldTVlJaS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJOYjJSbElFRTZJRWR5WVhacGRIa2dLeUIwWVc1blpXNTBhV0ZzSUdGalkyVnNJQ3NnY21Ga2FXRnNJR0ZqWTJWc1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtVnRhWFIwWlhKTmIyUmxJRDA5UFNCRmJXbDBkR1Z5VFc5a1pTNUhVa0ZXU1ZSWktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5Qm5jbUYyYVhSNVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZHlZWFpwZEhrdWVDQTlJSEJoY25ObFJteHZZWFFvWkdsamRGdGNJbWR5WVhacGRIbDRYQ0pkSUh4OElEQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuY21GMmFYUjVMbmtnUFNCd1lYSnpaVVpzYjJGMEtHUnBZM1JiWENKbmNtRjJhWFI1ZVZ3aVhTQjhmQ0F3S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MzQmxaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNCbFpXUWdQU0J3WVhKelpVWnNiMkYwS0dScFkzUmJYQ0p6Y0dWbFpGd2lYU0I4ZkNBd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM0JsWldSV1lYSWdQU0J3WVhKelpVWnNiMkYwS0dScFkzUmJYQ0p6Y0dWbFpGWmhjbWxoYm1ObFhDSmRJSHg4SURBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnlZV1JwWVd3Z1lXTmpaV3hsY21GMGFXOXVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpoWkdsaGJFRmpZMlZzSUQwZ2NHRnljMlZHYkc5aGRDaGthV04wVzF3aWNtRmthV0ZzUVdOalpXeGxjbUYwYVc5dVhDSmRJSHg4SURBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlZV1JwWVd4QlkyTmxiRlpoY2lBOUlIQmhjbk5sUm14dllYUW9aR2xqZEZ0Y0luSmhaR2xoYkVGalkyVnNWbUZ5YVdGdVkyVmNJbDBnZkh3Z01DazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJoYm1kbGJuUnBZV3dnWVdOalpXeGxjbUYwYVc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUmhibWRsYm5ScFlXeEJZMk5sYkNBOUlIQmhjbk5sUm14dllYUW9aR2xqZEZ0Y0luUmhibWRsYm5ScFlXeEJZMk5sYkdWeVlYUnBiMjVjSWwwZ2ZId2dNQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SaGJtZGxiblJwWVd4QlkyTmxiRlpoY2lBOUlIQmhjbk5sUm14dllYUW9aR2xqZEZ0Y0luUmhibWRsYm5ScFlXeEJZMk5sYkZaaGNtbGhibU5sWENKZElIeDhJREFwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCeWIzUmhkR2x2YmlCcGN5QmthWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JzYjJOU2IzUmhkR2x2YmtselJHbHlJRDBnWkdsamRGdGNJbkp2ZEdGMGFXOXVTWE5FYVhKY0lsMGdmSHdnWENKY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHNiMk5TYjNSaGRHbHZia2x6UkdseUlDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiRzlqVW05MFlYUnBiMjVKYzBScGNpQTlJR3h2WTFKdmRHRjBhVzl1U1hORWFYSXVkRzlUZEhKcGJtY29LUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205MFlYUnBiMjVKYzBScGNpQTlJQ2hzYjJOU2IzUmhkR2x2YmtselJHbHlJRDA5UFNCY0luUnlkV1ZjSWlCOGZDQnNiMk5TYjNSaGRHbHZia2x6UkdseUlEMDlQU0JjSWpGY0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KdmRHRjBhVzl1U1hORWFYSWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG1WdGFYUjBaWEpOYjJSbElEMDlQU0JGYldsMGRHVnlUVzlrWlM1U1FVUkpWVk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUc5eUlFMXZaR1VnUWpvZ2NtRmthWFZ6SUcxdmRtVnRaVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlYSjBVbUZrYVhWeklEMGdjR0Z5YzJWR2JHOWhkQ2hrYVdOMFcxd2liV0Y0VW1Ga2FYVnpYQ0pkSUh4OElEQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGeWRGSmhaR2wxYzFaaGNpQTlJSEJoY25ObFJteHZZWFFvWkdsamRGdGNJbTFoZUZKaFpHbDFjMVpoY21saGJtTmxYQ0pkSUh4OElEQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYm1SU1lXUnBkWE1nUFNCd1lYSnpaVVpzYjJGMEtHUnBZM1JiWENKdGFXNVNZV1JwZFhOY0lsMGdmSHdnTUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnVaRkpoWkdsMWMxWmhjaUE5SUhCaGNuTmxSbXh2WVhRb1pHbGpkRnRjSW0xcGJsSmhaR2wxYzFaaGNtbGhibU5sWENKZElIeDhJREFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eWIzUmhkR1ZRWlhKVElEMGdjR0Z5YzJWR2JHOWhkQ2hrYVdOMFcxd2ljbTkwWVhSbFVHVnlVMlZqYjI1a1hDSmRJSHg4SURBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXliM1JoZEdWUVpYSlRWbUZ5SUQwZ2NHRnljMlZHYkc5aGRDaGthV04wVzF3aWNtOTBZWFJsVUdWeVUyVmpiMjVrVm1GeWFXRnVZMlZjSWwwZ2ZId2dNQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZeTUzWVhKdVNVUW9OakF3T1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXBibWwwVkdWNGRIVnlaVmRwZEdoRWFXTjBhVzl1WVhKNUtHUnBZM1FwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gyOXVWR1Y0ZEhWeVpVeHZZV1JsWkRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTBaWGgwZFhKbElEMGdkR2hwY3k1ZmNtVnVaR1Z5VTNCeWFYUmxSbkpoYldVdVoyVjBWR1Y0ZEhWeVpTZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXphVzExYkdGMGIzSXVkWEJrWVhSbFZWWnpLSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQXZMeUJTWldGamRHbDJZWFJsSUcxaGRHVnlhV0ZzWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZqZEdsMllYUmxUV0YwWlhKcFlXd29LVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMkZ3Y0d4NVUzQnlhWFJsUm5KaGJXVTZJR1oxYm1OMGFXOXVJQ2h2YkdSR2NtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9iMnhrUm5KaGJXVWdKaVlnYjJ4a1JuSmhiV1V1YjJabUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJHUkdjbUZ0WlM1dlptWW9KMnh2WVdRbkxDQjBhR2x6TGw5dmJsUmxlSFIxY21WTWIyRmtaV1FzSUhSb2FYTXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJSE53Y21sMFpVWnlZVzFsSUQwZ2RHaHBjeTVmY21WdVpHVnlVM0J5YVhSbFJuSmhiV1VnUFNCMGFHbHpMbDl5Wlc1a1pYSlRjSEpwZEdWR2NtRnRaU0I4ZkNCMGFHbHpMbDl6Y0hKcGRHVkdjbUZ0WlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSE53Y21sMFpVWnlZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MzQnlhWFJsUm5KaGJXVXVkR1Y0ZEhWeVpVeHZZV1JsWkNncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmIyNVVaWGgwZFhKbFRHOWhaR1ZrS0c1MWJHd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0J5YVhSbFJuSmhiV1V1YjI1alpTZ25iRzloWkNjc0lIUm9hWE11WDI5dVZHVjRkSFZ5WlV4dllXUmxaQ3dnZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM0J5YVhSbFJuSmhiV1V1Wlc1emRYSmxURzloWkZSbGVIUjFjbVVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmWVdOMGFYWmhkR1ZOWVhSbGNtbGhiRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYM1JsZUhSMWNtVWdmSHdnSVhSb2FYTXVYM1JsZUhSMWNtVXViRzloWkdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTFoY210R2IzSkRkWE4wYjIxSlFWSmxibVJsY2lobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZjbVZ1WkdWeVUzQnlhWFJsUm5KaGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWhjSEJzZVZOd2NtbDBaVVp5WVcxbEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOXBZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdVR0Z5ZEdsamJHVlRlWE4wWlcwdVgyRnpjMlZ0WW14bGNpNWpjbVZoZEdWSlFTaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR3hsZENCdFlYUmxjbWxoYkNBOUlIUm9hWE11YzJoaGNtVmtUV0YwWlhKcFlXeHpXekJkTzF4dUlDQWdJQ0FnSUNCcFppQW9JVzFoZEdWeWFXRnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRZWFJsY21saGJDQTlJRTFoZEdWeWFXRnNMbWRsZEVsdWMzUmhiblJwWVhSbFpFSjFhV3gwYVc1TllYUmxjbWxoYkNnbk1tUXRjM0J5YVhSbEp5d2dkR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WVhSbGNtbGhiQ0E5SUUxaGRHVnlhV0ZzTG1kbGRFbHVjM1JoYm5ScFlYUmxaRTFoZEdWeWFXRnNLRzFoZEdWeWFXRnNMQ0IwYUdsektUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklFbHVJR05oYzJVZ2RHaGxJSEJzYVhOMElHeHZjM1FnY0c5emFYUnBiMjVVZVhCbFhHNGdJQ0FnSUNBZ0lHMWhkR1Z5YVdGc0xtUmxabWx1WlNnblgxVlRSVjlOVDBSRlRDY3NJSFJvYVhNdVgzQnZjMmwwYVc5dVZIbHdaU0FoUFQwZ1VHOXphWFJwYjI1VWVYQmxMa1pTUlVVcE8xeHVJQ0FnSUNBZ0lDQnRZWFJsY21saGJDNXpaWFJRY205d1pYSjBlU2duZEdWNGRIVnlaU2NzSUhSb2FYTXVYM1JsZUhSMWNtVXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVFdGMFpYSnBZV3dvTUN3Z2JXRjBaWEpwWVd3cE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xaGNtdEdiM0pEZFhOMGIyMUpRVkpsYm1SbGNpaDBjblZsS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJRnh1SUNBZ0lGOW1hVzVwYzJobFpGTnBiWFZzWVhScGIyNDZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRU5EWDBWRVNWUlBVaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjSEpsZG1sbGR5QW1KaUIwYUdsekxsOW1iMk4xYzJWa0lDWW1JQ0YwYUdsekxtRmpkR2wyWlNBbUppQWhZMk11Wlc1bmFXNWxMbWx6VUd4aGVXbHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ6WlhSVGVYTjBaVzBvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbGMyVjBVM2x6ZEdWdEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnZjRk41YzNSbGJTZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUnBjMkZpYkdWU1pXNWtaWElvS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVlYVjBiMUpsYlc5MlpVOXVSbWx1YVhOb0lDWW1JSFJvYVhNdVgzTjBiM0J3WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVibTlrWlM1a1pYTjBjbTk1S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlLVHRjYmx4dVkyTXVVR0Z5ZEdsamJHVlRlWE4wWlcwZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGQmhjblJwWTJ4bFUzbHpkR1Z0TzF4dVhHNGlYWDA9Il19