(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/particle/particle-simulator.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var AffineTrans = require('../core/utils/affine-transform');
        var js = require('../core/platform/js');
        var misc = require('../core/utils/misc');
        var ZERO_VEC2 = cc.v2(0, 0);
        var _trans = AffineTrans.create();
        var _pos = cc.v2();
        var _tpa = cc.v2();
        var _tpb = cc.v2();
        var _tpc = cc.v2();
        var Particle = function Particle() {
            this.pos = cc.v2(0, 0);
            this.startPos = cc.v2(0, 0);
            this.color = cc.color(0, 0, 0, 255);
            this.deltaColor = {
                r: 0,
                g: 0,
                b: 0,
                a: 255
            };
            this.size = 0;
            this.deltaSize = 0;
            this.rotation = 0;
            this.deltaRotation = 0;
            this.timeToLive = 0;
            this.drawPos = cc.v2(0, 0);
            this.dir = cc.v2(0, 0);
            this.radialAccel = 0;
            this.tangentialAccel = 0;
            this.angle = 0;
            this.degreesPerSecond = 0;
            this.radius = 0;
            this.deltaRadius = 0;
        };
        var pool = new js.Pool(function (par) {
            par.pos.set(ZERO_VEC2);
            par.startPos.set(ZERO_VEC2);
            par.color._val = 4278190080;
            par.deltaColor.r = par.deltaColor.g = par.deltaColor.b = 0;
            par.deltaColor.a = 255;
            par.size = 0;
            par.deltaSize = 0;
            par.rotation = 0;
            par.deltaRotation = 0;
            par.timeToLive = 0;
            par.drawPos.set(ZERO_VEC2);
            par.dir.set(ZERO_VEC2);
            par.radialAccel = 0;
            par.tangentialAccel = 0;
            par.angle = 0;
            par.degreesPerSecond = 0;
            par.radius = 0;
            par.deltaRadius = 0;
        }, 1024);
        pool.get = function () {
            return this._get() || new Particle();
        };
        var Simulator = function Simulator(system) {
            this.sys = system;
            this.particles = [];
            this.active = false;
            this.finished = false;
            this.elapsed = 0;
            this.emitCounter = 0;
            this._uvFilled = 0;
        };
        Simulator.prototype.stop = function () {
            this.active = false;
            this.elapsed = this.sys.duration;
            this.emitCounter = 0;
        };
        Simulator.prototype.reset = function () {
            this.active = true;
            this.elapsed = 0;
            this.emitCounter = 0;
            this.finished = false;
            var particles = this.particles;
            for (var id = 0; id < particles.length; ++id) {
                pool.put(particles[id]);
            }
            particles.length = 0;
        };
        Simulator.prototype.emitParticle = function (pos) {
            var psys = this.sys;
            var clampf = misc.clampf;
            var particle = pool.get();
            this.particles.push(particle);
            particle.timeToLive = psys.life + psys.lifeVar * (Math.random() - 0.5) * 2;
            var timeToLive = particle.timeToLive = Math.max(0, particle.timeToLive);
            particle.pos.x = psys.sourcePos.x + psys.posVar.x * (Math.random() - 0.5) * 2;
            particle.pos.y = psys.sourcePos.y + psys.posVar.y * (Math.random() - 0.5) * 2;
            var sr = void 0, sg = void 0, sb = void 0, sa = void 0;
            var startColor = psys._startColor, startColorVar = psys._startColorVar;
            var endColor = psys._endColor, endColorVar = psys._endColorVar;
            particle.color.r = sr = clampf(startColor.r + startColorVar.r * (Math.random() - 0.5) * 2, 0, 255);
            particle.color.g = sg = clampf(startColor.g + startColorVar.g * (Math.random() - 0.5) * 2, 0, 255);
            particle.color.b = sb = clampf(startColor.b + startColorVar.b * (Math.random() - 0.5) * 2, 0, 255);
            particle.color.a = sa = clampf(startColor.a + startColorVar.a * (Math.random() - 0.5) * 2, 0, 255);
            particle.deltaColor.r = (clampf(endColor.r + endColorVar.r * (Math.random() - 0.5) * 2, 0, 255) - sr) / timeToLive;
            particle.deltaColor.g = (clampf(endColor.g + endColorVar.g * (Math.random() - 0.5) * 2, 0, 255) - sg) / timeToLive;
            particle.deltaColor.b = (clampf(endColor.b + endColorVar.b * (Math.random() - 0.5) * 2, 0, 255) - sb) / timeToLive;
            particle.deltaColor.a = (clampf(endColor.a + endColorVar.a * (Math.random() - 0.5) * 2, 0, 255) - sa) / timeToLive;
            var startS = psys.startSize + psys.startSizeVar * (Math.random() - 0.5) * 2;
            startS = Math.max(0, startS);
            particle.size = startS;
            if (psys.endSize === cc.ParticleSystem.START_SIZE_EQUAL_TO_END_SIZE) {
                particle.deltaSize = 0;
            } else {
                var endS = psys.endSize + psys.endSizeVar * (Math.random() - 0.5) * 2;
                endS = Math.max(0, endS);
                particle.deltaSize = (endS - startS) / timeToLive;
            }
            var startA = psys.startSpin + psys.startSpinVar * (Math.random() - 0.5) * 2;
            var endA = psys.endSpin + psys.endSpinVar * (Math.random() - 0.5) * 2;
            particle.rotation = startA;
            particle.deltaRotation = (endA - startA) / timeToLive;
            particle.startPos.x = pos.x;
            particle.startPos.y = pos.y;
            var worldRotation = getWorldRotation(psys.node);
            var relAngle = psys.positionType === cc.ParticleSystem.PositionType.FREE ? psys.angle + worldRotation : psys.angle;
            var a = misc.degreesToRadians(relAngle + psys.angleVar * (Math.random() - 0.5) * 2);
            if (psys.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
                var s = psys.speed + psys.speedVar * (Math.random() - 0.5) * 2;
                particle.dir.x = Math.cos(a);
                particle.dir.y = Math.sin(a);
                particle.dir.mulSelf(s);
                particle.radialAccel = psys.radialAccel + psys.radialAccelVar * (Math.random() - 0.5) * 2;
                particle.tangentialAccel = psys.tangentialAccel + psys.tangentialAccelVar * (Math.random() - 0.5) * 2;
                if (psys.rotationIsDir) {
                    particle.rotation = -misc.radiansToDegrees(Math.atan2(particle.dir.y, particle.dir.x));
                }
            } else {
                var startRadius = psys.startRadius + psys.startRadiusVar * (Math.random() - 0.5) * 2;
                var endRadius = psys.endRadius + psys.endRadiusVar * (Math.random() - 0.5) * 2;
                particle.radius = startRadius;
                particle.deltaRadius = psys.endRadius === cc.ParticleSystem.START_RADIUS_EQUAL_TO_END_RADIUS ? 0 : (endRadius - startRadius) / timeToLive;
                particle.angle = a;
                particle.degreesPerSecond = misc.degreesToRadians(psys.rotatePerS + psys.rotatePerSVar * (Math.random() - 0.5) * 2);
            }
        };
        function getWorldRotation(node) {
            var rotation = 0;
            var tempNode = node;
            while (tempNode) {
                rotation += tempNode.angle;
                tempNode = tempNode.parent;
            }
            return rotation;
        }
        Simulator.prototype.updateUVs = function (force) {
            var particleCount = this.particles.length;
            if (this.sys._buffer && this.sys._renderSpriteFrame) {
                var FLOAT_PER_PARTICLE = 4 * this.sys._vertexFormat._bytes / 4;
                var vbuf = this.sys._buffer._vData;
                var uv = this.sys._renderSpriteFrame.uv;
                var start = force ? 0 : this._uvFilled;
                for (var i = start; i < particleCount; i++) {
                    var offset = i * FLOAT_PER_PARTICLE;
                    vbuf[offset + 2] = uv[0];
                    vbuf[offset + 3] = uv[1];
                    vbuf[offset + 7] = uv[2];
                    vbuf[offset + 8] = uv[3];
                    vbuf[offset + 12] = uv[4];
                    vbuf[offset + 13] = uv[5];
                    vbuf[offset + 17] = uv[6];
                    vbuf[offset + 18] = uv[7];
                }
                this._uvFilled = particleCount;
            }
        };
        Simulator.prototype.updateParticleBuffer = function (particle, pos, buffer, offset) {
            var vbuf = buffer._vData;
            var uintbuf = buffer._uintVData;
            var x = pos.x, y = pos.y;
            var size_2 = particle.size / 2;
            if (particle.rotation) {
                var x1 = -size_2, y1 = -size_2;
                var x2 = size_2, y2 = size_2;
                var rad = -misc.degreesToRadians(particle.rotation);
                var cr = Math.cos(rad), sr = Math.sin(rad);
                vbuf[offset] = x1 * cr - y1 * sr + x;
                vbuf[offset + 1] = x1 * sr + y1 * cr + y;
                vbuf[offset + 5] = x2 * cr - y1 * sr + x;
                vbuf[offset + 6] = x2 * sr + y1 * cr + y;
                vbuf[offset + 10] = x1 * cr - y2 * sr + x;
                vbuf[offset + 11] = x1 * sr + y2 * cr + y;
                vbuf[offset + 15] = x2 * cr - y2 * sr + x;
                vbuf[offset + 16] = x2 * sr + y2 * cr + y;
            } else {
                vbuf[offset] = x - size_2;
                vbuf[offset + 1] = y - size_2;
                vbuf[offset + 5] = x + size_2;
                vbuf[offset + 6] = y - size_2;
                vbuf[offset + 10] = x - size_2;
                vbuf[offset + 11] = y + size_2;
                vbuf[offset + 15] = x + size_2;
                vbuf[offset + 16] = y + size_2;
            }
            uintbuf[offset + 4] = particle.color._val;
            uintbuf[offset + 9] = particle.color._val;
            uintbuf[offset + 14] = particle.color._val;
            uintbuf[offset + 19] = particle.color._val;
        };
        Simulator.prototype.step = function (dt) {
            var psys = this.sys;
            var node = psys.node;
            var particles = this.particles;
            var FLOAT_PER_PARTICLE = 4 * psys._vertexFormat._bytes / 4;
            node._updateWorldMatrix();
            _trans = AffineTrans.identity();
            if (psys.positionType === cc.ParticleSystem.PositionType.FREE) {
                _trans.tx = node._worldMatrix.m12;
                _trans.ty = node._worldMatrix.m13;
                AffineTrans.transformVec2(_pos, ZERO_VEC2, _trans);
            } else if (psys.positionType === cc.ParticleSystem.PositionType.RELATIVE) {
                var angle = misc.degreesToRadians(-node.angle);
                var cos = Math.cos(angle);
                var sin = Math.sin(angle);
                _trans = AffineTrans.create(cos, -sin, sin, cos, 0, 0);
                _pos.x = node._position.x;
                _pos.y = node._position.y;
            }
            AffineTrans.invert(_trans, _trans);
            var worldToNodeTrans = _trans;
            if (this.active && psys.emissionRate) {
                var rate = 1 / psys.emissionRate;
                if (particles.length < psys.totalParticles)
                    this.emitCounter += dt;
                while (particles.length < psys.totalParticles && this.emitCounter > rate) {
                    this.emitParticle(_pos);
                    this.emitCounter -= rate;
                }
                this.elapsed += dt;
                if (psys.duration !== -1 && psys.duration < this.elapsed) {
                    psys.stopSystem();
                }
            }
            var buffer = psys._buffer;
            var particleCount = particles.length;
            buffer.reset();
            buffer.request(particleCount * 4, particleCount * 6);
            if (particleCount > this._uvFilled) {
                this.updateUVs();
            }
            var particleIdx = 0;
            while (particleIdx < particles.length) {
                _tpa.x = _tpa.y = _tpb.x = _tpb.y = _tpc.x = _tpc.y = 0;
                var particle = particles[particleIdx];
                particle.timeToLive -= dt;
                if (particle.timeToLive > 0) {
                    if (psys.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
                        var tmp = _tpc, radial = _tpa, tangential = _tpb;
                        if (particle.pos.x || particle.pos.y) {
                            radial.set(particle.pos);
                            radial.normalizeSelf();
                        }
                        tangential.set(radial);
                        radial.mulSelf(particle.radialAccel);
                        var newy = tangential.x;
                        tangential.x = -tangential.y;
                        tangential.y = newy;
                        tangential.mulSelf(particle.tangentialAccel);
                        tmp.set(radial);
                        tmp.addSelf(tangential);
                        tmp.addSelf(psys.gravity);
                        tmp.mulSelf(dt);
                        particle.dir.addSelf(tmp);
                        tmp.set(particle.dir);
                        tmp.mulSelf(dt);
                        particle.pos.addSelf(tmp);
                    } else {
                        particle.angle += particle.degreesPerSecond * dt;
                        particle.radius += particle.deltaRadius * dt;
                        particle.pos.x = -Math.cos(particle.angle) * particle.radius;
                        particle.pos.y = -Math.sin(particle.angle) * particle.radius;
                    }
                    particle.color.r += particle.deltaColor.r * dt;
                    particle.color.g += particle.deltaColor.g * dt;
                    particle.color.b += particle.deltaColor.b * dt;
                    particle.color.a += particle.deltaColor.a * dt;
                    particle.size += particle.deltaSize * dt;
                    if (particle.size < 0) {
                        particle.size = 0;
                    }
                    particle.rotation += particle.deltaRotation * dt;
                    var newPos = _tpa;
                    var diff = _tpb;
                    if (psys.positionType === cc.ParticleSystem.PositionType.FREE) {
                        diff.set(particle.startPos);
                        diff.negSelf();
                        newPos.set(particle.pos);
                        newPos.subSelf(diff);
                    } else if (psys.positionType === cc.ParticleSystem.PositionType.RELATIVE) {
                        var startPos = _tpc;
                        AffineTrans.transformVec2(diff, _pos, worldToNodeTrans);
                        AffineTrans.transformVec2(startPos, particle.startPos, worldToNodeTrans);
                        diff.subSelf(startPos);
                        newPos.set(particle.pos);
                        newPos.subSelf(diff);
                    } else {
                        newPos.set(particle.pos);
                    }
                    var offset = FLOAT_PER_PARTICLE * particleIdx;
                    this.updateParticleBuffer(particle, newPos, buffer, offset);
                    ++particleIdx;
                } else {
                    var deadParticle = particles[particleIdx];
                    if (particleIdx !== particles.length - 1) {
                        particles[particleIdx] = particles[particles.length - 1];
                    }
                    pool.put(deadParticle);
                    particles.length--;
                }
            }
            if (particles.length > 0) {
                buffer.uploadData();
                psys._ia._count = particles.length * 6;
            } else if (!this.active) {
                this.finished = true;
                psys._finishedSimulation();
            }
        };
        module.exports = Simulator;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,