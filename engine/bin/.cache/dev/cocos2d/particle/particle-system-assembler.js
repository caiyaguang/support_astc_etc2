(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/particle/particle-system-assembler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _iaRenderData = require('../renderer/render-data/ia-render-data');
        var _iaRenderData2 = _interopRequireDefault(_iaRenderData);
        var _inputAssembler = require('../renderer/core/input-assembler');
        var _inputAssembler2 = _interopRequireDefault(_inputAssembler);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var ParticleSystem = require('./CCParticleSystem');
        var renderer = require('../core/renderer/');
        var vfmtPosUvColor = require('../core/renderer/webgl/vertex-format').vfmtPosUvColor;
        var QuadBuffer = require('../core/renderer/webgl/quad-buffer');
        var particleSystemAssembler = {
            createIA: function createIA(comp) {
                var device = renderer.device;
                comp._vertexFormat = vfmtPosUvColor;
                comp._buffer = new QuadBuffer(renderer._handle, vfmtPosUvColor);
                comp._ia = new _inputAssembler2.default();
                comp._ia._vertexBuffer = comp._buffer._vb;
                comp._ia._indexBuffer = comp._buffer._ib;
                comp._ia._start = 0;
                comp._ia._count = 0;
            },
            updateRenderData: function updateRenderData(comp) {
                if (!comp._renderData) {
                    comp._renderData = new _iaRenderData2.default();
                }
                comp._renderData.ia = comp._ia;
                comp._renderData.material = comp.sharedMaterials[0];
            },
            renderIA: function renderIA(comp, renderer) {
                renderer._flushIA(comp._renderData);
            }
        };
        ParticleSystem._assembler = particleSystemAssembler;
        module.exports = particleSystemAssembler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,