(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/audio/CCAudio.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var EventTarget = require('../core/event/event-target');
        var sys = require('../core/platform/CCSys');
        var LoadMode = require('../core/assets/CCAudioClip').LoadMode;
        var touchBinded = false;
        var touchPlayList = [];
        var Audio = function Audio(src) {
            EventTarget.call(this);
            this._src = src;
            this._element = null;
            this.id = 0;
            this._volume = 1;
            this._loop = false;
            this._nextTime = 0;
            this._state = Audio.State.INITIALZING;
            this._onended = function () {
                this._state = Audio.State.STOPPED;
                this.emit('ended');
            }.bind(this);
        };
        cc.js.extend(Audio, EventTarget);
        Audio.State = {
            ERROR: -1,
            INITIALZING: 0,
            PLAYING: 1,
            PAUSED: 2,
            STOPPED: 3
        };
        (function (proto) {
            proto._bindEnded = function (callback) {
                callback = callback || this._onended;
                var elem = this._element;
                if (this._src && elem instanceof HTMLAudioElement) {
                    elem.addEventListener('ended', callback);
                } else {
                    elem.onended = callback;
                }
            };
            proto._unbindEnded = function () {
                var elem = this._element;
                if (elem instanceof HTMLAudioElement) {
                    elem.removeEventListener('ended', this._onended);
                } else if (elem) {
                    elem.onended = null;
                }
            };
            proto._onLoaded = function () {
                var elem = this._src._nativeAsset;
                if (elem instanceof HTMLAudioElement) {
                    if (!this._element) {
                        this._element = document.createElement('audio');
                    }
                    this._element.src = elem.src;
                } else {
                    this._element = new WebAudioElement(elem, this);
                }
                this.setVolume(this._volume);
                this.setLoop(this._loop);
                if (this._nextTime !== 0) {
                    this.setCurrentTime(this._nextTime);
                }
                if (this.getState() === Audio.State.PLAYING) {
                    this.play();
                } else {
                    this._state = Audio.State.INITIALZING;
                }
            };
            proto.play = function () {
                this._state = Audio.State.PLAYING;
                if (!this._element) {
                    return;
                }
                this._bindEnded();
                this._element.play();
                if (!CC_QQPLAY && !CC_WECHATGAME) {
                    if (this._src && this._src.loadMode === LoadMode.DOM_AUDIO && this._element.paused) {
                        touchPlayList.push({
                            instance: this,
                            offset: 0,
                            audio: this._element
                        });
                    }
                    if (touchBinded)
                        return;
                    touchBinded = true;
                    var touchEventName = 'ontouchend' in window ? 'touchend' : 'mousedown';
                    cc.game.canvas.addEventListener(touchEventName, function () {
                        var item = void 0;
                        while (item = touchPlayList.pop()) {
                            item.audio.play(item.offset);
                        }
                    });
                }
            };
            proto.destroy = function () {
                if (CC_WECHATGAME || CC_QQPLAY) {
                    this._element && this._element.destroy();
                }
                this._element = null;
            };
            proto.pause = function () {
                if (!this._element || this.getState() !== Audio.State.PLAYING)
                    return;
                this._unbindEnded();
                this._element.pause();
                this._state = Audio.State.PAUSED;
            };
            proto.resume = function () {
                if (!this._element || this.getState() !== Audio.State.PAUSED)
                    return;
                this._bindEnded();
                this._element.play();
                this._state = Audio.State.PLAYING;
            };
            proto.stop = function () {
                if (!this._element)
                    return;
                this._element.pause();
                try {
                    this._element.currentTime = 0;
                } catch (error) {
                }
                for (var i = 0; i < touchPlayList.length; i++) {
                    if (touchPlayList[i].instance === this) {
                        touchPlayList.splice(i, 1);
                        break;
                    }
                }
                this._unbindEnded();
                this.emit('stop');
                this._state = Audio.State.STOPPED;
            };
            proto.setLoop = function (loop) {
                this._loop = loop;
                if (this._element) {
                    this._element.loop = loop;
                }
            };
            proto.getLoop = function () {
                return this._loop;
            };
            proto.setVolume = function (num) {
                this._volume = num;
                if (this._element) {
                    this._element.volume = num;
                }
            };
            proto.getVolume = function () {
                return this._volume;
            };
            proto.setCurrentTime = function (num) {
                if (this._element) {
                    this._nextTime = 0;
                } else {
                    this._nextTime = num;
                    return;
                }
                if (!(CC_QQPLAY || CC_WECHATGAME)) {
                    this._unbindEnded();
                    this._bindEnded(function () {
                        this._bindEnded();
                    }.bind(this));
                }
                try {
                    this._element.currentTime = num;
                } catch (err) {
                    var _element = this._element;
                    if (_element.addEventListener) {
                        var func = function func() {
                            _element.removeEventListener('loadedmetadata', func);
                            _element.currentTime = num;
                        };
                        _element.addEventListener('loadedmetadata', func);
                    }
                }
            };
            proto.getCurrentTime = function () {
                return this._element ? this._element.currentTime : 0;
            };
            proto.getDuration = function () {
                return this._element ? this._element.duration : 0;
            };
            proto.getState = function () {
                var elem = this._element;
                if (!CC_WECHATGAME && !CC_QQPLAY && elem) {
                    if (Audio.State.PLAYING === this._state && elem.paused) {
                        this._state = Audio.State.STOPPED;
                    } else if (Audio.State.STOPPED === this._state && !elem.paused) {
                        this._state = Audio.State.PLAYING;
                    }
                }
                return this._state;
            };
            Object.defineProperty(proto, 'src', {
                get: function get() {
                    return this._src;
                },
                set: function set(clip) {
                    this._unbindEnded();
                    if (clip) {
                        this._src = clip;
                        if (clip.loaded) {
                            this._onLoaded();
                        } else {
                            var self = this;
                            clip.once('load', function () {
                                if (clip === self._src) {
                                    self._onLoaded();
                                }
                            });
                            cc.loader.load({
                                url: clip.nativeUrl,
                                skips: ['Loader']
                            }, function (err, audioNativeAsset) {
                                if (err) {
                                    cc.error(err);
                                    return;
                                }
                                if (!clip.loaded) {
                                    clip._nativeAsset = audioNativeAsset;
                                }
                            });
                        }
                    } else {
                        this._src = null;
                        if (this._element instanceof HTMLAudioElement) {
                            this._element.src = '';
                        } else {
                            this._element = null;
                        }
                        this._state = Audio.State.INITIALZING;
                    }
                    return clip;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(proto, 'paused', {
                get: function get() {
                    return this._element ? this._element.paused : true;
                },
                enumerable: true,
                configurable: true
            });
        }(Audio.prototype));
        var TIME_CONSTANT = void 0;
        if (cc.sys.browserType === cc.sys.BROWSER_TYPE_EDGE || cc.sys.browserType === cc.sys.BROWSER_TYPE_BAIDU || cc.sys.browserType === cc.sys.BROWSER_TYPE_UC) {
            TIME_CONSTANT = 0.01;
        } else {
            TIME_CONSTANT = 0;
        }
        var WebAudioElement = function WebAudioElement(buffer, audio) {
            this._audio = audio;
            this._context = sys.__audioSupport.context;
            this._buffer = buffer;
            this._gainObj = this._context['createGain']();
            this.volume = 1;
            this._gainObj['connect'](this._context['destination']);
            this._loop = false;
            this._startTime = -1;
            this._currentSource = null;
            this.playedLength = 0;
            this._currentTimer = null;
            this._endCallback = function () {
                if (this.onended) {
                    this.onended(this);
                }
            }.bind(this);
        };
        (function (proto) {
            proto.play = function (offset) {
                if (this._currentSource && !this.paused) {
                    this._currentSource.onended = null;
                    this._currentSource.stop(0);
                    this.playedLength = 0;
                }
                var audio = this._context['createBufferSource']();
                audio.buffer = this._buffer;
                audio['connect'](this._gainObj);
                audio.loop = this._loop;
                this._startTime = this._context.currentTime;
                offset = offset || this.playedLength;
                if (offset) {
                    this._startTime -= offset;
                }
                var duration = this._buffer.duration;
                var startTime = offset;
                var endTime = void 0;
                if (this._loop) {
                    if (audio.start)
                        audio.start(0, startTime);
                    else if (audio['notoGrainOn'])
                        audio['noteGrainOn'](0, startTime);
                    else
                        audio['noteOn'](0, startTime);
                } else {
                    endTime = duration - offset;
                    if (audio.start)
                        audio.start(0, startTime, endTime);
                    else if (audio['noteGrainOn'])
                        audio['noteGrainOn'](0, startTime, endTime);
                    else
                        audio['noteOn'](0, startTime, endTime);
                }
                this._currentSource = audio;
                audio.onended = this._endCallback;
                if ((!audio.context.state || audio.context.state === 'suspended') && this._context.currentTime === 0) {
                    var self = this;
                    clearTimeout(this._currentTimer);
                    this._currentTimer = setTimeout(function () {
                        if (!(CC_QQPLAY || CC_WECHATGAME) && self._context.currentTime === 0) {
                            touchPlayList.push({
                                instance: self._audio,
                                offset: offset,
                                audio: self
                            });
                        }
                    }, 10);
                }
            };
            proto.pause = function () {
                clearTimeout(this._currentTimer);
                if (this.paused)
                    return;
                this.playedLength = this._context.currentTime - this._startTime;
                this.playedLength %= this._buffer.duration;
                var audio = this._currentSource;
                this._currentSource = null;
                this._startTime = -1;
                if (audio)
                    audio.stop(0);
            };
            Object.defineProperty(proto, 'paused', {
                get: function get() {
                    if (this._currentSource && this._currentSource.loop)
                        return false;
                    if (this._startTime === -1)
                        return true;
                    return this._context.currentTime - this._startTime > this._buffer.duration;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(proto, 'loop', {
                get: function get() {
                    return this._loop;
                },
                set: function set(bool) {
                    if (this._currentSource)
                        this._currentSource.loop = bool;
                    return this._loop = bool;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(proto, 'volume', {
                get: function get() {
                    return this._volume;
                },
                set: function set(num) {
                    this._volume = num;
                    if (this._gainObj.gain.setTargetAtTime) {
                        try {
                            this._gainObj.gain.setTargetAtTime(num, this._context.currentTime, TIME_CONSTANT);
                        } catch (e) {
                            this._gainObj.gain.setTargetAtTime(num, this._context.currentTime, 0.01);
                        }
                    } else {
                        this._gainObj.gain.value = num;
                    }
                    if (sys.os === sys.OS_IOS && !this.paused && this._currentSource) {
                        this._currentSource.onended = null;
                        this.pause();
                        this.play();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(proto, 'currentTime', {
                get: function get() {
                    if (this.paused) {
                        return this.playedLength;
                    }
                    this.playedLength = this._context.currentTime - this._startTime;
                    this.playedLength %= this._buffer.duration;
                    return this.playedLength;
                },
                set: function set(num) {
                    if (!this.paused) {
                        this.pause();
                        this.playedLength = num;
                        this.play();
                    } else {
                        this.playedLength = num;
                    }
                    return num;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(proto, 'duration', {
                get: function get() {
                    return this._buffer.duration;
                },
                enumerable: true,
                configurable: true
            });
        }(WebAudioElement.prototype));
        module.exports = cc.Audio = Audio;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,