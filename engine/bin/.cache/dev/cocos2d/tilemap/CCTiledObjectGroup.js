(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/CCTiledObjectGroup.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var TiledObjectGroup = cc.Class({
            name: 'cc.TiledObjectGroup',
            extends: cc.Component,
            getPositionOffset: function getPositionOffset() {
                return this._positionOffset;
            },
            getProperties: function getProperties() {
                this._properties;
            },
            getGroupName: function getGroupName() {
                return this._groupName;
            },
            getProperty: function getProperty(propertyName) {
                return this._properties[propertyName.toString()];
            },
            getObject: function getObject(objectName) {
                for (var i = 0, len = this._objects.length; i < len; i++) {
                    var obj = this._objects[i];
                    if (obj && obj.name === objectName) {
                        return obj;
                    }
                }
                return null;
            },
            getObjects: function getObjects() {
                return this._objects;
            },
            _init: function _init(groupInfo, mapInfo) {
                this._groupName = groupInfo.name;
                this._positionOffset = groupInfo.offset;
                this._mapInfo = mapInfo;
                this._properties = groupInfo.getProperties();
                var mapSize = mapInfo._mapSize;
                var tileSize = mapInfo._tileSize;
                var width = 0, height = 0;
                if (mapInfo.orientation === cc.TiledMap.Orientation.HEX) {
                    if (mapInfo.getStaggerAxis() === cc.TiledMap.StaggerAxis.STAGGERAXIS_X) {
                        height = tileSize.height * (mapSize.height + 0.5);
                        width = (tileSize.width + mapInfo.getHexSideLength()) * Math.floor(mapSize.width / 2) + tileSize.width * (mapSize.width % 2);
                    } else {
                        width = tileSize.width * (mapSize.width + 0.5);
                        height = (tileSize.height + mapInfo.getHexSideLength()) * Math.floor(mapSize.height / 2) + tileSize.height * (mapSize.height % 2);
                    }
                } else {
                    width = mapSize.width * tileSize.width;
                    height = mapSize.height * tileSize.height;
                }
                this.node.setContentSize(width, height);
                var objects = groupInfo._objects;
                for (var i = 0, l = objects.length; i < l; i++) {
                    var object = objects[i];
                    object.offset = cc.v2(object.x, object.y);
                    var points = object.points || object.polylinePoints;
                    if (points) {
                        for (var pi = 0; pi < points.length; pi++) {
                            points[pi].y *= -1;
                        }
                    }
                    if (cc.TiledMap.Orientation.ISO !== mapInfo.orientation) {
                        object.y = height - object.y;
                    } else {
                        var posIdxX = object.x / tileSize.width * 2;
                        var posIdxY = object.y / tileSize.height;
                        object.x = tileSize.width / 2 * (mapSize.width + posIdxX - posIdxY);
                        object.y = tileSize.height / 2 * (mapSize.height * 2 - posIdxX - posIdxY);
                    }
                }
                this._objects = objects;
            }
        });
        cc.TiledObjectGroup = module.exports = TiledObjectGroup;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,