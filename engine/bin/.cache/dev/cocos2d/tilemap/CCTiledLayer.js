(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/CCTiledLayer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var RenderComponent = require('../core/components/CCRenderComponent');
        var Material = require('../core/assets/material/CCMaterial');
        var TiledLayer = cc.Class({
            name: 'cc.TiledLayer',
            extends: RenderComponent,
            editor: { inspector: 'packages://inspector/inspectors/comps/tiled-layer.js' },
            ctor: function ctor() {
                this._tiles = [];
                this._texGrids = [];
                this._textures = [];
                this._spriteTiles = {};
                this._tiledTiles = [];
                this._layerName = '';
                this._layerOrientation = null;
            },
            getLayerName: function getLayerName() {
                return this._layerName;
            },
            setLayerName: function setLayerName(layerName) {
                this._layerName = layerName;
            },
            getProperty: function getProperty(propertyName) {
                return this._properties[propertyName];
            },
            getPositionAt: function getPositionAt(pos, y) {
                var x = void 0;
                if (y !== undefined) {
                    x = Math.floor(pos);
                    y = Math.floor(y);
                } else {
                    x = Math.floor(pos.x);
                    y = Math.floor(pos.y);
                }
                var ret = void 0;
                switch (this._layerOrientation) {
                case cc.TiledMap.Orientation.ORTHO:
                    ret = this._positionForOrthoAt(x, y);
                    break;
                case cc.TiledMap.Orientation.ISO:
                    ret = this._positionForIsoAt(x, y);
                    break;
                case cc.TiledMap.Orientation.HEX:
                    ret = this._positionForHexAt(x, y);
                    break;
                }
                return ret;
            },
            _isInvalidPosition: function _isInvalidPosition(x, y) {
                if (x && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {
                    var pos = x;
                    y = pos.y;
                    x = pos.x;
                }
                return x >= this._layerSize.width || y >= this._layerSize.height || x < 0 || y < 0;
            },
            _positionForIsoAt: function _positionForIsoAt(x, y) {
                return cc.v2(this._mapTileSize.width / 2 * (this._layerSize.width + x - y - 1), this._mapTileSize.height / 2 * (this._layerSize.height * 2 - x - y - 2));
            },
            _positionForOrthoAt: function _positionForOrthoAt(x, y) {
                return cc.v2(x * this._mapTileSize.width, (this._layerSize.height - y - 1) * this._mapTileSize.height);
            },
            _positionForHexAt: function _positionForHexAt(row, col) {
                var tileWidth = this._mapTileSize.width;
                var tileHeight = this._mapTileSize.height;
                var cols = this._layerSize.height;
                var offset = this._tileset.tileOffset;
                var centerWidth = this.node.width / 2;
                var centerHeight = this.node.height / 2;
                var odd_even = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? 1 : -1;
                var x = 0, y = 0;
                switch (this._staggerAxis) {
                case cc.TiledMap.StaggerAxis.STAGGERAXIS_Y:
                    var diffX = 0;
                    var diffX1 = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? 0 : tileWidth / 2;
                    if (col % 2 === 1) {
                        diffX = tileWidth / 2 * odd_even;
                    }
                    x = row * tileWidth + diffX + diffX1 + offset.x - centerWidth;
                    y = (cols - col - 1) * (tileHeight - (tileHeight - this._hexSideLength) / 2) - offset.y - centerHeight;
                    break;
                case cc.TiledMap.StaggerAxis.STAGGERAXIS_X:
                    var diffY = 0;
                    var diffY1 = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? tileHeight / 2 : 0;
                    if (row % 2 === 1) {
                        diffY = tileHeight / 2 * -odd_even;
                    }
                    x = row * (tileWidth - (tileWidth - this._hexSideLength) / 2) + offset.x - centerWidth;
                    y = (cols - col - 1) * tileHeight + diffY + diffY1 - offset.y - centerHeight;
                    break;
                }
                return cc.v2(x, y);
            },
            setTileGIDAt: function setTileGIDAt(gid, posOrX, flagsOrY, flags) {
                if (posOrX === undefined) {
                    throw new Error('cc.TiledLayer.setTileGIDAt(): pos should be non-null');
                }
                var pos = void 0;
                if (flags !== undefined || !(posOrX instanceof cc.Vec2)) {
                    pos = cc.v2(posOrX, flagsOrY);
                } else {
                    pos = posOrX;
                    flags = flagsOrY;
                }
                pos.x = Math.floor(pos.x);
                pos.y = Math.floor(pos.y);
                if (this._isInvalidPosition(pos)) {
                    throw new Error('cc.TiledLayer.setTileGIDAt(): invalid position');
                }
                if (!this._tiles) {
                    cc.logID(7238);
                    return;
                }
                if (gid !== 0 && gid < this._tileset.firstGid) {
                    cc.logID(7239, gid);
                    return;
                }
                flags = flags || 0;
                var currentFlags = this.getTileFlagsAt(pos);
                var currentGID = this.getTileGIDAt(pos);
                if (currentGID === gid && currentFlags === flags)
                    return;
                var gidAndFlags = (gid | flags) >>> 0;
                this._updateTileForGID(gidAndFlags, pos);
            },
            _updateTileForGID: function _updateTileForGID(gid, pos) {
                if (gid !== 0 && !this._texGrids[gid]) {
                    return;
                }
                var idx = 0 | pos.x + pos.y * this._layerSize.width;
                if (idx < this._tiles.length) {
                    this._tiles[idx] = gid;
                }
            },
            getTileGIDAt: function getTileGIDAt(pos, y) {
                if (pos === undefined) {
                    throw new Error('cc.TiledLayer.getTileGIDAt(): pos should be non-null');
                }
                var x = pos;
                if (y === undefined) {
                    x = pos.x;
                    y = pos.y;
                }
                if (this._isInvalidPosition(x, y)) {
                    throw new Error('cc.TiledLayer.getTileGIDAt(): invalid position');
                }
                if (!this._tiles) {
                    cc.logID(7237);
                    return null;
                }
                var index = Math.floor(x) + Math.floor(y) * this._layerSize.width;
                var tile = this._tiles[index];
                return (tile & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
            },
            getTileFlagsAt: function getTileFlagsAt(pos, y) {
                if (!pos) {
                    throw new Error('TiledLayer.getTileFlagsAt: pos should be non-null');
                }
                if (y !== undefined) {
                    pos = cc.v2(pos, y);
                }
                if (this._isInvalidPosition(pos)) {
                    throw new Error('TiledLayer.getTileFlagsAt: invalid position');
                }
                if (!this._tiles) {
                    cc.logID(7240);
                    return null;
                }
                var idx = Math.floor(pos.x) + Math.floor(pos.y) * this._layerSize.width;
                var tile = this._tiles[idx];
                return (tile & cc.TiledMap.TileFlag.FLIPPED_ALL) >>> 0;
            },
            getTiledTileAt: function getTiledTileAt(x, y, forceCreate) {
                if (this._isInvalidPosition(x, y)) {
                    throw new Error('TiledLayer.getTiledTileAt: invalid position');
                }
                if (!this._tiles) {
                    cc.logID(7236);
                    return null;
                }
                var index = Math.floor(x) + Math.floor(y) * this._layerSize.width;
                var tile = this._tiledTiles[index];
                if (!tile && forceCreate) {
                    var node = new cc.Node();
                    tile = node.addComponent(cc.TiledTile);
                    tile._x = x;
                    tile._y = y;
                    tile._layer = this;
                    tile._updateInfo();
                    node.parent = this.node;
                    return tile;
                }
                return tile;
            },
            setTiledTileAt: function setTiledTileAt(x, y, tiledTile) {
                if (this._isInvalidPosition(x, y)) {
                    throw new Error('TiledLayer.setTiledTileAt: invalid position');
                }
                if (!this._tiles) {
                    cc.logID(7236);
                    return null;
                }
                var index = Math.floor(x) + Math.floor(y) * this._layerSize.width;
                return this._tiledTiles[index] = tiledTile;
            },
            getTexture: function getTexture() {
                return this._texture;
            },
            setTexture: function setTexture(texture) {
                this._texture = texture;
                this._activateMaterial();
            },
            getLayerSize: function getLayerSize() {
                return this._layerSize;
            },
            getMapTileSize: function getMapTileSize() {
                return this._mapTileSize;
            },
            getTileSet: function getTileSet() {
                return this._tileset;
            },
            setTileSet: function setTileSet(tileset) {
                this._tileset = tileset;
            },
            getLayerOrientation: function getLayerOrientation() {
                return this._layerOrientation;
            },
            getProperties: function getProperties() {
                return this._properties;
            },
            _init: function _init(tileset, layerInfo, mapInfo) {
                var size = layerInfo._layerSize;
                this._layerName = layerInfo.name;
                this._tiles = layerInfo._tiles;
                this._properties = layerInfo.properties;
                this._layerSize = size;
                this._minGID = layerInfo._minGID;
                this._maxGID = layerInfo._maxGID;
                this._opacity = layerInfo._opacity;
                this._staggerAxis = mapInfo.getStaggerAxis();
                this._staggerIndex = mapInfo.getStaggerIndex();
                this._hexSideLength = mapInfo.getHexSideLength();
                this._tileset = tileset;
                this._layerOrientation = mapInfo.orientation;
                this._mapTileSize = mapInfo.getTileSize();
                var tilesets = mapInfo._tilesets;
                if (tilesets) {
                    this._textures.length = tilesets.length;
                    this._texGrids.length = 0;
                    for (var i = 0, l = tilesets.length; i < l; ++i) {
                        var tilesetInfo = tilesets[i];
                        var tex = tilesetInfo.sourceImage;
                        this._textures[i] = tex;
                        this._fillTextureGrids(tilesetInfo, i);
                        if (tileset === tilesetInfo) {
                            this._texture = tex;
                        }
                    }
                }
                this._offset = this._calculateLayerOffset(layerInfo.offset);
                if (this._layerOrientation === cc.TiledMap.Orientation.HEX) {
                    var width = 0, height = 0;
                    if (this._staggerAxis === cc.TiledMap.StaggerAxis.STAGGERAXIS_X) {
                        height = mapInfo._tileSize.height * (this._layerSize.height + 0.5);
                        width = (mapInfo._tileSize.width + this._hexSideLength) * Math.floor(this._layerSize.width / 2) + mapInfo._tileSize.width * (this._layerSize.width % 2);
                    } else {
                        width = mapInfo._tileSize.width * (this._layerSize.width + 0.5);
                        height = (mapInfo._tileSize.height + this._hexSideLength) * Math.floor(this._layerSize.height / 2) + mapInfo._tileSize.height * (this._layerSize.height % 2);
                    }
                    this.node.setContentSize(width, height);
                } else {
                    this.node.setContentSize(this._layerSize.width * this._mapTileSize.width, this._layerSize.height * this._mapTileSize.height);
                }
                this._useAutomaticVertexZ = false;
                this._vertexZvalue = 0;
                this._activateMaterial();
            },
            _calculateLayerOffset: function _calculateLayerOffset(pos) {
                var ret = cc.v2(0, 0);
                switch (this._layerOrientation) {
                case cc.TiledMap.Orientation.ORTHO:
                    ret = cc.v2(pos.x * this._mapTileSize.width, -pos.y * this._mapTileSize.height);
                    break;
                case cc.TiledMap.Orientation.ISO:
                    ret = cc.v2(this._mapTileSize.width / 2 * (pos.x - pos.y), this._mapTileSize.height / 2 * (-pos.x - pos.y));
                    break;
                case cc.TiledMap.Orientation.HEX:
                    if (this._staggerAxis === cc.TiledMap.StaggerAxis.STAGGERAXIS_Y) {
                        var diffX = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_EVEN ? this._mapTileSize.width / 2 : 0;
                        ret = cc.v2(pos.x * this._mapTileSize.width + diffX, -pos.y * (this._mapTileSize.height - (this._mapTileSize.width - this._hexSideLength) / 2));
                    } else if (this._staggerAxis === cc.TiledMap.StaggerAxis.STAGGERAXIS_X) {
                        var diffY = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? this._mapTileSize.height / 2 : 0;
                        ret = cc.v2(pos.x * (this._mapTileSize.width - (this._mapTileSize.width - this._hexSideLength) / 2), -pos.y * this._mapTileSize.height + diffY);
                    }
                    break;
                }
                return ret;
            },
            _fillTextureGrids: function _fillTextureGrids(tileset, texId) {
                var tex = this._textures[texId];
                if (!tex) {
                    return;
                }
                if (!tex.loaded) {
                    tex.once('load', function () {
                        this._fillTextureGrids(tileset, texId);
                    }, this);
                    return;
                }
                if (!tileset.imageSize.width || !tileset.imageSize.height) {
                    tileset.imageSize.width = tex.width;
                    tileset.imageSize.height = tex.height;
                }
                var tw = tileset._tileSize.width, th = tileset._tileSize.height, imageW = tex.width, imageH = tex.height, spacing = tileset.spacing, margin = tileset.margin, cols = Math.floor((imageW - margin * 2 + spacing) / (tw + spacing)), rows = Math.floor((imageH - margin * 2 + spacing) / (th + spacing)), count = rows * cols, gid = tileset.firstGid, maxGid = tileset.firstGid + count, grids = this._texGrids, grid = null, override = grids[gid] ? true : false, texelCorrect = cc.macro.FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX ? 0.5 : 0;
                for (; gid < maxGid; ++gid) {
                    if (override && !grids[gid]) {
                        override = false;
                    }
                    if (!override && grids[gid]) {
                        break;
                    }
                    grid = {
                        texId: texId,
                        x: 0,
                        y: 0,
                        width: tw,
                        height: th,
                        t: 0,
                        l: 0,
                        r: 0,
                        b: 0
                    };
                    tileset.rectForGID(gid, grid);
                    grid.x += texelCorrect;
                    grid.y += texelCorrect;
                    grid.width -= texelCorrect * 2;
                    grid.height -= texelCorrect * 2;
                    grid.t = grid.y / imageH;
                    grid.l = grid.x / imageW;
                    grid.r = (grid.x + grid.width) / imageW;
                    grid.b = (grid.y + grid.height) / imageH;
                    grids[gid] = grid;
                }
            },
            onEnable: function onEnable() {
                this._super();
                this._activateMaterial();
            },
            _activateMaterial: function _activateMaterial() {
                if (!this._texture) {
                    this.disableRender();
                    return;
                }
                var material = this.sharedMaterials[0];
                if (!material) {
                    material = Material.getInstantiatedBuiltinMaterial('2d-sprite', this);
                } else {
                    material = Material.getInstantiatedMaterial(material, this);
                }
                material.setProperty('texture', this._texture);
                this.setMaterial(0, material);
                this.markForRender(true);
            }
        });
        cc.TiledLayer = module.exports = TiledLayer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,