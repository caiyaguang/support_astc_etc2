(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/CCTiledMap.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('./CCTMXXMLParser');
        require('./CCTiledMapAsset');
        require('./CCTiledLayer');
        require('./CCTiledTile');
        require('./CCTiledObjectGroup');
        var Orientation = cc.Enum({
            ORTHO: 0,
            HEX: 1,
            ISO: 2
        });
        var Property = cc.Enum({
            NONE: 0,
            MAP: 1,
            LAYER: 2,
            OBJECTGROUP: 3,
            OBJECT: 4,
            TILE: 5
        });
        var TileFlag = cc.Enum({
            HORIZONTAL: 2147483648,
            VERTICAL: 1073741824,
            DIAGONAL: 536870912,
            FLIPPED_ALL: (2147483648 | 1073741824 | 536870912) >>> 0,
            FLIPPED_MASK: ~(2147483648 | 1073741824 | 536870912) >>> 0
        });
        var StaggerAxis = cc.Enum({
            STAGGERAXIS_X: 0,
            STAGGERAXIS_Y: 1
        });
        var StaggerIndex = cc.Enum({
            STAGGERINDEX_ODD: 0,
            STAGGERINDEX_EVEN: 1
        });
        var TMXObjectType = cc.Enum({
            RECT: 0,
            ELLIPSE: 1,
            POLYGON: 2,
            POLYLINE: 3,
            IMAGE: 4,
            TEXT: 5
        });
        var TiledMap = cc.Class({
            name: 'cc.TiledMap',
            extends: cc.Component,
            editor: CC_EDITOR && {
                executeInEditMode: true,
                menu: 'i18n:MAIN_MENU.component.renderers/TiledMap'
            },
            ctor: function ctor() {
                this._layers = [];
                this._groups = [];
                this._properties = [];
                this._tileProperties = [];
                this._mapSize = cc.size(0, 0);
                this._tileSize = cc.size(0, 0);
            },
            statics: {
                Orientation: Orientation,
                Property: Property,
                TileFlag: TileFlag,
                StaggerAxis: StaggerAxis,
                StaggerIndex: StaggerIndex,
                TMXObjectType: TMXObjectType
            },
            properties: {
                _tmxFile: {
                    default: null,
                    type: cc.TiledMapAsset
                },
                tmxAsset: {
                    get: function get() {
                        return this._tmxFile;
                    },
                    set: function set(value, force) {
                        if (this._tmxFile !== value || CC_EDITOR && force) {
                            this._tmxFile = value;
                            this._applyFile();
                        }
                    },
                    type: cc.TiledMapAsset
                }
            },
            getMapSize: function getMapSize() {
                return this._mapSize;
            },
            getTileSize: function getTileSize() {
                return this._tileSize;
            },
            getMapOrientation: function getMapOrientation() {
                return this._mapOrientation;
            },
            getObjectGroups: function getObjectGroups() {
                return this._groups;
            },
            getObjectGroup: function getObjectGroup(groupName) {
                var groups = this._groups;
                for (var i = 0, l = groups.length; i < l; i++) {
                    var group = groups[i];
                    if (group && group.getGroupName() === groupName) {
                        return group;
                    }
                }
                return null;
            },
            getProperties: function getProperties() {
                return this._properties;
            },
            getLayers: function getLayers() {
                return this._layers;
            },
            getLayer: function getLayer(layerName) {
                var layers = this._layers;
                for (var i = 0, l = layers.length; i < l; i++) {
                    var layer = layers[i];
                    if (layer && layer.getLayerName() === layerName) {
                        return layer;
                    }
                }
                return null;
            },
            getProperty: function getProperty(propertyName) {
                return this._properties[propertyName.toString()];
            },
            getPropertiesForGID: function getPropertiesForGID(GID) {
                return this._tileProperties[GID];
            },
            __preload: function __preload() {
                if (this._tmxFile) {
                    this._applyFile();
                }
            },
            onEnable: function onEnable() {
                this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
            },
            onDisable: function onDisable() {
                this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
            },
            _applyFile: function _applyFile() {
                var file = this._tmxFile;
                if (file) {
                    var texValues = file.textures;
                    var texKeys = file.textureNames;
                    var textures = {};
                    for (var i = 0; i < texValues.length; ++i) {
                        textures[texKeys[i]] = texValues[i];
                    }
                    var tsxFileNames = file.tsxFileNames;
                    var tsxFiles = file.tsxFiles;
                    var tsxMap = {};
                    for (var _i = 0; _i < tsxFileNames.length; ++_i) {
                        if (tsxFileNames[_i].length > 0) {
                            tsxMap[tsxFileNames[_i]] = tsxFiles[_i].text;
                        }
                    }
                    var mapInfo = new cc.TMXMapInfo(file.tmxXmlStr, tsxMap, textures);
                    var tilesets = mapInfo.getTilesets();
                    if (!tilesets || tilesets.length === 0)
                        cc.logID(7241);
                    this._buildWithMapInfo(mapInfo);
                } else {
                    this._releaseMapInfo();
                }
            },
            _releaseMapInfo: function _releaseMapInfo() {
                var layers = this._layers;
                for (var i = 0, l = layers.length; i < l; i++) {
                    layers[i].node.removeFromParent();
                }
                layers.length = 0;
                var groups = this._groups;
                for (var _i2 = 0, _l = groups.length; _i2 < _l; _i2++) {
                    groups[_i2].node.removeFromParent();
                }
                groups.length = 0;
            },
            _syncAnchorPoint: function _syncAnchorPoint() {
                var anchor = this.node.getAnchorPoint();
                for (var i = 0, l = this._layers.length; i < l; i++) {
                    this._layers[i].node.setAnchorPoint(anchor);
                }
            },
            _buildWithMapInfo: function _buildWithMapInfo(mapInfo) {
                this._mapSize = mapInfo.getMapSize();
                this._tileSize = mapInfo.getTileSize();
                this._mapOrientation = mapInfo.orientation;
                this._properties = mapInfo.properties;
                this._tileProperties = mapInfo.getTileProperties();
                this._releaseMapInfo();
                var layers = this._layers;
                var groups = this._groups;
                var node = this.node;
                var layerInfos = mapInfo.getAllChildren();
                if (layerInfos && layerInfos.length > 0) {
                    for (var i = 0, len = layerInfos.length; i < len; i++) {
                        var layerInfo = layerInfos[i];
                        var name = layerInfo.name;
                        var child = this.node.getChildByName(name);
                        if (!child) {
                            child = new cc.Node();
                            child.name = name;
                            node.addChild(child);
                        }
                        if (layerInfo instanceof cc.TMXLayerInfo && layerInfo.visible) {
                            var layer = child.getComponent(cc.TiledLayer);
                            if (!layer) {
                                layer = child.addComponent(cc.TiledLayer);
                            }
                            var tileset = this._tilesetForLayer(layerInfo, mapInfo);
                            layer._init(tileset, layerInfo, mapInfo);
                            layerInfo.ownTiles = false;
                            this.node.width = Math.max(this.node.width, child.width);
                            this.node.height = Math.max(this.node.height, child.height);
                            layers.push(layer);
                        } else if (layerInfo instanceof cc.TMXObjectGroupInfo) {
                            var group = child.getComponent(cc.TiledObjectGroup);
                            if (!group) {
                                group = child.addComponent(cc.TiledObjectGroup);
                            }
                            group._init(layerInfo, mapInfo);
                            groups.push(group);
                        }
                    }
                }
                this._syncAnchorPoint();
            },
            _tilesetForLayer: function _tilesetForLayer(layerInfo, mapInfo) {
                var size = layerInfo._layerSize;
                var tilesets = mapInfo.getTilesets();
                if (tilesets) {
                    for (var i = tilesets.length - 1; i >= 0; i--) {
                        var tileset = tilesets[i];
                        if (tileset) {
                            for (var y = 0; y < size.height; y++) {
                                for (var x = 0; x < size.width; x++) {
                                    var pos = x + size.width * y;
                                    var gid = layerInfo._tiles[pos];
                                    if (gid !== 0) {
                                        if ((gid & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0 >= tileset.firstGid) {
                                            return tileset;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                cc.logID(7215, layerInfo.name);
                return null;
            }
        });
        cc.TiledMap = module.exports = TiledMap;
        cc.js.obsolete(cc.TiledMap.prototype, 'cc.TiledMap.tmxFile', 'tmxAsset', true);
        cc.js.get(cc.TiledMap.prototype, 'mapLoaded', function () {
            cc.errorID(7203);
            return [];
        }, false);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,