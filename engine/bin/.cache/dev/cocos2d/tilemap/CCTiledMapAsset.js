(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/CCTiledMapAsset.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var TiledMapAsset = cc.Class({
            name: 'cc.TiledMapAsset',
            extends: cc.Asset,
            properties: {
                tmxXmlStr: '',
                textures: {
                    default: [],
                    type: [cc.Texture2D]
                },
                textureNames: [cc.String],
                tsxFiles: [cc.TextAsset],
                tsxFileNames: [cc.String]
            },
            statics: { preventDeferredLoadDependents: true },
            createNode: CC_EDITOR && function (callback) {
                var node = new cc.Node(this.name);
                var tiledMap = node.addComponent(cc.TiledMap);
                tiledMap.tmxAsset = this;
                return callback(null, node);
            }
        });
        cc.TiledMapAsset = TiledMapAsset;
        module.exports = TiledMapAsset;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,