(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/uuid-loader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var js = require('../platform/js');
        var debug = require('../CCDebug');
        require('../platform/deserialize');
        var LoadingItems = require('./loading-items');
        function isSceneObj(json) {
            var SCENE_ID = 'cc.Scene';
            var PREFAB_ID = 'cc.Prefab';
            return json && (json[0] && json[0].__type__ === SCENE_ID || json[1] && json[1].__type__ === SCENE_ID || json[0] && json[0].__type__ === PREFAB_ID);
        }
        function parseDepends(item, asset, tdInfo, deferredLoadRawAssetsInRuntime) {
            var uuidList = tdInfo.uuidList;
            var objList = tdInfo.uuidObjList;
            var propList = tdInfo.uuidPropList;
            var stillUseUrl = tdInfo._stillUseUrl;
            var depends;
            var i, dependUuid;
            var dependKeys = item.dependKeys = [];
            if (deferredLoadRawAssetsInRuntime) {
                depends = [];
                for (i = 0; i < uuidList.length; i++) {
                    dependUuid = uuidList[i];
                    var obj = objList[i];
                    var prop = propList[i];
                    var info = cc.AssetLibrary._getAssetInfoInRuntime(dependUuid);
                    if (info.raw) {
                        var url = info.url;
                        obj[prop] = url;
                        dependKeys.push(url);
                    } else {
                        depends.push({
                            type: 'uuid',
                            uuid: dependUuid,
                            deferredLoadRaw: true,
                            _owner: obj,
                            _ownerProp: prop,
                            _stillUseUrl: stillUseUrl[i]
                        });
                    }
                }
            } else {
                depends = new Array(uuidList.length);
                for (i = 0; i < uuidList.length; i++) {
                    dependUuid = uuidList[i];
                    depends[i] = {
                        type: 'uuid',
                        uuid: dependUuid,
                        _owner: objList[i],
                        _ownerProp: propList[i],
                        _stillUseUrl: stillUseUrl[i]
                    };
                }
                if (asset._native && !asset.constructor.preventPreloadNativeObject) {
                    depends.push({
                        url: asset.nativeUrl,
                        _owner: asset,
                        _ownerProp: '_nativeAsset'
                    });
                }
            }
            return depends;
        }
        function loadDepends(pipeline, item, asset, depends, callback) {
            item.content = asset;
            var dependKeys = item.dependKeys;
            pipeline.flowInDeps(item, depends, function (errors, items) {
                var item, missingAssetReporter;
                var itemsMap = items.map;
                for (var src in itemsMap) {
                    item = itemsMap[src];
                    if (item.uuid && item.content) {
                        item.content._uuid = item.uuid;
                    }
                }
                for (var i = 0; i < depends.length; i++) {
                    var loadCallback = function loadCallback(item) {
                        var value = item.content;
                        if (this._stillUseUrl) {
                            value = value && cc.RawAsset.wasRawAssetType(value.constructor) ? value.nativeUrl : item.rawUrl;
                        }
                        if (this._ownerProp === '_nativeAsset') {
                            this._owner.url = item.url;
                        }
                        this._owner[this._ownerProp] = value;
                        if (item.uuid !== asset._uuid && dependKeys.indexOf(item.id) < 0) {
                            dependKeys.push(item.id);
                        }
                    };
                    var dep = depends[i];
                    var dependSrc = dep.uuid;
                    var dependUrl = dep.url;
                    var dependObj = dep._owner;
                    var dependProp = dep._ownerProp;
                    item = itemsMap[dependUrl];
                    if (!item) {
                        continue;
                    }
                    var loadCallbackCtx = dep;
                    if (item.complete || item.content) {
                        if (item.error) {
                            if (CC_EDITOR && item.error.errorCode === 'db.NOTFOUND') {
                                if (!missingAssetReporter) {
                                    var MissingObjectReporter = Editor.require('app://editor/page/scene-utils/missing-object-reporter');
                                    missingAssetReporter = new MissingObjectReporter(asset);
                                }
                                missingAssetReporter.stashByOwner(dependObj, dependProp, Editor.serialize.asAsset(dependSrc));
                            } else {
                                cc._throw(item.error.message || item.error.errorMessage || item.error);
                            }
                        } else {
                            loadCallback.call(loadCallbackCtx, item);
                        }
                    } else {
                        var queue = LoadingItems.getQueue(item);
                        var list = queue._callbackTable[dependSrc];
                        if (list) {
                            list.unshift(loadCallback, loadCallbackCtx);
                        } else {
                            queue.addListener(dependSrc, loadCallback, loadCallbackCtx);
                        }
                    }
                }
                if (CC_EDITOR && missingAssetReporter) {
                    missingAssetReporter.reportByOwner();
                    callback(null, asset);
                } else {
                    if (!errors && asset.onLoad) {
                        try {
                            asset.onLoad();
                        } catch (e) {
                            cc._throw(e);
                        }
                    }
                    callback(errors, asset);
                }
            });
        }
        function canDeferredLoad(asset, item, isScene) {
            if (CC_EDITOR) {
                return false;
            }
            var res = item.deferredLoadRaw;
            if (res) {
                if (asset instanceof cc.Asset && asset.constructor.preventDeferredLoadDependents) {
                    res = false;
                }
            } else if (isScene) {
                if (asset instanceof cc.SceneAsset || asset instanceof cc.Prefab) {
                    res = asset.asyncLoadAssets;
                }
            }
            return res;
        }
        var MissingClass;
        function loadUuid(item, callback) {
            if (CC_EDITOR) {
                MissingClass = MissingClass || Editor.require('app://editor/page/scene-utils/missing-class-reporter').MissingClass;
            }
            var json;
            if (typeof item.content === 'string') {
                try {
                    json = JSON.parse(item.content);
                } catch (e) {
                    return new Error(debug.getError(4923, item.id, e.stack));
                }
            } else if (_typeof(item.content) === 'object') {
                json = item.content;
            } else {
                return new Error(debug.getError(4924));
            }
            var classFinder;
            var isScene = isSceneObj(json);
            if (isScene) {
                if (CC_EDITOR) {
                    MissingClass.hasMissingClass = false;
                    classFinder = function classFinder(type, data, owner, propName) {
                        var res = MissingClass.classFinder(type, data, owner, propName);
                        if (res) {
                            return res;
                        }
                        return cc._MissingScript.getMissingWrapper(type, data);
                    };
                    classFinder.onDereferenced = MissingClass.classFinder.onDereferenced;
                } else {
                    classFinder = cc._MissingScript.safeFindClass;
                }
            } else {
                classFinder = function classFinder(id) {
                    var cls = js._getClassById(id);
                    if (cls) {
                        return cls;
                    }
                    cc.warnID(4903, id);
                    return Object;
                };
            }
            var tdInfo = cc.deserialize.Details.pool.get();
            var asset;
            try {
                asset = cc.deserialize(json, tdInfo, {
                    classFinder: classFinder,
                    target: item.existingAsset,
                    customEnv: item
                });
            } catch (e) {
                cc.deserialize.Details.pool.put(tdInfo);
                var err = CC_JSB || CC_RUNTIME ? e + '\n' + e.stack : e.stack;
                return new Error(debug.getError(4925, item.id, err));
            }
            asset._uuid = item.uuid;
            asset.url = asset.nativeUrl;
            if (CC_EDITOR && isScene && MissingClass.hasMissingClass) {
                MissingClass.reportMissingClass(asset);
            }
            var deferredLoad = canDeferredLoad(asset, item, isScene);
            var depends = parseDepends(item, asset, tdInfo, deferredLoad);
            cc.deserialize.Details.pool.put(tdInfo);
            if (depends.length === 0) {
                if (asset.onLoad)
                    asset.onLoad();
                return callback(null, asset);
            }
            loadDepends(this.pipeline, item, asset, depends, callback);
        }
        module.exports = loadUuid;
        loadUuid.isSceneObj = isSceneObj;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV1aWQtbG9hZGVyLmpzIiwiL1VzZXJzL3p6ZjIwMTkvRGVza3RvcC9kZXZlbG9wbWVudC9zdXBwb3J0X2FzdGMvZW5naW5lL2NvY29zMmQvY29yZS9sb2FkLXBpcGVsaW5lL3V1aWQtbG9hZGVyLmpzIl0sIm5hbWVzIjpbImpzIiwicmVxdWlyZSIsImRlYnVnIiwiTG9hZGluZ0l0ZW1zIiwiaXNTY2VuZU9iaiIsImpzb24iLCJTQ0VORV9JRCIsIlBSRUZBQl9JRCIsIl9fdHlwZV9fIiwicGFyc2VEZXBlbmRzIiwiaXRlbSIsImFzc2V0IiwidGRJbmZvIiwiZGVmZXJyZWRMb2FkUmF3QXNzZXRzSW5SdW50aW1lIiwidXVpZExpc3QiLCJvYmpMaXN0IiwidXVpZE9iakxpc3QiLCJwcm9wTGlzdCIsInV1aWRQcm9wTGlzdCIsInN0aWxsVXNlVXJsIiwiX3N0aWxsVXNlVXJsIiwiZGVwZW5kcyIsImkiLCJkZXBlbmRVdWlkIiwiZGVwZW5kS2V5cyIsImxlbmd0aCIsIm9iaiIsInByb3AiLCJpbmZvIiwiY2MiLCJBc3NldExpYnJhcnkiLCJfZ2V0QXNzZXRJbmZvSW5SdW50aW1lIiwicmF3IiwidXJsIiwicHVzaCIsInR5cGUiLCJ1dWlkIiwiZGVmZXJyZWRMb2FkUmF3IiwiX293bmVyIiwiX293bmVyUHJvcCIsIkFycmF5IiwiX25hdGl2ZSIsImNvbnN0cnVjdG9yIiwicHJldmVudFByZWxvYWROYXRpdmVPYmplY3QiLCJuYXRpdmVVcmwiLCJsb2FkRGVwZW5kcyIsInBpcGVsaW5lIiwiY2FsbGJhY2siLCJjb250ZW50IiwiZmxvd0luRGVwcyIsImVycm9ycyIsIml0ZW1zIiwibWlzc2luZ0Fzc2V0UmVwb3J0ZXIiLCJpdGVtc01hcCIsIm1hcCIsInNyYyIsIl91dWlkIiwibG9hZENhbGxiYWNrIiwidmFsdWUiLCJSYXdBc3NldCIsIndhc1Jhd0Fzc2V0VHlwZSIsInJhd1VybCIsImluZGV4T2YiLCJpZCIsImRlcCIsImRlcGVuZFNyYyIsImRlcGVuZFVybCIsImRlcGVuZE9iaiIsImRlcGVuZFByb3AiLCJsb2FkQ2FsbGJhY2tDdHgiLCJjb21wbGV0ZSIsImVycm9yIiwiQ0NfRURJVE9SIiwiZXJyb3JDb2RlIiwiTWlzc2luZ09iamVjdFJlcG9ydGVyIiwiRWRpdG9yIiwic3Rhc2hCeU93bmVyIiwic2VyaWFsaXplIiwiYXNBc3NldCIsIl90aHJvdyIsIm1lc3NhZ2UiLCJlcnJvck1lc3NhZ2UiLCJjYWxsIiwicXVldWUiLCJnZXRRdWV1ZSIsImxpc3QiLCJfY2FsbGJhY2tUYWJsZSIsInVuc2hpZnQiLCJhZGRMaXN0ZW5lciIsInJlcG9ydEJ5T3duZXIiLCJvbkxvYWQiLCJlIiwiY2FuRGVmZXJyZWRMb2FkIiwiaXNTY2VuZSIsInJlcyIsIkFzc2V0IiwicHJldmVudERlZmVycmVkTG9hZERlcGVuZGVudHMiLCJTY2VuZUFzc2V0IiwiUHJlZmFiIiwiYXN5bmNMb2FkQXNzZXRzIiwiTWlzc2luZ0NsYXNzIiwibG9hZFV1aWQiLCJKU09OIiwicGFyc2UiLCJFcnJvciIsImdldEVycm9yIiwic3RhY2siLCJjbGFzc0ZpbmRlciIsImhhc01pc3NpbmdDbGFzcyIsImRhdGEiLCJvd25lciIsInByb3BOYW1lIiwiX01pc3NpbmdTY3JpcHQiLCJnZXRNaXNzaW5nV3JhcHBlciIsIm9uRGVyZWZlcmVuY2VkIiwic2FmZUZpbmRDbGFzcyIsImNscyIsIl9nZXRDbGFzc0J5SWQiLCJ3YXJuSUQiLCJPYmplY3QiLCJkZXNlcmlhbGl6ZSIsIkRldGFpbHMiLCJwb29sIiwiZ2V0IiwidGFyZ2V0IiwiZXhpc3RpbmdBc3NldCIsImN1c3RvbUVudiIsInB1dCIsImVyciIsIkNDX0pTQiIsIkNDX1JVTlRJTUUiLCJyZXBvcnRNaXNzaW5nQ2xhc3MiLCJkZWZlcnJlZExvYWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7SUFBQSxJQUFBLFVBQUEsR0FBQSxzREFBQTs7Ozs7Ozs7Ozs7Ozs7OztRQTBCQSxJQUFNQSxFQUFBQSxHQUFLQyxPQUFBQSxDQUFRLGdCQUFSQSxDQUFYO1FBQ0EsSUFBTUMsS0FBQUEsR0FBUUQsT0FBQUEsQ0FBUSxZQUFSQSxDQUFkO1FBQ0FBLE9BQUFBLENBQVEseUJBQVJBO1FBQ0EsSUFBTUUsWUFBQUEsR0FBZUYsT0FBQUEsQ0FBUSxpQkFBUkEsQ0FBckI7UUFFQSxTQUFTRyxVQUFULENBQXFCQyxJQUFyQixFQUEyQjtBQUFBLFlBQ3ZCLElBQUlDLFFBQUFBLEdBQVcsVUFBZixDQUR1QjtBQUFBLFlBRXZCLElBQUlDLFNBQUFBLEdBQVksV0FBaEIsQ0FGdUI7QUFBQSxZQUd2QixPQUFPRixJQUFBQSxJQUNLQSxDQUFBQSxJQUFBQSxDQUFLLENBQUxBLEtBQVdBLElBQUFBLENBQUssQ0FBTEEsRUFBUUcsUUFBUkgsS0FBcUJDLFFBQWhDRCxJQUNBQSxJQUFBQSxDQUFLLENBQUxBLEtBQVdBLElBQUFBLENBQUssQ0FBTEEsRUFBUUcsUUFBUkgsS0FBcUJDLFFBRGhDRCxJQUVBQSxJQUFBQSxDQUFLLENBQUxBLEtBQVdBLElBQUFBLENBQUssQ0FBTEEsRUFBUUcsUUFBUkgsS0FBcUJFLFNBRmhDRixDQURaLENBSHVCO0FBQUE7UUFVM0IsU0FBU0ksWUFBVCxDQUF1QkMsSUFBdkIsRUFBNkJDLEtBQTdCLEVBQW9DQyxNQUFwQyxFQUE0Q0MsOEJBQTVDLEVBQTRFO0FBQUEsWUFDeEUsSUFBSUMsUUFBQUEsR0FBV0YsTUFBQUEsQ0FBT0UsUUFBdEIsQ0FEd0U7QUFBQSxZQUV4RSxJQUFJQyxPQUFBQSxHQUFVSCxNQUFBQSxDQUFPSSxXQUFyQixDQUZ3RTtBQUFBLFlBR3hFLElBQUlDLFFBQUFBLEdBQVdMLE1BQUFBLENBQU9NLFlBQXRCLENBSHdFO0FBQUEsWUFJeEUsSUFBSUMsV0FBQUEsR0FBY1AsTUFBQUEsQ0FBT1EsWUFBekIsQ0FKd0U7QUFBQSxZQUt4RSxJQUFJQyxPQUFKLENBTHdFO0FBQUEsWUFNeEUsSUFBSUMsQ0FBSixFQUFPQyxVQUFQLENBTndFO0FBQUEsWUFReEUsSUFBSUMsVUFBQUEsR0FBYWQsSUFBQUEsQ0FBS2MsVUFBTGQsR0FBa0IsRUFBbkMsQ0FSd0U7QUFBQSxZQVV4RSxJQUFJRyw4QkFBSixFQUFvQztBQUFBLGdCQUNoQ1EsT0FBQUEsR0FBVSxFQUFWQSxDQURnQztBQUFBLGdCQUdoQyxLQUFLQyxDQUFBQSxHQUFJLENBQVQsRUFBWUEsQ0FBQUEsR0FBSVIsUUFBQUEsQ0FBU1csTUFBekIsRUFBaUNILENBQUFBLEVBQWpDLEVBQXNDO0FBQUEsb0JBQ2xDQyxVQUFBQSxHQUFhVCxRQUFBQSxDQUFTUSxDQUFUUixDQUFiUyxDQURrQztBQUFBLG9CQUVsQyxJQUFJRyxHQUFBQSxHQUFNWCxPQUFBQSxDQUFRTyxDQUFSUCxDQUFWLENBRmtDO0FBQUEsb0JBR2xDLElBQUlZLElBQUFBLEdBQU9WLFFBQUFBLENBQVNLLENBQVRMLENBQVgsQ0FIa0M7QUFBQSxvQkFJbEMsSUFBSVcsSUFBQUEsR0FBT0MsRUFBQUEsQ0FBR0MsWUFBSEQsQ0FBZ0JFLHNCQUFoQkYsQ0FBdUNOLFVBQXZDTSxDQUFYLENBSmtDO0FBQUEsb0JBS2xDLElBQUlELElBQUFBLENBQUtJLEdBQVQsRUFBYztBQUFBLHdCQUVWLElBQUlDLEdBQUFBLEdBQU1MLElBQUFBLENBQUtLLEdBQWYsQ0FGVTtBQUFBLHdCQUdWUCxHQUFBQSxDQUFJQyxJQUFKRCxJQUFZTyxHQUFaUCxDQUhVO0FBQUEsd0JBSVZGLFVBQUFBLENBQVdVLElBQVhWLENBQWdCUyxHQUFoQlQsRUFKVTtBQUFBLHFCQUFkLE1BTUs7QUFBQSx3QkFFREgsT0FBQUEsQ0FBUWEsSUFBUmIsQ0FBYTtBQUFBLDRCQUNUYyxJQUFBQSxFQUFNLE1BREc7QUFBQSw0QkFFVEMsSUFBQUEsRUFBTWIsVUFGRztBQUFBLDRCQUdUYyxlQUFBQSxFQUFpQixJQUhSO0FBQUEsNEJBSVRDLE1BQUFBLEVBQVFaLEdBSkM7QUFBQSw0QkFLVGEsVUFBQUEsRUFBWVosSUFMSDtBQUFBLDRCQU1UUCxZQUFBQSxFQUFjRCxXQUFBQSxDQUFZRyxDQUFaSCxDQU5MO0FBQUEseUJBQWJFLEVBRkM7QUFBQSxxQkFYNkI7QUFBQSxpQkFITjtBQUFBLGFBQXBDLE1BMkJLO0FBQUEsZ0JBQ0RBLE9BQUFBLEdBQVUsSUFBSW1CLEtBQUosQ0FBVTFCLFFBQUFBLENBQVNXLE1BQW5CLENBQVZKLENBREM7QUFBQSxnQkFJRCxLQUFLQyxDQUFBQSxHQUFJLENBQVQsRUFBWUEsQ0FBQUEsR0FBSVIsUUFBQUEsQ0FBU1csTUFBekIsRUFBaUNILENBQUFBLEVBQWpDLEVBQXNDO0FBQUEsb0JBQ2xDQyxVQUFBQSxHQUFhVCxRQUFBQSxDQUFTUSxDQUFUUixDQUFiUyxDQURrQztBQUFBLG9CQUVsQ0YsT0FBQUEsQ0FBUUMsQ0FBUkQsSUFBYTtBQUFBLHdCQUNUYyxJQUFBQSxFQUFNLE1BREc7QUFBQSx3QkFFVEMsSUFBQUEsRUFBTWIsVUFGRztBQUFBLHdCQUdUZSxNQUFBQSxFQUFRdkIsT0FBQUEsQ0FBUU8sQ0FBUlAsQ0FIQztBQUFBLHdCQUlUd0IsVUFBQUEsRUFBWXRCLFFBQUFBLENBQVNLLENBQVRMLENBSkg7QUFBQSx3QkFLVEcsWUFBQUEsRUFBY0QsV0FBQUEsQ0FBWUcsQ0FBWkgsQ0FMTDtBQUFBLHFCQUFiRSxDQUZrQztBQUFBLGlCQUpyQztBQUFBLGdCQWdCRCxJQUFJVixLQUFBQSxDQUFNOEIsT0FBTjlCLElBQWlCLENBQUNBLEtBQUFBLENBQU0rQixXQUFOL0IsQ0FBa0JnQywwQkFBeEMsRUFBb0U7QUFBQSxvQkFDaEV0QixPQUFBQSxDQUFRYSxJQUFSYixDQUFhO0FBQUEsd0JBQ1RZLEdBQUFBLEVBQUt0QixLQUFBQSxDQUFNaUMsU0FERjtBQUFBLHdCQUVUTixNQUFBQSxFQUFRM0IsS0FGQztBQUFBLHdCQUdUNEIsVUFBQUEsRUFBWSxjQUhIO0FBQUEscUJBQWJsQixFQURnRTtBQUFBLGlCQWhCbkU7QUFBQSxhQXJDbUU7QUFBQSxZQThEeEUsT0FBT0EsT0FBUCxDQTlEd0U7QUFBQTtRQWlFNUUsU0FBU3dCLFdBQVQsQ0FBc0JDLFFBQXRCLEVBQWdDcEMsSUFBaEMsRUFBc0NDLEtBQXRDLEVBQTZDVSxPQUE3QyxFQUFzRDBCLFFBQXRELEVBQWdFO0FBQUEsWUFFNURyQyxJQUFBQSxDQUFLc0MsT0FBTHRDLEdBQWVDLEtBQWZELENBRjREO0FBQUEsWUFHNUQsSUFBSWMsVUFBQUEsR0FBYWQsSUFBQUEsQ0FBS2MsVUFBdEIsQ0FINEQ7QUFBQSxZQUk1RHNCLFFBQUFBLENBQVNHLFVBQVRILENBQW9CcEMsSUFBcEJvQyxFQUEwQnpCLE9BQTFCeUIsRUFBbUMsVUFBVUksTUFBVixFQUFrQkMsS0FBbEIsRUFBeUI7QUFBQSxnQkFDeEQsSUFBSXpDLElBQUosRUFBVTBDLG9CQUFWLENBRHdEO0FBQUEsZ0JBRXhELElBQUlDLFFBQUFBLEdBQVdGLEtBQUFBLENBQU1HLEdBQXJCLENBRndEO0FBQUEsZ0JBR3hELFNBQVNDLEdBQVQsSUFBZ0JGLFFBQWhCLEVBQTBCO0FBQUEsb0JBQ3RCM0MsSUFBQUEsR0FBTzJDLFFBQUFBLENBQVNFLEdBQVRGLENBQVAzQyxDQURzQjtBQUFBLG9CQUV0QixJQUFJQSxJQUFBQSxDQUFLMEIsSUFBTDFCLElBQWFBLElBQUFBLENBQUtzQyxPQUF0QixFQUErQjtBQUFBLHdCQUMzQnRDLElBQUFBLENBQUtzQyxPQUFMdEMsQ0FBYThDLEtBQWI5QyxHQUFxQkEsSUFBQUEsQ0FBSzBCLElBQTFCMUIsQ0FEMkI7QUFBQSxxQkFGVDtBQUFBLGlCQUg4QjtBQUFBLGdCQVN4RCxLQUFLLElBQUlZLENBQUFBLEdBQUksQ0FBUixDQUFMLENBQWdCQSxDQUFBQSxHQUFJRCxPQUFBQSxDQUFRSSxNQUE1QixFQUFvQ0gsQ0FBQUEsRUFBcEMsRUFBeUM7QUFBQSxvQkFBQSxJQVk1Qm1DLFlBQUFBLEdBQVQsU0FBU0EsWUFBVCxDQUF1Qi9DLElBQXZCLEVBQTZCO0FBQUEsd0JBQ3pCLElBQUlnRCxLQUFBQSxHQUFRaEQsSUFBQUEsQ0FBS3NDLE9BQWpCLENBRHlCO0FBQUEsd0JBRXpCLElBQUksS0FBSzVCLFlBQVQsRUFBdUI7QUFBQSw0QkFDbkJzQyxLQUFBQSxHQUFTQSxLQUFBQSxJQUFTN0IsRUFBQUEsQ0FBRzhCLFFBQUg5QixDQUFZK0IsZUFBWi9CLENBQTRCNkIsS0FBQUEsQ0FBTWhCLFdBQWxDYixDQUFUNkIsR0FBMkRBLEtBQUFBLENBQU1kLFNBQWpFYyxHQUE2RWhELElBQUFBLENBQUttRCxNQUEzRkgsQ0FEbUI7QUFBQSx5QkFGRTtBQUFBLHdCQUt6QixJQUFJLEtBQUtuQixVQUFMLEtBQW9CLGNBQXhCLEVBQXdDO0FBQUEsNEJBQ3BDLEtBQUtELE1BQUwsQ0FBWUwsR0FBWixHQUFrQnZCLElBQUFBLENBQUt1QixHQUF2QixDQURvQztBQUFBLHlCQUxmO0FBQUEsd0JBUXpCLEtBQUtLLE1BQUwsQ0FBWSxLQUFLQyxVQUFqQixJQUErQm1CLEtBQS9CLENBUnlCO0FBQUEsd0JBU3pCLElBQUloRCxJQUFBQSxDQUFLMEIsSUFBTDFCLEtBQWNDLEtBQUFBLENBQU02QyxLQUFwQjlDLElBQTZCYyxVQUFBQSxDQUFXc0MsT0FBWHRDLENBQW1CZCxJQUFBQSxDQUFLcUQsRUFBeEJ2QyxJQUE4QixDQUEvRCxFQUFrRTtBQUFBLDRCQUM5REEsVUFBQUEsQ0FBV1UsSUFBWFYsQ0FBZ0JkLElBQUFBLENBQUtxRCxFQUFyQnZDLEVBRDhEO0FBQUEseUJBVHpDO0FBQUEscUJBWlEsQ0FBQTtBQUFBLG9CQUNyQyxJQUFJd0MsR0FBQUEsR0FBTTNDLE9BQUFBLENBQVFDLENBQVJELENBQVYsQ0FEcUM7QUFBQSxvQkFFckMsSUFBSTRDLFNBQUFBLEdBQVlELEdBQUFBLENBQUk1QixJQUFwQixDQUZxQztBQUFBLG9CQUdyQyxJQUFJOEIsU0FBQUEsR0FBWUYsR0FBQUEsQ0FBSS9CLEdBQXBCLENBSHFDO0FBQUEsb0JBSXJDLElBQUlrQyxTQUFBQSxHQUFZSCxHQUFBQSxDQUFJMUIsTUFBcEIsQ0FKcUM7QUFBQSxvQkFLckMsSUFBSThCLFVBQUFBLEdBQWFKLEdBQUFBLENBQUl6QixVQUFyQixDQUxxQztBQUFBLG9CQU1yQzdCLElBQUFBLEdBQU8yQyxRQUFBQSxDQUFTYSxTQUFUYixDQUFQM0MsQ0FOcUM7QUFBQSxvQkFPckMsSUFBSSxDQUFDQSxJQUFMLEVBQVc7QUFBQSx3QkFDUCxTQURPO0FBQUEscUJBUDBCO0FBQUEsb0JBV3JDLElBQUkyRCxlQUFBQSxHQUFrQkwsR0FBdEIsQ0FYcUM7QUFBQSxvQkEwQnJDLElBQUl0RCxJQUFBQSxDQUFLNEQsUUFBTDVELElBQWlCQSxJQUFBQSxDQUFLc0MsT0FBMUIsRUFBbUM7QUFBQSx3QkFDL0IsSUFBSXRDLElBQUFBLENBQUs2RCxLQUFULEVBQWdCO0FBQUEsNEJBQ1osSUFBSUMsU0FBQUEsSUFBYTlELElBQUFBLENBQUs2RCxLQUFMN0QsQ0FBVytELFNBQVgvRCxLQUF5QixhQUExQyxFQUF5RDtBQUFBLGdDQUNyRCxJQUFJLENBQUMwQyxvQkFBTCxFQUEyQjtBQUFBLG9DQUN2QixJQUFJc0IscUJBQUFBLEdBQXdCQyxNQUFBQSxDQUFPMUUsT0FBUDBFLENBQWUsdURBQWZBLENBQTVCLENBRHVCO0FBQUEsb0NBRXZCdkIsb0JBQUFBLEdBQXVCLElBQUlzQixxQkFBSixDQUEwQi9ELEtBQTFCLENBQXZCeUMsQ0FGdUI7QUFBQSxpQ0FEMEI7QUFBQSxnQ0FLckRBLG9CQUFBQSxDQUFxQndCLFlBQXJCeEIsQ0FBa0NlLFNBQWxDZixFQUE2Q2dCLFVBQTdDaEIsRUFBeUR1QixNQUFBQSxDQUFPRSxTQUFQRixDQUFpQkcsT0FBakJILENBQXlCVixTQUF6QlUsQ0FBekR2QixFQUxxRDtBQUFBLDZCQUF6RCxNQU9LO0FBQUEsZ0NBQ0R2QixFQUFBQSxDQUFHa0QsTUFBSGxELENBQVVuQixJQUFBQSxDQUFLNkQsS0FBTDdELENBQVdzRSxPQUFYdEUsSUFBc0JBLElBQUFBLENBQUs2RCxLQUFMN0QsQ0FBV3VFLFlBQWpDdkUsSUFBaURBLElBQUFBLENBQUs2RCxLQUFoRTFDLEVBREM7QUFBQSw2QkFSTztBQUFBLHlCQUFoQixNQVlLO0FBQUEsNEJBQ0Q0QixZQUFBQSxDQUFheUIsSUFBYnpCLENBQWtCWSxlQUFsQlosRUFBbUMvQyxJQUFuQytDLEVBREM7QUFBQSx5QkFiMEI7QUFBQSxxQkFBbkMsTUFpQks7QUFBQSx3QkFFRCxJQUFJMEIsS0FBQUEsR0FBUWhGLFlBQUFBLENBQWFpRixRQUFiakYsQ0FBc0JPLElBQXRCUCxDQUFaLENBRkM7QUFBQSx3QkFJRCxJQUFJa0YsSUFBQUEsR0FBT0YsS0FBQUEsQ0FBTUcsY0FBTkgsQ0FBcUJsQixTQUFyQmtCLENBQVgsQ0FKQztBQUFBLHdCQUtELElBQUlFLElBQUosRUFBVTtBQUFBLDRCQUNOQSxJQUFBQSxDQUFLRSxPQUFMRixDQUFhNUIsWUFBYjRCLEVBQTJCaEIsZUFBM0JnQixFQURNO0FBQUEseUJBQVYsTUFHSztBQUFBLDRCQUNERixLQUFBQSxDQUFNSyxXQUFOTCxDQUFrQmxCLFNBQWxCa0IsRUFBNkIxQixZQUE3QjBCLEVBQTJDZCxlQUEzQ2MsRUFEQztBQUFBLHlCQVJKO0FBQUEscUJBM0NnQztBQUFBLGlCQVRlO0FBQUEsZ0JBbUV4RCxJQUFJWCxTQUFBQSxJQUFhcEIsb0JBQWpCLEVBQXVDO0FBQUEsb0JBQ25DQSxvQkFBQUEsQ0FBcUJxQyxhQUFyQnJDLEdBRG1DO0FBQUEsb0JBRW5DTCxRQUFBQSxDQUFTLElBQVRBLEVBQWVwQyxLQUFmb0MsRUFGbUM7QUFBQSxpQkFBdkMsTUFJSztBQUFBLG9CQUNELElBQUksQ0FBQ0csTUFBRCxJQUFXdkMsS0FBQUEsQ0FBTStFLE1BQXJCLEVBQTZCO0FBQUEsd0JBQ3pCLElBQUk7QUFBQSw0QkFDQS9FLEtBQUFBLENBQU0rRSxNQUFOL0UsR0FEQTtBQUFBLHlCQUFKLENBR0EsT0FBT2dGLENBQVAsRUFBVTtBQUFBLDRCQUNOOUQsRUFBQUEsQ0FBR2tELE1BQUhsRCxDQUFVOEQsQ0FBVjlELEVBRE07QUFBQSx5QkFKZTtBQUFBLHFCQUQ1QjtBQUFBLG9CQVNEa0IsUUFBQUEsQ0FBU0csTUFBVEgsRUFBaUJwQyxLQUFqQm9DLEVBVEM7QUFBQSxpQkF2RW1EO0FBQUEsYUFBNURELEVBSjREO0FBQUE7UUEwRmhFLFNBQVM4QyxlQUFULENBQTBCakYsS0FBMUIsRUFBaUNELElBQWpDLEVBQXVDbUYsT0FBdkMsRUFBZ0Q7QUFBQSxZQUM1QyxJQUFJckIsU0FBSixFQUFlO0FBQUEsZ0JBQ1gsT0FBTyxLQUFQLENBRFc7QUFBQSxhQUQ2QjtBQUFBLFlBSTVDLElBQUlzQixHQUFBQSxHQUFNcEYsSUFBQUEsQ0FBSzJCLGVBQWYsQ0FKNEM7QUFBQSxZQUs1QyxJQUFJeUQsR0FBSixFQUFTO0FBQUEsZ0JBRUwsSUFBS25GLEtBQUFBLFlBQWlCa0IsRUFBQUEsQ0FBR2tFLEtBQXBCcEYsSUFBOEJBLEtBQUFBLENBQU0rQixXQUFOL0IsQ0FBa0JxRiw2QkFBckQsRUFBb0Y7QUFBQSxvQkFDaEZGLEdBQUFBLEdBQU0sS0FBTkEsQ0FEZ0Y7QUFBQSxpQkFGL0U7QUFBQSxhQUFULE1BTUssSUFBSUQsT0FBSixFQUFhO0FBQUEsZ0JBQ2QsSUFBSWxGLEtBQUFBLFlBQWlCa0IsRUFBQUEsQ0FBR29FLFVBQXBCdEYsSUFBa0NBLEtBQUFBLFlBQWlCa0IsRUFBQUEsQ0FBR3FFLE1BQTFELEVBQWtFO0FBQUEsb0JBQzlESixHQUFBQSxHQUFNbkYsS0FBQUEsQ0FBTXdGLGVBQVpMLENBRDhEO0FBQUEsaUJBRHBEO0FBQUEsYUFYMEI7QUFBQSxZQW1CNUMsT0FBT0EsR0FBUCxDQW5CNEM7QUFBQTtRQXNCaEQsSUFBSU0sWUFBSjtRQUVBLFNBQVNDLFFBQVQsQ0FBbUIzRixJQUFuQixFQUF5QnFDLFFBQXpCLEVBQW1DO0FBQUEsWUFDL0IsSUFBSXlCLFNBQUosRUFBZTtBQUFBLGdCQUNYNEIsWUFBQUEsR0FBZUEsWUFBQUEsSUFBZ0J6QixNQUFBQSxDQUFPMUUsT0FBUDBFLENBQWUsc0RBQWZBLEVBQXVFeUIsWUFBdEdBLENBRFc7QUFBQSxhQURnQjtBQUFBLFlBSy9CLElBQUkvRixJQUFKLENBTCtCO0FBQUEsWUFNL0IsSUFBSSxPQUFPSyxJQUFBQSxDQUFLc0MsT0FBWixLQUF3QixRQUE1QixFQUFzQztBQUFBLGdCQUNsQyxJQUFJO0FBQUEsb0JBQ0EzQyxJQUFBQSxHQUFPaUcsSUFBQUEsQ0FBS0MsS0FBTEQsQ0FBVzVGLElBQUFBLENBQUtzQyxPQUFoQnNELENBQVBqRyxDQURBO0FBQUEsaUJBQUosQ0FHQSxPQUFPc0YsQ0FBUCxFQUFVO0FBQUEsb0JBQ04sT0FBTyxJQUFJYSxLQUFKLENBQVV0RyxLQUFBQSxDQUFNdUcsUUFBTnZHLENBQWUsSUFBZkEsRUFBcUJRLElBQUFBLENBQUtxRCxFQUExQjdELEVBQThCeUYsQ0FBQUEsQ0FBRWUsS0FBaEN4RyxDQUFWLENBQVAsQ0FETTtBQUFBLGlCQUp3QjtBQUFBLGFBQXRDLE1BUUssSUFBSSxPQUFBLENBQU9RLElBQUFBLENBQUtzQyxPQUFaLE1BQXdCLFFBQTVCLEVBQXNDO0FBQUEsZ0JBQ3ZDM0MsSUFBQUEsR0FBT0ssSUFBQUEsQ0FBS3NDLE9BQVozQyxDQUR1QztBQUFBLGFBQXRDLE1BR0E7QUFBQSxnQkFDRCxPQUFPLElBQUltRyxLQUFKLENBQVV0RyxLQUFBQSxDQUFNdUcsUUFBTnZHLENBQWUsSUFBZkEsQ0FBVixDQUFQLENBREM7QUFBQSxhQWpCMEI7QUFBQSxZQXFCL0IsSUFBSXlHLFdBQUosQ0FyQitCO0FBQUEsWUFzQi9CLElBQUlkLE9BQUFBLEdBQVV6RixVQUFBQSxDQUFXQyxJQUFYRCxDQUFkLENBdEIrQjtBQUFBLFlBdUIvQixJQUFJeUYsT0FBSixFQUFhO0FBQUEsZ0JBQ1QsSUFBSXJCLFNBQUosRUFBZTtBQUFBLG9CQUNYNEIsWUFBQUEsQ0FBYVEsZUFBYlIsR0FBK0IsS0FBL0JBLENBRFc7QUFBQSxvQkFFWE8sV0FBQUEsR0FBYyxTQUFBLFdBQUEsQ0FBVXhFLElBQVYsRUFBZ0IwRSxJQUFoQixFQUFzQkMsS0FBdEIsRUFBNkJDLFFBQTdCLEVBQXVDO0FBQUEsd0JBQ2pELElBQUlqQixHQUFBQSxHQUFNTSxZQUFBQSxDQUFhTyxXQUFiUCxDQUF5QmpFLElBQXpCaUUsRUFBK0JTLElBQS9CVCxFQUFxQ1UsS0FBckNWLEVBQTRDVyxRQUE1Q1gsQ0FBVixDQURpRDtBQUFBLHdCQUVqRCxJQUFJTixHQUFKLEVBQVM7QUFBQSw0QkFDTCxPQUFPQSxHQUFQLENBREs7QUFBQSx5QkFGd0M7QUFBQSx3QkFLakQsT0FBT2pFLEVBQUFBLENBQUdtRixjQUFIbkYsQ0FBa0JvRixpQkFBbEJwRixDQUFvQ00sSUFBcENOLEVBQTBDZ0YsSUFBMUNoRixDQUFQLENBTGlEO0FBQUEscUJBQXJEOEUsQ0FGVztBQUFBLG9CQVNYQSxXQUFBQSxDQUFZTyxjQUFaUCxHQUE2QlAsWUFBQUEsQ0FBYU8sV0FBYlAsQ0FBeUJjLGNBQXREUCxDQVRXO0FBQUEsaUJBQWYsTUFXSztBQUFBLG9CQUNEQSxXQUFBQSxHQUFjOUUsRUFBQUEsQ0FBR21GLGNBQUhuRixDQUFrQnNGLGFBQWhDUixDQURDO0FBQUEsaUJBWkk7QUFBQSxhQUFiLE1BZ0JLO0FBQUEsZ0JBQ0RBLFdBQUFBLEdBQWMsU0FBQSxXQUFBLENBQVU1QyxFQUFWLEVBQWM7QUFBQSxvQkFDeEIsSUFBSXFELEdBQUFBLEdBQU1wSCxFQUFBQSxDQUFHcUgsYUFBSHJILENBQWlCK0QsRUFBakIvRCxDQUFWLENBRHdCO0FBQUEsb0JBRXhCLElBQUlvSCxHQUFKLEVBQVM7QUFBQSx3QkFDTCxPQUFPQSxHQUFQLENBREs7QUFBQSxxQkFGZTtBQUFBLG9CQUt4QnZGLEVBQUFBLENBQUd5RixNQUFIekYsQ0FBVSxJQUFWQSxFQUFnQmtDLEVBQWhCbEMsRUFMd0I7QUFBQSxvQkFNeEIsT0FBTzBGLE1BQVAsQ0FOd0I7QUFBQSxpQkFBNUJaLENBREM7QUFBQSxhQXZDMEI7QUFBQSxZQWtEL0IsSUFBSS9GLE1BQUFBLEdBQVNpQixFQUFBQSxDQUFHMkYsV0FBSDNGLENBQWU0RixPQUFmNUYsQ0FBdUI2RixJQUF2QjdGLENBQTRCOEYsR0FBNUI5RixFQUFiLENBbEQrQjtBQUFBLFlBb0QvQixJQUFJbEIsS0FBSixDQXBEK0I7QUFBQSxZQXFEL0IsSUFBSTtBQUFBLGdCQUNBQSxLQUFBQSxHQUFRa0IsRUFBQUEsQ0FBRzJGLFdBQUgzRixDQUFleEIsSUFBZndCLEVBQXFCakIsTUFBckJpQixFQUE2QjtBQUFBLG9CQUNqQzhFLFdBQUFBLEVBQWFBLFdBRG9CO0FBQUEsb0JBRWpDaUIsTUFBQUEsRUFBUWxILElBQUFBLENBQUttSCxhQUZvQjtBQUFBLG9CQUdqQ0MsU0FBQUEsRUFBV3BILElBSHNCO0FBQUEsaUJBQTdCbUIsQ0FBUmxCLENBREE7QUFBQSxhQUFKLENBT0EsT0FBT2dGLENBQVAsRUFBVTtBQUFBLGdCQUNOOUQsRUFBQUEsQ0FBRzJGLFdBQUgzRixDQUFlNEYsT0FBZjVGLENBQXVCNkYsSUFBdkI3RixDQUE0QmtHLEdBQTVCbEcsQ0FBZ0NqQixNQUFoQ2lCLEVBRE07QUFBQSxnQkFFTixJQUFJbUcsR0FBQUEsR0FBTUMsTUFBQUEsSUFBVUMsVUFBVkQsR0FBd0J0QyxDQUFBQSxHQUFJLElBQUpBLEdBQVdBLENBQUFBLENBQUVlLEtBQXJDdUIsR0FBOEN0QyxDQUFBQSxDQUFFZSxLQUExRCxDQUZNO0FBQUEsZ0JBR04sT0FBTyxJQUFJRixLQUFKLENBQVV0RyxLQUFBQSxDQUFNdUcsUUFBTnZHLENBQWUsSUFBZkEsRUFBcUJRLElBQUFBLENBQUtxRCxFQUExQjdELEVBQThCOEgsR0FBOUI5SCxDQUFWLENBQVAsQ0FITTtBQUFBLGFBNURxQjtBQUFBLFlBa0UvQlMsS0FBQUEsQ0FBTTZDLEtBQU43QyxHQUFjRCxJQUFBQSxDQUFLMEIsSUFBbkJ6QixDQWxFK0I7QUFBQSxZQW1FL0JBLEtBQUFBLENBQU1zQixHQUFOdEIsR0FBWUEsS0FBQUEsQ0FBTWlDLFNBQWxCakMsQ0FuRStCO0FBQUEsWUFxRS9CLElBQUk2RCxTQUFBQSxJQUFhcUIsT0FBYnJCLElBQXdCNEIsWUFBQUEsQ0FBYVEsZUFBekMsRUFBMEQ7QUFBQSxnQkFDdERSLFlBQUFBLENBQWErQixrQkFBYi9CLENBQWdDekYsS0FBaEN5RixFQURzRDtBQUFBLGFBckUzQjtBQUFBLFlBeUUvQixJQUFJZ0MsWUFBQUEsR0FBZXhDLGVBQUFBLENBQWdCakYsS0FBaEJpRixFQUF1QmxGLElBQXZCa0YsRUFBNkJDLE9BQTdCRCxDQUFuQixDQXpFK0I7QUFBQSxZQTBFL0IsSUFBSXZFLE9BQUFBLEdBQVVaLFlBQUFBLENBQWFDLElBQWJELEVBQW1CRSxLQUFuQkYsRUFBMEJHLE1BQTFCSCxFQUFrQzJILFlBQWxDM0gsQ0FBZCxDQTFFK0I7QUFBQSxZQTRFL0JvQixFQUFBQSxDQUFHMkYsV0FBSDNGLENBQWU0RixPQUFmNUYsQ0FBdUI2RixJQUF2QjdGLENBQTRCa0csR0FBNUJsRyxDQUFnQ2pCLE1BQWhDaUIsRUE1RStCO0FBQUEsWUE4RS9CLElBQUlSLE9BQUFBLENBQVFJLE1BQVJKLEtBQW1CLENBQXZCLEVBQTBCO0FBQUEsZ0JBQ3RCLElBQUlWLEtBQUFBLENBQU0rRSxNQUFWO0FBQUEsb0JBQWtCL0UsS0FBQUEsQ0FBTStFLE1BQU4vRSxHQURJO0FBQUEsZ0JBRXRCLE9BQU9vQyxRQUFBQSxDQUFTLElBQVRBLEVBQWVwQyxLQUFmb0MsQ0FBUCxDQUZzQjtBQUFBLGFBOUVLO0FBQUEsWUFrRi9CRixXQUFBQSxDQUFZLEtBQUtDLFFBQWpCRCxFQUEyQm5DLElBQTNCbUMsRUFBaUNsQyxLQUFqQ2tDLEVBQXdDeEIsT0FBeEN3QixFQUFpREUsUUFBakRGLEVBbEYrQjtBQUFBO1FBcUZuQ3dGLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCaEMsUUFBakJnQztRQUNBaEMsUUFBQUEsQ0FBU2pHLFVBQVRpRyxHQUFzQmpHLFVBQXRCaUciLCJmaWxlIjoidXVpZC1sb2FkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmNvbnN0IGpzID0gcmVxdWlyZSgnLi4vcGxhdGZvcm0vanMnKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnLi4vQ0NEZWJ1ZycpO1xucmVxdWlyZSgnLi4vcGxhdGZvcm0vZGVzZXJpYWxpemUnKTtcbmNvbnN0IExvYWRpbmdJdGVtcyA9IHJlcXVpcmUoJy4vbG9hZGluZy1pdGVtcycpO1xuXG5mdW5jdGlvbiBpc1NjZW5lT2JqIChqc29uKSB7XG4gICAgdmFyIFNDRU5FX0lEID0gJ2NjLlNjZW5lJztcbiAgICB2YXIgUFJFRkFCX0lEID0gJ2NjLlByZWZhYic7XG4gICAgcmV0dXJuIGpzb24gJiYgKFxuICAgICAgICAgICAgICAgKGpzb25bMF0gJiYganNvblswXS5fX3R5cGVfXyA9PT0gU0NFTkVfSUQpIHx8XG4gICAgICAgICAgICAgICAoanNvblsxXSAmJiBqc29uWzFdLl9fdHlwZV9fID09PSBTQ0VORV9JRCkgfHxcbiAgICAgICAgICAgICAgIChqc29uWzBdICYmIGpzb25bMF0uX190eXBlX18gPT09IFBSRUZBQl9JRClcbiAgICAgICAgICAgKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEZXBlbmRzIChpdGVtLCBhc3NldCwgdGRJbmZvLCBkZWZlcnJlZExvYWRSYXdBc3NldHNJblJ1bnRpbWUpIHtcbiAgICB2YXIgdXVpZExpc3QgPSB0ZEluZm8udXVpZExpc3Q7XG4gICAgdmFyIG9iakxpc3QgPSB0ZEluZm8udXVpZE9iakxpc3Q7XG4gICAgdmFyIHByb3BMaXN0ID0gdGRJbmZvLnV1aWRQcm9wTGlzdDtcbiAgICB2YXIgc3RpbGxVc2VVcmwgPSB0ZEluZm8uX3N0aWxsVXNlVXJsO1xuICAgIHZhciBkZXBlbmRzO1xuICAgIHZhciBpLCBkZXBlbmRVdWlkO1xuICAgIC8vIGNhY2hlIGRlcGVuZGVuY2llcyBmb3IgYXV0byByZWxlYXNlXG4gICAgdmFyIGRlcGVuZEtleXMgPSBpdGVtLmRlcGVuZEtleXMgPSBbXTtcblxuICAgIGlmIChkZWZlcnJlZExvYWRSYXdBc3NldHNJblJ1bnRpbWUpIHtcbiAgICAgICAgZGVwZW5kcyA9IFtdO1xuICAgICAgICAvLyBwYXJzZSBkZXBlbmRzIGFzc2V0c1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdXVpZExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRlcGVuZFV1aWQgPSB1dWlkTGlzdFtpXTtcbiAgICAgICAgICAgIHZhciBvYmogPSBvYmpMaXN0W2ldO1xuICAgICAgICAgICAgdmFyIHByb3AgPSBwcm9wTGlzdFtpXTtcbiAgICAgICAgICAgIHZhciBpbmZvID0gY2MuQXNzZXRMaWJyYXJ5Ll9nZXRBc3NldEluZm9JblJ1bnRpbWUoZGVwZW5kVXVpZCk7XG4gICAgICAgICAgICBpZiAoaW5mby5yYXcpIHtcbiAgICAgICAgICAgICAgICAvLyBza2lwIHByZWxvYWRpbmcgcmF3IGFzc2V0c1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBpbmZvLnVybDtcbiAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSB1cmw7XG4gICAgICAgICAgICAgICAgZGVwZW5kS2V5cy5wdXNoKHVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBkZWNsYXJlIGRlcGVuZHMgYXNzZXRzXG4gICAgICAgICAgICAgICAgZGVwZW5kcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3V1aWQnLFxuICAgICAgICAgICAgICAgICAgICB1dWlkOiBkZXBlbmRVdWlkLFxuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZExvYWRSYXc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIF9vd25lcjogb2JqLFxuICAgICAgICAgICAgICAgICAgICBfb3duZXJQcm9wOiBwcm9wLFxuICAgICAgICAgICAgICAgICAgICBfc3RpbGxVc2VVcmw6IHN0aWxsVXNlVXJsW2ldXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRlcGVuZHMgPSBuZXcgQXJyYXkodXVpZExpc3QubGVuZ3RoKTtcblxuICAgICAgICAvLyBkZWNsYXJlIGRlcGVuZHMgYXNzZXRzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB1dWlkTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGVwZW5kVXVpZCA9IHV1aWRMaXN0W2ldO1xuICAgICAgICAgICAgZGVwZW5kc1tpXSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAndXVpZCcsXG4gICAgICAgICAgICAgICAgdXVpZDogZGVwZW5kVXVpZCxcbiAgICAgICAgICAgICAgICBfb3duZXI6IG9iakxpc3RbaV0sXG4gICAgICAgICAgICAgICAgX293bmVyUHJvcDogcHJvcExpc3RbaV0sXG4gICAgICAgICAgICAgICAgX3N0aWxsVXNlVXJsOiBzdGlsbFVzZVVybFtpXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxvYWQgbmF0aXZlIG9iamVjdCAoSW1hZ2UvQXVkaW8pIGFzIGRlcGVuZHNcbiAgICAgICAgaWYgKGFzc2V0Ll9uYXRpdmUgJiYgIWFzc2V0LmNvbnN0cnVjdG9yLnByZXZlbnRQcmVsb2FkTmF0aXZlT2JqZWN0KSB7XG4gICAgICAgICAgICBkZXBlbmRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHVybDogYXNzZXQubmF0aXZlVXJsLFxuICAgICAgICAgICAgICAgIF9vd25lcjogYXNzZXQsXG4gICAgICAgICAgICAgICAgX293bmVyUHJvcDogJ19uYXRpdmVBc3NldCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZXBlbmRzO1xufVxuXG5mdW5jdGlvbiBsb2FkRGVwZW5kcyAocGlwZWxpbmUsIGl0ZW0sIGFzc2V0LCBkZXBlbmRzLCBjYWxsYmFjaykge1xuICAgIC8vIFByZWRlZmluZSBjb250ZW50IGZvciBkZXBlbmRlbmNpZXMgdXNhZ2VcbiAgICBpdGVtLmNvbnRlbnQgPSBhc3NldDtcbiAgICB2YXIgZGVwZW5kS2V5cyA9IGl0ZW0uZGVwZW5kS2V5cztcbiAgICBwaXBlbGluZS5mbG93SW5EZXBzKGl0ZW0sIGRlcGVuZHMsIGZ1bmN0aW9uIChlcnJvcnMsIGl0ZW1zKSB7XG4gICAgICAgIHZhciBpdGVtLCBtaXNzaW5nQXNzZXRSZXBvcnRlcjtcbiAgICAgICAgdmFyIGl0ZW1zTWFwID0gaXRlbXMubWFwO1xuICAgICAgICBmb3IgKHZhciBzcmMgaW4gaXRlbXNNYXApIHtcbiAgICAgICAgICAgIGl0ZW0gPSBpdGVtc01hcFtzcmNdO1xuICAgICAgICAgICAgaWYgKGl0ZW0udXVpZCAmJiBpdGVtLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmNvbnRlbnQuX3V1aWQgPSBpdGVtLnV1aWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXBlbmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZGVwID0gZGVwZW5kc1tpXTtcbiAgICAgICAgICAgIHZhciBkZXBlbmRTcmMgPSBkZXAudXVpZDtcbiAgICAgICAgICAgIHZhciBkZXBlbmRVcmwgPSBkZXAudXJsO1xuICAgICAgICAgICAgdmFyIGRlcGVuZE9iaiA9IGRlcC5fb3duZXI7XG4gICAgICAgICAgICB2YXIgZGVwZW5kUHJvcCA9IGRlcC5fb3duZXJQcm9wO1xuICAgICAgICAgICAgaXRlbSA9IGl0ZW1zTWFwW2RlcGVuZFVybF07XG4gICAgICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGxvYWRDYWxsYmFja0N0eCA9IGRlcDtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvYWRDYWxsYmFjayAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZW0uY29udGVudDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RpbGxVc2VVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgJiYgY2MuUmF3QXNzZXQud2FzUmF3QXNzZXRUeXBlKHZhbHVlLmNvbnN0cnVjdG9yKSkgPyB2YWx1ZS5uYXRpdmVVcmwgOiBpdGVtLnJhd1VybDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX293bmVyUHJvcCA9PT0gJ19uYXRpdmVBc3NldCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3duZXIudXJsID0gaXRlbS51cmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX293bmVyW3RoaXMuX293bmVyUHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS51dWlkICE9PSBhc3NldC5fdXVpZCAmJiBkZXBlbmRLZXlzLmluZGV4T2YoaXRlbS5pZCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZEtleXMucHVzaChpdGVtLmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpdGVtLmNvbXBsZXRlIHx8IGl0ZW0uY29udGVudCkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChDQ19FRElUT1IgJiYgaXRlbS5lcnJvci5lcnJvckNvZGUgPT09ICdkYi5OT1RGT1VORCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWlzc2luZ0Fzc2V0UmVwb3J0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgTWlzc2luZ09iamVjdFJlcG9ydGVyID0gRWRpdG9yLnJlcXVpcmUoJ2FwcDovL2VkaXRvci9wYWdlL3NjZW5lLXV0aWxzL21pc3Npbmctb2JqZWN0LXJlcG9ydGVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZ0Fzc2V0UmVwb3J0ZXIgPSBuZXcgTWlzc2luZ09iamVjdFJlcG9ydGVyKGFzc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1pc3NpbmdBc3NldFJlcG9ydGVyLnN0YXNoQnlPd25lcihkZXBlbmRPYmosIGRlcGVuZFByb3AsIEVkaXRvci5zZXJpYWxpemUuYXNBc3NldChkZXBlbmRTcmMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLl90aHJvdyhpdGVtLmVycm9yLm1lc3NhZ2UgfHwgaXRlbS5lcnJvci5lcnJvck1lc3NhZ2UgfHwgaXRlbS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRDYWxsYmFjay5jYWxsKGxvYWRDYWxsYmFja0N0eCwgaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaXRlbSB3YXMgcmVtb3ZlZCBmcm9tIGNhY2hlLCBidXQgcmVhZHkgaW4gcGlwZWxpbmUgYWN0dWFsbHlcbiAgICAgICAgICAgICAgICB2YXIgcXVldWUgPSBMb2FkaW5nSXRlbXMuZ2V0UXVldWUoaXRlbSk7XG4gICAgICAgICAgICAgICAgLy8gSGFjayB0byBnZXQgYSBiZXR0ZXIgYmVoYXZpb3JcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHF1ZXVlLl9jYWxsYmFja1RhYmxlW2RlcGVuZFNyY107XG4gICAgICAgICAgICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdC51bnNoaWZ0KGxvYWRDYWxsYmFjaywgbG9hZENhbGxiYWNrQ3R4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLmFkZExpc3RlbmVyKGRlcGVuZFNyYywgbG9hZENhbGxiYWNrLCBsb2FkQ2FsbGJhY2tDdHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBFbWl0IGRlcGVuZGVuY3kgZXJyb3JzIGluIHJ1bnRpbWUsIGJ1dCBub3QgaW4gZWRpdG9yLFxuICAgICAgICAvLyBiZWNhdXNlIGVkaXRvciBuZWVkIHRvIG9wZW4gdGhlIHNjZW5lIC8gcHJlZmFiIHRvIGxldCB1c2VyIGZpeCBtaXNzaW5nIGFzc2V0IGlzc3Vlc1xuICAgICAgICBpZiAoQ0NfRURJVE9SICYmIG1pc3NpbmdBc3NldFJlcG9ydGVyKSB7XG4gICAgICAgICAgICBtaXNzaW5nQXNzZXRSZXBvcnRlci5yZXBvcnRCeU93bmVyKCk7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBhc3NldCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWVycm9ycyAmJiBhc3NldC5vbkxvYWQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhc3NldC5vbkxvYWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2MuX3Rocm93KGUpO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvcnMsIGFzc2V0KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4vLyBjYW4gZGVmZXJyZWQgbG9hZCByYXcgYXNzZXRzIGluIHJ1bnRpbWVcbmZ1bmN0aW9uIGNhbkRlZmVycmVkTG9hZCAoYXNzZXQsIGl0ZW0sIGlzU2NlbmUpIHtcbiAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHJlcyA9IGl0ZW0uZGVmZXJyZWRMb2FkUmF3O1xuICAgIGlmIChyZXMpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgYXNzZXQgc3VwcG9ydCBkZWZlcnJlZFxuICAgICAgICBpZiAoKGFzc2V0IGluc3RhbmNlb2YgY2MuQXNzZXQpICYmIGFzc2V0LmNvbnN0cnVjdG9yLnByZXZlbnREZWZlcnJlZExvYWREZXBlbmRlbnRzKSB7XG4gICAgICAgICAgICByZXMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1NjZW5lKSB7XG4gICAgICAgIGlmIChhc3NldCBpbnN0YW5jZW9mIGNjLlNjZW5lQXNzZXQgfHwgYXNzZXQgaW5zdGFuY2VvZiBjYy5QcmVmYWIpIHtcbiAgICAgICAgICAgIHJlcyA9IGFzc2V0LmFzeW5jTG9hZEFzc2V0cztcbiAgICAgICAgICAgIC8vaWYgKHJlcykge1xuICAgICAgICAgICAgLy8gICAgY2MubG9nKCdkZWZlcnJlZCBsb2FkIHJhdyBhc3NldHMgZm9yICcgKyBpdGVtLmlkKTtcbiAgICAgICAgICAgIC8vfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbnZhciBNaXNzaW5nQ2xhc3M7XG5cbmZ1bmN0aW9uIGxvYWRVdWlkIChpdGVtLCBjYWxsYmFjaykge1xuICAgIGlmIChDQ19FRElUT1IpIHtcbiAgICAgICAgTWlzc2luZ0NsYXNzID0gTWlzc2luZ0NsYXNzIHx8IEVkaXRvci5yZXF1aXJlKCdhcHA6Ly9lZGl0b3IvcGFnZS9zY2VuZS11dGlscy9taXNzaW5nLWNsYXNzLXJlcG9ydGVyJykuTWlzc2luZ0NsYXNzO1xuICAgIH1cblxuICAgIHZhciBqc29uO1xuICAgIGlmICh0eXBlb2YgaXRlbS5jb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAganNvbiA9IEpTT04ucGFyc2UoaXRlbS5jb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihkZWJ1Zy5nZXRFcnJvcig0OTIzLCBpdGVtLmlkLCBlLnN0YWNrKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAganNvbiA9IGl0ZW0uY29udGVudDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoZGVidWcuZ2V0RXJyb3IoNDkyNCkpO1xuICAgIH1cblxuICAgIHZhciBjbGFzc0ZpbmRlcjtcbiAgICB2YXIgaXNTY2VuZSA9IGlzU2NlbmVPYmooanNvbik7XG4gICAgaWYgKGlzU2NlbmUpIHtcbiAgICAgICAgaWYgKENDX0VESVRPUikge1xuICAgICAgICAgICAgTWlzc2luZ0NsYXNzLmhhc01pc3NpbmdDbGFzcyA9IGZhbHNlO1xuICAgICAgICAgICAgY2xhc3NGaW5kZXIgPSBmdW5jdGlvbiAodHlwZSwgZGF0YSwgb3duZXIsIHByb3BOYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IE1pc3NpbmdDbGFzcy5jbGFzc0ZpbmRlcih0eXBlLCBkYXRhLCBvd25lciwgcHJvcE5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNjLl9NaXNzaW5nU2NyaXB0LmdldE1pc3NpbmdXcmFwcGVyKHR5cGUsIGRhdGEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNsYXNzRmluZGVyLm9uRGVyZWZlcmVuY2VkID0gTWlzc2luZ0NsYXNzLmNsYXNzRmluZGVyLm9uRGVyZWZlcmVuY2VkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2xhc3NGaW5kZXIgPSBjYy5fTWlzc2luZ1NjcmlwdC5zYWZlRmluZENsYXNzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjbGFzc0ZpbmRlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgdmFyIGNscyA9IGpzLl9nZXRDbGFzc0J5SWQoaWQpO1xuICAgICAgICAgICAgaWYgKGNscykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYy53YXJuSUQoNDkwMywgaWQpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgdGRJbmZvID0gY2MuZGVzZXJpYWxpemUuRGV0YWlscy5wb29sLmdldCgpO1xuXG4gICAgdmFyIGFzc2V0O1xuICAgIHRyeSB7XG4gICAgICAgIGFzc2V0ID0gY2MuZGVzZXJpYWxpemUoanNvbiwgdGRJbmZvLCB7XG4gICAgICAgICAgICBjbGFzc0ZpbmRlcjogY2xhc3NGaW5kZXIsXG4gICAgICAgICAgICB0YXJnZXQ6IGl0ZW0uZXhpc3RpbmdBc3NldCxcbiAgICAgICAgICAgIGN1c3RvbUVudjogaXRlbVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY2MuZGVzZXJpYWxpemUuRGV0YWlscy5wb29sLnB1dCh0ZEluZm8pO1xuICAgICAgICB2YXIgZXJyID0gQ0NfSlNCIHx8IENDX1JVTlRJTUUgPyAoZSArICdcXG4nICsgZS5zdGFjaykgOiBlLnN0YWNrO1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKGRlYnVnLmdldEVycm9yKDQ5MjUsIGl0ZW0uaWQsIGVycikpO1xuICAgIH1cblxuICAgIGFzc2V0Ll91dWlkID0gaXRlbS51dWlkO1xuICAgIGFzc2V0LnVybCA9IGFzc2V0Lm5hdGl2ZVVybDtcblxuICAgIGlmIChDQ19FRElUT1IgJiYgaXNTY2VuZSAmJiBNaXNzaW5nQ2xhc3MuaGFzTWlzc2luZ0NsYXNzKSB7XG4gICAgICAgIE1pc3NpbmdDbGFzcy5yZXBvcnRNaXNzaW5nQ2xhc3MoYXNzZXQpO1xuICAgIH1cblxuICAgIHZhciBkZWZlcnJlZExvYWQgPSBjYW5EZWZlcnJlZExvYWQoYXNzZXQsIGl0ZW0sIGlzU2NlbmUpO1xuICAgIHZhciBkZXBlbmRzID0gcGFyc2VEZXBlbmRzKGl0ZW0sIGFzc2V0LCB0ZEluZm8sIGRlZmVycmVkTG9hZCk7XG5cbiAgICBjYy5kZXNlcmlhbGl6ZS5EZXRhaWxzLnBvb2wucHV0KHRkSW5mbyk7XG5cbiAgICBpZiAoZGVwZW5kcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKGFzc2V0Lm9uTG9hZCkgYXNzZXQub25Mb2FkKCk7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBhc3NldCk7XG4gICAgfVxuICAgIGxvYWREZXBlbmRzKHRoaXMucGlwZWxpbmUsIGl0ZW0sIGFzc2V0LCBkZXBlbmRzLCBjYWxsYmFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbG9hZFV1aWQ7XG5sb2FkVXVpZC5pc1NjZW5lT2JqID0gaXNTY2VuZU9iajtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBqcyA9IHJlcXVpcmUoJy4uL3BsYXRmb3JtL2pzJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCcuLi9DQ0RlYnVnJyk7XG5yZXF1aXJlKCcuLi9wbGF0Zm9ybS9kZXNlcmlhbGl6ZScpO1xudmFyIExvYWRpbmdJdGVtcyA9IHJlcXVpcmUoJy4vbG9hZGluZy1pdGVtcycpO1xuXG5mdW5jdGlvbiBpc1NjZW5lT2JqKGpzb24pIHtcbiAgICB2YXIgU0NFTkVfSUQgPSAnY2MuU2NlbmUnO1xuICAgIHZhciBQUkVGQUJfSUQgPSAnY2MuUHJlZmFiJztcbiAgICByZXR1cm4ganNvbiAmJiAoanNvblswXSAmJiBqc29uWzBdLl9fdHlwZV9fID09PSBTQ0VORV9JRCB8fCBqc29uWzFdICYmIGpzb25bMV0uX190eXBlX18gPT09IFNDRU5FX0lEIHx8IGpzb25bMF0gJiYganNvblswXS5fX3R5cGVfXyA9PT0gUFJFRkFCX0lEKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEZXBlbmRzKGl0ZW0sIGFzc2V0LCB0ZEluZm8sIGRlZmVycmVkTG9hZFJhd0Fzc2V0c0luUnVudGltZSkge1xuICAgIHZhciB1dWlkTGlzdCA9IHRkSW5mby51dWlkTGlzdDtcbiAgICB2YXIgb2JqTGlzdCA9IHRkSW5mby51dWlkT2JqTGlzdDtcbiAgICB2YXIgcHJvcExpc3QgPSB0ZEluZm8udXVpZFByb3BMaXN0O1xuICAgIHZhciBzdGlsbFVzZVVybCA9IHRkSW5mby5fc3RpbGxVc2VVcmw7XG4gICAgdmFyIGRlcGVuZHM7XG4gICAgdmFyIGksIGRlcGVuZFV1aWQ7XG4gICAgLy8gY2FjaGUgZGVwZW5kZW5jaWVzIGZvciBhdXRvIHJlbGVhc2VcbiAgICB2YXIgZGVwZW5kS2V5cyA9IGl0ZW0uZGVwZW5kS2V5cyA9IFtdO1xuXG4gICAgaWYgKGRlZmVycmVkTG9hZFJhd0Fzc2V0c0luUnVudGltZSkge1xuICAgICAgICBkZXBlbmRzID0gW107XG4gICAgICAgIC8vIHBhcnNlIGRlcGVuZHMgYXNzZXRzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB1dWlkTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGVwZW5kVXVpZCA9IHV1aWRMaXN0W2ldO1xuICAgICAgICAgICAgdmFyIG9iaiA9IG9iakxpc3RbaV07XG4gICAgICAgICAgICB2YXIgcHJvcCA9IHByb3BMaXN0W2ldO1xuICAgICAgICAgICAgdmFyIGluZm8gPSBjYy5Bc3NldExpYnJhcnkuX2dldEFzc2V0SW5mb0luUnVudGltZShkZXBlbmRVdWlkKTtcbiAgICAgICAgICAgIGlmIChpbmZvLnJhdykge1xuICAgICAgICAgICAgICAgIC8vIHNraXAgcHJlbG9hZGluZyByYXcgYXNzZXRzXG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IGluZm8udXJsO1xuICAgICAgICAgICAgICAgIG9ialtwcm9wXSA9IHVybDtcbiAgICAgICAgICAgICAgICBkZXBlbmRLZXlzLnB1c2godXJsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVjbGFyZSBkZXBlbmRzIGFzc2V0c1xuICAgICAgICAgICAgICAgIGRlcGVuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd1dWlkJyxcbiAgICAgICAgICAgICAgICAgICAgdXVpZDogZGVwZW5kVXVpZCxcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWRMb2FkUmF3OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBfb3duZXI6IG9iaixcbiAgICAgICAgICAgICAgICAgICAgX293bmVyUHJvcDogcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgX3N0aWxsVXNlVXJsOiBzdGlsbFVzZVVybFtpXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZGVwZW5kcyA9IG5ldyBBcnJheSh1dWlkTGlzdC5sZW5ndGgpO1xuXG4gICAgICAgIC8vIGRlY2xhcmUgZGVwZW5kcyBhc3NldHNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHV1aWRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkZXBlbmRVdWlkID0gdXVpZExpc3RbaV07XG4gICAgICAgICAgICBkZXBlbmRzW2ldID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICd1dWlkJyxcbiAgICAgICAgICAgICAgICB1dWlkOiBkZXBlbmRVdWlkLFxuICAgICAgICAgICAgICAgIF9vd25lcjogb2JqTGlzdFtpXSxcbiAgICAgICAgICAgICAgICBfb3duZXJQcm9wOiBwcm9wTGlzdFtpXSxcbiAgICAgICAgICAgICAgICBfc3RpbGxVc2VVcmw6IHN0aWxsVXNlVXJsW2ldXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbG9hZCBuYXRpdmUgb2JqZWN0IChJbWFnZS9BdWRpbykgYXMgZGVwZW5kc1xuICAgICAgICBpZiAoYXNzZXQuX25hdGl2ZSAmJiAhYXNzZXQuY29uc3RydWN0b3IucHJldmVudFByZWxvYWROYXRpdmVPYmplY3QpIHtcbiAgICAgICAgICAgIGRlcGVuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgdXJsOiBhc3NldC5uYXRpdmVVcmwsXG4gICAgICAgICAgICAgICAgX293bmVyOiBhc3NldCxcbiAgICAgICAgICAgICAgICBfb3duZXJQcm9wOiAnX25hdGl2ZUFzc2V0J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVwZW5kcztcbn1cblxuZnVuY3Rpb24gbG9hZERlcGVuZHMocGlwZWxpbmUsIGl0ZW0sIGFzc2V0LCBkZXBlbmRzLCBjYWxsYmFjaykge1xuICAgIC8vIFByZWRlZmluZSBjb250ZW50IGZvciBkZXBlbmRlbmNpZXMgdXNhZ2VcbiAgICBpdGVtLmNvbnRlbnQgPSBhc3NldDtcbiAgICB2YXIgZGVwZW5kS2V5cyA9IGl0ZW0uZGVwZW5kS2V5cztcbiAgICBwaXBlbGluZS5mbG93SW5EZXBzKGl0ZW0sIGRlcGVuZHMsIGZ1bmN0aW9uIChlcnJvcnMsIGl0ZW1zKSB7XG4gICAgICAgIHZhciBpdGVtLCBtaXNzaW5nQXNzZXRSZXBvcnRlcjtcbiAgICAgICAgdmFyIGl0ZW1zTWFwID0gaXRlbXMubWFwO1xuICAgICAgICBmb3IgKHZhciBzcmMgaW4gaXRlbXNNYXApIHtcbiAgICAgICAgICAgIGl0ZW0gPSBpdGVtc01hcFtzcmNdO1xuICAgICAgICAgICAgaWYgKGl0ZW0udXVpZCAmJiBpdGVtLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmNvbnRlbnQuX3V1aWQgPSBpdGVtLnV1aWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXBlbmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbG9hZENhbGxiYWNrID0gZnVuY3Rpb24gbG9hZENhbGxiYWNrKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVtLmNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0aWxsVXNlVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgJiYgY2MuUmF3QXNzZXQud2FzUmF3QXNzZXRUeXBlKHZhbHVlLmNvbnN0cnVjdG9yKSA/IHZhbHVlLm5hdGl2ZVVybCA6IGl0ZW0ucmF3VXJsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb3duZXJQcm9wID09PSAnX25hdGl2ZUFzc2V0Jykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vd25lci51cmwgPSBpdGVtLnVybDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fb3duZXJbdGhpcy5fb3duZXJQcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLnV1aWQgIT09IGFzc2V0Ll91dWlkICYmIGRlcGVuZEtleXMuaW5kZXhPZihpdGVtLmlkKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGVwZW5kS2V5cy5wdXNoKGl0ZW0uaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBkZXAgPSBkZXBlbmRzW2ldO1xuICAgICAgICAgICAgdmFyIGRlcGVuZFNyYyA9IGRlcC51dWlkO1xuICAgICAgICAgICAgdmFyIGRlcGVuZFVybCA9IGRlcC51cmw7XG4gICAgICAgICAgICB2YXIgZGVwZW5kT2JqID0gZGVwLl9vd25lcjtcbiAgICAgICAgICAgIHZhciBkZXBlbmRQcm9wID0gZGVwLl9vd25lclByb3A7XG4gICAgICAgICAgICBpdGVtID0gaXRlbXNNYXBbZGVwZW5kVXJsXTtcbiAgICAgICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbG9hZENhbGxiYWNrQ3R4ID0gZGVwO1xuXG5cbiAgICAgICAgICAgIGlmIChpdGVtLmNvbXBsZXRlIHx8IGl0ZW0uY29udGVudCkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChDQ19FRElUT1IgJiYgaXRlbS5lcnJvci5lcnJvckNvZGUgPT09ICdkYi5OT1RGT1VORCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWlzc2luZ0Fzc2V0UmVwb3J0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgTWlzc2luZ09iamVjdFJlcG9ydGVyID0gRWRpdG9yLnJlcXVpcmUoJ2FwcDovL2VkaXRvci9wYWdlL3NjZW5lLXV0aWxzL21pc3Npbmctb2JqZWN0LXJlcG9ydGVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZ0Fzc2V0UmVwb3J0ZXIgPSBuZXcgTWlzc2luZ09iamVjdFJlcG9ydGVyKGFzc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1pc3NpbmdBc3NldFJlcG9ydGVyLnN0YXNoQnlPd25lcihkZXBlbmRPYmosIGRlcGVuZFByb3AsIEVkaXRvci5zZXJpYWxpemUuYXNBc3NldChkZXBlbmRTcmMpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLl90aHJvdyhpdGVtLmVycm9yLm1lc3NhZ2UgfHwgaXRlbS5lcnJvci5lcnJvck1lc3NhZ2UgfHwgaXRlbS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2FkQ2FsbGJhY2suY2FsbChsb2FkQ2FsbGJhY2tDdHgsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaXRlbSB3YXMgcmVtb3ZlZCBmcm9tIGNhY2hlLCBidXQgcmVhZHkgaW4gcGlwZWxpbmUgYWN0dWFsbHlcbiAgICAgICAgICAgICAgICB2YXIgcXVldWUgPSBMb2FkaW5nSXRlbXMuZ2V0UXVldWUoaXRlbSk7XG4gICAgICAgICAgICAgICAgLy8gSGFjayB0byBnZXQgYSBiZXR0ZXIgYmVoYXZpb3JcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHF1ZXVlLl9jYWxsYmFja1RhYmxlW2RlcGVuZFNyY107XG4gICAgICAgICAgICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdC51bnNoaWZ0KGxvYWRDYWxsYmFjaywgbG9hZENhbGxiYWNrQ3R4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZS5hZGRMaXN0ZW5lcihkZXBlbmRTcmMsIGxvYWRDYWxsYmFjaywgbG9hZENhbGxiYWNrQ3R4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW1pdCBkZXBlbmRlbmN5IGVycm9ycyBpbiBydW50aW1lLCBidXQgbm90IGluIGVkaXRvcixcbiAgICAgICAgLy8gYmVjYXVzZSBlZGl0b3IgbmVlZCB0byBvcGVuIHRoZSBzY2VuZSAvIHByZWZhYiB0byBsZXQgdXNlciBmaXggbWlzc2luZyBhc3NldCBpc3N1ZXNcbiAgICAgICAgaWYgKENDX0VESVRPUiAmJiBtaXNzaW5nQXNzZXRSZXBvcnRlcikge1xuICAgICAgICAgICAgbWlzc2luZ0Fzc2V0UmVwb3J0ZXIucmVwb3J0QnlPd25lcigpO1xuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgYXNzZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFlcnJvcnMgJiYgYXNzZXQub25Mb2FkKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXQub25Mb2FkKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjYy5fdGhyb3coZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2soZXJyb3JzLCBhc3NldCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLy8gY2FuIGRlZmVycmVkIGxvYWQgcmF3IGFzc2V0cyBpbiBydW50aW1lXG5mdW5jdGlvbiBjYW5EZWZlcnJlZExvYWQoYXNzZXQsIGl0ZW0sIGlzU2NlbmUpIHtcbiAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHJlcyA9IGl0ZW0uZGVmZXJyZWRMb2FkUmF3O1xuICAgIGlmIChyZXMpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgYXNzZXQgc3VwcG9ydCBkZWZlcnJlZFxuICAgICAgICBpZiAoYXNzZXQgaW5zdGFuY2VvZiBjYy5Bc3NldCAmJiBhc3NldC5jb25zdHJ1Y3Rvci5wcmV2ZW50RGVmZXJyZWRMb2FkRGVwZW5kZW50cykge1xuICAgICAgICAgICAgcmVzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzU2NlbmUpIHtcbiAgICAgICAgaWYgKGFzc2V0IGluc3RhbmNlb2YgY2MuU2NlbmVBc3NldCB8fCBhc3NldCBpbnN0YW5jZW9mIGNjLlByZWZhYikge1xuICAgICAgICAgICAgcmVzID0gYXNzZXQuYXN5bmNMb2FkQXNzZXRzO1xuICAgICAgICAgICAgLy9pZiAocmVzKSB7XG4gICAgICAgICAgICAvLyAgICBjYy5sb2coJ2RlZmVycmVkIGxvYWQgcmF3IGFzc2V0cyBmb3IgJyArIGl0ZW0uaWQpO1xuICAgICAgICAgICAgLy99XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxudmFyIE1pc3NpbmdDbGFzcztcblxuZnVuY3Rpb24gbG9hZFV1aWQoaXRlbSwgY2FsbGJhY2spIHtcbiAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgIE1pc3NpbmdDbGFzcyA9IE1pc3NpbmdDbGFzcyB8fCBFZGl0b3IucmVxdWlyZSgnYXBwOi8vZWRpdG9yL3BhZ2Uvc2NlbmUtdXRpbHMvbWlzc2luZy1jbGFzcy1yZXBvcnRlcicpLk1pc3NpbmdDbGFzcztcbiAgICB9XG5cbiAgICB2YXIganNvbjtcbiAgICBpZiAodHlwZW9mIGl0ZW0uY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGl0ZW0uY29udGVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoZGVidWcuZ2V0RXJyb3IoNDkyMywgaXRlbS5pZCwgZS5zdGFjaykpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChfdHlwZW9mKGl0ZW0uY29udGVudCkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGpzb24gPSBpdGVtLmNvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihkZWJ1Zy5nZXRFcnJvcig0OTI0KSk7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzRmluZGVyO1xuICAgIHZhciBpc1NjZW5lID0gaXNTY2VuZU9iaihqc29uKTtcbiAgICBpZiAoaXNTY2VuZSkge1xuICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICBNaXNzaW5nQ2xhc3MuaGFzTWlzc2luZ0NsYXNzID0gZmFsc2U7XG4gICAgICAgICAgICBjbGFzc0ZpbmRlciA9IGZ1bmN0aW9uIGNsYXNzRmluZGVyKHR5cGUsIGRhdGEsIG93bmVyLCBwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBNaXNzaW5nQ2xhc3MuY2xhc3NGaW5kZXIodHlwZSwgZGF0YSwgb3duZXIsIHByb3BOYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjYy5fTWlzc2luZ1NjcmlwdC5nZXRNaXNzaW5nV3JhcHBlcih0eXBlLCBkYXRhKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjbGFzc0ZpbmRlci5vbkRlcmVmZXJlbmNlZCA9IE1pc3NpbmdDbGFzcy5jbGFzc0ZpbmRlci5vbkRlcmVmZXJlbmNlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsYXNzRmluZGVyID0gY2MuX01pc3NpbmdTY3JpcHQuc2FmZUZpbmRDbGFzcztcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNsYXNzRmluZGVyID0gZnVuY3Rpb24gY2xhc3NGaW5kZXIoaWQpIHtcbiAgICAgICAgICAgIHZhciBjbHMgPSBqcy5fZ2V0Q2xhc3NCeUlkKGlkKTtcbiAgICAgICAgICAgIGlmIChjbHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2Mud2FybklEKDQ5MDMsIGlkKTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Q7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHRkSW5mbyA9IGNjLmRlc2VyaWFsaXplLkRldGFpbHMucG9vbC5nZXQoKTtcblxuICAgIHZhciBhc3NldDtcbiAgICB0cnkge1xuICAgICAgICBhc3NldCA9IGNjLmRlc2VyaWFsaXplKGpzb24sIHRkSW5mbywge1xuICAgICAgICAgICAgY2xhc3NGaW5kZXI6IGNsYXNzRmluZGVyLFxuICAgICAgICAgICAgdGFyZ2V0OiBpdGVtLmV4aXN0aW5nQXNzZXQsXG4gICAgICAgICAgICBjdXN0b21FbnY6IGl0ZW1cbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYy5kZXNlcmlhbGl6ZS5EZXRhaWxzLnBvb2wucHV0KHRkSW5mbyk7XG4gICAgICAgIHZhciBlcnIgPSBDQ19KU0IgfHwgQ0NfUlVOVElNRSA/IGUgKyAnXFxuJyArIGUuc3RhY2sgOiBlLnN0YWNrO1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKGRlYnVnLmdldEVycm9yKDQ5MjUsIGl0ZW0uaWQsIGVycikpO1xuICAgIH1cblxuICAgIGFzc2V0Ll91dWlkID0gaXRlbS51dWlkO1xuICAgIGFzc2V0LnVybCA9IGFzc2V0Lm5hdGl2ZVVybDtcblxuICAgIGlmIChDQ19FRElUT1IgJiYgaXNTY2VuZSAmJiBNaXNzaW5nQ2xhc3MuaGFzTWlzc2luZ0NsYXNzKSB7XG4gICAgICAgIE1pc3NpbmdDbGFzcy5yZXBvcnRNaXNzaW5nQ2xhc3MoYXNzZXQpO1xuICAgIH1cblxuICAgIHZhciBkZWZlcnJlZExvYWQgPSBjYW5EZWZlcnJlZExvYWQoYXNzZXQsIGl0ZW0sIGlzU2NlbmUpO1xuICAgIHZhciBkZXBlbmRzID0gcGFyc2VEZXBlbmRzKGl0ZW0sIGFzc2V0LCB0ZEluZm8sIGRlZmVycmVkTG9hZCk7XG5cbiAgICBjYy5kZXNlcmlhbGl6ZS5EZXRhaWxzLnBvb2wucHV0KHRkSW5mbyk7XG5cbiAgICBpZiAoZGVwZW5kcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKGFzc2V0Lm9uTG9hZCkgYXNzZXQub25Mb2FkKCk7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBhc3NldCk7XG4gICAgfVxuICAgIGxvYWREZXBlbmRzKHRoaXMucGlwZWxpbmUsIGl0ZW0sIGFzc2V0LCBkZXBlbmRzLCBjYWxsYmFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbG9hZFV1aWQ7XG5sb2FkVXVpZC5pc1NjZW5lT2JqID0gaXNTY2VuZU9iajtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluVjFhV1F0Ykc5aFpHVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYkltcHpJaXdpY21WeGRXbHlaU0lzSW1SbFluVm5JaXdpVEc5aFpHbHVaMGwwWlcxeklpd2lhWE5UWTJWdVpVOWlhaUlzSW1wemIyNGlMQ0pUUTBWT1JWOUpSQ0lzSWxCU1JVWkJRbDlKUkNJc0lsOWZkSGx3WlY5Zklpd2ljR0Z5YzJWRVpYQmxibVJ6SWl3aWFYUmxiU0lzSW1GemMyVjBJaXdpZEdSSmJtWnZJaXdpWkdWbVpYSnlaV1JNYjJGa1VtRjNRWE56WlhSelNXNVNkVzUwYVcxbElpd2lkWFZwWkV4cGMzUWlMQ0p2WW1wTWFYTjBJaXdpZFhWcFpFOWlha3hwYzNRaUxDSndjbTl3VEdsemRDSXNJblYxYVdSUWNtOXdUR2x6ZENJc0luTjBhV3hzVlhObFZYSnNJaXdpWDNOMGFXeHNWWE5sVlhKc0lpd2laR1Z3Wlc1a2N5SXNJbWtpTENKa1pYQmxibVJWZFdsa0lpd2laR1Z3Wlc1a1MyVjVjeUlzSW14bGJtZDBhQ0lzSW05aWFpSXNJbkJ5YjNBaUxDSnBibVp2SWl3aVkyTWlMQ0pCYzNObGRFeHBZbkpoY25raUxDSmZaMlYwUVhOelpYUkpibVp2U1c1U2RXNTBhVzFsSWl3aWNtRjNJaXdpZFhKc0lpd2ljSFZ6YUNJc0luUjVjR1VpTENKMWRXbGtJaXdpWkdWbVpYSnlaV1JNYjJGa1VtRjNJaXdpWDI5M2JtVnlJaXdpWDI5M2JtVnlVSEp2Y0NJc0lrRnljbUY1SWl3aVgyNWhkR2wyWlNJc0ltTnZibk4wY25WamRHOXlJaXdpY0hKbGRtVnVkRkJ5Wld4dllXUk9ZWFJwZG1WUFltcGxZM1FpTENKdVlYUnBkbVZWY213aUxDSnNiMkZrUkdWd1pXNWtjeUlzSW5CcGNHVnNhVzVsSWl3aVkyRnNiR0poWTJzaUxDSmpiMjUwWlc1MElpd2labXh2ZDBsdVJHVndjeUlzSW1WeWNtOXljeUlzSW1sMFpXMXpJaXdpYldsemMybHVaMEZ6YzJWMFVtVndiM0owWlhJaUxDSnBkR1Z0YzAxaGNDSXNJbTFoY0NJc0luTnlZeUlzSWw5MWRXbGtJaXdpYkc5aFpFTmhiR3hpWVdOcklpd2lkbUZzZFdVaUxDSlNZWGRCYzNObGRDSXNJbmRoYzFKaGQwRnpjMlYwVkhsd1pTSXNJbkpoZDFWeWJDSXNJbWx1WkdWNFQyWWlMQ0pwWkNJc0ltUmxjQ0lzSW1SbGNHVnVaRk55WXlJc0ltUmxjR1Z1WkZWeWJDSXNJbVJsY0dWdVpFOWlhaUlzSW1SbGNHVnVaRkJ5YjNBaUxDSnNiMkZrUTJGc2JHSmhZMnREZEhnaUxDSmpiMjF3YkdWMFpTSXNJbVZ5Y205eUlpd2lRME5mUlVSSlZFOVNJaXdpWlhKeWIzSkRiMlJsSWl3aVRXbHpjMmx1WjA5aWFtVmpkRkpsY0c5eWRHVnlJaXdpUldScGRHOXlJaXdpYzNSaGMyaENlVTkzYm1WeUlpd2ljMlZ5YVdGc2FYcGxJaXdpWVhOQmMzTmxkQ0lzSWw5MGFISnZkeUlzSW0xbGMzTmhaMlVpTENKbGNuSnZjazFsYzNOaFoyVWlMQ0pqWVd4c0lpd2ljWFZsZFdVaUxDSm5aWFJSZFdWMVpTSXNJbXhwYzNRaUxDSmZZMkZzYkdKaFkydFVZV0pzWlNJc0luVnVjMmhwWm5RaUxDSmhaR1JNYVhOMFpXNWxjaUlzSW5KbGNHOXlkRUo1VDNkdVpYSWlMQ0p2Ymt4dllXUWlMQ0psSWl3aVkyRnVSR1ZtWlhKeVpXUk1iMkZrSWl3aWFYTlRZMlZ1WlNJc0luSmxjeUlzSWtGemMyVjBJaXdpY0hKbGRtVnVkRVJsWm1WeWNtVmtURzloWkVSbGNHVnVaR1Z1ZEhNaUxDSlRZMlZ1WlVGemMyVjBJaXdpVUhKbFptRmlJaXdpWVhONWJtTk1iMkZrUVhOelpYUnpJaXdpVFdsemMybHVaME5zWVhOeklpd2liRzloWkZWMWFXUWlMQ0pLVTA5T0lpd2ljR0Z5YzJVaUxDSkZjbkp2Y2lJc0ltZGxkRVZ5Y205eUlpd2ljM1JoWTJzaUxDSmpiR0Z6YzBacGJtUmxjaUlzSW1oaGMwMXBjM05wYm1kRGJHRnpjeUlzSW1SaGRHRWlMQ0p2ZDI1bGNpSXNJbkJ5YjNCT1lXMWxJaXdpWDAxcGMzTnBibWRUWTNKcGNIUWlMQ0puWlhSTmFYTnphVzVuVjNKaGNIQmxjaUlzSW05dVJHVnlaV1psY21WdVkyVmtJaXdpYzJGbVpVWnBibVJEYkdGemN5SXNJbU5zY3lJc0lsOW5aWFJEYkdGemMwSjVTV1FpTENKM1lYSnVTVVFpTENKUFltcGxZM1FpTENKa1pYTmxjbWxoYkdsNlpTSXNJa1JsZEdGcGJITWlMQ0p3YjI5c0lpd2laMlYwSWl3aWRHRnlaMlYwSWl3aVpYaHBjM1JwYm1kQmMzTmxkQ0lzSW1OMWMzUnZiVVZ1ZGlJc0luQjFkQ0lzSW1WeWNpSXNJa05EWDBwVFFpSXNJa05EWDFKVlRsUkpUVVVpTENKeVpYQnZjblJOYVhOemFXNW5RMnhoYzNNaUxDSmtaV1psY25KbFpFeHZZV1FpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenM3TzBGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJNRUpCTEVsQlFVMUJMRXRCUVV0RExGRkJRVkVzWjBKQlFWSXNRMEZCV0R0QlFVTkJMRWxCUVUxRExGRkJRVkZFTEZGQlFWRXNXVUZCVWl4RFFVRmtPMEZCUTBGQkxGRkJRVkVzZVVKQlFWSTdRVUZEUVN4SlFVRk5SU3hsUVVGbFJpeFJRVUZSTEdsQ1FVRlNMRU5CUVhKQ096dEJRVVZCTEZOQlFWTkhMRlZCUVZRc1EwRkJjVUpETEVsQlFYSkNMRVZCUVRKQ08wRkJRM1pDTEZGQlFVbERMRmRCUVZjc1ZVRkJaanRCUVVOQkxGRkJRVWxETEZsQlFWa3NWMEZCYUVJN1FVRkRRU3hYUVVGUFJpeFRRVU5MUVN4TFFVRkxMRU5CUVV3c1MwRkJWMEVzUzBGQlN5eERRVUZNTEVWQlFWRkhMRkZCUVZJc1MwRkJjVUpHTEZGQlFXcERMRWxCUTBORUxFdEJRVXNzUTBGQlRDeExRVUZYUVN4TFFVRkxMRU5CUVV3c1JVRkJVVWNzVVVGQlVpeExRVUZ4UWtZc1VVRkVha01zU1VGRlEwUXNTMEZCU3l4RFFVRk1MRXRCUVZkQkxFdEJRVXNzUTBGQlRDeEZRVUZSUnl4UlFVRlNMRXRCUVhGQ1JDeFRRVWh5UXl4RFFVRlFPMEZCUzBnN08wRkJSVVFzVTBGQlUwVXNXVUZCVkN4RFFVRjFRa01zU1VGQmRrSXNSVUZCTmtKRExFdEJRVGRDTEVWQlFXOURReXhOUVVGd1F5eEZRVUUwUTBNc09FSkJRVFZETEVWQlFUUkZPMEZCUTNoRkxGRkJRVWxETEZkQlFWZEdMRTlCUVU5RkxGRkJRWFJDTzBGQlEwRXNVVUZCU1VNc1ZVRkJWVWdzVDBGQlQwa3NWMEZCY2tJN1FVRkRRU3hSUVVGSlF5eFhRVUZYVEN4UFFVRlBUU3haUVVGMFFqdEJRVU5CTEZGQlFVbERMR05CUVdOUUxFOUJRVTlSTEZsQlFYcENPMEZCUTBFc1VVRkJTVU1zVDBGQlNqdEJRVU5CTEZGQlFVbERMRU5CUVVvc1JVRkJUME1zVlVGQlVEdEJRVU5CTzBGQlEwRXNVVUZCU1VNc1lVRkJZV1FzUzBGQlMyTXNWVUZCVEN4SFFVRnJRaXhGUVVGdVF6czdRVUZGUVN4UlFVRkpXQ3c0UWtGQlNpeEZRVUZ2UXp0QlFVTm9RMUVzYTBKQlFWVXNSVUZCVmp0QlFVTkJPMEZCUTBFc1lVRkJTME1zU1VGQlNTeERRVUZVTEVWQlFWbEJMRWxCUVVsU0xGTkJRVk5YTEUxQlFYcENMRVZCUVdsRFNDeEhRVUZxUXl4RlFVRnpRenRCUVVOc1EwTXNlVUpCUVdGVUxGTkJRVk5STEVOQlFWUXNRMEZCWWp0QlFVTkJMR2RDUVVGSlNTeE5RVUZOV0N4UlFVRlJUeXhEUVVGU0xFTkJRVlk3UVVGRFFTeG5Ra0ZCU1Vzc1QwRkJUMVlzVTBGQlUwc3NRMEZCVkN4RFFVRllPMEZCUTBFc1owSkJRVWxOTEU5QlFVOURMRWRCUVVkRExGbEJRVWdzUTBGQlowSkRMSE5DUVVGb1FpeERRVUYxUTFJc1ZVRkJka01zUTBGQldEdEJRVU5CTEdkQ1FVRkpTeXhMUVVGTFNTeEhRVUZVTEVWQlFXTTdRVUZEVmp0QlFVTkJMRzlDUVVGSlF5eE5RVUZOVEN4TFFVRkxTeXhIUVVGbU8wRkJRMEZRTEc5Q1FVRkpReXhKUVVGS0xFbEJRVmxOTEVkQlFWbzdRVUZEUVZRc01rSkJRVmRWTEVsQlFWZ3NRMEZCWjBKRUxFZEJRV2hDTzBGQlEwZ3NZVUZNUkN4TlFVMUxPMEZCUTBRN1FVRkRRVm9zZDBKQlFWRmhMRWxCUVZJc1EwRkJZVHRCUVVOVVF5d3dRa0ZCVFN4TlFVUkhPMEZCUlZSRExEQkNRVUZOWWl4VlFVWkhPMEZCUjFSakxIRkRRVUZwUWl4SlFVaFNPMEZCU1ZSRExEUkNRVUZSV2l4SFFVcERPMEZCUzFSaExHZERRVUZaV2l4SlFVeElPMEZCVFZSUUxHdERRVUZqUkN4WlFVRlpSeXhEUVVGYU8wRkJUa3dzYVVKQlFXSTdRVUZSU0R0QlFVTktPMEZCUTBvc1MwRXhRa1FzVFVFeVFrczdRVUZEUkVRc2EwSkJRVlVzU1VGQlNXMUNMRXRCUVVvc1EwRkJWVEZDTEZOQlFWTlhMRTFCUVc1Q0xFTkJRVlk3TzBGQlJVRTdRVUZEUVN4aFFVRkxTQ3hKUVVGSkxFTkJRVlFzUlVGQldVRXNTVUZCU1ZJc1UwRkJVMWNzVFVGQmVrSXNSVUZCYVVOSUxFZEJRV3BETEVWQlFYTkRPMEZCUTJ4RFF5eDVRa0ZCWVZRc1UwRkJVMUVzUTBGQlZDeERRVUZpTzBGQlEwRkVMRzlDUVVGUlF5eERRVUZTTEVsQlFXRTdRVUZEVkdFc2MwSkJRVTBzVFVGRVJ6dEJRVVZVUXl4elFrRkJUV0lzVlVGR1J6dEJRVWRVWlN4M1FrRkJVWFpDTEZGQlFWRlBMRU5CUVZJc1EwRklRenRCUVVsVWFVSXNORUpCUVZsMFFpeFRRVUZUU3l4RFFVRlVMRU5CU2tnN1FVRkxWRVlzT0VKQlFXTkVMRmxCUVZsSExFTkJRVm83UVVGTVRDeGhRVUZpTzBGQlQwZzdPMEZCUlVRN1FVRkRRU3haUVVGSldDeE5RVUZOT0VJc1QwRkJUaXhKUVVGcFFpeERRVUZET1VJc1RVRkJUU3RDTEZkQlFVNHNRMEZCYTBKRExEQkNRVUY0UXl4RlFVRnZSVHRCUVVOb1JYUkNMRzlDUVVGUllTeEpRVUZTTEVOQlFXRTdRVUZEVkVRc2NVSkJRVXQwUWl4TlFVRk5hVU1zVTBGRVJqdEJRVVZVVGl4M1FrRkJVVE5DTEV0QlJrTTdRVUZIVkRSQ0xEUkNRVUZaTzBGQlNFZ3NZVUZCWWp0QlFVdElPMEZCUTBvN08wRkJSVVFzVjBGQlQyeENMRTlCUVZBN1FVRkRTRHM3UVVGRlJDeFRRVUZUZDBJc1YwRkJWQ3hEUVVGelFrTXNVVUZCZEVJc1JVRkJaME53UXl4SlFVRm9ReXhGUVVGelEwTXNTMEZCZEVNc1JVRkJOa05WTEU5QlFUZERMRVZCUVhORU1FSXNVVUZCZEVRc1JVRkJaMFU3UVVGRE5VUTdRVUZEUVhKRExGTkJRVXR6UXl4UFFVRk1MRWRCUVdWeVF5eExRVUZtTzBGQlEwRXNVVUZCU1dFc1lVRkJZV1FzUzBGQlMyTXNWVUZCZEVJN1FVRkRRWE5DTEdGQlFWTkhMRlZCUVZRc1EwRkJiMEoyUXl4SlFVRndRaXhGUVVFd1FsY3NUMEZCTVVJc1JVRkJiVU1zVlVGQlZUWkNMRTFCUVZZc1JVRkJhMEpETEV0QlFXeENMRVZCUVhsQ08wRkJRM2hFTEZsQlFVbDZReXhKUVVGS0xFVkJRVlV3UXl4dlFrRkJWanRCUVVOQkxGbEJRVWxETEZkQlFWZEdMRTFCUVUxSExFZEJRWEpDTzBGQlEwRXNZVUZCU3l4SlFVRkpReXhIUVVGVUxFbEJRV2RDUml4UlFVRm9RaXhGUVVFd1FqdEJRVU4wUWpORExHMUNRVUZQTWtNc1UwRkJVMFVzUjBGQlZDeERRVUZRTzBGQlEwRXNaMEpCUVVrM1F5eExRVUZMTUVJc1NVRkJUQ3hKUVVGaE1VSXNTMEZCUzNORExFOUJRWFJDTEVWQlFTdENPMEZCUXpOQ2RFTXNjVUpCUVV0elF5eFBRVUZNTEVOQlFXRlJMRXRCUVdJc1IwRkJjVUk1UXl4TFFVRkxNRUlzU1VGQk1VSTdRVUZEU0R0QlFVTktPMEZCUTBRc1lVRkJTeXhKUVVGSlpDeEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWxFTEZGQlFWRkpMRTFCUVRWQ0xFVkJRVzlEU0N4SFFVRndReXhGUVVGNVF6dEJRVUZCTEdkQ1FWazFRbTFETEZsQldqUkNMRWRCV1hKRExGTkJRVk5CTEZsQlFWUXNRMEZCZFVJdlF5eEpRVUYyUWl4RlFVRTJRanRCUVVONlFpeHZRa0ZCU1dkRUxGRkJRVkZvUkN4TFFVRkxjME1zVDBGQmFrSTdRVUZEUVN4dlFrRkJTU3hMUVVGTE5VSXNXVUZCVkN4RlFVRjFRanRCUVVOdVFuTkRMRFJDUVVGVFFTeFRRVUZUTjBJc1IwRkJSemhDTEZGQlFVZ3NRMEZCV1VNc1pVRkJXaXhEUVVFMFFrWXNUVUZCVFdoQ0xGZEJRV3hETEVOQlFWWXNSMEZCTkVSblFpeE5RVUZOWkN4VFFVRnNSU3hIUVVFNFJXeERMRXRCUVV0dFJDeE5RVUV6Ump0QlFVTklPMEZCUTBRc2IwSkJRVWtzUzBGQlMzUkNMRlZCUVV3c1MwRkJiMElzWTBGQmVFSXNSVUZCZDBNN1FVRkRjRU1zZVVKQlFVdEVMRTFCUVV3c1EwRkJXVXdzUjBGQldpeEhRVUZyUW5aQ0xFdEJRVXQxUWl4SFFVRjJRanRCUVVOSU8wRkJRMFFzY1VKQlFVdExMRTFCUVV3c1EwRkJXU3hMUVVGTFF5eFZRVUZxUWl4SlFVRXJRbTFDTEV0QlFTOUNPMEZCUTBFc2IwSkJRVWxvUkN4TFFVRkxNRUlzU1VGQlRDeExRVUZqZWtJc1RVRkJUVFpETEV0QlFYQkNMRWxCUVRaQ2FFTXNWMEZCVjNORExFOUJRVmdzUTBGQmJVSndSQ3hMUVVGTGNVUXNSVUZCZUVJc1NVRkJPRUlzUTBGQkwwUXNSVUZCYTBVN1FVRkRPVVIyUXl3clFrRkJWMVVzU1VGQldDeERRVUZuUW5oQ0xFdEJRVXR4UkN4RlFVRnlRanRCUVVOSU8wRkJRMG9zWVVGNFFtOURPenRCUVVOeVF5eG5Ra0ZCU1VNc1RVRkJUVE5ETEZGQlFWRkRMRU5CUVZJc1EwRkJWanRCUVVOQkxHZENRVUZKTWtNc1dVRkJXVVFzU1VGQlNUVkNMRWxCUVhCQ08wRkJRMEVzWjBKQlFVazRRaXhaUVVGWlJpeEpRVUZKTDBJc1IwRkJjRUk3UVVGRFFTeG5Ra0ZCU1d0RExGbEJRVmxJTEVsQlFVa3hRaXhOUVVGd1FqdEJRVU5CTEdkQ1FVRkpPRUlzWVVGQllVb3NTVUZCU1hwQ0xGVkJRWEpDTzBGQlEwRTNRaXh0UWtGQlR6SkRMRk5CUVZOaExGTkJRVlFzUTBGQlVEdEJRVU5CTEdkQ1FVRkpMRU5CUVVONFJDeEpRVUZNTEVWQlFWYzdRVUZEVUR0QlFVTklPenRCUVVWRUxHZENRVUZKTWtRc2EwSkJRV3RDVEN4SFFVRjBRanM3TzBGQlpVRXNaMEpCUVVsMFJDeExRVUZMTkVRc1VVRkJUQ3hKUVVGcFFqVkVMRXRCUVV0elF5eFBRVUV4UWl4RlFVRnRRenRCUVVNdlFpeHZRa0ZCU1hSRExFdEJRVXMyUkN4TFFVRlVMRVZCUVdkQ08wRkJRMW9zZDBKQlFVbERMR0ZCUVdFNVJDeExRVUZMTmtRc1MwRkJUQ3hEUVVGWFJTeFRRVUZZTEV0QlFYbENMR0ZCUVRGRExFVkJRWGxFTzBGQlEzSkVMRFJDUVVGSkxFTkJRVU55UWl4dlFrRkJUQ3hGUVVFeVFqdEJRVU4yUWl4blEwRkJTWE5DTEhkQ1FVRjNRa01zVDBGQlR6RkZMRTlCUVZBc1EwRkJaU3gxUkVGQlppeERRVUUxUWp0QlFVTkJiVVFzYlVSQlFYVkNMRWxCUVVselFpeHhRa0ZCU2l4RFFVRXdRaTlFTEV0QlFURkNMRU5CUVhaQ08wRkJRMGc3UVVGRFJIbERMRFpEUVVGeFFuZENMRmxCUVhKQ0xFTkJRV3REVkN4VFFVRnNReXhGUVVFMlEwTXNWVUZCTjBNc1JVRkJlVVJQTEU5QlFVOUZMRk5CUVZBc1EwRkJhVUpETEU5QlFXcENMRU5CUVhsQ1lpeFRRVUY2UWl4RFFVRjZSRHRCUVVOSUxIRkNRVTVFTEUxQlQwczdRVUZEUkhCRExESkNRVUZIYTBRc1RVRkJTQ3hEUVVGVmNrVXNTMEZCU3paRUxFdEJRVXdzUTBGQlYxTXNUMEZCV0N4SlFVRnpRblJGTEV0QlFVczJSQ3hMUVVGTUxFTkJRVmRWTEZsQlFXcERMRWxCUVdsRWRrVXNTMEZCU3paRUxFdEJRV2hGTzBGQlEwZzdRVUZEU2l4cFFrRllSQ3hOUVZsTE8wRkJRMFJrTEdsRFFVRmhlVUlzU1VGQllpeERRVUZyUW1Jc1pVRkJiRUlzUlVGQmJVTXpSQ3hKUVVGdVF6dEJRVU5JTzBGQlEwb3NZVUZvUWtRc1RVRnBRa3M3UVVGRFJEdEJRVU5CTEc5Q1FVRkplVVVzVVVGQlVXaEdMR0ZCUVdGcFJpeFJRVUZpTEVOQlFYTkNNVVVzU1VGQmRFSXNRMEZCV2p0QlFVTkJPMEZCUTBFc2IwSkJRVWt5UlN4UFFVRlBSaXhOUVVGTlJ5eGpRVUZPTEVOQlFYRkNja0lzVTBGQmNrSXNRMEZCV0R0QlFVTkJMRzlDUVVGSmIwSXNTVUZCU2l4RlFVRlZPMEZCUTA1QkxIbENRVUZMUlN4UFFVRk1MRU5CUVdFNVFpeFpRVUZpTEVWQlFUSkNXU3hsUVVFelFqdEJRVU5JTEdsQ1FVWkVMRTFCUjBzN1FVRkRSR01zTUVKQlFVMUxMRmRCUVU0c1EwRkJhMEoyUWl4VFFVRnNRaXhGUVVFMlFsSXNXVUZCTjBJc1JVRkJNa05aTEdWQlFUTkRPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMFE3UVVGRFFUdEJRVU5CTEZsQlFVbEhMR0ZCUVdGd1FpeHZRa0ZCYWtJc1JVRkJkVU03UVVGRGJrTkJMR2xEUVVGeFFuRkRMR0ZCUVhKQ08wRkJRMEV4UXl4eFFrRkJVeXhKUVVGVUxFVkJRV1Z3UXl4TFFVRm1PMEZCUTBnc1UwRklSQ3hOUVVsTE8wRkJRMFFzWjBKQlFVa3NRMEZCUTNWRExFMUJRVVFzU1VGQlYzWkRMRTFCUVUwclJTeE5RVUZ5UWl4RlFVRTJRanRCUVVONlFpeHZRa0ZCU1R0QlFVTkJMMFVzTUVKQlFVMHJSU3hOUVVGT08wRkJRMGdzYVVKQlJrUXNRMEZIUVN4UFFVRlBReXhEUVVGUUxFVkJRVlU3UVVGRFRqbEVMSFZDUVVGSGEwUXNUVUZCU0N4RFFVRlZXU3hEUVVGV08wRkJRMGc3UVVGRFNqdEJRVU5FTlVNc2NVSkJRVk5ITEUxQlFWUXNSVUZCYVVKMlF5eExRVUZxUWp0QlFVTklPMEZCUTBvc1MwRnNSa1E3UVVGdFJrZzdPMEZCUlVRN1FVRkRRU3hUUVVGVGFVWXNaVUZCVkN4RFFVRXdRbXBHTEV0QlFURkNMRVZCUVdsRFJDeEpRVUZxUXl4RlFVRjFRMjFHTEU5QlFYWkRMRVZCUVdkRU8wRkJRelZETEZGQlFVbHlRaXhUUVVGS0xFVkJRV1U3UVVGRFdDeGxRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTkVMRkZCUVVselFpeE5RVUZOY0VZc1MwRkJTekpDTEdWQlFXWTdRVUZEUVN4UlFVRkplVVFzUjBGQlNpeEZRVUZUTzBGQlEwdzdRVUZEUVN4WlFVRkxia1lzYVVKQlFXbENhMElzUjBGQlIydEZMRXRCUVhKQ0xFbEJRU3RDY0VZc1RVRkJUU3RDTEZkQlFVNHNRMEZCYTBKelJDdzJRa0ZCY2tRc1JVRkJiMFk3UVVGRGFFWkdMR3RDUVVGTkxFdEJRVTQ3UVVGRFNEdEJRVU5LTEV0QlRFUXNUVUZOU3l4SlFVRkpSQ3hQUVVGS0xFVkJRV0U3UVVGRFpDeFpRVUZKYkVZc2FVSkJRV2xDYTBJc1IwRkJSMjlGTEZWQlFYQkNMRWxCUVd0RGRFWXNhVUpCUVdsQ2EwSXNSMEZCUjNGRkxFMUJRVEZFTEVWQlFXdEZPMEZCUXpsRVNpeHJRa0ZCVFc1R0xFMUJRVTEzUml4bFFVRmFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMGc3UVVGRFNqdEJRVU5FTEZkQlFVOU1MRWRCUVZBN1FVRkRTRHM3UVVGRlJDeEpRVUZKVFN4WlFVRktPenRCUVVWQkxGTkJRVk5ETEZGQlFWUXNRMEZCYlVJelJpeEpRVUZ1UWl4RlFVRjVRbkZETEZGQlFYcENMRVZCUVcxRE8wRkJReTlDTEZGQlFVbDVRaXhUUVVGS0xFVkJRV1U3UVVGRFdEUkNMSFZDUVVGbFFTeG5Ra0ZCWjBKNlFpeFBRVUZQTVVVc1QwRkJVQ3hEUVVGbExITkVRVUZtTEVWQlFYVkZiVWNzV1VGQmRFYzdRVUZEU0RzN1FVRkZSQ3hSUVVGSkwwWXNTVUZCU2p0QlFVTkJMRkZCUVVrc1QwRkJUMHNzUzBGQlMzTkRMRTlCUVZvc1MwRkJkMElzVVVGQk5VSXNSVUZCYzBNN1FVRkRiRU1zV1VGQlNUdEJRVU5CTTBNc2JVSkJRVTlwUnl4TFFVRkxReXhMUVVGTUxFTkJRVmMzUml4TFFVRkxjME1zVDBGQmFFSXNRMEZCVUR0QlFVTklMRk5CUmtRc1EwRkhRU3hQUVVGUE1rTXNRMEZCVUN4RlFVRlZPMEZCUTA0c2JVSkJRVThzU1VGQlNXRXNTMEZCU2l4RFFVRlZkRWNzVFVGQlRYVkhMRkZCUVU0c1EwRkJaU3hKUVVGbUxFVkJRWEZDTDBZc1MwRkJTM0ZFTEVWQlFURkNMRVZCUVRoQ05FSXNSVUZCUldVc1MwRkJhRU1zUTBGQlZpeERRVUZRTzBGQlEwZzdRVUZEU2l4TFFWQkVMRTFCVVVzc1NVRkJTU3hSUVVGUGFFY3NTMEZCUzNORExFOUJRVm9zVFVGQmQwSXNVVUZCTlVJc1JVRkJjME03UVVGRGRrTXpReXhsUVVGUFN5eExRVUZMYzBNc1QwRkJXanRCUVVOSUxFdEJSa2tzVFVGSFFUdEJRVU5FTEdWQlFVOHNTVUZCU1hkRUxFdEJRVW9zUTBGQlZYUkhMRTFCUVUxMVJ5eFJRVUZPTEVOQlFXVXNTVUZCWml4RFFVRldMRU5CUVZBN1FVRkRTRHM3UVVGRlJDeFJRVUZKUlN4WFFVRktPMEZCUTBFc1VVRkJTV1FzVlVGQlZYcEdMRmRCUVZkRExFbEJRVmdzUTBGQlpEdEJRVU5CTEZGQlFVbDNSaXhQUVVGS0xFVkJRV0U3UVVGRFZDeFpRVUZKY2tJc1UwRkJTaXhGUVVGbE8wRkJRMWcwUWl4NVFrRkJZVkVzWlVGQllpeEhRVUVyUWl4TFFVRXZRanRCUVVOQlJDd3dRa0ZCWXl4eFFrRkJWWGhGTEVsQlFWWXNSVUZCWjBJd1JTeEpRVUZvUWl4RlFVRnpRa01zUzBGQmRFSXNSVUZCTmtKRExGRkJRVGRDTEVWQlFYVkRPMEZCUTJwRUxHOUNRVUZKYWtJc1RVRkJUVTBzWVVGQllVOHNWMEZCWWl4RFFVRjVRbmhGTEVsQlFYcENMRVZCUVN0Q01FVXNTVUZCTDBJc1JVRkJjVU5ETEV0QlFYSkRMRVZCUVRSRFF5eFJRVUUxUXl4RFFVRldPMEZCUTBFc2IwSkJRVWxxUWl4SFFVRktMRVZCUVZNN1FVRkRUQ3d5UWtGQlQwRXNSMEZCVUR0QlFVTklPMEZCUTBRc2RVSkJRVTlxUlN4SFFVRkhiVVlzWTBGQlNDeERRVUZyUWtNc2FVSkJRV3hDTEVOQlFXOURPVVVzU1VGQmNFTXNSVUZCTUVNd1JTeEpRVUV4UXl4RFFVRlFPMEZCUTBnc1lVRk9SRHRCUVU5QlJpeDNRa0ZCV1U4c1kwRkJXaXhIUVVFMlFtUXNZVUZCWVU4c1YwRkJZaXhEUVVGNVFrOHNZMEZCZEVRN1FVRkRTQ3hUUVZaRUxFMUJWMHM3UVVGRFJGQXNNRUpCUVdNNVJTeEhRVUZIYlVZc1kwRkJTQ3hEUVVGclFrY3NZVUZCYUVNN1FVRkRTRHRCUVVOS0xFdEJaa1FzVFVGblFrczdRVUZEUkZJc2MwSkJRV01zY1VKQlFWVTFReXhGUVVGV0xFVkJRV003UVVGRGVFSXNaMEpCUVVseFJDeE5RVUZOY0Vnc1IwRkJSM0ZJTEdGQlFVZ3NRMEZCYVVKMFJDeEZRVUZxUWl4RFFVRldPMEZCUTBFc1owSkJRVWx4UkN4SFFVRktMRVZCUVZNN1FVRkRUQ3gxUWtGQlQwRXNSMEZCVUR0QlFVTklPMEZCUTBSMlJpeGxRVUZIZVVZc1RVRkJTQ3hEUVVGVkxFbEJRVllzUlVGQlowSjJSQ3hGUVVGb1FqdEJRVU5CTEcxQ1FVRlBkMFFzVFVGQlVEdEJRVU5JTEZOQlVFUTdRVUZSU0RzN1FVRkZSQ3hSUVVGSk0wY3NVMEZCVTJsQ0xFZEJRVWN5Uml4WFFVRklMRU5CUVdWRExFOUJRV1lzUTBGQmRVSkRMRWxCUVhaQ0xFTkJRVFJDUXl4SFFVRTFRaXhGUVVGaU96dEJRVVZCTEZGQlFVbG9TQ3hMUVVGS08wRkJRMEVzVVVGQlNUdEJRVU5CUVN4blFrRkJVV3RDTEVkQlFVY3lSaXhYUVVGSUxFTkJRV1Z1U0N4SlFVRm1MRVZCUVhGQ1R5eE5RVUZ5UWl4RlFVRTJRanRCUVVOcVF5dEdMSGxDUVVGaFFTeFhRVVJ2UWp0QlFVVnFRMmxDTEc5Q1FVRlJiRWdzUzBGQlMyMUlMR0ZCUm05Q08wRkJSMnBEUXl4MVFrRkJWM0JJTzBGQlNITkNMRk5CUVRkQ0xFTkJRVkk3UVVGTFNDeExRVTVFTEVOQlQwRXNUMEZCVDJsR0xFTkJRVkFzUlVGQlZUdEJRVU5PT1VRc1YwRkJSekpHTEZkQlFVZ3NRMEZCWlVNc1QwRkJaaXhEUVVGMVFrTXNTVUZCZGtJc1EwRkJORUpMTEVkQlFUVkNMRU5CUVdkRGJrZ3NUVUZCYUVNN1FVRkRRU3haUVVGSmIwZ3NUVUZCVFVNc1ZVRkJWVU1zVlVGQlZpeEhRVUYzUW5aRExFbEJRVWtzU1VGQlNpeEhRVUZYUVN4RlFVRkZaU3hMUVVGeVF5eEhRVUU0UTJZc1JVRkJSV1VzUzBGQk1VUTdRVUZEUVN4bFFVRlBMRWxCUVVsR0xFdEJRVW9zUTBGQlZYUkhMRTFCUVUxMVJ5eFJRVUZPTEVOQlFXVXNTVUZCWml4RlFVRnhRaTlHTEV0QlFVdHhSQ3hGUVVFeFFpeEZRVUU0UW1sRkxFZEJRVGxDTEVOQlFWWXNRMEZCVUR0QlFVTklPenRCUVVWRWNrZ3NWVUZCVFRaRExFdEJRVTRzUjBGQll6bERMRXRCUVVzd1FpeEpRVUZ1UWp0QlFVTkJla0lzVlVGQlRYTkNMRWRCUVU0c1IwRkJXWFJDTEUxQlFVMXBReXhUUVVGc1FqczdRVUZGUVN4UlFVRkpORUlzWVVGQllYRkNMRTlCUVdJc1NVRkJkMEpQTEdGQlFXRlJMR1ZCUVhwRExFVkJRVEJFTzBGQlEzUkVVaXh4UWtGQllTdENMR3RDUVVGaUxFTkJRV2REZUVnc1MwRkJhRU03UVVGRFNEczdRVUZGUkN4UlFVRkplVWdzWlVGQlpYaERMR2RDUVVGblFtcEdMRXRCUVdoQ0xFVkJRWFZDUkN4SlFVRjJRaXhGUVVFMlFtMUdMRTlCUVRkQ0xFTkJRVzVDTzBGQlEwRXNVVUZCU1hoRkxGVkJRVlZhTEdGQlFXRkRMRWxCUVdJc1JVRkJiVUpETEV0QlFXNUNMRVZCUVRCQ1F5eE5RVUV4UWl4RlFVRnJRM2RJTEZsQlFXeERMRU5CUVdRN08wRkJSVUYyUnl4UFFVRkhNa1lzVjBGQlNDeERRVUZsUXl4UFFVRm1MRU5CUVhWQ1F5eEpRVUYyUWl4RFFVRTBRa3NzUjBGQk5VSXNRMEZCWjBOdVNDeE5RVUZvUXpzN1FVRkZRU3hSUVVGSlV5eFJRVUZSU1N4TlFVRlNMRXRCUVcxQ0xFTkJRWFpDTEVWQlFUQkNPMEZCUTNSQ0xGbEJRVWxrTEUxQlFVMHJSU3hOUVVGV0xFVkJRV3RDTDBVc1RVRkJUU3RGTEUxQlFVNDdRVUZEYkVJc1pVRkJUek5ETEZOQlFWTXNTVUZCVkN4RlFVRmxjRU1zUzBGQlppeERRVUZRTzBGQlEwZzdRVUZEUkd0RExHZENRVUZaTEV0QlFVdERMRkZCUVdwQ0xFVkJRVEpDY0VNc1NVRkJNMElzUlVGQmFVTkRMRXRCUVdwRExFVkJRWGREVlN4UFFVRjRReXhGUVVGcFJEQkNMRkZCUVdwRU8wRkJRMGc3TzBGQlJVUnpSaXhQUVVGUFF5eFBRVUZRTEVkQlFXbENha01zVVVGQmFrSTdRVUZEUVVFc1UwRkJVMnBITEZWQlFWUXNSMEZCYzBKQkxGVkJRWFJDSWl3aVptbHNaU0k2SW5WMWFXUXRiRzloWkdWeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVE10TWpBeE5pQkRhSFZyYjI1bklGUmxZMmh1YjJ4dloybGxjeUJKYm1NdVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTNMVEl3TVRnZ1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVYRzVjYmlCb2RIUndjem92TDNkM2R5NWpiMk52Y3k1amIyMHZYRzVjYmlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVNCamIzQjVYRzRnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmxibWRwYm1VZ2MyOTFjbU5sSUdOdlpHVWdLSFJvWlNCY0lsTnZablIzWVhKbFhDSXBMQ0JoSUd4cGJXbDBaV1FzWEc0Z0lIZHZjbXhrZDJsa1pTd2djbTk1WVd4MGVTMW1jbVZsTENCdWIyNHRZWE56YVdkdVlXSnNaU3dnY21WMmIyTmhZbXhsSUdGdVpDQnViMjR0WlhoamJIVnphWFpsSUd4cFkyVnVjMlZjYmlCMGJ5QjFjMlVnUTI5amIzTWdRM0psWVhSdmNpQnpiMnhsYkhrZ2RHOGdaR1YyWld4dmNDQm5ZVzFsY3lCdmJpQjViM1Z5SUhSaGNtZGxkQ0J3YkdGMFptOXliWE11SUZsdmRTQnphR0ZzYkZ4dUlDQnViM1FnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5bWRIZGhjbVVnWm05eUlHUmxkbVZzYjNCcGJtY2diM1JvWlhJZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2RHaGhkQ2R6WEc0Z0lIVnpaV1FnWm05eUlHUmxkbVZzYjNCcGJtY2daMkZ0WlhNdUlGbHZkU0JoY21VZ2JtOTBJR2R5WVc1MFpXUWdkRzhnY0hWaWJHbHphQ3dnWkdsemRISnBZblYwWlN4Y2JpQWdjM1ZpYkdsalpXNXpaU3dnWVc1a0wyOXlJSE5sYkd3Z1kyOXdhV1Z6SUc5bUlFTnZZMjl6SUVOeVpXRjBiM0l1WEc1Y2JpQlVhR1VnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nYVc0Z2RHaHBjeUJNYVdObGJuTmxJRUZuY21WbGJXVnVkQ0JoY21VZ2JHbGpaVzV6WldRc0lHNXZkQ0J6YjJ4a0xseHVJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGlCeVpYTmxjblpsY3lCaGJHd2djbWxuYUhSeklHNXZkQ0JsZUhCeVpYTnpiSGtnWjNKaGJuUmxaQ0IwYnlCNWIzVXVYRzVjYmlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVElFOVNYRzRnU1UxUVRFbEZSQ3dnU1U1RFRGVkVTVTVISUVKVlZDQk9UMVFnVEVsTlNWUkZSQ0JVVHlCVVNFVWdWMEZTVWtGT1ZFbEZVeUJQUmlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzWEc0Z1JrbFVUa1ZUVXlCR1QxSWdRU0JRUVZKVVNVTlZURUZTSUZCVlVsQlBVMFVnUVU1RUlFNVBUa2xPUmxKSlRrZEZUVVZPVkM0Z1NVNGdUazhnUlZaRlRsUWdVMGhCVEV3Z1ZFaEZYRzRnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3dnUkVGTlFVZEZVeUJQVWlCUFZFaEZVbHh1SUV4SlFVSkpURWxVV1N3Z1YwaEZWRWhGVWlCSlRpQkJUaUJCUTFSSlQwNGdUMFlnUTA5T1ZGSkJRMVFzSUZSUFVsUWdUMUlnVDFSSVJWSlhTVk5GTENCQlVrbFRTVTVISUVaU1QwMHNYRzRnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGx4dUlGUklSU0JUVDBaVVYwRlNSUzVjYmlBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1amIyNXpkQ0JxY3lBOUlISmxjWFZwY21Vb0p5NHVMM0JzWVhSbWIzSnRMMnB6SnlrN1hHNWpiMjV6ZENCa1pXSjFaeUE5SUhKbGNYVnBjbVVvSnk0dUwwTkRSR1ZpZFdjbktUdGNibkpsY1hWcGNtVW9KeTR1TDNCc1lYUm1iM0p0TDJSbGMyVnlhV0ZzYVhwbEp5azdYRzVqYjI1emRDQk1iMkZrYVc1blNYUmxiWE1nUFNCeVpYRjFhWEpsS0NjdUwyeHZZV1JwYm1jdGFYUmxiWE1uS1R0Y2JseHVablZ1WTNScGIyNGdhWE5UWTJWdVpVOWlhaUFvYW5OdmJpa2dlMXh1SUNBZ0lIWmhjaUJUUTBWT1JWOUpSQ0E5SUNkall5NVRZMlZ1WlNjN1hHNGdJQ0FnZG1GeUlGQlNSVVpCUWw5SlJDQTlJQ2RqWXk1UWNtVm1ZV0luTzF4dUlDQWdJSEpsZEhWeWJpQnFjMjl1SUNZbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDaHFjMjl1V3pCZElDWW1JR3B6YjI1Yk1GMHVYMTkwZVhCbFgxOGdQVDA5SUZORFJVNUZYMGxFS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tHcHpiMjViTVYwZ0ppWWdhbk52YmxzeFhTNWZYM1I1Y0dWZlh5QTlQVDBnVTBORlRrVmZTVVFwSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2FuTnZibHN3WFNBbUppQnFjMjl1V3pCZExsOWZkSGx3WlY5ZklEMDlQU0JRVWtWR1FVSmZTVVFwWEc0Z0lDQWdJQ0FnSUNBZ0lDazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQmhjbk5sUkdWd1pXNWtjeUFvYVhSbGJTd2dZWE56WlhRc0lIUmtTVzVtYnl3Z1pHVm1aWEp5WldSTWIyRmtVbUYzUVhOelpYUnpTVzVTZFc1MGFXMWxLU0I3WEc0Z0lDQWdkbUZ5SUhWMWFXUk1hWE4wSUQwZ2RHUkpibVp2TG5WMWFXUk1hWE4wTzF4dUlDQWdJSFpoY2lCdlltcE1hWE4wSUQwZ2RHUkpibVp2TG5WMWFXUlBZbXBNYVhOME8xeHVJQ0FnSUhaaGNpQndjbTl3VEdsemRDQTlJSFJrU1c1bWJ5NTFkV2xrVUhKdmNFeHBjM1E3WEc0Z0lDQWdkbUZ5SUhOMGFXeHNWWE5sVlhKc0lEMGdkR1JKYm1adkxsOXpkR2xzYkZWelpWVnliRHRjYmlBZ0lDQjJZWElnWkdWd1pXNWtjenRjYmlBZ0lDQjJZWElnYVN3Z1pHVndaVzVrVlhWcFpEdGNiaUFnSUNBdkx5QmpZV05vWlNCa1pYQmxibVJsYm1OcFpYTWdabTl5SUdGMWRHOGdjbVZzWldGelpWeHVJQ0FnSUhaaGNpQmtaWEJsYm1STFpYbHpJRDBnYVhSbGJTNWtaWEJsYm1STFpYbHpJRDBnVzEwN1hHNWNiaUFnSUNCcFppQW9aR1ZtWlhKeVpXUk1iMkZrVW1GM1FYTnpaWFJ6U1c1U2RXNTBhVzFsS1NCN1hHNGdJQ0FnSUNBZ0lHUmxjR1Z1WkhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnTHk4Z2NHRnljMlVnWkdWd1pXNWtjeUJoYzNObGRITmNiaUFnSUNBZ0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElIVjFhV1JNYVhOMExteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaWEJsYm1SVmRXbGtJRDBnZFhWcFpFeHBjM1JiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2IySnFJRDBnYjJKcVRHbHpkRnRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd2NtOXdJRDBnY0hKdmNFeHBjM1JiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FXNW1ieUE5SUdOakxrRnpjMlYwVEdsaWNtRnllUzVmWjJWMFFYTnpaWFJKYm1adlNXNVNkVzUwYVcxbEtHUmxjR1Z1WkZWMWFXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x1Wm04dWNtRjNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MydHBjQ0J3Y21Wc2IyRmthVzVuSUhKaGR5QmhjM05sZEhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkWEpzSUQwZ2FXNW1ieTUxY213N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IySnFXM0J5YjNCZElEMGdkWEpzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGNHVnVaRXRsZVhNdWNIVnphQ2gxY213cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaR1ZqYkdGeVpTQmtaWEJsYm1SeklHRnpjMlYwYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGNHVnVaSE11Y0hWemFDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2QxZFdsa0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhWcFpEb2daR1Z3Wlc1a1ZYVnBaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1aWEp5WldSTWIyRmtVbUYzT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmIzZHVaWEk2SUc5aWFpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDI5M2JtVnlVSEp2Y0RvZ2NISnZjQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzTjBhV3hzVlhObFZYSnNPaUJ6ZEdsc2JGVnpaVlZ5YkZ0cFhWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JrWlhCbGJtUnpJRDBnYm1WM0lFRnljbUY1S0hWMWFXUk1hWE4wTG14bGJtZDBhQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdaR1ZqYkdGeVpTQmtaWEJsYm1SeklHRnpjMlYwYzF4dUlDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnZFhWcFpFeHBjM1F1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGNHVnVaRlYxYVdRZ1BTQjFkV2xrVEdsemRGdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxjR1Z1WkhOYmFWMGdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKM1YxYVdRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVjFhV1E2SUdSbGNHVnVaRlYxYVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gyOTNibVZ5T2lCdlltcE1hWE4wVzJsZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOXZkMjVsY2xCeWIzQTZJSEJ5YjNCTWFYTjBXMmxkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5emRHbHNiRlZ6WlZWeWJEb2djM1JwYkd4VmMyVlZjbXhiYVYxY2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJzYjJGa0lHNWhkR2wyWlNCdlltcGxZM1FnS0VsdFlXZGxMMEYxWkdsdktTQmhjeUJrWlhCbGJtUnpYRzRnSUNBZ0lDQWdJR2xtSUNoaGMzTmxkQzVmYm1GMGFYWmxJQ1ltSUNGaGMzTmxkQzVqYjI1emRISjFZM1J2Y2k1d2NtVjJaVzUwVUhKbGJHOWhaRTVoZEdsMlpVOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWd1pXNWtjeTV3ZFhOb0tIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjbXc2SUdGemMyVjBMbTVoZEdsMlpWVnliQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmYjNkdVpYSTZJR0Z6YzJWMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOXZkMjVsY2xCeWIzQTZJQ2RmYm1GMGFYWmxRWE56WlhRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWkdWd1pXNWtjenRjYm4xY2JseHVablZ1WTNScGIyNGdiRzloWkVSbGNHVnVaSE1nS0hCcGNHVnNhVzVsTENCcGRHVnRMQ0JoYzNObGRDd2daR1Z3Wlc1a2N5d2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQXZMeUJRY21Wa1pXWnBibVVnWTI5dWRHVnVkQ0JtYjNJZ1pHVndaVzVrWlc1amFXVnpJSFZ6WVdkbFhHNGdJQ0FnYVhSbGJTNWpiMjUwWlc1MElEMGdZWE56WlhRN1hHNGdJQ0FnZG1GeUlHUmxjR1Z1WkV0bGVYTWdQU0JwZEdWdExtUmxjR1Z1WkV0bGVYTTdYRzRnSUNBZ2NHbHdaV3hwYm1VdVpteHZkMGx1UkdWd2N5aHBkR1Z0TENCa1pYQmxibVJ6TENCbWRXNWpkR2x2YmlBb1pYSnliM0p6TENCcGRHVnRjeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdhWFJsYlN3Z2JXbHpjMmx1WjBGemMyVjBVbVZ3YjNKMFpYSTdYRzRnSUNBZ0lDQWdJSFpoY2lCcGRHVnRjMDFoY0NBOUlHbDBaVzF6TG0xaGNEdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdjM0pqSUdsdUlHbDBaVzF6VFdGd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRJRDBnYVhSbGJYTk5ZWEJiYzNKalhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBkR1Z0TG5WMWFXUWdKaVlnYVhSbGJTNWpiMjUwWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWFJsYlM1amIyNTBaVzUwTGw5MWRXbGtJRDBnYVhSbGJTNTFkV2xrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1pHVndaVzVrY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JsY0NBOUlHUmxjR1Z1WkhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR1Z3Wlc1a1UzSmpJRDBnWkdWd0xuVjFhV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWkdWd1pXNWtWWEpzSUQwZ1pHVndMblZ5YkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa1pYQmxibVJQWW1vZ1BTQmtaWEF1WDI5M2JtVnlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JsY0dWdVpGQnliM0FnUFNCa1pYQXVYMjkzYm1WeVVISnZjRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzBnUFNCcGRHVnRjMDFoY0Z0a1pYQmxibVJWY214ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnBkR1Z0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCc2IyRmtRMkZzYkdKaFkydERkSGdnUFNCa1pYQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCc2IyRmtRMkZzYkdKaFkyc2dLR2wwWlcwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnZG1Gc2RXVWdQU0JwZEdWdExtTnZiblJsYm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTjBhV3hzVlhObFZYSnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ0tIWmhiSFZsSUNZbUlHTmpMbEpoZDBGemMyVjBMbmRoYzFKaGQwRnpjMlYwVkhsd1pTaDJZV3gxWlM1amIyNXpkSEoxWTNSdmNpa3BJRDhnZG1Gc2RXVXVibUYwYVhabFZYSnNJRG9nYVhSbGJTNXlZWGRWY213N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXZkMjVsY2xCeWIzQWdQVDA5SUNkZmJtRjBhWFpsUVhOelpYUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDI5M2JtVnlMblZ5YkNBOUlHbDBaVzB1ZFhKc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5dmQyNWxjbHQwYUdsekxsOXZkMjVsY2xCeWIzQmRJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dsMFpXMHVkWFZwWkNBaFBUMGdZWE56WlhRdVgzVjFhV1FnSmlZZ1pHVndaVzVrUzJWNWN5NXBibVJsZUU5bUtHbDBaVzB1YVdRcElEd2dNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaWEJsYm1STFpYbHpMbkIxYzJnb2FYUmxiUzVwWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYUmxiUzVqYjIxd2JHVjBaU0I4ZkNCcGRHVnRMbU52Ym5SbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYUmxiUzVsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RME5mUlVSSlZFOVNJQ1ltSUdsMFpXMHVaWEp5YjNJdVpYSnliM0pEYjJSbElEMDlQU0FuWkdJdVRrOVVSazlWVGtRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVcxcGMzTnBibWRCYzNObGRGSmxjRzl5ZEdWeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlFMXBjM05wYm1kUFltcGxZM1JTWlhCdmNuUmxjaUE5SUVWa2FYUnZjaTV5WlhGMWFYSmxLQ2RoY0hBNkx5OWxaR2wwYjNJdmNHRm5aUzl6WTJWdVpTMTFkR2xzY3k5dGFYTnphVzVuTFc5aWFtVmpkQzF5WlhCdmNuUmxjaWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXBjM05wYm1kQmMzTmxkRkpsY0c5eWRHVnlJRDBnYm1WM0lFMXBjM05wYm1kUFltcGxZM1JTWlhCdmNuUmxjaWhoYzNObGRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRhWE56YVc1blFYTnpaWFJTWlhCdmNuUmxjaTV6ZEdGemFFSjVUM2R1WlhJb1pHVndaVzVrVDJKcUxDQmtaWEJsYm1SUWNtOXdMQ0JGWkdsMGIzSXVjMlZ5YVdGc2FYcGxMbUZ6UVhOelpYUW9aR1Z3Wlc1a1UzSmpLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZeTVmZEdoeWIzY29hWFJsYlM1bGNuSnZjaTV0WlhOellXZGxJSHg4SUdsMFpXMHVaWEp5YjNJdVpYSnliM0pOWlhOellXZGxJSHg4SUdsMFpXMHVaWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyRmtRMkZzYkdKaFkyc3VZMkZzYkNoc2IyRmtRMkZzYkdKaFkydERkSGdzSUdsMFpXMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsMFpXMGdkMkZ6SUhKbGJXOTJaV1FnWm5KdmJTQmpZV05vWlN3Z1luVjBJSEpsWVdSNUlHbHVJSEJwY0dWc2FXNWxJR0ZqZEhWaGJHeDVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhGMVpYVmxJRDBnVEc5aFpHbHVaMGwwWlcxekxtZGxkRkYxWlhWbEtHbDBaVzBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFaGhZMnNnZEc4Z1oyVjBJR0VnWW1WMGRHVnlJR0psYUdGMmFXOXlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUd4cGMzUWdQU0J4ZFdWMVpTNWZZMkZzYkdKaFkydFVZV0pzWlZ0a1pYQmxibVJUY21OZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzYVhOMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4cGMzUXVkVzV6YUdsbWRDaHNiMkZrUTJGc2JHSmhZMnNzSUd4dllXUkRZV3hzWW1GamEwTjBlQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeGRXVjFaUzVoWkdSTWFYTjBaVzVsY2loa1pYQmxibVJUY21Nc0lHeHZZV1JEWVd4c1ltRmpheXdnYkc5aFpFTmhiR3hpWVdOclEzUjRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1JXMXBkQ0JrWlhCbGJtUmxibU41SUdWeWNtOXljeUJwYmlCeWRXNTBhVzFsTENCaWRYUWdibTkwSUdsdUlHVmthWFJ2Y2l4Y2JpQWdJQ0FnSUNBZ0x5OGdZbVZqWVhWelpTQmxaR2wwYjNJZ2JtVmxaQ0IwYnlCdmNHVnVJSFJvWlNCelkyVnVaU0F2SUhCeVpXWmhZaUIwYnlCc1pYUWdkWE5sY2lCbWFYZ2diV2x6YzJsdVp5QmhjM05sZENCcGMzTjFaWE5jYmlBZ0lDQWdJQ0FnYVdZZ0tFTkRYMFZFU1ZSUFVpQW1KaUJ0YVhOemFXNW5RWE56WlhSU1pYQnZjblJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYldsemMybHVaMEZ6YzJWMFVtVndiM0owWlhJdWNtVndiM0owUW5sUGQyNWxjaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZzYkdKaFkyc29iblZzYkN3Z1lYTnpaWFFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbGNuSnZjbk1nSmlZZ1lYTnpaWFF1YjI1TWIyRmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhOelpYUXViMjVNYjJGa0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbDkwYUhKdmR5aGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnNiR0poWTJzb1pYSnliM0p6TENCaGMzTmxkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JuMWNibHh1THk4Z1kyRnVJR1JsWm1WeWNtVmtJR3h2WVdRZ2NtRjNJR0Z6YzJWMGN5QnBiaUJ5ZFc1MGFXMWxYRzVtZFc1amRHbHZiaUJqWVc1RVpXWmxjbkpsWkV4dllXUWdLR0Z6YzJWMExDQnBkR1Z0TENCcGMxTmpaVzVsS1NCN1hHNGdJQ0FnYVdZZ0tFTkRYMFZFU1ZSUFVpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCeVpYTWdQU0JwZEdWdExtUmxabVZ5Y21Wa1RHOWhaRkpoZHp0Y2JpQWdJQ0JwWmlBb2NtVnpLU0I3WEc0Z0lDQWdJQ0FnSUM4dklHTm9aV05ySUdsbUlHRnpjMlYwSUhOMWNIQnZjblFnWkdWbVpYSnlaV1JjYmlBZ0lDQWdJQ0FnYVdZZ0tDaGhjM05sZENCcGJuTjBZVzVqWlc5bUlHTmpMa0Z6YzJWMEtTQW1KaUJoYzNObGRDNWpiMjV6ZEhKMVkzUnZjaTV3Y21WMlpXNTBSR1ZtWlhKeVpXUk1iMkZrUkdWd1pXNWtaVzUwY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WeklEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQnBaaUFvYVhOVFkyVnVaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZWE56WlhRZ2FXNXpkR0Z1WTJWdlppQmpZeTVUWTJWdVpVRnpjMlYwSUh4OElHRnpjMlYwSUdsdWMzUmhibU5sYjJZZ1kyTXVVSEpsWm1GaUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTWdQU0JoYzNObGRDNWhjM2x1WTB4dllXUkJjM05sZEhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2TDJsbUlDaHlaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lHTmpMbXh2WnlnblpHVm1aWEp5WldRZ2JHOWhaQ0J5WVhjZ1lYTnpaWFJ6SUdadmNpQW5JQ3NnYVhSbGJTNXBaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMMzFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2NtVnpPMXh1ZlZ4dVhHNTJZWElnVFdsemMybHVaME5zWVhOek8xeHVYRzVtZFc1amRHbHZiaUJzYjJGa1ZYVnBaQ0FvYVhSbGJTd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQnBaaUFvUTBOZlJVUkpWRTlTS1NCN1hHNGdJQ0FnSUNBZ0lFMXBjM05wYm1kRGJHRnpjeUE5SUUxcGMzTnBibWREYkdGemN5QjhmQ0JGWkdsMGIzSXVjbVZ4ZFdseVpTZ25ZWEJ3T2k4dlpXUnBkRzl5TDNCaFoyVXZjMk5sYm1VdGRYUnBiSE12YldsemMybHVaeTFqYkdGemN5MXlaWEJ2Y25SbGNpY3BMazFwYzNOcGJtZERiR0Z6Y3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2FuTnZianRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR2wwWlcwdVkyOXVkR1Z1ZENBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdwemIyNGdQU0JLVTA5T0xuQmhjbk5sS0dsMFpXMHVZMjl1ZEdWdWRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnUlhKeWIzSW9aR1ZpZFdjdVoyVjBSWEp5YjNJb05Ea3lNeXdnYVhSbGJTNXBaQ3dnWlM1emRHRmpheWtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQnBkR1Z0TG1OdmJuUmxiblFnUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ0lDQWdJR3B6YjI0Z1BTQnBkR1Z0TG1OdmJuUmxiblE3WEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFVnljbTl5S0dSbFluVm5MbWRsZEVWeWNtOXlLRFE1TWpRcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdZMnhoYzNOR2FXNWtaWEk3WEc0Z0lDQWdkbUZ5SUdselUyTmxibVVnUFNCcGMxTmpaVzVsVDJKcUtHcHpiMjRwTzF4dUlDQWdJR2xtSUNocGMxTmpaVzVsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hEUTE5RlJFbFVUMUlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRTFwYzNOcGJtZERiR0Z6Y3k1b1lYTk5hWE56YVc1blEyeGhjM01nUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56Um1sdVpHVnlJRDBnWm5WdVkzUnBiMjRnS0hSNWNHVXNJR1JoZEdFc0lHOTNibVZ5TENCd2NtOXdUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5WlhNZ1BTQk5hWE56YVc1blEyeGhjM011WTJ4aGMzTkdhVzVrWlhJb2RIbHdaU3dnWkdGMFlTd2diM2R1WlhJc0lIQnliM0JPWVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCall5NWZUV2x6YzJsdVoxTmpjbWx3ZEM1blpYUk5hWE56YVc1blYzSmhjSEJsY2loMGVYQmxMQ0JrWVhSaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwWnBibVJsY2k1dmJrUmxjbVZtWlhKbGJtTmxaQ0E5SUUxcGMzTnBibWREYkdGemN5NWpiR0Z6YzBacGJtUmxjaTV2YmtSbGNtVm1aWEpsYm1ObFpEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpSbWx1WkdWeUlEMGdZMk11WDAxcGMzTnBibWRUWTNKcGNIUXVjMkZtWlVacGJtUkRiR0Z6Y3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdZMnhoYzNOR2FXNWtaWElnUFNCbWRXNWpkR2x2YmlBb2FXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYkhNZ1BTQnFjeTVmWjJWMFEyeGhjM05DZVVsa0tHbGtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqYkhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeHpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJNdWQyRnlia2xFS0RRNU1ETXNJR2xrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlBZbXBsWTNRN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSFJrU1c1bWJ5QTlJR05qTG1SbGMyVnlhV0ZzYVhwbExrUmxkR0ZwYkhNdWNHOXZiQzVuWlhRb0tUdGNibHh1SUNBZ0lIWmhjaUJoYzNObGREdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JoYzNObGRDQTlJR05qTG1SbGMyVnlhV0ZzYVhwbEtHcHpiMjRzSUhSa1NXNW1ieXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOR2FXNWtaWEk2SUdOc1lYTnpSbWx1WkdWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBPaUJwZEdWdExtVjRhWE4wYVc1blFYTnpaWFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpkWE4wYjIxRmJuWTZJR2wwWlcxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lHTmpMbVJsYzJWeWFXRnNhWHBsTGtSbGRHRnBiSE11Y0c5dmJDNXdkWFFvZEdSSmJtWnZLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVnljaUE5SUVORFgwcFRRaUI4ZkNCRFExOVNWVTVVU1UxRklEOGdLR1VnS3lBblhGeHVKeUFySUdVdWMzUmhZMnNwSURvZ1pTNXpkR0ZqYXp0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkZjbkp2Y2loa1pXSjFaeTVuWlhSRmNuSnZjaWcwT1RJMUxDQnBkR1Z0TG1sa0xDQmxjbklwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JoYzNObGRDNWZkWFZwWkNBOUlHbDBaVzB1ZFhWcFpEdGNiaUFnSUNCaGMzTmxkQzUxY213Z1BTQmhjM05sZEM1dVlYUnBkbVZWY213N1hHNWNiaUFnSUNCcFppQW9RME5mUlVSSlZFOVNJQ1ltSUdselUyTmxibVVnSmlZZ1RXbHpjMmx1WjBOc1lYTnpMbWhoYzAxcGMzTnBibWREYkdGemN5a2dlMXh1SUNBZ0lDQWdJQ0JOYVhOemFXNW5RMnhoYzNNdWNtVndiM0owVFdsemMybHVaME5zWVhOektHRnpjMlYwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ1pHVm1aWEp5WldSTWIyRmtJRDBnWTJGdVJHVm1aWEp5WldSTWIyRmtLR0Z6YzJWMExDQnBkR1Z0TENCcGMxTmpaVzVsS1R0Y2JpQWdJQ0IyWVhJZ1pHVndaVzVrY3lBOUlIQmhjbk5sUkdWd1pXNWtjeWhwZEdWdExDQmhjM05sZEN3Z2RHUkpibVp2TENCa1pXWmxjbkpsWkV4dllXUXBPMXh1WEc0Z0lDQWdZMk11WkdWelpYSnBZV3hwZW1VdVJHVjBZV2xzY3k1d2IyOXNMbkIxZENoMFpFbHVabThwTzF4dVhHNGdJQ0FnYVdZZ0tHUmxjR1Z1WkhNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGhjM05sZEM1dmJreHZZV1FwSUdGemMyVjBMbTl1VEc5aFpDZ3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZzYkdKaFkyc29iblZzYkN3Z1lYTnpaWFFwTzF4dUlDQWdJSDFjYmlBZ0lDQnNiMkZrUkdWd1pXNWtjeWgwYUdsekxuQnBjR1ZzYVc1bExDQnBkR1Z0TENCaGMzTmxkQ3dnWkdWd1pXNWtjeXdnWTJGc2JHSmhZMnNwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR3h2WVdSVmRXbGtPMXh1Ykc5aFpGVjFhV1F1YVhOVFkyVnVaVTlpYWlBOUlHbHpVMk5sYm1WUFltbzdYRzRpWFgwPSJdfQ==