(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/asset-table.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var pushToMap = require('../utils/misc').pushToMap;
        var js = require('../platform/js');
        function Entry(uuid, type) {
            this.uuid = uuid;
            this.type = type;
        }
        function AssetTable() {
            this._pathToUuid = js.createMap(true);
        }
        function isMatchByWord(path, test) {
            if (path.length > test.length) {
                var nextAscii = path.charCodeAt(test.length);
                return nextAscii === 46 || nextAscii === 47;
            }
            return true;
        }
        var proto = AssetTable.prototype;
        proto.getUuid = function (path, type) {
            path = cc.url.normalize(path);
            var item = this._pathToUuid[path];
            if (item) {
                if (Array.isArray(item)) {
                    if (type) {
                        for (var i = 0; i < item.length; i++) {
                            var entry = item[i];
                            if (js.isChildClassOf(entry.type, type)) {
                                return entry.uuid;
                            }
                        }
                        if (CC_DEBUG && js.isChildClassOf(type, cc.SpriteFrame)) {
                            for (var _i = 0; _i < item.length; _i++) {
                                var _entry = item[_i];
                                if (js.isChildClassOf(_entry.type, cc.SpriteAtlas)) {
                                    cc.errorID(4932, path);
                                    break;
                                }
                            }
                        }
                    } else {
                        return item[0].uuid;
                    }
                } else if (!type || js.isChildClassOf(item.type, type)) {
                    return item.uuid;
                } else if (CC_DEBUG && js.isChildClassOf(type, cc.SpriteFrame) && js.isChildClassOf(item.type, cc.SpriteAtlas)) {
                    cc.errorID(4932, path);
                }
            }
            return '';
        };
        proto.getUuidArray = function (path, type, out_urls) {
            path = cc.url.normalize(path);
            if (path[path.length - 1] === '/') {
                path = path.slice(0, -1);
            }
            var path2uuid = this._pathToUuid;
            var uuids = [];
            var isChildClassOf = js.isChildClassOf;
            var _foundAtlasUrl;
            for (var p in path2uuid) {
                if (p.startsWith(path) && isMatchByWord(p, path) || !path) {
                    var item = path2uuid[p];
                    if (Array.isArray(item)) {
                        for (var i = 0; i < item.length; i++) {
                            var entry = item[i];
                            if (!type || isChildClassOf(entry.type, type)) {
                                uuids.push(entry.uuid);
                                if (out_urls) {
                                    out_urls.push(p);
                                }
                            } else if (CC_DEBUG && entry.type === cc.SpriteAtlas) {
                                _foundAtlasUrl = p;
                            }
                        }
                    } else {
                        if (!type || isChildClassOf(item.type, type)) {
                            uuids.push(item.uuid);
                            if (out_urls) {
                                out_urls.push(p);
                            }
                        } else if (CC_DEBUG && item.type === cc.SpriteAtlas) {
                            _foundAtlasUrl = p;
                        }
                    }
                }
            }
            if (CC_DEBUG && uuids.length === 0 && _foundAtlasUrl && js.isChildClassOf(type, cc.SpriteFrame)) {
                cc.errorID(4932, _foundAtlasUrl);
            }
            return uuids;
        };
        proto.add = function (path, uuid, type, isMainAsset) {
            path = path.substring(0, path.length - cc.path.extname(path).length);
            var newEntry = new Entry(uuid, type);
            pushToMap(this._pathToUuid, path, newEntry, isMainAsset);
        };
        proto._getInfo_DEBUG = CC_DEBUG && function (uuid, out_info) {
            var path2uuid = this._pathToUuid;
            var paths = Object.keys(path2uuid);
            for (var p = 0; p < paths.length; ++p) {
                var path = paths[p];
                var item = path2uuid[path];
                if (Array.isArray(item)) {
                    for (var i = 0; i < item.length; i++) {
                        var entry = item[i];
                        if (entry.uuid === uuid) {
                            out_info.path = path;
                            out_info.type = entry.type;
                            return true;
                        }
                    }
                } else if (item.uuid === uuid) {
                    out_info.path = path;
                    out_info.type = item.type;
                    return true;
                }
            }
            return false;
        };
        proto.reset = function () {
            this._pathToUuid = js.createMap(true);
        };
        module.exports = AssetTable;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,