(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/loader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../platform/js');
        var plistParser = require('../platform/CCSAXParser').plistParser;
        var Pipeline = require('./pipeline');
        var Texture2D = require('../assets/CCTexture2D');
        var loadUuid = require('./uuid-loader');
        var fontLoader = require('./font-loader');
        function loadNothing() {
            return null;
        }
        function loadJSON(item) {
            if (typeof item.content !== 'string') {
                return new Error('JSON Loader: Input item doesn\'t contain string content');
            }
            try {
                var result = JSON.parse(item.content);
                return result;
            } catch (e) {
                return new Error('JSON Loader: Parse json [' + item.id + '] failed : ' + e);
            }
        }
        function loadImage(item) {
            var loadByDeserializedAsset = item._owner instanceof cc.Asset;
            if (loadByDeserializedAsset) {
                return null;
            }
            var image = item.content;
            if (!CC_WECHATGAME && !CC_QQPLAY && cc.sys.platform !== cc.sys.FB_PLAYABLE_ADS && !(image instanceof Image)) {
                return new Error('Image Loader: Input item doesn\'t contain Image content');
            }
            var tex = item.texture || new Texture2D();
            tex._uuid = item.uuid;
            tex.url = item.url;
            tex._setRawAsset(item.rawUrl, false);
            tex._nativeAsset = image;
            return tex;
        }
        function loadAudioAsAsset(item, callback) {
            var loadByDeserializedAsset = item._owner instanceof cc.Asset;
            if (loadByDeserializedAsset) {
                return null;
            }
            var audioClip = new cc.AudioClip();
            audioClip._setRawAsset(item.rawUrl, false);
            audioClip._nativeAsset = item.content;
            audioClip.url = item.url;
            return audioClip;
        }
        function loadPlist(item) {
            if (typeof item.content !== 'string') {
                return new Error('Plist Loader: Input item doesn\'t contain string content');
            }
            var result = plistParser.parse(item.content);
            if (result) {
                return result;
            } else {
                return new Error('Plist Loader: Parse [' + item.id + '] failed');
            }
        }
        function loadBinary(item) {
            if (item.load) {
                return item.load(item.content);
            } else {
                return null;
            }
        }
        var PVR_HEADER_LENGTH = 13;
        var PVR_MAGIC = 55727696;
        var PVR_HEADER_MAGIC = 0;
        var PVR_HEADER_FORMAT = 2;
        var PVR_HEADER_HEIGHT = 6;
        var PVR_HEADER_WIDTH = 7;
        var PVR_HEADER_MIPMAPCOUNT = 11;
        var PVR_HEADER_METADATA = 12;
        function loadPVRTex(item) {
            var buffer = item.content instanceof ArrayBuffer ? item.content : item.content.buffer;
            var header = new Int32Array(buffer, 0, PVR_HEADER_LENGTH);
            if (header[PVR_HEADER_MAGIC] != PVR_MAGIC) {
                return new Error('Invalid magic number in PVR header');
            }
            var width = header[PVR_HEADER_WIDTH];
            var height = header[PVR_HEADER_HEIGHT];
            var dataOffset = header[PVR_HEADER_METADATA] + 52;
            var pvrtcData = new Uint8Array(buffer, dataOffset);
            var pvrAsset = {
                _data: pvrtcData,
                _compressed: true,
                width: width,
                height: height
            };
            return pvrAsset;
        }
        var ETC_PKM_HEADER_SIZE = 16;
        var ETC_PKM_FORMAT_OFFSET = 6;
        var ETC_PKM_ENCODED_WIDTH_OFFSET = 8;
        var ETC_PKM_ENCODED_HEIGHT_OFFSET = 10;
        var ETC_PKM_WIDTH_OFFSET = 12;
        var ETC_PKM_HEIGHT_OFFSET = 14;
        var ETC1_RGB_NO_MIPMAPS = 0;
        var ETC2_RGB_NO_MIPMAPS = 1;
        var ETC2_RGBA_NO_MIPMAPS = 3;
        function readBEUint16(header, offset) {
            return header[offset] << 8 | header[offset + 1];
        }
        function loadPKMTex(item) {
            var buffer = item.content instanceof ArrayBuffer ? item.content : item.content.buffer;
            var header = new Uint8Array(buffer);
            var format = readBEUint16(header, ETC_PKM_FORMAT_OFFSET);
            if (format !== ETC1_RGB_NO_MIPMAPS && format !== ETC2_RGB_NO_MIPMAPS && format !== ETC2_RGBA_NO_MIPMAPS) {
                return new Error('Invalid magic number in ETC header');
            }
            var width = readBEUint16(header, ETC_PKM_WIDTH_OFFSET);
            var height = readBEUint16(header, ETC_PKM_HEIGHT_OFFSET);
            var encodedWidth = readBEUint16(header, ETC_PKM_ENCODED_WIDTH_OFFSET);
            var encodedHeight = readBEUint16(header, ETC_PKM_ENCODED_HEIGHT_OFFSET);
            var etcData = new Uint8Array(buffer, ETC_PKM_HEADER_SIZE);
            var etcAsset = {
                _data: etcData,
                _compressed: true,
                width: width,
                height: height
            };
            return etcAsset;
        }
        var ASTC_MAGIC = 1554098963;
        var ASTC_HEADER_LENGTH = 16;
        var ASTC_HEADER_MAGIC = 4;
        var ASTC_HEADER_BLOCKDIM = 3;
        var ASTC_HEADER_SIZE_X_BEGIN = 7;
        var ASTC_HEADER_SIZE_Y_BEGIN = 10;
        var ASTC_HEADER_SIZE_Z_BEGIN = 13;
        function loadASTCTex(item) {
            var buffer = item.content instanceof ArrayBuffer ? item.content : item.content.buffer;
            var header = new Uint8Array(buffer);
            var magicval = header[0] + (header[1] << 8) + (header[2] << 16) + (header[3] << 24);
            if (magicval !== ASTC_MAGIC) {
                return new Error('Invalid magic number in ASTC header');
            }
            var xdim = header[ASTC_HEADER_MAGIC];
            var ydim = header[ASTC_HEADER_MAGIC + 1];
            var zdim = header[ASTC_HEADER_MAGIC + 2];
            if ((xdim < 3 || xdim > 6 || ydim < 3 || ydim > 6 || zdim < 3 || zdim > 6) && (xdim < 4 || xdim === 7 || xdim === 9 || xdim === 11 || xdim > 12 || ydim < 4 || ydim === 7 || ydim === 9 || ydim === 11 || ydim > 12 || zdim !== 1)) {
                return new Error('Invalid block number in ASTC header');
            }
            var format = getASTCFormat(xdim, ydim);
            var xsize = header[ASTC_HEADER_SIZE_X_BEGIN] + (header[ASTC_HEADER_SIZE_X_BEGIN + 1] << 8) + (header[ASTC_HEADER_SIZE_X_BEGIN + 2] << 16);
            var ysize = header[ASTC_HEADER_SIZE_Y_BEGIN] + (header[ASTC_HEADER_SIZE_Y_BEGIN + 1] << 8) + (header[ASTC_HEADER_SIZE_Y_BEGIN + 2] << 16);
            var zsize = header[ASTC_HEADER_SIZE_Z_BEGIN] + (header[ASTC_HEADER_SIZE_Z_BEGIN + 1] << 8) + (header[ASTC_HEADER_SIZE_Z_BEGIN + 2] << 16);
            buffer = buffer.slice(ASTC_HEADER_LENGTH, buffer.byteLength);
            var astcData = new Uint8Array(buffer);
            var astcAsset = {
                _data: astcData,
                _compressed: true,
                width: xsize,
                height: ysize,
                format: format
            };
            return astcAsset;
        }
        function getASTCFormat(xdim, ydim) {
            if (xdim === 4) {
                return PixelFormat.RGBA_ASTC_4x4;
            } else if (xdim === 5) {
                if (ydim === 4) {
                    return PixelFormat.RGBA_ASTC_5x4;
                } else {
                    return PixelFormat.RGBA_ASTC_5x5;
                }
            } else if (xdim === 6) {
                if (ydim === 5) {
                    return PixelFormat.RGBA_ASTC_6x5;
                } else {
                    return PixelFormat.RGBA_ASTC_6x6;
                }
            } else if (xdim === 8) {
                if (ydim === 5) {
                    return PixelFormat.RGBA_ASTC_8x5;
                } else if (ydim === 6) {
                    return PixelFormat.RGBA_ASTC_8x6;
                } else {
                    return PixelFormat.RGBA_ASTC_8x8;
                }
            } else if (xdim === 10) {
                if (ydim === 5) {
                    return PixelFormat.RGBA_ASTC_10x5;
                } else if (ydim === 6) {
                    return PixelFormat.RGBA_ASTC_10x6;
                } else if (ydim === 8) {
                    return PixelFormat.RGBA_ASTC_10x8;
                } else {
                    return PixelFormat.RGBA_ASTC_10x10;
                }
            } else {
                if (ydim === 10) {
                    return PixelFormat.RGBA_ASTC_12x10;
                } else {
                    return PixelFormat.RGBA_ASTC_12x12;
                }
            }
        }
        var defaultMap = {
            'png': loadImage,
            'jpg': loadImage,
            'bmp': loadImage,
            'jpeg': loadImage,
            'gif': loadImage,
            'ico': loadImage,
            'tiff': loadImage,
            'webp': loadImage,
            'image': loadImage,
            'pvr': loadPVRTex,
            'pkm': loadPKMTex,
            'astc': loadASTCTex,
            'mp3': loadAudioAsAsset,
            'ogg': loadAudioAsAsset,
            'wav': loadAudioAsAsset,
            'm4a': loadAudioAsAsset,
            'json': loadJSON,
            'ExportJson': loadJSON,
            'plist': loadPlist,
            'uuid': loadUuid,
            'prefab': loadUuid,
            'fire': loadUuid,
            'scene': loadUuid,
            'binary': loadBinary,
            'dbbin': loadBinary,
            'bin': loadBinary,
            'font': fontLoader.loadFont,
            'eot': fontLoader.loadFont,
            'ttf': fontLoader.loadFont,
            'woff': fontLoader.loadFont,
            'svg': fontLoader.loadFont,
            'ttc': fontLoader.loadFont,
            'default': loadNothing
        };
        var ID = 'Loader';
        var Loader = function Loader(extMap) {
            this.id = ID;
            this.async = true;
            this.pipeline = null;
            this.extMap = js.mixin(extMap, defaultMap);
        };
        Loader.ID = ID;
        Loader.prototype.addHandlers = function (extMap) {
            this.extMap = js.mixin(this.extMap, extMap);
        };
        Loader.prototype.handle = function (item, callback) {
            var loadFunc = this.extMap[item.type] || this.extMap['default'];
            return loadFunc.call(this, item, callback);
        };
        Pipeline.Loader = module.exports = Loader;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,