(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/pack-downloader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Unpackers = require('./unpackers');
        var pushToMap = require('../utils/misc').pushToMap;
        var PackState = {
            Invalid: 0,
            Removed: 1,
            Downloading: 2,
            Loaded: 3
        };
        function UnpackerData() {
            this.unpacker = null;
            this.state = PackState.Invalid;
        }
        var uuidToPack = {};
        var packIndices = {};
        var globalUnpackers = {};
        function error(uuid, packUuid) {
            return new Error('Can not retrieve ' + uuid + ' from packer ' + packUuid);
        }
        module.exports = {
            initPacks: function initPacks(packs) {
                packIndices = packs;
                uuidToPack = {};
                for (var packUuid in packs) {
                    var uuids = packs[packUuid];
                    for (var i = 0; i < uuids.length; i++) {
                        var uuid = uuids[i];
                        var pushFront = uuids.length === 1;
                        pushToMap(uuidToPack, uuid, packUuid, pushFront);
                    }
                }
            },
            _loadNewPack: function _loadNewPack(uuid, packUuid, callback) {
                var self = this;
                var packUrl = cc.AssetLibrary.getLibUrlNoExt(packUuid) + '.json';
                cc.loader.load({
                    url: packUrl,
                    ignoreMaxConcurrency: true
                }, function (err, packJson) {
                    if (err) {
                        cc.errorID(4916, uuid);
                        return callback(err);
                    }
                    var res = self._doLoadNewPack(uuid, packUuid, packJson);
                    if (res) {
                        callback(null, res);
                    } else {
                        callback(error(uuid, packUuid));
                    }
                });
            },
            _doPreload: function _doPreload(packUuid, packJson) {
                var unpackerData = globalUnpackers[packUuid];
                if (!unpackerData) {
                    unpackerData = globalUnpackers[packUuid] = new UnpackerData();
                    unpackerData.state = PackState.Downloading;
                }
                if (unpackerData.state !== PackState.Loaded) {
                    unpackerData.unpacker = new Unpackers.JsonUnpacker();
                    unpackerData.unpacker.load(packIndices[packUuid], packJson);
                    unpackerData.state = PackState.Loaded;
                }
            },
            _doLoadNewPack: function _doLoadNewPack(uuid, packUuid, packedJson) {
                var unpackerData = globalUnpackers[packUuid];
                if (unpackerData.state !== PackState.Loaded) {
                    if (typeof packedJson === 'string') {
                        packedJson = JSON.parse(packedJson);
                    }
                    if (Array.isArray(packedJson)) {
                        unpackerData.unpacker = new Unpackers.JsonUnpacker();
                    } else if (packedJson.type === Unpackers.TextureUnpacker.ID) {
                        unpackerData.unpacker = new Unpackers.TextureUnpacker();
                    }
                    unpackerData.unpacker.load(packIndices[packUuid], packedJson);
                    unpackerData.state = PackState.Loaded;
                }
                return unpackerData.unpacker.retrieve(uuid);
            },
            _selectLoadedPack: function _selectLoadedPack(packUuids) {
                var existsPackState = PackState.Invalid;
                var existsPackUuid = '';
                for (var i = 0; i < packUuids.length; i++) {
                    var packUuid = packUuids[i];
                    var unpackerData = globalUnpackers[packUuid];
                    if (unpackerData) {
                        var state = unpackerData.state;
                        if (state === PackState.Loaded) {
                            return packUuid;
                        } else if (state > existsPackState) {
                            existsPackState = state;
                            existsPackUuid = packUuid;
                        }
                    }
                }
                return existsPackState !== PackState.Invalid ? existsPackUuid : packUuids[0];
            },
            load: function load(item, callback) {
                var uuid = item.uuid;
                var packUuid = uuidToPack[uuid];
                if (!packUuid) {
                    return;
                }
                if (Array.isArray(packUuid)) {
                    packUuid = this._selectLoadedPack(packUuid);
                }
                var unpackerData = globalUnpackers[packUuid];
                if (unpackerData && unpackerData.state === PackState.Loaded) {
                    var json = unpackerData.unpacker.retrieve(uuid);
                    if (json) {
                        return json;
                    } else {
                        return error(uuid, packUuid);
                    }
                } else {
                    if (!unpackerData) {
                        if (!CC_TEST) {
                            console.log('Create unpacker %s for %s', packUuid, uuid);
                        }
                        unpackerData = globalUnpackers[packUuid] = new UnpackerData();
                        unpackerData.state = PackState.Downloading;
                    }
                    this._loadNewPack(uuid, packUuid, callback);
                }
                return null;
            }
        };
        if (CC_TEST) {
            cc._Test.PackDownloader = module.exports;
            cc._Test.PackDownloader.reset = function () {
                uuidToPack = {};
                packIndices = {};
                globalUnpackers = {};
            };
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,