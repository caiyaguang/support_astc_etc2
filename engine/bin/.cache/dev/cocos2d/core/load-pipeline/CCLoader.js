(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/CCLoader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var js = require('../platform/js');
        var Pipeline = require('./pipeline');
        var LoadingItems = require('./loading-items');
        var AssetLoader = require('./asset-loader');
        var Downloader = require('./downloader');
        var Loader = require('./loader');
        var AssetTable = require('./asset-table');
        var callInNextTick = require('../platform/utils').callInNextTick;
        var AutoReleaseUtils = require('./auto-release-utils');
        var ReleasedAssetChecker = CC_DEBUG && require('./released-asset-checker');
        var assetTables = Object.create(null);
        assetTables.assets = new AssetTable();
        assetTables.internal = new AssetTable();
        function getXMLHttpRequest() {
            return window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject('MSXML2.XMLHTTP');
        }
        var _info = {
            url: null,
            raw: false
        };
        function getResWithUrl(res) {
            var id, result, isUuid;
            if ((typeof res === 'undefined' ? 'undefined' : _typeof(res)) === 'object') {
                result = res;
                if (res.url) {
                    return result;
                } else {
                    id = res.uuid;
                }
            } else {
                result = {};
                id = res;
            }
            isUuid = result.type ? result.type === 'uuid' : cc.AssetLibrary._uuidInSettings(id);
            cc.AssetLibrary._getAssetInfoInRuntime(id, _info);
            result.url = !isUuid ? id : _info.url;
            if (_info.url && result.type === 'uuid' && _info.raw) {
                result.type = null;
                result.isRawAsset = true;
            } else if (!isUuid) {
                result.isRawAsset = true;
            }
            return result;
        }
        var _sharedResources = [];
        var _sharedList = [];
        function CCLoader() {
            var assetLoader = new AssetLoader();
            var downloader = new Downloader();
            var loader = new Loader();
            Pipeline.call(this, [
                assetLoader,
                downloader,
                loader
            ]);
            this.assetLoader = assetLoader;
            this.md5Pipe = null;
            this.downloader = downloader;
            this.loader = loader;
            this.onProgress = null;
            this._autoReleaseSetting = js.createMap(true);
            if (CC_DEBUG) {
                this._releasedAssetChecker_DEBUG = new ReleasedAssetChecker();
            }
        }
        js.extend(CCLoader, Pipeline);
        var proto = CCLoader.prototype;
        proto.init = function (director) {
            if (CC_DEBUG) {
                var self = this;
                director.on(cc.Director.EVENT_AFTER_UPDATE, function () {
                    self._releasedAssetChecker_DEBUG.checkCouldRelease(self._cache);
                });
            }
        };
        proto.getXMLHttpRequest = getXMLHttpRequest;
        proto.addDownloadHandlers = function (extMap) {
            this.downloader.addHandlers(extMap);
        };
        proto.addLoadHandlers = function (extMap) {
            this.loader.addHandlers(extMap);
        };
        proto.load = function (resources, progressCallback, completeCallback) {
            if (CC_DEV && !resources) {
                return cc.error('[cc.loader.load] resources must be non-nil.');
            }
            if (completeCallback === undefined) {
                completeCallback = progressCallback;
                progressCallback = this.onProgress || null;
            }
            var self = this;
            var singleRes = false;
            var res;
            if (!(resources instanceof Array)) {
                if (resources) {
                    singleRes = true;
                    resources = [resources];
                } else {
                    resources = [];
                }
            }
            _sharedResources.length = 0;
            for (var i = 0; i < resources.length; ++i) {
                var resource = resources[i];
                if (resource && resource.id) {
                    cc.warnID(4920, resource.id);
                    if (!resource.uuid && !resource.url) {
                        resource.url = resource.id;
                    }
                }
                res = getResWithUrl(resource);
                if (!res.url && !res.uuid)
                    continue;
                var item = this._cache[res.url];
                _sharedResources.push(item || res);
            }
            var queue = LoadingItems.create(this, progressCallback, function (errors, items) {
                callInNextTick(function () {
                    if (completeCallback) {
                        if (singleRes) {
                            var id = res.url;
                            completeCallback.call(self, errors, items.getContent(id));
                        } else {
                            completeCallback.call(self, errors, items);
                        }
                        completeCallback = null;
                    }
                    if (CC_EDITOR) {
                        for (var _id in self._cache) {
                            if (self._cache[_id].complete) {
                                self.removeItem(_id);
                            }
                        }
                    }
                    items.destroy();
                });
            });
            LoadingItems.initQueueDeps(queue);
            queue.append(_sharedResources);
            _sharedResources.length = 0;
        };
        proto.flowInDeps = function (owner, urlList, callback) {
            _sharedList.length = 0;
            for (var i = 0; i < urlList.length; ++i) {
                var res = getResWithUrl(urlList[i]);
                if (!res.url && !res.uuid)
                    continue;
                var item = this._cache[res.url];
                if (item) {
                    _sharedList.push(item);
                } else {
                    _sharedList.push(res);
                }
            }
            var queue = LoadingItems.create(this, owner ? function (completedCount, totalCount, item) {
                if (this._ownerQueue && this._ownerQueue.onProgress) {
                    this._ownerQueue._childOnProgress(item);
                }
            } : null, function (errors, items) {
                callback(errors, items);
                owner && owner.deps && (owner.deps.length = 0);
                items.destroy();
            });
            if (owner) {
                var ownerQueue = LoadingItems.getQueue(owner);
                queue._ownerQueue = ownerQueue._ownerQueue || ownerQueue;
            }
            var accepted = queue.append(_sharedList, owner);
            _sharedList.length = 0;
            return accepted;
        };
        proto._assetTables = assetTables;
        proto._getResUuid = function (url, type, mount, quiet) {
            mount = mount || 'assets';
            var assetTable = assetTables[mount];
            if (!url || !assetTable) {
                return null;
            }
            var index = url.indexOf('?');
            if (index !== -1)
                url = url.substr(0, index);
            var uuid = assetTable.getUuid(url, type);
            if (!uuid) {
                var extname = cc.path.extname(url);
                if (extname) {
                    url = url.slice(0, -extname.length);
                    uuid = assetTable.getUuid(url, type);
                    if (uuid && !quiet) {
                        cc.warnID(4901, url, extname);
                    }
                }
            }
            return uuid;
        };
        proto._getReferenceKey = function (assetOrUrlOrUuid) {
            var key;
            if ((typeof assetOrUrlOrUuid === 'undefined' ? 'undefined' : _typeof(assetOrUrlOrUuid)) === 'object') {
                key = assetOrUrlOrUuid._uuid || null;
            } else if (typeof assetOrUrlOrUuid === 'string') {
                key = this._getResUuid(assetOrUrlOrUuid, null, null, true) || assetOrUrlOrUuid;
            }
            if (!key) {
                cc.warnID(4800, assetOrUrlOrUuid);
                return key;
            }
            cc.AssetLibrary._getAssetInfoInRuntime(key, _info);
            return this._cache[_info.url] ? _info.url : key;
        };
        proto._urlNotFound = function (url, type, completeCallback) {
            callInNextTick(function () {
                url = cc.url.normalize(url);
                var info = (type ? js.getClassName(type) : 'Asset') + ' in "resources/' + url + '" does not exist.';
                if (completeCallback) {
                    completeCallback(new Error(info), []);
                }
            });
        };
        proto._parseLoadResArgs = function (type, onProgress, onComplete) {
            if (onComplete === undefined) {
                var isValidType = type instanceof Array || js.isChildClassOf(type, cc.RawAsset);
                if (onProgress) {
                    onComplete = onProgress;
                    if (isValidType) {
                        onProgress = this.onProgress || null;
                    }
                } else if (onProgress === undefined && !isValidType) {
                    onComplete = type;
                    onProgress = this.onProgress || null;
                    type = null;
                }
                if (onProgress !== undefined && !isValidType) {
                    onProgress = type;
                    type = null;
                }
            }
            return {
                type: type,
                onProgress: onProgress,
                onComplete: onComplete
            };
        };
        proto.loadRes = function (url, type, mount, progressCallback, completeCallback) {
            if (arguments.length !== 5) {
                completeCallback = progressCallback;
                progressCallback = mount;
                mount = 'assets';
            }
            var args = this._parseLoadResArgs(type, progressCallback, completeCallback);
            type = args.type;
            progressCallback = args.onProgress;
            completeCallback = args.onComplete;
            var self = this;
            var uuid = self._getResUuid(url, type, mount);
            if (uuid) {
                this.load({
                    type: 'uuid',
                    uuid: uuid
                }, progressCallback, function (err, asset) {
                    if (asset) {
                        self.setAutoReleaseRecursively(uuid, false);
                    }
                    if (completeCallback) {
                        completeCallback(err, asset);
                    }
                });
            } else {
                self._urlNotFound(url, type, completeCallback);
            }
        };
        proto._loadResUuids = function (uuids, progressCallback, completeCallback, urls) {
            if (uuids.length > 0) {
                var self = this;
                var res = uuids.map(function (uuid) {
                    return {
                        type: 'uuid',
                        uuid: uuid
                    };
                });
                this.load(res, progressCallback, function (errors, items) {
                    if (completeCallback) {
                        var assetRes = [];
                        var urlRes = urls && [];
                        for (var i = 0; i < res.length; ++i) {
                            var uuid = res[i].uuid;
                            var id = this._getReferenceKey(uuid);
                            var item = items.getContent(id);
                            if (item) {
                                self.setAutoReleaseRecursively(uuid, false);
                                assetRes.push(item);
                                if (urlRes) {
                                    urlRes.push(urls[i]);
                                }
                            }
                        }
                        if (urls) {
                            completeCallback(errors, assetRes, urlRes);
                        } else {
                            completeCallback(errors, assetRes);
                        }
                    }
                });
            } else {
                if (completeCallback) {
                    callInNextTick(function () {
                        if (urls) {
                            completeCallback(null, [], []);
                        } else {
                            completeCallback(null, []);
                        }
                    });
                }
            }
        };
        proto.loadResArray = function (urls, type, mount, progressCallback, completeCallback) {
            if (arguments.length !== 5) {
                completeCallback = progressCallback;
                progressCallback = mount;
                mount = 'assets';
            }
            var args = this._parseLoadResArgs(type, progressCallback, completeCallback);
            type = args.type;
            progressCallback = args.onProgress;
            completeCallback = args.onComplete;
            var uuids = [];
            var isTypesArray = type instanceof Array;
            for (var i = 0; i < urls.length; i++) {
                var url = urls[i];
                var assetType = isTypesArray ? type[i] : type;
                var uuid = this._getResUuid(url, assetType, mount);
                if (uuid) {
                    uuids.push(uuid);
                } else {
                    this._urlNotFound(url, assetType, completeCallback);
                    return;
                }
            }
            this._loadResUuids(uuids, progressCallback, completeCallback);
        };
        proto.loadResDir = function (url, type, mount, progressCallback, completeCallback) {
            if (arguments.length !== 5) {
                completeCallback = progressCallback;
                progressCallback = mount;
                mount = 'assets';
            }
            if (!assetTables[mount])
                return;
            var args = this._parseLoadResArgs(type, progressCallback, completeCallback);
            type = args.type;
            progressCallback = args.onProgress;
            completeCallback = args.onComplete;
            var urls = [];
            var uuids = assetTables[mount].getUuidArray(url, type, urls);
            this._loadResUuids(uuids, progressCallback, completeCallback, urls);
        };
        proto.getRes = function (url, type) {
            var item = this._cache[url];
            if (!item) {
                var uuid = this._getResUuid(url, type, null, true);
                if (uuid) {
                    var ref = this._getReferenceKey(uuid);
                    item = this._cache[ref];
                } else {
                    return null;
                }
            }
            if (item && item.alias) {
                item = item.alias;
            }
            return item && item.complete ? item.content : null;
        };
        proto.getResCount = function () {
            return Object.keys(this._cache).length;
        };
        proto.getDependsRecursively = function (owner) {
            if (owner) {
                var key = this._getReferenceKey(owner);
                var assets = AutoReleaseUtils.getDependsRecursively(key);
                assets.push(key);
                return assets;
            } else {
                return [];
            }
        };
        proto.release = function (asset) {
            if (Array.isArray(asset)) {
                for (var i = 0; i < asset.length; i++) {
                    var key = asset[i];
                    this.release(key);
                }
            } else if (asset) {
                var id = this._getReferenceKey(asset);
                if (!CC_EDITOR && id && id in cc.AssetLibrary.getBuiltinDeps())
                    return;
                var item = this.getItem(id);
                if (item) {
                    var removed = this.removeItem(id);
                    asset = item.content;
                    if (CC_DEBUG && removed) {
                        this._releasedAssetChecker_DEBUG.setReleased(item, id);
                    }
                }
                if (asset instanceof cc.Asset) {
                    var nativeUrl = asset.nativeUrl;
                    if (nativeUrl) {
                        this.release(nativeUrl);
                    }
                    asset.destroy();
                }
            }
        };
        proto.releaseAsset = function (asset) {
            var uuid = asset._uuid;
            if (uuid) {
                this.release(uuid);
            }
        };
        proto.releaseRes = function (url, type, mount) {
            var uuid = this._getResUuid(url, type, mount);
            if (uuid) {
                this.release(uuid);
            } else {
                cc.errorID(4914, url);
            }
        };
        proto.releaseResDir = function (url, type, mount) {
            mount = mount || 'assets';
            if (!assetTables[mount])
                return;
            var uuids = assetTables[mount].getUuidArray(url, type);
            for (var i = 0; i < uuids.length; i++) {
                var uuid = uuids[i];
                this.release(uuid);
            }
        };
        proto.releaseAll = function () {
            for (var id in this._cache) {
                this.release(id);
            }
        };
        proto.removeItem = function (key) {
            var removed = Pipeline.prototype.removeItem.call(this, key);
            delete this._autoReleaseSetting[key];
            return removed;
        };
        proto.setAutoRelease = function (assetOrUrlOrUuid, autoRelease) {
            var key = this._getReferenceKey(assetOrUrlOrUuid);
            if (key) {
                this._autoReleaseSetting[key] = !!autoRelease;
            } else if (CC_DEV) {
                cc.warnID(4902);
            }
        };
        proto.setAutoReleaseRecursively = function (assetOrUrlOrUuid, autoRelease) {
            autoRelease = !!autoRelease;
            var key = this._getReferenceKey(assetOrUrlOrUuid);
            if (key) {
                this._autoReleaseSetting[key] = autoRelease;
                var depends = AutoReleaseUtils.getDependsRecursively(key);
                for (var i = 0; i < depends.length; i++) {
                    var depend = depends[i];
                    this._autoReleaseSetting[depend] = autoRelease;
                }
            } else if (CC_DEV) {
                cc.warnID(4902);
            }
        };
        proto.isAutoRelease = function (assetOrUrl) {
            var key = this._getReferenceKey(assetOrUrl);
            if (key) {
                return !!this._autoReleaseSetting[key];
            }
            return false;
        };
        cc.loader = new CCLoader();
        if (CC_EDITOR) {
            cc.loader.refreshUrl = function (uuid, oldUrl, newUrl) {
                var item = this._cache[uuid];
                if (item) {
                    item.url = newUrl;
                }
                item = this._cache[oldUrl];
                if (item) {
                    item.id = newUrl;
                    item.url = newUrl;
                    this._cache[newUrl] = item;
                    delete this._cache[oldUrl];
                }
            };
        }
        module.exports = cc.loader;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,