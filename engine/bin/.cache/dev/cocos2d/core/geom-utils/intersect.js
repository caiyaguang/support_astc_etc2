(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/geom-utils/intersect.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        var _recyclePool = require('../../renderer/memop/recycle-pool');
        var _recyclePool2 = _interopRequireDefault(_recyclePool);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var Aabb = require('./aabb');
        var Ray = require('./ray');
        var Triangle = require('./triangle');
        var mat4 = cc.vmath.mat4;
        var vec3 = cc.vmath.vec3;
        var intersect = {};
        intersect.rayAabb = function () {
            var min = vec3.create();
            var max = vec3.create();
            return function (ray, aabb) {
                var o = ray.o, d = ray.d;
                var ix = 1 / d.x, iy = 1 / d.y, iz = 1 / d.z;
                vec3.sub(min, aabb.center, aabb.halfExtents);
                vec3.add(max, aabb.center, aabb.halfExtents);
                var t1 = (min.x - o.x) * ix;
                var t2 = (max.x - o.x) * ix;
                var t3 = (min.y - o.y) * iy;
                var t4 = (max.y - o.y) * iy;
                var t5 = (min.z - o.z) * iz;
                var t6 = (max.z - o.z) * iz;
                var tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));
                var tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6));
                if (tmax < 0 || tmin > tmax)
                    return 0;
                return tmin;
            };
        }();
        intersect.rayTriangle = function () {
            var ab = vec3.create(0, 0, 0);
            var ac = vec3.create(0, 0, 0);
            var pvec = vec3.create(0, 0, 0);
            var tvec = vec3.create(0, 0, 0);
            var qvec = vec3.create(0, 0, 0);
            return function (ray, triangle) {
                vec3.sub(ab, triangle.b, triangle.a);
                vec3.sub(ac, triangle.c, triangle.a);
                vec3.cross(pvec, ray.d, ac);
                var det = vec3.dot(ab, pvec);
                if (det <= 0) {
                    return 0;
                }
                vec3.sub(tvec, ray.o, triangle.a);
                var u = vec3.dot(tvec, pvec);
                if (u < 0 || u > det) {
                    return 0;
                }
                vec3.cross(qvec, tvec, ab);
                var v = vec3.dot(ray.d, qvec);
                if (v < 0 || u + v > det) {
                    return 0;
                }
                var t = vec3.dot(ac, qvec) / det;
                if (t < 0)
                    return 0;
                return t;
            };
        }();
        intersect.rayMesh = function () {
            var tri = Triangle.create();
            var minDist = Infinity;
            var _compType2fn = {
                5120: 'getInt8',
                5121: 'getUint8',
                5122: 'getInt16',
                5123: 'getUint16',
                5124: 'getInt32',
                5125: 'getUint32',
                5126: 'getFloat32'
            };
            var littleEndian = function () {
                var buffer = new ArrayBuffer(2);
                new DataView(buffer).setInt16(0, 256, true);
                return new Int16Array(buffer)[0] === 256;
            }();
            function getVec3(out, dv, fn, step, idx) {
                vec3.set(out, dv[fn](idx, littleEndian), dv[fn](idx += step, littleEndian), dv[fn](idx += step, littleEndian));
            }
            return function (ray, mesh) {
                minDist = Infinity;
                var subMeshes = mesh._subMeshes;
                for (var i = 0; i < subMeshes.length; i++) {
                    if (subMeshes[i]._primitiveType !== _gfx2.default.PT_TRIANGLES)
                        continue;
                    var vb = mesh._vbs[i] || mesh._vbs[0];
                    var vbData = vb.data;
                    var dv = new DataView(vbData.buffer, vbData.byteOffset, vbData.byteLength);
                    var ib = mesh._ibs[i].data;
                    var format = vb.buffer._format;
                    var fmt = format.element(_gfx2.default.ATTR_POSITION);
                    var offset = fmt.offset, stride = fmt.stride;
                    var fn = _compType2fn[fmt.type];
                    for (var _i = 0; _i < ib.length; _i += 3) {
                        getVec3(tri.a, dv, fn, 4, ib[_i] * stride + offset);
                        getVec3(tri.b, dv, fn, 4, ib[_i + 1] * stride + offset);
                        getVec3(tri.c, dv, fn, 4, ib[_i + 2] * stride + offset);
                        var dist = intersect.rayTriangle(ray, tri);
                        if (dist > 0 && dist < minDist) {
                            minDist = dist;
                        }
                    }
                }
                return minDist;
            };
        }();
        intersect.raycast = function () {
            function traversal(node, cb) {
                var children = node.children;
                for (var i = children.length - 1; i >= 0; i--) {
                    var child = children[i];
                    traversal(child, cb);
                }
                cb(node);
            }
            function cmp(a, b) {
                return a.distance - b.distance;
            }
            function transformMat4Normal(out, a, m) {
                var x = a.x, y = a.y, z = a.z, rhw = m.m03 * x + m.m07 * y + m.m11 * z;
                rhw = rhw ? 1 / rhw : 1;
                out.x = (m.m00 * x + m.m04 * y + m.m08 * z) * rhw;
                out.y = (m.m01 * x + m.m05 * y + m.m09 * z) * rhw;
                out.z = (m.m02 * x + m.m06 * y + m.m10 * z) * rhw;
                return out;
            }
            var resultsPool = new _recyclePool2.default(function () {
                return {
                    distance: 0,
                    node: null
                };
            }, 1);
            var results = [];
            var nodeAabb = Aabb.create();
            var minPos = vec3.create();
            var maxPos = vec3.create();
            var modelRay = Ray.create();
            var m4_1 = mat4.create();
            var m4_2 = mat4.create();
            var d = vec3.create();
            function distanceValid(distance) {
                return distance > 0 && distance < Infinity;
            }
            return function (root, worldRay, handler, filter) {
                resultsPool.reset();
                results.length = 0;
                root = root || cc.director.getScene();
                traversal(root, function (node) {
                    if (filter && !filter(node))
                        return;
                    mat4.invert(m4_2, node.getWorldMatrix(m4_1));
                    vec3.transformMat4(modelRay.o, worldRay.o, m4_2);
                    vec3.normalize(modelRay.d, transformMat4Normal(modelRay.d, worldRay.d, m4_2));
                    var distance = Infinity;
                    var component = node._renderComponent;
                    if (component && component._boundingBox) {
                        distance = intersect.rayAabb(modelRay, component._boundingBox);
                    } else if (node.width && node.height) {
                        vec3.set(minPos, -node.width * node.anchorX, -node.height * node.anchorY, node.z);
                        vec3.set(maxPos, node.width * (1 - node.anchorX), node.height * (1 - node.anchorY), node.z);
                        Aabb.fromPoints(nodeAabb, minPos, maxPos);
                        distance = intersect.rayAabb(modelRay, nodeAabb);
                    }
                    if (!distanceValid(distance))
                        return;
                    if (handler) {
                        distance = handler(modelRay, node, distance);
                    }
                    if (distanceValid(distance)) {
                        vec3.scale(d, modelRay.d, distance);
                        transformMat4Normal(d, d, m4_1);
                        var res = resultsPool.add();
                        res.node = node;
                        res.distance = cc.vmath.vec3.mag(d);
                        results.push(res);
                    }
                });
                results.sort(cmp);
                return results;
            };
        }();
        module.exports = intersect;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,