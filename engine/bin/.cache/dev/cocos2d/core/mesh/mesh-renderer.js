(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/mesh/mesh-renderer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        var _inputAssembler = require('../../renderer/core/input-assembler');
        var _inputAssembler2 = _interopRequireDefault(_inputAssembler);
        var _iaRenderData = require('../../renderer/render-data/ia-render-data');
        var _iaRenderData2 = _interopRequireDefault(_iaRenderData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var Material = require('../assets/material/CCMaterial');
        var MeshRenderer = require('./CCMeshRenderer');
        var BLACK_COLOR = cc.Color.BLACK;
        var meshRendererAssembler = {
            updateRenderData: function updateRenderData(comp) {
                var renderDatas = comp._renderDatas;
                renderDatas.length = 0;
                if (!comp.mesh)
                    return;
                var submeshes = comp.mesh._subMeshes;
                for (var i = 0; i < submeshes.length; i++) {
                    var data = new _iaRenderData2.default();
                    data.material = comp.sharedMaterials[i] || comp.sharedMaterials[0];
                    data.ia = submeshes[i];
                    renderDatas.push(data);
                }
            },
            createWireFrameData: function createWireFrameData(ia, oldIbData, material, renderer) {
                var data = new _iaRenderData2.default();
                var m = new Material();
                m.copy(Material.getBuiltinMaterial('unlit'));
                m.setProperty('diffuseColor', BLACK_COLOR);
                m.define('USE_DIFFUSE_TEXTURE', false);
                data.material = m;
                var indices = [];
                for (var i = 0; i < oldIbData.length; i += 3) {
                    var a = oldIbData[i + 0];
                    var b = oldIbData[i + 1];
                    var c = oldIbData[i + 2];
                    indices.push(a, b, b, c, c, a);
                }
                var ibData = new Uint16Array(indices);
                var ib = new _gfx2.default.IndexBuffer(renderer._device, _gfx2.default.INDEX_FMT_UINT16, _gfx2.default.USAGE_STATIC, ibData, ibData.length);
                data.ia = new _inputAssembler2.default(ia._vertexBuffer, ib, _gfx2.default.PT_LINES);
                return data;
            },
            fillBuffers: function fillBuffers(comp, renderer) {
                renderer._flush();
                var renderDatas = comp._renderDatas;
                var submeshes = comp.mesh._subMeshes;
                if (cc.macro.SHOW_MESH_WIREFRAME) {
                    if (renderDatas.length === submeshes.length) {
                        var ibs = comp.mesh._ibs;
                        for (var i = 0; i < submeshes.length; i++) {
                            var data = renderDatas[i];
                            renderDatas.push(this.createWireFrameData(data.ia, ibs[i].data, data.material, renderer));
                        }
                    }
                } else {
                    renderDatas.length = submeshes.length;
                }
                var tmpMaterial = renderer.material;
                var tmpNode = renderer.node;
                renderer.node = comp.getRenderNode();
                renderer.customProperties = comp._customProperties;
                var tmpCustomProperties = renderer.customProperties;
                comp.mesh._uploadData();
                for (var _i = 0; _i < renderDatas.length; _i++) {
                    var renderData = renderDatas[_i];
                    var material = renderData.material;
                    renderer.material = material;
                    renderer._flushIA(renderData);
                }
                renderer.customProperties = tmpCustomProperties;
                renderer.node = tmpNode;
                renderer.material = tmpMaterial;
            }
        };
        module.exports = MeshRenderer._assembler = meshRendererAssembler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,