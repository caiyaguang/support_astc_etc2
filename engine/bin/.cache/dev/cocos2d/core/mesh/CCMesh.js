(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/mesh/CCMesh.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _inputAssembler = require('../../renderer/core/input-assembler');
        var _inputAssembler2 = _interopRequireDefault(_inputAssembler);
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        var _meshData = require('./mesh-data');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var renderer = require('../renderer');
        var EventTarget = require('../event/event-target');
        function applyColor(data, offset, value) {
            data[offset] = value._val;
        }
        function applyVec2(data, offset, value) {
            data[offset] = value.x;
            data[offset + 1] = value.y;
        }
        function applyVec3(data, offset, value) {
            data[offset] = value.x;
            data[offset + 1] = value.y;
            data[offset + 2] = value.z;
        }
        var Mesh = cc.Class({
            name: 'cc.Mesh',
            extends: cc.Asset,
            mixins: [EventTarget],
            properties: {
                _nativeAsset: {
                    override: true,
                    get: function get() {
                        return this._buffer;
                    },
                    set: function set(bin) {
                        this._buffer = ArrayBuffer.isView(bin) ? bin.buffer : bin;
                        this.initWithBuffer();
                    }
                },
                _vertexBundles: {
                    default: null,
                    type: _meshData.VertexBundle
                },
                _primitives: {
                    default: null,
                    Primitive: _meshData.Primitive
                },
                _minPos: cc.v3(),
                _maxPos: cc.v3(),
                subMeshes: {
                    get: function get() {
                        return this._subMeshes;
                    },
                    set: function set(v) {
                        this._subMeshes = v;
                    }
                }
            },
            ctor: function ctor() {
                this._subMeshes = [];
                this.loaded = false;
                this._ibs = [];
                this._vbs = [];
            },
            initWithBuffer: function initWithBuffer() {
                this._subMeshes.length = 0;
                var primitives = this._primitives;
                for (var i = 0; i < primitives.length; i++) {
                    var primitive = primitives[i];
                    var ibrange = primitive.data;
                    var ibData = new Uint16Array(this._buffer, ibrange.offset, ibrange.length / 2);
                    var ibBuffer = new _gfx2.default.IndexBuffer(renderer.device, primitive.indexUnit, _gfx2.default.USAGE_STATIC, ibData, ibData.length);
                    var vertexBundle = this._vertexBundles[primitive.vertexBundleIndices[0]];
                    var vbRange = vertexBundle.data;
                    var gfxVFmt = new _gfx2.default.VertexFormat(vertexBundle.formats);
                    var vbData = new Uint8Array(this._buffer, vbRange.offset, vbRange.length);
                    var vbBuffer = new _gfx2.default.VertexBuffer(renderer.device, gfxVFmt, _gfx2.default.USAGE_STATIC, vbData, vertexBundle.verticesCount);
                    this._subMeshes.push(new _inputAssembler2.default(vbBuffer, ibBuffer));
                    this._ibs.push({
                        buffer: ibBuffer,
                        data: ibData
                    });
                    this._vbs.push({
                        buffer: vbBuffer,
                        data: vbData
                    });
                }
                this.loaded = true;
                this.emit('load');
            },
            init: function init(vertexFormat, vertexCount, dynamic) {
                this.clear();
                var data = new Uint8Array(vertexFormat._bytes * vertexCount);
                var vb = new _gfx2.default.VertexBuffer(renderer.device, vertexFormat, dynamic ? _gfx2.default.USAGE_DYNAMIC : _gfx2.default.USAGE_STATIC, data, vertexCount);
                this._vbs[0] = {
                    buffer: vb,
                    data: data,
                    dirty: true
                };
                this.loaded = true;
                this.emit('load');
                this.emit('init-format');
            },
            setVertices: function setVertices(name, values, index) {
                index = index || 0;
                var vb = this._vbs[index];
                var buffer = vb.buffer;
                var el = buffer._format._attr2el[name];
                if (!el) {
                    return cc.warn('Cannot find ' + name + ' attribute in vertex defines.');
                }
                var isFlatMode = typeof values[0] === 'number';
                var elNum = el.num;
                var reader = Float32Array;
                var bytes = 4;
                if (name === _gfx2.default.ATTR_COLOR) {
                    if (isFlatMode) {
                        reader = Uint8Array;
                        bytes = 1;
                    } else {
                        reader = Uint32Array;
                    }
                }
                var data = vb[reader.name];
                if (!data) {
                    var vbData = vb.data;
                    data = vb[reader.name] = new reader(vbData.buffer, vbData.byteOffset, vbData.byteLength / bytes);
                }
                var stride = el.stride / bytes;
                var offset = el.offset / bytes;
                if (isFlatMode) {
                    for (var i = 0, l = values.length / elNum; i < l; i++) {
                        var sOffset = i * elNum;
                        var dOffset = i * stride + offset;
                        for (var j = 0; j < elNum; j++) {
                            data[dOffset + j] = values[sOffset + j];
                        }
                    }
                } else {
                    var applyFunc = void 0;
                    if (name === _gfx2.default.ATTR_COLOR) {
                        applyFunc = applyColor;
                    } else {
                        if (elNum === 2) {
                            applyFunc = applyVec2;
                        } else {
                            applyFunc = applyVec3;
                        }
                    }
                    for (var _i = 0, _l = values.length; _i < _l; _i++) {
                        var v = values[_i];
                        var vOffset = _i * stride + offset;
                        applyFunc(data, vOffset, v);
                    }
                }
                vb.dirty = true;
            },
            setIndices: function setIndices(indices, index, dynamic) {
                index = index || 0;
                var data = new Uint16Array(indices);
                var usage = dynamic ? _gfx2.default.USAGE_DYNAMIC : _gfx2.default.USAGE_STATIC;
                var ib = this._ibs[index];
                if (!ib) {
                    var buffer = new _gfx2.default.IndexBuffer(renderer.device, _gfx2.default.INDEX_FMT_UINT16, usage, data, data.length);
                    this._ibs[index] = {
                        buffer: buffer,
                        data: data,
                        dirty: false
                    };
                    var vb = this._vbs[0];
                    this._subMeshes[index] = new _inputAssembler2.default(vb.buffer, buffer);
                } else {
                    ib.buffer._usage = usage;
                    ib.data = data;
                    ib.dirty = true;
                }
            },
            setPrimitiveType: function setPrimitiveType(type, index) {
                index = index || 0;
                var subMesh = this._subMeshes[index];
                if (!subMesh) {
                    cc.warn('Do not have sub mesh at index ' + index);
                    return;
                }
                this._subMeshes[index]._primitiveType = type;
            },
            clear: function clear() {
                this._subMeshes.length = 0;
                var ibs = this._ibs;
                for (var i = 0; i < ibs.length; i++) {
                    ibs[i].buffer.destroy();
                }
                ibs.length = 0;
                var vbs = this._vbs;
                for (var _i2 = 0; _i2 < vbs.length; _i2++) {
                    vbs[_i2].buffer.destroy();
                }
                vbs.length = 0;
            },
            setBoundingBox: function setBoundingBox(min, max) {
                this._minPos = min;
                this._maxPos = max;
            },
            destroy: function destroy() {
                this.clear();
            },
            _uploadData: function _uploadData() {
                var vbs = this._vbs;
                for (var i = 0; i < vbs.length; i++) {
                    var vb = vbs[i];
                    if (vb.dirty) {
                        var buffer = vb.buffer, data = vb.data;
                        buffer._numVertices = data.byteLength / buffer._format._bytes;
                        buffer._bytes = data.byteLength;
                        buffer.update(0, data);
                        vb.dirty = false;
                    }
                }
                var ibs = this._ibs;
                for (var _i3 = 0; _i3 < ibs.length; _i3++) {
                    var ib = ibs[_i3];
                    if (ib.dirty) {
                        var _buffer = ib.buffer, _data = ib.data;
                        _buffer._numIndices = _data.length;
                        _buffer._bytes = _data.byteLength;
                        _buffer.update(0, _data);
                        ib.dirty = false;
                    }
                }
            }
        });
        cc.Mesh = module.exports = Mesh;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,