(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/value-types/quat.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var ValueType = require('./value-type');
        var js = require('../platform/js');
        var CCClass = require('../platform/CCClass');
        var quat = require('../vmath/quat');
        function Quat(x, y, z, w) {
            if (x && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {
                z = x.z;
                y = x.y;
                w = x.w;
                x = x.x;
            }
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
            this.w = w || 1;
        }
        js.extend(Quat, ValueType);
        CCClass.fastDefine('cc.Quat', Quat, {
            x: 0,
            y: 0,
            z: 0,
            w: 1
        });
        var proto = Quat.prototype;
        proto.clone = function () {
            return new Quat(this.x, this.y, this.z, this.w);
        };
        proto.set = function (newValue) {
            this.x = newValue.x;
            this.y = newValue.y;
            this.z = newValue.z;
            this.w = newValue.w;
            return this;
        };
        proto.equals = function (other) {
            return other && this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
        };
        proto.toEuler = function (out) {
            quat.toEuler(out, this);
            return out;
        };
        proto.fromEuler = function (euler) {
            quat.fromEuler(this, euler.x, euler.y, euler.z);
            return this;
        };
        proto.lerp = function (to, ratio, out) {
            out = out || new cc.Quat();
            quat.slerp(out, this, to, ratio);
            return out;
        };
        proto.mul = function (other, out) {
            out = out || new cc.Quat();
            quat.mul(out, this, other);
            return out;
        };
        proto.rotateAround = function (rot, axis, rad, out) {
            out = out || new cc.Quat();
            return quat.rotateAround(out, rot, axis, rad);
        };
        cc.quat = function quat(x, y, z, w) {
            return new Quat(x, y, z, w);
        };
        module.exports = cc.Quat = Quat;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,