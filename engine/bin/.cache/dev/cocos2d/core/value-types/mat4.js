(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/value-types/mat4.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('../vmath');
        var ValueType = require('./value-type');
        var js = require('../platform/js');
        var CCClass = require('../platform/CCClass');
        function Mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
            var t = this;
            t.m00 = m00;
            t.m01 = m01;
            t.m02 = m02;
            t.m03 = m03;
            t.m04 = m10;
            t.m05 = m11;
            t.m06 = m12;
            t.m07 = m13;
            t.m08 = m20;
            t.m09 = m21;
            t.m10 = m22;
            t.m11 = m23;
            t.m12 = m30;
            t.m13 = m31;
            t.m14 = m32;
            t.m15 = m33;
        }
        js.extend(Mat4, ValueType);
        CCClass.fastDefine('cc.Mat4', Mat4, {
            m00: 1,
            m01: 0,
            m02: 0,
            m03: 0,
            m04: 0,
            m05: 1,
            m06: 0,
            m07: 0,
            m08: 0,
            m09: 0,
            m10: 1,
            m11: 0,
            m12: 0,
            m13: 0,
            m14: 0,
            m15: 1
        });
        js.mixin(Mat4.prototype, {
            clone: function clone() {
                var t = this;
                return new Mat4(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05, t.m06, t.m07, t.m08, t.m09, t.m10, t.m11, t.m12, t.m13, t.m14, t.m15);
            },
            set: function set(s) {
                var t = this;
                t.m00 = s.m00;
                t.m01 = s.m01;
                t.m02 = s.m02;
                t.m03 = s.m03;
                t.m04 = s.m04;
                t.m05 = s.m05;
                t.m06 = s.m06;
                t.m07 = s.m07;
                t.m08 = s.m08;
                t.m09 = s.m09;
                t.m10 = s.m10;
                t.m11 = s.m11;
                t.m12 = s.m12;
                t.m13 = s.m13;
                t.m14 = s.m14;
                t.m15 = s.m15;
                return this;
            },
            equals: function equals(other) {
                return _vmath.mat4.exactEquals(this, other);
            },
            fuzzyEquals: function fuzzyEquals(other) {
                return _vmath.mat4.equals(this, other);
            },
            toString: function toString() {
                var t = this;
                return '[\n' + t.m00 + ', ' + t.m01 + ', ' + t.m02 + ', ' + t.m03 + ',\n' + t.m04 + ', ' + t.m05 + ', ' + t.m06 + ', ' + t.m07 + ',\n' + t.m08 + ', ' + t.m09 + ', ' + t.m10 + ', ' + t.m11 + ',\n' + t.m12 + ', ' + t.m13 + ', ' + t.m14 + ', ' + t.m15 + '\n' + ']';
            },
            identity: function identity() {
                return _vmath.mat4.identity(this);
            },
            transpose: function transpose(out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.transpose(out, this);
            },
            invert: function invert(out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.invert(out, this);
            },
            adjoint: function adjoint(out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.adjoint(out, this);
            },
            determinant: function determinant() {
                return _vmath.mat4.determinant(this);
            },
            add: function add(other, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.add(out, this, other);
            },
            sub: function sub(other, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.subtract(out, this, other);
            },
            mul: function mul(other, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.multiply(out, this, other);
            },
            mulScalar: function mulScalar(number, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.mulScalar(out, this, number);
            },
            translate: function translate(v, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.translate(out, this, v);
            },
            scale: function scale(v, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.scale(out, this, v);
            },
            rotate: function rotate(rad, axis, out) {
                out = out || new cc.Mat4();
                return _vmath.mat4.rotate(out, this, rad, axis);
            },
            getTranslation: function getTranslation(out) {
                out = out || new cc.Vec3();
                return _vmath.mat4.getTranslation(out, this);
            },
            getScale: function getScale(out) {
                out = out || new cc.Vec3();
                return _vmath.mat4.getScaling(out, this);
            },
            getRotation: function getRotation(out) {
                out = out || new cc.Quat();
                return _vmath.mat4.getRotation(out, this);
            },
            fromRTS: function fromRTS(q, v, s) {
                return _vmath.mat4.fromRTS(this, q, v, s);
            },
            fromQuat: function fromQuat(quat) {
                return _vmath.mat4.fromQuat(this, quat);
            }
        });
        cc.mat4 = function (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
            var mat = new Mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
            if (m00 === undefined) {
                _vmath.mat4.identity(mat);
            }
            return mat;
        };
        module.exports = cc.Mat4 = Mat4;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,