(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCMacro.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('./js');
        cc.macro = {
            RAD: Math.PI / 180,
            DEG: 180 / Math.PI,
            REPEAT_FOREVER: Number.MAX_VALUE - 1,
            FLT_EPSILON: 1.192092896e-7,
            MIN_ZINDEX: -Math.pow(2, 15),
            MAX_ZINDEX: Math.pow(2, 15) - 1,
            ONE: 1,
            ZERO: 0,
            SRC_ALPHA: 770,
            SRC_ALPHA_SATURATE: 776,
            SRC_COLOR: 768,
            DST_ALPHA: 772,
            DST_COLOR: 774,
            ONE_MINUS_SRC_ALPHA: 771,
            ONE_MINUS_SRC_COLOR: 769,
            ONE_MINUS_DST_ALPHA: 773,
            ONE_MINUS_DST_COLOR: 775,
            ONE_MINUS_CONSTANT_ALPHA: 32772,
            ONE_MINUS_CONSTANT_COLOR: 32770,
            ORIENTATION_PORTRAIT: 1,
            ORIENTATION_LANDSCAPE: 2,
            ORIENTATION_AUTO: 3,
            DENSITYDPI_DEVICE: 'device-dpi',
            DENSITYDPI_HIGH: 'high-dpi',
            DENSITYDPI_MEDIUM: 'medium-dpi',
            DENSITYDPI_LOW: 'low-dpi',
            FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX: true,
            DIRECTOR_STATS_POSITION: cc.v2(0, 0),
            ENABLE_STACKABLE_ACTIONS: true,
            TOUCH_TIMEOUT: 5000,
            BATCH_VERTEX_COUNT: 20000,
            ENABLE_TILEDMAP_CULLING: true,
            DOWNLOAD_MAX_CONCURRENT: 64,
            ENABLE_TRANSPARENT_CANVAS: false,
            ENABLE_WEBGL_ANTIALIAS: false,
            ENABLE_CULLING: false,
            CLEANUP_IMAGE_CACHE: false,
            SHOW_MESH_WIREFRAME: false,
            ROTATE_ACTION_CCW: false
        };
        var SUPPORT_TEXTURE_FORMATS = [
            '.astc',
            '.pkm',
            '.pvr',
            '.webp',
            '.jpg',
            '.jpeg',
            '.bmp',
            '.png'
        ];
        cc.macro.SUPPORT_TEXTURE_FORMATS = SUPPORT_TEXTURE_FORMATS;
        cc.macro.KEY = {
            none: 0,
            back: 6,
            menu: 18,
            backspace: 8,
            tab: 9,
            enter: 13,
            shift: 16,
            ctrl: 17,
            alt: 18,
            pause: 19,
            capslock: 20,
            escape: 27,
            space: 32,
            pageup: 33,
            pagedown: 34,
            end: 35,
            home: 36,
            left: 37,
            up: 38,
            right: 39,
            down: 40,
            select: 41,
            insert: 45,
            Delete: 46,
            0: 48,
            1: 49,
            2: 50,
            3: 51,
            4: 52,
            5: 53,
            6: 54,
            7: 55,
            8: 56,
            9: 57,
            a: 65,
            b: 66,
            c: 67,
            d: 68,
            e: 69,
            f: 70,
            g: 71,
            h: 72,
            i: 73,
            j: 74,
            k: 75,
            l: 76,
            m: 77,
            n: 78,
            o: 79,
            p: 80,
            q: 81,
            r: 82,
            s: 83,
            t: 84,
            u: 85,
            v: 86,
            w: 87,
            x: 88,
            y: 89,
            z: 90,
            num0: 96,
            num1: 97,
            num2: 98,
            num3: 99,
            num4: 100,
            num5: 101,
            num6: 102,
            num7: 103,
            num8: 104,
            num9: 105,
            '*': 106,
            '+': 107,
            '-': 109,
            'numdel': 110,
            '/': 111,
            f1: 112,
            f2: 113,
            f3: 114,
            f4: 115,
            f5: 116,
            f6: 117,
            f7: 118,
            f8: 119,
            f9: 120,
            f10: 121,
            f11: 122,
            f12: 123,
            numlock: 144,
            scrolllock: 145,
            ';': 186,
            semicolon: 186,
            equal: 187,
            '=': 187,
            ',': 188,
            comma: 188,
            dash: 189,
            '.': 190,
            period: 190,
            forwardslash: 191,
            grave: 192,
            '[': 219,
            openbracket: 219,
            backslash: 220,
            ']': 221,
            closebracket: 221,
            quote: 222,
            dpadLeft: 1000,
            dpadRight: 1001,
            dpadUp: 1003,
            dpadDown: 1004,
            dpadCenter: 1005
        };
        cc.macro.ImageFormat = cc.Enum({
            JPG: 0,
            PNG: 1,
            TIFF: 2,
            WEBP: 3,
            PVR: 4,
            ETC: 5,
            S3TC: 6,
            ATITC: 7,
            TGA: 8,
            RAWDATA: 9,
            UNKNOWN: 10
        });
        cc.macro.BlendFactor = cc.Enum({
            ONE: 1,
            ZERO: 0,
            SRC_ALPHA: 770,
            SRC_COLOR: 768,
            DST_ALPHA: 772,
            DST_COLOR: 774,
            ONE_MINUS_SRC_ALPHA: 771,
            ONE_MINUS_SRC_COLOR: 769,
            ONE_MINUS_DST_ALPHA: 773,
            ONE_MINUS_DST_COLOR: 775
        });
        cc.macro.TextAlignment = cc.Enum({
            LEFT: 0,
            CENTER: 1,
            RIGHT: 2
        });
        cc.macro.VerticalTextAlignment = cc.Enum({
            TOP: 0,
            CENTER: 1,
            BOTTOM: 2
        });
        module.exports = cc.macro;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDTWFjcm8uanMiLCIvVXNlcnMvenpmMjAxOS9EZXNrdG9wL2RldmVsb3BtZW50L3N1cHBvcnRfYXN0Yy9lbmdpbmUvY29jb3MyZC9jb3JlL3BsYXRmb3JtL0NDTWFjcm8uanMiXSwibmFtZXMiOlsianMiLCJyZXF1aXJlIiwiY2MiLCJtYWNybyIsIlJBRCIsIk1hdGgiLCJQSSIsIkRFRyIsIlJFUEVBVF9GT1JFVkVSIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwiRkxUX0VQU0lMT04iLCJNSU5fWklOREVYIiwicG93IiwiTUFYX1pJTkRFWCIsIk9ORSIsIlpFUk8iLCJTUkNfQUxQSEEiLCJTUkNfQUxQSEFfU0FUVVJBVEUiLCJTUkNfQ09MT1IiLCJEU1RfQUxQSEEiLCJEU1RfQ09MT1IiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwiT05FX01JTlVTX1NSQ19DT0xPUiIsIk9ORV9NSU5VU19EU1RfQUxQSEEiLCJPTkVfTUlOVVNfRFNUX0NPTE9SIiwiT05FX01JTlVTX0NPTlNUQU5UX0FMUEhBIiwiT05FX01JTlVTX0NPTlNUQU5UX0NPTE9SIiwiT1JJRU5UQVRJT05fUE9SVFJBSVQiLCJPUklFTlRBVElPTl9MQU5EU0NBUEUiLCJPUklFTlRBVElPTl9BVVRPIiwiREVOU0lUWURQSV9ERVZJQ0UiLCJERU5TSVRZRFBJX0hJR0giLCJERU5TSVRZRFBJX01FRElVTSIsIkRFTlNJVFlEUElfTE9XIiwiRklYX0FSVElGQUNUU19CWV9TVFJFQ0hJTkdfVEVYRUxfVE1YIiwiRElSRUNUT1JfU1RBVFNfUE9TSVRJT04iLCJ2MiIsIkVOQUJMRV9TVEFDS0FCTEVfQUNUSU9OUyIsIlRPVUNIX1RJTUVPVVQiLCJCQVRDSF9WRVJURVhfQ09VTlQiLCJFTkFCTEVfVElMRURNQVBfQ1VMTElORyIsIkRPV05MT0FEX01BWF9DT05DVVJSRU5UIiwiRU5BQkxFX1RSQU5TUEFSRU5UX0NBTlZBUyIsIkVOQUJMRV9XRUJHTF9BTlRJQUxJQVMiLCJFTkFCTEVfQ1VMTElORyIsIkNMRUFOVVBfSU1BR0VfQ0FDSEUiLCJTSE9XX01FU0hfV0lSRUZSQU1FIiwiUk9UQVRFX0FDVElPTl9DQ1ciLCJTVVBQT1JUX1RFWFRVUkVfRk9STUFUUyIsIktFWSIsIm5vbmUiLCJiYWNrIiwibWVudSIsImJhY2tzcGFjZSIsInRhYiIsImVudGVyIiwic2hpZnQiLCJjdHJsIiwiYWx0IiwicGF1c2UiLCJjYXBzbG9jayIsImVzY2FwZSIsInNwYWNlIiwicGFnZXVwIiwicGFnZWRvd24iLCJlbmQiLCJob21lIiwibGVmdCIsInVwIiwicmlnaHQiLCJkb3duIiwic2VsZWN0IiwiaW5zZXJ0IiwiRGVsZXRlIiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwiZyIsImgiLCJpIiwiaiIsImsiLCJsIiwibSIsIm4iLCJvIiwicCIsInEiLCJyIiwicyIsInQiLCJ1IiwidiIsInciLCJ4IiwieSIsInoiLCJudW0wIiwibnVtMSIsIm51bTIiLCJudW0zIiwibnVtNCIsIm51bTUiLCJudW02IiwibnVtNyIsIm51bTgiLCJudW05IiwiZjEiLCJmMiIsImYzIiwiZjQiLCJmNSIsImY2IiwiZjciLCJmOCIsImY5IiwiZjEwIiwiZjExIiwiZjEyIiwibnVtbG9jayIsInNjcm9sbGxvY2siLCJzZW1pY29sb24iLCJlcXVhbCIsImNvbW1hIiwiZGFzaCIsInBlcmlvZCIsImZvcndhcmRzbGFzaCIsImdyYXZlIiwib3BlbmJyYWNrZXQiLCJiYWNrc2xhc2giLCJjbG9zZWJyYWNrZXQiLCJxdW90ZSIsImRwYWRMZWZ0IiwiZHBhZFJpZ2h0IiwiZHBhZFVwIiwiZHBhZERvd24iLCJkcGFkQ2VudGVyIiwiSW1hZ2VGb3JtYXQiLCJFbnVtIiwiSlBHIiwiUE5HIiwiVElGRiIsIldFQlAiLCJQVlIiLCJFVEMiLCJTM1RDIiwiQVRJVEMiLCJUR0EiLCJSQVdEQVRBIiwiVU5LTk9XTiIsIkJsZW5kRmFjdG9yIiwiVGV4dEFsaWdubWVudCIsIkxFRlQiLCJDRU5URVIiLCJSSUdIVCIsIlZlcnRpY2FsVGV4dEFsaWdubWVudCIsIlRPUCIsIkJP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ZmlsZSI6IkNDTWFjcm8uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAwOC0yMDEwIFJpY2FyZG8gUXVlc2FkYVxuIENvcHlyaWdodCAoYykgMjAxMS0yMDEyIGNvY29zMmQteC5vcmdcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwOi8vd3d3LmNvY29zMmQteC5vcmdcblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmNvbnN0IGpzID0gcmVxdWlyZSgnLi9qcycpO1xuXG4vKipcbiAqIFByZWRlZmluZWQgY29uc3RhbnRzXG4gKiBAY2xhc3MgbWFjcm9cbiAqIEBzdGF0aWNcbiAqL1xuY2MubWFjcm8gPSB7XG4gICAgLyoqXG4gICAgICogUEkgLyAxODBcbiAgICAgKiBAcHJvcGVydHkgUkFEXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBSQUQ6IE1hdGguUEkgLyAxODAsXG5cbiAgICAvKipcbiAgICAgKiBPbmUgZGVncmVlXG4gICAgICogQHByb3BlcnR5IERFR1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgREVHOiAxODAgLyBNYXRoLlBJLFxuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IFJFUEVBVF9GT1JFVkVSXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBSRVBFQVRfRk9SRVZFUjogKE51bWJlci5NQVhfVkFMVUUgLSAxKSxcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBGTFRfRVBTSUxPTlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgRkxUX0VQU0lMT046IDAuMDAwMDAwMTE5MjA5Mjg5NixcblxuICAgIC8qKlxuICAgICAqIE1pbmltdW0geiBpbmRleCB2YWx1ZSBmb3Igbm9kZVxuICAgICAqIEBwcm9wZXJ0eSBNSU5fWklOREVYXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBNSU5fWklOREVYOiAtTWF0aC5wb3coMiwgMTUpLFxuXG4gICAgLyoqXG4gICAgICogTWF4aW11bSB6IGluZGV4IHZhbHVlIGZvciBub2RlXG4gICAgICogQHByb3BlcnR5IE1BWF9aSU5ERVhcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIE1BWF9aSU5ERVg6IE1hdGgucG93KDIsIDE1KSAtIDEsXG5cbiAgICAvL3NvbWUgZ2wgY29uc3RhbnQgdmFyaWFibGVcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgT05FXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBPTkU6IDEsXG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgWkVST1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgWkVSTzogMCxcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBTUkNfQUxQSEFcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIFNSQ19BTFBIQTogMHgwMzAyLFxuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IFNSQ19BTFBIQV9TQVRVUkFURVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgU1JDX0FMUEhBX1NBVFVSQVRFOiAweDMwOCxcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBTUkNfQ09MT1JcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIFNSQ19DT0xPUjogMHgzMDAsXG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgRFNUX0FMUEhBXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBEU1RfQUxQSEE6IDB4MzA0LFxuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IERTVF9DT0xPUlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgRFNUX0NPTE9SOiAweDMwNixcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBPTkVfTUlOVVNfU1JDX0FMUEhBXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBPTkVfTUlOVVNfU1JDX0FMUEhBOiAweDAzMDMsXG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgT05FX01JTlVTX1NSQ19DT0xPUlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgT05FX01JTlVTX1NSQ19DT0xPUjogMHgzMDEsXG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgT05FX01JTlVTX0RTVF9BTFBIQVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgT05FX01JTlVTX0RTVF9BTFBIQTogMHgzMDUsXG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgT05FX01JTlVTX0RTVF9DT0xPUlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgT05FX01JTlVTX0RTVF9DT0xPUjogMHgwMzA3LFxuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IE9ORV9NSU5VU19DT05TVEFOVF9BTFBIQVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgT05FX01JTlVTX0NPTlNUQU5UX0FMUEhBOiAweDgwMDQsXG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgT05FX01JTlVTX0NPTlNUQU5UX0NPTE9SXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBPTkVfTUlOVVNfQ09OU1RBTlRfQ09MT1I6IDB4ODAwMixcblxuICAgIC8vUG9zc2libGUgZGV2aWNlIG9yaWVudGF0aW9uc1xuICAgIC8qKlxuICAgICAqIE9yaWVudGVkIHZlcnRpY2FsbHlcbiAgICAgKiBAcHJvcGVydHkgT1JJRU5UQVRJT05fUE9SVFJBSVRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIE9SSUVOVEFUSU9OX1BPUlRSQUlUOiAxLFxuXG4gICAgLyoqXG4gICAgICogT3JpZW50ZWQgaG9yaXpvbnRhbGx5XG4gICAgICogQHByb3BlcnR5IE9SSUVOVEFUSU9OX0xBTkRTQ0FQRVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgT1JJRU5UQVRJT05fTEFORFNDQVBFOiAyLFxuXG4gICAgLyoqXG4gICAgICogT3JpZW50ZWQgYXV0b21hdGljYWxseVxuICAgICAqIEBwcm9wZXJ0eSBPUklFTlRBVElPTl9BVVRPXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBPUklFTlRBVElPTl9BVVRPOiAzLFxuXG4gICAgREVOU0lUWURQSV9ERVZJQ0U6ICdkZXZpY2UtZHBpJyxcbiAgICBERU5TSVRZRFBJX0hJR0g6ICdoaWdoLWRwaScsXG4gICAgREVOU0lUWURQSV9NRURJVU06ICdtZWRpdW0tZHBpJyxcbiAgICBERU5TSVRZRFBJX0xPVzogJ2xvdy1kcGknLFxuXG4gICAgLy8gR2VuZXJhbCBjb25maWd1cmF0aW9uc1xuXG4gICAgLyoqXG4gICAgICogPHA+XG4gICAgICogICBJZiBlbmFibGVkLCB0aGUgdGV4dHVyZSBjb29yZGluYXRlcyB3aWxsIGJlIGNhbGN1bGF0ZWQgYnkgdXNpbmcgdGhpcyBmb3JtdWxhOiA8YnIvPlxuICAgICAqICAgICAgLSB0ZXhDb29yZC5sZWZ0ID0gKHJlY3QueCoyKzEpIC8gKHRleHR1cmUud2lkZSoyKTsgICAgICAgICAgICAgICAgICA8YnIvPlxuICAgICAqICAgICAgLSB0ZXhDb29yZC5yaWdodCA9IHRleENvb3JkLmxlZnQgKyAocmVjdC53aWR0aCoyLTIpLyh0ZXh0dXJlLndpZGUqMik7IDxici8+XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICAgICAqICBUaGUgc2FtZSBmb3IgYm90dG9tIGFuZCB0b3AuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gICAgICogIFRoaXMgZm9ybXVsYSBwcmV2ZW50cyBhcnRpZmFjdHMgYnkgdXNpbmcgOTklIG9mIHRoZSB0ZXh0dXJlLiAgICAgICAgICAgICAgICAgICA8YnIvPlxuICAgICAqICBUaGUgXCJjb3JyZWN0XCIgd2F5IHRvIHByZXZlbnQgYXJ0aWZhY3RzIGlzIGJ5IGV4cGFuZCB0aGUgdGV4dHVyZSdzIGJvcmRlciB3aXRoIHRoZSBzYW1lIGNvbG9yIGJ5IDEgcGl4ZWw8YnIvPlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gICAgICogIEFmZmVjdGVkIGNvbXBvbmVudDogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gICAgICogICAgICAtIGNjLlRNWExheWVyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICAgKiAgRW5hYmxlZCBieSBkZWZhdWx0LiBUbyBkaXNhYmxlZCBzZXQgaXQgdG8gMC4gPGJyLz5cbiAgICAgKiAgVG8gbW9kaWZ5IGl0LCBpbiBXZWIgZW5naW5lIHBsZWFzZSByZWZlciB0byBDQ01hY3JvLmpzLCBpbiBKU0IgcGxlYXNlIHJlZmVyIHRvIENDQ29uZmlnLmhcbiAgICAgKiA8L3A+XG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gRklYX0FSVElGQUNUU19CWV9TVFJFQ0hJTkdfVEVYRUxfVE1YXG4gICAgICovXG4gICAgRklYX0FSVElGQUNUU19CWV9TVFJFQ0hJTkdfVEVYRUxfVE1YOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogUG9zaXRpb24gb2YgdGhlIEZQUyAoRGVmYXVsdDogMCwwIChib3R0b20tbGVmdCBjb3JuZXIpKTxici8+XG4gICAgICogVG8gbW9kaWZ5IGl0LCBpbiBXZWIgZW5naW5lIHBsZWFzZSByZWZlciB0byBDQ01hY3JvLmpzLCBpbiBKU0IgcGxlYXNlIHJlZmVyIHRvIENDQ29uZmlnLmhcbiAgICAgKiBAcHJvcGVydHkge1ZlYzJ9IERJUkVDVE9SX1NUQVRTX1BPU0lUSU9OXG4gICAgICovXG4gICAgRElSRUNUT1JfU1RBVFNfUE9TSVRJT046IGNjLnYyKDAsIDApLFxuXG4gICAgLyoqXG4gICAgICogPHA+XG4gICAgICogICAgSWYgZW5hYmxlZCwgYWN0aW9ucyB0aGF0IGFsdGVyIHRoZSBwb3NpdGlvbiBwcm9wZXJ0eSAoZWc6IENDTW92ZUJ5LCBDQ0p1bXBCeSwgQ0NCZXppZXJCeSwgZXRjLi4pIHdpbGwgYmUgc3RhY2tlZC4gICAgICAgICAgICAgICAgICA8YnIvPlxuICAgICAqICAgIElmIHlvdSBydW4gMiBvciBtb3JlICdwb3NpdGlvbicgYWN0aW9ucyBhdCB0aGUgc2FtZSB0aW1lIG9uIGEgbm9kZSwgdGhlbiBlbmQgcG9zaXRpb24gd2lsbCBiZSB0aGUgc3VtIG9mIGFsbCB0aGUgcG9zaXRpb25zLiAgICAgICAgPGJyLz5cbiAgICAgKiAgICBJZiBkaXNhYmxlZCwgb25seSB0aGUgbGFzdCBydW4gYWN0aW9uIHdpbGwgdGFrZSBlZmZlY3QuXG4gICAgICogPC9wPlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBFTkFCTEVfU1RBQ0tBQkxFX0FDVElPTlNcbiAgICAgKi9cbiAgICBFTkFCTEVfU1RBQ0tBQkxFX0FDVElPTlM6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFxuICAgICAqIFRoZSB0aW1lb3V0IHRvIGRldGVybWluZSB3aGV0aGVyIGEgdG91Y2ggaXMgbm8gbG9uZ2VyIGFjdGl2ZSBhbmQgc2hvdWxkIGJlIHJlbW92ZWQuXG4gICAgICogVGhlIHJlYXNvbiB0byBhZGQgdGhpcyB0aW1lb3V0IGlzIGR1ZSB0byBhbiBpc3N1ZSBpbiBYNSBicm93c2VyIGNvcmUsIFxuICAgICAqIHdoZW4gWDUgaXMgcHJlc2VudGVkIGluIHdlY2hhdCBvbiBBbmRyb2lkLCBpZiBhIHRvdWNoIGlzIGdsaXNzZWQgZnJvbSB0aGUgYm90dG9tIHVwLCBhbmQgbGVhdmUgdGhlIHBhZ2UgYXJlYSxcbiAgICAgKiBubyB0b3VjaCBjYW5jZWwgZXZlbnQgaXMgdHJpZ2dlcmVkLCBhbmQgdGhlIHRvdWNoIHdpbGwgYmUgY29uc2lkZXJlZCBhY3RpdmUgZm9yZXZlci4gXG4gICAgICogQWZ0ZXIgbXVsdGlwbGUgdGltZXMgb2YgdGhpcyBhY3Rpb24sIG91ciBtYXhpbXVtIHRvdWNoZXMgbnVtYmVyIHdpbGwgYmUgcmVhY2hlZCBhbmQgYWxsIG5ldyB0b3VjaGVzIHdpbGwgYmUgaWdub3JlZC5cbiAgICAgKiBTbyB0aGlzIG5ldyBtZWNoYW5pc20gY2FuIHJlbW92ZSB0aGUgdG91Y2ggdGhhdCBzaG91bGQgYmUgaW5hY3RpdmUgaWYgaXQncyBub3QgdXBkYXRlZCBkdXJpbmcgdGhlIGxhc3QgNTAwMCBtaWxsaXNlY29uZHMuXG4gICAgICogVGhvdWdoIGl0IG1pZ2h0IHJlbW92ZSBhIHJlYWwgdG91Y2ggaWYgaXQncyBqdXN0IG5vdCBtb3ZpbmcgZm9yIHRoZSBsYXN0IDUgc2Vjb25kcyB3aGljaCBpcyBub3QgZWFzeSB3aXRoIHRoZSBzZW5zaWJpbGl0eSBvZiBtb2JpbGUgdG91Y2ggc2NyZWVuLlxuICAgICAqIFlvdSBjYW4gbW9kaWZ5IHRoaXMgdmFsdWUgdG8gaGF2ZSBhIGJldHRlciBiZWhhdmlvciBpZiB5b3UgZmluZCBpdCdzIG5vdCBlbm91Z2guXG4gICAgICogISN6aFxuICAgICAqIOeUqOS6jueUhOWIq+S4gOS4quinpueCueWvueixoeaYr+WQpuW3sue7j+WkseaViOW5tuS4lOWPr+S7peiiq+enu+mZpOeahOW7tuaXtuaXtumVv1xuICAgICAqIOa3u+WKoOi/meS4quaXtumVv+eahOWOn+WboOaYryBYNSDlhoXmoLjlnKjlvq7kv6HmtY/op4jlmajkuK3lh7rnjrDnmoTkuIDkuKogYnVn44CCXG4gICAgICog5Zyo6L+Z5Liq546v5aKD5LiL77yM5aaC5p6c55So5oi35bCG5LiA5Liq6Kem54K55LuO5bqV5ZCR5LiK56e75Ye66aG16Z2i5Yy65Z+f77yM5bCG5LiN5Lya6Kem5Y+R5Lu75L2VIHRvdWNoIGNhbmNlbCDmiJYgdG91Y2ggZW5kIOS6i+S7tu+8jOiAjOi/meS4quinpueCueS8muiiq+awuOi/nOW9k+S9nOWBnOeVmeWcqOmhtemdouS4iueahOacieaViOinpueCueOAglxuICAgICAqIOmHjeWkjei/meagt+aTjeS9nOWHoOasoeS5i+WQju+8jOWxj+W5leS4iueahOinpueCueaVsOmHj+Wwhui+vuWIsOaIkeS7rOeahOS6i+S7tuezu+e7n+aJgOaUr+aMgeeahOacgOmrmOinpueCueaVsOmHj++8jOS5i+WQjuaJgOacieeahOinpuaRuOS6i+S7tumDveWwhuiiq+W/veeVpeOAglxuICAgICAqIOaJgOS7pei/meS4quaWsOeahOacuuWItuWPr+S7peWcqOinpueCueWcqOS4gOWumuaXtumXtOWGheayoeacieS7u+S9leabtOaWsOeahOaDheWGteS4i+inhuS4uuWkseaViOinpueCueW5tuS7juS6i+S7tuezu+e7n+S4reenu+mZpOOAglxuICAgICAqIOW9k+eEtu+8jOi/meS5n+WPr+iDveenu+mZpOS4gOS4quecn+WunueahOinpueCue+8jOWmguaenOeUqOaIt+eahOinpueCueecn+eahOWcqOS4gOWumuaXtumXtOauteWGheWujOWFqOayoeacieenu+WKqO+8iOi/meWcqOW9k+WJjeaJi+acuuWxj+W5leeahOeBteaVj+W6puS4i+S8muW+iOmavu+8ieOAglxuICAgICAqIOS9oOWPr+S7peS/ruaUuei/meS4quWAvOadpeiOt+W+l+S9oOmcgOimgeeahOaViOaenO+8jOm7mOiupOWAvOaYryA1MDAwIOavq+enkuOAglxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBUT1VDSF9USU1FT1VUXG4gICAgICovXG4gICAgVE9VQ0hfVElNRU9VVDogNTAwMCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gXG4gICAgICogVGhlIG1heGltdW0gdmVydGV4IGNvdW50IGZvciBhIHNpbmdsZSBiYXRjaGVkIGRyYXcgY2FsbC5cbiAgICAgKiAhI3poXG4gICAgICog5pyA5aSn5Y+v5Lul6KKr5Y2V5qyh5om55aSE55CG5riy5p+T55qE6aG254K55pWw6YeP44CCXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IEJBVENIX1ZFUlRFWF9DT1VOVFxuICAgICAqL1xuICAgIEJBVENIX1ZFUlRFWF9DT1VOVDogMjAwMDAsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFxuICAgICAqIFdoZXRoZXIgb3Igbm90IGVuYWJsZWQgdGlsZWQgbWFwIGF1dG8gY3VsbGluZy4gSWYgeW91IHNldCB0aGUgVGlsZWRNYXAgc2tldyBvciByb3RhdGlvbiwgdGhlbiBuZWVkIHRvIG1hbnVhbGx5IGRpc2FibGUgdGhpcywgb3RoZXJ3aXNlLCB0aGUgcmVuZGVyaW5nIHdpbGwgYmUgd3JvbmcuXG4gICAgICogISN6aFxuICAgICAqIOaYr+WQpuW8gOWQr+eTpueJh+WcsOWbvueahOiHquWKqOijgeWHj+WKn+iDveOAgueTpueJh+WcsOWbvuWmguaenOiuvue9ruS6hiBza2V3LCByb3RhdGlvbiDnmoTor53vvIzpnIDopoHmiYvliqjlhbPpl63vvIzlkKbliJnmuLLmn5PkvJrlh7rplJnjgIJcbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IEVOQUJMRV9USUxFRE1BUF9DVUxMSU5HXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIEVOQUJMRV9USUxFRE1BUF9DVUxMSU5HOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBcbiAgICAgKiBUaGUgbWF4IGNvbmN1cnJlbnQgdGFzayBudW1iZXIgZm9yIHRoZSBkb3dubG9hZGVyXG4gICAgICogISN6aFxuICAgICAqIOS4i+i9veS7u+WKoeeahOacgOWkp+W5tuWPkeaVsOmZkOWItu+8jOWcqOWuieWNk+W5s+WPsOmDqOWIhuacuuWei+aIlueJiOacrOS4iuWPr+iDvemcgOimgemZkOWItuWcqOi+g+S9jueahOawtOW5s1xuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBET1dOTE9BRF9NQVhfQ09OQ1VSUkVOVFxuICAgICAqIEBkZWZhdWx0IDY0XG4gICAgICovXG4gICAgRE9XTkxPQURfTUFYX0NPTkNVUlJFTlQ6IDY0LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBcbiAgICAgKiBCb29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBjYW52YXMgY29udGFpbnMgYW4gYWxwaGEgY2hhbm5lbCwgZGVmYXVsdCBzZXRzIHRvIGZhbHNlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXG4gICAgICogVGhvdWdoIGlmIHlvdSB3YW50IHRvIG1ha2UgeW91ciBjYW52YXMgYmFja2dyb3VuZCB0cmFuc3BhcmVudCBhbmQgc2hvdyBvdGhlciBkb20gZWxlbWVudHMgYXQgdGhlIGJhY2tncm91bmQsIFxuICAgICAqIHlvdSBjYW4gc2V0IGl0IHRvIHRydWUgYmVmb3JlIGBjYy5nYW1lLnJ1bmAuXG4gICAgICogV2ViIG9ubHkuXG4gICAgICogISN6aFxuICAgICAqIOeUqOS6juiuvue9riBDYW52YXMg6IOM5pmv5piv5ZCm5pSv5oyBIGFscGhhIOmAmumBk++8jOm7mOiupOS4uiBmYWxzZe+8jOi/meagt+WPr+S7peacieabtOmrmOeahOaAp+iDveihqOeOsOOAglxuICAgICAqIOWmguaenOS9oOW4jOacmyBDYW52YXMg6IOM5pmv5piv6YCP5piO55qE77yM5bm25pi+56S66IOM5ZCO55qE5YW25LuWIERPTSDlhYPntKDvvIzkvaDlj6/ku6XlnKggYGNjLmdhbWUucnVuYCDkuYvliY3lsIbov5nkuKrlgLzorr7kuLogdHJ1ZeOAglxuICAgICAqIOS7heaUr+aMgSBXZWJcbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IEVOQUJMRV9UUkFOU1BBUkVOVF9DQU5WQVNcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIEVOQUJMRV9UUkFOU1BBUkVOVF9DQU5WQVM6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIEJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIFdlYkdMIGNvbnRleHQgaXMgY3JlYXRlZCB3aXRoIGBhbnRpYWxpYXNgIG9wdGlvbiB0dXJuZWQgb24sIGRlZmF1bHQgdmFsdWUgaXMgZmFsc2UuXG4gICAgICogU2V0IGl0IHRvIHRydWUgY291bGQgbWFrZSB5b3VyIGdhbWUgZ3JhcGhpY3Mgc2xpZ2h0bHkgc21vb3RoZXIsIGxpa2UgdGV4dHVyZSBoYXJkIGVkZ2VzIHdoZW4gcm90YXRlZC5cbiAgICAgKiBXaGV0aGVyIHRvIHVzZSB0aGlzIHJlYWxseSBkZXBlbmQgb24geW91ciBnYW1lIGRlc2lnbiBhbmQgdGFyZ2V0ZWQgcGxhdGZvcm0sIFxuICAgICAqIGRldmljZSB3aXRoIHJldGluYSBkaXNwbGF5IHVzdWFsbHkgaGF2ZSBnb29kIGRldGFpbCBvbiBncmFwaGljcyB3aXRoIG9yIHdpdGhvdXQgdGhpcyBvcHRpb24sIFxuICAgICAqIHlvdSBwcm9iYWJseSBkb24ndCB3YW50IGFudGlhbGlhcyBpZiB5b3VyIGdhbWUgc3R5bGUgaXMgcGl4ZWwgYXJ0IGJhc2VkLlxuICAgICAqIEFsc28sIGl0IGNvdWxkIGhhdmUgZ3JlYXQgcGVyZm9ybWFuY2UgaW1wYWN0IHdpdGggc29tZSBicm93c2VyIC8gZGV2aWNlIHVzaW5nIHNvZnR3YXJlIE1TQUEuXG4gICAgICogWW91IGNhbiBzZXQgaXQgdG8gdHJ1ZSBiZWZvcmUgYGNjLmdhbWUucnVuYC5cbiAgICAgKiBXZWIgb25seS5cbiAgICAgKiAhI3poXG4gICAgICog55So5LqO6K6+572u5Zyo5Yib5bu6IFdlYkdMIENvbnRleHQg5pe25piv5ZCm5byA5ZCv5oqX6ZSv6b2/6YCJ6aG577yM6buY6K6k5YC85pivIGZhbHNl44CCXG4gICAgICog5bCG6L+Z5Liq6YCJ6aG56K6+572u5Li6IHRydWUg5Lya6K6p5L2g55qE5ri45oiP55S76Z2i56iN56iN5bmz5ruR5LiA5Lqb77yM5q+U5aaC5peL6L2s56Gs6L656LS05Zu+5pe255qE6ZSv6b2/44CC5piv5ZCm5byA5ZCv6L+Z5Liq6YCJ6aG55b6I5aSn56iL5bqm5LiK5Y+W5Yaz5LqO5L2g55qE5ri45oiP5ZKM6Z2i5ZCR55qE5bmz5Y+w44CCXG4gICAgICog5Zyo5aSn5aSa5pWw5oul5pyJIHJldGluYSDnuqfliKvlsY/luZXnmoTorr7lpIfkuIrnlKjmiLflvoDlvoDml6Dms5XljLrliIbov5nkuKrpgInpobnluKbmnaXnmoTlj5jljJbvvJvlpoLmnpzkvaDnmoTmuLjmiI/pgInmi6nlg4/ntKDoibrmnK/po47moLzvvIzkvaDkuZ/lpJrljYrkuI3kvJrmg7PlvIDlkK/ov5nkuKrpgInpobnjgIJcbiAgICAgKiDlkIzml7bvvIzlnKjlsJHpg6jliIbkvb/nlKjova/ku7bnuqfliKvmipfplK/pvb/nrpfms5XnmoTorr7lpIfmiJbmtY/op4jlmajkuIrvvIzov5nkuKrpgInpobnkvJrlr7nmgKfog73kuqfnlJ/mr5TovoPlpKfnmoTlvbHlk43jgIJcbiAgICAgKiDkvaDlj6/ku6XlnKggYGNjLmdhbWUucnVuYCDkuYvliY3orr7nva7ov5nkuKrlgLzvvIzlkKbliJnlroPkuI3kvJrnlJ/mlYjjgIJcbiAgICAgKiDku4XmlK/mjIEgV2ViXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBFTkFCTEVfV0VCR0xfQU5USUFMSUFTXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBFTkFCTEVfV0VCR0xfQU5USUFMSUFTOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBXaGV0aGVyIG9yIG5vdCBlbmFibGUgYXV0byBjdWxsaW5nLlxuICAgICAqIFRoaXMgZmVhdHVyZSBoYXZlIGJlZW4gcmVtb3ZlZCBpbiB2Mi4wIG5ldyByZW5kZXJlciBkdWUgdG8gb3ZlcmFsbCBwZXJmb3JtYW5jZSBjb25zdW1wdGlvbi5cbiAgICAgKiBXZSBoYXZlIG5vIHBsYW4gY3VycmVudGx5IHRvIHJlLWVuYWJsZSBhdXRvIGN1bGxpbmcuXG4gICAgICogSWYgeW91ciBnYW1lIGhhdmUgbW9yZSBkeW5hbWljIG9iamVjdHMsIHdlIHN1Z2dlc3QgdG8gZGlzYWJsZSBhdXRvIGN1bGxpbmcuXG4gICAgICogSWYgeW91ciBnYW1lIGhhdmUgbW9yZSBzdGF0aWMgb2JqZWN0cywgd2Ugc3VnZ2VzdCB0byBlbmFibGUgYXV0byBjdWxsaW5nLlxuICAgICAqICEjemhcbiAgICAgKiDmmK/lkKblvIDlkK/oh6rliqjoo4Hlh4/lip/og73vvIzlvIDlkK/oo4Hlh4/lip/og73lsIbkvJrmiorlnKjlsY/luZXlpJbnmoTniankvZPku47muLLmn5PpmJ/liJfkuK3ljrvpmaTmjonjgIJcbiAgICAgKiDov5nkuKrlip/og73lnKggdjIuMCDnmoTmlrDmuLLmn5PlmajkuK3ooqvnp7vpmaTkuobvvIzlm6DkuLrlroPlnKjlpKflpJrmlbDmuLjmiI/kuK3miYDluKbmnaXnmoTmjZ/ogJfopoHpq5jkuo7mgKfog73nmoTmj5DljYfvvIznm67liY3miJHku6zmsqHmnInorqHliJLph43mlrDmlK/mjIHoh6rliqjoo4HliarjgIJcbiAgICAgKiDlpoLmnpzmuLjmiI/kuK3nmoTliqjmgIHniankvZPmr5TovoPlpJrnmoTor53vvIzlu7rorq7lsIbmraTpgInpobnlhbPpl63jgIJcbiAgICAgKiDlpoLmnpzmuLjmiI/kuK3nmoTpnZnmgIHniankvZPmr5TovoPlpJrnmoTor53vvIzlu7rorq7lsIbmraTpgInpobnmiZPlvIDjgIJcbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IEVOQUJMRV9DVUxMSU5HXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdjIuMFxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgRU5BQkxFX0NVTExJTkc6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFdoZXRoZXIgb3Igbm90IGNsZWFyIGRvbSBJbWFnZSBvYmplY3QgY2FjaGUgYWZ0ZXIgdXBsb2FkaW5nIHRvIGdsIHRleHR1cmUuXG4gICAgICogQ29uY3JldGVseSwgd2UgYXJlIHNldHRpbmcgaW1hZ2Uuc3JjIHRvIGVtcHR5IHN0cmluZyB0byByZWxlYXNlIHRoZSBjYWNoZS5cbiAgICAgKiBOb3JtYWxseSB5b3UgZG9uJ3QgbmVlZCB0byBlbmFibGUgdGhpcyBvcHRpb24sIGJlY2F1c2Ugb24gd2ViIHRoZSBJbWFnZSBvYmplY3QgZG9lc24ndCBjb25zdW1lIHRvbyBtdWNoIG1lbW9yeS5cbiAgICAgKiBCdXQgb24gV2VDaGF0IEdhbWUgcGxhdGZvcm0sIHRoZSBjdXJyZW50IHZlcnNpb24gY2FjaGUgZGVjb2RlZCBkYXRhIGluIEltYWdlIG9iamVjdCwgd2hpY2ggaGFzIGhpZ2ggbWVtb3J5IHVzYWdlLlxuICAgICAqIFNvIHdlIGVuYWJsZWQgdGhpcyBvcHRpb24gYnkgZGVmYXVsdCBvbiBXZUNoYXQsIHNvIHRoYXQgd2UgY2FuIHJlbGVhc2UgSW1hZ2UgY2FjaGUgaW1tZWRpYXRlbHkgYWZ0ZXIgdXBsb2FkZWQgdG8gR1BVLlxuICAgICAqICEjemhcbiAgICAgKiDmmK/lkKblnKjlsIbotLTlm77kuIrkvKDoh7MgR1BVIOS5i+WQjuWIoOmZpCBET00gSW1hZ2Ug57yT5a2Y44CCXG4gICAgICog5YW35L2T5p2l6K+077yM5oiR5Lus6YCa6L+H6K6+572uIGltYWdlLnNyYyDkuLrnqbrlrZfnrKbkuLLmnaXph4rmlL7ov5npg6jliIblhoXlrZjjgIJcbiAgICAgKiDmraPluLjmg4XlhrXkuIvvvIzkvaDkuI3pnIDopoHlvIDlkK/ov5nkuKrpgInpobnvvIzlm6DkuLrlnKggd2ViIOW5s+WPsO+8jEltYWdlIOWvueixoeaJgOWNoOeUqOeahOWGheWtmOW+iOWwj+OAglxuICAgICAqIOS9huaYr+WcqOW+ruS/oeWwj+a4uOaIj+W5s+WPsOeahOW9k+WJjeeJiOacrO+8jEltYWdlIOWvueixoeS8mue8k+WtmOino+eggeWQjueahOWbvueJh+aVsOaNru+8jOWug+aJgOWNoOeUqOeahOWGheWtmOepuumXtOW+iOWkp+OAglxuICAgICAqIOaJgOS7peaIkeS7rOWcqOW+ruS/oeW5s+WPsOm7mOiupOW8gOWQr+S6hui/meS4qumAiemhue+8jOi/meagt+aIkeS7rOWwseWPr+S7peWcqOS4iuS8oCBHTCDotLTlm77kuYvlkI7nq4vljbPph4rmlL4gSW1hZ2Ug5a+56LGh55qE5YaF5a2Y77yM6YG/5YWN6L+H6auY55qE5YaF5a2Y5Y2g55So44CCXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBDTEVBTlVQX0lNQUdFX0NBQ0hFXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBDTEVBTlVQX0lNQUdFX0NBQ0hFOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBXaGV0aGVyIG9yIG5vdCBzaG93IG1lc2ggd2lyZSBmcmFtZS5cbiAgICAgKiAhI3poXG4gICAgICog5piv5ZCm5pi+56S6572R5qC855qE57q/5qGG44CCXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBTSE9XX01FU0hfV0lSRUZSQU1FXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBTSE9XX01FU0hfV0lSRUZSQU1FOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXQgY2MuUm90YXRlVG8vY2MuUm90YXRlQnkgcm90YXRlIGRpcmVjdGlvbi5cbiAgICAgKiBJZiBuZWVkIHNldCByb3RhdGUgcG9zaXRpdmUgZGlyZWN0aW9uIHRvIGNvdW50ZXJjbG9ja3dpc2UsIHBsZWFzZSBjaGFuZ2Ugc2V0dGluZyB0byA6IGNjLm1hY3JvLlJPVEFURV9BQ1RJT05fQ0NXID0gdHJ1ZTtcbiAgICAgKiAhI3poXG4gICAgICog6K6+572uIGNjLlJvdGF0ZVRvL2NjLlJvdGF0ZUJ5IOeahOaXi+i9rOaWueWQkeOAglxuICAgICAqIOWmguaenOmcgOimgeiuvue9ruaXi+i9rOeahOato+aWueWQkeS4uumAhuaXtumSiOaWueWQke+8jOivt+iuvue9rumAiemhueS4uu+8miBjYy5tYWNyby5ST1RBVEVfQUNUSU9OX0NDVyA9IHRydWU7XG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBST1RBVEVfQUNUSU9OX0NDV1xuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgUk9UQVRFX0FDVElPTl9DQ1c6IGZhbHNlXG59O1xuXG5cbmxldCBTVVBQT1JUX1RFWFRVUkVfRk9STUFUUyA9IFsnLmFzdGMnLCAnLnBrbScsICcucHZyJywgJy53ZWJwJywgJy5qcGcnLCAnLmpwZWcnLCAnLmJtcCcsICcucG5nJ107XG5cbi8qKlxuICogIWVuXG4gKiBUaGUgaW1hZ2UgZm9ybWF0IHN1cHBvcnRlZCBieSB0aGUgZW5naW5lIGRlZmF1bHRzLCBhbmQgdGhlIHN1cHBvcnRlZCBmb3JtYXRzIG1heSBkaWZmZXIgaW4gZGlmZmVyZW50IGJ1aWxkIHBsYXRmb3JtcyBhbmQgZGV2aWNlIHR5cGVzLlxuICogQ3VycmVudGx5IGFsbCBwbGF0Zm9ybSBhbmQgZGV2aWNlIHN1cHBvcnQgWycud2VicCcsICcuanBnJywgJy5qcGVnJywgJy5ibXAnLCAnLnBuZyddLCBUaGUgaU9TIG1vYmlsZSBwbGF0Zm9ybSBhbHNvIHN1cHBvcnRzIHRoZSBQVlIgZm9ybWF044CCXG4gKiAhemhcbiAqIOW8leaTjum7mOiupOaUr+aMgeeahOWbvueJh+agvOW8j++8jOaUr+aMgeeahOagvOW8j+WPr+iDveWcqOS4jeWQjOeahOaehOW7uuW5s+WPsOWSjOiuvuWkh+exu+Wei+S4iuacieaJgOW3ruWIq+OAglxuICog55uu5YmN5omA5pyJ5bmz5Y+w5ZKM6K6+5aSH5pSv5oyB55qE5qC85byP5pyJIFsnLndlYnAnLCAnLmpwZycsICcuanBlZycsICcuYm1wJywgJy5wbmcnXS4g5Y+m5aSWIElvcyDmiYvmnLrlubPlj7Dov5jpop3lpJbmlK/mjIHkuoYgUFZSIOagvOW8j+OAglxuICogQHByb3BlcnR5IHtbU3RyaW5nXX0gU1VQUE9SVF9URVhUVVJFX0ZPUk1BVFNcbiAqL1xuY2MubWFjcm8uU1VQUE9SVF9URVhUVVJFX0ZPUk1BVFMgPSBTVVBQT1JUX1RFWFRVUkVfRk9STUFUUztcblxuXG4vKipcbiAqICEjZW4gS2V5IG1hcCBmb3Iga2V5Ym9hcmQgZXZlbnRcbiAqICEjemgg6ZSu55uY5LqL5Lu255qE5oyJ6ZSu5YC8XG4gKiBAZW51bSBtYWNyby5LRVlcbiAqIEBleGFtcGxlIHtAbGluayBjb2NvczJkL2NvcmUvcGxhdGZvcm0vQ0NDb21tb24vS0VZLmpzfVxuICovXG5jYy5tYWNyby5LRVkgPSB7XG4gICAgLyoqXG4gICAgICogISNlbiBOb25lXG4gICAgICogISN6aCDmsqHmnInliIbphY1cbiAgICAgKiBAcHJvcGVydHkgbm9uZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgbm9uZTowLFxuXG4gICAgLy8gYW5kcm9pZFxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIGJhY2sga2V5XG4gICAgICogISN6aCDov5Tlm57plK5cbiAgICAgKiBAcHJvcGVydHkgYmFja1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgYmFjazo2LFxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIG1lbnUga2V5XG4gICAgICogISN6aCDoj5zljZXplK5cbiAgICAgKiBAcHJvcGVydHkgbWVudVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgbWVudToxOCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIGJhY2tzcGFjZSBrZXlcbiAgICAgKiAhI3poIOmAgOagvOmUrlxuICAgICAqIEBwcm9wZXJ0eSBiYWNrc3BhY2VcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGJhY2tzcGFjZTo4LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgdGFiIGtleVxuICAgICAqICEjemggVGFiIOmUrlxuICAgICAqIEBwcm9wZXJ0eSB0YWJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHRhYjo5LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgZW50ZXIga2V5XG4gICAgICogISN6aCDlm57ovabplK5cbiAgICAgKiBAcHJvcGVydHkgZW50ZXJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGVudGVyOjEzLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgc2hpZnQga2V5XG4gICAgICogISN6aCBTaGlmdCDplK5cbiAgICAgKiBAcHJvcGVydHkgc2hpZnRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHNoaWZ0OjE2LCAvL3Nob3VsZCB1c2Ugc2hpZnRrZXkgaW5zdGVhZFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgY3RybCBrZXlcbiAgICAgKiAhI3poIEN0cmwg6ZSuXG4gICAgICogQHByb3BlcnR5IGN0cmxcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGN0cmw6MTcsIC8vc2hvdWxkIHVzZSBjdHJsa2V5XG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBhbHQga2V5XG4gICAgICogISN6aCBBbHQg6ZSuXG4gICAgICogQHByb3BlcnR5IGFsdFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgYWx0OjE4LCAvL3Nob3VsZCB1c2UgYWx0a2V5XG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBwYXVzZSBrZXlcbiAgICAgKiAhI3poIOaaguWBnOmUrlxuICAgICAqIEBwcm9wZXJ0eSBwYXVzZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcGF1c2U6MTksXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBjYXBzIGxvY2sga2V5XG4gICAgICogISN6aCDlpKflhpnplIHlrprplK5cbiAgICAgKiBAcHJvcGVydHkgY2Fwc2xvY2tcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGNhcHNsb2NrOjIwLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgZXNjIGtleVxuICAgICAqICEjemggRVNDIOmUrlxuICAgICAqIEBwcm9wZXJ0eSBlc2NhcGVcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGVzY2FwZToyNyxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIHNwYWNlIGtleVxuICAgICAqICEjemgg56m65qC86ZSuXG4gICAgICogQHByb3BlcnR5IHNwYWNlXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBzcGFjZTozMixcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIHBhZ2UgdXAga2V5XG4gICAgICogISN6aCDlkJHkuIrnv7vpobXplK5cbiAgICAgKiBAcHJvcGVydHkgcGFnZXVwXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBwYWdldXA6MzMsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBwYWdlIGRvd24ga2V5XG4gICAgICogISN6aCDlkJHkuIvnv7vpobXplK5cbiAgICAgKiBAcHJvcGVydHkgcGFnZWRvd25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHBhZ2Vkb3duOjM0LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgZW5kIGtleVxuICAgICAqICEjemgg57uT5p2f6ZSuXG4gICAgICogQHByb3BlcnR5IGVuZFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZW5kOjM1LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgaG9tZSBrZXlcbiAgICAgKiAhI3poIOS4u+iPnOWNlemUrlxuICAgICAqIEBwcm9wZXJ0eSBob21lXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBob21lOjM2LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgbGVmdCBrZXlcbiAgICAgKiAhI3poIOWQkeW3pueureWktOmUrlxuICAgICAqIEBwcm9wZXJ0eSBsZWZ0XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBsZWZ0OjM3LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgdXAga2V5XG4gICAgICogISN6aCDlkJHkuIrnrq3lpLTplK5cbiAgICAgKiBAcHJvcGVydHkgdXBcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHVwOjM4LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgcmlnaHQga2V5XG4gICAgICogISN6aCDlkJHlj7Pnrq3lpLTplK5cbiAgICAgKiBAcHJvcGVydHkgcmlnaHRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHJpZ2h0OjM5LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgZG93biBrZXlcbiAgICAgKiAhI3poIOWQkeS4i+eureWktOmUrlxuICAgICAqIEBwcm9wZXJ0eSBkb3duXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBkb3duOjQwLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgc2VsZWN0IGtleVxuICAgICAqICEjemggU2VsZWN0IOmUrlxuICAgICAqIEBwcm9wZXJ0eSBzZWxlY3RcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHNlbGVjdDo0MSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIGluc2VydCBrZXlcbiAgICAgKiAhI3poIOaPkuWFpemUrlxuICAgICAqIEBwcm9wZXJ0eSBpbnNlcnRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGluc2VydDo0NSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIERlbGV0ZSBrZXlcbiAgICAgKiAhI3poIOWIoOmZpOmUrlxuICAgICAqIEBwcm9wZXJ0eSBEZWxldGVcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIERlbGV0ZTo0NixcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlICcwJyBrZXkgb24gdGhlIHRvcCBvZiB0aGUgYWxwaGFudW1lcmljIGtleWJvYXJkLlxuICAgICAqICEjemgg5a2X5q+N6ZSu55uY5LiK55qEIDAg6ZSuXG4gICAgICogQHByb3BlcnR5IDBcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIDA6NDgsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSAnMScga2V5IG9uIHRoZSB0b3Agb2YgdGhlIGFscGhhbnVtZXJpYyBrZXlib2FyZC5cbiAgICAgKiAhI3poIOWtl+avjemUruebmOS4iueahCAxIOmUrlxuICAgICAqIEBwcm9wZXJ0eSAxXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICAxOjQ5LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgJzInIGtleSBvbiB0aGUgdG9wIG9mIHRoZSBhbHBoYW51bWVyaWMga2V5Ym9hcmQuXG4gICAgICogISN6aCDlrZfmr43plK7nm5jkuIrnmoQgMiDplK5cbiAgICAgKiBAcHJvcGVydHkgMlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgMjo1MCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlICczJyBrZXkgb24gdGhlIHRvcCBvZiB0aGUgYWxwaGFudW1lcmljIGtleWJvYXJkLlxuICAgICAqICEjemgg5a2X5q+N6ZSu55uY5LiK55qEIDMg6ZSuXG4gICAgICogQHByb3BlcnR5IDNcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIDM6NTEsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSAnNCcga2V5IG9uIHRoZSB0b3Agb2YgdGhlIGFscGhhbnVtZXJpYyBrZXlib2FyZC5cbiAgICAgKiAhI3poIOWtl+avjemUruebmOS4iueahCA0IOmUrlxuICAgICAqIEBwcm9wZXJ0eSA0XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICA0OjUyLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgJzUnIGtleSBvbiB0aGUgdG9wIG9mIHRoZSBhbHBoYW51bWVyaWMga2V5Ym9hcmQuXG4gICAgICogISN6aCDlrZfmr43plK7nm5jkuIrnmoQgNSDplK5cbiAgICAgKiBAcHJvcGVydHkgNVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgNTo1MyxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlICc2JyBrZXkgb24gdGhlIHRvcCBvZiB0aGUgYWxwaGFudW1lcmljIGtleWJvYXJkLlxuICAgICAqICEjemgg5a2X5q+N6ZSu55uY5LiK55qEIDYg6ZSuXG4gICAgICogQHByb3BlcnR5IDZcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIDY6NTQsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSAnNycga2V5IG9uIHRoZSB0b3Agb2YgdGhlIGFscGhhbnVtZXJpYyBrZXlib2FyZC5cbiAgICAgKiAhI3poIOWtl+avjemUruebmOS4iueahCA3IOmUrlxuICAgICAqIEBwcm9wZXJ0eSA3XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICA3OjU1LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgJzgnIGtleSBvbiB0aGUgdG9wIG9mIHRoZSBhbHBoYW51bWVyaWMga2V5Ym9hcmQuXG4gICAgICogISN6aCDlrZfmr43plK7nm5jkuIrnmoQgOCDplK5cbiAgICAgKiBAcHJvcGVydHkgOFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgODo1NixcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlICc5JyBrZXkgb24gdGhlIHRvcCBvZiB0aGUgYWxwaGFudW1lcmljIGtleWJvYXJkLlxuICAgICAqICEjemgg5a2X5q+N6ZSu55uY5LiK55qEIDkg6ZSuXG4gICAgICogQHByb3BlcnR5IDlcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIDk6NTcsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBhIGtleVxuICAgICAqICEjemggQSDplK5cbiAgICAgKiBAcHJvcGVydHkgYVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgYTo2NSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIGIga2V5XG4gICAgICogISN6aCBCIOmUrlxuICAgICAqIEBwcm9wZXJ0eSBiXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBiOjY2LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgYyBrZXlcbiAgICAgKiAhI3poIEMg6ZSuXG4gICAgICogQHByb3BlcnR5IGNcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGM6NjcsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBkIGtleVxuICAgICAqICEjemggRCDplK5cbiAgICAgKiBAcHJvcGVydHkgZFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZDo2OCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIGUga2V5XG4gICAgICogISN6aCBFIOmUrlxuICAgICAqIEBwcm9wZXJ0eSBlXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBlOjY5LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgZiBrZXlcbiAgICAgKiAhI3poIEYg6ZSuXG4gICAgICogQHByb3BlcnR5IGZcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGY6NzAsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBnIGtleVxuICAgICAqICEjemggRyDplK5cbiAgICAgKiBAcHJvcGVydHkgZ1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZzo3MSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIGgga2V5XG4gICAgICogISN6aCBIIOmUrlxuICAgICAqIEBwcm9wZXJ0eSBoXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBoOjcyLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgaSBrZXlcbiAgICAgKiAhI3poIEkg6ZSuXG4gICAgICogQHByb3BlcnR5IGlcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGk6NzMsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBqIGtleVxuICAgICAqICEjemggSiDplK5cbiAgICAgKiBAcHJvcGVydHkgalxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgajo3NCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIGsga2V5XG4gICAgICogISN6aCBLIOmUrlxuICAgICAqIEBwcm9wZXJ0eSBrXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBrOjc1LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgbCBrZXlcbiAgICAgKiAhI3poIEwg6ZSuXG4gICAgICogQHByb3BlcnR5IGxcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGw6NzYsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBtIGtleVxuICAgICAqICEjemggTSDplK5cbiAgICAgKiBAcHJvcGVydHkgbVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgbTo3NyxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIG4ga2V5XG4gICAgICogISN6aCBOIOmUrlxuICAgICAqIEBwcm9wZXJ0eSBuXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBuOjc4LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgbyBrZXlcbiAgICAgKiAhI3poIE8g6ZSuXG4gICAgICogQHByb3BlcnR5IG9cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIG86NzksXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBwIGtleVxuICAgICAqICEjemggUCDplK5cbiAgICAgKiBAcHJvcGVydHkgcFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgcDo4MCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIHEga2V5XG4gICAgICogISN6aCBRIOmUrlxuICAgICAqIEBwcm9wZXJ0eSBxXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBxOjgxLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgciBrZXlcbiAgICAgKiAhI3poIFIg6ZSuXG4gICAgICogQHByb3BlcnR5IHJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHI6ODIsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBzIGtleVxuICAgICAqICEjemggUyDplK5cbiAgICAgKiBAcHJvcGVydHkgc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgczo4MyxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIHQga2V5XG4gICAgICogISN6aCBUIOmUrlxuICAgICAqIEBwcm9wZXJ0eSB0XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICB0Ojg0LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgdSBrZXlcbiAgICAgKiAhI3poIFUg6ZSuXG4gICAgICogQHByb3BlcnR5IHVcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHU6ODUsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSB2IGtleVxuICAgICAqICEjemggViDplK5cbiAgICAgKiBAcHJvcGVydHkgdlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgdjo4NixcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIHcga2V5XG4gICAgICogISN6aCBXIOmUrlxuICAgICAqIEBwcm9wZXJ0eSB3XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICB3Ojg3LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgeCBrZXlcbiAgICAgKiAhI3poIFgg6ZSuXG4gICAgICogQHByb3BlcnR5IHhcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHg6ODgsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSB5IGtleVxuICAgICAqICEjemggWSDplK5cbiAgICAgKiBAcHJvcGVydHkgeVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgeTo4OSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIHoga2V5XG4gICAgICogISN6aCBaIOmUrlxuICAgICAqIEBwcm9wZXJ0eSB6XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICB6OjkwLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgbnVtZXJpYyBrZXlwYWQgMFxuICAgICAqICEjemgg5pWw5a2X6ZSu55uYIDBcbiAgICAgKiBAcHJvcGVydHkgbnVtMFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgbnVtMDo5NixcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIG51bWVyaWMga2V5cGFkIDFcbiAgICAgKiAhI3poIOaVsOWtl+mUruebmCAxXG4gICAgICogQHByb3BlcnR5IG51bTFcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIG51bTE6OTcsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBudW1lcmljIGtleXBhZCAyXG4gICAgICogISN6aCDmlbDlrZfplK7nm5ggMlxuICAgICAqIEBwcm9wZXJ0eSBudW0yXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBudW0yOjk4LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgbnVtZXJpYyBrZXlwYWQgM1xuICAgICAqICEjemgg5pWw5a2X6ZSu55uYIDNcbiAgICAgKiBAcHJvcGVydHkgbnVtM1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgbnVtMzo5OSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIG51bWVyaWMga2V5cGFkIDRcbiAgICAgKiAhI3poIOaVsOWtl+mUruebmCA0XG4gICAgICogQHByb3BlcnR5IG51bTRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIG51bTQ6MTAwLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgbnVtZXJpYyBrZXlwYWQgNVxuICAgICAqICEjemgg5pWw5a2X6ZSu55uYIDVcbiAgICAgKiBAcHJvcGVydHkgbnVtNVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgbnVtNToxMDEsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBudW1lcmljIGtleXBhZCA2XG4gICAgICogISN6aCDmlbDlrZfplK7nm5ggNlxuICAgICAqIEBwcm9wZXJ0eSBudW02XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBudW02OjEwMixcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIG51bWVyaWMga2V5cGFkIDdcbiAgICAgKiAhI3poIOaVsOWtl+mUruebmCA3XG4gICAgICogQHByb3BlcnR5IG51bTdcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIG51bTc6MTAzLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgbnVtZXJpYyBrZXlwYWQgOFxuICAgICAqICEjemgg5pWw5a2X6ZSu55uYIDhcbiAgICAgKiBAcHJvcGVydHkgbnVtOFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgbnVtODoxMDQsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBudW1lcmljIGtleXBhZCA5XG4gICAgICogISN6aCDmlbDlrZfplK7nm5ggOVxuICAgICAqIEBwcm9wZXJ0eSBudW05XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBudW05OjEwNSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIG51bWVyaWMga2V5cGFkICcqJ1xuICAgICAqICEjemgg5pWw5a2X6ZSu55uYICpcbiAgICAgKiBAcHJvcGVydHkgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgJyonOjEwNixcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIG51bWVyaWMga2V5cGFkICcrJ1xuICAgICAqICEjemgg5pWw5a2X6ZSu55uYICtcbiAgICAgKiBAcHJvcGVydHkgK1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgJysnOjEwNyxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIG51bWVyaWMga2V5cGFkICctJ1xuICAgICAqICEjemgg5pWw5a2X6ZSu55uYIC1cbiAgICAgKiBAcHJvcGVydHkgLVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgJy0nOjEwOSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIG51bWVyaWMga2V5cGFkICdkZWxldGUnXG4gICAgICogISN6aCDmlbDlrZfplK7nm5jliKDpmaTplK5cbiAgICAgKiBAcHJvcGVydHkgbnVtZGVsXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICAnbnVtZGVsJzoxMTAsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBudW1lcmljIGtleXBhZCAnLydcbiAgICAgKiAhI3poIOaVsOWtl+mUruebmCAvXG4gICAgICogQHByb3BlcnR5IC9cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgICcvJzoxMTEsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBGMSBmdW5jdGlvbiBrZXlcbiAgICAgKiAhI3poIEYxIOWKn+iDvemUrlxuICAgICAqIEBwcm9wZXJ0eSBmMVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZjE6MTEyLCAvL2YxLWYxMiBkb250IHdvcmsgb24gaWVcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIEYyIGZ1bmN0aW9uIGtleVxuICAgICAqICEjemggRjIg5Yqf6IO96ZSuXG4gICAgICogQHByb3BlcnR5IGYyXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBmMjoxMTMsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBGMyBmdW5jdGlvbiBrZXlcbiAgICAgKiAhI3poIEYzIOWKn+iDvemUrlxuICAgICAqIEBwcm9wZXJ0eSBmM1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZjM6MTE0LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgRjQgZnVuY3Rpb24ga2V5XG4gICAgICogISN6aCBGNCDlip/og73plK5cbiAgICAgKiBAcHJvcGVydHkgZjRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGY0OjExNSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIEY1IGZ1bmN0aW9uIGtleVxuICAgICAqICEjemggRjUg5Yqf6IO96ZSuXG4gICAgICogQHByb3BlcnR5IGY1XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBmNToxMTYsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBGNiBmdW5jdGlvbiBrZXlcbiAgICAgKiAhI3poIEY2IOWKn+iDvemUrlxuICAgICAqIEBwcm9wZXJ0eSBmNlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZjY6MTE3LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgRjcgZnVuY3Rpb24ga2V5XG4gICAgICogISN6aCBGNyDlip/og73plK5cbiAgICAgKiBAcHJvcGVydHkgZjdcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGY3OjExOCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIEY4IGZ1bmN0aW9uIGtleVxuICAgICAqICEjemggRjgg5Yqf6IO96ZSuXG4gICAgICogQHByb3BlcnR5IGY4XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBmODoxMTksXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBGOSBmdW5jdGlvbiBrZXlcbiAgICAgKiAhI3poIEY5IOWKn+iDvemUrlxuICAgICAqIEBwcm9wZXJ0eSBmOVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZjk6MTIwLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgRjEwIGZ1bmN0aW9uIGtleVxuICAgICAqICEjemggRjEwIOWKn+iDvemUrlxuICAgICAqIEBwcm9wZXJ0eSBmMTBcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGYxMDoxMjEsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBGMTEgZnVuY3Rpb24ga2V5XG4gICAgICogISN6aCBGMTEg5Yqf6IO96ZSuXG4gICAgICogQHByb3BlcnR5IGYxMVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZjExOjEyMixcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIEYxMiBmdW5jdGlvbiBrZXlcbiAgICAgKiAhI3poIEYxMiDlip/og73plK5cbiAgICAgKiBAcHJvcGVydHkgZjEyXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBmMTI6MTIzLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgbnVtbG9jayBrZXlcbiAgICAgKiAhI3poIOaVsOWtl+mUgeWumumUrlxuICAgICAqIEBwcm9wZXJ0eSBudW1sb2NrXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBudW1sb2NrOjE0NCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIHNjcm9sbCBsb2NrIGtleVxuICAgICAqICEjemgg5rua5Yqo6ZSB5a6a6ZSuXG4gICAgICogQHByb3BlcnR5IHNjcm9sbGxvY2tcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHNjcm9sbGxvY2s6MTQ1LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgJzsnIGtleS5cbiAgICAgKiAhI3poIOWIhuWPt+mUrlxuICAgICAqIEBwcm9wZXJ0eSA7XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICAnOyc6MTg2LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgJzsnIGtleS5cbiAgICAgKiAhI3poIOWIhuWPt+mUrlxuICAgICAqIEBwcm9wZXJ0eSBzZW1pY29sb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHNlbWljb2xvbjoxODYsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSAnPScga2V5LlxuICAgICAqICEjemgg562J5LqO5Y+36ZSuXG4gICAgICogQHByb3BlcnR5IGVxdWFsXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBlcXVhbDoxODcsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSAnPScga2V5LlxuICAgICAqICEjemgg562J5LqO5Y+36ZSuXG4gICAgICogQHByb3BlcnR5ID1cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgICc9JzoxODcsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSAnLCcga2V5LlxuICAgICAqICEjemgg6YCX5Y+36ZSuXG4gICAgICogQHByb3BlcnR5ICxcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgICcsJzoxODgsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSAnLCcga2V5LlxuICAgICAqICEjemgg6YCX5Y+36ZSuXG4gICAgICogQHByb3BlcnR5IGNvbW1hXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBjb21tYToxODgsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBkYXNoICctJyBrZXkuXG4gICAgICogISN6aCDkuK3liJLnur/plK5cbiAgICAgKiBAcHJvcGVydHkgZGFzaFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZGFzaDoxODksXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSAnLicga2V5LlxuICAgICAqICEjemgg5Y+l5Y+36ZSuXG4gICAgICogQHByb3BlcnR5IC5cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgICcuJzoxOTAsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSAnLicga2V5XG4gICAgICogISN6aCDlj6Xlj7fplK5cbiAgICAgKiBAcHJvcGVydHkgcGVyaW9kXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBwZXJpb2Q6MTkwLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgZm9yd2FyZCBzbGFzaCBrZXlcbiAgICAgKiAhI3poIOato+aWnOadoOmUrlxuICAgICAqIEBwcm9wZXJ0eSBmb3J3YXJkc2xhc2hcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGZvcndhcmRzbGFzaDoxOTEsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBncmF2ZSBrZXlcbiAgICAgKiAhI3poIOaMiemUriBgXG4gICAgICogQHByb3BlcnR5IGdyYXZlXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBncmF2ZToxOTIsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSAnWycga2V5XG4gICAgICogISN6aCDmjInplK4gW1xuICAgICAqIEBwcm9wZXJ0eSBbXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICAnWyc6MjE5LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgJ1snIGtleVxuICAgICAqICEjemgg5oyJ6ZSuIFtcbiAgICAgKiBAcHJvcGVydHkgb3BlbmJyYWNrZXRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIG9wZW5icmFja2V0OjIxOSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlICdcXCcga2V5XG4gICAgICogISN6aCDlj43mlpzmnaDplK5cbiAgICAgKiBAcHJvcGVydHkgYmFja3NsYXNoXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBiYWNrc2xhc2g6MjIwLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgJ10nIGtleVxuICAgICAqICEjemgg5oyJ6ZSuIF1cbiAgICAgKiBAcHJvcGVydHkgXVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgJ10nOjIyMSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlICddJyBrZXlcbiAgICAgKiAhI3poIOaMiemUriBdXG4gICAgICogQHByb3BlcnR5IGNsb3NlYnJhY2tldFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgY2xvc2VicmFja2V0OjIyMSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIHF1b3RlIGtleVxuICAgICAqICEjemgg5Y2V5byV5Y+36ZSuXG4gICAgICogQHByb3BlcnR5IHF1b3RlXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBxdW90ZToyMjIsXG5cbiAgICAvLyBnYW1lcGFkIGNvbnRyb2xsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBkcGFkIGxlZnQga2V5XG4gICAgICogISN6aCDlr7zoiKrplK4g5ZCR5bemXG4gICAgICogQHByb3BlcnR5IGRwYWRMZWZ0XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBkcGFkTGVmdDoxMDAwLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgZHBhZCByaWdodCBrZXlcbiAgICAgKiAhI3poIOWvvOiIqumUriDlkJHlj7NcbiAgICAgKiBAcHJvcGVydHkgZHBhZFJpZ2h0XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBkcGFkUmlnaHQ6MTAwMSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVGhlIGRwYWQgdXAga2V5XG4gICAgICogISN6aCDlr7zoiKrplK4g5ZCR5LiKXG4gICAgICogQHByb3BlcnR5IGRwYWRVcFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZHBhZFVwOjEwMDMsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFRoZSBkcGFkIGRvd24ga2V5XG4gICAgICogISN6aCDlr7zoiKrplK4g5ZCR5LiLXG4gICAgICogQHByb3BlcnR5IGRwYWREb3duXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBkcGFkRG93bjoxMDA0LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBUaGUgZHBhZCBjZW50ZXIga2V5XG4gICAgICogISN6aCDlr7zoiKrplK4g56Gu5a6a6ZSuXG4gICAgICogQHByb3BlcnR5IGRwYWRDZW50ZXJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGRwYWRDZW50ZXI6MTAwNVxufTtcblxuLyoqXG4gKiBJbWFnZSBmb3JtYXRzXG4gKiBAZW51bSBtYWNyby5JbWFnZUZvcm1hdFxuICovXG5jYy5tYWNyby5JbWFnZUZvcm1hdCA9IGNjLkVudW0oe1xuICAgIC8qKlxuICAgICAqIEltYWdlIEZvcm1hdDpKUEdcbiAgICAgKiBAcHJvcGVydHkgSlBHXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBKUEc6IDAsXG4gICAgLyoqXG4gICAgICogSW1hZ2UgRm9ybWF0OlBOR1xuICAgICAqIEBwcm9wZXJ0eSBQTkdcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIFBORzogMSxcbiAgICAvKipcbiAgICAgKiBJbWFnZSBGb3JtYXQ6VElGRlxuICAgICAqIEBwcm9wZXJ0eSBUSUZGXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBUSUZGOiAyLFxuICAgIC8qKlxuICAgICAqIEltYWdlIEZvcm1hdDpXRUJQXG4gICAgICogQHByb3BlcnR5IFdFQlBcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIFdFQlA6IDMsXG4gICAgLyoqXG4gICAgICogSW1hZ2UgRm9ybWF0OlBWUlxuICAgICAqIEBwcm9wZXJ0eSBQVlJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIFBWUjogNCxcbiAgICAvKipcbiAgICAgKiBJbWFnZSBGb3JtYXQ6RVRDXG4gICAgICogQHByb3BlcnR5IEVUQ1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgRVRDOiA1LFxuICAgIC8qKlxuICAgICAqIEltYWdlIEZvcm1hdDpTM1RDXG4gICAgICogQHByb3BlcnR5IFMzVENcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIFMzVEM6IDYsXG4gICAgLyoqXG4gICAgICogSW1hZ2UgRm9ybWF0OkFUSVRDXG4gICAgICogQHByb3BlcnR5IEFUSVRDXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBBVElUQzogNyxcbiAgICAvKipcbiAgICAgKiBJbWFnZSBGb3JtYXQ6VEdBXG4gICAgICogQHByb3BlcnR5IFRHQVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgVEdBOiA4LFxuICAgIC8qKlxuICAgICAqIEltYWdlIEZvcm1hdDpSQVdEQVRBXG4gICAgICogQHByb3BlcnR5IFJBV0RBVEFcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIFJBV0RBVEE6IDksXG4gICAgLyoqXG4gICAgICogSW1hZ2UgRm9ybWF0OlVOS05PV05cbiAgICAgKiBAcHJvcGVydHkgVU5LTk9XTlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgVU5LTk9XTjogMTBcbn0pO1xuXG4vKipcbiAqICEjZW5cbiAqIEVudW0gZm9yIGJsZW5kIGZhY3RvclxuICogUmVmZXIgdG86IGh0dHA6Ly93d3cuYW5kZXJzcmlnZ2Vsc2VuLmRrL2dsYmxlbmRmdW5jLnBocFxuICogISN6aFxuICog5re35ZCI5Zug5a2QXG4gKiDlj6/lj4LogIM6IGh0dHA6Ly93d3cuYW5kZXJzcmlnZ2Vsc2VuLmRrL2dsYmxlbmRmdW5jLnBocFxuICogQGVudW0gbWFjcm8uQmxlbmRGYWN0b3JcbiAqL1xuY2MubWFjcm8uQmxlbmRGYWN0b3IgPSBjYy5FbnVtKHtcbiAgICAvKipcbiAgICAgKiAhI2VuIEFsbCB1c2VcbiAgICAgKiAhI3poIOWFqOmDqOS9v+eUqFxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBPTkVcbiAgICAgKi9cbiAgICBPTkU6ICAgICAgICAgICAgICAgICAgICAxLCAgLy9jYy5tYWNyby5PTkVcbiAgICAvKipcbiAgICAgKiAhI2VuIE5vdCBhbGxcbiAgICAgKiAhI3poIOWFqOmDqOS4jeeUqFxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBaRVJPXG4gICAgICovXG4gICAgWkVSTzogICAgICAgICAgICAgICAgICAgMCwgICAgICAvL2NjLlpFUk9cbiAgICAvKipcbiAgICAgKiAhI2VuIFVzaW5nIHRoZSBzb3VyY2UgYWxwaGFcbiAgICAgKiAhI3poIOS9v+eUqOa6kOminOiJsueahOmAj+aYjuW6plxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBTUkNfQUxQSEFcbiAgICAgKi9cbiAgICBTUkNfQUxQSEE6ICAgICAgICAgICAgICAweDMwMiwgIC8vY2MuU1JDX0FMUEhBXG4gICAgLyoqXG4gICAgICogISNlbiBVc2luZyB0aGUgc291cmNlIGNvbG9yXG4gICAgICogISN6aCDkvb/nlKjmupDpopzoibJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gU1JDX0NPTE9SXG4gICAgICovXG4gICAgU1JDX0NPTE9SOiAgICAgICAgICAgICAgMHgzMDAsICAvL2NjLlNSQ19DT0xPUlxuICAgIC8qKlxuICAgICAqICEjZW4gVXNpbmcgdGhlIHRhcmdldCBhbHBoYVxuICAgICAqICEjemgg5L2/55So55uu5qCH6aKc6Imy55qE6YCP5piO5bqmXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IERTVF9BTFBIQVxuICAgICAqL1xuICAgIERTVF9BTFBIQTogICAgICAgICAgICAgIDB4MzA0LCAgLy9jYy5EU1RfQUxQSEFcbiAgICAvKipcbiAgICAgKiAhI2VuIFVzaW5nIHRoZSB0YXJnZXQgY29sb3JcbiAgICAgKiAhI3poIOS9v+eUqOebruagh+minOiJslxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBEU1RfQ09MT1JcbiAgICAgKi9cbiAgICBEU1RfQ09MT1I6ICAgICAgICAgICAgICAweDMwNiwgIC8vY2MuRFNUX0NPTE9SXG4gICAgLyoqXG4gICAgICogISNlbiBNaW51cyB0aGUgc291cmNlIGFscGhhXG4gICAgICogISN6aCDlh4/ljrvmupDpopzoibLnmoTpgI/mmI7luqZcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gT05FX01JTlVTX1NSQ19BTFBIQVxuICAgICAqL1xuICAgIE9ORV9NSU5VU19TUkNfQUxQSEE6ICAgIDB4MzAzLCAgLy9jYy5PTkVfTUlOVVNfU1JDX0FMUEhBXG4gICAgLyoqXG4gICAgICogISNlbiBNaW51cyB0aGUgc291cmNlIGNvbG9yXG4gICAgICogISN6aCDlh4/ljrvmupDpopzoibJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gT05FX01JTlVTX1NSQ19DT0xPUlxuICAgICAqL1xuICAgIE9ORV9NSU5VU19TUkNfQ09MT1I6ICAgIDB4MzAxLCAgLy9jYy5PTkVfTUlOVVNfU1JDX0NPTE9SXG4gICAgLyoqXG4gICAgICogISNlbiBNaW51cyB0aGUgdGFyZ2V0IGFscGhhXG4gICAgICogISN6aCDlh4/ljrvnm67moIfpopzoibLnmoTpgI/mmI7luqZcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gT05FX01JTlVTX0RTVF9BTFBIQVxuICAgICAqL1xuICAgIE9ORV9NSU5VU19EU1RfQUxQSEE6ICAgIDB4MzA1LCAgLy9jYy5PTkVfTUlOVVNfRFNUX0FMUEhBXG4gICAgLyoqXG4gICAgICogISNlbiBNaW51cyB0aGUgdGFyZ2V0IGNvbG9yXG4gICAgICogISN6aCDlh4/ljrvnm67moIfpopzoibJcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gT05FX01JTlVTX0RTVF9DT0xPUlxuICAgICAqL1xuICAgIE9ORV9NSU5VU19EU1RfQ09MT1I6ICAgIDB4MzA3LCAgLy9jYy5PTkVfTUlOVVNfRFNUX0NPTE9SXG59KTtcblxuLyoqXG4gKiBAZW51bSBtYWNyby5UZXh0QWxpZ25tZW50XG4gKi9cbmNjLm1hY3JvLlRleHRBbGlnbm1lbnQgPSBjYy5FbnVtKHtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gTEVGVFxuICAgICAqL1xuICAgIExFRlQ6IDAsXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IENFTlRFUlxuICAgICAqL1xuICAgIENFTlRFUjogMSxcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gUklHSFRcbiAgICAgKi9cbiAgICBSSUdIVDogMlxufSk7XG5cbi8qKlxuICogQGVudW0gVmVydGljYWxUZXh0QWxpZ25tZW50XG4gKi9cbmNjLm1hY3JvLlZlcnRpY2FsVGV4dEFsaWdubWVudCA9IGNjLkVudW0oe1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBUT1BcbiAgICAgKi9cbiAgICBUT1A6IDAsXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IENFTlRFUlxuICAgICAqL1xuICAgIENFTlRFUjogMSxcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gQk9UVE9NXG4gICAgICovXG4gICAgQk9UVE9NOiAyXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjYy5tYWNybztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCBSaWNhcmRvIFF1ZXNhZGFcbiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxMiBjb2NvczJkLXgub3JnXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIganMgPSByZXF1aXJlKCcuL2pzJyk7XG5cbi8qKlxuICogUHJlZGVmaW5lZCBjb25zdGFudHNcbiAqIEBjbGFzcyBtYWNyb1xuICogQHN0YXRpY1xuICovXG5jYy5tYWNybyA9IHtcbiAgLyoqXG4gICAqIFBJIC8gMTgwXG4gICAqIEBwcm9wZXJ0eSBSQURcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIFJBRDogTWF0aC5QSSAvIDE4MCxcblxuICAvKipcbiAgICogT25lIGRlZ3JlZVxuICAgKiBAcHJvcGVydHkgREVHXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBERUc6IDE4MCAvIE1hdGguUEksXG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSBSRVBFQVRfRk9SRVZFUlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgUkVQRUFUX0ZPUkVWRVI6IE51bWJlci5NQVhfVkFMVUUgLSAxLFxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgRkxUX0VQU0lMT05cbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIEZMVF9FUFNJTE9OOiAwLjAwMDAwMDExOTIwOTI4OTYsXG5cbiAgLyoqXG4gICAqIE1pbmltdW0geiBpbmRleCB2YWx1ZSBmb3Igbm9kZVxuICAgKiBAcHJvcGVydHkgTUlOX1pJTkRFWFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgTUlOX1pJTkRFWDogLU1hdGgucG93KDIsIDE1KSxcblxuICAvKipcbiAgICogTWF4aW11bSB6IGluZGV4IHZhbHVlIGZvciBub2RlXG4gICAqIEBwcm9wZXJ0eSBNQVhfWklOREVYXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBNQVhfWklOREVYOiBNYXRoLnBvdygyLCAxNSkgLSAxLFxuXG4gIC8vc29tZSBnbCBjb25zdGFudCB2YXJpYWJsZVxuICAvKipcbiAgICogQHByb3BlcnR5IE9ORVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgT05FOiAxLFxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgWkVST1xuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgWkVSTzogMCxcblxuICAvKipcbiAgICogQHByb3BlcnR5IFNSQ19BTFBIQVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgU1JDX0FMUEhBOiAweDAzMDIsXG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSBTUkNfQUxQSEFfU0FUVVJBVEVcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIFNSQ19BTFBIQV9TQVRVUkFURTogMHgzMDgsXG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSBTUkNfQ09MT1JcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIFNSQ19DT0xPUjogMHgzMDAsXG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSBEU1RfQUxQSEFcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIERTVF9BTFBIQTogMHgzMDQsXG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSBEU1RfQ09MT1JcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIERTVF9DT0xPUjogMHgzMDYsXG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSBPTkVfTUlOVVNfU1JDX0FMUEhBXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBPTkVfTUlOVVNfU1JDX0FMUEhBOiAweDAzMDMsXG5cbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSBPTkVfTUlOVVNfU1JDX0NPTE9SXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBPTkVfTUlOVVNfU1JDX0NPTE9SOiAweDMwMSxcblxuICAvKipcbiAgICogQHByb3BlcnR5IE9ORV9NSU5VU19EU1RfQUxQSEFcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIE9ORV9NSU5VU19EU1RfQUxQSEE6IDB4MzA1LFxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgT05FX01JTlVTX0RTVF9DT0xPUlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgT05FX01JTlVTX0RTVF9DT0xPUjogMHgwMzA3LFxuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkgT05FX01JTlVTX0NPTlNUQU5UX0FMUEhBXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBPTkVfTUlOVVNfQ09OU1RBTlRfQUxQSEE6IDB4ODAwNCxcblxuICAvKipcbiAgICogQHByb3BlcnR5IE9ORV9NSU5VU19DT05TVEFOVF9DT0xPUlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgT05FX01JTlVTX0NPTlNUQU5UX0NPTE9SOiAweDgwMDIsXG5cbiAgLy9Qb3NzaWJsZSBkZXZpY2Ugb3JpZW50YXRpb25zXG4gIC8qKlxuICAgKiBPcmllbnRlZCB2ZXJ0aWNhbGx5XG4gICAqIEBwcm9wZXJ0eSBPUklFTlRBVElPTl9QT1JUUkFJVFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgT1JJRU5UQVRJT05fUE9SVFJBSVQ6IDEsXG5cbiAgLyoqXG4gICAqIE9yaWVudGVkIGhvcml6b250YWxseVxuICAgKiBAcHJvcGVydHkgT1JJRU5UQVRJT05fTEFORFNDQVBFXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBPUklFTlRBVElPTl9MQU5EU0NBUEU6IDIsXG5cbiAgLyoqXG4gICAqIE9yaWVudGVkIGF1dG9tYXRpY2FsbHlcbiAgICogQHByb3BlcnR5IE9SSUVOVEFUSU9OX0FVVE9cbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIE9SSUVOVEFUSU9OX0FVVE86IDMsXG5cbiAgREVOU0lUWURQSV9ERVZJQ0U6ICdkZXZpY2UtZHBpJyxcbiAgREVOU0lUWURQSV9ISUdIOiAnaGlnaC1kcGknLFxuICBERU5TSVRZRFBJX01FRElVTTogJ21lZGl1bS1kcGknLFxuICBERU5TSVRZRFBJX0xPVzogJ2xvdy1kcGknLFxuXG4gIC8vIEdlbmVyYWwgY29uZmlndXJhdGlvbnNcblxuICAvKipcbiAgICogPHA+XG4gICAqICAgSWYgZW5hYmxlZCwgdGhlIHRleHR1cmUgY29vcmRpbmF0ZXMgd2lsbCBiZSBjYWxjdWxhdGVkIGJ5IHVzaW5nIHRoaXMgZm9ybXVsYTogPGJyLz5cbiAgICogICAgICAtIHRleENvb3JkLmxlZnQgPSAocmVjdC54KjIrMSkgLyAodGV4dHVyZS53aWRlKjIpOyAgICAgICAgICAgICAgICAgIDxici8+XG4gICAqICAgICAgLSB0ZXhDb29yZC5yaWdodCA9IHRleENvb3JkLmxlZnQgKyAocmVjdC53aWR0aCoyLTIpLyh0ZXh0dXJlLndpZGUqMik7IDxici8+XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICogIFRoZSBzYW1lIGZvciBib3R0b20gYW5kIHRvcC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gICAqICBUaGlzIGZvcm11bGEgcHJldmVudHMgYXJ0aWZhY3RzIGJ5IHVzaW5nIDk5JSBvZiB0aGUgdGV4dHVyZS4gICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICogIFRoZSBcImNvcnJlY3RcIiB3YXkgdG8gcHJldmVudCBhcnRpZmFjdHMgaXMgYnkgZXhwYW5kIHRoZSB0ZXh0dXJlJ3MgYm9yZGVyIHdpdGggdGhlIHNhbWUgY29sb3IgYnkgMSBwaXhlbDxici8+XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gICAqICBBZmZlY3RlZCBjb21wb25lbnQ6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxuICAgKiAgICAgIC0gY2MuVE1YTGF5ZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICogIEVuYWJsZWQgYnkgZGVmYXVsdC4gVG8gZGlzYWJsZWQgc2V0IGl0IHRvIDAuIDxici8+XG4gICAqICBUbyBtb2RpZnkgaXQsIGluIFdlYiBlbmdpbmUgcGxlYXNlIHJlZmVyIHRvIENDTWFjcm8uanMsIGluIEpTQiBwbGVhc2UgcmVmZXIgdG8gQ0NDb25maWcuaFxuICAgKiA8L3A+XG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBGSVhfQVJUSUZBQ1RTX0JZX1NUUkVDSElOR19URVhFTF9UTVhcbiAgICovXG4gIEZJWF9BUlRJRkFDVFNfQllfU1RSRUNISU5HX1RFWEVMX1RNWDogdHJ1ZSxcblxuICAvKipcbiAgICogUG9zaXRpb24gb2YgdGhlIEZQUyAoRGVmYXVsdDogMCwwIChib3R0b20tbGVmdCBjb3JuZXIpKTxici8+XG4gICAqIFRvIG1vZGlmeSBpdCwgaW4gV2ViIGVuZ2luZSBwbGVhc2UgcmVmZXIgdG8gQ0NNYWNyby5qcywgaW4gSlNCIHBsZWFzZSByZWZlciB0byBDQ0NvbmZpZy5oXG4gICAqIEBwcm9wZXJ0eSB7VmVjMn0gRElSRUNUT1JfU1RBVFNfUE9TSVRJT05cbiAgICovXG4gIERJUkVDVE9SX1NUQVRTX1BPU0lUSU9OOiBjYy52MigwLCAwKSxcblxuICAvKipcbiAgICogPHA+XG4gICAqICAgIElmIGVuYWJsZWQsIGFjdGlvbnMgdGhhdCBhbHRlciB0aGUgcG9zaXRpb24gcHJvcGVydHkgKGVnOiBDQ01vdmVCeSwgQ0NKdW1wQnksIENDQmV6aWVyQnksIGV0Yy4uKSB3aWxsIGJlIHN0YWNrZWQuICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICogICAgSWYgeW91IHJ1biAyIG9yIG1vcmUgJ3Bvc2l0aW9uJyBhY3Rpb25zIGF0IHRoZSBzYW1lIHRpbWUgb24gYSBub2RlLCB0aGVuIGVuZCBwb3NpdGlvbiB3aWxsIGJlIHRoZSBzdW0gb2YgYWxsIHRoZSBwb3NpdGlvbnMuICAgICAgICA8YnIvPlxuICAgKiAgICBJZiBkaXNhYmxlZCwgb25seSB0aGUgbGFzdCBydW4gYWN0aW9uIHdpbGwgdGFrZSBlZmZlY3QuXG4gICAqIDwvcD5cbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IEVOQUJMRV9TVEFDS0FCTEVfQUNUSU9OU1xuICAgKi9cbiAgRU5BQkxFX1NUQUNLQUJMRV9BQ1RJT05TOiB0cnVlLFxuXG4gIC8qKlxuICAgKiAhI2VuIFxuICAgKiBUaGUgdGltZW91dCB0byBkZXRlcm1pbmUgd2hldGhlciBhIHRvdWNoIGlzIG5vIGxvbmdlciBhY3RpdmUgYW5kIHNob3VsZCBiZSByZW1vdmVkLlxuICAgKiBUaGUgcmVhc29uIHRvIGFkZCB0aGlzIHRpbWVvdXQgaXMgZHVlIHRvIGFuIGlzc3VlIGluIFg1IGJyb3dzZXIgY29yZSwgXG4gICAqIHdoZW4gWDUgaXMgcHJlc2VudGVkIGluIHdlY2hhdCBvbiBBbmRyb2lkLCBpZiBhIHRvdWNoIGlzIGdsaXNzZWQgZnJvbSB0aGUgYm90dG9tIHVwLCBhbmQgbGVhdmUgdGhlIHBhZ2UgYXJlYSxcbiAgICogbm8gdG91Y2ggY2FuY2VsIGV2ZW50IGlzIHRyaWdnZXJlZCwgYW5kIHRoZSB0b3VjaCB3aWxsIGJlIGNvbnNpZGVyZWQgYWN0aXZlIGZvcmV2ZXIuIFxuICAgKiBBZnRlciBtdWx0aXBsZSB0aW1lcyBvZiB0aGlzIGFjdGlvbiwgb3VyIG1heGltdW0gdG91Y2hlcyBudW1iZXIgd2lsbCBiZSByZWFjaGVkIGFuZCBhbGwgbmV3IHRvdWNoZXMgd2lsbCBiZSBpZ25vcmVkLlxuICAgKiBTbyB0aGlzIG5ldyBtZWNoYW5pc20gY2FuIHJlbW92ZSB0aGUgdG91Y2ggdGhhdCBzaG91bGQgYmUgaW5hY3RpdmUgaWYgaXQncyBub3QgdXBkYXRlZCBkdXJpbmcgdGhlIGxhc3QgNTAwMCBtaWxsaXNlY29uZHMuXG4gICAqIFRob3VnaCBpdCBtaWdodCByZW1vdmUgYSByZWFsIHRvdWNoIGlmIGl0J3MganVzdCBub3QgbW92aW5nIGZvciB0aGUgbGFzdCA1IHNlY29uZHMgd2hpY2ggaXMgbm90IGVhc3kgd2l0aCB0aGUgc2Vuc2liaWxpdHkgb2YgbW9iaWxlIHRvdWNoIHNjcmVlbi5cbiAgICogWW91IGNhbiBtb2RpZnkgdGhpcyB2YWx1ZSB0byBoYXZlIGEgYmV0dGVyIGJlaGF2aW9yIGlmIHlvdSBmaW5kIGl0J3Mgbm90IGVub3VnaC5cbiAgICogISN6aFxuICAgKiDnlKjkuo7nlITliKvkuIDkuKrop6bngrnlr7nosaHmmK/lkKblt7Lnu4/lpLHmlYjlubbkuJTlj6/ku6Xooqvnp7vpmaTnmoTlu7bml7bml7bplb9cbiAgICog5re75Yqg6L+Z5Liq5pe26ZW/55qE5Y6f5Zug5pivIFg1IOWGheaguOWcqOW+ruS/oea1j+iniOWZqOS4reWHuueOsOeahOS4gOS4qiBidWfjgIJcbiAgICog5Zyo6L+Z5Liq546v5aKD5LiL77yM5aaC5p6c55So5oi35bCG5LiA5Liq6Kem54K55LuO5bqV5ZCR5LiK56e75Ye66aG16Z2i5Yy65Z+f77yM5bCG5LiN5Lya6Kem5Y+R5Lu75L2VIHRvdWNoIGNhbmNlbCDmiJYgdG91Y2ggZW5kIOS6i+S7tu+8jOiAjOi/meS4quinpueCueS8muiiq+awuOi/nOW9k+S9nOWBnOeVmeWcqOmhtemdouS4iueahOacieaViOinpueCueOAglxuICAgKiDph43lpI3ov5nmoLfmk43kvZzlh6DmrKHkuYvlkI7vvIzlsY/luZXkuIrnmoTop6bngrnmlbDph4/lsIbovr7liLDmiJHku6znmoTkuovku7bns7vnu5/miYDmlK/mjIHnmoTmnIDpq5jop6bngrnmlbDph4/vvIzkuYvlkI7miYDmnInnmoTop6bmkbjkuovku7bpg73lsIbooqvlv73nlaXjgIJcbiAgICog5omA5Lul6L+Z5Liq5paw55qE5py65Yi25Y+v5Lul5Zyo6Kem54K55Zyo5LiA5a6a5pe26Ze05YaF5rKh5pyJ5Lu75L2V5pu05paw55qE5oOF5Ya15LiL6KeG5Li65aSx5pWI6Kem54K55bm25LuO5LqL5Lu257O757uf5Lit56e76Zmk44CCXG4gICAqIOW9k+eEtu+8jOi/meS5n+WPr+iDveenu+mZpOS4gOS4quecn+WunueahOinpueCue+8jOWmguaenOeUqOaIt+eahOinpueCueecn+eahOWcqOS4gOWumuaXtumXtOauteWGheWujOWFqOayoeacieenu+WKqO+8iOi/meWcqOW9k+WJjeaJi+acuuWxj+W5leeahOeBteaVj+W6puS4i+S8muW+iOmavu+8ieOAglxuICAgKiDkvaDlj6/ku6Xkv67mlLnov5nkuKrlgLzmnaXojrflvpfkvaDpnIDopoHnmoTmlYjmnpzvvIzpu5jorqTlgLzmmK8gNTAwMCDmr6vnp5LjgIJcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFRPVUNIX1RJTUVPVVRcbiAgICovXG4gIFRPVUNIX1RJTUVPVVQ6IDUwMDAsXG5cbiAgLyoqXG4gICAqICEjZW4gXG4gICAqIFRoZSBtYXhpbXVtIHZlcnRleCBjb3VudCBmb3IgYSBzaW5nbGUgYmF0Y2hlZCBkcmF3IGNhbGwuXG4gICAqICEjemhcbiAgICog5pyA5aSn5Y+v5Lul6KKr5Y2V5qyh5om55aSE55CG5riy5p+T55qE6aG254K55pWw6YeP44CCXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBCQVRDSF9WRVJURVhfQ09VTlRcbiAgICovXG4gIEJBVENIX1ZFUlRFWF9DT1VOVDogMjAwMDAsXG5cbiAgLyoqXG4gICAqICEjZW4gXG4gICAqIFdoZXRoZXIgb3Igbm90IGVuYWJsZWQgdGlsZWQgbWFwIGF1dG8gY3VsbGluZy4gSWYgeW91IHNldCB0aGUgVGlsZWRNYXAgc2tldyBvciByb3RhdGlvbiwgdGhlbiBuZWVkIHRvIG1hbnVhbGx5IGRpc2FibGUgdGhpcywgb3RoZXJ3aXNlLCB0aGUgcmVuZGVyaW5nIHdpbGwgYmUgd3JvbmcuXG4gICAqICEjemhcbiAgICog5piv5ZCm5byA5ZCv55Om54mH5Zyw5Zu+55qE6Ieq5Yqo6KOB5YeP5Yqf6IO944CC55Om54mH5Zyw5Zu+5aaC5p6c6K6+572u5LqGIHNrZXcsIHJvdGF0aW9uIOeahOivne+8jOmcgOimgeaJi+WKqOWFs+mXre+8jOWQpuWImea4suafk+S8muWHuumUmeOAglxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IEVOQUJMRV9USUxFRE1BUF9DVUxMSU5HXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIEVOQUJMRV9USUxFRE1BUF9DVUxMSU5HOiB0cnVlLFxuXG4gIC8qKlxuICAgKiAhI2VuIFxuICAgKiBUaGUgbWF4IGNvbmN1cnJlbnQgdGFzayBudW1iZXIgZm9yIHRoZSBkb3dubG9hZGVyXG4gICAqICEjemhcbiAgICog5LiL6L295Lu75Yqh55qE5pyA5aSn5bm25Y+R5pWw6ZmQ5Yi277yM5Zyo5a6J5Y2T5bmz5Y+w6YOo5YiG5py65Z6L5oiW54mI5pys5LiK5Y+v6IO96ZyA6KaB6ZmQ5Yi25Zyo6L6D5L2O55qE5rC05bmzXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBET1dOTE9BRF9NQVhfQ09OQ1VSUkVOVFxuICAgKiBAZGVmYXVsdCA2NFxuICAgKi9cbiAgRE9XTkxPQURfTUFYX0NPTkNVUlJFTlQ6IDY0LFxuXG4gIC8qKlxuICAgKiAhI2VuIFxuICAgKiBCb29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBjYW52YXMgY29udGFpbnMgYW4gYWxwaGEgY2hhbm5lbCwgZGVmYXVsdCBzZXRzIHRvIGZhbHNlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXG4gICAqIFRob3VnaCBpZiB5b3Ugd2FudCB0byBtYWtlIHlvdXIgY2FudmFzIGJhY2tncm91bmQgdHJhbnNwYXJlbnQgYW5kIHNob3cgb3RoZXIgZG9tIGVsZW1lbnRzIGF0IHRoZSBiYWNrZ3JvdW5kLCBcbiAgICogeW91IGNhbiBzZXQgaXQgdG8gdHJ1ZSBiZWZvcmUgYGNjLmdhbWUucnVuYC5cbiAgICogV2ViIG9ubHkuXG4gICAqICEjemhcbiAgICog55So5LqO6K6+572uIENhbnZhcyDog4zmma/mmK/lkKbmlK/mjIEgYWxwaGEg6YCa6YGT77yM6buY6K6k5Li6IGZhbHNl77yM6L+Z5qC35Y+v5Lul5pyJ5pu06auY55qE5oCn6IO96KGo546w44CCXG4gICAqIOWmguaenOS9oOW4jOacmyBDYW52YXMg6IOM5pmv5piv6YCP5piO55qE77yM5bm25pi+56S66IOM5ZCO55qE5YW25LuWIERPTSDlhYPntKDvvIzkvaDlj6/ku6XlnKggYGNjLmdhbWUucnVuYCDkuYvliY3lsIbov5nkuKrlgLzorr7kuLogdHJ1ZeOAglxuICAgKiDku4XmlK/mjIEgV2ViXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gRU5BQkxFX1RSQU5TUEFSRU5UX0NBTlZBU1xuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgRU5BQkxFX1RSQU5TUEFSRU5UX0NBTlZBUzogZmFsc2UsXG5cbiAgLyoqXG4gICAqICEjZW5cbiAgICogQm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiB0aGUgV2ViR0wgY29udGV4dCBpcyBjcmVhdGVkIHdpdGggYGFudGlhbGlhc2Agb3B0aW9uIHR1cm5lZCBvbiwgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICogU2V0IGl0IHRvIHRydWUgY291bGQgbWFrZSB5b3VyIGdhbWUgZ3JhcGhpY3Mgc2xpZ2h0bHkgc21vb3RoZXIsIGxpa2UgdGV4dHVyZSBoYXJkIGVkZ2VzIHdoZW4gcm90YXRlZC5cbiAgICogV2hldGhlciB0byB1c2UgdGhpcyByZWFsbHkgZGVwZW5kIG9uIHlvdXIgZ2FtZSBkZXNpZ24gYW5kIHRhcmdldGVkIHBsYXRmb3JtLCBcbiAgICogZGV2aWNlIHdpdGggcmV0aW5hIGRpc3BsYXkgdXN1YWxseSBoYXZlIGdvb2QgZGV0YWlsIG9uIGdyYXBoaWNzIHdpdGggb3Igd2l0aG91dCB0aGlzIG9wdGlvbiwgXG4gICAqIHlvdSBwcm9iYWJseSBkb24ndCB3YW50IGFudGlhbGlhcyBpZiB5b3VyIGdhbWUgc3R5bGUgaXMgcGl4ZWwgYXJ0IGJhc2VkLlxuICAgKiBBbHNvLCBpdCBjb3VsZCBoYXZlIGdyZWF0IHBlcmZvcm1hbmNlIGltcGFjdCB3aXRoIHNvbWUgYnJvd3NlciAvIGRldmljZSB1c2luZyBzb2Z0d2FyZSBNU0FBLlxuICAgKiBZb3UgY2FuIHNldCBpdCB0byB0cnVlIGJlZm9yZSBgY2MuZ2FtZS5ydW5gLlxuICAgKiBXZWIgb25seS5cbiAgICogISN6aFxuICAgKiDnlKjkuo7orr7nva7lnKjliJvlu7ogV2ViR0wgQ29udGV4dCDml7bmmK/lkKblvIDlkK/mipfplK/pvb/pgInpobnvvIzpu5jorqTlgLzmmK8gZmFsc2XjgIJcbiAgICog5bCG6L+Z5Liq6YCJ6aG56K6+572u5Li6IHRydWUg5Lya6K6p5L2g55qE5ri45oiP55S76Z2i56iN56iN5bmz5ruR5LiA5Lqb77yM5q+U5aaC5peL6L2s56Gs6L656LS05Zu+5pe255qE6ZSv6b2/44CC5piv5ZCm5byA5ZCv6L+Z5Liq6YCJ6aG55b6I5aSn56iL5bqm5LiK5Y+W5Yaz5LqO5L2g55qE5ri45oiP5ZKM6Z2i5ZCR55qE5bmz5Y+w44CCXG4gICAqIOWcqOWkp+WkmuaVsOaLpeaciSByZXRpbmEg57qn5Yir5bGP5bmV55qE6K6+5aSH5LiK55So5oi35b6A5b6A5peg5rOV5Yy65YiG6L+Z5Liq6YCJ6aG55bim5p2l55qE5Y+Y5YyW77yb5aaC5p6c5L2g55qE5ri45oiP6YCJ5oup5YOP57Sg6Im65pyv6aOO5qC877yM5L2g5Lmf5aSa5Y2K5LiN5Lya5oOz5byA5ZCv6L+Z5Liq6YCJ6aG544CCXG4gICAqIOWQjOaXtu+8jOWcqOWwkemDqOWIhuS9v+eUqOi9r+S7tue6p+WIq+aKl+mUr+m9v+eul+azleeahOiuvuWkh+aIlua1j+iniOWZqOS4iu+8jOi/meS4qumAiemhueS8muWvueaAp+iDveS6p+eUn+avlOi+g+Wkp+eahOW9seWTjeOAglxuICAgKiDkvaDlj6/ku6XlnKggYGNjLmdhbWUucnVuYCDkuYvliY3orr7nva7ov5nkuKrlgLzvvIzlkKbliJnlroPkuI3kvJrnlJ/mlYjjgIJcbiAgICog5LuF5pSv5oyBIFdlYlxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IEVOQUJMRV9XRUJHTF9BTlRJQUxJQVNcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIEVOQUJMRV9XRUJHTF9BTlRJQUxJQVM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiAhI2VuXG4gICAqIFdoZXRoZXIgb3Igbm90IGVuYWJsZSBhdXRvIGN1bGxpbmcuXG4gICAqIFRoaXMgZmVhdHVyZSBoYXZlIGJlZW4gcmVtb3ZlZCBpbiB2Mi4wIG5ldyByZW5kZXJlciBkdWUgdG8gb3ZlcmFsbCBwZXJmb3JtYW5jZSBjb25zdW1wdGlvbi5cbiAgICogV2UgaGF2ZSBubyBwbGFuIGN1cnJlbnRseSB0byByZS1lbmFibGUgYXV0byBjdWxsaW5nLlxuICAgKiBJZiB5b3VyIGdhbWUgaGF2ZSBtb3JlIGR5bmFtaWMgb2JqZWN0cywgd2Ugc3VnZ2VzdCB0byBkaXNhYmxlIGF1dG8gY3VsbGluZy5cbiAgICogSWYgeW91ciBnYW1lIGhhdmUgbW9yZSBzdGF0aWMgb2JqZWN0cywgd2Ugc3VnZ2VzdCB0byBlbmFibGUgYXV0byBjdWxsaW5nLlxuICAgKiAhI3poXG4gICAqIOaYr+WQpuW8gOWQr+iHquWKqOijgeWHj+WKn+iDve+8jOW8gOWQr+ijgeWHj+WKn+iDveWwhuS8muaKiuWcqOWxj+W5leWklueahOeJqeS9k+S7jua4suafk+mYn+WIl+S4reWOu+mZpOaOieOAglxuICAgKiDov5nkuKrlip/og73lnKggdjIuMCDnmoTmlrDmuLLmn5PlmajkuK3ooqvnp7vpmaTkuobvvIzlm6DkuLrlroPlnKjlpKflpJrmlbDmuLjmiI/kuK3miYDluKbmnaXnmoTmjZ/ogJfopoHpq5jkuo7mgKfog73nmoTmj5DljYfvvIznm67liY3miJHku6zmsqHmnInorqHliJLph43mlrDmlK/mjIHoh6rliqjoo4HliarjgIJcbiAgICog5aaC5p6c5ri45oiP5Lit55qE5Yqo5oCB54mp5L2T5q+U6L6D5aSa55qE6K+d77yM5bu66K6u5bCG5q2k6YCJ6aG55YWz6Zet44CCXG4gICAqIOWmguaenOa4uOaIj+S4reeahOmdmeaAgeeJqeS9k+avlOi+g+WkmueahOivne+8jOW7uuiuruWwhuatpOmAiemhueaJk+W8gOOAglxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IEVOQUJMRV9DVUxMSU5HXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIHYyLjBcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIEVOQUJMRV9DVUxMSU5HOiBmYWxzZSxcblxuICAvKipcbiAgICogISNlblxuICAgKiBXaGV0aGVyIG9yIG5vdCBjbGVhciBkb20gSW1hZ2Ugb2JqZWN0IGNhY2hlIGFmdGVyIHVwbG9hZGluZyB0byBnbCB0ZXh0dXJlLlxuICAgKiBDb25jcmV0ZWx5LCB3ZSBhcmUgc2V0dGluZyBpbWFnZS5zcmMgdG8gZW1wdHkgc3RyaW5nIHRvIHJlbGVhc2UgdGhlIGNhY2hlLlxuICAgKiBOb3JtYWxseSB5b3UgZG9uJ3QgbmVlZCB0byBlbmFibGUgdGhpcyBvcHRpb24sIGJlY2F1c2Ugb24gd2ViIHRoZSBJbWFnZSBvYmplY3QgZG9lc24ndCBjb25zdW1lIHRvbyBtdWNoIG1lbW9yeS5cbiAgICogQnV0IG9uIFdlQ2hhdCBHYW1lIHBsYXRmb3JtLCB0aGUgY3VycmVudCB2ZXJzaW9uIGNhY2hlIGRlY29kZWQgZGF0YSBpbiBJbWFnZSBvYmplY3QsIHdoaWNoIGhhcyBoaWdoIG1lbW9yeSB1c2FnZS5cbiAgICogU28gd2UgZW5hYmxlZCB0aGlzIG9wdGlvbiBieSBkZWZhdWx0IG9uIFdlQ2hhdCwgc28gdGhhdCB3ZSBjYW4gcmVsZWFzZSBJbWFnZSBjYWNoZSBpbW1lZGlhdGVseSBhZnRlciB1cGxvYWRlZCB0byBHUFUuXG4gICAqICEjemhcbiAgICog5piv5ZCm5Zyo5bCG6LS05Zu+5LiK5Lyg6IezIEdQVSDkuYvlkI7liKDpmaQgRE9NIEltYWdlIOe8k+WtmOOAglxuICAgKiDlhbfkvZPmnaXor7TvvIzmiJHku6zpgJrov4forr7nva4gaW1hZ2Uuc3JjIOS4uuepuuWtl+espuS4suadpemHiuaUvui/memDqOWIhuWGheWtmOOAglxuICAgKiDmraPluLjmg4XlhrXkuIvvvIzkvaDkuI3pnIDopoHlvIDlkK/ov5nkuKrpgInpobnvvIzlm6DkuLrlnKggd2ViIOW5s+WPsO+8jEltYWdlIOWvueixoeaJgOWNoOeUqOeahOWGheWtmOW+iOWwj+OAglxuICAgKiDkvYbmmK/lnKjlvq7kv6HlsI/muLjmiI/lubPlj7DnmoTlvZPliY3niYjmnKzvvIxJbWFnZSDlr7nosaHkvJrnvJPlrZjop6PnoIHlkI7nmoTlm77niYfmlbDmja7vvIzlroPmiYDljaDnlKjnmoTlhoXlrZjnqbrpl7TlvojlpKfjgIJcbiAgICog5omA5Lul5oiR5Lus5Zyo5b6u5L+h5bmz5Y+w6buY6K6k5byA5ZCv5LqG6L+Z5Liq6YCJ6aG577yM6L+Z5qC35oiR5Lus5bCx5Y+v5Lul5Zyo5LiK5LygIEdMIOi0tOWbvuS5i+WQjueri+WNs+mHiuaUviBJbWFnZSDlr7nosaHnmoTlhoXlrZjvvIzpgb/lhY3ov4fpq5jnmoTlhoXlrZjljaDnlKjjgIJcbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBDTEVBTlVQX0lNQUdFX0NBQ0hFXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBDTEVBTlVQX0lNQUdFX0NBQ0hFOiBmYWxzZSxcblxuICAvKipcbiAgICogISNlblxuICAgKiBXaGV0aGVyIG9yIG5vdCBzaG93IG1lc2ggd2lyZSBmcmFtZS5cbiAgICogISN6aFxuICAgKiDmmK/lkKbmmL7npLrnvZHmoLznmoTnur/moYbjgIJcbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBTSE9XX01FU0hfV0lSRUZSQU1FXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBTSE9XX01FU0hfV0lSRUZSQU1FOiBmYWxzZSxcblxuICAvKipcbiAgICogISNlblxuICAgKiBTZXQgY2MuUm90YXRlVG8vY2MuUm90YXRlQnkgcm90YXRlIGRpcmVjdGlvbi5cbiAgICogSWYgbmVlZCBzZXQgcm90YXRlIHBvc2l0aXZlIGRpcmVjdGlvbiB0byBjb3VudGVyY2xvY2t3aXNlLCBwbGVhc2UgY2hhbmdlIHNldHRpbmcgdG8gOiBjYy5tYWNyby5ST1RBVEVfQUNUSU9OX0NDVyA9IHRydWU7XG4gICAqICEjemhcbiAgICog6K6+572uIGNjLlJvdGF0ZVRvL2NjLlJvdGF0ZUJ5IOeahOaXi+i9rOaWueWQkeOAglxuICAgKiDlpoLmnpzpnIDopoHorr7nva7ml4vovaznmoTmraPmlrnlkJHkuLrpgIbml7bpkojmlrnlkJHvvIzor7forr7nva7pgInpobnkuLrvvJogY2MubWFjcm8uUk9UQVRFX0FDVElPTl9DQ1cgPSB0cnVlO1xuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IFJPVEFURV9BQ1RJT05fQ0NXXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBST1RBVEVfQUNUSU9OX0NDVzogZmFsc2Vcbn07XG5cbnZhciBTVVBQT1JUX1RFWFRVUkVfRk9STUFUUyA9IFsnLmFzdGMnLCAnLnBrbScsICcucHZyJywgJy53ZWJwJywgJy5qcGcnLCAnLmpwZWcnLCAnLmJtcCcsICcucG5nJ107XG5cbi8qKlxuICogIWVuXG4gKiBUaGUgaW1hZ2UgZm9ybWF0IHN1cHBvcnRlZCBieSB0aGUgZW5naW5lIGRlZmF1bHRzLCBhbmQgdGhlIHN1cHBvcnRlZCBmb3JtYXRzIG1heSBkaWZmZXIgaW4gZGlmZmVyZW50IGJ1aWxkIHBsYXRmb3JtcyBhbmQgZGV2aWNlIHR5cGVzLlxuICogQ3VycmVudGx5IGFsbCBwbGF0Zm9ybSBhbmQgZGV2aWNlIHN1cHBvcnQgWycud2VicCcsICcuanBnJywgJy5qcGVnJywgJy5ibXAnLCAnLnBuZyddLCBUaGUgaU9TIG1vYmlsZSBwbGF0Zm9ybSBhbHNvIHN1cHBvcnRzIHRoZSBQVlIgZm9ybWF044CCXG4gKiAhemhcbiAqIOW8leaTjum7mOiupOaUr+aMgeeahOWbvueJh+agvOW8j++8jOaUr+aMgeeahOagvOW8j+WPr+iDveWcqOS4jeWQjOeahOaehOW7uuW5s+WPsOWSjOiuvuWkh+exu+Wei+S4iuacieaJgOW3ruWIq+OAglxuICog55uu5YmN5omA5pyJ5bmz5Y+w5ZKM6K6+5aSH5pSv5oyB55qE5qC85byP5pyJIFsnLndlYnAnLCAnLmpwZycsICcuanBlZycsICcuYm1wJywgJy5wbmcnXS4g5Y+m5aSWIElvcyDmiYvmnLrlubPlj7Dov5jpop3lpJbmlK/mjIHkuoYgUFZSIOagvOW8j+OAglxuICogQHByb3BlcnR5IHtbU3RyaW5nXX0gU1VQUE9SVF9URVhUVVJFX0ZPUk1BVFNcbiAqL1xuY2MubWFjcm8uU1VQUE9SVF9URVhUVVJFX0ZPUk1BVFMgPSBTVVBQT1JUX1RFWFRVUkVfRk9STUFUUztcblxuLyoqXG4gKiAhI2VuIEtleSBtYXAgZm9yIGtleWJvYXJkIGV2ZW50XG4gKiAhI3poIOmUruebmOS6i+S7tueahOaMiemUruWAvFxuICogQGVudW0gbWFjcm8uS0VZXG4gKiBAZXhhbXBsZSB7QGxpbmsgY29jb3MyZC9jb3JlL3BsYXRmb3JtL0NDQ29tbW9uL0tFWS5qc31cbiAqL1xuY2MubWFjcm8uS0VZID0ge1xuICAvKipcbiAgICogISNlbiBOb25lXG4gICAqICEjemgg5rKh5pyJ5YiG6YWNXG4gICAqIEBwcm9wZXJ0eSBub25lXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgbm9uZTogMCxcblxuICAvLyBhbmRyb2lkXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBiYWNrIGtleVxuICAgKiAhI3poIOi/lOWbnumUrlxuICAgKiBAcHJvcGVydHkgYmFja1xuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGJhY2s6IDYsXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBtZW51IGtleVxuICAgKiAhI3poIOiPnOWNlemUrlxuICAgKiBAcHJvcGVydHkgbWVudVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIG1lbnU6IDE4LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBiYWNrc3BhY2Uga2V5XG4gICAqICEjemgg6YCA5qC86ZSuXG4gICAqIEBwcm9wZXJ0eSBiYWNrc3BhY2VcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBiYWNrc3BhY2U6IDgsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIHRhYiBrZXlcbiAgICogISN6aCBUYWIg6ZSuXG4gICAqIEBwcm9wZXJ0eSB0YWJcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICB0YWI6IDksXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGVudGVyIGtleVxuICAgKiAhI3poIOWbnui9pumUrlxuICAgKiBAcHJvcGVydHkgZW50ZXJcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBlbnRlcjogMTMsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIHNoaWZ0IGtleVxuICAgKiAhI3poIFNoaWZ0IOmUrlxuICAgKiBAcHJvcGVydHkgc2hpZnRcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBzaGlmdDogMTYsIC8vc2hvdWxkIHVzZSBzaGlmdGtleSBpbnN0ZWFkXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGN0cmwga2V5XG4gICAqICEjemggQ3RybCDplK5cbiAgICogQHByb3BlcnR5IGN0cmxcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBjdHJsOiAxNywgLy9zaG91bGQgdXNlIGN0cmxrZXlcblxuICAvKipcbiAgICogISNlbiBUaGUgYWx0IGtleVxuICAgKiAhI3poIEFsdCDplK5cbiAgICogQHByb3BlcnR5IGFsdFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGFsdDogMTgsIC8vc2hvdWxkIHVzZSBhbHRrZXlcblxuICAvKipcbiAgICogISNlbiBUaGUgcGF1c2Uga2V5XG4gICAqICEjemgg5pqC5YGc6ZSuXG4gICAqIEBwcm9wZXJ0eSBwYXVzZVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHBhdXNlOiAxOSxcblxuICAvKipcbiAgICogISNlbiBUaGUgY2FwcyBsb2NrIGtleVxuICAgKiAhI3poIOWkp+WGmemUgeWumumUrlxuICAgKiBAcHJvcGVydHkgY2Fwc2xvY2tcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBjYXBzbG9jazogMjAsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGVzYyBrZXlcbiAgICogISN6aCBFU0Mg6ZSuXG4gICAqIEBwcm9wZXJ0eSBlc2NhcGVcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBlc2NhcGU6IDI3LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBzcGFjZSBrZXlcbiAgICogISN6aCDnqbrmoLzplK5cbiAgICogQHByb3BlcnR5IHNwYWNlXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgc3BhY2U6IDMyLFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBwYWdlIHVwIGtleVxuICAgKiAhI3poIOWQkeS4iue/u+mhtemUrlxuICAgKiBAcHJvcGVydHkgcGFnZXVwXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgcGFnZXVwOiAzMyxcblxuICAvKipcbiAgICogISNlbiBUaGUgcGFnZSBkb3duIGtleVxuICAgKiAhI3poIOWQkeS4i+e/u+mhtemUrlxuICAgKiBAcHJvcGVydHkgcGFnZWRvd25cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBwYWdlZG93bjogMzQsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGVuZCBrZXlcbiAgICogISN6aCDnu5PmnZ/plK5cbiAgICogQHByb3BlcnR5IGVuZFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGVuZDogMzUsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGhvbWUga2V5XG4gICAqICEjemgg5Li76I+c5Y2V6ZSuXG4gICAqIEBwcm9wZXJ0eSBob21lXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgaG9tZTogMzYsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGxlZnQga2V5XG4gICAqICEjemgg5ZCR5bem566t5aS06ZSuXG4gICAqIEBwcm9wZXJ0eSBsZWZ0XG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgbGVmdDogMzcsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIHVwIGtleVxuICAgKiAhI3poIOWQkeS4iueureWktOmUrlxuICAgKiBAcHJvcGVydHkgdXBcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICB1cDogMzgsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIHJpZ2h0IGtleVxuICAgKiAhI3poIOWQkeWPs+eureWktOmUrlxuICAgKiBAcHJvcGVydHkgcmlnaHRcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICByaWdodDogMzksXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGRvd24ga2V5XG4gICAqICEjemgg5ZCR5LiL566t5aS06ZSuXG4gICAqIEBwcm9wZXJ0eSBkb3duXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZG93bjogNDAsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIHNlbGVjdCBrZXlcbiAgICogISN6aCBTZWxlY3Qg6ZSuXG4gICAqIEBwcm9wZXJ0eSBzZWxlY3RcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBzZWxlY3Q6IDQxLFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBpbnNlcnQga2V5XG4gICAqICEjemgg5o+S5YWl6ZSuXG4gICAqIEBwcm9wZXJ0eSBpbnNlcnRcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBpbnNlcnQ6IDQ1LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBEZWxldGUga2V5XG4gICAqICEjemgg5Yig6Zmk6ZSuXG4gICAqIEBwcm9wZXJ0eSBEZWxldGVcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBEZWxldGU6IDQ2LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSAnMCcga2V5IG9uIHRoZSB0b3Agb2YgdGhlIGFscGhhbnVtZXJpYyBrZXlib2FyZC5cbiAgICogISN6aCDlrZfmr43plK7nm5jkuIrnmoQgMCDplK5cbiAgICogQHByb3BlcnR5IDBcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICAwOiA0OCxcblxuICAvKipcbiAgICogISNlbiBUaGUgJzEnIGtleSBvbiB0aGUgdG9wIG9mIHRoZSBhbHBoYW51bWVyaWMga2V5Ym9hcmQuXG4gICAqICEjemgg5a2X5q+N6ZSu55uY5LiK55qEIDEg6ZSuXG4gICAqIEBwcm9wZXJ0eSAxXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgMTogNDksXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlICcyJyBrZXkgb24gdGhlIHRvcCBvZiB0aGUgYWxwaGFudW1lcmljIGtleWJvYXJkLlxuICAgKiAhI3poIOWtl+avjemUruebmOS4iueahCAyIOmUrlxuICAgKiBAcHJvcGVydHkgMlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIDI6IDUwLFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSAnMycga2V5IG9uIHRoZSB0b3Agb2YgdGhlIGFscGhhbnVtZXJpYyBrZXlib2FyZC5cbiAgICogISN6aCDlrZfmr43plK7nm5jkuIrnmoQgMyDplK5cbiAgICogQHByb3BlcnR5IDNcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICAzOiA1MSxcblxuICAvKipcbiAgICogISNlbiBUaGUgJzQnIGtleSBvbiB0aGUgdG9wIG9mIHRoZSBhbHBoYW51bWVyaWMga2V5Ym9hcmQuXG4gICAqICEjemgg5a2X5q+N6ZSu55uY5LiK55qEIDQg6ZSuXG4gICAqIEBwcm9wZXJ0eSA0XG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgNDogNTIsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlICc1JyBrZXkgb24gdGhlIHRvcCBvZiB0aGUgYWxwaGFudW1lcmljIGtleWJvYXJkLlxuICAgKiAhI3poIOWtl+avjemUruebmOS4iueahCA1IOmUrlxuICAgKiBAcHJvcGVydHkgNVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIDU6IDUzLFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSAnNicga2V5IG9uIHRoZSB0b3Agb2YgdGhlIGFscGhhbnVtZXJpYyBrZXlib2FyZC5cbiAgICogISN6aCDlrZfmr43plK7nm5jkuIrnmoQgNiDplK5cbiAgICogQHByb3BlcnR5IDZcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICA2OiA1NCxcblxuICAvKipcbiAgICogISNlbiBUaGUgJzcnIGtleSBvbiB0aGUgdG9wIG9mIHRoZSBhbHBoYW51bWVyaWMga2V5Ym9hcmQuXG4gICAqICEjemgg5a2X5q+N6ZSu55uY5LiK55qEIDcg6ZSuXG4gICAqIEBwcm9wZXJ0eSA3XG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgNzogNTUsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlICc4JyBrZXkgb24gdGhlIHRvcCBvZiB0aGUgYWxwaGFudW1lcmljIGtleWJvYXJkLlxuICAgKiAhI3poIOWtl+avjemUruebmOS4iueahCA4IOmUrlxuICAgKiBAcHJvcGVydHkgOFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIDg6IDU2LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSAnOScga2V5IG9uIHRoZSB0b3Agb2YgdGhlIGFscGhhbnVtZXJpYyBrZXlib2FyZC5cbiAgICogISN6aCDlrZfmr43plK7nm5jkuIrnmoQgOSDplK5cbiAgICogQHByb3BlcnR5IDlcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICA5OiA1NyxcblxuICAvKipcbiAgICogISNlbiBUaGUgYSBrZXlcbiAgICogISN6aCBBIOmUrlxuICAgKiBAcHJvcGVydHkgYVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGE6IDY1LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBiIGtleVxuICAgKiAhI3poIEIg6ZSuXG4gICAqIEBwcm9wZXJ0eSBiXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgYjogNjYsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGMga2V5XG4gICAqICEjemggQyDplK5cbiAgICogQHByb3BlcnR5IGNcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBjOiA2NyxcblxuICAvKipcbiAgICogISNlbiBUaGUgZCBrZXlcbiAgICogISN6aCBEIOmUrlxuICAgKiBAcHJvcGVydHkgZFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGQ6IDY4LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBlIGtleVxuICAgKiAhI3poIEUg6ZSuXG4gICAqIEBwcm9wZXJ0eSBlXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZTogNjksXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGYga2V5XG4gICAqICEjemggRiDplK5cbiAgICogQHByb3BlcnR5IGZcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBmOiA3MCxcblxuICAvKipcbiAgICogISNlbiBUaGUgZyBrZXlcbiAgICogISN6aCBHIOmUrlxuICAgKiBAcHJvcGVydHkgZ1xuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGc6IDcxLFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBoIGtleVxuICAgKiAhI3poIEgg6ZSuXG4gICAqIEBwcm9wZXJ0eSBoXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgaDogNzIsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGkga2V5XG4gICAqICEjemggSSDplK5cbiAgICogQHByb3BlcnR5IGlcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBpOiA3MyxcblxuICAvKipcbiAgICogISNlbiBUaGUgaiBrZXlcbiAgICogISN6aCBKIOmUrlxuICAgKiBAcHJvcGVydHkgalxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGo6IDc0LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBrIGtleVxuICAgKiAhI3poIEsg6ZSuXG4gICAqIEBwcm9wZXJ0eSBrXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgazogNzUsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGwga2V5XG4gICAqICEjemggTCDplK5cbiAgICogQHByb3BlcnR5IGxcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBsOiA3NixcblxuICAvKipcbiAgICogISNlbiBUaGUgbSBrZXlcbiAgICogISN6aCBNIOmUrlxuICAgKiBAcHJvcGVydHkgbVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIG06IDc3LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBuIGtleVxuICAgKiAhI3poIE4g6ZSuXG4gICAqIEBwcm9wZXJ0eSBuXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgbjogNzgsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIG8ga2V5XG4gICAqICEjemggTyDplK5cbiAgICogQHByb3BlcnR5IG9cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBvOiA3OSxcblxuICAvKipcbiAgICogISNlbiBUaGUgcCBrZXlcbiAgICogISN6aCBQIOmUrlxuICAgKiBAcHJvcGVydHkgcFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHA6IDgwLFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBxIGtleVxuICAgKiAhI3poIFEg6ZSuXG4gICAqIEBwcm9wZXJ0eSBxXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgcTogODEsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIHIga2V5XG4gICAqICEjemggUiDplK5cbiAgICogQHByb3BlcnR5IHJcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICByOiA4MixcblxuICAvKipcbiAgICogISNlbiBUaGUgcyBrZXlcbiAgICogISN6aCBTIOmUrlxuICAgKiBAcHJvcGVydHkgc1xuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHM6IDgzLFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSB0IGtleVxuICAgKiAhI3poIFQg6ZSuXG4gICAqIEBwcm9wZXJ0eSB0XG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgdDogODQsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIHUga2V5XG4gICAqICEjemggVSDplK5cbiAgICogQHByb3BlcnR5IHVcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICB1OiA4NSxcblxuICAvKipcbiAgICogISNlbiBUaGUgdiBrZXlcbiAgICogISN6aCBWIOmUrlxuICAgKiBAcHJvcGVydHkgdlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHY6IDg2LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSB3IGtleVxuICAgKiAhI3poIFcg6ZSuXG4gICAqIEBwcm9wZXJ0eSB3XG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgdzogODcsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIHgga2V5XG4gICAqICEjemggWCDplK5cbiAgICogQHByb3BlcnR5IHhcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICB4OiA4OCxcblxuICAvKipcbiAgICogISNlbiBUaGUgeSBrZXlcbiAgICogISN6aCBZIOmUrlxuICAgKiBAcHJvcGVydHkgeVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIHk6IDg5LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSB6IGtleVxuICAgKiAhI3poIFog6ZSuXG4gICAqIEBwcm9wZXJ0eSB6XG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgejogOTAsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIG51bWVyaWMga2V5cGFkIDBcbiAgICogISN6aCDmlbDlrZfplK7nm5ggMFxuICAgKiBAcHJvcGVydHkgbnVtMFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIG51bTA6IDk2LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBudW1lcmljIGtleXBhZCAxXG4gICAqICEjemgg5pWw5a2X6ZSu55uYIDFcbiAgICogQHByb3BlcnR5IG51bTFcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBudW0xOiA5NyxcblxuICAvKipcbiAgICogISNlbiBUaGUgbnVtZXJpYyBrZXlwYWQgMlxuICAgKiAhI3poIOaVsOWtl+mUruebmCAyXG4gICAqIEBwcm9wZXJ0eSBudW0yXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgbnVtMjogOTgsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIG51bWVyaWMga2V5cGFkIDNcbiAgICogISN6aCDmlbDlrZfplK7nm5ggM1xuICAgKiBAcHJvcGVydHkgbnVtM1xuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIG51bTM6IDk5LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBudW1lcmljIGtleXBhZCA0XG4gICAqICEjemgg5pWw5a2X6ZSu55uYIDRcbiAgICogQHByb3BlcnR5IG51bTRcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBudW00OiAxMDAsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIG51bWVyaWMga2V5cGFkIDVcbiAgICogISN6aCDmlbDlrZfplK7nm5ggNVxuICAgKiBAcHJvcGVydHkgbnVtNVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIG51bTU6IDEwMSxcblxuICAvKipcbiAgICogISNlbiBUaGUgbnVtZXJpYyBrZXlwYWQgNlxuICAgKiAhI3poIOaVsOWtl+mUruebmCA2XG4gICAqIEBwcm9wZXJ0eSBudW02XG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgbnVtNjogMTAyLFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBudW1lcmljIGtleXBhZCA3XG4gICAqICEjemgg5pWw5a2X6ZSu55uYIDdcbiAgICogQHByb3BlcnR5IG51bTdcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBudW03OiAxMDMsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIG51bWVyaWMga2V5cGFkIDhcbiAgICogISN6aCDmlbDlrZfplK7nm5ggOFxuICAgKiBAcHJvcGVydHkgbnVtOFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIG51bTg6IDEwNCxcblxuICAvKipcbiAgICogISNlbiBUaGUgbnVtZXJpYyBrZXlwYWQgOVxuICAgKiAhI3poIOaVsOWtl+mUruebmCA5XG4gICAqIEBwcm9wZXJ0eSBudW05XG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgbnVtOTogMTA1LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBudW1lcmljIGtleXBhZCAnKidcbiAgICogISN6aCDmlbDlrZfplK7nm5ggKlxuICAgKiBAcHJvcGVydHkgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gICcqJzogMTA2LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBudW1lcmljIGtleXBhZCAnKydcbiAgICogISN6aCDmlbDlrZfplK7nm5ggK1xuICAgKiBAcHJvcGVydHkgK1xuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gICcrJzogMTA3LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBudW1lcmljIGtleXBhZCAnLSdcbiAgICogISN6aCDmlbDlrZfplK7nm5ggLVxuICAgKiBAcHJvcGVydHkgLVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gICctJzogMTA5LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBudW1lcmljIGtleXBhZCAnZGVsZXRlJ1xuICAgKiAhI3poIOaVsOWtl+mUruebmOWIoOmZpOmUrlxuICAgKiBAcHJvcGVydHkgbnVtZGVsXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgJ251bWRlbCc6IDExMCxcblxuICAvKipcbiAgICogISNlbiBUaGUgbnVtZXJpYyBrZXlwYWQgJy8nXG4gICAqICEjemgg5pWw5a2X6ZSu55uYIC9cbiAgICogQHByb3BlcnR5IC9cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICAnLyc6IDExMSxcblxuICAvKipcbiAgICogISNlbiBUaGUgRjEgZnVuY3Rpb24ga2V5XG4gICAqICEjemggRjEg5Yqf6IO96ZSuXG4gICAqIEBwcm9wZXJ0eSBmMVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGYxOiAxMTIsIC8vZjEtZjEyIGRvbnQgd29yayBvbiBpZVxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBGMiBmdW5jdGlvbiBrZXlcbiAgICogISN6aCBGMiDlip/og73plK5cbiAgICogQHByb3BlcnR5IGYyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZjI6IDExMyxcblxuICAvKipcbiAgICogISNlbiBUaGUgRjMgZnVuY3Rpb24ga2V5XG4gICAqICEjemggRjMg5Yqf6IO96ZSuXG4gICAqIEBwcm9wZXJ0eSBmM1xuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGYzOiAxMTQsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIEY0IGZ1bmN0aW9uIGtleVxuICAgKiAhI3poIEY0IOWKn+iDvemUrlxuICAgKiBAcHJvcGVydHkgZjRcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBmNDogMTE1LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBGNSBmdW5jdGlvbiBrZXlcbiAgICogISN6aCBGNSDlip/og73plK5cbiAgICogQHByb3BlcnR5IGY1XG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZjU6IDExNixcblxuICAvKipcbiAgICogISNlbiBUaGUgRjYgZnVuY3Rpb24ga2V5XG4gICAqICEjemggRjYg5Yqf6IO96ZSuXG4gICAqIEBwcm9wZXJ0eSBmNlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGY2OiAxMTcsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIEY3IGZ1bmN0aW9uIGtleVxuICAgKiAhI3poIEY3IOWKn+iDvemUrlxuICAgKiBAcHJvcGVydHkgZjdcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBmNzogMTE4LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBGOCBmdW5jdGlvbiBrZXlcbiAgICogISN6aCBGOCDlip/og73plK5cbiAgICogQHByb3BlcnR5IGY4XG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZjg6IDExOSxcblxuICAvKipcbiAgICogISNlbiBUaGUgRjkgZnVuY3Rpb24ga2V5XG4gICAqICEjemggRjkg5Yqf6IO96ZSuXG4gICAqIEBwcm9wZXJ0eSBmOVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGY5OiAxMjAsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIEYxMCBmdW5jdGlvbiBrZXlcbiAgICogISN6aCBGMTAg5Yqf6IO96ZSuXG4gICAqIEBwcm9wZXJ0eSBmMTBcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBmMTA6IDEyMSxcblxuICAvKipcbiAgICogISNlbiBUaGUgRjExIGZ1bmN0aW9uIGtleVxuICAgKiAhI3poIEYxMSDlip/og73plK5cbiAgICogQHByb3BlcnR5IGYxMVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGYxMTogMTIyLFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBGMTIgZnVuY3Rpb24ga2V5XG4gICAqICEjemggRjEyIOWKn+iDvemUrlxuICAgKiBAcHJvcGVydHkgZjEyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZjEyOiAxMjMsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIG51bWxvY2sga2V5XG4gICAqICEjemgg5pWw5a2X6ZSB5a6a6ZSuXG4gICAqIEBwcm9wZXJ0eSBudW1sb2NrXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgbnVtbG9jazogMTQ0LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBzY3JvbGwgbG9jayBrZXlcbiAgICogISN6aCDmu5rliqjplIHlrprplK5cbiAgICogQHByb3BlcnR5IHNjcm9sbGxvY2tcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBzY3JvbGxsb2NrOiAxNDUsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlICc7JyBrZXkuXG4gICAqICEjemgg5YiG5Y+36ZSuXG4gICAqIEBwcm9wZXJ0eSA7XG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgJzsnOiAxODYsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlICc7JyBrZXkuXG4gICAqICEjemgg5YiG5Y+36ZSuXG4gICAqIEBwcm9wZXJ0eSBzZW1pY29sb25cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBzZW1pY29sb246IDE4NixcblxuICAvKipcbiAgICogISNlbiBUaGUgJz0nIGtleS5cbiAgICogISN6aCDnrYnkuo7lj7fplK5cbiAgICogQHByb3BlcnR5IGVxdWFsXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZXF1YWw6IDE4NyxcblxuICAvKipcbiAgICogISNlbiBUaGUgJz0nIGtleS5cbiAgICogISN6aCDnrYnkuo7lj7fplK5cbiAgICogQHByb3BlcnR5ID1cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICAnPSc6IDE4NyxcblxuICAvKipcbiAgICogISNlbiBUaGUgJywnIGtleS5cbiAgICogISN6aCDpgJflj7fplK5cbiAgICogQHByb3BlcnR5ICxcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICAnLCc6IDE4OCxcblxuICAvKipcbiAgICogISNlbiBUaGUgJywnIGtleS5cbiAgICogISN6aCDpgJflj7fplK5cbiAgICogQHByb3BlcnR5IGNvbW1hXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgY29tbWE6IDE4OCxcblxuICAvKipcbiAgICogISNlbiBUaGUgZGFzaCAnLScga2V5LlxuICAgKiAhI3poIOS4reWIkue6v+mUrlxuICAgKiBAcHJvcGVydHkgZGFzaFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGRhc2g6IDE4OSxcblxuICAvKipcbiAgICogISNlbiBUaGUgJy4nIGtleS5cbiAgICogISN6aCDlj6Xlj7fplK5cbiAgICogQHByb3BlcnR5IC5cbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICAnLic6IDE5MCxcblxuICAvKipcbiAgICogISNlbiBUaGUgJy4nIGtleVxuICAgKiAhI3poIOWPpeWPt+mUrlxuICAgKiBAcHJvcGVydHkgcGVyaW9kXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgcGVyaW9kOiAxOTAsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGZvcndhcmQgc2xhc2gga2V5XG4gICAqICEjemgg5q2j5pac5p2g6ZSuXG4gICAqIEBwcm9wZXJ0eSBmb3J3YXJkc2xhc2hcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBmb3J3YXJkc2xhc2g6IDE5MSxcblxuICAvKipcbiAgICogISNlbiBUaGUgZ3JhdmUga2V5XG4gICAqICEjemgg5oyJ6ZSuIGBcbiAgICogQHByb3BlcnR5IGdyYXZlXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ3JhdmU6IDE5MixcblxuICAvKipcbiAgICogISNlbiBUaGUgJ1snIGtleVxuICAgKiAhI3poIOaMiemUriBbXG4gICAqIEBwcm9wZXJ0eSBbXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgJ1snOiAyMTksXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlICdbJyBrZXlcbiAgICogISN6aCDmjInplK4gW1xuICAgKiBAcHJvcGVydHkgb3BlbmJyYWNrZXRcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBvcGVuYnJhY2tldDogMjE5LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSAnXFwnIGtleVxuICAgKiAhI3poIOWPjeaWnOadoOmUrlxuICAgKiBAcHJvcGVydHkgYmFja3NsYXNoXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgYmFja3NsYXNoOiAyMjAsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlICddJyBrZXlcbiAgICogISN6aCDmjInplK4gXVxuICAgKiBAcHJvcGVydHkgXVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gICddJzogMjIxLFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSAnXScga2V5XG4gICAqICEjemgg5oyJ6ZSuIF1cbiAgICogQHByb3BlcnR5IGNsb3NlYnJhY2tldFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGNsb3NlYnJhY2tldDogMjIxLFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBxdW90ZSBrZXlcbiAgICogISN6aCDljZXlvJXlj7fplK5cbiAgICogQHByb3BlcnR5IHF1b3RlXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgcXVvdGU6IDIyMixcblxuICAvLyBnYW1lcGFkIGNvbnRyb2xsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGRwYWQgbGVmdCBrZXlcbiAgICogISN6aCDlr7zoiKrplK4g5ZCR5bemXG4gICAqIEBwcm9wZXJ0eSBkcGFkTGVmdFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGRwYWRMZWZ0OiAxMDAwLFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBkcGFkIHJpZ2h0IGtleVxuICAgKiAhI3poIOWvvOiIqumUriDlkJHlj7NcbiAgICogQHByb3BlcnR5IGRwYWRSaWdodFxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGRwYWRSaWdodDogMTAwMSxcblxuICAvKipcbiAgICogISNlbiBUaGUgZHBhZCB1cCBrZXlcbiAgICogISN6aCDlr7zoiKrplK4g5ZCR5LiKXG4gICAqIEBwcm9wZXJ0eSBkcGFkVXBcbiAgICogQHR5cGUge051bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBkcGFkVXA6IDEwMDMsXG5cbiAgLyoqXG4gICAqICEjZW4gVGhlIGRwYWQgZG93biBrZXlcbiAgICogISN6aCDlr7zoiKrplK4g5ZCR5LiLXG4gICAqIEBwcm9wZXJ0eSBkcGFkRG93blxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGRwYWREb3duOiAxMDA0LFxuXG4gIC8qKlxuICAgKiAhI2VuIFRoZSBkcGFkIGNlbnRlciBrZXlcbiAgICogISN6aCDlr7zoiKrplK4g56Gu5a6a6ZSuXG4gICAqIEBwcm9wZXJ0eSBkcGFkQ2VudGVyXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZHBhZENlbnRlcjogMTAwNVxufTtcblxuLyoqXG4gKiBJbWFnZSBmb3JtYXRzXG4gKiBAZW51bSBtYWNyby5JbWFnZUZvcm1hdFxuICovXG5jYy5tYWNyby5JbWFnZUZvcm1hdCA9IGNjLkVudW0oe1xuICAvKipcbiAgICogSW1hZ2UgRm9ybWF0OkpQR1xuICAgKiBAcHJvcGVydHkgSlBHXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBKUEc6IDAsXG4gIC8qKlxuICAgKiBJbWFnZSBGb3JtYXQ6UE5HXG4gICAqIEBwcm9wZXJ0eSBQTkdcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIFBORzogMSxcbiAgLyoqXG4gICAqIEltYWdlIEZvcm1hdDpUSUZGXG4gICAqIEBwcm9wZXJ0eSBUSUZGXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBUSUZGOiAyLFxuICAvKipcbiAgICogSW1hZ2UgRm9ybWF0OldFQlBcbiAgICogQHByb3BlcnR5IFdFQlBcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIFdFQlA6IDMsXG4gIC8qKlxuICAgKiBJbWFnZSBGb3JtYXQ6UFZSXG4gICAqIEBwcm9wZXJ0eSBQVlJcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIFBWUjogNCxcbiAgLyoqXG4gICAqIEltYWdlIEZvcm1hdDpFVENcbiAgICogQHByb3BlcnR5IEVUQ1xuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgRVRDOiA1LFxuICAvKipcbiAgICogSW1hZ2UgRm9ybWF0OlMzVENcbiAgICogQHByb3BlcnR5IFMzVENcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIFMzVEM6IDYsXG4gIC8qKlxuICAgKiBJbWFnZSBGb3JtYXQ6QVRJVENcbiAgICogQHByb3BlcnR5IEFUSVRDXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqL1xuICBBVElUQzogNyxcbiAgLyoqXG4gICAqIEltYWdlIEZvcm1hdDpUR0FcbiAgICogQHByb3BlcnR5IFRHQVxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgVEdBOiA4LFxuICAvKipcbiAgICogSW1hZ2UgRm9ybWF0OlJBV0RBVEFcbiAgICogQHByb3BlcnR5IFJBV0RBVEFcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIFJBV0RBVEE6IDksXG4gIC8qKlxuICAgKiBJbWFnZSBGb3JtYXQ6VU5LTk9XTlxuICAgKiBAcHJvcGVydHkgVU5LTk9XTlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgVU5LTk9XTjogMTBcbn0pO1xuXG4vKipcbiAqICEjZW5cbiAqIEVudW0gZm9yIGJsZW5kIGZhY3RvclxuICogUmVmZXIgdG86IGh0dHA6Ly93d3cuYW5kZXJzcmlnZ2Vsc2VuLmRrL2dsYmxlbmRmdW5jLnBocFxuICogISN6aFxuICog5re35ZCI5Zug5a2QXG4gKiDlj6/lj4LogIM6IGh0dHA6Ly93d3cuYW5kZXJzcmlnZ2Vsc2VuLmRrL2dsYmxlbmRmdW5jLnBocFxuICogQGVudW0gbWFjcm8uQmxlbmRGYWN0b3JcbiAqL1xuY2MubWFjcm8uQmxlbmRGYWN0b3IgPSBjYy5FbnVtKHtcbiAgLyoqXG4gICAqICEjZW4gQWxsIHVzZVxuICAgKiAhI3poIOWFqOmDqOS9v+eUqFxuICAgKiBAcHJvcGVydHkge051bWJlcn0gT05FXG4gICAqL1xuICBPTkU6IDEsIC8vY2MubWFjcm8uT05FXG4gIC8qKlxuICAgKiAhI2VuIE5vdCBhbGxcbiAgICogISN6aCDlhajpg6jkuI3nlKhcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFpFUk9cbiAgICovXG4gIFpFUk86IDAsIC8vY2MuWkVST1xuICAvKipcbiAgICogISNlbiBVc2luZyB0aGUgc291cmNlIGFscGhhXG4gICAqICEjemgg5L2/55So5rqQ6aKc6Imy55qE6YCP5piO5bqmXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBTUkNfQUxQSEFcbiAgICovXG4gIFNSQ19BTFBIQTogMHgzMDIsIC8vY2MuU1JDX0FMUEhBXG4gIC8qKlxuICAgKiAhI2VuIFVzaW5nIHRoZSBzb3VyY2UgY29sb3JcbiAgICogISN6aCDkvb/nlKjmupDpopzoibJcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFNSQ19DT0xPUlxuICAgKi9cbiAgU1JDX0NPTE9SOiAweDMwMCwgLy9jYy5TUkNfQ09MT1JcbiAgLyoqXG4gICAqICEjZW4gVXNpbmcgdGhlIHRhcmdldCBhbHBoYVxuICAgKiAhI3poIOS9v+eUqOebruagh+minOiJsueahOmAj+aYjuW6plxuICAgKiBAcHJvcGVydHkge051bWJlcn0gRFNUX0FMUEhBXG4gICAqL1xuICBEU1RfQUxQSEE6IDB4MzA0LCAvL2NjLkRTVF9BTFBIQVxuICAvKipcbiAgICogISNlbiBVc2luZyB0aGUgdGFyZ2V0IGNvbG9yXG4gICAqICEjemgg5L2/55So55uu5qCH6aKc6ImyXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBEU1RfQ09MT1JcbiAgICovXG4gIERTVF9DT0xPUjogMHgzMDYsIC8vY2MuRFNUX0NPTE9SXG4gIC8qKlxuICAgKiAhI2VuIE1pbnVzIHRoZSBzb3VyY2UgYWxwaGFcbiAgICogISN6aCDlh4/ljrvmupDpopzoibLnmoTpgI/mmI7luqZcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IE9ORV9NSU5VU19TUkNfQUxQSEFcbiAgICovXG4gIE9ORV9NSU5VU19TUkNfQUxQSEE6IDB4MzAzLCAvL2NjLk9ORV9NSU5VU19TUkNfQUxQSEFcbiAgLyoqXG4gICAqICEjZW4gTWludXMgdGhlIHNvdXJjZSBjb2xvclxuICAgKiAhI3poIOWHj+WOu+a6kOminOiJslxuICAgKiBAcHJvcGVydHkge051bWJlcn0gT05FX01JTlVTX1NSQ19DT0xPUlxuICAgKi9cbiAgT05FX01JTlVTX1NSQ19DT0xPUjogMHgzMDEsIC8vY2MuT05FX01JTlVTX1NSQ19DT0xPUlxuICAvKipcbiAgICogISNlbiBNaW51cyB0aGUgdGFyZ2V0IGFscGhhXG4gICAqICEjemgg5YeP5Y6755uu5qCH6aKc6Imy55qE6YCP5piO5bqmXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBPTkVfTUlOVVNfRFNUX0FMUEhBXG4gICAqL1xuICBPTkVfTUlOVVNfRFNUX0FMUEhBOiAweDMwNSwgLy9jYy5PTkVfTUlOVVNfRFNUX0FMUEhBXG4gIC8qKlxuICAgKiAhI2VuIE1pbnVzIHRoZSB0YXJnZXQgY29sb3JcbiAgICogISN6aCDlh4/ljrvnm67moIfpopzoibJcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IE9ORV9NSU5VU19EU1RfQ09MT1JcbiAgICovXG4gIE9ORV9NSU5VU19EU1RfQ09MT1I6IDB4MzA3IC8vY2MuT05FX01JTlVTX0RTVF9DT0xPUlxufSk7XG5cbi8qKlxuICogQGVudW0gbWFjcm8uVGV4dEFsaWdubWVudFxuICovXG5jYy5tYWNyby5UZXh0QWxpZ25tZW50ID0gY2MuRW51bSh7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gTEVGVFxuICAgKi9cbiAgTEVGVDogMCxcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBDRU5URVJcbiAgICovXG4gIENFTlRFUjogMSxcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBSSUdIVFxuICAgKi9cbiAgUklHSFQ6IDJcbn0pO1xuXG4vKipcbiAqIEBlbnVtIFZlcnRpY2FsVGV4dEFsaWdubWVudFxuICovXG5jYy5tYWNyby5WZXJ0aWNhbFRleHRBbGlnbm1lbnQgPSBjYy5FbnVtKHtcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBUT1BcbiAgICovXG4gIFRPUDogMCxcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBDRU5URVJcbiAgICovXG4gIENFTlRFUjogMSxcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBCT1RUT01cbiAgICovXG4gIEJPVFRPTTogMlxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2MubWFjcm87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EVFdGamNtOHVhbk1pWFN3aWJtRnRaWE1pT2xzaWFuTWlMQ0p5WlhGMWFYSmxJaXdpWTJNaUxDSnRZV055YnlJc0lsSkJSQ0lzSWsxaGRHZ2lMQ0pRU1NJc0lrUkZSeUlzSWxKRlVFVkJWRjlHVDFKRlZrVlNJaXdpVG5WdFltVnlJaXdpVFVGWVgxWkJURlZGSWl3aVJreFVYMFZRVTBsTVQwNGlMQ0pOU1U1ZldrbE9SRVZZSWl3aWNHOTNJaXdpVFVGWVgxcEpUa1JGV0NJc0lrOU9SU0lzSWxwRlVrOGlMQ0pUVWtOZlFVeFFTRUVpTENKVFVrTmZRVXhRU0VGZlUwRlVWVkpCVkVVaUxDSlRVa05mUTA5TVQxSWlMQ0pFVTFSZlFVeFFTRUVpTENKRVUxUmZRMDlNVDFJaUxDSlBUa1ZmVFVsT1ZWTmZVMUpEWDBGTVVFaEJJaXdpVDA1RlgwMUpUbFZUWDFOU1ExOURUMHhQVWlJc0lrOU9SVjlOU1U1VlUxOUVVMVJmUVV4UVNFRWlMQ0pQVGtWZlRVbE9WVk5mUkZOVVgwTlBURTlTSWl3aVQwNUZYMDFKVGxWVFgwTlBUbE5VUVU1VVgwRk1VRWhCSWl3aVQwNUZYMDFKVGxWVFgwTlBUbE5VUVU1VVgwTlBURTlTSWl3aVQxSkpSVTVVUVZSSlQwNWZVRTlTVkZKQlNWUWlMQ0pQVWtsRlRsUkJWRWxQVGw5TVFVNUVVME5CVUVVaUxDSlBVa2xGVGxSQlZFbFBUbDlCVlZSUElpd2lSRVZPVTBsVVdVUlFTVjlFUlZaSlEwVWlMQ0pFUlU1VFNWUlpSRkJKWDBoSlIwZ2lMQ0pFUlU1VFNWUlpSRkJKWDAxRlJFbFZUU0lzSWtSRlRsTkpWRmxFVUVsZlRFOVhJaXdpUmtsWVgwRlNWRWxHUVVOVVUxOUNXVjlUVkZKRlEwaEpUa2RmVkVWWVJVeGZWRTFZSWl3aVJFbFNSVU5VVDFKZlUxUkJWRk5mVUU5VFNWUkpUMDRpTENKMk1pSXNJa1ZPUVVKTVJWOVRWRUZEUzBGQ1RFVmZRVU5VU1U5T1V5SXNJbFJQVlVOSVgxUkpUVVZQVlZRaUxDSkNRVlJEU0Y5V1JWSlVSVmhmUTA5VlRsUWlMQ0pGVGtGQ1RFVmZWRWxNUlVSTlFWQmZRMVZNVEVsT1J5SXNJa1JQVjA1TVQwRkVYMDFCV0Y5RFQwNURWVkpTUlU1VUlpd2lSVTVCUWt4RlgxUlNRVTVUVUVGU1JVNVVYME5CVGxaQlV5SXNJa1ZPUVVKTVJWOVhSVUpIVEY5QlRsUkpRVXhKUVZNaUxDSkZUa0ZDVEVWZlExVk1URWxPUnlJc0lrTk1SVUZPVlZCZlNVMUJSMFZmUTBGRFNFVWlMQ0pUU0U5WFgwMUZVMGhmVjBsU1JVWlNRVTFGSWl3aVVrOVVRVlJGWDBGRFZFbFBUbDlEUTFjaUxDSlRWVkJRVDFKVVgxUkZXRlJWVWtWZlJrOVNUVUZVVXlJc0lrdEZXU0lzSW01dmJtVWlMQ0ppWVdOcklpd2liV1Z1ZFNJc0ltSmhZMnR6Y0dGalpTSXNJblJoWWlJc0ltVnVkR1Z5SWl3aWMyaHBablFpTENKamRISnNJaXdpWVd4MElpd2ljR0YxYzJVaUxDSmpZWEJ6Ykc5amF5SXNJbVZ6WTJGd1pTSXNJbk53WVdObElpd2ljR0ZuWlhWd0lpd2ljR0ZuWldSdmQyNGlMQ0psYm1RaUxDSm9iMjFsSWl3aWJHVm1kQ0lzSW5Wd0lpd2ljbWxuYUhRaUxDSmtiM2R1SWl3aWMyVnNaV04wSWl3aWFXNXpaWEowSWl3aVJHVnNaWFJsSWl3aVlTSXNJbUlpTENKaklpd2laQ0lzSW1VaUxDSm1JaXdpWnlJc0ltZ2lMQ0pwSWl3aWFpSXNJbXNpTENKc0lpd2liU0lzSW00aUxDSnZJaXdpY0NJc0luRWlMQ0p5SWl3aWN5SXNJblFpTENKMUlpd2lkaUlzSW5jaUxDSjRJaXdpZVNJc0lub2lMQ0p1ZFcwd0lpd2liblZ0TVNJc0ltNTFiVElpTENKdWRXMHpJaXdpYm5WdE5DSXNJbTUxYlRVaUxDSnVkVzAySWl3aWJuVnROeUlzSW01MWJUZ2lMQ0p1ZFcwNUlpd2laakVpTENKbU1pSXNJbVl6SWl3aVpqUWlMQ0ptTlNJc0ltWTJJaXdpWmpjaUxDSm1PQ0lzSW1ZNUlpd2laakV3SWl3aVpqRXhJaXdpWmpFeUlpd2liblZ0Ykc5amF5SXNJbk5qY205c2JHeHZZMnNpTENKelpXMXBZMjlzYjI0aUxDSmxjWFZoYkNJc0ltTnZiVzFoSWl3aVpHRnphQ0lzSW5CbGNtbHZaQ0lzSW1admNuZGhjbVJ6YkdGemFDSXNJbWR5WVhabElpd2liM0JsYm1KeVlXTnJaWFFpTENKaVlXTnJjMnhoYzJnaUxDSmpiRzl6WldKeVlXTnJaWFFpTENKeGRXOTBaU0lzSW1Sd1lXUk1aV1owSWl3aVpIQmhaRkpwWjJoMElpd2laSEJoWkZWd0lpd2laSEJoWkVSdmQyNGlMQ0prY0dGa1EyVnVkR1Z5SWl3aVNXMWhaMlZHYjNKdFlYUWlMQ0pGYm5WdElpd2lTbEJISWl3aVVFNUhJaXdpVkVsR1JpSXNJbGRGUWxBaUxDSlFWbElpTENKRlZFTWlMQ0pUTTFSRElpd2lRVlJKVkVNaUxDSlVSMEVpTENKU1FWZEVRVlJCSWl3aVZVNUxUazlYVGlJc0lrSnNaVzVrUm1GamRHOXlJaXdpVkdWNGRFRnNhV2R1YldWdWRDSXNJa3hGUmxRaUxDSkRSVTVVUlZJaUxDSlNTVWRJVkNJc0lsWmxjblJwWTJGc1ZHVjRkRUZzYVdkdWJXVnVkQ0lzSWxSUFVDSXNJa0pQVkZSUFRTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVRKQ1FTeEpRVUZOUVN4TFFVRkxReXhSUVVGUkxFMUJRVklzUTBGQldEczdRVUZGUVRzN096czdRVUZMUVVNc1IwRkJSME1zUzBGQlNDeEhRVUZYTzBGQlExQTdPenM3TzBGQlMwRkRMRTlCUVV0RExFdEJRVXRETEVWQlFVd3NSMEZCVlN4SFFVNVNPenRCUVZGUU96czdPenRCUVV0QlF5eFBRVUZMTEUxQlFVMUdMRXRCUVV0RExFVkJZbFE3TzBGQlpWQTdPenM3UVVGSlFVVXNhMEpCUVdsQ1F5eFBRVUZQUXl4VFFVRlFMRWRCUVcxQ0xFTkJia0kzUWpzN1FVRnhRbEE3T3pzN1FVRkpRVU1zWlVGQllTeHJRa0Y2UWs0N08wRkJNa0pRT3pzN096dEJRVXRCUXl4alFVRlpMRU5CUVVOUUxFdEJRVXRSTEVkQlFVd3NRMEZCVXl4RFFVRlVMRVZCUVZrc1JVRkJXaXhEUVdoRFRqczdRVUZyUTFBN096czdPMEZCUzBGRExHTkJRVmxVTEV0QlFVdFJMRWRCUVV3c1EwRkJVeXhEUVVGVUxFVkJRVmtzUlVGQldpeEpRVUZyUWl4RFFYWkRka0k3TzBGQmVVTlFPMEZCUTBFN096czdRVUZKUVVVc1QwRkJTeXhEUVRsRFJUczdRVUZuUkZBN096czdRVUZKUVVNc1VVRkJUU3hEUVhCRVF6czdRVUZ6UkZBN096czdRVUZKUVVNc1lVRkJWeXhOUVRGRVNqczdRVUUwUkZBN096czdRVUZKUVVNc2MwSkJRVzlDTEV0QmFFVmlPenRCUVd0RlVEczdPenRCUVVsQlF5eGhRVUZYTEV0QmRFVktPenRCUVhkRlVEczdPenRCUVVsQlF5eGhRVUZYTEV0Qk5VVktPenRCUVRoRlVEczdPenRCUVVsQlF5eGhRVUZYTEV0QmJFWktPenRCUVc5R1VEczdPenRCUVVsQlF5eDFRa0ZCY1VJc1RVRjRSbVE3TzBGQk1FWlFPenM3TzBGQlNVRkRMSFZDUVVGeFFpeExRVGxHWkRzN1FVRm5SMUE3T3pzN1FVRkpRVU1zZFVKQlFYRkNMRXRCY0Vka096dEJRWE5IVURzN096dEJRVWxCUXl4MVFrRkJjVUlzVFVFeFIyUTdPMEZCTkVkUU96czdPMEZCU1VGRExEUkNRVUV3UWl4TlFXaElia0k3TzBGQmEwaFFPenM3TzBGQlNVRkRMRFJDUVVFd1FpeE5RWFJJYmtJN08wRkJkMGhRTzBGQlEwRTdPenM3TzBGQlMwRkRMSGRDUVVGelFpeERRVGxJWmpzN1FVRm5TVkE3T3pzN08wRkJTMEZETEhsQ1FVRjFRaXhEUVhKSmFFSTdPMEZCZFVsUU96czdPenRCUVV0QlF5eHZRa0ZCYTBJc1EwRTFTVmc3TzBGQk9FbFFReXh4UWtGQmJVSXNXVUU1U1ZvN1FVRXJTVkJETEcxQ1FVRnBRaXhWUVM5SlZqdEJRV2RLVUVNc2NVSkJRVzFDTEZsQmFFcGFPMEZCYVVwUVF5eHJRa0ZCWjBJc1UwRnFTbFE3TzBGQmJVcFFPenRCUVVWQk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRVzlDUVVNc2QwTkJRWE5ETEVsQmVrc3ZRanM3UVVFeVMxQTdPenM3TzBGQlMwRkRMREpDUVVGNVFteERMRWRCUVVkdFF5eEZRVUZJTEVOQlFVMHNRMEZCVGl4RlFVRlRMRU5CUVZRc1EwRm9UR3hDT3p0QlFXdE1VRHM3T3pzN096czdRVUZSUVVNc05FSkJRVEJDTEVsQk1VeHVRanM3UVVFMFRGQTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCYjBKQlF5eHBRa0ZCWlN4SlFXaE9VanM3UVVGclRsQTdPenM3T3pzN1FVRlBRVU1zYzBKQlFXOUNMRXRCZWs1aU96dEJRVEpPVURzN096czdPenM3UVVGUlFVTXNNa0pCUVhsQ0xFbEJiazlzUWpzN1FVRnhUMUE3T3pzN096czdPMEZCVVVGRExESkNRVUY1UWl4RlFUZFBiRUk3TzBGQkswOVFPenM3T3pzN096czdPenM3TzBGQllVRkRMRFpDUVVFeVFpeExRVFZRY0VJN08wRkJPRkJRT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFXOUNRVU1zTUVKQlFYZENMRXRCYkZKcVFqczdRVUZ2VWxBN096czdPenM3T3pzN096czdPenM3UVVGblFrRkRMR3RDUVVGblFpeExRWEJUVkRzN1FVRnpVMUE3T3pzN096czdPenM3T3pzN096czdRVUZuUWtGRExIVkNRVUZ4UWl4TFFYUlVaRHM3UVVGM1ZGQTdPenM3T3pzN08wRkJVVUZETEhWQ1FVRnhRaXhMUVdoVlpEczdRVUZyVlZBN096czdPenM3T3pzN1FVRlZRVU1zY1VKQlFXMUNPMEZCTlZWYUxFTkJRVmc3TzBGQloxWkJMRWxCUVVsRExEQkNRVUV3UWl4RFFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ0xFOUJRVEZDTEVWQlFXMURMRTFCUVc1RExFVkJRVEpETEU5QlFUTkRMRVZCUVc5RUxFMUJRWEJFTEVWQlFUUkVMRTFCUVRWRUxFTkJRVGxDT3p0QlFVVkJPenM3T3pzN096czdRVUZUUVM5RExFZEJRVWRETEV0QlFVZ3NRMEZCVXpoRExIVkNRVUZVTEVkQlFXMURRU3gxUWtGQmJrTTdPMEZCUjBFN096czdPenRCUVUxQkwwTXNSMEZCUjBNc1MwRkJTQ3hEUVVGVEswTXNSMEZCVkN4SFFVRmxPMEZCUTFnN096czdPenM3UVVGUFFVTXNVVUZCU3l4RFFWSk5PenRCUVZWWU8wRkJRMEU3T3pzN096czdRVUZQUVVNc1VVRkJTeXhEUVd4Q1RUdEJRVzFDV0RzN096czdPenRCUVU5QlF5eFJRVUZMTEVWQk1VSk5PenRCUVRSQ1dEczdPenM3T3p0QlFVOUJReXhoUVVGVkxFTkJia05ET3p0QlFYRkRXRHM3T3pzN096dEJRVTlCUXl4UFFVRkpMRU5CTlVOUE96dEJRVGhEV0RzN096czdPenRCUVU5QlF5eFRRVUZOTEVWQmNrUkxPenRCUVhWRVdEczdPenM3T3p0QlFVOUJReXhUUVVGTkxFVkJPVVJMTEVWQk9FUkVPenRCUVVWV096czdPenM3TzBGQlQwRkRMRkZCUVVzc1JVRjJSVTBzUlVGMVJVWTdPMEZCUlZRN096czdPenM3UVVGUFFVTXNUMEZCU1N4RlFXaEdUeXhGUVdkR1NEczdRVUZGVWpzN096czdPenRCUVU5QlF5eFRRVUZOTEVWQmVrWkxPenRCUVRKR1dEczdPenM3T3p0QlFVOUJReXhaUVVGVExFVkJiRWRGT3p0QlFXOUhXRHM3T3pzN096dEJRVTlCUXl4VlFVRlBMRVZCTTBkSk96dEJRVFpIV0RzN096czdPenRCUVU5QlF5eFRRVUZOTEVWQmNFaExPenRCUVhOSVdEczdPenM3T3p0QlFVOUJReXhWUVVGUExFVkJOMGhKT3p0QlFTdElXRHM3T3pzN096dEJRVTlCUXl4WlFVRlRMRVZCZEVsRk96dEJRWGRKV0RzN096czdPenRCUVU5QlF5eFBRVUZKTEVWQkwwbFBPenRCUVdsS1dEczdPenM3T3p0QlFVOUJReXhSUVVGTExFVkJlRXBOT3p0QlFUQktXRHM3T3pzN096dEJRVTlCUXl4UlFVRkxMRVZCYWt0Tk96dEJRVzFMV0RzN096czdPenRCUVU5QlF5eE5RVUZITEVWQk1VdFJPenRCUVRSTFdEczdPenM3T3p0QlFVOUJReXhUUVVGTkxFVkJia3hMT3p0QlFYRk1XRHM3T3pzN096dEJRVTlCUXl4UlFVRkxMRVZCTlV4Tk96dEJRVGhNV0RzN096czdPenRCUVU5QlF5eFZRVUZQTEVWQmNrMUpPenRCUVhWTldEczdPenM3T3p0QlFVOUJReXhWUVVGUExFVkJPVTFKT3p0QlFXZE9XRHM3T3pzN096dEJRVTlCUXl4VlFVRlBMRVZCZGs1Sk96dEJRWGxPV0RzN096czdPenRCUVU5QkxFdEJRVVVzUlVGb1QxTTdPMEZCYTA5WU96czdPenM3TzBGQlQwRXNTMEZCUlN4RlFYcFBVenM3UVVFeVQxZzdPenM3T3pzN1FVRlBRU3hMUVVGRkxFVkJiRkJUT3p0QlFXOVFXRHM3T3pzN096dEJRVTlCTEV0QlFVVXNSVUV6VUZNN08wRkJObEJZT3pzN096czdPMEZCVDBFc1MwRkJSU3hGUVhCUlV6czdRVUZ6VVZnN096czdPenM3UVVGUFFTeExRVUZGTEVWQk4xRlRPenRCUVN0UldEczdPenM3T3p0QlFVOUJMRXRCUVVVc1JVRjBVbE03TzBGQmQxSllPenM3T3pzN08wRkJUMEVzUzBGQlJTeEZRUzlTVXpzN1FVRnBVMWc3T3pzN096czdRVUZQUVN4TFFVRkZMRVZCZUZOVE96dEJRVEJUV0RzN096czdPenRCUVU5QkxFdEJRVVVzUlVGcVZGTTdPMEZCYlZSWU96czdPenM3TzBGQlQwRkRMRXRCUVVVc1JVRXhWRk03TzBGQk5GUllPenM3T3pzN08wRkJUMEZETEV0QlFVVXNSVUZ1VlZNN08wRkJjVlZZT3pzN096czdPMEZCVDBGRExFdEJRVVVzUlVFMVZWTTdPMEZCT0ZWWU96czdPenM3TzBGQlQwRkRMRXRCUVVVc1JVRnlWbE03TzBGQmRWWllPenM3T3pzN08wRkJUMEZETEV0QlFVVXNSVUU1VmxNN08wRkJaMWRZT3pzN096czdPMEZCVDBGRExFdEJRVVVzUlVGMlYxTTdPMEZCZVZkWU96czdPenM3TzBGQlQwRkRMRXRCUVVVc1JVRm9XRk03TzBGQmExaFlPenM3T3pzN08wRkJUMEZETEV0QlFVVXNSVUY2V0ZNN08wRkJNbGhZT3pzN096czdPMEZCVDBGRExFdEJRVVVzUlVGc1dWTTdPMEZCYjFsWU96czdPenM3TzBGQlQwRkRMRXRCUVVVc1JVRXpXVk03TzBGQk5sbFlPenM3T3pzN08wRkJUMEZETEV0QlFVVXNSVUZ3V2xNN08wRkJjMXBZT3pzN096czdPMEZCVDBGRExFdEJRVVVzUlVFM1dsTTdPMEZCSzFwWU96czdPenM3TzBGQlQwRkRMRXRCUVVVc1JVRjBZVk03TzBGQmQyRllPenM3T3pzN08wRkJUMEZETEV0QlFVVXNSVUV2WVZNN08wRkJhV0pZT3pzN096czdPMEZCVDBGRExFdEJRVVVzUlVGNFlsTTdPMEZCTUdKWU96czdPenM3TzBGQlQwRkRMRXRCUVVVc1JVRnFZMU03TzBGQmJXTllPenM3T3pzN08wRkJUMEZETEV0QlFVVXNSVUV4WTFNN08wRkJOR05ZT3pzN096czdPMEZCVDBGRExFdEJRVVVzUlVGdVpGTTdPMEZCY1dSWU96czdPenM3TzBGQlQwRkRMRXRCUVVVc1JVRTFaRk03TzBGQk9HUllPenM3T3pzN08wRkJUMEZETEV0QlFVVXNSVUZ5WlZNN08wRkJkV1ZZT3pzN096czdPMEZCVDBGRExFdEJRVVVzUlVFNVpWTTdPMEZCWjJaWU96czdPenM3TzBGQlQwRkRMRXRCUVVVc1JVRjJabE03TzBGQmVXWllPenM3T3pzN08wRkJUMEZETEV0QlFVVXNSVUZvWjBKVE96dEJRV3RuUWxnN096czdPenM3UVVGUFFVTXNTMEZCUlN4RlFYcG5RbE03TzBGQk1tZENXRHM3T3pzN096dEJRVTlCUXl4TFFVRkZMRVZCYkdoQ1V6czdRVUZ2YUVKWU96czdPenM3TzBGQlQwRkRMRXRCUVVVc1JVRXphRUpUT3p0QlFUWm9RbGc3T3pzN096czdRVUZQUVVNc1VVRkJTeXhGUVhCcFFrMDdPMEZCYzJsQ1dEczdPenM3T3p0QlFVOUJReXhSUVVGTExFVkJOMmxDVFRzN1FVRXJhVUpZT3pzN096czdPMEZCVDBGRExGRkJRVXNzUlVGMGFrSk5PenRCUVhkcVFsZzdPenM3T3pzN1FVRlBRVU1zVVVGQlN5eEZRUzlxUWswN08wRkJhV3RDV0RzN096czdPenRCUVU5QlF5eFJRVUZMTEVkQmVHdENUVHM3UVVFd2EwSllPenM3T3pzN08wRkJUMEZETEZGQlFVc3NSMEZxYkVKTk96dEJRVzFzUWxnN096czdPenM3UVVGUFFVTXNVVUZCU3l4SFFURnNRazA3TzBGQk5HeENXRHM3T3pzN096dEJRVTlCUXl4UlFVRkxMRWRCYm0xQ1RUczdRVUZ4YlVKWU96czdPenM3TzBGQlQwRkRMRkZCUVVzc1IwRTFiVUpOT3p0QlFUaHRRbGc3T3pzN096czdRVUZQUVVNc1VVRkJTeXhIUVhKdVFrMDdPMEZCZFc1Q1dEczdPenM3T3p0QlFVOUJMRTlCUVVrc1IwRTVia0pQT3p0QlFXZHZRbGc3T3pzN096czdRVUZQUVN4UFFVRkpMRWRCZG05Q1R6czdRVUY1YjBKWU96czdPenM3TzBGQlQwRXNUMEZCU1N4SFFXaHdRazg3TzBGQmEzQkNXRHM3T3pzN096dEJRVTlCTEZsQlFWTXNSMEY2Y0VKRk96dEJRVEp3UWxnN096czdPenM3UVVGUFFTeFBRVUZKTEVkQmJIRkNUenM3UVVGdmNVSllPenM3T3pzN08wRkJUMEZETEUxQlFVY3NSMEV6Y1VKUkxFVkJNbkZDU0RzN1FVRkZVanM3T3pzN096dEJRVTlCUXl4TlFVRkhMRWRCY0hKQ1VUczdRVUZ6Y2tKWU96czdPenM3TzBGQlQwRkRMRTFCUVVjc1IwRTNja0pST3p0QlFTdHlRbGc3T3pzN096czdRVUZQUVVNc1RVRkJSeXhIUVhSelFsRTdPMEZCZDNOQ1dEczdPenM3T3p0QlFVOUJReXhOUVVGSExFZEJMM05DVVRzN1FVRnBkRUpZT3pzN096czdPMEZCVDBGRExFMUJRVWNzUjBGNGRFSlJPenRCUVRCMFFsZzdPenM3T3pzN1FVRlBRVU1zVFVGQlJ5eEhRV3AxUWxFN08wRkJiWFZDV0RzN096czdPenRCUVU5QlF5eE5RVUZITEVkQk1YVkNVVHM3UVVFMGRVSllPenM3T3pzN08wRkJUMEZETEUxQlFVY3NSMEZ1ZGtKUk96dEJRWEYyUWxnN096czdPenM3UVVGUFFVTXNUMEZCU1N4SFFUVjJRazg3TzBGQk9IWkNXRHM3T3pzN096dEJRVTlCUXl4UFFVRkpMRWRCY25kQ1R6czdRVUYxZDBKWU96czdPenM3TzBGQlQwRkRMRTlCUVVrc1IwRTVkMEpQT3p0QlFXZDRRbGc3T3pzN096czdRVUZQUVVNc1YwRkJVU3hIUVhaNFFrYzdPMEZCZVhoQ1dEczdPenM3T3p0QlFVOUJReXhqUVVGWExFZEJhSGxDUVRzN1FVRnJlVUpZT3pzN096czdPMEZCVDBFc1QwRkJTU3hIUVhwNVFrODdPMEZCTW5sQ1dEczdPenM3T3p0QlFVOUJReXhoUVVGVkxFZEJiSHBDUXpzN1FVRnZla0pZT3pzN096czdPMEZCVDBGRExGTkJRVTBzUjBFemVrSkxPenRCUVRaNlFsZzdPenM3T3pzN1FVRlBRU3hQUVVGSkxFZEJjREJDVHpzN1FVRnpNRUpZT3pzN096czdPMEZCVDBFc1QwRkJTU3hIUVRjd1FrODdPMEZCS3pCQ1dEczdPenM3T3p0QlFVOUJReXhUUVVGTkxFZEJkREZDU3pzN1FVRjNNVUpZT3pzN096czdPMEZCVDBGRExGRkJRVXNzUjBFdk1VSk5PenRCUVdreVFsZzdPenM3T3pzN1FVRlBRU3hQUVVGSkxFZEJlREpDVHpzN1FVRXdNa0pZT3pzN096czdPMEZCVDBGRExGVkJRVThzUjBGcU0wSkpPenRCUVcwelFsZzdPenM3T3pzN1FVRlBRVU1zWjBKQlFXRXNSMEV4TTBKR096dEJRVFF6UWxnN096czdPenM3UVVGUFFVTXNVMEZCVFN4SFFXNDBRa3M3TzBGQmNUUkNXRHM3T3pzN096dEJRVTlCTEU5QlFVa3NSMEUxTkVKUE96dEJRVGcwUWxnN096czdPenM3UVVGUFFVTXNaVUZCV1N4SFFYSTFRa1E3TzBGQmRUVkNXRHM3T3pzN096dEJRVTlCUXl4aFFVRlZMRWRCT1RWQ1F6czdRVUZuTmtKWU96czdPenM3TzBGQlQwRXNUMEZCU1N4SFFYWTJRazg3TzBGQmVUWkNXRHM3T3pzN096dEJRVTlCUXl4blFrRkJZU3hIUVdnM1FrWTdPMEZCYXpkQ1dEczdPenM3T3p0QlFVOUJReXhUUVVGTkxFZEJlamRDU3pzN1FVRXlOMEpZT3p0QlFVVkJPenM3T3pzN08wRkJUMEZETEZsQlFWTXNTVUZ3T0VKRk96dEJRWE00UWxnN096czdPenM3UVVGUFFVTXNZVUZCVlN4SlFUYzRRa003TzBGQkt6aENXRHM3T3pzN096dEJRVTlCUXl4VlFVRlBMRWxCZERsQ1NUczdRVUYzT1VKWU96czdPenM3TzBGQlQwRkRMRmxCUVZNc1NVRXZPVUpGT3p0QlFXa3JRbGc3T3pzN096czdRVUZQUVVNc1kwRkJWenRCUVhnclFrRXNRMEZCWmpzN1FVRXlLMEpCT3pzN08wRkJTVUV4U1N4SFFVRkhReXhMUVVGSUxFTkJRVk13U1N4WFFVRlVMRWRCUVhWQ00wa3NSMEZCUnpSSkxFbEJRVWdzUTBGQlVUdEJRVU16UWpzN096czdRVUZMUVVNc1QwRkJTeXhEUVU1elFqdEJRVTh6UWpzN096czdRVUZMUVVNc1QwRkJTeXhEUVZwelFqdEJRV0V6UWpzN096czdRVUZMUVVNc1VVRkJUU3hEUVd4Q2NVSTdRVUZ0UWpOQ096czdPenRCUVV0QlF5eFJRVUZOTEVOQmVFSnhRanRCUVhsQ00wSTdPenM3TzBGQlMwRkRMRTlCUVVzc1EwRTVRbk5DTzBGQkswSXpRanM3T3pzN1FVRkxRVU1zVDBGQlN5eERRWEJEYzBJN1FVRnhRek5DT3pzN096dEJRVXRCUXl4UlFVRk5MRU5CTVVOeFFqdEJRVEpETTBJN096czdPMEZCUzBGRExGTkJRVThzUTBGb1JHOUNPMEZCYVVRelFqczdPenM3UVVGTFFVTXNUMEZCU3l4RFFYUkVjMEk3UVVGMVJETkNPenM3T3p0QlFVdEJReXhYUVVGVExFTkJOVVJyUWp0QlFUWkVNMEk3T3pzN08wRkJTMEZETEZkQlFWTTdRVUZzUld0Q0xFTkJRVklzUTBGQmRrSTdPMEZCY1VWQk96czdPenM3T3pzN1FVRlRRWFpLTEVkQlFVZERMRXRCUVVnc1EwRkJVM1ZLTEZkQlFWUXNSMEZCZFVKNFNpeEhRVUZITkVrc1NVRkJTQ3hEUVVGUk8wRkJRek5DT3pzN096dEJRVXRCTDBnc1QwRkJkMElzUTBGT1J5eEZRVTFETzBGQlF6VkNPenM3T3p0QlFVdEJReXhSUVVGM1FpeERRVnBITEVWQldVczdRVUZEYUVNN096czdPMEZCUzBGRExHRkJRWGRDTEV0QmJFSkhMRVZCYTBKTE8wRkJRMmhET3pzN096dEJRVXRCUlN4aFFVRjNRaXhMUVhoQ1J5eEZRWGRDU3p0QlFVTm9RenM3T3pzN1FVRkxRVU1zWVVGQmQwSXNTMEU1UWtjc1JVRTRRa3M3UVVGRGFFTTdPenM3TzBGQlMwRkRMR0ZCUVhkQ0xFdEJjRU5ITEVWQmIwTkxPMEZCUTJoRE96czdPenRCUVV0QlF5eDFRa0ZCZDBJc1MwRXhRMGNzUlVFd1EwczdRVUZEYUVNN096czdPMEZCUzBGRExIVkNRVUYzUWl4TFFXaEVSeXhGUVdkRVN6dEJRVU5vUXpzN096czdRVUZMUVVNc2RVSkJRWGRDTEV0QmRFUkhMRVZCYzBSTE8wRkJRMmhET3pzN096dEJRVXRCUXl4MVFrRkJkMElzUzBFMVJFY3NRMEUwUkVzN1FVRTFSRXdzUTBGQlVpeERRVUYyUWpzN1FVRXJSRUU3T3p0QlFVZEJka0lzUjBGQlIwTXNTMEZCU0N4RFFVRlRkMG9zWVVGQlZDeEhRVUY1UW5wS0xFZEJRVWMwU1N4SlFVRklMRU5CUVZFN1FVRkROMEk3T3p0QlFVZEJZeXhSUVVGTkxFTkJTblZDTzBGQlN6ZENPenM3UVVGSFFVTXNWVUZCVVN4RFFWSnhRanRCUVZNM1FqczdPMEZCUjBGRExGTkJRVTg3UVVGYWMwSXNRMEZCVWl4RFFVRjZRanM3UVVGbFFUczdPMEZCUjBFMVNpeEhRVUZIUXl4TFFVRklMRU5CUVZNMFNpeHhRa0ZCVkN4SFFVRnBRemRLTEVkQlFVYzBTU3hKUVVGSUxFTkJRVkU3UVVGRGNrTTdPenRCUVVkQmEwSXNUMEZCU3l4RFFVcG5RenRCUVV0eVF6czdPMEZCUjBGSUxGVkJRVkVzUTBGU05rSTdRVUZUY2tNN096dEJRVWRCU1N4VlFVRlJPMEZCV2paQ0xFTkJRVklzUTBGQmFrTTdPMEZCWlVGRExFOUJRVTlETEU5QlFWQXNSMEZCYVVKcVN5eEhRVUZIUXl4TFFVRndRaUlzSW1acGJHVWlPaUpEUTAxaFkzSnZMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TURndE1qQXhNQ0JTYVdOaGNtUnZJRkYxWlhOaFpHRmNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVEV0TWpBeE1pQmpiMk52Y3pKa0xYZ3ViM0puWEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFekxUSXdNVFlnUTJoMWEyOXVaeUJVWldOb2JtOXNiMmRwWlhNZ1NXNWpMbHh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TnkweU1ERTRJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGx4dVhHNGdhSFIwY0RvdkwzZDNkeTVqYjJOdmN6SmtMWGd1YjNKblhHNWNiaUJRWlhKdGFYTnphVzl1SUdseklHaGxjbVZpZVNCbmNtRnVkR1ZrTENCbWNtVmxJRzltSUdOb1lYSm5aU3dnZEc4Z1lXNTVJSEJsY25OdmJpQnZZblJoYVc1cGJtY2dZU0JqYjNCNVhHNGdiMllnZEdocGN5QnpiMlowZDJGeVpTQmhibVFnWVhOemIyTnBZWFJsWkNCa2IyTjFiV1Z1ZEdGMGFXOXVJR1pwYkdWeklDaDBhR1VnWENKVGIyWjBkMkZ5WlZ3aUtTd2dkRzhnWkdWaGJGeHVJR2x1SUhSb1pTQlRiMlowZDJGeVpTQjNhWFJvYjNWMElISmxjM1J5YVdOMGFXOXVMQ0JwYm1Oc2RXUnBibWNnZDJsMGFHOTFkQ0JzYVcxcGRHRjBhVzl1SUhSb1pTQnlhV2RvZEhOY2JpQjBieUIxYzJVc0lHTnZjSGtzSUcxdlpHbG1lU3dnYldWeVoyVXNJSEIxWW14cGMyZ3NJR1JwYzNSeWFXSjFkR1VzSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNYRzRnWTI5d2FXVnpJRzltSUhSb1pTQlRiMlowZDJGeVpTd2dZVzVrSUhSdklIQmxjbTFwZENCd1pYSnpiMjV6SUhSdklIZG9iMjBnZEdobElGTnZablIzWVhKbElHbHpYRzRnWm5WeWJtbHphR1ZrSUhSdklHUnZJSE52TENCemRXSnFaV04wSUhSdklIUm9aU0JtYjJ4c2IzZHBibWNnWTI5dVpHbDBhVzl1Y3pwY2JseHVJRlJvWlNCaFltOTJaU0JqYjNCNWNtbG5hSFFnYm05MGFXTmxJR0Z1WkNCMGFHbHpJSEJsY20xcGMzTnBiMjRnYm05MGFXTmxJSE5vWVd4c0lHSmxJR2x1WTJ4MVpHVmtJR2x1WEc0Z1lXeHNJR052Y0dsbGN5QnZjaUJ6ZFdKemRHRnVkR2xoYkNCd2IzSjBhVzl1Y3lCdlppQjBhR1VnVTI5bWRIZGhjbVV1WEc1Y2JpQlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRJRTlTWEc0Z1NVMVFURWxGUkN3Z1NVNURURlZFU1U1SElFSlZWQ0JPVDFRZ1RFbE5TVlJGUkNCVVR5QlVTRVVnVjBGU1VrRk9WRWxGVXlCUFJpQk5SVkpEU0VGT1ZFRkNTVXhKVkZrc1hHNGdSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTRnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGWEc0Z1FWVlVTRTlTVXlCUFVpQkRUMUJaVWtsSFNGUWdTRTlNUkVWU1V5QkNSU0JNU1VGQ1RFVWdSazlTSUVGT1dTQkRURUZKVFN3Z1JFRk5RVWRGVXlCUFVpQlBWRWhGVWx4dUlFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFJZ1QxUklSVkpYU1ZORkxDQkJVa2xUU1U1SElFWlNUMDBzWEc0Z1QxVlVJRTlHSUU5U0lFbE9JRU5QVGs1RlExUkpUMDRnVjBsVVNDQlVTRVVnVTA5R1ZGZEJVa1VnVDFJZ1ZFaEZJRlZUUlNCUFVpQlBWRWhGVWlCRVJVRk1TVTVIVXlCSlRseHVJRlJJUlNCVFQwWlVWMEZTUlM1Y2JpQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWpiMjV6ZENCcWN5QTlJSEpsY1hWcGNtVW9KeTR2YW5NbktUdGNibHh1THlvcVhHNGdLaUJRY21Wa1pXWnBibVZrSUdOdmJuTjBZVzUwYzF4dUlDb2dRR05zWVhOeklHMWhZM0p2WEc0Z0tpQkFjM1JoZEdsalhHNGdLaTljYm1OakxtMWhZM0p2SUQwZ2UxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQkpJQzhnTVRnd1hHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlGSkJSRnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnVWtGRU9pQk5ZWFJvTGxCSklDOGdNVGd3TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1QyNWxJR1JsWjNKbFpWeHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQkVSVWRjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUVSRlJ6b2dNVGd3SUM4Z1RXRjBhQzVRU1N4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQlNSVkJGUVZSZlJrOVNSVlpGVWx4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1VrVlFSVUZVWDBaUFVrVldSVkk2SUNoT2RXMWlaWEl1VFVGWVgxWkJURlZGSUMwZ01Ta3NYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnUmt4VVgwVlFVMGxNVDA1Y2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lFWk1WRjlGVUZOSlRFOU9PaUF3TGpBd01EQXdNREV4T1RJd09USTRPVFlzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCTmFXNXBiWFZ0SUhvZ2FXNWtaWGdnZG1Gc2RXVWdabTl5SUc1dlpHVmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dUVWxPWDFwSlRrUkZXRnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnVFVsT1gxcEpUa1JGV0RvZ0xVMWhkR2d1Y0c5M0tESXNJREUxS1N4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFMWhlR2x0ZFcwZ2VpQnBibVJsZUNCMllXeDFaU0JtYjNJZ2JtOWtaVnh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0JOUVZoZldrbE9SRVZZWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCTlFWaGZXa2xPUkVWWU9pQk5ZWFJvTG5CdmR5Z3lMQ0F4TlNrZ0xTQXhMRnh1WEc0Z0lDQWdMeTl6YjIxbElHZHNJR052Ym5OMFlXNTBJSFpoY21saFlteGxYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJRTlPUlZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1QwNUZPaUF4TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlGcEZVazljYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUZwRlVrODZJREFzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ1UxSkRYMEZNVUVoQlhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaTljYmlBZ0lDQlRVa05mUVV4UVNFRTZJREI0TURNd01peGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0JUVWtOZlFVeFFTRUZmVTBGVVZWSkJWRVZjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUZOU1ExOUJURkJJUVY5VFFWUlZVa0ZVUlRvZ01IZ3pNRGdzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ1UxSkRYME5QVEU5U1hHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaTljYmlBZ0lDQlRVa05mUTA5TVQxSTZJREI0TXpBd0xGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJRVJUVkY5QlRGQklRVnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnUkZOVVgwRk1VRWhCT2lBd2VETXdOQ3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCRVUxUmZRMDlNVDFKY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lFUlRWRjlEVDB4UFVqb2dNSGd6TURZc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dUMDVGWDAxSlRsVlRYMU5TUTE5QlRGQklRVnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnVDA1RlgwMUpUbFZUWDFOU1ExOUJURkJJUVRvZ01IZ3dNekF6TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlFOU9SVjlOU1U1VlUxOVRVa05mUTA5TVQxSmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRTlPUlY5TlNVNVZVMTlUVWtOZlEwOU1UMUk2SURCNE16QXhMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUU5T1JWOU5TVTVWVTE5RVUxUmZRVXhRU0VGY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lFOU9SVjlOU1U1VlUxOUVVMVJmUVV4UVNFRTZJREI0TXpBMUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJRTlPUlY5TlNVNVZVMTlFVTFSZlEwOU1UMUpjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUU5T1JWOU5TVTVWVTE5RVUxUmZRMDlNVDFJNklEQjRNRE13Tnl4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQlBUa1ZmVFVsT1ZWTmZRMDlPVTFSQlRsUmZRVXhRU0VGY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lFOU9SVjlOU1U1VlUxOURUMDVUVkVGT1ZGOUJURkJJUVRvZ01IZzRNREEwTEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlFOU9SVjlOU1U1VlUxOURUMDVUVkVGT1ZGOURUMHhQVWx4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1QwNUZYMDFKVGxWVFgwTlBUbE5VUVU1VVgwTlBURTlTT2lBd2VEZ3dNRElzWEc1Y2JpQWdJQ0F2TDFCdmMzTnBZbXhsSUdSbGRtbGpaU0J2Y21sbGJuUmhkR2x2Ym5OY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUGNtbGxiblJsWkNCMlpYSjBhV05oYkd4NVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlFOVNTVVZPVkVGVVNVOU9YMUJQVWxSU1FVbFVYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JQVWtsRlRsUkJWRWxQVGw5UVQxSlVVa0ZKVkRvZ01TeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRTl5YVdWdWRHVmtJR2h2Y21sNmIyNTBZV3hzZVZ4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCUFVrbEZUbFJCVkVsUFRsOU1RVTVFVTBOQlVFVmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRTlTU1VWT1ZFRlVTVTlPWDB4QlRrUlRRMEZRUlRvZ01peGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRTl5YVdWdWRHVmtJR0YxZEc5dFlYUnBZMkZzYkhsY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ1QxSkpSVTVVUVZSSlQwNWZRVlZVVDF4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1QxSkpSVTVVUVZSSlQwNWZRVlZVVHpvZ015eGNibHh1SUNBZ0lFUkZUbE5KVkZsRVVFbGZSRVZXU1VORk9pQW5aR1YyYVdObExXUndhU2NzWEc0Z0lDQWdSRVZPVTBsVVdVUlFTVjlJU1VkSU9pQW5hR2xuYUMxa2NHa25MRnh1SUNBZ0lFUkZUbE5KVkZsRVVFbGZUVVZFU1ZWTk9pQW5iV1ZrYVhWdExXUndhU2NzWEc0Z0lDQWdSRVZPVTBsVVdVUlFTVjlNVDFjNklDZHNiM2N0WkhCcEp5eGNibHh1SUNBZ0lDOHZJRWRsYm1WeVlXd2dZMjl1Wm1sbmRYSmhkR2x2Ym5OY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlEeHdQbHh1SUNBZ0lDQXFJQ0FnU1dZZ1pXNWhZbXhsWkN3Z2RHaGxJSFJsZUhSMWNtVWdZMjl2Y21ScGJtRjBaWE1nZDJsc2JDQmlaU0JqWVd4amRXeGhkR1ZrSUdKNUlIVnphVzVuSUhSb2FYTWdabTl5YlhWc1lUb2dQR0p5THo1Y2JpQWdJQ0FnS2lBZ0lDQWdJQzBnZEdWNFEyOXZjbVF1YkdWbWRDQTlJQ2h5WldOMExuZ3FNaXN4S1NBdklDaDBaWGgwZFhKbExuZHBaR1VxTWlrN0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHSnlMejVjYmlBZ0lDQWdLaUFnSUNBZ0lDMGdkR1Y0UTI5dmNtUXVjbWxuYUhRZ1BTQjBaWGhEYjI5eVpDNXNaV1owSUNzZ0tISmxZM1F1ZDJsa2RHZ3FNaTB5S1M4b2RHVjRkSFZ5WlM1M2FXUmxLaklwT3lBOFluSXZQbHh1SUNBZ0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR0p5THo1Y2JpQWdJQ0FnS2lBZ1ZHaGxJSE5oYldVZ1ptOXlJR0p2ZEhSdmJTQmhibVFnZEc5d0xpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4aWNpOCtYRzRnSUNBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThZbkl2UGx4dUlDQWdJQ0FxSUNCVWFHbHpJR1p2Y20xMWJHRWdjSEpsZG1WdWRITWdZWEowYVdaaFkzUnpJR0o1SUhWemFXNW5JRGs1SlNCdlppQjBhR1VnZEdWNGRIVnlaUzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdKeUx6NWNiaUFnSUNBZ0tpQWdWR2hsSUZ3aVkyOXljbVZqZEZ3aUlIZGhlU0IwYnlCd2NtVjJaVzUwSUdGeWRHbG1ZV04wY3lCcGN5QmllU0JsZUhCaGJtUWdkR2hsSUhSbGVIUjFjbVVuY3lCaWIzSmtaWElnZDJsMGFDQjBhR1VnYzJGdFpTQmpiMnh2Y2lCaWVTQXhJSEJwZUdWc1BHSnlMejVjYmlBZ0lDQWdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WW5JdlBseHVJQ0FnSUNBcUlDQkJabVpsWTNSbFpDQmpiMjF3YjI1bGJuUTZJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WW5JdlBseHVJQ0FnSUNBcUlDQWdJQ0FnTFNCall5NVVUVmhNWVhsbGNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThZbkl2UGx4dUlDQWdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4aWNpOCtYRzRnSUNBZ0lDb2dJRVZ1WVdKc1pXUWdZbmtnWkdWbVlYVnNkQzRnVkc4Z1pHbHpZV0pzWldRZ2MyVjBJR2wwSUhSdklEQXVJRHhpY2k4K1hHNGdJQ0FnSUNvZ0lGUnZJRzF2WkdsbWVTQnBkQ3dnYVc0Z1YyVmlJR1Z1WjJsdVpTQndiR1ZoYzJVZ2NtVm1aWElnZEc4Z1EwTk5ZV055Ynk1cWN5d2dhVzRnU2xOQ0lIQnNaV0Z6WlNCeVpXWmxjaUIwYnlCRFEwTnZibVpwWnk1b1hHNGdJQ0FnSUNvZ1BDOXdQbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRVpKV0Y5QlVsUkpSa0ZEVkZOZlFsbGZVMVJTUlVOSVNVNUhYMVJGV0VWTVgxUk5XRnh1SUNBZ0lDQXFMMXh1SUNBZ0lFWkpXRjlCVWxSSlJrRkRWRk5mUWxsZlUxUlNSVU5JU1U1SFgxUkZXRVZNWDFSTldEb2dkSEoxWlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQnZjMmwwYVc5dUlHOW1JSFJvWlNCR1VGTWdLRVJsWm1GMWJIUTZJREFzTUNBb1ltOTBkRzl0TFd4bFpuUWdZMjl5Ym1WeUtTazhZbkl2UGx4dUlDQWdJQ0FxSUZSdklHMXZaR2xtZVNCcGRDd2dhVzRnVjJWaUlHVnVaMmx1WlNCd2JHVmhjMlVnY21WbVpYSWdkRzhnUTBOTllXTnlieTVxY3l3Z2FXNGdTbE5DSUhCc1pXRnpaU0J5WldabGNpQjBieUJEUTBOdmJtWnBaeTVvWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0V1pXTXlmU0JFU1ZKRlExUlBVbDlUVkVGVVUxOVFUMU5KVkVsUFRseHVJQ0FnSUNBcUwxeHVJQ0FnSUVSSlVrVkRWRTlTWDFOVVFWUlRYMUJQVTBsVVNVOU9PaUJqWXk1Mk1pZ3dMQ0F3S1N4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlEeHdQbHh1SUNBZ0lDQXFJQ0FnSUVsbUlHVnVZV0pzWldRc0lHRmpkR2x2Ym5NZ2RHaGhkQ0JoYkhSbGNpQjBhR1VnY0c5emFYUnBiMjRnY0hKdmNHVnlkSGtnS0dWbk9pQkRRMDF2ZG1WQ2VTd2dRME5LZFcxd1Fua3NJRU5EUW1WNmFXVnlRbmtzSUdWMFl5NHVLU0IzYVd4c0lHSmxJSE4wWVdOclpXUXVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR0p5THo1Y2JpQWdJQ0FnS2lBZ0lDQkpaaUI1YjNVZ2NuVnVJRElnYjNJZ2JXOXlaU0FuY0c5emFYUnBiMjRuSUdGamRHbHZibk1nWVhRZ2RHaGxJSE5oYldVZ2RHbHRaU0J2YmlCaElHNXZaR1VzSUhSb1pXNGdaVzVrSUhCdmMybDBhVzl1SUhkcGJHd2dZbVVnZEdobElITjFiU0J2WmlCaGJHd2dkR2hsSUhCdmMybDBhVzl1Y3k0Z0lDQWdJQ0FnSUR4aWNpOCtYRzRnSUNBZ0lDb2dJQ0FnU1dZZ1pHbHpZV0pzWldRc0lHOXViSGtnZEdobElHeGhjM1FnY25WdUlHRmpkR2x2YmlCM2FXeHNJSFJoYTJVZ1pXWm1aV04wTGx4dUlDQWdJQ0FxSUR3dmNENWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdSVTVCUWt4RlgxTlVRVU5MUVVKTVJWOUJRMVJKVDA1VFhHNGdJQ0FnSUNvdlhHNGdJQ0FnUlU1QlFreEZYMU5VUVVOTFFVSk1SVjlCUTFSSlQwNVRPaUIwY25WbExGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCY2JpQWdJQ0FnS2lCVWFHVWdkR2x0Wlc5MWRDQjBieUJrWlhSbGNtMXBibVVnZDJobGRHaGxjaUJoSUhSdmRXTm9JR2x6SUc1dklHeHZibWRsY2lCaFkzUnBkbVVnWVc1a0lITm9iM1ZzWkNCaVpTQnlaVzF2ZG1Wa0xseHVJQ0FnSUNBcUlGUm9aU0J5WldGemIyNGdkRzhnWVdSa0lIUm9hWE1nZEdsdFpXOTFkQ0JwY3lCa2RXVWdkRzhnWVc0Z2FYTnpkV1VnYVc0Z1dEVWdZbkp2ZDNObGNpQmpiM0psTENCY2JpQWdJQ0FnS2lCM2FHVnVJRmcxSUdseklIQnlaWE5sYm5SbFpDQnBiaUIzWldOb1lYUWdiMjRnUVc1a2NtOXBaQ3dnYVdZZ1lTQjBiM1ZqYUNCcGN5Qm5iR2x6YzJWa0lHWnliMjBnZEdobElHSnZkSFJ2YlNCMWNDd2dZVzVrSUd4bFlYWmxJSFJvWlNCd1lXZGxJR0Z5WldFc1hHNGdJQ0FnSUNvZ2JtOGdkRzkxWTJnZ1kyRnVZMlZzSUdWMlpXNTBJR2x6SUhSeWFXZG5aWEpsWkN3Z1lXNWtJSFJvWlNCMGIzVmphQ0IzYVd4c0lHSmxJR052Ym5OcFpHVnlaV1FnWVdOMGFYWmxJR1p2Y21WMlpYSXVJRnh1SUNBZ0lDQXFJRUZtZEdWeUlHMTFiSFJwY0d4bElIUnBiV1Z6SUc5bUlIUm9hWE1nWVdOMGFXOXVMQ0J2ZFhJZ2JXRjRhVzExYlNCMGIzVmphR1Z6SUc1MWJXSmxjaUIzYVd4c0lHSmxJSEpsWVdOb1pXUWdZVzVrSUdGc2JDQnVaWGNnZEc5MVkyaGxjeUIzYVd4c0lHSmxJR2xuYm05eVpXUXVYRzRnSUNBZ0lDb2dVMjhnZEdocGN5QnVaWGNnYldWamFHRnVhWE50SUdOaGJpQnlaVzF2ZG1VZ2RHaGxJSFJ2ZFdOb0lIUm9ZWFFnYzJodmRXeGtJR0psSUdsdVlXTjBhWFpsSUdsbUlHbDBKM01nYm05MElIVndaR0YwWldRZ1pIVnlhVzVuSUhSb1pTQnNZWE4wSURVd01EQWdiV2xzYkdselpXTnZibVJ6TGx4dUlDQWdJQ0FxSUZSb2IzVm5hQ0JwZENCdGFXZG9kQ0J5WlcxdmRtVWdZU0J5WldGc0lIUnZkV05vSUdsbUlHbDBKM01nYW5WemRDQnViM1FnYlc5MmFXNW5JR1p2Y2lCMGFHVWdiR0Z6ZENBMUlITmxZMjl1WkhNZ2QyaHBZMmdnYVhNZ2JtOTBJR1ZoYzNrZ2QybDBhQ0IwYUdVZ2MyVnVjMmxpYVd4cGRIa2diMllnYlc5aWFXeGxJSFJ2ZFdOb0lITmpjbVZsYmk1Y2JpQWdJQ0FnS2lCWmIzVWdZMkZ1SUcxdlpHbG1lU0IwYUdseklIWmhiSFZsSUhSdklHaGhkbVVnWVNCaVpYUjBaWElnWW1Wb1lYWnBiM0lnYVdZZ2VXOTFJR1pwYm1RZ2FYUW5jeUJ1YjNRZ1pXNXZkV2RvTGx4dUlDQWdJQ0FxSUNFamVtaGNiaUFnSUNBZ0tpRG5sS2prdW83bmxJVGxpS3ZrdUlEa3VLcm9wNmJuZ3JubHI3bm9zYUhtbUsvbGtLYmx0N0xudTQvbHBMSG1sWWpsdWJia3VKVGxqNi9rdTZYb29xdm5wN3ZwbWFUbm1vVGx1N2JtbDdibWw3YnBsYjljYmlBZ0lDQWdLaURtdDd2bGlxRG92NW5rdUtybWw3YnBsYi9ubW9UbGpwL2xtNkRtbUs4Z1dEVWc1WWFGNXFDNDVaeW81YjZ1NUwraDVyV1A2S2VJNVptbzVMaXQ1WWU2NTQ2dzU1cUU1TGlBNUxpcUlHSjFaK09BZ2x4dUlDQWdJQ0FxSU9XY3FPaS9tZVM0cXVlT3IrV2lnK1M0aSsrOGpPV21ndWFlbk9lVXFPYUl0K1d3aHVTNGdPUzRxdWlucHVlQ3VlUzdqdVc2bGVXUWtlUzRpdWVudStXSHV1bWh0ZW1kb3VXTXV1V2ZuKys4ak9Xd2h1UzRqZVM4bXVpbnB1V1BrZVM3dStTOWxTQjBiM1ZqYUNCallXNWpaV3dnNW9pV0lIUnZkV05vSUdWdVpDRGt1b3ZrdTdidnZJem9nSXpvdjVua3VLcm9wNmJuZ3Jua3ZKcm9vcXZtc0xqb3Y1emx2WlBrdlp6bGdaem5sWm5sbktqcG9iWHBuYUxrdUlybm1vVG1uSW5tbFlqb3A2Ym5ncm5qZ0lKY2JpQWdJQ0FnS2lEcGg0M2xwSTNvdjVubW9MZm1rNDNrdlp6bGg2RG1yS0hrdVl2bGtJN3Z2SXpsc1kvbHVaWGt1SXJubW9Ub3A2Ym5ncm5tbGJEcGg0L2xzSWJvdnI3bGlMRG1pSkhrdTZ6bm1vVGt1b3ZrdTdibnM3dm51NS9taVlEbWxLL21qSUhubW9UbW5JRHBxNWpvcDZibmdybm1sYkRwaDQvdnZJemt1WXZsa0k3bWlZRG1uSW5ubW9Ub3A2Ym1rYmprdW92a3U3YnBnNzNsc0lib29xdmx2NzNubGFYamdJSmNiaUFnSUNBZ0tpRG1pWURrdTZYb3Y1bmt1S3JtbHJEbm1vVG1uTHJsaUxibGo2L2t1Nlhsbktqb3A2Ym5ncm5sbktqa3VJRGxycHJtbDdicGw3VGxob1htc3FIbW5Jbmt1N3ZrdlpYbW03VG1sckRubW9UbWc0WGxoclhrdUl2b3A0Ymt1THJscExIbWxZam9wNmJuZ3JubHViYmt1NDdrdW92a3U3Ym5zN3ZudTUva3VLM25wN3ZwbWFUamdJSmNiaUFnSUNBZ0tpRGx2WlBuaExidnZJem92NW5rdVovbGo2L29nNzNucDd2cG1hVGt1SURrdUtybm5KL2xycDdubW9Ub3A2Ym5ncm52dkl6bHBvTG1ucHpubEtqbWlMZm5tb1RvcDZibmdybm5uSi9ubW9UbG5Lamt1SURscnBybWw3YnBsN1RtcnJYbGhvWGxyb3psaGFqbXNxSG1uSW5ucDd2bGlxanZ2SWpvdjVubG5Lamx2WlBsaVkzbWlZdm1uTHJsc1kvbHVaWG5tb1RuZ2JYbWxZL2x1cWJrdUl2a3ZKcmx2b2pwbXI3dnZJbmpnSUpjYmlBZ0lDQWdLaURrdmFEbGo2L2t1NlhrdjY3bWxMbm92NW5rdUtybGdMem1uYVhvanJmbHZwZmt2YURwbklEb3BvSG5tb1RtbFlqbW5wenZ2SXpwdTVqb3JxVGxnTHptbUs4Z05UQXdNQ0RtcjZ2bnA1TGpnSUpjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTA1MWJXSmxjbjBnVkU5VlEwaGZWRWxOUlU5VlZGeHVJQ0FnSUNBcUwxeHVJQ0FnSUZSUFZVTklYMVJKVFVWUFZWUTZJRFV3TURBc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZ4dUlDQWdJQ0FxSUZSb1pTQnRZWGhwYlhWdElIWmxjblJsZUNCamIzVnVkQ0JtYjNJZ1lTQnphVzVuYkdVZ1ltRjBZMmhsWkNCa2NtRjNJR05oYkd3dVhHNGdJQ0FnSUNvZ0lTTjZhRnh1SUNBZ0lDQXFJT2FjZ09Xa3ArV1ByK1M3cGVpaXErV05sZWFzb2VhSnVlV2toT2VRaHVhNHN1YWZrK2VhaE9taHR1ZUN1ZWFWc09tSGorT0FnbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0JDUVZSRFNGOVdSVkpVUlZoZlEwOVZUbFJjYmlBZ0lDQWdLaTljYmlBZ0lDQkNRVlJEU0Y5V1JWSlVSVmhmUTA5VlRsUTZJREl3TURBd0xGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCY2JpQWdJQ0FnS2lCWGFHVjBhR1Z5SUc5eUlHNXZkQ0JsYm1GaWJHVmtJSFJwYkdWa0lHMWhjQ0JoZFhSdklHTjFiR3hwYm1jdUlFbG1JSGx2ZFNCelpYUWdkR2hsSUZScGJHVmtUV0Z3SUhOclpYY2diM0lnY205MFlYUnBiMjRzSUhSb1pXNGdibVZsWkNCMGJ5QnRZVzUxWVd4c2VTQmthWE5oWW14bElIUm9hWE1zSUc5MGFHVnlkMmx6WlN3Z2RHaGxJSEpsYm1SbGNtbHVaeUIzYVd4c0lHSmxJSGR5YjI1bkxseHVJQ0FnSUNBcUlDRWplbWhjYmlBZ0lDQWdLaURtbUsvbGtLYmx2SURsa0svbms2Ym5pWWZsbkxEbG03N25tb1RvaDZybGlxam9vNEhsaDQvbGlwL29nNzNqZ0lMbms2Ym5pWWZsbkxEbG03N2xwb0xtbnB6b3JyN252YTdrdW9ZZ2MydGxkeXdnY205MFlYUnBiMjRnNTVxRTZLK2Q3N3lNNlp5QTZLYUI1b21MNVlxbzVZV3o2WmV0Nzd5TTVaQ201WWlaNXJpeTVwK1Q1THlhNVllNjZaU1o0NENDWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0Q2IyOXNaV0Z1ZlNCRlRrRkNURVZmVkVsTVJVUk5RVkJmUTFWTVRFbE9SMXh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJSFJ5ZFdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JGVGtGQ1RFVmZWRWxNUlVSTlFWQmZRMVZNVEVsT1J6b2dkSEoxWlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnWEc0Z0lDQWdJQ29nVkdobElHMWhlQ0JqYjI1amRYSnlaVzUwSUhSaGMyc2diblZ0WW1WeUlHWnZjaUIwYUdVZ1pHOTNibXh2WVdSbGNseHVJQ0FnSUNBcUlDRWplbWhjYmlBZ0lDQWdLaURrdUl2b3ZiM2t1N3ZsaXFIbm1vVG1uSURscEtmbHViYmxqNUhtbGJEcG1aRGxpTGJ2dkl6bG5Lamxyb25salpQbHViUGxqN0RwZzZqbGlJYm1uTHJsbm92bWlKYm5pWWptbkt6a3VJcmxqNi9vZzczcG5JRG9wb0hwbVpEbGlMYmxuS2pvdm9Qa3ZZN25tb1Rtc0xUbHViTmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdSRTlYVGt4UFFVUmZUVUZZWDBOUFRrTlZVbEpGVGxSY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENBMk5GeHVJQ0FnSUNBcUwxeHVJQ0FnSUVSUFYwNU1UMEZFWDAxQldGOURUMDVEVlZKU1JVNVVPaUEyTkN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnWEc0Z0lDQWdJQ29nUW05dmJHVmhiaUIwYUdGMElHbHVaR2xqWVhSbGN5QnBaaUIwYUdVZ1kyRnVkbUZ6SUdOdmJuUmhhVzV6SUdGdUlHRnNjR2hoSUdOb1lXNXVaV3dzSUdSbFptRjFiSFFnYzJWMGN5QjBieUJtWVd4elpTQm1iM0lnWW1WMGRHVnlJSEJsY21admNtMWhibU5sTGx4dUlDQWdJQ0FxSUZSb2IzVm5hQ0JwWmlCNWIzVWdkMkZ1ZENCMGJ5QnRZV3RsSUhsdmRYSWdZMkZ1ZG1GeklHSmhZMnRuY205MWJtUWdkSEpoYm5Od1lYSmxiblFnWVc1a0lITm9iM2NnYjNSb1pYSWdaRzl0SUdWc1pXMWxiblJ6SUdGMElIUm9aU0JpWVdOclozSnZkVzVrTENCY2JpQWdJQ0FnS2lCNWIzVWdZMkZ1SUhObGRDQnBkQ0IwYnlCMGNuVmxJR0psWm05eVpTQmdZMk11WjJGdFpTNXlkVzVnTGx4dUlDQWdJQ0FxSUZkbFlpQnZibXg1TGx4dUlDQWdJQ0FxSUNFamVtaGNiaUFnSUNBZ0tpRG5sS2prdW83b3JyN252YTRnUTJGdWRtRnpJT2lEak9hWnIrYVlyK1dRcHVhVXIrYU1nU0JoYkhCb1lTRHBnSnJwZ1pQdnZJenB1NWpvcnFUa3VMb2dabUZzYzJYdnZJem92NW5tb0xmbGo2L2t1NlhtbklubW03VHBxNWpubW9UbWdLZm9nNzNvb2FqbmpyRGpnSUpjYmlBZ0lDQWdLaURscG9MbW5wemt2YURsdUl6bW5Kc2dRMkZ1ZG1GeklPaURqT2FacithWXIrbUFqK2FZanVlYWhPKzhqT1c1dHVhWXZ1ZWt1dWlEak9XUWp1ZWFoT1dGdHVTN2xpQkVUMDBnNVlXRDU3U2c3N3lNNUwyZzVZK3Y1THVsNVp5b0lHQmpZeTVuWVcxbExuSjFibUFnNUxtTDVZbU41YkNHNkwrWjVMaXE1WUM4Nks2KzVMaTZJSFJ5ZFdYamdJSmNiaUFnSUNBZ0tpRGt1NFhtbEsvbWpJRWdWMlZpWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0Q2IyOXNaV0Z1ZlNCRlRrRkNURVZmVkZKQlRsTlFRVkpGVGxSZlEwRk9Wa0ZUWEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnWm1Gc2MyVmNiaUFnSUNBZ0tpOWNiaUFnSUNCRlRrRkNURVZmVkZKQlRsTlFRVkpGVGxSZlEwRk9Wa0ZUT2lCbVlXeHpaU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0tpQkNiMjlzWldGdUlIUm9ZWFFnYVc1a2FXTmhkR1Z6SUdsbUlIUm9aU0JYWldKSFRDQmpiMjUwWlhoMElHbHpJR055WldGMFpXUWdkMmwwYUNCZ1lXNTBhV0ZzYVdGellDQnZjSFJwYjI0Z2RIVnlibVZrSUc5dUxDQmtaV1poZFd4MElIWmhiSFZsSUdseklHWmhiSE5sTGx4dUlDQWdJQ0FxSUZObGRDQnBkQ0IwYnlCMGNuVmxJR052ZFd4a0lHMWhhMlVnZVc5MWNpQm5ZVzFsSUdkeVlYQm9hV056SUhOc2FXZG9kR3g1SUhOdGIyOTBhR1Z5TENCc2FXdGxJSFJsZUhSMWNtVWdhR0Z5WkNCbFpHZGxjeUIzYUdWdUlISnZkR0YwWldRdVhHNGdJQ0FnSUNvZ1YyaGxkR2hsY2lCMGJ5QjFjMlVnZEdocGN5QnlaV0ZzYkhrZ1pHVndaVzVrSUc5dUlIbHZkWElnWjJGdFpTQmtaWE5wWjI0Z1lXNWtJSFJoY21kbGRHVmtJSEJzWVhSbWIzSnRMQ0JjYmlBZ0lDQWdLaUJrWlhacFkyVWdkMmwwYUNCeVpYUnBibUVnWkdsemNHeGhlU0IxYzNWaGJHeDVJR2hoZG1VZ1oyOXZaQ0JrWlhSaGFXd2diMjRnWjNKaGNHaHBZM01nZDJsMGFDQnZjaUIzYVhSb2IzVjBJSFJvYVhNZ2IzQjBhVzl1TENCY2JpQWdJQ0FnS2lCNWIzVWdjSEp2WW1GaWJIa2daRzl1SjNRZ2QyRnVkQ0JoYm5ScFlXeHBZWE1nYVdZZ2VXOTFjaUJuWVcxbElITjBlV3hsSUdseklIQnBlR1ZzSUdGeWRDQmlZWE5sWkM1Y2JpQWdJQ0FnS2lCQmJITnZMQ0JwZENCamIzVnNaQ0JvWVhabElHZHlaV0YwSUhCbGNtWnZjbTFoYm1ObElHbHRjR0ZqZENCM2FYUm9JSE52YldVZ1luSnZkM05sY2lBdklHUmxkbWxqWlNCMWMybHVaeUJ6YjJaMGQyRnlaU0JOVTBGQkxseHVJQ0FnSUNBcUlGbHZkU0JqWVc0Z2MyVjBJR2wwSUhSdklIUnlkV1VnWW1WbWIzSmxJR0JqWXk1bllXMWxMbkoxYm1BdVhHNGdJQ0FnSUNvZ1YyVmlJRzl1YkhrdVhHNGdJQ0FnSUNvZ0lTTjZhRnh1SUNBZ0lDQXFJT2VVcU9TNmp1aXV2dWU5cnVXY3FPV0ltK1c3dWlCWFpXSkhUQ0JEYjI1MFpYaDBJT2FYdHVhWXIrV1FwdVc4Z09XUXIrYUtsK21VcittOXYrbUFpZW1odWUrOGpPbTdtT2l1cE9XQXZPYVlyeUJtWVd4elplT0FnbHh1SUNBZ0lDQXFJT1d3aHVpL21lUzRxdW1BaWVtaHVlaXV2dWU5cnVTNHVpQjBjblZsSU9TOG11aXVxZVM5b09lYWhPYTR1T2FJaitlVXUrbWRvdWVvamVlb2plVzVzK2E3a2VTNGdPUzZtKys4ak9hdmxPV21ndWFYaStpOXJPZWhyT2krdWVpMHRPV2J2dWFYdHVlYWhPbVVyK205ditPQWd1YVlyK1dRcHVXOGdPV1FyK2kvbWVTNHF1bUFpZW1odWVXK2lPV2twK2VvaStXNnB1UzRpdVdQbHVXR3MrUzZqdVM5b09lYWhPYTR1T2FJaitXU2pPbWRvdVdRa2VlYWhPVzVzK1dQc09PQWdseHVJQ0FnSUNBcUlPV2NxT1drcCtXa211YVZzT2FMcGVhY2lTQnlaWFJwYm1FZzU3cW41WWlyNWJHUDVibVY1NXFFNks2KzVhU0g1TGlLNTVTbzVvaTM1YjZBNWI2QTVwZWc1ck9WNVl5NjVZaUc2TCtaNUxpcTZZQ0o2YUc1NWJpbTVwMmw1NXFFNVkrWTVZeVc3N3liNWFhQzVwNmM1TDJnNTVxRTVyaTQ1b2lQNllDSjVvdXA1WU9QNTdTZzZJbTY1cHl2NmFPTzVxQzg3N3lNNUwyZzVMbWY1YVNhNVkySzVMaU41THlhNW9PejVieUE1WkN2NkwrWjVMaXE2WUNKNmFHNTQ0Q0NYRzRnSUNBZ0lDb2c1WkNNNXBlMjc3eU01WnlvNWJDUjZZT281WWlHNUwyLzU1U282TDJ2NUx1MjU3cW41WWlyNW9xWDZaU3Y2YjIvNTY2WDVyT1Y1NXFFNks2KzVhU0g1b2lXNXJXUDZLZUk1Wm1vNUxpSzc3eU02TCtaNUxpcTZZQ0o2YUc1NUx5YTVhKzU1b0NuNklPOTVMcW41NVNmNXErVTZMNkQ1YVNuNTVxRTViMng1Wk9ONDRDQ1hHNGdJQ0FnSUNvZzVMMmc1WSt2NUx1bDVaeW9JR0JqWXk1bllXMWxMbkoxYm1BZzVMbUw1WW1ONks2KzU3MnU2TCtaNUxpcTVZQzg3N3lNNVpDbTVZaVo1YTZENUxpTjVMeWE1NVNmNXBXSTQ0Q0NYRzRnSUNBZ0lDb2c1THVGNXBTdjVveUJJRmRsWWx4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1FtOXZiR1ZoYm4wZ1JVNUJRa3hGWDFkRlFrZE1YMEZPVkVsQlRFbEJVMXh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJR1poYkhObFhHNGdJQ0FnSUNvdlhHNGdJQ0FnUlU1QlFreEZYMWRGUWtkTVgwRk9WRWxCVEVsQlV6b2dabUZzYzJVc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nVjJobGRHaGxjaUJ2Y2lCdWIzUWdaVzVoWW14bElHRjFkRzhnWTNWc2JHbHVaeTVjYmlBZ0lDQWdLaUJVYUdseklHWmxZWFIxY21VZ2FHRjJaU0JpWldWdUlISmxiVzkyWldRZ2FXNGdkakl1TUNCdVpYY2djbVZ1WkdWeVpYSWdaSFZsSUhSdklHOTJaWEpoYkd3Z2NHVnlabTl5YldGdVkyVWdZMjl1YzNWdGNIUnBiMjR1WEc0Z0lDQWdJQ29nVjJVZ2FHRjJaU0J1YnlCd2JHRnVJR04xY25KbGJuUnNlU0IwYnlCeVpTMWxibUZpYkdVZ1lYVjBieUJqZFd4c2FXNW5MbHh1SUNBZ0lDQXFJRWxtSUhsdmRYSWdaMkZ0WlNCb1lYWmxJRzF2Y21VZ1pIbHVZVzFwWXlCdlltcGxZM1J6TENCM1pTQnpkV2RuWlhOMElIUnZJR1JwYzJGaWJHVWdZWFYwYnlCamRXeHNhVzVuTGx4dUlDQWdJQ0FxSUVsbUlIbHZkWElnWjJGdFpTQm9ZWFpsSUcxdmNtVWdjM1JoZEdsaklHOWlhbVZqZEhNc0lIZGxJSE4xWjJkbGMzUWdkRzhnWlc1aFlteGxJR0YxZEc4Z1kzVnNiR2x1Wnk1Y2JpQWdJQ0FnS2lBaEkzcG9YRzRnSUNBZ0lDb2c1cGl2NVpDbTVieUE1WkN2NkllcTVZcW82S09CNVllUDVZcWY2SU85Nzd5TTVieUE1WkN2NktPQjVZZVA1WXFmNklPOTViQ0c1THlhNW9xSzVaeW81YkdQNWJtVjVhU1c1NXFFNTRtcDVMMlQ1THVPNXJpeTVwK1Q2WmlmNVlpWDVMaXQ1WTY3NlptazVvNko0NENDWEc0Z0lDQWdJQ29nNkwrWjVMaXE1WXFmNklPOTVaeW9JSFl5TGpBZzU1cUU1cGF3NXJpeTVwK1Q1Wm1vNUxpdDZLS3I1NmU3NlptazVMcUc3N3lNNVp1ZzVMaTY1YTZENVp5bzVhU241YVNhNXBXdzVyaTQ1b2lQNUxpdDVvbUE1YmltNXAybDU1cUU1bzJmNklDWDZLYUI2YXVZNUxxTzVvQ242SU85NTVxRTVvK1E1WTJINzd5TTU1dXU1WW1ONW9pUjVMdXM1cktoNXB5SjZLNmg1WWlTNlllTjVwYXc1cFN2NW95QjZJZXE1WXFvNktPQjVZbXE0NENDWEc0Z0lDQWdJQ29nNWFhQzVwNmM1cmk0NW9pUDVMaXQ1NXFFNVlxbzVvQ0I1NG1wNUwyVDVxK1U2TDZENWFTYTU1cUU2SytkNzd5TTVidTY2SzZ1NWJDRzVxMms2WUNKNmFHNTVZV3o2WmV0NDRDQ1hHNGdJQ0FnSUNvZzVhYUM1cDZjNXJpNDVvaVA1TGl0NTVxRTZaMlo1b0NCNTRtcDVMMlQ1cStVNkw2RDVhU2E1NXFFNksrZDc3eU01YnU2Nks2dTViQ0c1cTJrNllDSjZhRzU1b21UNWJ5QTQ0Q0NYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRDYjI5c1pXRnVmU0JGVGtGQ1RFVmZRMVZNVEVsT1IxeHVJQ0FnSUNBcUlFQmtaWEJ5WldOaGRHVmtJSE5wYm1ObElIWXlMakJjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0JtWVd4elpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUVWT1FVSk1SVjlEVlV4TVNVNUhPaUJtWVd4elpTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnS2lCWGFHVjBhR1Z5SUc5eUlHNXZkQ0JqYkdWaGNpQmtiMjBnU1cxaFoyVWdiMkpxWldOMElHTmhZMmhsSUdGbWRHVnlJSFZ3Ykc5aFpHbHVaeUIwYnlCbmJDQjBaWGgwZFhKbExseHVJQ0FnSUNBcUlFTnZibU55WlhSbGJIa3NJSGRsSUdGeVpTQnpaWFIwYVc1bklHbHRZV2RsTG5OeVl5QjBieUJsYlhCMGVTQnpkSEpwYm1jZ2RHOGdjbVZzWldGelpTQjBhR1VnWTJGamFHVXVYRzRnSUNBZ0lDb2dUbTl5YldGc2JIa2dlVzkxSUdSdmJpZDBJRzVsWldRZ2RHOGdaVzVoWW14bElIUm9hWE1nYjNCMGFXOXVMQ0JpWldOaGRYTmxJRzl1SUhkbFlpQjBhR1VnU1cxaFoyVWdiMkpxWldOMElHUnZaWE51SjNRZ1kyOXVjM1Z0WlNCMGIyOGdiWFZqYUNCdFpXMXZjbmt1WEc0Z0lDQWdJQ29nUW5WMElHOXVJRmRsUTJoaGRDQkhZVzFsSUhCc1lYUm1iM0p0TENCMGFHVWdZM1Z5Y21WdWRDQjJaWEp6YVc5dUlHTmhZMmhsSUdSbFkyOWtaV1FnWkdGMFlTQnBiaUJKYldGblpTQnZZbXBsWTNRc0lIZG9hV05vSUdoaGN5Qm9hV2RvSUcxbGJXOXllU0IxYzJGblpTNWNiaUFnSUNBZ0tpQlRieUIzWlNCbGJtRmliR1ZrSUhSb2FYTWdiM0IwYVc5dUlHSjVJR1JsWm1GMWJIUWdiMjRnVjJWRGFHRjBMQ0J6YnlCMGFHRjBJSGRsSUdOaGJpQnlaV3hsWVhObElFbHRZV2RsSUdOaFkyaGxJR2x0YldWa2FXRjBaV3g1SUdGbWRHVnlJSFZ3Ykc5aFpHVmtJSFJ2SUVkUVZTNWNiaUFnSUNBZ0tpQWhJM3BvWEc0Z0lDQWdJQ29nNXBpdjVaQ201WnlvNWJDRzZMUzA1WnUrNUxpSzVMeWc2SWV6SUVkUVZTRGt1WXZsa0k3bGlLRHBtYVFnUkU5TklFbHRZV2RsSU9lOGsrV3RtT09BZ2x4dUlDQWdJQ0FxSU9XRnQrUzlrK2FkcGVpdnRPKzhqT2FJa2VTN3JPbUFtdWkvaCtpdXZ1ZTlyaUJwYldGblpTNXpjbU1nNUxpNjU2bTY1YTJYNTZ5bTVMaXk1cDJsNlllSzVwUys2TCtaNllPbzVZaUc1WWFGNWEyWTQ0Q0NYRzRnSUNBZ0lDb2c1cTJqNWJpNDVvT0Y1WWExNUxpTDc3eU01TDJnNUxpTjZaeUE2S2FCNWJ5QTVaQ3Y2TCtaNUxpcTZZQ0o2YUc1Nzd5TTVadWc1TGk2NVp5b0lIZGxZaURsdWJQbGo3RHZ2SXhKYldGblpTRGxyN25vc2FIbWlZRGxqYURubEtqbm1vVGxob1hsclpqbHZvamxzSS9qZ0lKY2JpQWdJQ0FnS2lEa3ZZYm1tSy9sbktqbHZxN2t2Nkhsc0kvbXVMam1pSS9sdWJQbGo3RG5tb1RsdlpQbGlZM25pWWptbkt6dnZJeEpiV0ZuWlNEbHI3bm9zYUhrdkpybnZKUGxyWmpvcDZQbm9JSGxrSTdubW9UbG03N25pWWZtbGJEbWphN3Z2SXpscm9QbWlZRGxqYURubEtqbm1vVGxob1hsclpqbnFicnBsN1Rsdm9qbHBLZmpnSUpjYmlBZ0lDQWdLaURtaVlEa3U2WG1pSkhrdTZ6bG5Lamx2cTdrdjZIbHViUGxqN0RwdTVqb3JxVGx2SURsa0sva3VvYm92NW5rdUtycGdJbnBvYm52dkl6b3Y1bm1vTGZtaUpIa3U2emxzTEhsajYva3U2WGxuS2prdUlya3ZLQWdSMHdnNkxTMDVadSs1TG1MNVpDTzU2dUw1WTJ6NlllSzVwUytJRWx0WVdkbElPV3Z1ZWl4b2VlYWhPV0doZVd0bU8rOGpPbUJ2K1dGamVpL2grbXJtT2VhaE9XR2hlV3RtT1dOb09lVXFPT0FnbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3UW05dmJHVmhibjBnUTB4RlFVNVZVRjlKVFVGSFJWOURRVU5JUlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUdaaGJITmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1EweEZRVTVWVUY5SlRVRkhSVjlEUVVOSVJUb2dabUZzYzJVc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nVjJobGRHaGxjaUJ2Y2lCdWIzUWdjMmh2ZHlCdFpYTm9JSGRwY21VZ1puSmhiV1V1WEc0Z0lDQWdJQ29nSVNONmFGeHVJQ0FnSUNBcUlPYVlyK1dRcHVhWXZ1ZWt1dWU5a2VhZ3ZPZWFoT2U2dithaGh1T0FnbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3UW05dmJHVmhibjBnVTBoUFYxOU5SVk5JWDFkSlVrVkdVa0ZOUlZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUdaaGJITmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1UwaFBWMTlOUlZOSVgxZEpVa1ZHVWtGTlJUb2dabUZzYzJVc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nVTJWMElHTmpMbEp2ZEdGMFpWUnZMMk5qTGxKdmRHRjBaVUo1SUhKdmRHRjBaU0JrYVhKbFkzUnBiMjR1WEc0Z0lDQWdJQ29nU1dZZ2JtVmxaQ0J6WlhRZ2NtOTBZWFJsSUhCdmMybDBhWFpsSUdScGNtVmpkR2x2YmlCMGJ5QmpiM1Z1ZEdWeVkyeHZZMnQzYVhObExDQndiR1ZoYzJVZ1kyaGhibWRsSUhObGRIUnBibWNnZEc4Z09pQmpZeTV0WVdOeWJ5NVNUMVJCVkVWZlFVTlVTVTlPWDBORFZ5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNvZ0lTTjZhRnh1SUNBZ0lDQXFJT2l1dnVlOXJpQmpZeTVTYjNSaGRHVlVieTlqWXk1U2IzUmhkR1ZDZVNEbm1vVG1sNHZvdmF6bWxybmxrSkhqZ0lKY2JpQWdJQ0FnS2lEbHBvTG1ucHpwbklEb3BvSG9ycjdudmE3bWw0dm92YXpubW9UbXJhUG1scm5sa0pIa3VMcnBnSWJtbDdicGtvam1scm5sa0pIdnZJem9yN2ZvcnI3bnZhN3BnSW5wb2Jua3VMcnZ2Sm9nWTJNdWJXRmpjbTh1VWs5VVFWUkZYMEZEVkVsUFRsOURRMWNnUFNCMGNuVmxPMXh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3UW05dmJHVmhibjBnVWs5VVFWUkZYMEZEVkVsUFRsOURRMWRjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0JtWVd4elpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUZKUFZFRlVSVjlCUTFSSlQwNWZRME5YT2lCbVlXeHpaVnh1ZlR0Y2JseHVYRzVzWlhRZ1UxVlFVRTlTVkY5VVJWaFVWVkpGWDBaUFVrMUJWRk1nUFNCYkp5NWhjM1JqSnl3Z0p5NXdhMjBuTENBbkxuQjJjaWNzSUNjdWQyVmljQ2NzSUNjdWFuQm5KeXdnSnk1cWNHVm5KeXdnSnk1aWJYQW5MQ0FuTG5CdVp5ZGRPMXh1WEc0dktpcGNiaUFxSUNGbGJseHVJQ29nVkdobElHbHRZV2RsSUdadmNtMWhkQ0J6ZFhCd2IzSjBaV1FnWW5rZ2RHaGxJR1Z1WjJsdVpTQmtaV1poZFd4MGN5d2dZVzVrSUhSb1pTQnpkWEJ3YjNKMFpXUWdabTl5YldGMGN5QnRZWGtnWkdsbVptVnlJR2x1SUdScFptWmxjbVZ1ZENCaWRXbHNaQ0J3YkdGMFptOXliWE1nWVc1a0lHUmxkbWxqWlNCMGVYQmxjeTVjYmlBcUlFTjFjbkpsYm5Sc2VTQmhiR3dnY0d4aGRHWnZjbTBnWVc1a0lHUmxkbWxqWlNCemRYQndiM0owSUZzbkxuZGxZbkFuTENBbkxtcHdaeWNzSUNjdWFuQmxaeWNzSUNjdVltMXdKeXdnSnk1d2JtY25YU3dnVkdobElHbFBVeUJ0YjJKcGJHVWdjR3hoZEdadmNtMGdZV3h6YnlCemRYQndiM0owY3lCMGFHVWdVRlpTSUdadmNtMWhkT09BZ2x4dUlDb2dJWHBvWEc0Z0tpRGx2SlhtazQ3cHU1am9ycVRtbEsvbWpJSG5tb1RsbTc3bmlZZm1vTHpsdkkvdnZJem1sSy9taklIbm1vVG1vTHpsdkkvbGo2L29nNzNsbktqa3VJM2xrSXpubW9UbW5vVGx1N3JsdWJQbGo3RGxrb3pvcnI3bHBJZm5zYnZsbm92a3VJcm1uSW5taVlEbHQ2N2xpS3ZqZ0lKY2JpQXFJT2VicnVXSmplYUpnT2FjaWVXNXMrV1BzT1dTak9pdXZ1V2toK2FVcithTWdlZWFoT2Fndk9XOGorYWNpU0JiSnk1M1pXSndKeXdnSnk1cWNHY25MQ0FuTG1wd1pXY25MQ0FuTG1KdGNDY3NJQ2N1Y0c1bkoxMHVJT1dQcHVXa2xpQkpiM01nNW9tTDVweTY1Ym16NVkrdzZMK1k2YUtkNWFTVzVwU3Y1b3lCNUxxR0lGQldVaURtb0x6bHZJL2pnSUpjYmlBcUlFQndjbTl3WlhKMGVTQjdXMU4wY21sdVoxMTlJRk5WVUZCUFVsUmZWRVZZVkZWU1JWOUdUMUpOUVZSVFhHNGdLaTljYm1OakxtMWhZM0p2TGxOVlVGQlBVbFJmVkVWWVZGVlNSVjlHVDFKTlFWUlRJRDBnVTFWUVVFOVNWRjlVUlZoVVZWSkZYMFpQVWsxQlZGTTdYRzVjYmx4dUx5b3FYRzRnS2lBaEkyVnVJRXRsZVNCdFlYQWdabTl5SUd0bGVXSnZZWEprSUdWMlpXNTBYRzRnS2lBaEkzcG9JT21VcnVlYm1PUzZpK1M3dHVlYWhPYU1pZW1VcnVXQXZGeHVJQ29nUUdWdWRXMGdiV0ZqY204dVMwVlpYRzRnS2lCQVpYaGhiWEJzWlNCN1FHeHBibXNnWTI5amIzTXlaQzlqYjNKbEwzQnNZWFJtYjNKdEwwTkRRMjl0Ylc5dUwwdEZXUzVxYzMxY2JpQXFMMXh1WTJNdWJXRmpjbTh1UzBWWklEMGdlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1RtOXVaVnh1SUNBZ0lDQXFJQ0VqZW1nZzVyS2g1cHlKNVlpRzZZV05YRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJRzV2Ym1WY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ5WldGa2IyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHNXZibVU2TUN4Y2JseHVJQ0FnSUM4dklHRnVaSEp2YVdSY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCaVlXTnJJR3RsZVZ4dUlDQWdJQ0FxSUNFamVtZ2c2TCtVNVp1ZTZaU3VYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJR0poWTJ0Y2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ5WldGa2IyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHSmhZMnM2Tml4Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCdFpXNTFJR3RsZVZ4dUlDQWdJQ0FxSUNFamVtZ2c2SStjNVkyVjZaU3VYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJRzFsYm5WY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ5WldGa2IyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHMWxiblU2TVRnc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZSb1pTQmlZV05yYzNCaFkyVWdhMlY1WEc0Z0lDQWdJQ29nSVNONmFDRHBnSURtb0x6cGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dZbUZqYTNOd1lXTmxYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JpWVdOcmMzQmhZMlU2T0N4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElIUmhZaUJyWlhsY2JpQWdJQ0FnS2lBaEkzcG9JRlJoWWlEcGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dkR0ZpWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNCMFlXSTZPU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUdWdWRHVnlJR3RsZVZ4dUlDQWdJQ0FxSUNFamVtZ2c1WnVlNkwybTZaU3VYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJR1Z1ZEdWeVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQmxiblJsY2pveE15eGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJSE5vYVdaMElHdGxlVnh1SUNBZ0lDQXFJQ0VqZW1nZ1UyaHBablFnNlpTdVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlITm9hV1owWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNCemFHbG1kRG94Tml3Z0x5OXphRzkxYkdRZ2RYTmxJSE5vYVdaMGEyVjVJR2x1YzNSbFlXUmNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJR04wY213Z2EyVjVYRzRnSUNBZ0lDb2dJU042YUNCRGRISnNJT21Vcmx4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCamRISnNYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqZEhKc09qRTNMQ0F2TDNOb2IzVnNaQ0IxYzJVZ1kzUnliR3RsZVZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ1lXeDBJR3RsZVZ4dUlDQWdJQ0FxSUNFamVtZ2dRV3gwSU9tVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQmhiSFJjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdGc2REb3hPQ3dnTHk5emFHOTFiR1FnZFhObElHRnNkR3RsZVZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ2NHRjFjMlVnYTJWNVhHNGdJQ0FnSUNvZ0lTTjZhQ0RtbW9MbGdaenBsSzVjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnY0dGMWMyVmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEJoZFhObE9qRTVMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnWTJGd2N5QnNiMk5ySUd0bGVWeHVJQ0FnSUNBcUlDRWplbWdnNWFTbjVZYVo2WlNCNWE2YTZaU3VYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJR05oY0hOc2IyTnJYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqWVhCemJHOWphem95TUN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElHVnpZeUJyWlhsY2JpQWdJQ0FnS2lBaEkzcG9JRVZUUXlEcGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2daWE5qWVhCbFhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQmxjMk5oY0dVNk1qY3NYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGUm9aU0J6Y0dGalpTQnJaWGxjYmlBZ0lDQWdLaUFoSTNwb0lPZXB1dWFndk9tVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQnpjR0ZqWlZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzQmhZMlU2TXpJc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZSb1pTQndZV2RsSUhWd0lHdGxlVnh1SUNBZ0lDQXFJQ0VqZW1nZzVaQ1I1TGlLNTcrNzZhRzE2WlN1WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUhCaFoyVjFjRnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0dGblpYVndPak16TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ2NHRm5aU0JrYjNkdUlHdGxlVnh1SUNBZ0lDQXFJQ0VqZW1nZzVaQ1I1TGlMNTcrNzZhRzE2WlN1WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUhCaFoyVmtiM2R1WEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNCd1lXZGxaRzkzYmpvek5DeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJR1Z1WkNCclpYbGNiaUFnSUNBZ0tpQWhJM3BvSU9lN2srYWRuK21Vcmx4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCbGJtUmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJR1Z1WkRvek5TeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJR2h2YldVZ2EyVjVYRzRnSUNBZ0lDb2dJU042YUNEa3VMdm9qNXpsalpYcGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dhRzl0WlZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHOXRaVG96Tml4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElHeGxablFnYTJWNVhHNGdJQ0FnSUNvZ0lTTjZhQ0Rsa0pIbHQ2Ym5ycTNscExUcGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2diR1ZtZEZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JHVm1kRG96Tnl4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElIVndJR3RsZVZ4dUlDQWdJQ0FxSUNFamVtZ2c1WkNSNUxpSzU2NnQ1YVMwNlpTdVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIVndYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IxY0Rvek9DeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJSEpwWjJoMElHdGxlVnh1SUNBZ0lDQXFJQ0VqZW1nZzVaQ1I1WSt6NTY2dDVhUzA2WlN1WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUhKcFoyaDBYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5YVdkb2REb3pPU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUdSdmQyNGdhMlY1WEc0Z0lDQWdJQ29nSVNONmFDRGxrSkhrdUl2bnJxM2xwTFRwbEs1Y2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ1pHOTNibHh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWkc5M2JqbzBNQ3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUhObGJHVmpkQ0JyWlhsY2JpQWdJQ0FnS2lBaEkzcG9JRk5sYkdWamRDRHBsSzVjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnYzJWc1pXTjBYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6Wld4bFkzUTZOREVzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCcGJuTmxjblFnYTJWNVhHNGdJQ0FnSUNvZ0lTTjZhQ0RtajVMbGhhWHBsSzVjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnYVc1elpYSjBYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JwYm5ObGNuUTZORFVzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCRVpXeGxkR1VnYTJWNVhHNGdJQ0FnSUNvZ0lTTjZhQ0RsaUtEcG1hVHBsSzVjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnUkdWc1pYUmxYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JFWld4bGRHVTZORFlzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNBbk1DY2dhMlY1SUc5dUlIUm9aU0IwYjNBZ2IyWWdkR2hsSUdGc2NHaGhiblZ0WlhKcFl5QnJaWGxpYjJGeVpDNWNiaUFnSUNBZ0tpQWhJM3BvSU9XdGwrYXZqZW1VcnVlYm1PUzRpdWVhaENBd0lPbVVybHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0F3WEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNBd09qUTRMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnSnpFbklHdGxlU0J2YmlCMGFHVWdkRzl3SUc5bUlIUm9aU0JoYkhCb1lXNTFiV1Z5YVdNZ2EyVjVZbTloY21RdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RsclpmbXI0M3BsSzdubTVqa3VJcm5tb1FnTVNEcGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dNVnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnTVRvME9TeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJQ2N5SnlCclpYa2diMjRnZEdobElIUnZjQ0J2WmlCMGFHVWdZV3h3YUdGdWRXMWxjbWxqSUd0bGVXSnZZWEprTGx4dUlDQWdJQ0FxSUNFamVtZ2c1YTJYNXErTjZaU3U1NXVZNUxpSzU1cUVJRElnNlpTdVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlESmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJREk2TlRBc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZSb1pTQW5NeWNnYTJWNUlHOXVJSFJvWlNCMGIzQWdiMllnZEdobElHRnNjR2hoYm5WdFpYSnBZeUJyWlhsaWIyRnlaQzVjYmlBZ0lDQWdLaUFoSTNwb0lPV3RsK2F2amVtVXJ1ZWJtT1M0aXVlYWhDQXpJT21Vcmx4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNBelhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQXpPalV4TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ0p6UW5JR3RsZVNCdmJpQjBhR1VnZEc5d0lHOW1JSFJvWlNCaGJIQm9ZVzUxYldWeWFXTWdhMlY1WW05aGNtUXVYRzRnSUNBZ0lDb2dJU042YUNEbHJaZm1yNDNwbEs3bm01amt1SXJubW9RZ05DRHBsSzVjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnTkZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ05EbzFNaXhjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUNjMUp5QnJaWGtnYjI0Z2RHaGxJSFJ2Y0NCdlppQjBhR1VnWVd4d2FHRnVkVzFsY21saklHdGxlV0p2WVhKa0xseHVJQ0FnSUNBcUlDRWplbWdnNWEyWDVxK042WlN1NTV1WTVMaUs1NXFFSURVZzZaU3VYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJRFZjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSURVNk5UTXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGUm9aU0FuTmljZ2EyVjVJRzl1SUhSb1pTQjBiM0FnYjJZZ2RHaGxJR0ZzY0doaGJuVnRaWEpwWXlCclpYbGliMkZ5WkM1Y2JpQWdJQ0FnS2lBaEkzcG9JT1d0bCthdmplbVVydWVibU9TNGl1ZWFoQ0EySU9tVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQTJYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0EyT2pVMExGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdKemNuSUd0bGVTQnZiaUIwYUdVZ2RHOXdJRzltSUhSb1pTQmhiSEJvWVc1MWJXVnlhV01nYTJWNVltOWhjbVF1WEc0Z0lDQWdJQ29nSVNONmFDRGxyWmZtcjQzcGxLN25tNWprdUlybm1vUWdOeURwbEs1Y2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ04xeHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdOem8xTlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElDYzRKeUJyWlhrZ2IyNGdkR2hsSUhSdmNDQnZaaUIwYUdVZ1lXeHdhR0Z1ZFcxbGNtbGpJR3RsZVdKdllYSmtMbHh1SUNBZ0lDQXFJQ0VqZW1nZzVhMlg1cStONlpTdTU1dVk1TGlLNTVxRUlEZ2c2WlN1WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SURoY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ5WldGa2IyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lEZzZOVFlzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNBbk9TY2dhMlY1SUc5dUlIUm9aU0IwYjNBZ2IyWWdkR2hsSUdGc2NHaGhiblZ0WlhKcFl5QnJaWGxpYjJGeVpDNWNiaUFnSUNBZ0tpQWhJM3BvSU9XdGwrYXZqZW1VcnVlYm1PUzRpdWVhaENBNUlPbVVybHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0E1WEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNBNU9qVTNMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnWVNCclpYbGNiaUFnSUNBZ0tpQWhJM3BvSUVFZzZaU3VYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJR0ZjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdFNk5qVXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGUm9aU0JpSUd0bGVWeHVJQ0FnSUNBcUlDRWplbWdnUWlEcGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dZbHh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWWpvMk5peGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJR01nYTJWNVhHNGdJQ0FnSUNvZ0lTTjZhQ0JESU9tVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQmpYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqT2pZM0xGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdaQ0JyWlhsY2JpQWdJQ0FnS2lBaEkzcG9JRVFnNlpTdVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlHUmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJR1E2Tmpnc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZSb1pTQmxJR3RsZVZ4dUlDQWdJQ0FxSUNFamVtZ2dSU0RwbEs1Y2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ1pWeHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdaVG8yT1N4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElHWWdhMlY1WEc0Z0lDQWdJQ29nSVNONmFDQkdJT21Vcmx4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCbVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQm1PamN3TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ1p5QnJaWGxjYmlBZ0lDQWdLaUFoSTNwb0lFY2c2WlN1WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUdkY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ5WldGa2IyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHYzZOekVzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCb0lHdGxlVnh1SUNBZ0lDQXFJQ0VqZW1nZ1NDRHBsSzVjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnYUZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FEbzNNaXhjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUdrZ2EyVjVYRzRnSUNBZ0lDb2dJU042YUNCSklPbVVybHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0JwWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNCcE9qY3pMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnYWlCclpYbGNiaUFnSUNBZ0tpQWhJM3BvSUVvZzZaU3VYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJR3BjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdvNk56UXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGUm9aU0JySUd0bGVWeHVJQ0FnSUNBcUlDRWplbWdnU3lEcGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dhMXh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYXpvM05TeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJR3dnYTJWNVhHNGdJQ0FnSUNvZ0lTTjZhQ0JNSU9tVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQnNYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JzT2pjMkxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdiU0JyWlhsY2JpQWdJQ0FnS2lBaEkzcG9JRTBnNlpTdVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlHMWNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJRzA2Tnpjc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZSb1pTQnVJR3RsZVZ4dUlDQWdJQ0FxSUNFamVtZ2dUaURwbEs1Y2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2JseHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdiam8zT0N4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElHOGdhMlY1WEc0Z0lDQWdJQ29nSVNONmFDQlBJT21Vcmx4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCdlhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQnZPamM1TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ2NDQnJaWGxjYmlBZ0lDQWdLaUFoSTNwb0lGQWc2WlN1WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUhCY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ5WldGa2IyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIQTZPREFzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCeElHdGxlVnh1SUNBZ0lDQXFJQ0VqZW1nZ1VTRHBsSzVjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnY1Z4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NUbzRNU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUhJZ2EyVjVYRzRnSUNBZ0lDb2dJU042YUNCU0lPbVVybHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0J5WEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNCeU9qZ3lMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnY3lCclpYbGNiaUFnSUNBZ0tpQWhJM3BvSUZNZzZaU3VYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSE5jYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhNNk9ETXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGUm9aU0IwSUd0bGVWeHVJQ0FnSUNBcUlDRWplbWdnVkNEcGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dkRnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnZERvNE5DeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJSFVnYTJWNVhHNGdJQ0FnSUNvZ0lTTjZhQ0JWSU9tVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjFYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IxT2pnMUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdkaUJyWlhsY2JpQWdJQ0FnS2lBaEkzcG9JRllnNlpTdVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIWmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFk2T0RZc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZSb1pTQjNJR3RsZVZ4dUlDQWdJQ0FxSUNFamVtZ2dWeURwbEs1Y2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2QxeHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdkem80Tnl4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElIZ2dhMlY1WEc0Z0lDQWdJQ29nSVNONmFDQllJT21Vcmx4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCNFhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQjRPamc0TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ2VTQnJaWGxjYmlBZ0lDQWdLaUFoSTNwb0lGa2c2WlN1WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUhsY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ5WldGa2IyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIazZPRGtzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCNklHdGxlVnh1SUNBZ0lDQXFJQ0VqZW1nZ1dpRHBsSzVjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZWx4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2VqbzVNQ3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUc1MWJXVnlhV01nYTJWNWNHRmtJREJjYmlBZ0lDQWdLaUFoSTNwb0lPYVZzT1d0bCttVXJ1ZWJtQ0F3WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUc1MWJUQmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJRzUxYlRBNk9UWXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGUm9aU0J1ZFcxbGNtbGpJR3RsZVhCaFpDQXhYRzRnSUNBZ0lDb2dJU042YUNEbWxiRGxyWmZwbEs3bm01Z2dNVnh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0J1ZFcweFhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQnVkVzB4T2prM0xGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdiblZ0WlhKcFl5QnJaWGx3WVdRZ01seHVJQ0FnSUNBcUlDRWplbWdnNXBXdzVhMlg2WlN1NTV1WUlESmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2diblZ0TWx4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JuVnRNam81T0N4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElHNTFiV1Z5YVdNZ2EyVjVjR0ZrSUROY2JpQWdJQ0FnS2lBaEkzcG9JT2FWc09XdGwrbVVydWVibUNBelhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlHNTFiVE5jYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUc1MWJUTTZPVGtzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCdWRXMWxjbWxqSUd0bGVYQmhaQ0EwWEc0Z0lDQWdJQ29nSVNONmFDRG1sYkRsclpmcGxLN25tNWdnTkZ4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCdWRXMDBYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J1ZFcwME9qRXdNQ3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUc1MWJXVnlhV01nYTJWNWNHRmtJRFZjYmlBZ0lDQWdLaUFoSTNwb0lPYVZzT1d0bCttVXJ1ZWJtQ0ExWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUc1MWJUVmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJRzUxYlRVNk1UQXhMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnYm5WdFpYSnBZeUJyWlhsd1lXUWdObHh1SUNBZ0lDQXFJQ0VqZW1nZzVwV3c1YTJYNlpTdTU1dVlJRFpjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnYm5WdE5seHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdiblZ0TmpveE1ESXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGUm9aU0J1ZFcxbGNtbGpJR3RsZVhCaFpDQTNYRzRnSUNBZ0lDb2dJU042YUNEbWxiRGxyWmZwbEs3bm01Z2dOMXh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0J1ZFcwM1hHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQnVkVzAzT2pFd015eGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJRzUxYldWeWFXTWdhMlY1Y0dGa0lEaGNiaUFnSUNBZ0tpQWhJM3BvSU9hVnNPV3RsK21VcnVlYm1DQTRYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJRzUxYlRoY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ5WldGa2IyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHNTFiVGc2TVRBMExGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdiblZ0WlhKcFl5QnJaWGx3WVdRZ09WeHVJQ0FnSUNBcUlDRWplbWdnNXBXdzVhMlg2WlN1NTV1WUlEbGNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2diblZ0T1Z4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JuVnRPVG94TURVc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZSb1pTQnVkVzFsY21saklHdGxlWEJoWkNBbktpZGNiaUFnSUNBZ0tpQWhJM3BvSU9hVnNPV3RsK21VcnVlYm1DQXFYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJQ3BjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUNjcUp6b3hNRFlzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCdWRXMWxjbWxqSUd0bGVYQmhaQ0FuS3lkY2JpQWdJQ0FnS2lBaEkzcG9JT2FWc09XdGwrbVVydWVibUNBclhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlDdGNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJQ2NySnpveE1EY3NYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGUm9aU0J1ZFcxbGNtbGpJR3RsZVhCaFpDQW5MU2RjYmlBZ0lDQWdLaUFoSTNwb0lPYVZzT1d0bCttVXJ1ZWJtQ0F0WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUMxY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ5WldGa2IyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lDY3RKem94TURrc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZSb1pTQnVkVzFsY21saklHdGxlWEJoWkNBblpHVnNaWFJsSjF4dUlDQWdJQ0FxSUNFamVtZ2c1cFd3NWEyWDZaU3U1NXVZNVlpZzZabWs2WlN1WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUc1MWJXUmxiRnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnSjI1MWJXUmxiQ2M2TVRFd0xGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdiblZ0WlhKcFl5QnJaWGx3WVdRZ0p5OG5YRzRnSUNBZ0lDb2dJU042YUNEbWxiRGxyWmZwbEs3bm01Z2dMMXh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0F2WEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNBbkx5YzZNVEV4TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ1JqRWdablZ1WTNScGIyNGdhMlY1WEc0Z0lDQWdJQ29nSVNONmFDQkdNU0RsaXAvb2c3M3BsSzVjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnWmpGY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ5WldGa2IyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHWXhPakV4TWl3Z0x5OW1NUzFtTVRJZ1pHOXVkQ0IzYjNKcklHOXVJR2xsWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCR01pQm1kVzVqZEdsdmJpQnJaWGxjYmlBZ0lDQWdLaUFoSTNwb0lFWXlJT1dLbitpRHZlbVVybHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0JtTWx4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1pqSTZNVEV6TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ1JqTWdablZ1WTNScGIyNGdhMlY1WEc0Z0lDQWdJQ29nSVNONmFDQkdNeURsaXAvb2c3M3BsSzVjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnWmpOY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFJRUJ5WldGa2IyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHWXpPakV4TkN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElFWTBJR1oxYm1OMGFXOXVJR3RsZVZ4dUlDQWdJQ0FxSUNFamVtZ2dSalFnNVlxZjZJTzk2WlN1WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUdZMFhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQm1ORG94TVRVc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZSb1pTQkdOU0JtZFc1amRHbHZiaUJyWlhsY2JpQWdJQ0FnS2lBaEkzcG9JRVkxSU9XS24raUR2ZW1Vcmx4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCbU5WeHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdaalU2TVRFMkxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdSallnWm5WdVkzUnBiMjRnYTJWNVhHNGdJQ0FnSUNvZ0lTTjZhQ0JHTmlEbGlwL29nNzNwbEs1Y2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ1pqWmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJR1kyT2pFeE55eGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJRVkzSUdaMWJtTjBhVzl1SUd0bGVWeHVJQ0FnSUNBcUlDRWplbWdnUmpjZzVZcWY2SU85NlpTdVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlHWTNYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JtTnpveE1UZ3NYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGUm9aU0JHT0NCbWRXNWpkR2x2YmlCclpYbGNiaUFnSUNBZ0tpQWhJM3BvSUVZNElPV0tuK2lEdmVtVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQm1PRnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWmpnNk1URTVMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnUmprZ1puVnVZM1JwYjI0Z2EyVjVYRzRnSUNBZ0lDb2dJU042YUNCR09TRGxpcC9vZzczcGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2daamxjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdZNU9qRXlNQ3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUVZeE1DQm1kVzVqZEdsdmJpQnJaWGxjYmlBZ0lDQWdLaUFoSTNwb0lFWXhNQ0RsaXAvb2c3M3BsSzVjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnWmpFd1hHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQm1NVEE2TVRJeExGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdSakV4SUdaMWJtTjBhVzl1SUd0bGVWeHVJQ0FnSUNBcUlDRWplbWdnUmpFeElPV0tuK2lEdmVtVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQm1NVEZjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdZeE1Ub3hNaklzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCR01USWdablZ1WTNScGIyNGdhMlY1WEc0Z0lDQWdJQ29nSVNONmFDQkdNVElnNVlxZjZJTzk2WlN1WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUdZeE1seHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdaakV5T2pFeU15eGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJRzUxYld4dlkyc2dhMlY1WEc0Z0lDQWdJQ29nSVNONmFDRG1sYkRsclpmcGxJSGxycHJwbEs1Y2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2JuVnRiRzlqYTF4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JuVnRiRzlqYXpveE5EUXNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGUm9aU0J6WTNKdmJHd2diRzlqYXlCclpYbGNiaUFnSUNBZ0tpQWhJM3BvSU9hN211V0txT21VZ2VXdW11bVVybHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0J6WTNKdmJHeHNiMk5yWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNCelkzSnZiR3hzYjJOck9qRTBOU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUNjN0p5QnJaWGt1WEc0Z0lDQWdJQ29nSVNONmFDRGxpSWJsajdmcGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dPMXh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnSnpzbk9qRTROaXhjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUNjN0p5QnJaWGt1WEc0Z0lDQWdJQ29nSVNONmFDRGxpSWJsajdmcGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2djMlZ0YVdOdmJHOXVYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6WlcxcFkyOXNiMjQ2TVRnMkxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdKejBuSUd0bGVTNWNiaUFnSUNBZ0tpQWhJM3BvSU9ldGllUzZqdVdQdCttVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQmxjWFZoYkZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1pYRjFZV3c2TVRnM0xGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdKejBuSUd0bGVTNWNiaUFnSUNBZ0tpQWhJM3BvSU9ldGllUzZqdVdQdCttVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQTlYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0FuUFNjNk1UZzNMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnSnl3bklHdGxlUzVjYmlBZ0lDQWdLaUFoSTNwb0lPbUFsK1dQdCttVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQXNYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0FuTENjNk1UZzRMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnSnl3bklHdGxlUzVjYmlBZ0lDQWdLaUFoSTNwb0lPbUFsK1dQdCttVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQmpiMjF0WVZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXRiV0U2TVRnNExGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVWFHVWdaR0Z6YUNBbkxTY2dhMlY1TGx4dUlDQWdJQ0FxSUNFamVtZ2c1TGl0NVlpUzU3cS82WlN1WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUdSaGMyaGNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJR1JoYzJnNk1UZzVMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnSnk0bklHdGxlUzVjYmlBZ0lDQWdLaUFoSTNwb0lPV1BwZVdQdCttVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQXVYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0FuTGljNk1Ua3dMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnSnk0bklHdGxlVnh1SUNBZ0lDQXFJQ0VqZW1nZzVZK2w1WSszNlpTdVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIQmxjbWx2WkZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NHVnlhVzlrT2pFNU1DeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJR1p2Y25kaGNtUWdjMnhoYzJnZ2EyVjVYRzRnSUNBZ0lDb2dJU042YUNEbXJhUG1scHptbmFEcGxLNWNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dabTl5ZDJGeVpITnNZWE5vWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNCbWIzSjNZWEprYzJ4aGMyZzZNVGt4TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ1ozSmhkbVVnYTJWNVhHNGdJQ0FnSUNvZ0lTTjZhQ0RtaklucGxLNGdZRnh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0JuY21GMlpWeHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdaM0poZG1VNk1Ua3lMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnSjFzbklHdGxlVnh1SUNBZ0lDQXFJQ0VqZW1nZzVveUo2WlN1SUZ0Y2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ1cxeHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdKMXNuT2pJeE9TeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1ZHaGxJQ2RiSnlCclpYbGNiaUFnSUNBZ0tpQWhJM3BvSU9hTWllbVVyaUJiWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUc5d1pXNWljbUZqYTJWMFhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjYmlBZ0lDQWdLaUJBY21WaFpHOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQnZjR1Z1WW5KaFkydGxkRG95TVRrc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZSb1pTQW5YRnduSUd0bGVWeHVJQ0FnSUNBcUlDRWplbWdnNVkrTjVwYWM1cDJnNlpTdVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlHSmhZMnR6YkdGemFGeHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ29nUUhKbFlXUnZibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdZbUZqYTNOc1lYTm9Pakl5TUN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElDZGRKeUJyWlhsY2JpQWdJQ0FnS2lBaEkzcG9JT2FNaWVtVXJpQmRYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJRjFjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUNkZEp6b3lNakVzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNBblhTY2dhMlY1WEc0Z0lDQWdJQ29nSVNONmFDRG1qSW5wbEs0Z1hWeHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQmpiRzl6WldKeVlXTnJaWFJjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUlFQnlaV0ZrYjI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOc2IzTmxZbkpoWTJ0bGREb3lNakVzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCeGRXOTBaU0JyWlhsY2JpQWdJQ0FnS2lBaEkzcG9JT1dObGVXOGxlV1B0K21Vcmx4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCeGRXOTBaVnh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvZ1FISmxZV1J2Ym14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY1hWdmRHVTZNakl5TEZ4dVhHNGdJQ0FnTHk4Z1oyRnRaWEJoWkNCamIyNTBjbTlzYkZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ1pIQmhaQ0JzWldaMElHdGxlVnh1SUNBZ0lDQXFJQ0VqZW1nZzVhKzg2SWlxNlpTdUlPV1FrZVczcGx4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCa2NHRmtUR1ZtZEZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1pIQmhaRXhsWm5RNk1UQXdNQ3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUdSd1lXUWdjbWxuYUhRZ2EyVjVYRzRnSUNBZ0lDb2dJU042YUNEbHI3em9pS3JwbEs0ZzVaQ1I1WSt6WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUdSd1lXUlNhV2RvZEZ4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1pIQmhaRkpwWjJoME9qRXdNREVzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCa2NHRmtJSFZ3SUd0bGVWeHVJQ0FnSUNBcUlDRWplbWdnNWErODZJaXE2WlN1SU9XUWtlUzRpbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0JrY0dGa1ZYQmNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxSUVCeVpXRmtiMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJR1J3WVdSVmNEb3hNREF6TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ1pIQmhaQ0JrYjNkdUlHdGxlVnh1SUNBZ0lDQXFJQ0VqZW1nZzVhKzg2SWlxNlpTdUlPV1FrZVM0aTF4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCa2NHRmtSRzkzYmx4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb2dRSEpsWVdSdmJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1pIQmhaRVJ2ZDI0Nk1UQXdOQ3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdWR2hsSUdSd1lXUWdZMlZ1ZEdWeUlHdGxlVnh1SUNBZ0lDQXFJQ0VqZW1nZzVhKzg2SWlxNlpTdUlPZWhydVd1bXVtVXJseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQmtjR0ZrUTJWdWRHVnlYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2lCQWNtVmhaRzl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JrY0dGa1EyVnVkR1Z5T2pFd01EVmNibjA3WEc1Y2JpOHFLbHh1SUNvZ1NXMWhaMlVnWm05eWJXRjBjMXh1SUNvZ1FHVnVkVzBnYldGamNtOHVTVzFoWjJWR2IzSnRZWFJjYmlBcUwxeHVZMk11YldGamNtOHVTVzFoWjJWR2IzSnRZWFFnUFNCall5NUZiblZ0S0h0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJXRm5aU0JHYjNKdFlYUTZTbEJIWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUVwUVIxeHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ292WEc0Z0lDQWdTbEJIT2lBd0xGeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFbHRZV2RsSUVadmNtMWhkRHBRVGtkY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ1VFNUhYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JRVGtjNklERXNYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzFoWjJVZ1JtOXliV0YwT2xSSlJrWmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dWRWxHUmx4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1ZFbEdSam9nTWl4Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJXRm5aU0JHYjNKdFlYUTZWMFZDVUZ4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCWFJVSlFYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JYUlVKUU9pQXpMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx0WVdkbElFWnZjbTFoZERwUVZsSmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dVRlpTWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCUVZsSTZJRFFzWEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU1cxaFoyVWdSbTl5YldGME9rVlVRMXh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0JGVkVOY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lFVlVRem9nTlN4Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSmJXRm5aU0JHYjNKdFlYUTZVek5VUTF4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCVE0xUkRYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JUTTFSRE9pQTJMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWx0WVdkbElFWnZjbTFoZERwQlZFbFVRMXh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0JCVkVsVVExeHVJQ0FnSUNBcUlFQjBlWEJsSUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ292WEc0Z0lDQWdRVlJKVkVNNklEY3NYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTVzFoWjJVZ1JtOXliV0YwT2xSSFFWeHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQlVSMEZjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUZSSFFUb2dPQ3hjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJKYldGblpTQkdiM0p0WVhRNlVrRlhSRUZVUVZ4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCU1FWZEVRVlJCWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCU1FWZEVRVlJCT2lBNUxGeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFbHRZV2RsSUVadmNtMWhkRHBWVGt0T1QxZE9YRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJRlZPUzA1UFYwNWNiaUFnSUNBZ0tpQkFkSGx3WlNCN1RuVnRZbVZ5ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRlZPUzA1UFYwNDZJREV3WEc1OUtUdGNibHh1THlvcVhHNGdLaUFoSTJWdVhHNGdLaUJGYm5WdElHWnZjaUJpYkdWdVpDQm1ZV04wYjNKY2JpQXFJRkpsWm1WeUlIUnZPaUJvZEhSd09pOHZkM2QzTG1GdVpHVnljM0pwWjJkbGJITmxiaTVrYXk5bmJHSnNaVzVrWm5WdVl5NXdhSEJjYmlBcUlDRWplbWhjYmlBcUlPYTN0K1dRaU9XYm9PV3RrRnh1SUNvZzVZK3Y1WStDNklDRE9pQm9kSFJ3T2k4dmQzZDNMbUZ1WkdWeWMzSnBaMmRsYkhObGJpNWtheTluYkdKc1pXNWtablZ1WXk1d2FIQmNiaUFxSUVCbGJuVnRJRzFoWTNKdkxrSnNaVzVrUm1GamRHOXlYRzRnS2k5Y2JtTmpMbTFoWTNKdkxrSnNaVzVrUm1GamRHOXlJRDBnWTJNdVJXNTFiU2g3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQkJiR3dnZFhObFhHNGdJQ0FnSUNvZ0lTTjZhQ0RsaGFqcGc2amt2Yi9ubEtoY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwNTFiV0psY24wZ1QwNUZYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1QwNUZPaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTVN3Z0lDOHZZMk11YldGamNtOHVUMDVGWEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQk9iM1FnWVd4c1hHNGdJQ0FnSUNvZ0lTTjZhQ0RsaGFqcGc2amt1STNubEtoY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwNTFiV0psY24wZ1drVlNUMXh1SUNBZ0lDQXFMMXh1SUNBZ0lGcEZVazg2SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURBc0lDQWdJQ0FnTHk5all5NWFSVkpQWEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlZjMmx1WnlCMGFHVWdjMjkxY21ObElHRnNjR2hoWEc0Z0lDQWdJQ29nSVNONmFDRGt2Yi9ubEtqbXVwRHBvcHpvaWJMbm1vVHBnSS9tbUk3bHVxWmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdVMUpEWDBGTVVFaEJYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1UxSkRYMEZNVUVoQk9pQWdJQ0FnSUNBZ0lDQWdJQ0FnTUhnek1ESXNJQ0F2TDJOakxsTlNRMTlCVEZCSVFWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVlhOcGJtY2dkR2hsSUhOdmRYSmpaU0JqYjJ4dmNseHVJQ0FnSUNBcUlDRWplbWdnNUwyLzU1U281cnFRNmFLYzZJbXlYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRk5TUTE5RFQweFBVbHh1SUNBZ0lDQXFMMXh1SUNBZ0lGTlNRMTlEVDB4UFVqb2dJQ0FnSUNBZ0lDQWdJQ0FnSURCNE16QXdMQ0FnTHk5all5NVRVa05mUTA5TVQxSmNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUZWemFXNW5JSFJvWlNCMFlYSm5aWFFnWVd4d2FHRmNiaUFnSUNBZ0tpQWhJM3BvSU9TOXYrZVVxT2VicnVhZ2grbWluT2lKc3VlYWhPbUFqK2FZanVXNnBseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdUblZ0WW1WeWZTQkVVMVJmUVV4UVNFRmNiaUFnSUNBZ0tpOWNiaUFnSUNCRVUxUmZRVXhRU0VFNklDQWdJQ0FnSUNBZ0lDQWdJQ0F3ZURNd05Dd2dJQzh2WTJNdVJGTlVYMEZNVUVoQlhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJWYzJsdVp5QjBhR1VnZEdGeVoyVjBJR052Ykc5eVhHNGdJQ0FnSUNvZ0lTTjZhQ0RrdmIvbmxLam5tNjdtb0lmcG9wem9pYkpjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTA1MWJXSmxjbjBnUkZOVVgwTlBURTlTWEc0Z0lDQWdJQ292WEc0Z0lDQWdSRk5VWDBOUFRFOVNPaUFnSUNBZ0lDQWdJQ0FnSUNBZ01IZ3pNRFlzSUNBdkwyTmpMa1JUVkY5RFQweFBVbHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1RXbHVkWE1nZEdobElITnZkWEpqWlNCaGJIQm9ZVnh1SUNBZ0lDQXFJQ0VqZW1nZzVZZVA1WTY3NXJxUTZhS2M2SW15NTVxRTZZQ1A1cGlPNWJxbVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdE9kVzFpWlhKOUlFOU9SVjlOU1U1VlUxOVRVa05mUVV4UVNFRmNiaUFnSUNBZ0tpOWNiaUFnSUNCUFRrVmZUVWxPVlZOZlUxSkRYMEZNVUVoQk9pQWdJQ0F3ZURNd015d2dJQzh2WTJNdVQwNUZYMDFKVGxWVFgxTlNRMTlCVEZCSVFWeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVFdsdWRYTWdkR2hsSUhOdmRYSmpaU0JqYjJ4dmNseHVJQ0FnSUNBcUlDRWplbWdnNVllUDVZNjc1cnFRNmFLYzZJbXlYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRTlPUlY5TlNVNVZVMTlUVWtOZlEwOU1UMUpjYmlBZ0lDQWdLaTljYmlBZ0lDQlBUa1ZmVFVsT1ZWTmZVMUpEWDBOUFRFOVNPaUFnSUNBd2VETXdNU3dnSUM4dlkyTXVUMDVGWDAxSlRsVlRYMU5TUTE5RFQweFBVbHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1RXbHVkWE1nZEdobElIUmhjbWRsZENCaGJIQm9ZVnh1SUNBZ0lDQXFJQ0VqZW1nZzVZZVA1WTY3NTV1dTVxQ0g2YUtjNklteTU1cUU2WUNQNXBpTzVicW1YRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRTlPUlY5TlNVNVZVMTlFVTFSZlFVeFFTRUZjYmlBZ0lDQWdLaTljYmlBZ0lDQlBUa1ZmVFVsT1ZWTmZSRk5VWDBGTVVFaEJPaUFnSUNBd2VETXdOU3dnSUM4dlkyTXVUMDVGWDAxSlRsVlRYMFJUVkY5QlRGQklRVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1RXbHVkWE1nZEdobElIUmhjbWRsZENCamIyeHZjbHh1SUNBZ0lDQXFJQ0VqZW1nZzVZZVA1WTY3NTV1dTVxQ0g2YUtjNklteVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdE9kVzFpWlhKOUlFOU9SVjlOU1U1VlUxOUVVMVJmUTA5TVQxSmNiaUFnSUNBZ0tpOWNiaUFnSUNCUFRrVmZUVWxPVlZOZlJGTlVYME5QVEU5U09pQWdJQ0F3ZURNd055d2dJQzh2WTJNdVQwNUZYMDFKVGxWVFgwUlRWRjlEVDB4UFVseHVmU2s3WEc1Y2JpOHFLbHh1SUNvZ1FHVnVkVzBnYldGamNtOHVWR1Y0ZEVGc2FXZHViV1Z1ZEZ4dUlDb3ZYRzVqWXk1dFlXTnlieTVVWlhoMFFXeHBaMjV0Wlc1MElEMGdZMk11Ulc1MWJTaDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRXhGUmxSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JNUlVaVU9pQXdMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0JEUlU1VVJWSmNiaUFnSUNBZ0tpOWNiaUFnSUNCRFJVNVVSVkk2SURFc1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdE9kVzFpWlhKOUlGSkpSMGhVWEc0Z0lDQWdJQ292WEc0Z0lDQWdVa2xIU0ZRNklESmNibjBwTzF4dVhHNHZLaXBjYmlBcUlFQmxiblZ0SUZabGNuUnBZMkZzVkdWNGRFRnNhV2R1YldWdWRGeHVJQ292WEc1all5NXRZV055Ynk1V1pYSjBhV05oYkZSbGVIUkJiR2xuYm0xbGJuUWdQU0JqWXk1RmJuVnRLSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTA1MWJXSmxjbjBnVkU5UVhHNGdJQ0FnSUNvdlhHNGdJQ0FnVkU5UU9pQXdMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0JEUlU1VVJWSmNiaUFnSUNBZ0tpOWNiaUFnSUNCRFJVNVVSVkk2SURFc1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdE9kVzFpWlhKOUlFSlBWRlJQVFZ4dUlDQWdJQ0FxTDF4dUlDQWdJRUpQVkZSUFRUb2dNbHh1ZlNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZMk11YldGamNtODdYRzRpWFgwPSJdfQ==