(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/deserialize.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var js = require('./js');
        var Attr = require('./attribute');
        var CCClass = require('./CCClass');
        var misc = require('../utils/misc');
        var Details = function Details() {
            this.uuidList = [];
            this.uuidObjList = [];
            this.uuidPropList = [];
            this._stillUseUrl = js.createMap(true);
        };
        Details.prototype.reset = function () {
            this.uuidList.length = 0;
            this.uuidObjList.length = 0;
            this.uuidPropList.length = 0;
            js.clear(this._stillUseUrl);
        };
        if (CC_EDITOR || CC_TEST) {
            Details.prototype.assignAssetsBy = function (getter) {
                for (var i = 0, len = this.uuidList.length; i < len; i++) {
                    var uuid = this.uuidList[i];
                    var obj = this.uuidObjList[i];
                    var prop = this.uuidPropList[i];
                    obj[prop] = getter(uuid);
                }
            };
        }
        Details.prototype.push = function (obj, propName, uuid, _stillUseUrl) {
            if (_stillUseUrl) {
                this._stillUseUrl[this.uuidList.length] = true;
            }
            this.uuidList.push(uuid);
            this.uuidObjList.push(obj);
            this.uuidPropList.push(propName);
        };
        Details.pool = new js.Pool(function (obj) {
            obj.reset();
        }, 10);
        Details.pool.get = function () {
            return this._get() || new Details();
        };
        var _Deserializer = function () {
            function _Deserializer(result, target, classFinder, customEnv, ignoreEditorOnly) {
                this.result = result;
                this.customEnv = customEnv;
                this.deserializedList = [];
                this.deserializedData = null;
                this._classFinder = classFinder;
                if (CC_DEV) {
                    this._target = target;
                    this._ignoreEditorOnly = ignoreEditorOnly;
                }
                this._idList = [];
                this._idObjList = [];
                this._idPropList = [];
            }
            function _dereference(self) {
                var deserializedList = self.deserializedList;
                var idPropList = self._idPropList;
                var idList = self._idList;
                var idObjList = self._idObjList;
                var onDereferenced = self._classFinder && self._classFinder.onDereferenced;
                var i, propName, id;
                if (CC_EDITOR && onDereferenced) {
                    for (i = 0; i < idList.length; i++) {
                        propName = idPropList[i];
                        id = idList[i];
                        idObjList[i][propName] = deserializedList[id];
                        onDereferenced(deserializedList, id, idObjList[i], propName);
                    }
                } else {
                    for (i = 0; i < idList.length; i++) {
                        propName = idPropList[i];
                        id = idList[i];
                        idObjList[i][propName] = deserializedList[id];
                    }
                }
            }
            var prototype = _Deserializer.prototype;
            prototype.deserialize = function (jsonObj) {
                if (Array.isArray(jsonObj)) {
                    var jsonArray = jsonObj;
                    var refCount = jsonArray.length;
                    this.deserializedList.length = refCount;
                    for (var i = 0; i < refCount; i++) {
                        if (jsonArray[i]) {
                            if (CC_EDITOR || CC_TEST) {
                                var mainTarget = i === 0 && this._target;
                                this.deserializedList[i] = this._deserializeObject(jsonArray[i], false, mainTarget, this.deserializedList, '' + i);
                            } else {
                                this.deserializedList[i] = this._deserializeObject(jsonArray[i], false);
                            }
                        }
                    }
                    this.deserializedData = refCount > 0 ? this.deserializedList[0] : [];
                } else {
                    this.deserializedList.length = 1;
                    if (CC_EDITOR || CC_TEST) {
                        this.deserializedData = jsonObj ? this._deserializeObject(jsonObj, false, this._target, this.deserializedList, '0') : null;
                    } else {
                        this.deserializedData = jsonObj ? this._deserializeObject(jsonObj, false) : null;
                    }
                    this.deserializedList[0] = this.deserializedData;
                }
                _dereference(this);
                return this.deserializedData;
            };
            prototype._deserializeObject = function (serialized, _stillUseUrl, target, owner, propName) {
                var prop;
                var obj = null;
                var klass = null;
                var type = serialized.__type__;
                if (type) {
                    klass = this._classFinder(type, serialized, owner, propName);
                    if (!klass) {
                        var notReported = this._classFinder === js._getClassById;
                        if (notReported) {
                            cc.deserialize.reportMissingClass(type);
                        }
                        return null;
                    }
                    if ((CC_EDITOR || CC_TEST) && target) {
                        if (!(target instanceof klass)) {
                            cc.warnID(5300, js.getClassName(target), klass);
                        }
                        obj = target;
                    } else {
                        obj = new klass();
                    }
                    if (obj._deserialize) {
                        obj._deserialize(serialized.content, this);
                        return obj;
                    }
                    if (cc.Class._isCCClass(klass)) {
                        _deserializeFireClass(this, obj, serialized, klass, target);
                    } else {
                        this._deserializeTypedObject(obj, serialized, klass);
                    }
                } else if (!Array.isArray(serialized)) {
                    obj = (CC_EDITOR || CC_TEST) && target || {};
                    this._deserializePrimitiveObject(obj, serialized);
                } else {
                    if ((CC_EDITOR || CC_TEST) && target) {
                        target.length = serialized.length;
                        obj = target;
                    } else {
                        obj = new Array(serialized.length);
                    }
                    for (var i = 0; i < serialized.length; i++) {
                        prop = serialized[i];
                        if ((typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) === 'object' && prop) {
                            if (CC_EDITOR || CC_TEST) {
                                this._deserializeObjField(obj, prop, '' + i, target && obj, _stillUseUrl);
                            } else {
                                this._deserializeObjField(obj, prop, '' + i, null, _stillUseUrl);
                            }
                        } else {
                            obj[i] = prop;
                        }
                    }
                }
                return obj;
            };
            prototype._deserializeObjField = function (obj, jsonObj, propName, target, _stillUseUrl) {
                var id = jsonObj.__id__;
                if (id === undefined) {
                    var uuid = jsonObj.__uuid__;
                    if (uuid) {
                        this.result.push(obj, propName, uuid, _stillUseUrl);
                    } else {
                        if (CC_EDITOR || CC_TEST) {
                            obj[propName] = this._deserializeObject(jsonObj, _stillUseUrl, target && target[propName], obj, propName);
                        } else {
                            obj[propName] = this._deserializeObject(jsonObj, _stillUseUrl);
                        }
                    }
                } else {
                    var dObj = this.deserializedList[id];
                    if (dObj) {
                        obj[propName] = dObj;
                    } else {
                        this._idList.push(id);
                        this._idObjList.push(obj);
                        this._idPropList.push(propName);
                    }
                }
            };
            prototype._deserializePrimitiveObject = function (instance, serialized) {
                var self = this;
                for (var propName in serialized) {
                    if (serialized.hasOwnProperty(propName)) {
                        var prop = serialized[propName];
                        if ((typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) !== 'object') {
                            if (propName !== '__type__') {
                                instance[propName] = prop;
                            }
                        } else {
                            if (prop) {
                                if (CC_EDITOR || CC_TEST) {
                                    self._deserializeObjField(instance, prop, propName, self._target && instance);
                                } else {
                                    self._deserializeObjField(instance, prop, propName);
                                }
                            } else {
                                instance[propName] = null;
                            }
                        }
                    }
                }
            };
            prototype._deserializeTypedObject = function (instance, serialized, klass) {
                if (klass === cc.Vec2) {
                    instance.x = serialized.x || 0;
                    instance.y = serialized.y || 0;
                    return;
                } else if (klass === cc.Vec3) {
                    instance.x = serialized.x || 0;
                    instance.y = serialized.y || 0;
                    instance.z = serialized.z || 0;
                    return;
                } else if (klass === cc.Color) {
                    instance.r = serialized.r || 0;
                    instance.g = serialized.g || 0;
                    instance.b = serialized.b || 0;
                    var a = serialized.a;
                    instance.a = a === undefined ? 255 : a;
                    return;
                } else if (klass === cc.Size) {
                    instance.width = serialized.width || 0;
                    instance.height = serialized.height || 0;
                    return;
                }
                var DEFAULT = Attr.DELIMETER + 'default';
                var attrs = Attr.getClassAttrs(klass);
                var fastDefinedProps = klass.__props__ || Object.keys(instance);
                for (var i = 0; i < fastDefinedProps.length; i++) {
                    var propName = fastDefinedProps[i];
                    var value = serialized[propName];
                    if (value === undefined || !serialized.hasOwnProperty(propName)) {
                        value = CCClass.getDefault(attrs[propName + DEFAULT]);
                    }
                    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
                        instance[propName] = value;
                    } else if (value) {
                        if (CC_EDITOR || CC_TEST) {
                            this._deserializeObjField(instance, value, propName, this._target && instance);
                        } else {
                            this._deserializeObjField(instance, value, propName);
                        }
                    } else {
                        instance[propName] = null;
                    }
                }
            };
            function compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, assumeHavePropIfIsValue, stillUseUrl) {
                if (defaultValue instanceof cc.ValueType) {
                    if (!assumeHavePropIfIsValue) {
                        sources.push('if(prop){');
                    }
                    var ctorCode = js.getClassName(defaultValue);
                    sources.push('s._deserializeTypedObject(o' + accessorToSet + ',prop,' + ctorCode + ');');
                    if (!assumeHavePropIfIsValue) {
                        sources.push('}else o' + accessorToSet + '=null;');
                    }
                } else {
                    sources.push('if(prop){');
                    sources.push('s._deserializeObjField(o,prop,' + propNameLiteralToSet + (CC_EDITOR || CC_TEST ? ',t&&o,' : ',null,') + !!stillUseUrl + ');');
                    sources.push('}else o' + accessorToSet + '=null;');
                }
            }
            var compileDeserialize = CC_SUPPORT_JIT ? function (self, klass) {
                var TYPE = Attr.DELIMETER + 'type';
                var EDITOR_ONLY = Attr.DELIMETER + 'editorOnly';
                var DEFAULT = Attr.DELIMETER + 'default';
                var SAVE_URL_AS_ASSET = Attr.DELIMETER + 'saveUrlAsAsset';
                var FORMERLY_SERIALIZED_AS = Attr.DELIMETER + 'formerlySerializedAs';
                var attrs = Attr.getClassAttrs(klass);
                var props = klass.__values__;
                var sources = ['var prop;'];
                var fastMode = misc.BUILTIN_CLASSID_RE.test(js._getClassId(klass));
                for (var p = 0; p < props.length; p++) {
                    var propName = props[p];
                    if ((CC_PREVIEW || CC_EDITOR && self._ignoreEditorOnly) && attrs[propName + EDITOR_ONLY]) {
                        continue;
                    }
                    var accessorToSet, propNameLiteralToSet;
                    if (CCClass.IDENTIFIER_RE.test(propName)) {
                        propNameLiteralToSet = '"' + propName + '"';
                        accessorToSet = '.' + propName;
                    } else {
                        propNameLiteralToSet = CCClass.escapeForJS(propName);
                        accessorToSet = '[' + propNameLiteralToSet + ']';
                    }
                    var accessorToGet = accessorToSet;
                    if (attrs[propName + FORMERLY_SERIALIZED_AS]) {
                        var propNameToRead = attrs[propName + FORMERLY_SERIALIZED_AS];
                        if (CCClass.IDENTIFIER_RE.test(propNameToRead)) {
                            accessorToGet = '.' + propNameToRead;
                        } else {
                            accessorToGet = '[' + CCClass.escapeForJS(propNameToRead) + ']';
                        }
                    }
                    sources.push('prop=d' + accessorToGet + ';');
                    sources.push('if(typeof ' + (CC_JSB || CC_RUNTIME ? '(prop)' : 'prop') + '!=="undefined"){');
                    var stillUseUrl = attrs[propName + SAVE_URL_AS_ASSET];
                    var defaultValue = CCClass.getDefault(attrs[propName + DEFAULT]);
                    if (fastMode) {
                        var isPrimitiveType;
                        var userType = attrs[propName + TYPE];
                        if (defaultValue === undefined && userType) {
                            isPrimitiveType = userType === cc.String || userType === cc.Integer || userType === cc.Float || userType === cc.Boolean;
                        } else {
                            var defaultType = typeof defaultValue === 'undefined' ? 'undefined' : _typeof(defaultValue);
                            isPrimitiveType = defaultType === 'string' && !stillUseUrl || defaultType === 'number' || defaultType === 'boolean';
                        }
                        if (isPrimitiveType) {
                            sources.push('o' + accessorToSet + '=prop;');
                        } else {
                            compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, true, stillUseUrl);
                        }
                    } else {
                        sources.push('if(typeof ' + (CC_JSB || CC_RUNTIME ? '(prop)' : 'prop') + '!=="object"){' + 'o' + accessorToSet + '=prop;' + '}else{');
                        compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, false, stillUseUrl);
                        sources.push('}');
                    }
                    sources.push('}');
                }
                if (cc.js.isChildClassOf(klass, cc._BaseNode) || cc.js.isChildClassOf(klass, cc.Component)) {
                    if (CC_PREVIEW || CC_EDITOR && self._ignoreEditorOnly) {
                        var mayUsedInPersistRoot = js.isChildClassOf(klass, cc.Node);
                        if (mayUsedInPersistRoot) {
                            sources.push('d._id&&(o._id=d._id);');
                        }
                    } else {
                        sources.push('d._id&&(o._id=d._id);');
                    }
                }
                if (props[props.length - 1] === '_$erialized') {
                    sources.push('o._$erialized=JSON.parse(JSON.stringify(d));');
                    sources.push('s._deserializePrimitiveObject(o._$erialized,d);');
                }
                return Function('s', 'o', 'd', 'k', 't', sources.join(''));
            } : function (self, klass) {
                var fastMode = misc.BUILTIN_CLASSID_RE.test(js._getClassId(klass));
                var shouldCopyId = cc.js.isChildClassOf(klass, cc._BaseNode) || cc.js.isChildClassOf(klass, cc.Component);
                var shouldCopyRawData;
                var simpleProps = [];
                var simplePropsToRead = simpleProps;
                var advancedProps = [];
                var advancedPropsToRead = advancedProps;
                var advancedPropsUseUrl = [];
                var advancedPropsValueType = [];
                (function () {
                    var props = klass.__values__;
                    shouldCopyRawData = props[props.length - 1] === '_$erialized';
                    var attrs = Attr.getClassAttrs(klass);
                    var TYPE = Attr.DELIMETER + 'type';
                    var DEFAULT = Attr.DELIMETER + 'default';
                    var SAVE_URL_AS_ASSET = Attr.DELIMETER + 'saveUrlAsAsset';
                    var FORMERLY_SERIALIZED_AS = Attr.DELIMETER + 'formerlySerializedAs';
                    for (var p = 0; p < props.length; p++) {
                        var propName = props[p];
                        var propNameToRead = propName;
                        if (attrs[propName + FORMERLY_SERIALIZED_AS]) {
                            propNameToRead = attrs[propName + FORMERLY_SERIALIZED_AS];
                        }
                        var stillUseUrl = attrs[propName + SAVE_URL_AS_ASSET];
                        var defaultValue = CCClass.getDefault(attrs[propName + DEFAULT]);
                        var isPrimitiveType = false;
                        if (fastMode) {
                            var userType = attrs[propName + TYPE];
                            if (defaultValue === undefined && userType) {
                                isPrimitiveType = userType === cc.String || userType === cc.Integer || userType === cc.Float || userType === cc.Boolean;
                            } else {
                                var defaultType = typeof defaultValue === 'undefined' ? 'undefined' : _typeof(defaultValue);
                                isPrimitiveType = defaultType === 'string' && !stillUseUrl || defaultType === 'number' || defaultType === 'boolean';
                            }
                        }
                        if (fastMode && isPrimitiveType) {
                            if (propNameToRead !== propName && simplePropsToRead === simpleProps) {
                                simplePropsToRead = simpleProps.slice();
                            }
                            simpleProps.push(propName);
                            if (simplePropsToRead !== simpleProps) {
                                simplePropsToRead.push(propNameToRead);
                            }
                        } else {
                            if (propNameToRead !== propName && advancedPropsToRead === advancedProps) {
                                advancedPropsToRead = advancedProps.slice();
                            }
                            advancedProps.push(propName);
                            if (advancedPropsToRead !== advancedProps) {
                                advancedPropsToRead.push(propNameToRead);
                            }
                            advancedPropsUseUrl.push(stillUseUrl);
                            advancedPropsValueType.push(defaultValue instanceof cc.ValueType && defaultValue.constructor);
                        }
                    }
                }());
                return function (s, o, d, k, t) {
                    for (var i = 0; i < simpleProps.length; ++i) {
                        var _prop = d[simplePropsToRead[i]];
                        if (_prop !== undefined) {
                            o[simpleProps[i]] = _prop;
                        }
                    }
                    for (var _i = 0; _i < advancedProps.length; ++_i) {
                        var propName = advancedProps[_i];
                        var prop = d[advancedPropsToRead[_i]];
                        if (prop === undefined) {
                            continue;
                        }
                        if (!fastMode && (typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) !== 'object') {
                            o[propName] = prop;
                        } else {
                            var valueTypeCtor = advancedPropsValueType[_i];
                            if (valueTypeCtor) {
                                if (fastMode || prop) {
                                    s._deserializeTypedObject(o[propName], prop, valueTypeCtor);
                                } else {
                                    o[propName] = null;
                                }
                            } else {
                                if (prop) {
                                    s._deserializeObjField(o, prop, propName, CC_EDITOR || CC_TEST ? t && o : null, advancedPropsUseUrl[_i]);
                                } else {
                                    o[propName] = null;
                                }
                            }
                        }
                    }
                    if (shouldCopyId && d._id) {
                        o._id = d._id;
                    }
                    if (shouldCopyRawData) {
                        o._$erialized = JSON.parse(JSON.stringify(d));
                        s._deserializePrimitiveObject(o._$erialized, d);
                    }
                };
            };
            function unlinkUnusedPrefab(self, serialized, obj) {
                var uuid = serialized['asset'] && serialized['asset'].__uuid__;
                if (uuid) {
                    var last = self.result.uuidList.length - 1;
                    if (self.result.uuidList[last] === uuid && self.result.uuidObjList[last] === obj && self.result.uuidPropList[last] === 'asset') {
                        self.result.uuidList.pop();
                        self.result.uuidObjList.pop();
                        self.result.uuidPropList.pop();
                    } else {
                        var debugEnvOnlyInfo = 'Failed to skip prefab asset while deserializing PrefabInfo';
                        cc.warn(debugEnvOnlyInfo);
                    }
                }
            }
            function _deserializeFireClass(self, obj, serialized, klass, target) {
                var deserialize;
                if (klass.hasOwnProperty('__deserialize__')) {
                    deserialize = klass.__deserialize__;
                } else {
                    deserialize = compileDeserialize(self, klass);
                    js.value(klass, '__deserialize__', deserialize, true);
                }
                deserialize(self, obj, serialized, klass, target);
                if (CC_PREVIEW || CC_EDITOR && self._ignoreEditorOnly) {
                    if (klass === cc._PrefabInfo && !obj.sync) {
                        unlinkUnusedPrefab(self, serialized, obj);
                    }
                }
            }
            _Deserializer.pool = new js.Pool(function (obj) {
                obj.result = null;
                obj.customEnv = null;
                obj.deserializedList.length = 0;
                obj.deserializedData = null;
                obj._classFinder = null;
                if (CC_DEV) {
                    obj._target = null;
                }
                obj._idList.length = 0;
                obj._idObjList.length = 0;
                obj._idPropList.length = 0;
            }, 1);
            _Deserializer.pool.get = function (result, target, classFinder, customEnv, ignoreEditorOnly) {
                var cache = this._get();
                if (cache) {
                    cache.result = result;
                    cache.customEnv = customEnv;
                    cache._classFinder = classFinder;
                    if (CC_DEV) {
                        cache._target = target;
                        cache._ignoreEditorOnly = ignoreEditorOnly;
                    }
                    return cache;
                } else {
                    return new _Deserializer(result, target, classFinder, customEnv, ignoreEditorOnly);
                }
            };
            return _Deserializer;
        }();
        cc.deserialize = function (data, details, options) {
            options = options || {};
            var classFinder = options.classFinder || js._getClassById;
            var createAssetRefs = options.createAssetRefs || cc.sys.platform === cc.sys.EDITOR_CORE;
            var target = (CC_EDITOR || CC_TEST) && options.target;
            var customEnv = options.customEnv;
            var ignoreEditorOnly = options.ignoreEditorOnly;
            if (CC_EDITOR && Buffer.isBuffer(data)) {
                data = data.toString();
            }
            if (typeof data === 'string') {
                data = JSON.parse(data);
            }
            var tempDetails = !details;
            details = details || Details.pool.get();
            var deserializer = _Deserializer.pool.get(details, target, classFinder, customEnv, ignoreEditorOnly);
            cc.game._isCloning = true;
            var res = deserializer.deserialize(data);
            cc.game._isCloning = false;
            _Deserializer.pool.put(deserializer);
            if (createAssetRefs) {
                details.assignAssetsBy(Editor.serialize.asAsset);
            }
            if (tempDetails) {
                Details.pool.put(details);
            }
            return res;
        };
        cc.deserialize.Details = Details;
        cc.deserialize.reportMissingClass = function (id) {
            if (CC_EDITOR && Editor.Utils.UuidUtils.isUuid(id)) {
                id = Editor.Utils.UuidUtils.decompressUuid(id);
                cc.warnID(5301, id);
            } else {
                cc.warnID(5302, id);
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlc2VyaWFsaXplLmpzIiwiL1VzZXJzL3p6ZjIwMTkvRGVza3RvcC9kZXZlbG9wbWVudC9zdXBwb3J0X2FzdGMvZW5naW5lL2NvY29zMmQvY29yZS9wbGF0Zm9ybS9kZXNlcmlhbGl6ZS5qcyJdLCJuYW1lcyI6WyJqcyIsInJlcXVpcmUiLCJBdHRyIiwiQ0NDbGFzcyIsIm1pc2MiLCJEZXRhaWxzIiwidXVpZExpc3QiLCJ1dWlkT2JqTGlzdCIsInV1aWRQcm9wTGlzdCIsIl9zdGlsbFVzZVVybCIsImNyZWF0ZU1hcCIsInByb3RvdHlwZSIsInJlc2V0IiwibGVuZ3RoIiwiY2xlYXIiLCJDQ19FRElUT1IiLCJDQ19URVNUIiwiYXNzaWduQXNzZXRzQnkiLCJnZXR0ZXIiLCJpIiwibGVuIiwidXVpZCIsIm9iaiIsInByb3AiLCJwdXNoIiwicHJvcE5hbWUiLCJwb29sIiwiUG9vbCIsImdldCIsIl9nZXQiLCJfRGVzZXJpYWxpemVyIiwicmVzdWx0IiwidGFyZ2V0IiwiY2xhc3NGaW5kZXIiLCJjdXN0b21FbnYiLCJpZ25vcmVFZGl0b3JPbmx5IiwiZGVzZXJpYWxpemVkTGlzdCIsImRlc2VyaWFsaXplZERhdGEiLCJfY2xhc3NGaW5kZXIiLCJDQ19ERVYiLCJfdGFyZ2V0IiwiX2lnbm9yZUVkaXRvck9ubHkiLCJfaWRMaXN0IiwiX2lkT2JqTGlzdCIsIl9pZFByb3BMaXN0IiwiX2RlcmVmZXJlbmNlIiwic2VsZiIsImlkUHJvcExpc3QiLCJpZExpc3QiLCJpZE9iakxpc3QiLCJvbkRlcmVmZXJlbmNlZCIsImlkIiwiZGVzZXJpYWxpemUiLCJqc29uT2JqIiwiQXJyYXkiLCJpc0FycmF5IiwianNvbkFycmF5IiwicmVmQ291bnQiLCJtYWluVGFyZ2V0IiwiX2Rlc2VyaWFsaXplT2JqZWN0Iiwic2VyaWFsaXplZCIsIm93bmVyIiwia2xhc3MiLCJ0eXBlIiwiX190eXBlX18iLCJub3RSZXBvcnRlZCIsIl9nZXRDbGFzc0J5SWQiLCJjYyIsInJlcG9ydE1pc3NpbmdDbGFzcyIsIndhcm5JRCIsImdldENsYXNzTmFtZSIsIl9kZXNlcmlhbGl6ZSIsImNvbnRlbnQiLCJDbGFzcyIsIl9pc0NDQ2xhc3MiLCJfZGVzZXJpYWxpemVGaXJlQ2xhc3MiLCJfZGVzZXJpYWxpemVUeXBlZE9iamVjdCIsIl9kZXNlcmlhbGl6ZVByaW1pdGl2ZU9iamVjdCIsIl9kZXNlcmlhbGl6ZU9iakZpZWxkIiwiX19pZF9fIiwidW5kZWZpbmVkIiwiX191dWlkX18iLCJkT2JqIiwiaW5zdGFuY2UiLCJoYXNPd25Qcm9wZXJ0eSIsIlZlYzIiLCJ4IiwieSIsIlZlYzMiLCJ6IiwiQ29sb3IiLCJyIiwiZyIsImIiLCJhIiwiU2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiREVGQVVMVCIsIkRFTElNRVRFUiIsImF0dHJzIiwiZ2V0Q2xhc3NBdHRycyIsImZhc3REZWZpbmVkUHJvcHMiLCJfX3Byb3BzX18iLCJPYmplY3QiLCJrZXlzIiwidmFsdWUiLCJnZXREZWZhdWx0IiwiY29tcGlsZU9iamVjdFR5cGVKaXQiLCJzb3VyY2VzIiwiZGVmYXVsdFZhbHVlIiwiYWNjZXNzb3JUb1NldCIsInByb3BOYW1lTGl0ZXJhbFRvU2V0IiwiYXNzdW1lSGF2ZVByb3BJZklzVmFsdWUiLCJzdGlsbFVzZVVybCIsIlZhbHVlVHlwZSIsImN0b3JDb2RlIiwiY29tcGlsZURlc2VyaWFsaXplIiwiQ0NfU1VQUE9SVF9KSVQiLCJUWVBFIiwiRURJVE9SX09OTFkiLCJTQVZFX1VSTF9BU19BU1NFVCIsIkZPUk1FUkxZX1NFUklBTElaRURfQVMiLCJwcm9wcyIsIl9fdmFsdWVzX18iLCJmYXN0TW9kZSIsIkJVSUxUSU5fQ0xBU1NJRF9SRSIsInRlc3QiLCJfZ2V0Q2xhc3NJZCIsInAiLCJDQ19QUkVWSUVXIiwiSURFTlRJRklFUl9SRSIsImVzY2FwZUZvckpTIiwiYWNjZXNzb3JUb0dldCIsInByb3BOYW1lVG9SZWFkIiwiQ0NfSlNCIiwiQ0NfUlVOVElNRSIsImlzUHJpbWl0aXZlVHlwZSIsInVzZXJUeXBlIiwiU3RyaW5nIiwiSW50ZWdlciIsIkZsb2F0IiwiQm9vbGVhbiIsImRlZmF1bHRUeXBlIiwiaXNDaGlsZENsYXNzT2YiLCJfQmFzZU5vZGUiLCJDb21wb25lbnQiLCJtYXlVc2VkSW5QZXJzaXN0Um9vdCIsIk5vZGUiLCJGdW5jdGlvbiIsImpvaW4iLCJzaG91bGRDb3B5SWQiLCJzaG91bGRDb3B5UmF3RGF0YSIsInNpbXBsZVByb3BzIiwic2ltcGxlUHJvcHNUb1JlYWQiLCJhZHZhbmNlZFByb3BzIiwiYWR2YW5jZWRQcm9wc1RvUmVhZCIsImFkdmFuY2VkUHJvcHNVc2VVcmwiLCJhZHZhbmNlZFByb3BzVmFsdWVUeXBlIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsInMiLCJvIiwiZCIsImsiLCJ0IiwidmFsdWVUeXBlQ3RvciIsIl9pZCIsIl8kZXJpYWxpemVkIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwidW5saW5rVW51c2VkUHJlZmFiIiwibGFzdCIsInBvcCIsImRlYnVnRW52T25seUluZm8iLCJ3YXJuIiwiX19kZXNlcmlhbGl6ZV9fIiwiX1ByZWZhYkluZm8iLCJzeW5jIiwiY2FjaGUiLCJkYXRhIiwiZGV0YWlscyIsIm9wdGlvbnMiLCJjcmVhdGVBc3NldFJlZnMiLCJzeXMiLCJwbGF0Zm9ybSIsIkVESVRPUl9DT1JFIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsInRlbXBEZXRhaWxzIiwiZGVzZXJpYWxpemVyIiwiZ2FtZSIsIl9pc0Nsb25pbmciLCJyZXMiLCJwdXQiLCJFZGl0b3IiLCJzZXJpYWxpemUiLCJhc0Fzc2V0IiwiVXRpbHMiLCJVdWlkVXRpbHMiLCJpc1V1aWQiLCJkZWNvbXByZXNzVXVpZCJdLCJtYXBwaW5ncyI6Ijs7O0lBQUEsSUFBQSxVQUFBLEdBQUEsaURBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7UUEwQkEsSUFBSUEsRUFBQUEsR0FBS0MsT0FBQUEsQ0FBUSxNQUFSQSxDQUFUO1FBQ0EsSUFBSUMsSUFBQUEsR0FBT0QsT0FBQUEsQ0FBUSxhQUFSQSxDQUFYO1FBQ0Es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QUFBQSxDQUFHZixXQUFIZSxDQUFlQyxrQkFBZkQsR0FBb0MsVUFBVWhCLEVBQVYsRUFBYztBQUFBLFlBQzlDLElBQUlwQyxTQUFBQSxJQUFhc0wsTUFBQUEsQ0FBT0csS0FBUEgsQ0FBYUksU0FBYkosQ0FBdUJLLE1BQXZCTCxDQUE4QmxKLEVBQTlCa0osQ0FBakIsRUFBb0Q7QUFBQSxnQkFDaERsSixFQUFBQSxHQUFLa0osTUFBQUEsQ0FBT0csS0FBUEgsQ0FBYUksU0FBYkosQ0FBdUJNLGNBQXZCTixDQUFzQ2xKLEVBQXRDa0osQ0FBTGxKLENBRGdEO0FBQUEsZ0JBRWhEZ0IsRUFBQUEsQ0FBR0UsTUFBSEYsQ0FBVSxJQUFWQSxFQUFnQmhCLEVBQWhCZ0IsRUFGZ0Q7QUFBQSxhQUFwRCxNQUlLO0FBQUEsZ0JBQ0RBLEVBQUFBLENBQUdFLE1BQUhGLENBQVUsSUFBVkEsRUFBZ0JoQixFQUFoQmdCLEVBREM7QUFBQSxhQUx5QztBQUFBLFNBQWxEQSIsImZpbGUiOiJkZXNlcmlhbGl6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIGpzID0gcmVxdWlyZSgnLi9qcycpO1xudmFyIEF0dHIgPSByZXF1aXJlKCcuL2F0dHJpYnV0ZScpO1xudmFyIENDQ2xhc3MgPSByZXF1aXJlKCcuL0NDQ2xhc3MnKTtcbnZhciBtaXNjID0gcmVxdWlyZSgnLi4vdXRpbHMvbWlzYycpO1xuXG4vLyBIRUxQRVJTXG5cbi8qKlxuICogISNlbiBDb250YWlucyBpbmZvcm1hdGlvbiBjb2xsZWN0ZWQgZHVyaW5nIGRlc2VyaWFsaXphdGlvblxuICogISN6aCDljIXlkKvlj43luo/liJfljJbml7bnmoTkuIDkupvkv6Hmga9cbiAqIEBjbGFzcyBEZXRhaWxzXG4gKlxuICovXG52YXIgRGV0YWlscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBsaXN0IG9mIHRoZSBkZXBlbmRzIGFzc2V0cycgdXVpZFxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nW119IHV1aWRMaXN0XG4gICAgICovXG4gICAgdGhpcy51dWlkTGlzdCA9IFtdO1xuICAgIC8qKlxuICAgICAqIHRoZSBvYmogbGlzdCB3aG9zZSBmaWVsZCBuZWVkcyB0byBsb2FkIGFzc2V0IGJ5IHV1aWRcbiAgICAgKiBAcHJvcGVydHkge09iamVjdFtdfSB1dWlkT2JqTGlzdFxuICAgICAqL1xuICAgIHRoaXMudXVpZE9iakxpc3QgPSBbXTtcbiAgICAvKipcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBmaWVsZCBuYW1lIHdoaWNoIHJlZmVyZW5jZWQgdG8gdGhlIGFzc2V0XG4gICAgICogQHByb3BlcnR5IHtTdHJpbmdbXX0gdXVpZFByb3BMaXN0XG4gICAgICovXG4gICAgdGhpcy51dWlkUHJvcExpc3QgPSBbXTtcblxuICAgIC8vIFRPRE8gLSBERUxNRSBzaW5jZSAyLjBcbiAgICB0aGlzLl9zdGlsbFVzZVVybCA9IGpzLmNyZWF0ZU1hcCh0cnVlKTtcbn07XG4vKipcbiAqIEBtZXRob2QgcmVzZXRcbiAqL1xuRGV0YWlscy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy51dWlkTGlzdC5sZW5ndGggPSAwO1xuICAgIHRoaXMudXVpZE9iakxpc3QubGVuZ3RoID0gMDtcbiAgICB0aGlzLnV1aWRQcm9wTGlzdC5sZW5ndGggPSAwO1xuICAgIGpzLmNsZWFyKHRoaXMuX3N0aWxsVXNlVXJsKTtcbn07XG5pZiAoQ0NfRURJVE9SIHx8IENDX1RFU1QpIHtcbiAgICBEZXRhaWxzLnByb3RvdHlwZS5hc3NpZ25Bc3NldHNCeSA9IGZ1bmN0aW9uIChnZXR0ZXIpIHtcbiAgICAgICAgLy8gaWdub3JlIHRoaXMuX3N0aWxsVXNlVXJsXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLnV1aWRMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdXVpZCA9IHRoaXMudXVpZExpc3RbaV07XG4gICAgICAgICAgICB2YXIgb2JqID0gdGhpcy51dWlkT2JqTGlzdFtpXTtcbiAgICAgICAgICAgIHZhciBwcm9wID0gdGhpcy51dWlkUHJvcExpc3RbaV07XG4gICAgICAgICAgICBvYmpbcHJvcF0gPSBnZXR0ZXIodXVpZCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLy8gLyoqXG4vLyAgKiBAbWV0aG9kIGdldFV1aWRPZlxuLy8gICogQHBhcmFtIHtPYmplY3R9IG9ialxuLy8gICogQHBhcmFtIHtTdHJpbmd9IHByb3BOYW1lXG4vLyAgKiBAcmV0dXJuIHtTdHJpbmd9XG4vLyAgKi9cbi8vIERldGFpbHMucHJvdG90eXBlLmdldFV1aWRPZiA9IGZ1bmN0aW9uIChvYmosIHByb3BOYW1lKSB7XG4vLyAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnV1aWRPYmpMaXN0Lmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgICAgIGlmICh0aGlzLnV1aWRPYmpMaXN0W2ldID09PSBvYmogJiYgdGhpcy51dWlkUHJvcExpc3RbaV0gPT09IHByb3BOYW1lKSB7XG4vLyAgICAgICAgICAgICByZXR1cm4gdGhpcy51dWlkTGlzdFtpXTtcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vICAgICByZXR1cm4gXCJcIjtcbi8vIH07XG4vKipcbiAqIEBtZXRob2QgcHVzaFxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BOYW1lXG4gKiBAcGFyYW0ge1N0cmluZ30gdXVpZFxuICovXG5EZXRhaWxzLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKG9iaiwgcHJvcE5hbWUsIHV1aWQsIF9zdGlsbFVzZVVybCkge1xuICAgIGlmIChfc3RpbGxVc2VVcmwpIHtcbiAgICAgICAgdGhpcy5fc3RpbGxVc2VVcmxbdGhpcy51dWlkTGlzdC5sZW5ndGhdID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy51dWlkTGlzdC5wdXNoKHV1aWQpO1xuICAgIHRoaXMudXVpZE9iakxpc3QucHVzaChvYmopO1xuICAgIHRoaXMudXVpZFByb3BMaXN0LnB1c2gocHJvcE5hbWUpO1xufTtcblxuRGV0YWlscy5wb29sID0gbmV3IGpzLlBvb2woZnVuY3Rpb24gKG9iaikge1xuICAgIG9iai5yZXNldCgpO1xufSwgMTApO1xuXG5EZXRhaWxzLnBvb2wuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9nZXQoKSB8fCBuZXcgRGV0YWlscygpO1xufTtcblxuLy8gSU1QTEVNRU5UIE9GIERFU0VSSUFMSVpBVElPTlxuXG52YXIgX0Rlc2VyaWFsaXplciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gX0Rlc2VyaWFsaXplcihyZXN1bHQsIHRhcmdldCwgY2xhc3NGaW5kZXIsIGN1c3RvbUVudiwgaWdub3JlRWRpdG9yT25seSkge1xuICAgICAgICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgdGhpcy5jdXN0b21FbnYgPSBjdXN0b21FbnY7XG4gICAgICAgIHRoaXMuZGVzZXJpYWxpemVkTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLmRlc2VyaWFsaXplZERhdGEgPSBudWxsO1xuICAgICAgICB0aGlzLl9jbGFzc0ZpbmRlciA9IGNsYXNzRmluZGVyO1xuICAgICAgICBpZiAoQ0NfREVWKSB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLl9pZ25vcmVFZGl0b3JPbmx5ID0gaWdub3JlRWRpdG9yT25seTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pZExpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5faWRPYmpMaXN0ID0gW107XG4gICAgICAgIHRoaXMuX2lkUHJvcExpc3QgPSBbXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfZGVyZWZlcmVuY2UgKHNlbGYpIHtcbiAgICAgICAgLy8g6L+Z6YeM5LiN6YeH55So6YGN5Y6G5Y+N5bqP5YiX5YyW57uT5p6c55qE5pa55byP77yM5Zug5Li65Y+N5bqP5YiX5YyW55qE57uT5p6c5aaC5p6c5byV55So5Yiw5aSN5p2C55qE5aSW6YOo5bqT77yM5b6I5a655piT5aCG5qCI5rqi5Ye644CCXG4gICAgICAgIHZhciBkZXNlcmlhbGl6ZWRMaXN0ID0gc2VsZi5kZXNlcmlhbGl6ZWRMaXN0O1xuICAgICAgICB2YXIgaWRQcm9wTGlzdCA9IHNlbGYuX2lkUHJvcExpc3Q7XG4gICAgICAgIHZhciBpZExpc3QgPSBzZWxmLl9pZExpc3Q7XG4gICAgICAgIHZhciBpZE9iakxpc3QgPSBzZWxmLl9pZE9iakxpc3Q7XG4gICAgICAgIHZhciBvbkRlcmVmZXJlbmNlZCA9IHNlbGYuX2NsYXNzRmluZGVyICYmIHNlbGYuX2NsYXNzRmluZGVyLm9uRGVyZWZlcmVuY2VkO1xuICAgICAgICB2YXIgaSwgcHJvcE5hbWUsIGlkO1xuICAgICAgICBpZiAoQ0NfRURJVE9SICYmIG9uRGVyZWZlcmVuY2VkKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvcE5hbWUgPSBpZFByb3BMaXN0W2ldO1xuICAgICAgICAgICAgICAgIGlkID0gaWRMaXN0W2ldO1xuICAgICAgICAgICAgICAgIGlkT2JqTGlzdFtpXVtwcm9wTmFtZV0gPSBkZXNlcmlhbGl6ZWRMaXN0W2lkXTtcbiAgICAgICAgICAgICAgICBvbkRlcmVmZXJlbmNlZChkZXNlcmlhbGl6ZWRMaXN0LCBpZCwgaWRPYmpMaXN0W2ldLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvcE5hbWUgPSBpZFByb3BMaXN0W2ldO1xuICAgICAgICAgICAgICAgIGlkID0gaWRMaXN0W2ldO1xuICAgICAgICAgICAgICAgIGlkT2JqTGlzdFtpXVtwcm9wTmFtZV0gPSBkZXNlcmlhbGl6ZWRMaXN0W2lkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGUgPSBfRGVzZXJpYWxpemVyLnByb3RvdHlwZTtcblxuICAgIHByb3RvdHlwZS5kZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChqc29uT2JqKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGpzb25PYmopKSB7XG4gICAgICAgICAgICB2YXIganNvbkFycmF5ID0ganNvbk9iajtcbiAgICAgICAgICAgIHZhciByZWZDb3VudCA9IGpzb25BcnJheS5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmRlc2VyaWFsaXplZExpc3QubGVuZ3RoID0gcmVmQ291bnQ7XG4gICAgICAgICAgICAvLyBkZXNlcmlhbGl6ZVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWZDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGpzb25BcnJheVtpXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQ0NfRURJVE9SIHx8IENDX1RFU1QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYWluVGFyZ2V0ID0gKGkgPT09IDAgJiYgdGhpcy5fdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzZXJpYWxpemVkTGlzdFtpXSA9IHRoaXMuX2Rlc2VyaWFsaXplT2JqZWN0KGpzb25BcnJheVtpXSwgZmFsc2UsIG1haW5UYXJnZXQsIHRoaXMuZGVzZXJpYWxpemVkTGlzdCwgJycgKyBpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzZXJpYWxpemVkTGlzdFtpXSA9IHRoaXMuX2Rlc2VyaWFsaXplT2JqZWN0KGpzb25BcnJheVtpXSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZXNlcmlhbGl6ZWREYXRhID0gcmVmQ291bnQgPiAwID8gdGhpcy5kZXNlcmlhbGl6ZWRMaXN0WzBdIDogW107XG5cbiAgICAgICAgICAgIC8vLy8gY2FsbGJhY2tcbiAgICAgICAgICAgIC8vZm9yICh2YXIgaiA9IDA7IGogPCByZWZDb3VudDsgaisrKSB7XG4gICAgICAgICAgICAvLyAgICBpZiAocmVmZXJlbmNlZExpc3Rbal0ub25BZnRlckRlc2VyaWFsaXplKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgcmVmZXJlbmNlZExpc3Rbal0ub25BZnRlckRlc2VyaWFsaXplKCk7XG4gICAgICAgICAgICAvLyAgICB9XG4gICAgICAgICAgICAvL31cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVzZXJpYWxpemVkTGlzdC5sZW5ndGggPSAxO1xuICAgICAgICAgICAgaWYgKENDX0VESVRPUiB8fCBDQ19URVNUKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXNlcmlhbGl6ZWREYXRhID0ganNvbk9iaiA/IHRoaXMuX2Rlc2VyaWFsaXplT2JqZWN0KGpzb25PYmosIGZhbHNlLCB0aGlzLl90YXJnZXQsIHRoaXMuZGVzZXJpYWxpemVkTGlzdCwgJzAnKSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc2VyaWFsaXplZERhdGEgPSBqc29uT2JqID8gdGhpcy5fZGVzZXJpYWxpemVPYmplY3QoanNvbk9iaiwgZmFsc2UpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVzZXJpYWxpemVkTGlzdFswXSA9IHRoaXMuZGVzZXJpYWxpemVkRGF0YTtcblxuICAgICAgICAgICAgLy8vLyBjYWxsYmFja1xuICAgICAgICAgICAgLy9pZiAoZGVzZXJpYWxpemVkRGF0YS5vbkFmdGVyRGVzZXJpYWxpemUpIHtcbiAgICAgICAgICAgIC8vICAgIGRlc2VyaWFsaXplZERhdGEub25BZnRlckRlc2VyaWFsaXplKCk7XG4gICAgICAgICAgICAvL31cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlcmVmZXJlbmNlXG4gICAgICAgIF9kZXJlZmVyZW5jZSh0aGlzKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5kZXNlcmlhbGl6ZWREYXRhO1xuICAgIH07XG5cbiAgICAvLy8qKlxuICAgIC8vICogQHBhcmFtIHtPYmplY3R9IHNlcmlhbGl6ZWQgLSBUaGUgb2JqIHRvIGRlc2VyaWFsaXplLCBtdXN0IGJlIG5vbi1uaWxcbiAgICAvLyAqIEBwYXJhbSB7Qm9vbGVhbn0gX3N0aWxsVXNlVXJsXG4gICAgLy8gKiBAcGFyYW0ge09iamVjdH0gW3RhcmdldD1udWxsXSAtIGVkaXRvciBvbmx5XG4gICAgLy8gKiBAcGFyYW0ge09iamVjdH0gW293bmVyXSAtIGRlYnVnIG9ubHlcbiAgICAvLyAqIEBwYXJhbSB7U3RyaW5nfSBbcHJvcE5hbWVdIC0gZGVidWcgb25seVxuICAgIC8vICovXG4gICAgcHJvdG90eXBlLl9kZXNlcmlhbGl6ZU9iamVjdCA9IGZ1bmN0aW9uIChzZXJpYWxpemVkLCBfc3RpbGxVc2VVcmwsIHRhcmdldCwgb3duZXIsIHByb3BOYW1lKSB7XG4gICAgICAgIHZhciBwcm9wO1xuICAgICAgICB2YXIgb2JqID0gbnVsbDsgICAgIC8vIHRoZSBvYmogdG8gcmV0dXJuXG4gICAgICAgIHZhciBrbGFzcyA9IG51bGw7XG4gICAgICAgIHZhciB0eXBlID0gc2VyaWFsaXplZC5fX3R5cGVfXztcbiAgICAgICAgaWYgKHR5cGUpIHtcblxuICAgICAgICAgICAgLy8gVHlwZSBPYmplY3QgKGluY2x1ZGluZyBDQ0NsYXNzKVxuXG4gICAgICAgICAgICBrbGFzcyA9IHRoaXMuX2NsYXNzRmluZGVyKHR5cGUsIHNlcmlhbGl6ZWQsIG93bmVyLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICBpZiAoIWtsYXNzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vdFJlcG9ydGVkID0gdGhpcy5fY2xhc3NGaW5kZXIgPT09IGpzLl9nZXRDbGFzc0J5SWQ7XG4gICAgICAgICAgICAgICAgaWYgKG5vdFJlcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmRlc2VyaWFsaXplLnJlcG9ydE1pc3NpbmdDbGFzcyh0eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgoQ0NfRURJVE9SIHx8IENDX1RFU1QpICYmIHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIHVzZSB0YXJnZXRcbiAgICAgICAgICAgICAgICBpZiAoICEodGFyZ2V0IGluc3RhbmNlb2Yga2xhc3MpICkge1xuICAgICAgICAgICAgICAgICAgICBjYy53YXJuSUQoNTMwMCwganMuZ2V0Q2xhc3NOYW1lKHRhcmdldCksIGtsYXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JqID0gdGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaW5zdGFudGlhdGUgYSBuZXcgb2JqZWN0XG4gICAgICAgICAgICAgICAgb2JqID0gbmV3IGtsYXNzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvYmouX2Rlc2VyaWFsaXplKSB7XG4gICAgICAgICAgICAgICAgb2JqLl9kZXNlcmlhbGl6ZShzZXJpYWxpemVkLmNvbnRlbnQsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2MuQ2xhc3MuX2lzQ0NDbGFzcyhrbGFzcykpIHtcbiAgICAgICAgICAgICAgICBfZGVzZXJpYWxpemVGaXJlQ2xhc3ModGhpcywgb2JqLCBzZXJpYWxpemVkLCBrbGFzcywgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rlc2VyaWFsaXplVHlwZWRPYmplY3Qob2JqLCBzZXJpYWxpemVkLCBrbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoICFBcnJheS5pc0FycmF5KHNlcmlhbGl6ZWQpICkge1xuXG4gICAgICAgICAgICAvLyBlbWJlZGRlZCBwcmltaXRpdmUgamF2YXNjcmlwdCBvYmplY3RcblxuICAgICAgICAgICAgb2JqID0gKChDQ19FRElUT1IgfHwgQ0NfVEVTVCkgJiYgdGFyZ2V0KSB8fCB7fTtcbiAgICAgICAgICAgIHRoaXMuX2Rlc2VyaWFsaXplUHJpbWl0aXZlT2JqZWN0KG9iaiwgc2VyaWFsaXplZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgIC8vIEFycmF5XG5cbiAgICAgICAgICAgIGlmICgoQ0NfRURJVE9SIHx8IENDX1RFU1QpICYmIHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRhcmdldC5sZW5ndGggPSBzZXJpYWxpemVkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBvYmogPSB0YXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmogPSBuZXcgQXJyYXkoc2VyaWFsaXplZC5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlcmlhbGl6ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gc2VyaWFsaXplZFtpXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgPT09ICdvYmplY3QnICYmIHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKENDX0VESVRPUiB8fCBDQ19URVNUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZXNlcmlhbGl6ZU9iakZpZWxkKG9iaiwgcHJvcCwgJycgKyBpLCB0YXJnZXQgJiYgb2JqLCBfc3RpbGxVc2VVcmwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVzZXJpYWxpemVPYmpGaWVsZChvYmosIHByb3AsICcnICsgaSwgbnVsbCwgX3N0aWxsVXNlVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqW2ldID0gcHJvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuXG4gICAgLy8g5ZKMIF9kZXNlcmlhbGl6ZU9iamVjdCDkuI3lkIznmoTlnLDmlrnlnKjkuo7kvJrliKTmlq0gaWQg5ZKMIHV1aWRcbiAgICBwcm90b3R5cGUuX2Rlc2VyaWFsaXplT2JqRmllbGQgPSBmdW5jdGlvbiAob2JqLCBqc29uT2JqLCBwcm9wTmFtZSwgdGFyZ2V0LCBfc3RpbGxVc2VVcmwpIHtcbiAgICAgICAgdmFyIGlkID0ganNvbk9iai5fX2lkX187XG4gICAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgdXVpZCA9IGpzb25PYmouX191dWlkX187XG4gICAgICAgICAgICBpZiAodXVpZCkge1xuICAgICAgICAgICAgICAgIC8vaWYgKEVOQUJMRV9UQVJHRVQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy/ov5nph4zkuI3lgZrku7vkvZXmk43kvZzvvIzlm6DkuLrmnInlj6/og73osIPnlKjogIXpnIDopoHnn6XpgZPkvp3otZblk6rkupsgYXNzZXTjgIJcbiAgICAgICAgICAgICAgICAgICAgLy/osIPnlKjogIXkvb/nlKggdXVpZExpc3Qg5pe277yM5Y+v5Lul5Yik5patIG9ialtwcm9wTmFtZV0g5piv5ZCm5Li656m677yM5Li656m65YiZ6KGo56S65b6F6L+b5LiA5q2l5Yqg6L2977yMXG4gICAgICAgICAgICAgICAgICAgIC8v5LiN5Li656m65YiZ5Y+q5piv6KGo5piO5L6d6LWW5YWz57O744CCXG4gICAgICAgICAgICAgICAgLy8gICAgaWYgKHRhcmdldCAmJiB0YXJnZXRbcHJvcE5hbWVdICYmIHRhcmdldFtwcm9wTmFtZV0uX3V1aWQgPT09IHV1aWQpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgY29uc29sZS5hc3NlcnQob2JqW3Byb3BOYW1lXSA9PT0gdGFyZ2V0W3Byb3BOYW1lXSk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAvLyAgICB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0LnB1c2gob2JqLCBwcm9wTmFtZSwgdXVpZCwgX3N0aWxsVXNlVXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChDQ19FRElUT1IgfHwgQ0NfVEVTVCkge1xuICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcE5hbWVdID0gdGhpcy5fZGVzZXJpYWxpemVPYmplY3QoanNvbk9iaiwgX3N0aWxsVXNlVXJsLCB0YXJnZXQgJiYgdGFyZ2V0W3Byb3BOYW1lXSwgb2JqLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcE5hbWVdID0gdGhpcy5fZGVzZXJpYWxpemVPYmplY3QoanNvbk9iaiwgX3N0aWxsVXNlVXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZE9iaiA9IHRoaXMuZGVzZXJpYWxpemVkTGlzdFtpZF07XG4gICAgICAgICAgICBpZiAoZE9iaikge1xuICAgICAgICAgICAgICAgIG9ialtwcm9wTmFtZV0gPSBkT2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faWRMaXN0LnB1c2goaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lkT2JqTGlzdC5wdXNoKG9iaik7XG4gICAgICAgICAgICAgICAgdGhpcy5faWRQcm9wTGlzdC5wdXNoKHByb3BOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcm90b3R5cGUuX2Rlc2VyaWFsaXplUHJpbWl0aXZlT2JqZWN0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBzZXJpYWxpemVkKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gc2VyaWFsaXplZCkge1xuICAgICAgICAgICAgaWYgKHNlcmlhbGl6ZWQuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3AgPSBzZXJpYWxpemVkW3Byb3BOYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wTmFtZSAhPT0gJ19fdHlwZV9fJy8qICYmIGsgIT0gJ19faWRfXycqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VbcHJvcE5hbWVdID0gcHJvcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDQ19FRElUT1IgfHwgQ0NfVEVTVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2Rlc2VyaWFsaXplT2JqRmllbGQoaW5zdGFuY2UsIHByb3AsIHByb3BOYW1lLCBzZWxmLl90YXJnZXQgJiYgaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fZGVzZXJpYWxpemVPYmpGaWVsZChpbnN0YW5jZSwgcHJvcCwgcHJvcE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VbcHJvcE5hbWVdID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIGZ1bmN0aW9uIF9jb21waWxlVHlwZWRPYmplY3QgKGFjY2Vzc29yLCBrbGFzcywgY3RvckNvZGUpIHtcbiAgICAvLyAgICAgaWYgKGtsYXNzID09PSBjYy5WZWMyKSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gYHtgICtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGBvJHthY2Nlc3Nvcn0ueD1wcm9wLnh8fDA7YCArXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBgbyR7YWNjZXNzb3J9Lnk9cHJvcC55fHwwO2AgK1xuICAgIC8vICAgICAgICAgICAgICAgIGB9YDtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICBlbHNlIGlmIChrbGFzcyA9PT0gY2MuQ29sb3IpIHtcbiAgICAvLyAgICAgICAgIHJldHVybiBge2AgK1xuICAgIC8vICAgICAgICAgICAgICAgICAgICBgbyR7YWNjZXNzb3J9LnI9cHJvcC5yfHwwO2AgK1xuICAgIC8vICAgICAgICAgICAgICAgICAgICBgbyR7YWNjZXNzb3J9Lmc9cHJvcC5nfHwwO2AgK1xuICAgIC8vICAgICAgICAgICAgICAgICAgICBgbyR7YWNjZXNzb3J9LmI9cHJvcC5ifHwwO2AgK1xuICAgIC8vICAgICAgICAgICAgICAgICAgICBgbyR7YWNjZXNzb3J9LmE9KHByb3AuYT09PXVuZGVmaW5lZD8yNTU6cHJvcC5hKTtgICtcbiAgICAvLyAgICAgICAgICAgICAgICBgfWA7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgZWxzZSBpZiAoa2xhc3MgPT09IGNjLlNpemUpIHtcbiAgICAvLyAgICAgICAgIHJldHVybiBge2AgK1xuICAgIC8vICAgICAgICAgICAgICAgICAgICBgbyR7YWNjZXNzb3J9LndpZHRoPXByb3Aud2lkdGh8fDA7YCArXG4gICAgLy8gICAgICAgICAgICAgICAgICAgIGBvJHthY2Nlc3Nvcn0uaGVpZ2h0PXByb3AuaGVpZ2h0fHwwO2AgK1xuICAgIC8vICAgICAgICAgICAgICAgIGB9YDtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICBlbHNlIHtcbiAgICAvLyAgICAgICAgIHJldHVybiBgcy5fZGVzZXJpYWxpemVUeXBlZE9iamVjdChvJHthY2Nlc3Nvcn0scHJvcCwke2N0b3JDb2RlfSk7YDtcbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIC8vIGRlc2VyaWFsaXplIFZhbHVlVHlwZVxuICAgIHByb3RvdHlwZS5fZGVzZXJpYWxpemVUeXBlZE9iamVjdCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgc2VyaWFsaXplZCwga2xhc3MpIHtcbiAgICAgICAgaWYgKGtsYXNzID09PSBjYy5WZWMyKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS54ID0gc2VyaWFsaXplZC54IHx8IDA7XG4gICAgICAgICAgICBpbnN0YW5jZS55ID0gc2VyaWFsaXplZC55IHx8IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2xhc3MgPT09IGNjLlZlYzMpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLnggPSBzZXJpYWxpemVkLnggfHwgMDtcbiAgICAgICAgICAgIGluc3RhbmNlLnkgPSBzZXJpYWxpemVkLnkgfHwgMDtcbiAgICAgICAgICAgIGluc3RhbmNlLnogPSBzZXJpYWxpemVkLnogfHwgMDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrbGFzcyA9PT0gY2MuQ29sb3IpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLnIgPSBzZXJpYWxpemVkLnIgfHwgMDtcbiAgICAgICAgICAgIGluc3RhbmNlLmcgPSBzZXJpYWxpemVkLmcgfHwgMDtcbiAgICAgICAgICAgIGluc3RhbmNlLmIgPSBzZXJpYWxpemVkLmIgfHwgMDtcbiAgICAgICAgICAgIHZhciBhID0gc2VyaWFsaXplZC5hO1xuICAgICAgICAgICAgaW5zdGFuY2UuYSA9IChhID09PSB1bmRlZmluZWQgPyAyNTUgOiBhKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrbGFzcyA9PT0gY2MuU2l6ZSkge1xuICAgICAgICAgICAgaW5zdGFuY2Uud2lkdGggPSBzZXJpYWxpemVkLndpZHRoIHx8IDA7XG4gICAgICAgICAgICBpbnN0YW5jZS5oZWlnaHQgPSBzZXJpYWxpemVkLmhlaWdodCB8fCAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIERFRkFVTFQgPSBBdHRyLkRFTElNRVRFUiArICdkZWZhdWx0JztcbiAgICAgICAgdmFyIGF0dHJzID0gQXR0ci5nZXRDbGFzc0F0dHJzKGtsYXNzKTtcbiAgICAgICAgdmFyIGZhc3REZWZpbmVkUHJvcHMgPSBrbGFzcy5fX3Byb3BzX18gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhpbnN0YW5jZSk7ICAgIC8vIOmBjeWOhiBpbnN0YW5jZe+8jOWmguaenOWFt+acieexu+Wei++8jOaJjeS4jeS8muaKiiBfX3R5cGVfXyDkuZ/or7vov5vmnaVcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmYXN0RGVmaW5lZFByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcHJvcE5hbWUgPSBmYXN0RGVmaW5lZFByb3BzW2ldO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc2VyaWFsaXplZFtwcm9wTmFtZV07XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCAhc2VyaWFsaXplZC5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBub3Qgc2VyaWFsaXplZCxcbiAgICAgICAgICAgICAgICAvLyByZWNvdmVyIHRvIGRlZmF1bHQgdmFsdWUgaW4gVmFsdWVUeXBlLCBiZWNhdXNlIGVsaW1pbmF0ZWQgcHJvcGVydGllcyBlcXVhbHMgdG9cbiAgICAgICAgICAgICAgICAvLyBpdHMgZGVmYXVsdCB2YWx1ZSBpbiBWYWx1ZVR5cGUsIG5vdCBkZWZhdWx0IHZhbHVlIGluIHVzZXIgY2xhc3NcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IENDQ2xhc3MuZ2V0RGVmYXVsdChhdHRyc1twcm9wTmFtZSArIERFRkFVTFRdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVtwcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKENDX0VESVRPUiB8fCBDQ19URVNUKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rlc2VyaWFsaXplT2JqRmllbGQoaW5zdGFuY2UsIHZhbHVlLCBwcm9wTmFtZSwgdGhpcy5fdGFyZ2V0ICYmIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rlc2VyaWFsaXplT2JqRmllbGQoaW5zdGFuY2UsIHZhbHVlLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2VbcHJvcE5hbWVdID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjb21waWxlT2JqZWN0VHlwZUppdCAoc291cmNlcywgZGVmYXVsdFZhbHVlLCBhY2Nlc3NvclRvU2V0LCBwcm9wTmFtZUxpdGVyYWxUb1NldCwgYXNzdW1lSGF2ZVByb3BJZklzVmFsdWUsIHN0aWxsVXNlVXJsKSB7XG4gICAgICAgIGlmIChkZWZhdWx0VmFsdWUgaW5zdGFuY2VvZiBjYy5WYWx1ZVR5cGUpIHtcbiAgICAgICAgICAgIC8vIGZhc3QgY2FzZVxuICAgICAgICAgICAgaWYgKCFhc3N1bWVIYXZlUHJvcElmSXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaCgnaWYocHJvcCl7Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY3RvckNvZGUgPSBqcy5nZXRDbGFzc05hbWUoZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgIHNvdXJjZXMucHVzaChgcy5fZGVzZXJpYWxpemVUeXBlZE9iamVjdChvJHthY2Nlc3NvclRvU2V0fSxwcm9wLCR7Y3RvckNvZGV9KTtgKTtcbiAgICAgICAgICAgIGlmICghYXNzdW1lSGF2ZVByb3BJZklzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VzLnB1c2goJ31lbHNlIG8nICsgYWNjZXNzb3JUb1NldCArICc9bnVsbDsnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNvdXJjZXMucHVzaCgnaWYocHJvcCl7Jyk7XG4gICAgICAgICAgICAgICAgc291cmNlcy5wdXNoKCdzLl9kZXNlcmlhbGl6ZU9iakZpZWxkKG8scHJvcCwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BOYW1lTGl0ZXJhbFRvU2V0ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoQ0NfRURJVE9SIHx8IENDX1RFU1QpID8gJyx0JiZvLCcgOiAnLG51bGwsJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgISFzdGlsbFVzZVVybCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICcpOycpO1xuICAgICAgICAgICAgc291cmNlcy5wdXNoKCd9ZWxzZSBvJyArIGFjY2Vzc29yVG9TZXQgKyAnPW51bGw7Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29tcGlsZURlc2VyaWFsaXplID0gQ0NfU1VQUE9SVF9KSVQgPyBmdW5jdGlvbiAoc2VsZiwga2xhc3MpIHtcbiAgICAgICAgdmFyIFRZUEUgPSBBdHRyLkRFTElNRVRFUiArICd0eXBlJztcbiAgICAgICAgdmFyIEVESVRPUl9PTkxZID0gQXR0ci5ERUxJTUVURVIgKyAnZWRpdG9yT25seSc7XG4gICAgICAgIHZhciBERUZBVUxUID0gQXR0ci5ERUxJTUVURVIgKyAnZGVmYXVsdCc7XG4gICAgICAgIHZhciBTQVZFX1VSTF9BU19BU1NFVCA9IEF0dHIuREVMSU1FVEVSICsgJ3NhdmVVcmxBc0Fzc2V0JztcbiAgICAgICAgdmFyIEZPUk1FUkxZX1NFUklBTElaRURfQVMgPSBBdHRyLkRFTElNRVRFUiArICdmb3JtZXJseVNlcmlhbGl6ZWRBcyc7XG4gICAgICAgIHZhciBhdHRycyA9IEF0dHIuZ2V0Q2xhc3NBdHRycyhrbGFzcyk7XG5cbiAgICAgICAgdmFyIHByb3BzID0ga2xhc3MuX192YWx1ZXNfXztcbiAgICAgICAgLy8gc2VsZiwgb2JqLCBzZXJpYWxpemVkRGF0YSwga2xhc3MsIHRhcmdldFxuICAgICAgICB2YXIgc291cmNlcyA9IFtcbiAgICAgICAgICAgICd2YXIgcHJvcDsnXG4gICAgICAgIF07XG4gICAgICAgIHZhciBmYXN0TW9kZSA9IG1pc2MuQlVJTFRJTl9DTEFTU0lEX1JFLnRlc3QoanMuX2dldENsYXNzSWQoa2xhc3MpKTtcbiAgICAgICAgLy8gc291cmNlcy5wdXNoKCd2YXIgdmIsdm4sdnMsdm8sdnUsdmY7Jyk7ICAgIC8vIGJvb2xlYW4sIG51bWJlciwgc3RyaW5nLCBvYmplY3QsIHVuZGVmaW5lZCwgZnVuY3Rpb25cbiAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwcm9wcy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgdmFyIHByb3BOYW1lID0gcHJvcHNbcF07XG4gICAgICAgICAgICBpZiAoKENDX1BSRVZJRVcgfHwgKENDX0VESVRPUiAmJiBzZWxmLl9pZ25vcmVFZGl0b3JPbmx5KSkgJiYgYXR0cnNbcHJvcE5hbWUgKyBFRElUT1JfT05MWV0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTsgICAvLyBza2lwIGVkaXRvciBvbmx5IGlmIGluIHByZXZpZXdcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGFjY2Vzc29yVG9TZXQsIHByb3BOYW1lTGl0ZXJhbFRvU2V0O1xuICAgICAgICAgICAgaWYgKENDQ2xhc3MuSURFTlRJRklFUl9SRS50ZXN0KHByb3BOYW1lKSkge1xuICAgICAgICAgICAgICAgIHByb3BOYW1lTGl0ZXJhbFRvU2V0ID0gJ1wiJyArIHByb3BOYW1lICsgJ1wiJztcbiAgICAgICAgICAgICAgICBhY2Nlc3NvclRvU2V0ID0gJy4nICsgcHJvcE5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcm9wTmFtZUxpdGVyYWxUb1NldCA9IENDQ2xhc3MuZXNjYXBlRm9ySlMocHJvcE5hbWUpO1xuICAgICAgICAgICAgICAgIGFjY2Vzc29yVG9TZXQgPSAnWycgKyBwcm9wTmFtZUxpdGVyYWxUb1NldCArICddJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGFjY2Vzc29yVG9HZXQgPSBhY2Nlc3NvclRvU2V0O1xuICAgICAgICAgICAgaWYgKGF0dHJzW3Byb3BOYW1lICsgRk9STUVSTFlfU0VSSUFMSVpFRF9BU10pIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcE5hbWVUb1JlYWQgPSBhdHRyc1twcm9wTmFtZSArIEZPUk1FUkxZX1NFUklBTElaRURfQVNdO1xuICAgICAgICAgICAgICAgIGlmIChDQ0NsYXNzLklERU5USUZJRVJfUkUudGVzdChwcm9wTmFtZVRvUmVhZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3JUb0dldCA9ICcuJyArIHByb3BOYW1lVG9SZWFkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3JUb0dldCA9ICdbJyArIENDQ2xhc3MuZXNjYXBlRm9ySlMocHJvcE5hbWVUb1JlYWQpICsgJ10nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc291cmNlcy5wdXNoKCdwcm9wPWQnICsgYWNjZXNzb3JUb0dldCArICc7Jyk7XG4gICAgICAgICAgICBzb3VyY2VzLnB1c2goYGlmKHR5cGVvZiAke0NDX0pTQiB8fCBDQ19SVU5USU1FID8gJyhwcm9wKScgOiAncHJvcCd9IT09XCJ1bmRlZmluZWRcIil7YCk7XG5cbiAgICAgICAgICAgIHZhciBzdGlsbFVzZVVybCA9IGF0dHJzW3Byb3BOYW1lICsgU0FWRV9VUkxfQVNfQVNTRVRdO1xuICAgICAgICAgICAgLy8gZnVuY3Rpb24gdW5kZWZpbmVkIG9iamVjdChudWxsKSBzdHJpbmcgYm9vbGVhbiBudW1iZXJcbiAgICAgICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBDQ0NsYXNzLmdldERlZmF1bHQoYXR0cnNbcHJvcE5hbWUgKyBERUZBVUxUXSk7XG4gICAgICAgICAgICBpZiAoZmFzdE1vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNQcmltaXRpdmVUeXBlO1xuICAgICAgICAgICAgICAgIHZhciB1c2VyVHlwZSA9IGF0dHJzW3Byb3BOYW1lICsgVFlQRV07XG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIHVzZXJUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzUHJpbWl0aXZlVHlwZSA9IHVzZXJUeXBlID09PSBjYy5TdHJpbmcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlclR5cGUgPT09IGNjLkludGVnZXIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlclR5cGUgPT09IGNjLkZsb2F0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJUeXBlID09PSBjYy5Cb29sZWFuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRUeXBlID0gdHlwZW9mIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaXNQcmltaXRpdmVUeXBlID0gKGRlZmF1bHRUeXBlID09PSAnc3RyaW5nJyAmJiAhc3RpbGxVc2VVcmwpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRUeXBlID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VHlwZSA9PT0gJ2Jvb2xlYW4nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlcy5wdXNoKGBvJHthY2Nlc3NvclRvU2V0fT1wcm9wO2ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGlsZU9iamVjdFR5cGVKaXQoc291cmNlcywgZGVmYXVsdFZhbHVlLCBhY2Nlc3NvclRvU2V0LCBwcm9wTmFtZUxpdGVyYWxUb1NldCwgdHJ1ZSwgc3RpbGxVc2VVcmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaChgaWYodHlwZW9mICR7Q0NfSlNCIHx8IENDX1JVTlRJTUUgPyAnKHByb3ApJyA6ICdwcm9wJ30hPT1cIm9iamVjdFwiKXtgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvJyArIGFjY2Vzc29yVG9TZXQgKyAnPXByb3A7JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICd9ZWxzZXsnKTtcbiAgICAgICAgICAgICAgICBjb21waWxlT2JqZWN0VHlwZUppdChzb3VyY2VzLCBkZWZhdWx0VmFsdWUsIGFjY2Vzc29yVG9TZXQsIHByb3BOYW1lTGl0ZXJhbFRvU2V0LCBmYWxzZSwgc3RpbGxVc2VVcmwpO1xuICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaCgnfScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc291cmNlcy5wdXNoKCd9Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNjLmpzLmlzQ2hpbGRDbGFzc09mKGtsYXNzLCBjYy5fQmFzZU5vZGUpIHx8IGNjLmpzLmlzQ2hpbGRDbGFzc09mKGtsYXNzLCBjYy5Db21wb25lbnQpKSB7XG4gICAgICAgICAgICBpZiAoQ0NfUFJFVklFVyB8fCAoQ0NfRURJVE9SICYmIHNlbGYuX2lnbm9yZUVkaXRvck9ubHkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1heVVzZWRJblBlcnNpc3RSb290ID0ganMuaXNDaGlsZENsYXNzT2Yoa2xhc3MsIGNjLk5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChtYXlVc2VkSW5QZXJzaXN0Um9vdCkge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzLnB1c2goJ2QuX2lkJiYoby5faWQ9ZC5faWQpOycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaCgnZC5faWQmJihvLl9pZD1kLl9pZCk7Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BzW3Byb3BzLmxlbmd0aCAtIDFdID09PSAnXyRlcmlhbGl6ZWQnKSB7XG4gICAgICAgICAgICAvLyBkZWVwIGNvcHkgb3JpZ2luYWwgc2VyaWFsaXplZCBkYXRhXG4gICAgICAgICAgICBzb3VyY2VzLnB1c2goJ28uXyRlcmlhbGl6ZWQ9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkKSk7Jyk7XG4gICAgICAgICAgICAvLyBwYXJzZSB0aGUgc2VyaWFsaXplZCBkYXRhIGFzIHByaW1pdGl2ZSBqYXZhc2NyaXB0IG9iamVjdCwgc28gaXRzIF9faWRfXyB3aWxsIGJlIGRlcmVmZXJlbmNlZFxuICAgICAgICAgICAgc291cmNlcy5wdXNoKCdzLl9kZXNlcmlhbGl6ZVByaW1pdGl2ZU9iamVjdChvLl8kZXJpYWxpemVkLGQpOycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBGdW5jdGlvbigncycsICdvJywgJ2QnLCAnaycsICd0Jywgc291cmNlcy5qb2luKCcnKSk7XG4gICAgfSA6IGZ1bmN0aW9uIChzZWxmLCBrbGFzcykge1xuICAgICAgICB2YXIgZmFzdE1vZGUgPSBtaXNjLkJVSUxUSU5fQ0xBU1NJRF9SRS50ZXN0KGpzLl9nZXRDbGFzc0lkKGtsYXNzKSk7XG4gICAgICAgIHZhciBzaG91bGRDb3B5SWQgPSBjYy5qcy5pc0NoaWxkQ2xhc3NPZihrbGFzcywgY2MuX0Jhc2VOb2RlKSB8fCBjYy5qcy5pc0NoaWxkQ2xhc3NPZihrbGFzcywgY2MuQ29tcG9uZW50KTtcbiAgICAgICAgdmFyIHNob3VsZENvcHlSYXdEYXRhO1xuXG4gICAgICAgIHZhciBzaW1wbGVQcm9wcyA9IFtdO1xuICAgICAgICB2YXIgc2ltcGxlUHJvcHNUb1JlYWQgPSBzaW1wbGVQcm9wcztcbiAgICAgICAgdmFyIGFkdmFuY2VkUHJvcHMgPSBbXTtcbiAgICAgICAgdmFyIGFkdmFuY2VkUHJvcHNUb1JlYWQgPSBhZHZhbmNlZFByb3BzO1xuICAgICAgICB2YXIgYWR2YW5jZWRQcm9wc1VzZVVybCA9IFtdO1xuICAgICAgICB2YXIgYWR2YW5jZWRQcm9wc1ZhbHVlVHlwZSA9IFtdO1xuXG4gICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSBrbGFzcy5fX3ZhbHVlc19fO1xuICAgICAgICAgICAgc2hvdWxkQ29weVJhd0RhdGEgPSBwcm9wc1twcm9wcy5sZW5ndGggLSAxXSA9PT0gJ18kZXJpYWxpemVkJztcblxuICAgICAgICAgICAgdmFyIGF0dHJzID0gQXR0ci5nZXRDbGFzc0F0dHJzKGtsYXNzKTtcbiAgICAgICAgICAgIHZhciBUWVBFID0gQXR0ci5ERUxJTUVURVIgKyAndHlwZSc7XG4gICAgICAgICAgICB2YXIgREVGQVVMVCA9IEF0dHIuREVMSU1FVEVSICsgJ2RlZmF1bHQnO1xuICAgICAgICAgICAgdmFyIFNBVkVfVVJMX0FTX0FTU0VUID0gQXR0ci5ERUxJTUVURVIgKyAnc2F2ZVVybEFzQXNzZXQnO1xuICAgICAgICAgICAgdmFyIEZPUk1FUkxZX1NFUklBTElaRURfQVMgPSBBdHRyLkRFTElNRVRFUiArICdmb3JtZXJseVNlcmlhbGl6ZWRBcyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgcHJvcHMubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcE5hbWUgPSBwcm9wc1twXTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcE5hbWVUb1JlYWQgPSBwcm9wTmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoYXR0cnNbcHJvcE5hbWUgKyBGT1JNRVJMWV9TRVJJQUxJWkVEX0FTXSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wTmFtZVRvUmVhZCA9IGF0dHJzW3Byb3BOYW1lICsgRk9STUVSTFlfU0VSSUFMSVpFRF9BU107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBzdGlsbFVzZVVybCA9IGF0dHJzW3Byb3BOYW1lICsgU0FWRV9VUkxfQVNfQVNTRVRdO1xuICAgICAgICAgICAgICAgIC8vIGZ1bmN0aW9uIHVuZGVmaW5lZCBvYmplY3QobnVsbCkgc3RyaW5nIGJvb2xlYW4gbnVtYmVyXG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IENDQ2xhc3MuZ2V0RGVmYXVsdChhdHRyc1twcm9wTmFtZSArIERFRkFVTFRdKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNQcmltaXRpdmVUeXBlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGZhc3RNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1c2VyVHlwZSA9IGF0dHJzW3Byb3BOYW1lICsgVFlQRV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCAmJiB1c2VyVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNQcmltaXRpdmVUeXBlID0gdXNlclR5cGUgPT09IGNjLlN0cmluZyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlclR5cGUgPT09IGNjLkludGVnZXIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJUeXBlID09PSBjYy5GbG9hdCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlclR5cGUgPT09IGNjLkJvb2xlYW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFR5cGUgPSB0eXBlb2YgZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNQcmltaXRpdmVUeXBlID0gKGRlZmF1bHRUeXBlID09PSAnc3RyaW5nJyAmJiAhc3RpbGxVc2VVcmwpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VHlwZSA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRUeXBlID09PSAnYm9vbGVhbic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGZhc3RNb2RlICYmIGlzUHJpbWl0aXZlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcE5hbWVUb1JlYWQgIT09IHByb3BOYW1lICYmIHNpbXBsZVByb3BzVG9SZWFkID09PSBzaW1wbGVQcm9wcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2ltcGxlUHJvcHNUb1JlYWQgPSBzaW1wbGVQcm9wcy5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNpbXBsZVByb3BzLnB1c2gocHJvcE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2ltcGxlUHJvcHNUb1JlYWQgIT09IHNpbXBsZVByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaW1wbGVQcm9wc1RvUmVhZC5wdXNoKHByb3BOYW1lVG9SZWFkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BOYW1lVG9SZWFkICE9PSBwcm9wTmFtZSAmJiBhZHZhbmNlZFByb3BzVG9SZWFkID09PSBhZHZhbmNlZFByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZFByb3BzVG9SZWFkID0gYWR2YW5jZWRQcm9wcy5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkUHJvcHMucHVzaChwcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZHZhbmNlZFByb3BzVG9SZWFkICE9PSBhZHZhbmNlZFByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZFByb3BzVG9SZWFkLnB1c2gocHJvcE5hbWVUb1JlYWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkUHJvcHNVc2VVcmwucHVzaChzdGlsbFVzZVVybCk7XG4gICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkUHJvcHNWYWx1ZVR5cGUucHVzaCgoZGVmYXVsdFZhbHVlIGluc3RhbmNlb2YgY2MuVmFsdWVUeXBlKSAmJiBkZWZhdWx0VmFsdWUuY29uc3RydWN0b3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHMsIG8sIGQsIGssIHQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2ltcGxlUHJvcHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvcCA9IGRbc2ltcGxlUHJvcHNUb1JlYWRbaV1dO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb1tzaW1wbGVQcm9wc1tpXV0gPSBwcm9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWR2YW5jZWRQcm9wcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGxldCBwcm9wTmFtZSA9IGFkdmFuY2VkUHJvcHNbaV07XG4gICAgICAgICAgICAgICAgdmFyIHByb3AgPSBkW2FkdmFuY2VkUHJvcHNUb1JlYWRbaV1dO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZmFzdE1vZGUgJiYgdHlwZW9mIHByb3AgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIG9bcHJvcE5hbWVdID0gcHJvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZhc3RNb2RlIChzbyB3aWxsIG5vdCBzaW1wbGVQcm9wKSBvciBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlVHlwZUN0b3IgPSBhZHZhbmNlZFByb3BzVmFsdWVUeXBlW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVUeXBlQ3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZhc3RNb2RlIHx8IHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLl9kZXNlcmlhbGl6ZVR5cGVkT2JqZWN0KG9bcHJvcE5hbWVdLCBwcm9wLCB2YWx1ZVR5cGVDdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9bcHJvcE5hbWVdID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5fZGVzZXJpYWxpemVPYmpGaWVsZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChDQ19FRElUT1IgfHwgQ0NfVEVTVCkgPyAodCAmJiBvKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkdmFuY2VkUHJvcHNVc2VVcmxbaV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9bcHJvcE5hbWVdID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaG91bGRDb3B5SWQgJiYgZC5faWQpIHtcbiAgICAgICAgICAgICAgICBvLl9pZCA9IGQuX2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNob3VsZENvcHlSYXdEYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gZGVlcCBjb3B5IG9yaWdpbmFsIHNlcmlhbGl6ZWQgZGF0YVxuICAgICAgICAgICAgICAgIG8uXyRlcmlhbGl6ZWQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGQpKTtcbiAgICAgICAgICAgICAgICAvLyBwYXJzZSB0aGUgc2VyaWFsaXplZCBkYXRhIGFzIHByaW1pdGl2ZSBqYXZhc2NyaXB0IG9iamVjdCwgc28gaXRzIF9faWRfXyB3aWxsIGJlIGRlcmVmZXJlbmNlZFxuICAgICAgICAgICAgICAgIHMuX2Rlc2VyaWFsaXplUHJpbWl0aXZlT2JqZWN0KG8uXyRlcmlhbGl6ZWQsIGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHVubGlua1VudXNlZFByZWZhYiAoc2VsZiwgc2VyaWFsaXplZCwgb2JqKSB7XG4gICAgICAgIHZhciB1dWlkID0gc2VyaWFsaXplZFsnYXNzZXQnXSAmJiBzZXJpYWxpemVkWydhc3NldCddLl9fdXVpZF9fO1xuICAgICAgICBpZiAodXVpZCkge1xuICAgICAgICAgICAgdmFyIGxhc3QgPSBzZWxmLnJlc3VsdC51dWlkTGlzdC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgaWYgKHNlbGYucmVzdWx0LnV1aWRMaXN0W2xhc3RdID09PSB1dWlkICYmXG4gICAgICAgICAgICAgICAgc2VsZi5yZXN1bHQudXVpZE9iakxpc3RbbGFzdF0gPT09IG9iaiAmJlxuICAgICAgICAgICAgICAgIHNlbGYucmVzdWx0LnV1aWRQcm9wTGlzdFtsYXN0XSA9PT0gJ2Fzc2V0Jykge1xuICAgICAgICAgICAgICAgIHNlbGYucmVzdWx0LnV1aWRMaXN0LnBvcCgpO1xuICAgICAgICAgICAgICAgIHNlbGYucmVzdWx0LnV1aWRPYmpMaXN0LnBvcCgpO1xuICAgICAgICAgICAgICAgIHNlbGYucmVzdWx0LnV1aWRQcm9wTGlzdC5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBkZWJ1Z0Vudk9ubHlJbmZvID0gJ0ZhaWxlZCB0byBza2lwIHByZWZhYiBhc3NldCB3aGlsZSBkZXNlcmlhbGl6aW5nIFByZWZhYkluZm8nO1xuICAgICAgICAgICAgICAgIGNjLndhcm4oZGVidWdFbnZPbmx5SW5mbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfZGVzZXJpYWxpemVGaXJlQ2xhc3MgKHNlbGYsIG9iaiwgc2VyaWFsaXplZCwga2xhc3MsIHRhcmdldCkge1xuICAgICAgICB2YXIgZGVzZXJpYWxpemU7XG4gICAgICAgIGlmIChrbGFzcy5oYXNPd25Qcm9wZXJ0eSgnX19kZXNlcmlhbGl6ZV9fJykpIHtcbiAgICAgICAgICAgIGRlc2VyaWFsaXplID0ga2xhc3MuX19kZXNlcmlhbGl6ZV9fO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVzZXJpYWxpemUgPSBjb21waWxlRGVzZXJpYWxpemUoc2VsZiwga2xhc3MpO1xuICAgICAgICAgICAgLy8gaWYgKENDX1RFU1QgJiYgIWlzUGhhbnRvbUpTKSB7XG4gICAgICAgICAgICAvLyAgICAgY2MubG9nKGRlc2VyaWFsaXplKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIGpzLnZhbHVlKGtsYXNzLCAnX19kZXNlcmlhbGl6ZV9fJywgZGVzZXJpYWxpemUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGRlc2VyaWFsaXplKHNlbGYsIG9iaiwgc2VyaWFsaXplZCwga2xhc3MsIHRhcmdldCk7XG4gICAgICAgIC8vIGlmIHByZXZpZXcgb3IgYnVpbGQgd29ya2VyXG4gICAgICAgIGlmIChDQ19QUkVWSUVXIHx8IChDQ19FRElUT1IgJiYgc2VsZi5faWdub3JlRWRpdG9yT25seSkpIHtcbiAgICAgICAgICAgIGlmIChrbGFzcyA9PT0gY2MuX1ByZWZhYkluZm8gJiYgIW9iai5zeW5jKSB7XG4gICAgICAgICAgICAgICAgdW5saW5rVW51c2VkUHJlZmFiKHNlbGYsIHNlcmlhbGl6ZWQsIG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfRGVzZXJpYWxpemVyLnBvb2wgPSBuZXcganMuUG9vbChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIG9iai5yZXN1bHQgPSBudWxsO1xuICAgICAgICBvYmouY3VzdG9tRW52ID0gbnVsbDtcbiAgICAgICAgb2JqLmRlc2VyaWFsaXplZExpc3QubGVuZ3RoID0gMDtcbiAgICAgICAgb2JqLmRlc2VyaWFsaXplZERhdGEgPSBudWxsO1xuICAgICAgICBvYmouX2NsYXNzRmluZGVyID0gbnVsbDtcbiAgICAgICAgaWYgKENDX0RFVikge1xuICAgICAgICAgICAgb2JqLl90YXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIG9iai5faWRMaXN0Lmxlbmd0aCA9IDA7XG4gICAgICAgIG9iai5faWRPYmpMaXN0Lmxlbmd0aCA9IDA7XG4gICAgICAgIG9iai5faWRQcm9wTGlzdC5sZW5ndGggPSAwO1xuICAgIH0sIDEpO1xuXG4gICAgX0Rlc2VyaWFsaXplci5wb29sLmdldCA9IGZ1bmN0aW9uIChyZXN1bHQsIHRhcmdldCwgY2xhc3NGaW5kZXIsIGN1c3RvbUVudiwgaWdub3JlRWRpdG9yT25seSkge1xuICAgICAgICB2YXIgY2FjaGUgPSB0aGlzLl9nZXQoKTtcbiAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgICBjYWNoZS5yZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgICAgICBjYWNoZS5jdXN0b21FbnYgPSBjdXN0b21FbnY7XG4gICAgICAgICAgICBjYWNoZS5fY2xhc3NGaW5kZXIgPSBjbGFzc0ZpbmRlcjtcbiAgICAgICAgICAgIGlmIChDQ19ERVYpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICAgICAgICAgIGNhY2hlLl9pZ25vcmVFZGl0b3JPbmx5ID0gaWdub3JlRWRpdG9yT25seTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgX0Rlc2VyaWFsaXplcihyZXN1bHQsIHRhcmdldCwgY2xhc3NGaW5kZXIsIGN1c3RvbUVudiwgaWdub3JlRWRpdG9yT25seSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF9EZXNlcmlhbGl6ZXI7XG59KSgpO1xuXG4vKipcbiAqIEBtb2R1bGUgY2NcbiAqL1xuXG4vKipcbiAqICEjZW4gRGVzZXJpYWxpemUganNvbiB0byBjYy5Bc3NldFxuICogISN6aCDlsIYgSlNPTiDlj43luo/liJfljJbkuLrlr7nosaHlrp7kvovjgIJcbiAqXG4gKiDlvZPmjIflrprkuoYgdGFyZ2V0IOmAiemhueaXtu+8jOWmguaenCB0YXJnZXQg5byV55So55qE5YW25a6DIGFzc2V0IOeahCB1dWlkIOS4jeWPmO+8jOWImeS4jeS8muaUueWPmCB0YXJnZXQg5a+5IGFzc2V0IOeahOW8leeUqO+8jFxuICog5Lmf5LiN5Lya5bCGIHV1aWQg5L+d5a2Y5YiwIHJlc3VsdCDlr7nosaHkuK3jgIJcbiAqXG4gKiBAbWV0aG9kIGRlc2VyaWFsaXplXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGRhdGEgLSB0aGUgc2VyaWFsaXplZCBjYy5Bc3NldCBqc29uIHN0cmluZyBvciBqc29uIG9iamVjdC5cbiAqIEBwYXJhbSB7RGV0YWlsc30gW2RldGFpbHNdIC0gYWRkaXRpb25hbCBsb2FkaW5nIHJlc3VsdFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7b2JqZWN0fSB0aGUgbWFpbiBkYXRhKGFzc2V0KVxuICovXG5jYy5kZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChkYXRhLCBkZXRhaWxzLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIGNsYXNzRmluZGVyID0gb3B0aW9ucy5jbGFzc0ZpbmRlciB8fCBqcy5fZ2V0Q2xhc3NCeUlkO1xuICAgIC8vIOWQr+eUqCBjcmVhdGVBc3NldFJlZnMg5ZCO77yM5aaC5p6c5pyJIHVybCDlsZ7mgKfliJnkvJrooqvnu5/kuIDlvLrliLborr7nva7kuLogeyB1dWlkOiAneHh4JyB977yM5b+F6aG75ZCO6Z2i5YaN54m55q6K5aSE55CGXG4gICAgdmFyIGNyZWF0ZUFzc2V0UmVmcyA9IG9wdGlvbnMuY3JlYXRlQXNzZXRSZWZzIHx8IGNjLnN5cy5wbGF0Zm9ybSA9PT0gY2Muc3lzLkVESVRPUl9DT1JFO1xuICAgIHZhciB0YXJnZXQgPSAoQ0NfRURJVE9SIHx8IENDX1RFU1QpICYmIG9wdGlvbnMudGFyZ2V0O1xuICAgIHZhciBjdXN0b21FbnYgPSBvcHRpb25zLmN1c3RvbUVudjtcbiAgICB2YXIgaWdub3JlRWRpdG9yT25seSA9IG9wdGlvbnMuaWdub3JlRWRpdG9yT25seTtcblxuICAgIGlmIChDQ19FRElUT1IgJiYgQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICAgIGRhdGEgPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICB9XG5cbiAgICAvL3ZhciBvbGRKc29uID0gSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMik7XG5cbiAgICB2YXIgdGVtcERldGFpbHMgPSAhZGV0YWlscztcbiAgICBkZXRhaWxzID0gZGV0YWlscyB8fCBEZXRhaWxzLnBvb2wuZ2V0KCk7XG4gICAgdmFyIGRlc2VyaWFsaXplciA9IF9EZXNlcmlhbGl6ZXIucG9vbC5nZXQoZGV0YWlscywgdGFyZ2V0LCBjbGFzc0ZpbmRlciwgY3VzdG9tRW52LCBpZ25vcmVFZGl0b3JPbmx5KTtcblxuICAgIGNjLmdhbWUuX2lzQ2xvbmluZyA9IHRydWU7XG4gICAgdmFyIHJlcyA9IGRlc2VyaWFsaXplci5kZXNlcmlhbGl6ZShkYXRhKTtcbiAgICBjYy5nYW1lLl9pc0Nsb25pbmcgPSBmYWxzZTtcblxuICAgIF9EZXNlcmlhbGl6ZXIucG9vbC5wdXQoZGVzZXJpYWxpemVyKTtcbiAgICBpZiAoY3JlYXRlQXNzZXRSZWZzKSB7XG4gICAgICAgIGRldGFpbHMuYXNzaWduQXNzZXRzQnkoRWRpdG9yLnNlcmlhbGl6ZS5hc0Fzc2V0KTtcbiAgICB9XG4gICAgaWYgKHRlbXBEZXRhaWxzKSB7XG4gICAgICAgIERldGFpbHMucG9vbC5wdXQoZGV0YWlscyk7XG4gICAgfVxuXG4gICAgLy92YXIgYWZ0ZXJKc29uID0gSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMik7XG4gICAgLy9pZiAob2xkSnNvbiAhPT0gYWZ0ZXJKc29uKSB7XG4gICAgLy8gICAgdGhyb3cgbmV3IEVycm9yKCdKU09OIFNIT1VMRCBub3QgY2hhbmdlZCcpO1xuICAgIC8vfVxuXG4gICAgcmV0dXJuIHJlcztcbn07XG5cbmNjLmRlc2VyaWFsaXplLkRldGFpbHMgPSBEZXRhaWxzO1xuY2MuZGVzZXJpYWxpemUucmVwb3J0TWlzc2luZ0NsYXNzID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgaWYgKENDX0VESVRPUiAmJiBFZGl0b3IuVXRpbHMuVXVpZFV0aWxzLmlzVXVpZChpZCkpIHtcbiAgICAgICAgaWQgPSBFZGl0b3IuVXRpbHMuVXVpZFV0aWxzLmRlY29tcHJlc3NVdWlkKGlkKTtcbiAgICAgICAgY2Mud2FybklEKDUzMDEsIGlkKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNjLndhcm5JRCg1MzAyLCBpZCk7XG4gICAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIganMgPSByZXF1aXJlKCcuL2pzJyk7XG52YXIgQXR0ciA9IHJlcXVpcmUoJy4vYXR0cmlidXRlJyk7XG52YXIgQ0NDbGFzcyA9IHJlcXVpcmUoJy4vQ0NDbGFzcycpO1xudmFyIG1pc2MgPSByZXF1aXJlKCcuLi91dGlscy9taXNjJyk7XG5cbi8vIEhFTFBFUlNcblxuLyoqXG4gKiAhI2VuIENvbnRhaW5zIGluZm9ybWF0aW9uIGNvbGxlY3RlZCBkdXJpbmcgZGVzZXJpYWxpemF0aW9uXG4gKiAhI3poIOWMheWQq+WPjeW6j+WIl+WMluaXtueahOS4gOS6m+S/oeaBr1xuICogQGNsYXNzIERldGFpbHNcbiAqXG4gKi9cbnZhciBEZXRhaWxzID0gZnVuY3Rpb24gRGV0YWlscygpIHtcbiAgICAvKipcbiAgICAgKiBsaXN0IG9mIHRoZSBkZXBlbmRzIGFzc2V0cycgdXVpZFxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nW119IHV1aWRMaXN0XG4gICAgICovXG4gICAgdGhpcy51dWlkTGlzdCA9IFtdO1xuICAgIC8qKlxuICAgICAqIHRoZSBvYmogbGlzdCB3aG9zZSBmaWVsZCBuZWVkcyB0byBsb2FkIGFzc2V0IGJ5IHV1aWRcbiAgICAgKiBAcHJvcGVydHkge09iamVjdFtdfSB1dWlkT2JqTGlzdFxuICAgICAqL1xuICAgIHRoaXMudXVpZE9iakxpc3QgPSBbXTtcbiAgICAvKipcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBmaWVsZCBuYW1lIHdoaWNoIHJlZmVyZW5jZWQgdG8gdGhlIGFzc2V0XG4gICAgICogQHByb3BlcnR5IHtTdHJpbmdbXX0gdXVpZFByb3BMaXN0XG4gICAgICovXG4gICAgdGhpcy51dWlkUHJvcExpc3QgPSBbXTtcblxuICAgIC8vIFRPRE8gLSBERUxNRSBzaW5jZSAyLjBcbiAgICB0aGlzLl9zdGlsbFVzZVVybCA9IGpzLmNyZWF0ZU1hcCh0cnVlKTtcbn07XG4vKipcbiAqIEBtZXRob2QgcmVzZXRcbiAqL1xuRGV0YWlscy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy51dWlkTGlzdC5sZW5ndGggPSAwO1xuICAgIHRoaXMudXVpZE9iakxpc3QubGVuZ3RoID0gMDtcbiAgICB0aGlzLnV1aWRQcm9wTGlzdC5sZW5ndGggPSAwO1xuICAgIGpzLmNsZWFyKHRoaXMuX3N0aWxsVXNlVXJsKTtcbn07XG5pZiAoQ0NfRURJVE9SIHx8IENDX1RFU1QpIHtcbiAgICBEZXRhaWxzLnByb3RvdHlwZS5hc3NpZ25Bc3NldHNCeSA9IGZ1bmN0aW9uIChnZXR0ZXIpIHtcbiAgICAgICAgLy8gaWdub3JlIHRoaXMuX3N0aWxsVXNlVXJsXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLnV1aWRMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdXVpZCA9IHRoaXMudXVpZExpc3RbaV07XG4gICAgICAgICAgICB2YXIgb2JqID0gdGhpcy51dWlkT2JqTGlzdFtpXTtcbiAgICAgICAgICAgIHZhciBwcm9wID0gdGhpcy51dWlkUHJvcExpc3RbaV07XG4gICAgICAgICAgICBvYmpbcHJvcF0gPSBnZXR0ZXIodXVpZCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuLy8gLyoqXG4vLyAgKiBAbWV0aG9kIGdldFV1aWRPZlxuLy8gICogQHBhcmFtIHtPYmplY3R9IG9ialxuLy8gICogQHBhcmFtIHtTdHJpbmd9IHByb3BOYW1lXG4vLyAgKiBAcmV0dXJuIHtTdHJpbmd9XG4vLyAgKi9cbi8vIERldGFpbHMucHJvdG90eXBlLmdldFV1aWRPZiA9IGZ1bmN0aW9uIChvYmosIHByb3BOYW1lKSB7XG4vLyAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnV1aWRPYmpMaXN0Lmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgICAgIGlmICh0aGlzLnV1aWRPYmpMaXN0W2ldID09PSBvYmogJiYgdGhpcy51dWlkUHJvcExpc3RbaV0gPT09IHByb3BOYW1lKSB7XG4vLyAgICAgICAgICAgICByZXR1cm4gdGhpcy51dWlkTGlzdFtpXTtcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vICAgICByZXR1cm4gXCJcIjtcbi8vIH07XG4vKipcbiAqIEBtZXRob2QgcHVzaFxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BOYW1lXG4gKiBAcGFyYW0ge1N0cmluZ30gdXVpZFxuICovXG5EZXRhaWxzLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKG9iaiwgcHJvcE5hbWUsIHV1aWQsIF9zdGlsbFVzZVVybCkge1xuICAgIGlmIChfc3RpbGxVc2VVcmwpIHtcbiAgICAgICAgdGhpcy5fc3RpbGxVc2VVcmxbdGhpcy51dWlkTGlzdC5sZW5ndGhdID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy51dWlkTGlzdC5wdXNoKHV1aWQpO1xuICAgIHRoaXMudXVpZE9iakxpc3QucHVzaChvYmopO1xuICAgIHRoaXMudXVpZFByb3BMaXN0LnB1c2gocHJvcE5hbWUpO1xufTtcblxuRGV0YWlscy5wb29sID0gbmV3IGpzLlBvb2woZnVuY3Rpb24gKG9iaikge1xuICAgIG9iai5yZXNldCgpO1xufSwgMTApO1xuXG5EZXRhaWxzLnBvb2wuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9nZXQoKSB8fCBuZXcgRGV0YWlscygpO1xufTtcblxuLy8gSU1QTEVNRU5UIE9GIERFU0VSSUFMSVpBVElPTlxuXG52YXIgX0Rlc2VyaWFsaXplciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBfRGVzZXJpYWxpemVyKHJlc3VsdCwgdGFyZ2V0LCBjbGFzc0ZpbmRlciwgY3VzdG9tRW52LCBpZ25vcmVFZGl0b3JPbmx5KSB7XG4gICAgICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICB0aGlzLmN1c3RvbUVudiA9IGN1c3RvbUVudjtcbiAgICAgICAgdGhpcy5kZXNlcmlhbGl6ZWRMaXN0ID0gW107XG4gICAgICAgIHRoaXMuZGVzZXJpYWxpemVkRGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NsYXNzRmluZGVyID0gY2xhc3NGaW5kZXI7XG4gICAgICAgIGlmIChDQ19ERVYpIHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgICAgIHRoaXMuX2lnbm9yZUVkaXRvck9ubHkgPSBpZ25vcmVFZGl0b3JPbmx5O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lkTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLl9pZE9iakxpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5faWRQcm9wTGlzdCA9IFtdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9kZXJlZmVyZW5jZShzZWxmKSB7XG4gICAgICAgIC8vIOi/memHjOS4jemHh+eUqOmBjeWOhuWPjeW6j+WIl+WMlue7k+aenOeahOaWueW8j++8jOWboOS4uuWPjeW6j+WIl+WMlueahOe7k+aenOWmguaenOW8leeUqOWIsOWkjeadgueahOWklumDqOW6k++8jOW+iOWuueaYk+WghuagiOa6ouWHuuOAglxuICAgICAgICB2YXIgZGVzZXJpYWxpemVkTGlzdCA9IHNlbGYuZGVzZXJpYWxpemVkTGlzdDtcbiAgICAgICAgdmFyIGlkUHJvcExpc3QgPSBzZWxmLl9pZFByb3BMaXN0O1xuICAgICAgICB2YXIgaWRMaXN0ID0gc2VsZi5faWRMaXN0O1xuICAgICAgICB2YXIgaWRPYmpMaXN0ID0gc2VsZi5faWRPYmpMaXN0O1xuICAgICAgICB2YXIgb25EZXJlZmVyZW5jZWQgPSBzZWxmLl9jbGFzc0ZpbmRlciAmJiBzZWxmLl9jbGFzc0ZpbmRlci5vbkRlcmVmZXJlbmNlZDtcbiAgICAgICAgdmFyIGksIHByb3BOYW1lLCBpZDtcbiAgICAgICAgaWYgKENDX0VESVRPUiAmJiBvbkRlcmVmZXJlbmNlZCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGlkTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHByb3BOYW1lID0gaWRQcm9wTGlzdFtpXTtcbiAgICAgICAgICAgICAgICBpZCA9IGlkTGlzdFtpXTtcbiAgICAgICAgICAgICAgICBpZE9iakxpc3RbaV1bcHJvcE5hbWVdID0gZGVzZXJpYWxpemVkTGlzdFtpZF07XG4gICAgICAgICAgICAgICAgb25EZXJlZmVyZW5jZWQoZGVzZXJpYWxpemVkTGlzdCwgaWQsIGlkT2JqTGlzdFtpXSwgcHJvcE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGlkTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHByb3BOYW1lID0gaWRQcm9wTGlzdFtpXTtcbiAgICAgICAgICAgICAgICBpZCA9IGlkTGlzdFtpXTtcbiAgICAgICAgICAgICAgICBpZE9iakxpc3RbaV1bcHJvcE5hbWVdID0gZGVzZXJpYWxpemVkTGlzdFtpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJvdG90eXBlID0gX0Rlc2VyaWFsaXplci5wcm90b3R5cGU7XG5cbiAgICBwcm90b3R5cGUuZGVzZXJpYWxpemUgPSBmdW5jdGlvbiAoanNvbk9iaikge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uT2JqKSkge1xuICAgICAgICAgICAgdmFyIGpzb25BcnJheSA9IGpzb25PYmo7XG4gICAgICAgICAgICB2YXIgcmVmQ291bnQgPSBqc29uQXJyYXkubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5kZXNlcmlhbGl6ZWRMaXN0Lmxlbmd0aCA9IHJlZkNvdW50O1xuICAgICAgICAgICAgLy8gZGVzZXJpYWxpemVcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVmQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChqc29uQXJyYXlbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKENDX0VESVRPUiB8fCBDQ19URVNUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWFpblRhcmdldCA9IGkgPT09IDAgJiYgdGhpcy5fdGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXNlcmlhbGl6ZWRMaXN0W2ldID0gdGhpcy5fZGVzZXJpYWxpemVPYmplY3QoanNvbkFycmF5W2ldLCBmYWxzZSwgbWFpblRhcmdldCwgdGhpcy5kZXNlcmlhbGl6ZWRMaXN0LCAnJyArIGkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXNlcmlhbGl6ZWRMaXN0W2ldID0gdGhpcy5fZGVzZXJpYWxpemVPYmplY3QoanNvbkFycmF5W2ldLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlc2VyaWFsaXplZERhdGEgPSByZWZDb3VudCA+IDAgPyB0aGlzLmRlc2VyaWFsaXplZExpc3RbMF0gOiBbXTtcblxuICAgICAgICAgICAgLy8vLyBjYWxsYmFja1xuICAgICAgICAgICAgLy9mb3IgKHZhciBqID0gMDsgaiA8IHJlZkNvdW50OyBqKyspIHtcbiAgICAgICAgICAgIC8vICAgIGlmIChyZWZlcmVuY2VkTGlzdFtqXS5vbkFmdGVyRGVzZXJpYWxpemUpIHtcbiAgICAgICAgICAgIC8vICAgICAgICByZWZlcmVuY2VkTGlzdFtqXS5vbkFmdGVyRGVzZXJpYWxpemUoKTtcbiAgICAgICAgICAgIC8vICAgIH1cbiAgICAgICAgICAgIC8vfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXNlcmlhbGl6ZWRMaXN0Lmxlbmd0aCA9IDE7XG4gICAgICAgICAgICBpZiAoQ0NfRURJVE9SIHx8IENDX1RFU1QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlc2VyaWFsaXplZERhdGEgPSBqc29uT2JqID8gdGhpcy5fZGVzZXJpYWxpemVPYmplY3QoanNvbk9iaiwgZmFsc2UsIHRoaXMuX3RhcmdldCwgdGhpcy5kZXNlcmlhbGl6ZWRMaXN0LCAnMCcpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXNlcmlhbGl6ZWREYXRhID0ganNvbk9iaiA/IHRoaXMuX2Rlc2VyaWFsaXplT2JqZWN0KGpzb25PYmosIGZhbHNlKSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlc2VyaWFsaXplZExpc3RbMF0gPSB0aGlzLmRlc2VyaWFsaXplZERhdGE7XG5cbiAgICAgICAgICAgIC8vLy8gY2FsbGJhY2tcbiAgICAgICAgICAgIC8vaWYgKGRlc2VyaWFsaXplZERhdGEub25BZnRlckRlc2VyaWFsaXplKSB7XG4gICAgICAgICAgICAvLyAgICBkZXNlcmlhbGl6ZWREYXRhLm9uQWZ0ZXJEZXNlcmlhbGl6ZSgpO1xuICAgICAgICAgICAgLy99XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXJlZmVyZW5jZVxuICAgICAgICBfZGVyZWZlcmVuY2UodGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZGVzZXJpYWxpemVkRGF0YTtcbiAgICB9O1xuXG4gICAgLy8vKipcbiAgICAvLyAqIEBwYXJhbSB7T2JqZWN0fSBzZXJpYWxpemVkIC0gVGhlIG9iaiB0byBkZXNlcmlhbGl6ZSwgbXVzdCBiZSBub24tbmlsXG4gICAgLy8gKiBAcGFyYW0ge0Jvb2xlYW59IF9zdGlsbFVzZVVybFxuICAgIC8vICogQHBhcmFtIHtPYmplY3R9IFt0YXJnZXQ9bnVsbF0gLSBlZGl0b3Igb25seVxuICAgIC8vICogQHBhcmFtIHtPYmplY3R9IFtvd25lcl0gLSBkZWJ1ZyBvbmx5XG4gICAgLy8gKiBAcGFyYW0ge1N0cmluZ30gW3Byb3BOYW1lXSAtIGRlYnVnIG9ubHlcbiAgICAvLyAqL1xuICAgIHByb3RvdHlwZS5fZGVzZXJpYWxpemVPYmplY3QgPSBmdW5jdGlvbiAoc2VyaWFsaXplZCwgX3N0aWxsVXNlVXJsLCB0YXJnZXQsIG93bmVyLCBwcm9wTmFtZSkge1xuICAgICAgICB2YXIgcHJvcDtcbiAgICAgICAgdmFyIG9iaiA9IG51bGw7IC8vIHRoZSBvYmogdG8gcmV0dXJuXG4gICAgICAgIHZhciBrbGFzcyA9IG51bGw7XG4gICAgICAgIHZhciB0eXBlID0gc2VyaWFsaXplZC5fX3R5cGVfXztcbiAgICAgICAgaWYgKHR5cGUpIHtcblxuICAgICAgICAgICAgLy8gVHlwZSBPYmplY3QgKGluY2x1ZGluZyBDQ0NsYXNzKVxuXG4gICAgICAgICAgICBrbGFzcyA9IHRoaXMuX2NsYXNzRmluZGVyKHR5cGUsIHNlcmlhbGl6ZWQsIG93bmVyLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICBpZiAoIWtsYXNzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vdFJlcG9ydGVkID0gdGhpcy5fY2xhc3NGaW5kZXIgPT09IGpzLl9nZXRDbGFzc0J5SWQ7XG4gICAgICAgICAgICAgICAgaWYgKG5vdFJlcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmRlc2VyaWFsaXplLnJlcG9ydE1pc3NpbmdDbGFzcyh0eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgoQ0NfRURJVE9SIHx8IENDX1RFU1QpICYmIHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIHVzZSB0YXJnZXRcbiAgICAgICAgICAgICAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBrbGFzcykpIHtcbiAgICAgICAgICAgICAgICAgICAgY2Mud2FybklEKDUzMDAsIGpzLmdldENsYXNzTmFtZSh0YXJnZXQpLCBrbGFzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9iaiA9IHRhcmdldDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaW5zdGFudGlhdGUgYSBuZXcgb2JqZWN0XG4gICAgICAgICAgICAgICAgb2JqID0gbmV3IGtsYXNzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvYmouX2Rlc2VyaWFsaXplKSB7XG4gICAgICAgICAgICAgICAgb2JqLl9kZXNlcmlhbGl6ZShzZXJpYWxpemVkLmNvbnRlbnQsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2MuQ2xhc3MuX2lzQ0NDbGFzcyhrbGFzcykpIHtcbiAgICAgICAgICAgICAgICBfZGVzZXJpYWxpemVGaXJlQ2xhc3ModGhpcywgb2JqLCBzZXJpYWxpemVkLCBrbGFzcywgdGFyZ2V0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzZXJpYWxpemVUeXBlZE9iamVjdChvYmosIHNlcmlhbGl6ZWQsIGtsYXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShzZXJpYWxpemVkKSkge1xuXG4gICAgICAgICAgICAvLyBlbWJlZGRlZCBwcmltaXRpdmUgamF2YXNjcmlwdCBvYmplY3RcblxuICAgICAgICAgICAgb2JqID0gKENDX0VESVRPUiB8fCBDQ19URVNUKSAmJiB0YXJnZXQgfHwge307XG4gICAgICAgICAgICB0aGlzLl9kZXNlcmlhbGl6ZVByaW1pdGl2ZU9iamVjdChvYmosIHNlcmlhbGl6ZWQpO1xuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBBcnJheVxuXG4gICAgICAgICAgICBpZiAoKENDX0VESVRPUiB8fCBDQ19URVNUKSAmJiB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQubGVuZ3RoID0gc2VyaWFsaXplZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgb2JqID0gdGFyZ2V0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmogPSBuZXcgQXJyYXkoc2VyaWFsaXplZC5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlcmlhbGl6ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwcm9wID0gc2VyaWFsaXplZFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBwcm9wID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwcm9wKSkgPT09ICdvYmplY3QnICYmIHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKENDX0VESVRPUiB8fCBDQ19URVNUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZXNlcmlhbGl6ZU9iakZpZWxkKG9iaiwgcHJvcCwgJycgKyBpLCB0YXJnZXQgJiYgb2JqLCBfc3RpbGxVc2VVcmwpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVzZXJpYWxpemVPYmpGaWVsZChvYmosIHByb3AsICcnICsgaSwgbnVsbCwgX3N0aWxsVXNlVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9ialtpXSA9IHByb3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcblxuICAgIC8vIOWSjCBfZGVzZXJpYWxpemVPYmplY3Qg5LiN5ZCM55qE5Zyw5pa55Zyo5LqO5Lya5Yik5patIGlkIOWSjCB1dWlkXG4gICAgcHJvdG90eXBlLl9kZXNlcmlhbGl6ZU9iakZpZWxkID0gZnVuY3Rpb24gKG9iaiwganNvbk9iaiwgcHJvcE5hbWUsIHRhcmdldCwgX3N0aWxsVXNlVXJsKSB7XG4gICAgICAgIHZhciBpZCA9IGpzb25PYmouX19pZF9fO1xuICAgICAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHV1aWQgPSBqc29uT2JqLl9fdXVpZF9fO1xuICAgICAgICAgICAgaWYgKHV1aWQpIHtcbiAgICAgICAgICAgICAgICAvL2lmIChFTkFCTEVfVEFSR0VUKSB7XG4gICAgICAgICAgICAgICAgLy/ov5nph4zkuI3lgZrku7vkvZXmk43kvZzvvIzlm6DkuLrmnInlj6/og73osIPnlKjogIXpnIDopoHnn6XpgZPkvp3otZblk6rkupsgYXNzZXTjgIJcbiAgICAgICAgICAgICAgICAvL+iwg+eUqOiAheS9v+eUqCB1dWlkTGlzdCDml7bvvIzlj6/ku6XliKTmlq0gb2JqW3Byb3BOYW1lXSDmmK/lkKbkuLrnqbrvvIzkuLrnqbrliJnooajnpLrlvoXov5vkuIDmraXliqDovb3vvIxcbiAgICAgICAgICAgICAgICAvL+S4jeS4uuepuuWImeWPquaYr+ihqOaYjuS+nei1luWFs+ezu+OAglxuICAgICAgICAgICAgICAgIC8vICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0W3Byb3BOYW1lXSAmJiB0YXJnZXRbcHJvcE5hbWVdLl91dWlkID09PSB1dWlkKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgIGNvbnNvbGUuYXNzZXJ0KG9ialtwcm9wTmFtZV0gPT09IHRhcmdldFtwcm9wTmFtZV0pO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgLy8gICAgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdC5wdXNoKG9iaiwgcHJvcE5hbWUsIHV1aWQsIF9zdGlsbFVzZVVybCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChDQ19FRElUT1IgfHwgQ0NfVEVTVCkge1xuICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcE5hbWVdID0gdGhpcy5fZGVzZXJpYWxpemVPYmplY3QoanNvbk9iaiwgX3N0aWxsVXNlVXJsLCB0YXJnZXQgJiYgdGFyZ2V0W3Byb3BOYW1lXSwgb2JqLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqW3Byb3BOYW1lXSA9IHRoaXMuX2Rlc2VyaWFsaXplT2JqZWN0KGpzb25PYmosIF9zdGlsbFVzZVVybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRPYmogPSB0aGlzLmRlc2VyaWFsaXplZExpc3RbaWRdO1xuICAgICAgICAgICAgaWYgKGRPYmopIHtcbiAgICAgICAgICAgICAgICBvYmpbcHJvcE5hbWVdID0gZE9iajtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faWRMaXN0LnB1c2goaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lkT2JqTGlzdC5wdXNoKG9iaik7XG4gICAgICAgICAgICAgICAgdGhpcy5faWRQcm9wTGlzdC5wdXNoKHByb3BOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcm90b3R5cGUuX2Rlc2VyaWFsaXplUHJpbWl0aXZlT2JqZWN0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBzZXJpYWxpemVkKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gc2VyaWFsaXplZCkge1xuICAgICAgICAgICAgaWYgKHNlcmlhbGl6ZWQuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3AgPSBzZXJpYWxpemVkW3Byb3BOYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBwcm9wID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwcm9wKSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wTmFtZSAhPT0gJ19fdHlwZV9fJyAvKiAmJiBrICE9ICdfX2lkX18nKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZVtwcm9wTmFtZV0gPSBwcm9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ0NfRURJVE9SIHx8IENDX1RFU1QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9kZXNlcmlhbGl6ZU9iakZpZWxkKGluc3RhbmNlLCBwcm9wLCBwcm9wTmFtZSwgc2VsZi5fdGFyZ2V0ICYmIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fZGVzZXJpYWxpemVPYmpGaWVsZChpbnN0YW5jZSwgcHJvcCwgcHJvcE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VbcHJvcE5hbWVdID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBmdW5jdGlvbiBfY29tcGlsZVR5cGVkT2JqZWN0IChhY2Nlc3Nvciwga2xhc3MsIGN0b3JDb2RlKSB7XG4gICAgLy8gICAgIGlmIChrbGFzcyA9PT0gY2MuVmVjMikge1xuICAgIC8vICAgICAgICAgcmV0dXJuIGB7YCArXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBgbyR7YWNjZXNzb3J9Lng9cHJvcC54fHwwO2AgK1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgYG8ke2FjY2Vzc29yfS55PXByb3AueXx8MDtgICtcbiAgICAvLyAgICAgICAgICAgICAgICBgfWA7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgZWxzZSBpZiAoa2xhc3MgPT09IGNjLkNvbG9yKSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gYHtgICtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgYG8ke2FjY2Vzc29yfS5yPXByb3Aucnx8MDtgICtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgYG8ke2FjY2Vzc29yfS5nPXByb3AuZ3x8MDtgICtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgYG8ke2FjY2Vzc29yfS5iPXByb3AuYnx8MDtgICtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgYG8ke2FjY2Vzc29yfS5hPShwcm9wLmE9PT11bmRlZmluZWQ/MjU1OnByb3AuYSk7YCArXG4gICAgLy8gICAgICAgICAgICAgICAgYH1gO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGVsc2UgaWYgKGtsYXNzID09PSBjYy5TaXplKSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gYHtgICtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgYG8ke2FjY2Vzc29yfS53aWR0aD1wcm9wLndpZHRofHwwO2AgK1xuICAgIC8vICAgICAgICAgICAgICAgICAgICBgbyR7YWNjZXNzb3J9LmhlaWdodD1wcm9wLmhlaWdodHx8MDtgICtcbiAgICAvLyAgICAgICAgICAgICAgICBgfWA7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgZWxzZSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gYHMuX2Rlc2VyaWFsaXplVHlwZWRPYmplY3QobyR7YWNjZXNzb3J9LHByb3AsJHtjdG9yQ29kZX0pO2A7XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG5cbiAgICAvLyBkZXNlcmlhbGl6ZSBWYWx1ZVR5cGVcbiAgICBwcm90b3R5cGUuX2Rlc2VyaWFsaXplVHlwZWRPYmplY3QgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIHNlcmlhbGl6ZWQsIGtsYXNzKSB7XG4gICAgICAgIGlmIChrbGFzcyA9PT0gY2MuVmVjMikge1xuICAgICAgICAgICAgaW5zdGFuY2UueCA9IHNlcmlhbGl6ZWQueCB8fCAwO1xuICAgICAgICAgICAgaW5zdGFuY2UueSA9IHNlcmlhbGl6ZWQueSB8fCAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKGtsYXNzID09PSBjYy5WZWMzKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS54ID0gc2VyaWFsaXplZC54IHx8IDA7XG4gICAgICAgICAgICBpbnN0YW5jZS55ID0gc2VyaWFsaXplZC55IHx8IDA7XG4gICAgICAgICAgICBpbnN0YW5jZS56ID0gc2VyaWFsaXplZC56IHx8IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoa2xhc3MgPT09IGNjLkNvbG9yKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5yID0gc2VyaWFsaXplZC5yIHx8IDA7XG4gICAgICAgICAgICBpbnN0YW5jZS5nID0gc2VyaWFsaXplZC5nIHx8IDA7XG4gICAgICAgICAgICBpbnN0YW5jZS5iID0gc2VyaWFsaXplZC5iIHx8IDA7XG4gICAgICAgICAgICB2YXIgYSA9IHNlcmlhbGl6ZWQuYTtcbiAgICAgICAgICAgIGluc3RhbmNlLmEgPSBhID09PSB1bmRlZmluZWQgPyAyNTUgOiBhO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKGtsYXNzID09PSBjYy5TaXplKSB7XG4gICAgICAgICAgICBpbnN0YW5jZS53aWR0aCA9IHNlcmlhbGl6ZWQud2lkdGggfHwgMDtcbiAgICAgICAgICAgIGluc3RhbmNlLmhlaWdodCA9IHNlcmlhbGl6ZWQuaGVpZ2h0IHx8IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgREVGQVVMVCA9IEF0dHIuREVMSU1FVEVSICsgJ2RlZmF1bHQnO1xuICAgICAgICB2YXIgYXR0cnMgPSBBdHRyLmdldENsYXNzQXR0cnMoa2xhc3MpO1xuICAgICAgICB2YXIgZmFzdERlZmluZWRQcm9wcyA9IGtsYXNzLl9fcHJvcHNfXyB8fCBPYmplY3Qua2V5cyhpbnN0YW5jZSk7IC8vIOmBjeWOhiBpbnN0YW5jZe+8jOWmguaenOWFt+acieexu+Wei++8jOaJjeS4jeS8muaKiiBfX3R5cGVfXyDkuZ/or7vov5vmnaVcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmYXN0RGVmaW5lZFByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcHJvcE5hbWUgPSBmYXN0RGVmaW5lZFByb3BzW2ldO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc2VyaWFsaXplZFtwcm9wTmFtZV07XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCAhc2VyaWFsaXplZC5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBub3Qgc2VyaWFsaXplZCxcbiAgICAgICAgICAgICAgICAvLyByZWNvdmVyIHRvIGRlZmF1bHQgdmFsdWUgaW4gVmFsdWVUeXBlLCBiZWNhdXNlIGVsaW1pbmF0ZWQgcHJvcGVydGllcyBlcXVhbHMgdG9cbiAgICAgICAgICAgICAgICAvLyBpdHMgZGVmYXVsdCB2YWx1ZSBpbiBWYWx1ZVR5cGUsIG5vdCBkZWZhdWx0IHZhbHVlIGluIHVzZXIgY2xhc3NcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IENDQ2xhc3MuZ2V0RGVmYXVsdChhdHRyc1twcm9wTmFtZSArIERFRkFVTFRdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2VbcHJvcE5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKENDX0VESVRPUiB8fCBDQ19URVNUKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rlc2VyaWFsaXplT2JqRmllbGQoaW5zdGFuY2UsIHZhbHVlLCBwcm9wTmFtZSwgdGhpcy5fdGFyZ2V0ICYmIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZXNlcmlhbGl6ZU9iakZpZWxkKGluc3RhbmNlLCB2YWx1ZSwgcHJvcE5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2VbcHJvcE5hbWVdID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjb21waWxlT2JqZWN0VHlwZUppdChzb3VyY2VzLCBkZWZhdWx0VmFsdWUsIGFjY2Vzc29yVG9TZXQsIHByb3BOYW1lTGl0ZXJhbFRvU2V0LCBhc3N1bWVIYXZlUHJvcElmSXNWYWx1ZSwgc3RpbGxVc2VVcmwpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRWYWx1ZSBpbnN0YW5jZW9mIGNjLlZhbHVlVHlwZSkge1xuICAgICAgICAgICAgLy8gZmFzdCBjYXNlXG4gICAgICAgICAgICBpZiAoIWFzc3VtZUhhdmVQcm9wSWZJc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc291cmNlcy5wdXNoKCdpZihwcm9wKXsnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjdG9yQ29kZSA9IGpzLmdldENsYXNzTmFtZShkZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgc291cmNlcy5wdXNoKCdzLl9kZXNlcmlhbGl6ZVR5cGVkT2JqZWN0KG8nICsgYWNjZXNzb3JUb1NldCArICcscHJvcCwnICsgY3RvckNvZGUgKyAnKTsnKTtcbiAgICAgICAgICAgIGlmICghYXNzdW1lSGF2ZVByb3BJZklzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VzLnB1c2goJ31lbHNlIG8nICsgYWNjZXNzb3JUb1NldCArICc9bnVsbDsnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvdXJjZXMucHVzaCgnaWYocHJvcCl7Jyk7XG4gICAgICAgICAgICBzb3VyY2VzLnB1c2goJ3MuX2Rlc2VyaWFsaXplT2JqRmllbGQobyxwcm9wLCcgKyBwcm9wTmFtZUxpdGVyYWxUb1NldCArIChDQ19FRElUT1IgfHwgQ0NfVEVTVCA/ICcsdCYmbywnIDogJyxudWxsLCcpICsgISFzdGlsbFVzZVVybCArICcpOycpO1xuICAgICAgICAgICAgc291cmNlcy5wdXNoKCd9ZWxzZSBvJyArIGFjY2Vzc29yVG9TZXQgKyAnPW51bGw7Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29tcGlsZURlc2VyaWFsaXplID0gQ0NfU1VQUE9SVF9KSVQgPyBmdW5jdGlvbiAoc2VsZiwga2xhc3MpIHtcbiAgICAgICAgdmFyIFRZUEUgPSBBdHRyLkRFTElNRVRFUiArICd0eXBlJztcbiAgICAgICAgdmFyIEVESVRPUl9PTkxZID0gQXR0ci5ERUxJTUVURVIgKyAnZWRpdG9yT25seSc7XG4gICAgICAgIHZhciBERUZBVUxUID0gQXR0ci5ERUxJTUVURVIgKyAnZGVmYXVsdCc7XG4gICAgICAgIHZhciBTQVZFX1VSTF9BU19BU1NFVCA9IEF0dHIuREVMSU1FVEVSICsgJ3NhdmVVcmxBc0Fzc2V0JztcbiAgICAgICAgdmFyIEZPUk1FUkxZX1NFUklBTElaRURfQVMgPSBBdHRyLkRFTElNRVRFUiArICdmb3JtZXJseVNlcmlhbGl6ZWRBcyc7XG4gICAgICAgIHZhciBhdHRycyA9IEF0dHIuZ2V0Q2xhc3NBdHRycyhrbGFzcyk7XG5cbiAgICAgICAgdmFyIHByb3BzID0ga2xhc3MuX192YWx1ZXNfXztcbiAgICAgICAgLy8gc2VsZiwgb2JqLCBzZXJpYWxpemVkRGF0YSwga2xhc3MsIHRhcmdldFxuICAgICAgICB2YXIgc291cmNlcyA9IFsndmFyIHByb3A7J107XG4gICAgICAgIHZhciBmYXN0TW9kZSA9IG1pc2MuQlVJTFRJTl9DTEFTU0lEX1JFLnRlc3QoanMuX2dldENsYXNzSWQoa2xhc3MpKTtcbiAgICAgICAgLy8gc291cmNlcy5wdXNoKCd2YXIgdmIsdm4sdnMsdm8sdnUsdmY7Jyk7ICAgIC8vIGJvb2xlYW4sIG51bWJlciwgc3RyaW5nLCBvYmplY3QsIHVuZGVmaW5lZCwgZnVuY3Rpb25cbiAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwcm9wcy5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgdmFyIHByb3BOYW1lID0gcHJvcHNbcF07XG4gICAgICAgICAgICBpZiAoKENDX1BSRVZJRVcgfHwgQ0NfRURJVE9SICYmIHNlbGYuX2lnbm9yZUVkaXRvck9ubHkpICYmIGF0dHJzW3Byb3BOYW1lICsgRURJVE9SX09OTFldKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7IC8vIHNraXAgZWRpdG9yIG9ubHkgaWYgaW4gcHJldmlld1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgYWNjZXNzb3JUb1NldCwgcHJvcE5hbWVMaXRlcmFsVG9TZXQ7XG4gICAgICAgICAgICBpZiAoQ0NDbGFzcy5JREVOVElGSUVSX1JFLnRlc3QocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcHJvcE5hbWVMaXRlcmFsVG9TZXQgPSAnXCInICsgcHJvcE5hbWUgKyAnXCInO1xuICAgICAgICAgICAgICAgIGFjY2Vzc29yVG9TZXQgPSAnLicgKyBwcm9wTmFtZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvcE5hbWVMaXRlcmFsVG9TZXQgPSBDQ0NsYXNzLmVzY2FwZUZvckpTKHByb3BOYW1lKTtcbiAgICAgICAgICAgICAgICBhY2Nlc3NvclRvU2V0ID0gJ1snICsgcHJvcE5hbWVMaXRlcmFsVG9TZXQgKyAnXSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBhY2Nlc3NvclRvR2V0ID0gYWNjZXNzb3JUb1NldDtcbiAgICAgICAgICAgIGlmIChhdHRyc1twcm9wTmFtZSArIEZPUk1FUkxZX1NFUklBTElaRURfQVNdKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BOYW1lVG9SZWFkID0gYXR0cnNbcHJvcE5hbWUgKyBGT1JNRVJMWV9TRVJJQUxJWkVEX0FTXTtcbiAgICAgICAgICAgICAgICBpZiAoQ0NDbGFzcy5JREVOVElGSUVSX1JFLnRlc3QocHJvcE5hbWVUb1JlYWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yVG9HZXQgPSAnLicgKyBwcm9wTmFtZVRvUmVhZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhY2Nlc3NvclRvR2V0ID0gJ1snICsgQ0NDbGFzcy5lc2NhcGVGb3JKUyhwcm9wTmFtZVRvUmVhZCkgKyAnXSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzb3VyY2VzLnB1c2goJ3Byb3A9ZCcgKyBhY2Nlc3NvclRvR2V0ICsgJzsnKTtcbiAgICAgICAgICAgIHNvdXJjZXMucHVzaCgnaWYodHlwZW9mICcgKyAoQ0NfSlNCIHx8IENDX1JVTlRJTUUgPyAnKHByb3ApJyA6ICdwcm9wJykgKyAnIT09XCJ1bmRlZmluZWRcIil7Jyk7XG5cbiAgICAgICAgICAgIHZhciBzdGlsbFVzZVVybCA9IGF0dHJzW3Byb3BOYW1lICsgU0FWRV9VUkxfQVNfQVNTRVRdO1xuICAgICAgICAgICAgLy8gZnVuY3Rpb24gdW5kZWZpbmVkIG9iamVjdChudWxsKSBzdHJpbmcgYm9vbGVhbiBudW1iZXJcbiAgICAgICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBDQ0NsYXNzLmdldERlZmF1bHQoYXR0cnNbcHJvcE5hbWUgKyBERUZBVUxUXSk7XG4gICAgICAgICAgICBpZiAoZmFzdE1vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNQcmltaXRpdmVUeXBlO1xuICAgICAgICAgICAgICAgIHZhciB1c2VyVHlwZSA9IGF0dHJzW3Byb3BOYW1lICsgVFlQRV07XG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIHVzZXJUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzUHJpbWl0aXZlVHlwZSA9IHVzZXJUeXBlID09PSBjYy5TdHJpbmcgfHwgdXNlclR5cGUgPT09IGNjLkludGVnZXIgfHwgdXNlclR5cGUgPT09IGNjLkZsb2F0IHx8IHVzZXJUeXBlID09PSBjYy5Cb29sZWFuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0VHlwZSA9IHR5cGVvZiBkZWZhdWx0VmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlzUHJpbWl0aXZlVHlwZSA9IGRlZmF1bHRUeXBlID09PSAnc3RyaW5nJyAmJiAhc3RpbGxVc2VVcmwgfHwgZGVmYXVsdFR5cGUgPT09ICdudW1iZXInIHx8IGRlZmF1bHRUeXBlID09PSAnYm9vbGVhbic7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzLnB1c2goJ28nICsgYWNjZXNzb3JUb1NldCArICc9cHJvcDsnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb21waWxlT2JqZWN0VHlwZUppdChzb3VyY2VzLCBkZWZhdWx0VmFsdWUsIGFjY2Vzc29yVG9TZXQsIHByb3BOYW1lTGl0ZXJhbFRvU2V0LCB0cnVlLCBzdGlsbFVzZVVybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VzLnB1c2goJ2lmKHR5cGVvZiAnICsgKENDX0pTQiB8fCBDQ19SVU5USU1FID8gJyhwcm9wKScgOiAncHJvcCcpICsgJyE9PVwib2JqZWN0XCIpeycgKyAnbycgKyBhY2Nlc3NvclRvU2V0ICsgJz1wcm9wOycgKyAnfWVsc2V7Jyk7XG4gICAgICAgICAgICAgICAgY29tcGlsZU9iamVjdFR5cGVKaXQoc291cmNlcywgZGVmYXVsdFZhbHVlLCBhY2Nlc3NvclRvU2V0LCBwcm9wTmFtZUxpdGVyYWxUb1NldCwgZmFsc2UsIHN0aWxsVXNlVXJsKTtcbiAgICAgICAgICAgICAgICBzb3VyY2VzLnB1c2goJ30nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZXMucHVzaCgnfScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYy5qcy5pc0NoaWxkQ2xhc3NPZihrbGFzcywgY2MuX0Jhc2VOb2RlKSB8fCBjYy5qcy5pc0NoaWxkQ2xhc3NPZihrbGFzcywgY2MuQ29tcG9uZW50KSkge1xuICAgICAgICAgICAgaWYgKENDX1BSRVZJRVcgfHwgQ0NfRURJVE9SICYmIHNlbGYuX2lnbm9yZUVkaXRvck9ubHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF5VXNlZEluUGVyc2lzdFJvb3QgPSBqcy5pc0NoaWxkQ2xhc3NPZihrbGFzcywgY2MuTm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKG1heVVzZWRJblBlcnNpc3RSb290KSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaCgnZC5faWQmJihvLl9pZD1kLl9pZCk7Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VzLnB1c2goJ2QuX2lkJiYoby5faWQ9ZC5faWQpOycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wc1twcm9wcy5sZW5ndGggLSAxXSA9PT0gJ18kZXJpYWxpemVkJykge1xuICAgICAgICAgICAgLy8gZGVlcCBjb3B5IG9yaWdpbmFsIHNlcmlhbGl6ZWQgZGF0YVxuICAgICAgICAgICAgc291cmNlcy5wdXNoKCdvLl8kZXJpYWxpemVkPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZCkpOycpO1xuICAgICAgICAgICAgLy8gcGFyc2UgdGhlIHNlcmlhbGl6ZWQgZGF0YSBhcyBwcmltaXRpdmUgamF2YXNjcmlwdCBvYmplY3QsIHNvIGl0cyBfX2lkX18gd2lsbCBiZSBkZXJlZmVyZW5jZWRcbiAgICAgICAgICAgIHNvdXJjZXMucHVzaCgncy5fZGVzZXJpYWxpemVQcmltaXRpdmVPYmplY3Qoby5fJGVyaWFsaXplZCxkKTsnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRnVuY3Rpb24oJ3MnLCAnbycsICdkJywgJ2snLCAndCcsIHNvdXJjZXMuam9pbignJykpO1xuICAgIH0gOiBmdW5jdGlvbiAoc2VsZiwga2xhc3MpIHtcbiAgICAgICAgdmFyIGZhc3RNb2RlID0gbWlzYy5CVUlMVElOX0NMQVNTSURfUkUudGVzdChqcy5fZ2V0Q2xhc3NJZChrbGFzcykpO1xuICAgICAgICB2YXIgc2hvdWxkQ29weUlkID0gY2MuanMuaXNDaGlsZENsYXNzT2Yoa2xhc3MsIGNjLl9CYXNlTm9kZSkgfHwgY2MuanMuaXNDaGlsZENsYXNzT2Yoa2xhc3MsIGNjLkNvbXBvbmVudCk7XG4gICAgICAgIHZhciBzaG91bGRDb3B5UmF3RGF0YTtcblxuICAgICAgICB2YXIgc2ltcGxlUHJvcHMgPSBbXTtcbiAgICAgICAgdmFyIHNpbXBsZVByb3BzVG9SZWFkID0gc2ltcGxlUHJvcHM7XG4gICAgICAgIHZhciBhZHZhbmNlZFByb3BzID0gW107XG4gICAgICAgIHZhciBhZHZhbmNlZFByb3BzVG9SZWFkID0gYWR2YW5jZWRQcm9wcztcbiAgICAgICAgdmFyIGFkdmFuY2VkUHJvcHNVc2VVcmwgPSBbXTtcbiAgICAgICAgdmFyIGFkdmFuY2VkUHJvcHNWYWx1ZVR5cGUgPSBbXTtcblxuICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHByb3BzID0ga2xhc3MuX192YWx1ZXNfXztcbiAgICAgICAgICAgIHNob3VsZENvcHlSYXdEYXRhID0gcHJvcHNbcHJvcHMubGVuZ3RoIC0gMV0gPT09ICdfJGVyaWFsaXplZCc7XG5cbiAgICAgICAgICAgIHZhciBhdHRycyA9IEF0dHIuZ2V0Q2xhc3NBdHRycyhrbGFzcyk7XG4gICAgICAgICAgICB2YXIgVFlQRSA9IEF0dHIuREVMSU1FVEVSICsgJ3R5cGUnO1xuICAgICAgICAgICAgdmFyIERFRkFVTFQgPSBBdHRyLkRFTElNRVRFUiArICdkZWZhdWx0JztcbiAgICAgICAgICAgIHZhciBTQVZFX1VSTF9BU19BU1NFVCA9IEF0dHIuREVMSU1FVEVSICsgJ3NhdmVVcmxBc0Fzc2V0JztcbiAgICAgICAgICAgIHZhciBGT1JNRVJMWV9TRVJJQUxJWkVEX0FTID0gQXR0ci5ERUxJTUVURVIgKyAnZm9ybWVybHlTZXJpYWxpemVkQXMnO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IHByb3BzLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BOYW1lID0gcHJvcHNbcF07XG4gICAgICAgICAgICAgICAgdmFyIHByb3BOYW1lVG9SZWFkID0gcHJvcE5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJzW3Byb3BOYW1lICsgRk9STUVSTFlfU0VSSUFMSVpFRF9BU10pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcE5hbWVUb1JlYWQgPSBhdHRyc1twcm9wTmFtZSArIEZPUk1FUkxZX1NFUklBTElaRURfQVNdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc3RpbGxVc2VVcmwgPSBhdHRyc1twcm9wTmFtZSArIFNBVkVfVVJMX0FTX0FTU0VUXTtcbiAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiB1bmRlZmluZWQgb2JqZWN0KG51bGwpIHN0cmluZyBib29sZWFuIG51bWJlclxuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBDQ0NsYXNzLmdldERlZmF1bHQoYXR0cnNbcHJvcE5hbWUgKyBERUZBVUxUXSk7XG4gICAgICAgICAgICAgICAgdmFyIGlzUHJpbWl0aXZlVHlwZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChmYXN0TW9kZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXNlclR5cGUgPSBhdHRyc1twcm9wTmFtZSArIFRZUEVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQgJiYgdXNlclR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUHJpbWl0aXZlVHlwZSA9IHVzZXJUeXBlID09PSBjYy5TdHJpbmcgfHwgdXNlclR5cGUgPT09IGNjLkludGVnZXIgfHwgdXNlclR5cGUgPT09IGNjLkZsb2F0IHx8IHVzZXJUeXBlID09PSBjYy5Cb29sZWFuO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRUeXBlID0gdHlwZW9mIGRlZmF1bHRWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUHJpbWl0aXZlVHlwZSA9IGRlZmF1bHRUeXBlID09PSAnc3RyaW5nJyAmJiAhc3RpbGxVc2VVcmwgfHwgZGVmYXVsdFR5cGUgPT09ICdudW1iZXInIHx8IGRlZmF1bHRUeXBlID09PSAnYm9vbGVhbic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGZhc3RNb2RlICYmIGlzUHJpbWl0aXZlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcE5hbWVUb1JlYWQgIT09IHByb3BOYW1lICYmIHNpbXBsZVByb3BzVG9SZWFkID09PSBzaW1wbGVQcm9wcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2ltcGxlUHJvcHNUb1JlYWQgPSBzaW1wbGVQcm9wcy5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNpbXBsZVByb3BzLnB1c2gocHJvcE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2ltcGxlUHJvcHNUb1JlYWQgIT09IHNpbXBsZVByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaW1wbGVQcm9wc1RvUmVhZC5wdXNoKHByb3BOYW1lVG9SZWFkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wTmFtZVRvUmVhZCAhPT0gcHJvcE5hbWUgJiYgYWR2YW5jZWRQcm9wc1RvUmVhZCA9PT0gYWR2YW5jZWRQcm9wcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWR2YW5jZWRQcm9wc1RvUmVhZCA9IGFkdmFuY2VkUHJvcHMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZFByb3BzLnB1c2gocHJvcE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWR2YW5jZWRQcm9wc1RvUmVhZCAhPT0gYWR2YW5jZWRQcm9wcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWR2YW5jZWRQcm9wc1RvUmVhZC5wdXNoKHByb3BOYW1lVG9SZWFkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZFByb3BzVXNlVXJsLnB1c2goc3RpbGxVc2VVcmwpO1xuICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZFByb3BzVmFsdWVUeXBlLnB1c2goZGVmYXVsdFZhbHVlIGluc3RhbmNlb2YgY2MuVmFsdWVUeXBlICYmIGRlZmF1bHRWYWx1ZS5jb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAocywgbywgZCwgaywgdCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaW1wbGVQcm9wcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBfcHJvcCA9IGRbc2ltcGxlUHJvcHNUb1JlYWRbaV1dO1xuICAgICAgICAgICAgICAgIGlmIChfcHJvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9bc2ltcGxlUHJvcHNbaV1dID0gX3Byb3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFkdmFuY2VkUHJvcHMubGVuZ3RoOyArK19pKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3BOYW1lID0gYWR2YW5jZWRQcm9wc1tfaV07XG4gICAgICAgICAgICAgICAgdmFyIHByb3AgPSBkW2FkdmFuY2VkUHJvcHNUb1JlYWRbX2ldXTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWZhc3RNb2RlICYmICh0eXBlb2YgcHJvcCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocHJvcCkpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBvW3Byb3BOYW1lXSA9IHByb3A7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZmFzdE1vZGUgKHNvIHdpbGwgbm90IHNpbXBsZVByb3ApIG9yIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVUeXBlQ3RvciA9IGFkdmFuY2VkUHJvcHNWYWx1ZVR5cGVbX2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVUeXBlQ3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZhc3RNb2RlIHx8IHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLl9kZXNlcmlhbGl6ZVR5cGVkT2JqZWN0KG9bcHJvcE5hbWVdLCBwcm9wLCB2YWx1ZVR5cGVDdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb1twcm9wTmFtZV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLl9kZXNlcmlhbGl6ZU9iakZpZWxkKG8sIHByb3AsIHByb3BOYW1lLCBDQ19FRElUT1IgfHwgQ0NfVEVTVCA/IHQgJiYgbyA6IG51bGwsIGFkdmFuY2VkUHJvcHNVc2VVcmxbX2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb1twcm9wTmFtZV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNob3VsZENvcHlJZCAmJiBkLl9pZCkge1xuICAgICAgICAgICAgICAgIG8uX2lkID0gZC5faWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2hvdWxkQ29weVJhd0RhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBkZWVwIGNvcHkgb3JpZ2luYWwgc2VyaWFsaXplZCBkYXRhXG4gICAgICAgICAgICAgICAgby5fJGVyaWFsaXplZCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZCkpO1xuICAgICAgICAgICAgICAgIC8vIHBhcnNlIHRoZSBzZXJpYWxpemVkIGRhdGEgYXMgcHJpbWl0aXZlIGphdmFzY3JpcHQgb2JqZWN0LCBzbyBpdHMgX19pZF9fIHdpbGwgYmUgZGVyZWZlcmVuY2VkXG4gICAgICAgICAgICAgICAgcy5fZGVzZXJpYWxpemVQcmltaXRpdmVPYmplY3Qoby5fJGVyaWFsaXplZCwgZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHVubGlua1VudXNlZFByZWZhYihzZWxmLCBzZXJpYWxpemVkLCBvYmopIHtcbiAgICAgICAgdmFyIHV1aWQgPSBzZXJpYWxpemVkWydhc3NldCddICYmIHNlcmlhbGl6ZWRbJ2Fzc2V0J10uX191dWlkX187XG4gICAgICAgIGlmICh1dWlkKSB7XG4gICAgICAgICAgICB2YXIgbGFzdCA9IHNlbGYucmVzdWx0LnV1aWRMaXN0Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBpZiAoc2VsZi5yZXN1bHQudXVpZExpc3RbbGFzdF0gPT09IHV1aWQgJiYgc2VsZi5yZXN1bHQudXVpZE9iakxpc3RbbGFzdF0gPT09IG9iaiAmJiBzZWxmLnJlc3VsdC51dWlkUHJvcExpc3RbbGFzdF0gPT09ICdhc3NldCcpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnJlc3VsdC51dWlkTGlzdC5wb3AoKTtcbiAgICAgICAgICAgICAgICBzZWxmLnJlc3VsdC51dWlkT2JqTGlzdC5wb3AoKTtcbiAgICAgICAgICAgICAgICBzZWxmLnJlc3VsdC51dWlkUHJvcExpc3QucG9wKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBkZWJ1Z0Vudk9ubHlJbmZvID0gJ0ZhaWxlZCB0byBza2lwIHByZWZhYiBhc3NldCB3aGlsZSBkZXNlcmlhbGl6aW5nIFByZWZhYkluZm8nO1xuICAgICAgICAgICAgICAgIGNjLndhcm4oZGVidWdFbnZPbmx5SW5mbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfZGVzZXJpYWxpemVGaXJlQ2xhc3Moc2VsZiwgb2JqLCBzZXJpYWxpemVkLCBrbGFzcywgdGFyZ2V0KSB7XG4gICAgICAgIHZhciBkZXNlcmlhbGl6ZTtcbiAgICAgICAgaWYgKGtsYXNzLmhhc093blByb3BlcnR5KCdfX2Rlc2VyaWFsaXplX18nKSkge1xuICAgICAgICAgICAgZGVzZXJpYWxpemUgPSBrbGFzcy5fX2Rlc2VyaWFsaXplX187XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXNlcmlhbGl6ZSA9IGNvbXBpbGVEZXNlcmlhbGl6ZShzZWxmLCBrbGFzcyk7XG4gICAgICAgICAgICAvLyBpZiAoQ0NfVEVTVCAmJiAhaXNQaGFudG9tSlMpIHtcbiAgICAgICAgICAgIC8vICAgICBjYy5sb2coZGVzZXJpYWxpemUpO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAganMudmFsdWUoa2xhc3MsICdfX2Rlc2VyaWFsaXplX18nLCBkZXNlcmlhbGl6ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVzZXJpYWxpemUoc2VsZiwgb2JqLCBzZXJpYWxpemVkLCBrbGFzcywgdGFyZ2V0KTtcbiAgICAgICAgLy8gaWYgcHJldmlldyBvciBidWlsZCB3b3JrZXJcbiAgICAgICAgaWYgKENDX1BSRVZJRVcgfHwgQ0NfRURJVE9SICYmIHNlbGYuX2lnbm9yZUVkaXRvck9ubHkpIHtcbiAgICAgICAgICAgIGlmIChrbGFzcyA9PT0gY2MuX1ByZWZhYkluZm8gJiYgIW9iai5zeW5jKSB7XG4gICAgICAgICAgICAgICAgdW5saW5rVW51c2VkUHJlZmFiKHNlbGYsIHNlcmlhbGl6ZWQsIG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfRGVzZXJpYWxpemVyLnBvb2wgPSBuZXcganMuUG9vbChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIG9iai5yZXN1bHQgPSBudWxsO1xuICAgICAgICBvYmouY3VzdG9tRW52ID0gbnVsbDtcbiAgICAgICAgb2JqLmRlc2VyaWFsaXplZExpc3QubGVuZ3RoID0gMDtcbiAgICAgICAgb2JqLmRlc2VyaWFsaXplZERhdGEgPSBudWxsO1xuICAgICAgICBvYmouX2NsYXNzRmluZGVyID0gbnVsbDtcbiAgICAgICAgaWYgKENDX0RFVikge1xuICAgICAgICAgICAgb2JqLl90YXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIG9iai5faWRMaXN0Lmxlbmd0aCA9IDA7XG4gICAgICAgIG9iai5faWRPYmpMaXN0Lmxlbmd0aCA9IDA7XG4gICAgICAgIG9iai5faWRQcm9wTGlzdC5sZW5ndGggPSAwO1xuICAgIH0sIDEpO1xuXG4gICAgX0Rlc2VyaWFsaXplci5wb29sLmdldCA9IGZ1bmN0aW9uIChyZXN1bHQsIHRhcmdldCwgY2xhc3NGaW5kZXIsIGN1c3RvbUVudiwgaWdub3JlRWRpdG9yT25seSkge1xuICAgICAgICB2YXIgY2FjaGUgPSB0aGlzLl9nZXQoKTtcbiAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgICBjYWNoZS5yZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgICAgICBjYWNoZS5jdXN0b21FbnYgPSBjdXN0b21FbnY7XG4gICAgICAgICAgICBjYWNoZS5fY2xhc3NGaW5kZXIgPSBjbGFzc0ZpbmRlcjtcbiAgICAgICAgICAgIGlmIChDQ19ERVYpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICAgICAgICAgIGNhY2hlLl9pZ25vcmVFZGl0b3JPbmx5ID0gaWdub3JlRWRpdG9yT25seTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWNoZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgX0Rlc2VyaWFsaXplcihyZXN1bHQsIHRhcmdldCwgY2xhc3NGaW5kZXIsIGN1c3RvbUVudiwgaWdub3JlRWRpdG9yT25seSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF9EZXNlcmlhbGl6ZXI7XG59KCk7XG5cbi8qKlxuICogQG1vZHVsZSBjY1xuICovXG5cbi8qKlxuICogISNlbiBEZXNlcmlhbGl6ZSBqc29uIHRvIGNjLkFzc2V0XG4gKiAhI3poIOWwhiBKU09OIOWPjeW6j+WIl+WMluS4uuWvueixoeWunuS+i+OAglxuICpcbiAqIOW9k+aMh+WumuS6hiB0YXJnZXQg6YCJ6aG55pe277yM5aaC5p6cIHRhcmdldCDlvJXnlKjnmoTlhbblroMgYXNzZXQg55qEIHV1aWQg5LiN5Y+Y77yM5YiZ5LiN5Lya5pS55Y+YIHRhcmdldCDlr7kgYXNzZXQg55qE5byV55So77yMXG4gKiDkuZ/kuI3kvJrlsIYgdXVpZCDkv53lrZjliLAgcmVzdWx0IOWvueixoeS4reOAglxuICpcbiAqIEBtZXRob2QgZGVzZXJpYWxpemVcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gZGF0YSAtIHRoZSBzZXJpYWxpemVkIGNjLkFzc2V0IGpzb24gc3RyaW5nIG9yIGpzb24gb2JqZWN0LlxuICogQHBhcmFtIHtEZXRhaWxzfSBbZGV0YWlsc10gLSBhZGRpdGlvbmFsIGxvYWRpbmcgcmVzdWx0XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtvYmplY3R9IHRoZSBtYWluIGRhdGEoYXNzZXQpXG4gKi9cbmNjLmRlc2VyaWFsaXplID0gZnVuY3Rpb24gKGRhdGEsIGRldGFpbHMsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgY2xhc3NGaW5kZXIgPSBvcHRpb25zLmNsYXNzRmluZGVyIHx8IGpzLl9nZXRDbGFzc0J5SWQ7XG4gICAgLy8g5ZCv55SoIGNyZWF0ZUFzc2V0UmVmcyDlkI7vvIzlpoLmnpzmnIkgdXJsIOWxnuaAp+WImeS8muiiq+e7n+S4gOW8uuWItuiuvue9ruS4uiB7IHV1aWQ6ICd4eHgnIH3vvIzlv4XpobvlkI7pnaLlho3nibnmrorlpITnkIZcbiAgICB2YXIgY3JlYXRlQXNzZXRSZWZzID0gb3B0aW9ucy5jcmVhdGVBc3NldFJlZnMgfHwgY2Muc3lzLnBsYXRmb3JtID09PSBjYy5zeXMuRURJVE9SX0NPUkU7XG4gICAgdmFyIHRhcmdldCA9IChDQ19FRElUT1IgfHwgQ0NfVEVTVCkgJiYgb3B0aW9ucy50YXJnZXQ7XG4gICAgdmFyIGN1c3RvbUVudiA9IG9wdGlvbnMuY3VzdG9tRW52O1xuICAgIHZhciBpZ25vcmVFZGl0b3JPbmx5ID0gb3B0aW9ucy5pZ25vcmVFZGl0b3JPbmx5O1xuXG4gICAgaWYgKENDX0VESVRPUiAmJiBCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgIH1cblxuICAgIC8vdmFyIG9sZEpzb24gPSBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKTtcblxuICAgIHZhciB0ZW1wRGV0YWlscyA9ICFkZXRhaWxzO1xuICAgIGRldGFpbHMgPSBkZXRhaWxzIHx8IERldGFpbHMucG9vbC5nZXQoKTtcbiAgICB2YXIgZGVzZXJpYWxpemVyID0gX0Rlc2VyaWFsaXplci5wb29sLmdldChkZXRhaWxzLCB0YXJnZXQsIGNsYXNzRmluZGVyLCBjdXN0b21FbnYsIGlnbm9yZUVkaXRvck9ubHkpO1xuXG4gICAgY2MuZ2FtZS5faXNDbG9uaW5nID0gdHJ1ZTtcbiAgICB2YXIgcmVzID0gZGVzZXJpYWxpemVyLmRlc2VyaWFsaXplKGRhdGEpO1xuICAgIGNjLmdhbWUuX2lzQ2xvbmluZyA9IGZhbHNlO1xuXG4gICAgX0Rlc2VyaWFsaXplci5wb29sLnB1dChkZXNlcmlhbGl6ZXIpO1xuICAgIGlmIChjcmVhdGVBc3NldFJlZnMpIHtcbiAgICAgICAgZGV0YWlscy5hc3NpZ25Bc3NldHNCeShFZGl0b3Iuc2VyaWFsaXplLmFzQXNzZXQpO1xuICAgIH1cbiAgICBpZiAodGVtcERldGFpbHMpIHtcbiAgICAgICAgRGV0YWlscy5wb29sLnB1dChkZXRhaWxzKTtcbiAgICB9XG5cbiAgICAvL3ZhciBhZnRlckpzb24gPSBKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKTtcbiAgICAvL2lmIChvbGRKc29uICE9PSBhZnRlckpzb24pIHtcbiAgICAvLyAgICB0aHJvdyBuZXcgRXJyb3IoJ0pTT04gU0hPVUxEIG5vdCBjaGFuZ2VkJyk7XG4gICAgLy99XG5cbiAgICByZXR1cm4gcmVzO1xufTtcblxuY2MuZGVzZXJpYWxpemUuRGV0YWlscyA9IERldGFpbHM7XG5jYy5kZXNlcmlhbGl6ZS5yZXBvcnRNaXNzaW5nQ2xhc3MgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICBpZiAoQ0NfRURJVE9SICYmIEVkaXRvci5VdGlscy5VdWlkVXRpbHMuaXNVdWlkKGlkKSkge1xuICAgICAgICBpZCA9IEVkaXRvci5VdGlscy5VdWlkVXRpbHMuZGVjb21wcmVzc1V1aWQoaWQpO1xuICAgICAgICBjYy53YXJuSUQoNTMwMSwgaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNjLndhcm5JRCg1MzAyLCBpZCk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltUmxjMlZ5YVdGc2FYcGxMbXB6SWwwc0ltNWhiV1Z6SWpwYkltcHpJaXdpY21WeGRXbHlaU0lzSWtGMGRISWlMQ0pEUTBOc1lYTnpJaXdpYldsell5SXNJa1JsZEdGcGJITWlMQ0oxZFdsa1RHbHpkQ0lzSW5WMWFXUlBZbXBNYVhOMElpd2lkWFZwWkZCeWIzQk1hWE4wSWl3aVgzTjBhV3hzVlhObFZYSnNJaXdpWTNKbFlYUmxUV0Z3SWl3aWNISnZkRzkwZVhCbElpd2ljbVZ6WlhRaUxDSnNaVzVuZEdnaUxDSmpiR1ZoY2lJc0lrTkRYMFZFU1ZSUFVpSXNJa05EWDFSRlUxUWlMQ0poYzNOcFoyNUJjM05sZEhOQ2VTSXNJbWRsZEhSbGNpSXNJbWtpTENKc1pXNGlMQ0oxZFdsa0lpd2liMkpxSWl3aWNISnZjQ0lzSW5CMWMyZ2lMQ0p3Y205d1RtRnRaU0lzSW5CdmIyd2lMQ0pRYjI5c0lpd2laMlYwSWl3aVgyZGxkQ0lzSWw5RVpYTmxjbWxoYkdsNlpYSWlMQ0p5WlhOMWJIUWlMQ0owWVhKblpYUWlMQ0pqYkdGemMwWnBibVJsY2lJc0ltTjFjM1J2YlVWdWRpSXNJbWxuYm05eVpVVmthWFJ2Y2s5dWJIa2lMQ0prWlhObGNtbGhiR2w2WldSTWFYTjBJaXdpWkdWelpYSnBZV3hwZW1Wa1JHRjBZU0lzSWw5amJHRnpjMFpwYm1SbGNpSXNJa05EWDBSRlZpSXNJbDkwWVhKblpYUWlMQ0pmYVdkdWIzSmxSV1JwZEc5eVQyNXNlU0lzSWw5cFpFeHBjM1FpTENKZmFXUlBZbXBNYVhOMElpd2lYMmxrVUhKdmNFeHBjM1FpTENKZlpHVnlaV1psY21WdVkyVWlMQ0p6Wld4bUlpd2lhV1JRY205d1RHbHpkQ0lzSW1sa1RHbHpkQ0lzSW1sa1QySnFUR2x6ZENJc0ltOXVSR1Z5WldabGNtVnVZMlZrSWl3aWFXUWlMQ0prWlhObGNtbGhiR2w2WlNJc0ltcHpiMjVQWW1vaUxDSkJjbkpoZVNJc0ltbHpRWEp5WVhraUxDSnFjMjl1UVhKeVlYa2lMQ0p5WldaRGIzVnVkQ0lzSW0xaGFXNVVZWEpuWlhRaUxDSmZaR1Z6WlhKcFlXeHBlbVZQWW1wbFkzUWlMQ0p6WlhKcFlXeHBlbVZrSWl3aWIzZHVaWElpTENKcmJHRnpjeUlzSW5SNWNHVWlMQ0pmWDNSNWNHVmZYeUlzSW01dmRGSmxjRzl5ZEdWa0lpd2lYMmRsZEVOc1lYTnpRbmxKWkNJc0ltTmpJaXdpY21Wd2IzSjBUV2x6YzJsdVowTnNZWE56SWl3aWQyRnlia2xFSWl3aVoyVjBRMnhoYzNOT1lXMWxJaXdpWDJSbGMyVnlhV0ZzYVhwbElpd2lZMjl1ZEdWdWRDSXNJa05zWVhOeklpd2lYMmx6UTBORGJHRnpjeUlzSWw5a1pYTmxjbWxoYkdsNlpVWnBjbVZEYkdGemN5SXNJbDlrWlhObGNtbGhiR2w2WlZSNWNHVmtUMkpxWldOMElpd2lYMlJsYzJWeWFXRnNhWHBsVUhKcGJXbDBhWFpsVDJKcVpXTjBJaXdpWDJSbGMyVnlhV0ZzYVhwbFQySnFSbWxsYkdRaUxDSmZYMmxrWDE4aUxDSjFibVJsWm1sdVpXUWlMQ0pmWDNWMWFXUmZYeUlzSW1SUFltb2lMQ0pwYm5OMFlXNWpaU0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpVm1Wak1pSXNJbmdpTENKNUlpd2lWbVZqTXlJc0lub2lMQ0pEYjJ4dmNpSXNJbklpTENKbklpd2lZaUlzSW1FaUxDSlRhWHBsSWl3aWQybGtkR2dpTENKb1pXbG5hSFFpTENKRVJVWkJWVXhVSWl3aVJFVk1TVTFGVkVWU0lpd2lZWFIwY25NaUxDSm5aWFJEYkdGemMwRjBkSEp6SWl3aVptRnpkRVJsWm1sdVpXUlFjbTl3Y3lJc0lsOWZjSEp2Y0hOZlh5SXNJazlpYW1WamRDSXNJbXRsZVhNaUxDSjJZV3gxWlNJc0ltZGxkRVJsWm1GMWJIUWlMQ0pqYjIxd2FXeGxUMkpxWldOMFZIbHdaVXBwZENJc0luTnZkWEpqWlhNaUxDSmtaV1poZFd4MFZtRnNkV1VpTENKaFkyTmxjM052Y2xSdlUyVjBJaXdpY0hKdmNFNWhiV1ZNYVhSbGNtRnNWRzlUWlhRaUxDSmhjM04xYldWSVlYWmxVSEp2Y0VsbVNYTldZV3gxWlNJc0luTjBhV3hzVlhObFZYSnNJaXdpVm1Gc2RXVlVlWEJsSWl3aVkzUnZja052WkdVaUxDSmpiMjF3YVd4bFJHVnpaWEpwWVd4cGVtVWlMQ0pEUTE5VFZWQlFUMUpVWDBwSlZDSXNJbFJaVUVVaUxDSkZSRWxVVDFKZlQwNU1XU0lzSWxOQlZrVmZWVkpNWDBGVFgwRlRVMFZVSWl3aVJrOVNUVVZTVEZsZlUwVlNTVUZNU1ZwRlJGOUJVeUlzSW5CeWIzQnpJaXdpWDE5MllXeDFaWE5mWHlJc0ltWmhjM1JOYjJSbElpd2lRbFZKVEZSSlRsOURURUZUVTBsRVgxSkZJaXdpZEdWemRDSXNJbDluWlhSRGJHRnpjMGxrSWl3aWNDSXNJa05EWDFCU1JWWkpSVmNpTENKSlJFVk9WRWxHU1VWU1gxSkZJaXdpWlhOallYQmxSbTl5U2xNaUxDSmhZMk5sYzNOdmNsUnZSMlYwSWl3aWNISnZjRTVoYldWVWIxSmxZV1FpTENKRFExOUtVMElpTENKRFExOVNWVTVVU1UxRklpd2lhWE5RY21sdGFYUnBkbVZVZVhCbElpd2lkWE5sY2xSNWNHVWlMQ0pUZEhKcGJtY2lMQ0pKYm5SbFoyVnlJaXdpUm14dllYUWlMQ0pDYjI5c1pXRnVJaXdpWkdWbVlYVnNkRlI1Y0dVaUxDSnBjME5vYVd4a1EyeGhjM05QWmlJc0lsOUNZWE5sVG05a1pTSXNJa052YlhCdmJtVnVkQ0lzSW0xaGVWVnpaV1JKYmxCbGNuTnBjM1JTYjI5MElpd2lUbTlrWlNJc0lrWjFibU4wYVc5dUlpd2lhbTlwYmlJc0luTm9iM1ZzWkVOdmNIbEpaQ0lzSW5Ob2IzVnNaRU52Y0hsU1lYZEVZWFJoSWl3aWMybHRjR3hsVUhKdmNITWlMQ0p6YVcxd2JHVlFjbTl3YzFSdlVtVmhaQ0lzSW1Ga2RtRnVZMlZrVUhKdmNITWlMQ0poWkhaaGJtTmxaRkJ5YjNCelZHOVNaV0ZrSWl3aVlXUjJZVzVqWldSUWNtOXdjMVZ6WlZWeWJDSXNJbUZrZG1GdVkyVmtVSEp2Y0hOV1lXeDFaVlI1Y0dVaUxDSnpiR2xqWlNJc0ltTnZibk4wY25WamRHOXlJaXdpY3lJc0ltOGlMQ0prSWl3aWF5SXNJblFpTENKMllXeDFaVlI1Y0dWRGRHOXlJaXdpWDJsa0lpd2lYeVJsY21saGJHbDZaV1FpTENKS1UwOU9JaXdpY0dGeWMyVWlMQ0p6ZEhKcGJtZHBabmtpTENKMWJteHBibXRWYm5WelpXUlFjbVZtWVdJaUxDSnNZWE4wSWl3aWNHOXdJaXdpWkdWaWRXZEZiblpQYm14NVNXNW1ieUlzSW5kaGNtNGlMQ0pmWDJSbGMyVnlhV0ZzYVhwbFgxOGlMQ0pmVUhKbFptRmlTVzVtYnlJc0luTjVibU1pTENKallXTm9aU0lzSW1SaGRHRWlMQ0prWlhSaGFXeHpJaXdpYjNCMGFXOXVjeUlzSW1OeVpXRjBaVUZ6YzJWMFVtVm1jeUlzSW5ONWN5SXNJbkJzWVhSbWIzSnRJaXdpUlVSSlZFOVNYME5QVWtVaUxDSkNkV1ptWlhJaUxDSnBjMEoxWm1abGNpSXNJblJ2VTNSeWFXNW5JaXdpZEdWdGNFUmxkR0ZwYkhNaUxDSmtaWE5sY21saGJHbDZaWElpTENKbllXMWxJaXdpWDJselEyeHZibWx1WnlJc0luSmxjeUlzSW5CMWRDSXNJa1ZrYVhSdmNpSXNJbk5sY21saGJHbDZaU0lzSW1GelFYTnpaWFFpTENKVmRHbHNjeUlzSWxWMWFXUlZkR2xzY3lJc0ltbHpWWFZwWkNJc0ltUmxZMjl0Y0hKbGMzTlZkV2xrSWwwc0ltMWhjSEJwYm1keklqb2lPenM3TzBGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJNRUpCTEVsQlFVbEJMRXRCUVV0RExGRkJRVkVzVFVGQlVpeERRVUZVTzBGQlEwRXNTVUZCU1VNc1QwRkJUMFFzVVVGQlVTeGhRVUZTTEVOQlFWZzdRVUZEUVN4SlFVRkpSU3hWUVVGVlJpeFJRVUZSTEZkQlFWSXNRMEZCWkR0QlFVTkJMRWxCUVVsSExFOUJRVTlJTEZGQlFWRXNaVUZCVWl4RFFVRllPenRCUVVWQk96dEJRVVZCT3pzN096czdRVUZOUVN4SlFVRkpTU3hWUVVGVkxGTkJRVlpCTEU5QlFWVXNSMEZCV1R0QlFVTjBRanM3T3p0QlFVbEJMRk5CUVV0RExGRkJRVXdzUjBGQlowSXNSVUZCYUVJN1FVRkRRVHM3T3p0QlFVbEJMRk5CUVV0RExGZEJRVXdzUjBGQmJVSXNSVUZCYmtJN1FVRkRRVHM3T3p0QlFVbEJMRk5CUVV0RExGbEJRVXdzUjBGQmIwSXNSVUZCY0VJN08wRkJSVUU3UVVGRFFTeFRRVUZMUXl4WlFVRk1MRWRCUVc5Q1ZDeEhRVUZIVlN4VFFVRklMRU5CUVdFc1NVRkJZaXhEUVVGd1FqdEJRVU5JTEVOQmJrSkVPMEZCYjBKQk96czdRVUZIUVV3c1VVRkJVVTBzVTBGQlVpeERRVUZyUWtNc1MwRkJiRUlzUjBGQk1FSXNXVUZCV1R0QlFVTnNReXhUUVVGTFRpeFJRVUZNTEVOQlFXTlBMRTFCUVdRc1IwRkJkVUlzUTBGQmRrSTdRVUZEUVN4VFFVRkxUaXhYUVVGTUxFTkJRV2xDVFN4TlFVRnFRaXhIUVVFd1FpeERRVUV4UWp0QlFVTkJMRk5CUVV0TUxGbEJRVXdzUTBGQmEwSkxMRTFCUVd4Q0xFZEJRVEpDTEVOQlFUTkNPMEZCUTBGaUxFOUJRVWRqTEV0QlFVZ3NRMEZCVXl4TFFVRkxUQ3haUVVGa08wRkJRMGdzUTBGTVJEdEJRVTFCTEVsQlFVbE5MR0ZCUVdGRExFOUJRV3BDTEVWQlFUQkNPMEZCUTNSQ1dDeFpRVUZSVFN4VFFVRlNMRU5CUVd0Q1RTeGpRVUZzUWl4SFFVRnRReXhWUVVGVlF5eE5RVUZXTEVWQlFXdENPMEZCUTJwRU8wRkJRMEVzWVVGQlN5eEpRVUZKUXl4SlFVRkpMRU5CUVZJc1JVRkJWME1zVFVGQlRTeExRVUZMWkN4UlFVRk1MRU5CUVdOUExFMUJRWEJETEVWQlFUUkRUU3hKUVVGSlF5eEhRVUZvUkN4RlFVRnhSRVFzUjBGQmNrUXNSVUZCTUVRN1FVRkRkRVFzWjBKQlFVbEZMRTlCUVU4c1MwRkJTMllzVVVGQlRDeERRVUZqWVN4RFFVRmtMRU5CUVZnN1FVRkRRU3huUWtGQlNVY3NUVUZCVFN4TFFVRkxaaXhYUVVGTUxFTkJRV2xDV1N4RFFVRnFRaXhEUVVGV08wRkJRMEVzWjBKQlFVbEpMRTlCUVU4c1MwRkJTMllzV1VGQlRDeERRVUZyUWxjc1EwRkJiRUlzUTBGQldEdEJRVU5CUnl4blFrRkJTVU1zU1VGQlNpeEpRVUZaVEN4UFFVRlBSeXhKUVVGUUxFTkJRVm83UVVGRFNEdEJRVU5LTEV0QlVrUTdRVUZUU0R0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3TzBGQlRVRm9RaXhSUVVGUlRTeFRRVUZTTEVOQlFXdENZU3hKUVVGc1FpeEhRVUY1UWl4VlFVRlZSaXhIUVVGV0xFVkJRV1ZITEZGQlFXWXNSVUZCZVVKS0xFbEJRWHBDTEVWQlFTdENXaXhaUVVFdlFpeEZRVUUyUXp0QlFVTnNSU3hSUVVGSlFTeFpRVUZLTEVWQlFXdENPMEZCUTJRc1lVRkJTMEVzV1VGQlRDeERRVUZyUWl4TFFVRkxTQ3hSUVVGTUxFTkJRV05QTEUxQlFXaERMRWxCUVRCRExFbEJRVEZETzBGQlEwZzdRVUZEUkN4VFFVRkxVQ3hSUVVGTUxFTkJRV05yUWl4SlFVRmtMRU5CUVcxQ1NDeEpRVUZ1UWp0QlFVTkJMRk5CUVV0a0xGZEJRVXdzUTBGQmFVSnBRaXhKUVVGcVFpeERRVUZ6UWtZc1IwRkJkRUk3UVVGRFFTeFRRVUZMWkN4WlFVRk1MRU5CUVd0Q1owSXNTVUZCYkVJc1EwRkJkVUpETEZGQlFYWkNPMEZCUTBnc1EwRlFSRHM3UVVGVFFYQkNMRkZCUVZGeFFpeEpRVUZTTEVkQlFXVXNTVUZCU1RGQ0xFZEJRVWN5UWl4SlFVRlFMRU5CUVZrc1ZVRkJWVXdzUjBGQlZpeEZRVUZsTzBGQlEzUkRRU3hSUVVGSlZpeExRVUZLTzBGQlEwZ3NRMEZHWXl4RlFVVmFMRVZCUmxrc1EwRkJaanM3UVVGSlFWQXNVVUZCVVhGQ0xFbEJRVklzUTBGQllVVXNSMEZCWWl4SFFVRnRRaXhaUVVGWk8wRkJRek5DTEZkQlFVOHNTMEZCUzBNc1NVRkJUQ3hOUVVGbExFbEJRVWw0UWl4UFFVRktMRVZCUVhSQ08wRkJRMGdzUTBGR1JEczdRVUZKUVRzN1FVRkZRU3hKUVVGSmVVSXNaMEpCUVdsQ0xGbEJRVms3UVVGRE4wSXNZVUZCVTBFc1lVRkJWQ3hEUVVGMVFrTXNUVUZCZGtJc1JVRkJLMEpETEUxQlFTOUNMRVZCUVhWRFF5eFhRVUYyUXl4RlFVRnZSRU1zVTBGQmNFUXNSVUZCSzBSRExHZENRVUV2UkN4RlFVRnBSanRCUVVNM1JTeGhRVUZMU2l4TlFVRk1MRWRCUVdOQkxFMUJRV1E3UVVGRFFTeGhRVUZMUnl4VFFVRk1MRWRCUVdsQ1FTeFRRVUZxUWp0QlFVTkJMR0ZCUVV0RkxHZENRVUZNTEVkQlFYZENMRVZCUVhoQ08wRkJRMEVzWVVGQlMwTXNaMEpCUVV3c1IwRkJkMElzU1VGQmVFSTdRVUZEUVN4aFFVRkxReXhaUVVGTUxFZEJRVzlDVEN4WFFVRndRanRCUVVOQkxGbEJRVWxOTEUxQlFVb3NSVUZCV1R0QlFVTlNMR2xDUVVGTFF5eFBRVUZNTEVkQlFXVlNMRTFCUVdZN1FVRkRRU3hwUWtGQlMxTXNhVUpCUVV3c1IwRkJlVUpPTEdkQ1FVRjZRanRCUVVOSU8wRkJRMFFzWVVGQlMwOHNUMEZCVEN4SFFVRmxMRVZCUVdZN1FVRkRRU3hoUVVGTFF5eFZRVUZNTEVkQlFXdENMRVZCUVd4Q08wRkJRMEVzWVVGQlMwTXNWMEZCVEN4SFFVRnRRaXhGUVVGdVFqdEJRVU5JT3p0QlFVVkVMR0ZCUVZORExGbEJRVlFzUTBGQmRVSkRMRWxCUVhaQ0xFVkJRVFpDTzBGQlEzcENPMEZCUTBFc1dVRkJTVllzYlVKQlFXMUNWU3hMUVVGTFZpeG5Ra0ZCTlVJN1FVRkRRU3haUVVGSlZ5eGhRVUZoUkN4TFFVRkxSaXhYUVVGMFFqdEJRVU5CTEZsQlFVbEpMRk5CUVZOR0xFdEJRVXRLTEU5QlFXeENPMEZCUTBFc1dVRkJTVThzV1VGQldVZ3NTMEZCUzBnc1ZVRkJja0k3UVVGRFFTeFpRVUZKVHl4cFFrRkJhVUpLTEV0QlFVdFNMRmxCUVV3c1NVRkJjVUpSTEV0QlFVdFNMRmxCUVV3c1EwRkJhMEpaTEdOQlFUVkVPMEZCUTBFc1dVRkJTUzlDTEVOQlFVb3NSVUZCVDAwc1VVRkJVQ3hGUVVGcFFqQkNMRVZCUVdwQ08wRkJRMEVzV1VGQlNYQkRMR0ZCUVdGdFF5eGpRVUZxUWl4RlFVRnBRenRCUVVNM1FpeHBRa0ZCU3k5Q0xFbEJRVWtzUTBGQlZDeEZRVUZaUVN4SlFVRkpOa0lzVDBGQlQyNURMRTFCUVhaQ0xFVkJRU3RDVFN4SFFVRXZRaXhGUVVGdlF6dEJRVU5vUTAwc01rSkJRVmR6UWl4WFFVRlhOVUlzUTBGQldDeERRVUZZTzBGQlEwRm5ReXh4UWtGQlMwZ3NUMEZCVHpkQ0xFTkJRVkFzUTBGQlREdEJRVU5CT0VJc01FSkJRVlU1UWl4RFFVRldMRVZCUVdGTkxGRkJRV0lzU1VGQmVVSlhMR2xDUVVGcFFtVXNSVUZCYWtJc1EwRkJla0k3UVVGRFFVUXNLMEpCUVdWa0xHZENRVUZtTEVWQlFXbERaU3hGUVVGcVF5eEZRVUZ4UTBZc1ZVRkJWVGxDTEVOQlFWWXNRMEZCY2tNc1JVRkJiVVJOTEZGQlFXNUVPMEZCUTBnN1FVRkRTaXhUUVZCRUxFMUJVVXM3UVVGRFJDeHBRa0ZCUzA0c1NVRkJTU3hEUVVGVUxFVkJRVmxCTEVsQlFVazJRaXhQUVVGUGJrTXNUVUZCZGtJc1JVRkJLMEpOTEVkQlFTOUNMRVZCUVc5RE8wRkJRMmhEVFN3eVFrRkJWM05DTEZkQlFWYzFRaXhEUVVGWUxFTkJRVmc3UVVGRFFXZERMSEZDUVVGTFNDeFBRVUZQTjBJc1EwRkJVQ3hEUVVGTU8wRkJRMEU0UWl3d1FrRkJWVGxDTEVOQlFWWXNSVUZCWVUwc1VVRkJZaXhKUVVGNVFsY3NhVUpCUVdsQ1pTeEZRVUZxUWl4RFFVRjZRanRCUVVOSU8wRkJRMG83UVVGRFNqczdRVUZGUkN4UlFVRkplRU1zV1VGQldXMUNMR05CUVdOdVFpeFRRVUU1UWpzN1FVRkZRVUVzWTBGQlZYbERMRmRCUVZZc1IwRkJkMElzVlVGQlZVTXNUMEZCVml4RlFVRnRRanRCUVVOMlF5eFpRVUZKUXl4TlFVRk5ReXhQUVVGT0xFTkJRV05HTEU5QlFXUXNRMEZCU2l4RlFVRTBRanRCUVVONFFpeG5Ra0ZCU1Vjc1dVRkJXVWdzVDBGQmFFSTdRVUZEUVN4blFrRkJTVWtzVjBGQlYwUXNWVUZCVlRORExFMUJRWHBDTzBGQlEwRXNhVUpCUVV0MVFpeG5Ra0ZCVEN4RFFVRnpRblpDTEUxQlFYUkNMRWRCUVN0Q05FTXNVVUZCTDBJN1FVRkRRVHRCUVVOQkxHbENRVUZMTEVsQlFVbDBReXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRWxCUVVselF5eFJRVUZ3UWl4RlFVRTRRblJETEVkQlFUbENMRVZCUVcxRE8wRkJReTlDTEc5Q1FVRkpjVU1zVlVGQlZYSkRMRU5CUVZZc1EwRkJTaXhGUVVGclFqdEJRVU5rTEhkQ1FVRkpTaXhoUVVGaFF5eFBRVUZxUWl4RlFVRXdRanRCUVVOMFFpdzBRa0ZCU1RCRExHRkJRV04yUXl4TlFVRk5MRU5CUVU0c1NVRkJWeXhMUVVGTGNVSXNUMEZCYkVNN1FVRkRRU3cyUWtGQlMwb3NaMEpCUVV3c1EwRkJjMEpxUWl4RFFVRjBRaXhKUVVFeVFpeExRVUZMZDBNc2EwSkJRVXdzUTBGQmQwSklMRlZCUVZWeVF5eERRVUZXTEVOQlFYaENMRVZCUVhORExFdEJRWFJETEVWQlFUWkRkVU1zVlVGQk4wTXNSVUZCZVVRc1MwRkJTM1JDTEdkQ1FVRTVSQ3hGUVVGblJpeExRVUZMYWtJc1EwRkJja1lzUTBGQk0wSTdRVUZEU0N4eFFrRklSQ3hOUVVsTE8wRkJRMFFzTmtKQlFVdHBRaXhuUWtGQlRDeERRVUZ6UW1wQ0xFTkJRWFJDTEVsQlFUSkNMRXRCUVV0M1F5eHJRa0ZCVEN4RFFVRjNRa2dzVlVGQlZYSkRMRU5CUVZZc1EwRkJlRUlzUlVGQmMwTXNTMEZCZEVNc1EwRkJNMEk3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEUkN4cFFrRkJTMnRDTEdkQ1FVRk1MRWRCUVhkQ2IwSXNWMEZCVnl4RFFVRllMRWRCUVdVc1MwRkJTM0pDTEdkQ1FVRk1MRU5CUVhOQ0xFTkJRWFJDTEVOQlFXWXNSMEZCTUVNc1JVRkJiRVU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMGdzVTBGNFFrUXNUVUY1UWtzN1FVRkRSQ3hwUWtGQlMwRXNaMEpCUVV3c1EwRkJjMEoyUWl4TlFVRjBRaXhIUVVFclFpeERRVUV2UWp0QlFVTkJMR2RDUVVGSlJTeGhRVUZoUXl4UFFVRnFRaXhGUVVFd1FqdEJRVU4wUWl4eFFrRkJTM0ZDTEdkQ1FVRk1MRWRCUVhkQ1owSXNWVUZCVlN4TFFVRkxUU3hyUWtGQlRDeERRVUYzUWs0c1QwRkJlRUlzUlVGQmFVTXNTMEZCYWtNc1JVRkJkME1zUzBGQlMySXNUMEZCTjBNc1JVRkJjMFFzUzBGQlMwb3NaMEpCUVRORUxFVkJRVFpGTEVkQlFUZEZMRU5CUVZZc1IwRkJPRVlzU1VGQmRFZzdRVUZEU0N4aFFVWkVMRTFCUjBzN1FVRkRSQ3h4UWtGQlMwTXNaMEpCUVV3c1IwRkJkMEpuUWl4VlFVRlZMRXRCUVV0TkxHdENRVUZNTEVOQlFYZENUaXhQUVVGNFFpeEZRVUZwUXl4TFFVRnFReXhEUVVGV0xFZEJRVzlFTEVsQlFUVkZPMEZCUTBnN1FVRkRSQ3hwUWtGQlMycENMR2RDUVVGTUxFTkJRWE5DTEVOQlFYUkNMRWxCUVRKQ0xFdEJRVXRETEdkQ1FVRm9RenM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTklPenRCUVVWRU8wRkJRMEZSTEhGQ1FVRmhMRWxCUVdJN08wRkJSVUVzWlVGQlR5eExRVUZMVWl4blFrRkJXanRCUVVOSUxFdEJPVU5FT3p0QlFXZEVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJNVUlzWTBGQlZXZEVMR3RDUVVGV0xFZEJRU3RDTEZWQlFWVkRMRlZCUVZZc1JVRkJjMEp1UkN4WlFVRjBRaXhGUVVGdlEzVkNMRTFCUVhCRExFVkJRVFJETmtJc1MwRkJOVU1zUlVGQmJVUndReXhSUVVGdVJDeEZRVUUyUkR0QlFVTjRSaXhaUVVGSlJpeEpRVUZLTzBGQlEwRXNXVUZCU1VRc1RVRkJUU3hKUVVGV0xFTkJSbmRHTEVOQlJYQkZPMEZCUTNCQ0xGbEJRVWwzUXl4UlFVRlJMRWxCUVZvN1FVRkRRU3haUVVGSlF5eFBRVUZQU0N4WFFVRlhTU3hSUVVGMFFqdEJRVU5CTEZsQlFVbEVMRWxCUVVvc1JVRkJWVHM3UVVGRlRqczdRVUZGUVVRc2IwSkJRVkVzUzBGQlMzaENMRmxCUVV3c1EwRkJhMEo1UWl4SlFVRnNRaXhGUVVGM1FrZ3NWVUZCZUVJc1JVRkJiME5ETEV0QlFYQkRMRVZCUVRKRGNFTXNVVUZCTTBNc1EwRkJVanRCUVVOQkxHZENRVUZKTEVOQlFVTnhReXhMUVVGTUxFVkJRVms3UVVGRFVpeHZRa0ZCU1Vjc1kwRkJZeXhMUVVGTE0wSXNXVUZCVEN4TFFVRnpRblJETEVkQlFVZHJSU3hoUVVFelF6dEJRVU5CTEc5Q1FVRkpSQ3hYUVVGS0xFVkJRV2xDTzBGQlEySkZMSFZDUVVGSFppeFhRVUZJTEVOQlFXVm5RaXhyUWtGQlppeERRVUZyUTB3c1NVRkJiRU03UVVGRFNEdEJRVU5FTEhWQ1FVRlBMRWxCUVZBN1FVRkRTRHM3UVVGRlJDeG5Ra0ZCU1N4RFFVRkRhRVFzWVVGQllVTXNUMEZCWkN4TFFVRXdRbWRDTEUxQlFUbENMRVZCUVhORE8wRkJRMnhETzBGQlEwRXNiMEpCUVVzc1JVRkJSVUVzYTBKQlFXdENPRUlzUzBGQmNFSXNRMEZCVEN4RlFVRnJRenRCUVVNNVFrc3NkVUpCUVVkRkxFMUJRVWdzUTBGQlZTeEpRVUZXTEVWQlFXZENja1VzUjBGQlIzTkZMRmxCUVVnc1EwRkJaMEowUXl4TlFVRm9RaXhEUVVGb1FpeEZRVUY1UXpoQ0xFdEJRWHBETzBGQlEwZzdRVUZEUkhoRExITkNRVUZOVlN4TlFVRk9PMEZCUTBnc1lVRk9SQ3hOUVU5TE8wRkJRMFE3UVVGRFFWWXNjMEpCUVUwc1NVRkJTWGRETEV0QlFVb3NSVUZCVGp0QlFVTklPenRCUVVWRUxHZENRVUZKZUVNc1NVRkJTV2xFTEZsQlFWSXNSVUZCYzBJN1FVRkRiRUpxUkN4dlFrRkJTV2xFTEZsQlFVb3NRMEZCYVVKWUxGZEJRVmRaTEU5QlFUVkNMRVZCUVhGRExFbEJRWEpETzBGQlEwRXNkVUpCUVU5c1JDeEhRVUZRTzBGQlEwZzdRVUZEUkN4blFrRkJTVFpETEVkQlFVZE5MRXRCUVVnc1EwRkJVME1zVlVGQlZDeERRVUZ2UWxvc1MwRkJjRUlzUTBGQlNpeEZRVUZuUXp0QlFVTTFRbUVzYzBOQlFYTkNMRWxCUVhSQ0xFVkJRVFJDY2tRc1IwRkJOVUlzUlVGQmFVTnpReXhWUVVGcVF5eEZRVUUyUTBVc1MwRkJOME1zUlVGQmIwUTVRaXhOUVVGd1JEdEJRVU5JTEdGQlJrUXNUVUZIU3p0QlFVTkVMSEZDUVVGTE5FTXNkVUpCUVV3c1EwRkJOa0owUkN4SFFVRTNRaXhGUVVGclEzTkRMRlZCUVd4RExFVkJRVGhEUlN4TFFVRTVRenRCUVVOSU8wRkJRMG9zVTBGdVEwUXNUVUZ2UTBzc1NVRkJTeXhEUVVGRFVpeE5RVUZOUXl4UFFVRk9MRU5CUVdOTExGVkJRV1FzUTBGQlRpeEZRVUZyUXpzN1FVRkZia003TzBGQlJVRjBReXhyUWtGQlR5eERRVUZEVUN4aFFVRmhReXhQUVVGa0xFdEJRVEJDWjBJc1RVRkJNMElzU1VGQmMwTXNSVUZCTlVNN1FVRkRRU3hwUWtGQlN6WkRMREpDUVVGTUxFTkJRV2xEZGtRc1IwRkJha01zUlVGQmMwTnpReXhWUVVGMFF6dEJRVU5JTEZOQlRra3NUVUZQUVRzN1FVRkZSRHM3UVVGRlFTeG5Ra0ZCU1N4RFFVRkROME1zWVVGQllVTXNUMEZCWkN4TFFVRXdRbWRDTEUxQlFUbENMRVZCUVhORE8wRkJRMnhEUVN4MVFrRkJUMjVDTEUxQlFWQXNSMEZCWjBJclF5eFhRVUZYTDBNc1RVRkJNMEk3UVVGRFFWTXNjMEpCUVUxVkxFMUJRVTQ3UVVGRFNDeGhRVWhFTEUxQlNVczdRVUZEUkZZc2MwSkJRVTBzU1VGQlNXZERMRXRCUVVvc1EwRkJWVTBzVjBGQlZ5OURMRTFCUVhKQ0xFTkJRVTQ3UVVGRFNEczdRVUZGUkN4cFFrRkJTeXhKUVVGSlRTeEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWw1UXl4WFFVRlhMME1zVFVGQkwwSXNSVUZCZFVOTkxFZEJRWFpETEVWQlFUUkRPMEZCUTNoRFNTeDFRa0ZCVDNGRExGZEJRVmQ2UXl4RFFVRllMRU5CUVZBN1FVRkRRU3h2UWtGQlNTeFJRVUZQU1N4SlFVRlFMSGxEUVVGUFFTeEpRVUZRTEU5QlFXZENMRkZCUVdoQ0xFbEJRVFJDUVN4SlFVRm9ReXhGUVVGelF6dEJRVU5zUXl4M1FrRkJTVklzWVVGQllVTXNUMEZCYWtJc1JVRkJNRUk3UVVGRGRFSXNOa0pCUVVzNFJDeHZRa0ZCVEN4RFFVRXdRbmhFTEVkQlFURkNMRVZCUVN0Q1F5eEpRVUV2UWl4RlFVRnhReXhMUVVGTFNpeERRVUV4UXl4RlFVRTJRMkVzVlVGQlZWWXNSMEZCZGtRc1JVRkJORVJpTEZsQlFUVkVPMEZCUTBnc2NVSkJSa1FzVFVGSFN6dEJRVU5FTERaQ1FVRkxjVVVzYjBKQlFVd3NRMEZCTUVKNFJDeEhRVUV4UWl4RlFVRXJRa01zU1VGQkwwSXNSVUZCY1VNc1MwRkJTMG9zUTBGQk1VTXNSVUZCTmtNc1NVRkJOME1zUlVGQmJVUldMRmxCUVc1RU8wRkJRMGc3UVVGRFNpeHBRa0ZRUkN4TlFWRkxPMEZCUTBSaExIZENRVUZKU0N4RFFVRktMRWxCUVZOSkxFbEJRVlE3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEUkN4bFFVRlBSQ3hIUVVGUU8wRkJRMGdzUzBFMVJVUTdPMEZCT0VWQk8wRkJRMEZZTEdOQlFWVnRSU3h2UWtGQlZpeEhRVUZwUXl4VlFVRlZlRVFzUjBGQlZpeEZRVUZsSzBJc1QwRkJaaXhGUVVGM1FqVkNMRkZCUVhoQ0xFVkJRV3REVHl4TlFVRnNReXhGUVVFd1EzWkNMRmxCUVRGRExFVkJRWGRFTzBGQlEzSkdMRmxCUVVrd1F5eExRVUZMUlN4UlFVRlJNRUlzVFVGQmFrSTdRVUZEUVN4WlFVRkpOVUlzVDBGQlR6WkNMRk5CUVZnc1JVRkJjMEk3UVVGRGJFSXNaMEpCUVVrelJDeFBRVUZQWjBNc1VVRkJVVFJDTEZGQlFXNUNPMEZCUTBFc1owSkJRVWsxUkN4SlFVRktMRVZCUVZVN1FVRkRUanRCUVVOSk8wRkJRMEU3UVVGRFFUdEJRVU5LTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h4UWtGQlMxVXNUVUZCVEN4RFFVRlpVQ3hKUVVGYUxFTkJRV2xDUml4SFFVRnFRaXhGUVVGelFrY3NVVUZCZEVJc1JVRkJaME5LTEVsQlFXaERMRVZCUVhORFdpeFpRVUYwUXp0QlFVTklMR0ZCV0VRc1RVRlpTenRCUVVORUxHOUNRVUZKVFN4aFFVRmhReXhQUVVGcVFpeEZRVUV3UWp0QlFVTjBRazBzZDBKQlFVbEhMRkZCUVVvc1NVRkJaMElzUzBGQlMydERMR3RDUVVGTUxFTkJRWGRDVGl4UFFVRjRRaXhGUVVGcFF6VkRMRmxCUVdwRExFVkJRU3REZFVJc1ZVRkJWVUVzVDBGQlQxQXNVVUZCVUN4RFFVRjZSQ3hGUVVFeVJVZ3NSMEZCTTBVc1JVRkJaMFpITEZGQlFXaEdMRU5CUVdoQ08wRkJRMGdzYVVKQlJrUXNUVUZIU3p0QlFVTkVTQ3gzUWtGQlNVY3NVVUZCU2l4SlFVRm5RaXhMUVVGTGEwTXNhMEpCUVV3c1EwRkJkMEpPTEU5QlFYaENMRVZCUVdsRE5VTXNXVUZCYWtNc1EwRkJhRUk3UVVGRFNEdEJRVU5LTzBGQlEwb3NVMEYwUWtRc1RVRjFRa3M3UVVGRFJDeG5Ra0ZCU1hsRkxFOUJRVThzUzBGQlN6bERMR2RDUVVGTUxFTkJRWE5DWlN4RlFVRjBRaXhEUVVGWU8wRkJRMEVzWjBKQlFVa3JRaXhKUVVGS0xFVkJRVlU3UVVGRFRqVkVMRzlDUVVGSlJ5eFJRVUZLTEVsQlFXZENlVVFzU1VGQmFFSTdRVUZEU0N4aFFVWkVMRTFCUjBzN1FVRkRSQ3h4UWtGQlMzaERMRTlCUVV3c1EwRkJZV3hDTEVsQlFXSXNRMEZCYTBJeVFpeEZRVUZzUWp0QlFVTkJMSEZDUVVGTFVpeFZRVUZNTEVOQlFXZENia0lzU1VGQmFFSXNRMEZCY1VKR0xFZEJRWEpDTzBGQlEwRXNjVUpCUVV0elFpeFhRVUZNTEVOQlFXbENjRUlzU1VGQmFrSXNRMEZCYzBKRExGRkJRWFJDTzBGQlEwZzdRVUZEU2p0QlFVTktMRXRCY0VORU96dEJRWE5EUVdRc1kwRkJWV3RGTERKQ1FVRldMRWRCUVhkRExGVkJRVlZOTEZGQlFWWXNSVUZCYjBKMlFpeFZRVUZ3UWl4RlFVRm5RenRCUVVOd1JTeFpRVUZKWkN4UFFVRlBMRWxCUVZnN1FVRkRRU3hoUVVGTExFbEJRVWx5UWl4UlFVRlVMRWxCUVhGQ2JVTXNWVUZCY2tJc1JVRkJhVU03UVVGRE4wSXNaMEpCUVVsQkxGZEJRVmQzUWl4alFVRllMRU5CUVRCQ00wUXNVVUZCTVVJc1EwRkJTaXhGUVVGNVF6dEJRVU55UXl4dlFrRkJTVVlzVDBGQlQzRkRMRmRCUVZkdVF5eFJRVUZZTEVOQlFWZzdRVUZEUVN4dlFrRkJTU3hSUVVGUFJpeEpRVUZRTEhsRFFVRlBRU3hKUVVGUUxFOUJRV2RDTEZGQlFYQkNMRVZCUVRoQ08wRkJRekZDTEhkQ1FVRkpSU3hoUVVGaExGVkJRV3BDTEVOQlFUSkNMSEZDUVVFelFpeEZRVUZyUkR0QlFVTTVRekJFTEhGRFFVRlRNVVFzVVVGQlZDeEpRVUZ4UWtZc1NVRkJja0k3UVVGRFNEdEJRVU5LTEdsQ1FVcEVMRTFCUzBzN1FVRkRSQ3gzUWtGQlNVRXNTVUZCU2l4RlFVRlZPMEZCUTA0c05FSkJRVWxTTEdGQlFXRkRMRTlCUVdwQ0xFVkJRVEJDTzBGQlEzUkNPRUlzYVVOQlFVdG5ReXh2UWtGQlRDeERRVUV3UWtzc1VVRkJNVUlzUlVGQmIwTTFSQ3hKUVVGd1F5eEZRVUV3UTBVc1VVRkJNVU1zUlVGQmIwUnhRaXhMUVVGTFRpeFBRVUZNTEVsQlFXZENNa01zVVVGQmNFVTdRVUZEU0N4NVFrRkdSQ3hOUVVkTE8wRkJRMFJ5UXl4cFEwRkJTMmRETEc5Q1FVRk1MRU5CUVRCQ1N5eFJRVUV4UWl4RlFVRnZRelZFTEVsQlFYQkRMRVZCUVRCRFJTeFJRVUV4UXp0QlFVTklPMEZCUTBvc2NVSkJVRVFzVFVGUlN6dEJRVU5FTUVRc2FVTkJRVk14UkN4UlFVRlVMRWxCUVhGQ0xFbEJRWEpDTzBGQlEwZzdRVUZEU2p0QlFVVktPMEZCUTBvN1FVRkRTaXhMUVRGQ1JEczdRVUUwUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRV1FzWTBGQlZXbEZMSFZDUVVGV0xFZEJRVzlETEZWQlFWVlBMRkZCUVZZc1JVRkJiMEoyUWl4VlFVRndRaXhGUVVGblEwVXNTMEZCYUVNc1JVRkJkVU03UVVGRGRrVXNXVUZCU1VFc1ZVRkJWVXNzUjBGQlIydENMRWxCUVdwQ0xFVkJRWFZDTzBGQlEyNUNSaXh4UWtGQlUwY3NRMEZCVkN4SFFVRmhNVUlzVjBGQlZ6QkNMRU5CUVZnc1NVRkJaMElzUTBGQk4wSTdRVUZEUVVnc2NVSkJRVk5KTEVOQlFWUXNSMEZCWVROQ0xGZEJRVmN5UWl4RFFVRllMRWxCUVdkQ0xFTkJRVGRDTzBGQlEwRTdRVUZEU0N4VFFVcEVMRTFCUzBzc1NVRkJTWHBDTEZWQlFWVkxMRWRCUVVkeFFpeEpRVUZxUWl4RlFVRjFRanRCUVVONFFrd3NjVUpCUVZOSExFTkJRVlFzUjBGQllURkNMRmRCUVZjd1FpeERRVUZZTEVsQlFXZENMRU5CUVRkQ08wRkJRMEZJTEhGQ1FVRlRTU3hEUVVGVUxFZEJRV0V6UWl4WFFVRlhNa0lzUTBGQldDeEpRVUZuUWl4RFFVRTNRanRCUVVOQlNpeHhRa0ZCVTAwc1EwRkJWQ3hIUVVGaE4wSXNWMEZCVnpaQ0xFTkJRVmdzU1VGQlowSXNRMEZCTjBJN1FVRkRRVHRCUVVOSUxGTkJURWtzVFVGTlFTeEpRVUZKTTBJc1ZVRkJWVXNzUjBGQlIzVkNMRXRCUVdwQ0xFVkJRWGRDTzBGQlEzcENVQ3h4UWtGQlUxRXNRMEZCVkN4SFFVRmhMMElzVjBGQlZ5dENMRU5CUVZnc1NVRkJaMElzUTBGQk4wSTdRVUZEUVZJc2NVSkJRVk5UTEVOQlFWUXNSMEZCWVdoRExGZEJRVmRuUXl4RFFVRllMRWxCUVdkQ0xFTkJRVGRDTzBGQlEwRlVMSEZDUVVGVFZTeERRVUZVTEVkQlFXRnFReXhYUVVGWGFVTXNRMEZCV0N4SlFVRm5RaXhEUVVFM1FqdEJRVU5CTEdkQ1FVRkpReXhKUVVGSmJFTXNWMEZCVjJ0RExFTkJRVzVDTzBGQlEwRllMSEZDUVVGVFZ5eERRVUZVTEVkQlFXTkJMRTFCUVUxa0xGTkJRVTRzUjBGQmEwSXNSMEZCYkVJc1IwRkJkMEpqTEVOQlFYUkRPMEZCUTBFN1FVRkRTQ3hUUVZCSkxFMUJVVUVzU1VGQlNXaERMRlZCUVZWTExFZEJRVWMwUWl4SlFVRnFRaXhGUVVGMVFqdEJRVU40UWxvc2NVSkJRVk5oTEV0QlFWUXNSMEZCYVVKd1F5eFhRVUZYYjBNc1MwRkJXQ3hKUVVGdlFpeERRVUZ5UXp0QlFVTkJZaXh4UWtGQlUyTXNUVUZCVkN4SFFVRnJRbkpETEZkQlFWZHhReXhOUVVGWUxFbEJRWEZDTEVOQlFYWkRPMEZCUTBFN1FVRkRTRHM3UVVGRlJDeFpRVUZKUXl4VlFVRlZhRWNzUzBGQlMybEhMRk5CUVV3c1IwRkJhVUlzVTBGQkwwSTdRVUZEUVN4WlFVRkpReXhSUVVGUmJFY3NTMEZCUzIxSExHRkJRVXdzUTBGQmJVSjJReXhMUVVGdVFpeERRVUZhTzBGQlEwRXNXVUZCU1hkRExHMUNRVUZ0UW5oRExFMUJRVTE1UXl4VFFVRk9MRWxCUTBGRExFOUJRVTlETEVsQlFWQXNRMEZCV1hSQ0xGRkJRVm9zUTBGRWRrSXNRMEUxUW5WRkxFTkJOa0owUWp0QlFVTnFSQ3hoUVVGTExFbEJRVWxvUlN4SlFVRkpMRU5CUVdJc1JVRkJaMEpCTEVsQlFVbHRSaXhwUWtGQmFVSjZSaXhOUVVGeVF5eEZRVUUyUTAwc1IwRkJOME1zUlVGQmEwUTdRVUZET1VNc1owSkJRVWxOTEZkQlFWYzJSU3hwUWtGQmFVSnVSaXhEUVVGcVFpeERRVUZtTzBGQlEwRXNaMEpCUVVsMVJpeFJRVUZST1VNc1YwRkJWMjVETEZGQlFWZ3NRMEZCV2p0QlFVTkJMR2RDUVVGSmFVWXNWVUZCVlRGQ0xGTkJRVllzU1VGQmRVSXNRMEZCUTNCQ0xGZEJRVmQzUWl4alFVRllMRU5CUVRCQ00wUXNVVUZCTVVJc1EwRkJOVUlzUlVGQmFVVTdRVUZETjBRN1FVRkRRVHRCUVVOQk8wRkJRMEZwUml4M1FrRkJVWFpITEZGQlFWRjNSeXhWUVVGU0xFTkJRVzFDVUN4TlFVRk5NMFVzVjBGQlYzbEZMRTlCUVdwQ0xFTkJRVzVDTEVOQlFWSTdRVUZEU0RzN1FVRkZSQ3huUWtGQlNTeFJRVUZQVVN4TFFVRlFMSGxEUVVGUFFTeExRVUZRTEU5QlFXbENMRkZCUVhKQ0xFVkJRU3RDTzBGQlF6TkNka0lzZVVKQlFWTXhSQ3hSUVVGVUxFbEJRWEZDYVVZc1MwRkJja0k3UVVGRFNDeGhRVVpFTEUxQlIwc3NTVUZCU1VFc1MwRkJTaXhGUVVGWE8wRkJRMW9zYjBKQlFVa3pSaXhoUVVGaFF5eFBRVUZxUWl4RlFVRXdRanRCUVVOMFFpeDVRa0ZCU3poRUxHOUNRVUZNTEVOQlFUQkNTeXhSUVVFeFFpeEZRVUZ2UTNWQ0xFdEJRWEJETEVWQlFUSkRha1lzVVVGQk0wTXNSVUZCY1VRc1MwRkJTMlVzVDBGQlRDeEpRVUZuUWpKRExGRkJRWEpGTzBGQlEwZ3NhVUpCUmtRc1RVRkhTenRCUVVORUxIbENRVUZMVEN4dlFrRkJUQ3hEUVVFd1Frc3NVVUZCTVVJc1JVRkJiME4xUWl4TFFVRndReXhGUVVFeVEycEdMRkZCUVRORE8wRkJRMGc3UVVGRFNpeGhRVkJKTEUxQlVVRTdRVUZEUkRCRUxIbENRVUZUTVVRc1VVRkJWQ3hKUVVGeFFpeEpRVUZ5UWp0QlFVTklPMEZCUTBvN1FVRkRTaXhMUVhaRVJEczdRVUY1UkVFc1lVRkJVMjFHTEc5Q1FVRlVMRU5CUVN0Q1F5eFBRVUV2UWl4RlFVRjNRME1zV1VGQmVFTXNSVUZCYzBSRExHRkJRWFJFTEVWQlFYRkZReXh2UWtGQmNrVXNSVUZCTWtaRExIVkNRVUV6Uml4RlFVRnZTRU1zVjBGQmNFZ3NSVUZCYVVrN1FVRkROMGdzV1VGQlNVb3NkMEpCUVhkQ00wTXNSMEZCUjJkRUxGTkJRUzlDTEVWQlFUQkRPMEZCUTNSRE8wRkJRMEVzWjBKQlFVa3NRMEZCUTBZc2RVSkJRVXdzUlVGQk9FSTdRVUZETVVKS0xIZENRVUZSY2tZc1NVRkJVaXhEUVVGaExGZEJRV0k3UVVGRFNEdEJRVU5FTEdkQ1FVRkpORVlzVjBGQlYzQklMRWRCUVVkelJTeFpRVUZJTEVOQlFXZENkME1zV1VGQmFFSXNRMEZCWmp0QlFVTkJSQ3h2UWtGQlVYSkdMRWxCUVZJc2FVTkJRVEpEZFVZc1lVRkJNME1zWTBGQmFVVkxMRkZCUVdwRk8wRkJRMEVzWjBKQlFVa3NRMEZCUTBnc2RVSkJRVXdzUlVGQk9FSTdRVUZETVVKS0xIZENRVUZSY2tZc1NVRkJVaXhEUVVGaExGbEJRVmwxUml4aFFVRmFMRWRCUVRSQ0xGRkJRWHBETzBGQlEwZzdRVUZEU2l4VFFWWkVMRTFCVjBzN1FVRkRSRVlzYjBKQlFWRnlSaXhKUVVGU0xFTkJRV0VzVjBGQllqdEJRVU5KY1VZc2IwSkJRVkZ5Uml4SlFVRlNMRU5CUVdFc2JVTkJRMGwzUml4dlFrRkVTaXhKUVVWTmFrY3NZVUZCWVVNc1QwRkJaQ3hIUVVGNVFpeFJRVUY2UWl4SFFVRnZReXhSUVVaNlF5eEpRVWRKTEVOQlFVTXNRMEZCUTJ0SExGZEJTRTRzUjBGSlFTeEpRVXBpTzBGQlMwcE1MRzlDUVVGUmNrWXNTVUZCVWl4RFFVRmhMRmxCUVZsMVJpeGhRVUZhTEVkQlFUUkNMRkZCUVhwRE8wRkJRMGc3UVVGRFNqczdRVUZGUkN4UlFVRkpUU3h4UWtGQmNVSkRMR2xDUVVGcFFpeFZRVUZWZUVVc1NVRkJWaXhGUVVGblFtZENMRXRCUVdoQ0xFVkJRWFZDTzBGQlF6ZEVMRmxCUVVsNVJDeFBRVUZQY2tnc1MwRkJTMmxITEZOQlFVd3NSMEZCYVVJc1RVRkJOVUk3UVVGRFFTeFpRVUZKY1VJc1kwRkJZM1JJTEV0QlFVdHBSeXhUUVVGTUxFZEJRV2xDTEZsQlFXNURPMEZCUTBFc1dVRkJTVVFzVlVGQlZXaEhMRXRCUVV0cFJ5eFRRVUZNTEVkQlFXbENMRk5CUVM5Q08wRkJRMEVzV1VGQlNYTkNMRzlDUVVGdlFuWklMRXRCUVV0cFJ5eFRRVUZNTEVkQlFXbENMR2RDUVVGNlF6dEJRVU5CTEZsQlFVbDFRaXg1UWtGQmVVSjRTQ3hMUVVGTGFVY3NVMEZCVEN4SFFVRnBRaXh6UWtGQk9VTTdRVUZEUVN4WlFVRkpReXhSUVVGUmJFY3NTMEZCUzIxSExHRkJRVXdzUTBGQmJVSjJReXhMUVVGdVFpeERRVUZhT3p0QlFVVkJMRmxCUVVrMlJDeFJRVUZSTjBRc1RVRkJUVGhFTEZWQlFXeENPMEZCUTBFN1FVRkRRU3haUVVGSlppeFZRVUZWTEVOQlExWXNWMEZFVlN4RFFVRmtPMEZCUjBFc1dVRkJTV2RDTEZkQlFWZDZTQ3hMUVVGTE1FZ3NhMEpCUVV3c1EwRkJkMEpETEVsQlFYaENMRU5CUVRaQ0wwZ3NSMEZCUjJkSkxGZEJRVWdzUTBGQlpXeEZMRXRCUVdZc1EwRkJOMElzUTBGQlpqdEJRVU5CTzBGQlEwRXNZVUZCU3l4SlFVRkpiVVVzU1VGQlNTeERRVUZpTEVWQlFXZENRU3hKUVVGSlRpeE5RVUZOT1Vjc1RVRkJNVUlzUlVGQmEwTnZTQ3hIUVVGc1F5eEZRVUYxUXp0QlFVTnVReXhuUWtGQlNYaEhMRmRCUVZkclJ5eE5RVUZOVFN4RFFVRk9MRU5CUVdZN1FVRkRRU3huUWtGQlNTeERRVUZEUXl4alFVRmxia2dzWVVGQllTdENMRXRCUVV0TUxHbENRVUZzUXl4TFFVRjVSREpFTEUxQlFVMHpSU3hYUVVGWEswWXNWMEZCYWtJc1EwRkJOMFFzUlVGQk5FWTdRVUZEZUVZc2VVSkJSSGRHTEVOQlF6VkZPMEZCUTJZN08wRkJSVVFzWjBKQlFVbFVMR0ZCUVVvc1JVRkJiVUpETEc5Q1FVRnVRanRCUVVOQkxHZENRVUZKTjBjc1VVRkJVV2RKTEdGQlFWSXNRMEZCYzBKS0xFbEJRWFJDTEVOQlFUSkNkRWNzVVVGQk0wSXNRMEZCU2l4RlFVRXdRenRCUVVOMFEzVkdMSFZEUVVGMVFpeE5RVUZOZGtZc1VVRkJUaXhIUVVGcFFpeEhRVUY0UXp0QlFVTkJjMFlzWjBOQlFXZENMRTFCUVUxMFJpeFJRVUYwUWp0QlFVTklMR0ZCU0VRc1RVRkpTenRCUVVORWRVWXNkVU5CUVhWQ04wY3NVVUZCVVdsSkxGZEJRVklzUTBGQmIwSXpSeXhSUVVGd1FpeERRVUYyUWp0QlFVTkJjMFlzWjBOQlFXZENMRTFCUVUxRExHOUNRVUZPTEVkQlFUWkNMRWRCUVRkRE8wRkJRMGc3TzBGQlJVUXNaMEpCUVVseFFpeG5Ra0ZCWjBKMFFpeGhRVUZ3UWp0QlFVTkJMR2RDUVVGSldDeE5RVUZOTTBVc1YwRkJWMmxITEhOQ1FVRnFRaXhEUVVGS0xFVkJRVGhETzBGQlF6RkRMRzlDUVVGSldTeHBRa0ZCYVVKc1F5eE5RVUZOTTBVc1YwRkJWMmxITEhOQ1FVRnFRaXhEUVVGeVFqdEJRVU5CTEc5Q1FVRkpka2dzVVVGQlVXZEpMR0ZCUVZJc1EwRkJjMEpLTEVsQlFYUkNMRU5CUVRKQ1R5eGpRVUV6UWl4RFFVRktMRVZCUVdkRU8wRkJRelZEUkN4dlEwRkJaMElzVFVGQlRVTXNZMEZCZEVJN1FVRkRTQ3hwUWtGR1JDeE5RVWRMTzBGQlEwUkVMRzlEUVVGblFpeE5RVUZOYkVrc1VVRkJVV2xKTEZkQlFWSXNRMEZCYjBKRkxHTkJRWEJDTEVOQlFVNHNSMEZCTkVNc1IwRkJOVVE3UVVGRFNEdEJRVU5LT3p0QlFVVkVla0lzYjBKQlFWRnlSaXhKUVVGU0xFTkJRV0VzVjBGQlZ6WkhMR0ZCUVZnc1IwRkJNa0lzUjBGQmVFTTdRVUZEUVhoQ0xHOUNRVUZSY2tZc1NVRkJVaXhwUWtGQk1FSXJSeXhWUVVGVlF5eFZRVUZXTEVkQlFYVkNMRkZCUVhaQ0xFZEJRV3RETEUxQlFUVkVPenRCUVVWQkxHZENRVUZKZEVJc1kwRkJZMlFzVFVGQlRUTkZMRmRCUVZkblJ5eHBRa0ZCYWtJc1EwRkJiRUk3UVVGRFFUdEJRVU5CTEdkQ1FVRkpXQ3hsUVVGbE0wY3NVVUZCVVhkSExGVkJRVklzUTBGQmJVSlFMRTFCUVUwelJTeFhRVUZYZVVVc1QwRkJha0lzUTBGQmJrSXNRMEZCYmtJN1FVRkRRU3huUWtGQlNUSkNMRkZCUVVvc1JVRkJZenRCUVVOV0xHOUNRVUZKV1N4bFFVRktPMEZCUTBFc2IwSkJRVWxETEZkQlFWZDBReXhOUVVGTk0wVXNWMEZCVnpoR0xFbEJRV3BDTEVOQlFXWTdRVUZEUVN4dlFrRkJTVlFzYVVKQlFXbENPVUlzVTBGQmFrSXNTVUZCT0VJd1JDeFJRVUZzUXl4RlFVRTBRenRCUVVONFEwUXNjME5CUVd0Q1F5eGhRVUZoZGtVc1IwRkJSM2RGTEUxQlFXaENMRWxCUTBGRUxHRkJRV0YyUlN4SFFVRkhlVVVzVDBGRWFFSXNTVUZGUVVZc1lVRkJZWFpGTEVkQlFVY3dSU3hMUVVab1FpeEpRVWRCU0N4aFFVRmhka1VzUjBGQlJ6SkZMRTlCU0d4RE8wRkJTVWdzYVVKQlRFUXNUVUZOU3p0QlFVTkVMSGRDUVVGSlF5eHhRa0ZCY1VKcVF5eFpRVUZ5UWl4NVEwRkJjVUpCTEZsQlFYSkNMRU5CUVVvN1FVRkRRVEpDTEhORFFVRnRRazBzWjBKQlFXZENMRkZCUVdoQ0xFbEJRVFJDTEVOQlFVTTNRaXhYUVVFNVFpeEpRVU5CTmtJc1owSkJRV2RDTEZGQlJHaENMRWxCUlVGQkxHZENRVUZuUWl4VFFVWnNRenRCUVVkSU96dEJRVVZFTEc5Q1FVRkpUaXhsUVVGS0xFVkJRWEZDTzBGQlEycENOVUlzTkVKQlFWRnlSaXhKUVVGU0xFOUJRV2xDZFVZc1lVRkJha0k3UVVGRFNDeHBRa0ZHUkN4TlFVZExPMEZCUTBSSUxIbERRVUZ4UWtNc1QwRkJja0lzUlVGQk9FSkRMRmxCUVRsQ0xFVkJRVFJEUXl4aFFVRTFReXhGUVVFeVJFTXNiMEpCUVRORUxFVkJRV2xHTEVsQlFXcEdMRVZCUVhWR1JTeFhRVUYyUmp0QlFVTklPMEZCUTBvc1lVRjBRa1FzVFVGMVFrczdRVUZEUkV3c2QwSkJRVkZ5Uml4SlFVRlNMRU5CUVdFc1owSkJRV0VyUnl4VlFVRlZReXhWUVVGV0xFZEJRWFZDTEZGQlFYWkNMRWRCUVd0RExFMUJRUzlETEhOQ1FVTkpMRWRCUkVvc1IwRkRWWHBDTEdGQlJGWXNSMEZETUVJc1VVRkVNVUlzUjBGRlFTeFJRVVppTzBGQlIwRklMSEZEUVVGeFFrTXNUMEZCY2tJc1JVRkJPRUpETEZsQlFUbENMRVZCUVRSRFF5eGhRVUUxUXl4RlFVRXlSRU1zYjBKQlFUTkVMRVZCUVdsR0xFdEJRV3BHTEVWQlFYZEdSU3hYUVVGNFJqdEJRVU5CVEN4M1FrRkJVWEpHTEVsQlFWSXNRMEZCWVN4SFFVRmlPMEZCUTBnN1FVRkRSSEZHTEc5Q1FVRlJja1lzU1VGQlVpeERRVUZoTEVkQlFXSTdRVUZEU0R0QlFVTkVMRmxCUVVreVF5eEhRVUZIYmtVc1JVRkJTQ3hEUVVGTlowb3NZMEZCVGl4RFFVRnhRbXhHTEV0QlFYSkNMRVZCUVRSQ1N5eEhRVUZIT0VVc1UwRkJMMElzUzBGQk5rTTVSU3hIUVVGSGJrVXNSVUZCU0N4RFFVRk5aMG9zWTBGQlRpeERRVUZ4UW14R0xFdEJRWEpDTEVWQlFUUkNTeXhIUVVGSEswVXNVMEZCTDBJc1EwRkJha1FzUlVGQk5FWTdRVUZEZUVZc1owSkJRVWxvUWl4alFVRmxia2dzWVVGQllTdENMRXRCUVV0TUxHbENRVUZ5UXl4RlFVRjVSRHRCUVVOeVJDeHZRa0ZCU1RCSExIVkNRVUYxUW01S0xFZEJRVWRuU2l4alFVRklMRU5CUVd0Q2JFWXNTMEZCYkVJc1JVRkJlVUpMTEVkQlFVZHBSaXhKUVVFMVFpeERRVUV6UWp0QlFVTkJMRzlDUVVGSlJDeHZRa0ZCU2l4RlFVRXdRanRCUVVOMFFuUkRMRFJDUVVGUmNrWXNTVUZCVWl4RFFVRmhMSFZDUVVGaU8wRkJRMGc3UVVGRFNpeGhRVXhFTEUxQlRVczdRVUZEUkhGR0xIZENRVUZSY2tZc1NVRkJVaXhEUVVGaExIVkNRVUZpTzBGQlEwZzdRVUZEU2p0QlFVTkVMRmxCUVVsdFJ5eE5RVUZOUVN4TlFVRk5PVWNzVFVGQlRpeEhRVUZsTEVOQlFYSkNMRTFCUVRSQ0xHRkJRV2hETEVWQlFTdERPMEZCUXpORE8wRkJRMEZuUnl4dlFrRkJVWEpHTEVsQlFWSXNRMEZCWVN3NFEwRkJZanRCUVVOQk8wRkJRMEZ4Uml4dlFrRkJVWEpHTEVsQlFWSXNRMEZCWVN4cFJFRkJZanRCUVVOSU8wRkJRMFFzWlVGQlR6WklMRk5CUVZNc1IwRkJWQ3hGUVVGakxFZEJRV1FzUlVGQmJVSXNSMEZCYmtJc1JVRkJkMElzUjBGQmVFSXNSVUZCTmtJc1IwRkJOMElzUlVGQmEwTjRReXhSUVVGUmVVTXNTVUZCVWl4RFFVRmhMRVZCUVdJc1EwRkJiRU1zUTBGQlVEdEJRVU5JTEV0QmJFZDNRaXhIUVd0SGNrSXNWVUZCVlhoSExFbEJRVllzUlVGQlowSm5RaXhMUVVGb1FpeEZRVUYxUWp0QlFVTjJRaXhaUVVGSkswUXNWMEZCVjNwSUxFdEJRVXN3U0N4clFrRkJUQ3hEUVVGM1FrTXNTVUZCZUVJc1EwRkJOa0l2U0N4SFFVRkhaMGtzVjBGQlNDeERRVUZsYkVVc1MwRkJaaXhEUVVFM1FpeERRVUZtTzBGQlEwRXNXVUZCU1hsR0xHVkJRV1Z3Uml4SFFVRkhia1VzUlVGQlNDeERRVUZOWjBvc1kwRkJUaXhEUVVGeFFteEdMRXRCUVhKQ0xFVkJRVFJDU3l4SFFVRkhPRVVzVTBGQkwwSXNTMEZCTmtNNVJTeEhRVUZIYmtVc1JVRkJTQ3hEUVVGTlowb3NZMEZCVGl4RFFVRnhRbXhHTEV0QlFYSkNMRVZCUVRSQ1N5eEhRVUZISzBVc1UwRkJMMElzUTBGQmFFVTdRVUZEUVN4WlFVRkpUU3hwUWtGQlNqczdRVUZGUVN4WlFVRkpReXhqUVVGakxFVkJRV3hDTzBGQlEwRXNXVUZCU1VNc2IwSkJRVzlDUkN4WFFVRjRRanRCUVVOQkxGbEJRVWxGTEdkQ1FVRm5RaXhGUVVGd1FqdEJRVU5CTEZsQlFVbERMSE5DUVVGelFrUXNZVUZCTVVJN1FVRkRRU3haUVVGSlJTeHpRa0ZCYzBJc1JVRkJNVUk3UVVGRFFTeFpRVUZKUXl4NVFrRkJlVUlzUlVGQk4wSTdPMEZCUlVFc1UwRkJReXhaUVVGWk8wRkJRMVFzWjBKQlFVbHVReXhSUVVGUk4wUXNUVUZCVFRoRUxGVkJRV3hDTzBGQlEwRTBRaXhuUTBGQmIwSTNRaXhOUVVGTlFTeE5RVUZOT1Vjc1RVRkJUaXhIUVVGbExFTkJRWEpDTEUxQlFUUkNMR0ZCUVdoRU96dEJRVVZCTEdkQ1FVRkpkVVlzVVVGQlVXeEhMRXRCUVV0dFJ5eGhRVUZNTEVOQlFXMUNka01zUzBGQmJrSXNRMEZCV2p0QlFVTkJMR2RDUVVGSmVVUXNUMEZCVDNKSUxFdEJRVXRwUnl4VFFVRk1MRWRCUVdsQ0xFMUJRVFZDTzBGQlEwRXNaMEpCUVVsRUxGVkJRVlZvUnl4TFFVRkxhVWNzVTBGQlRDeEhRVUZwUWl4VFFVRXZRanRCUVVOQkxHZENRVUZKYzBJc2IwSkJRVzlDZGtnc1MwRkJTMmxITEZOQlFVd3NSMEZCYVVJc1owSkJRWHBETzBGQlEwRXNaMEpCUVVsMVFpeDVRa0ZCZVVKNFNDeExRVUZMYVVjc1UwRkJUQ3hIUVVGcFFpeHpRa0ZCT1VNN08wRkJSVUVzYVVKQlFVc3NTVUZCU1RoQ0xFbEJRVWtzUTBGQllpeEZRVUZuUWtFc1NVRkJTVTRzVFVGQlRUbEhMRTFCUVRGQ0xFVkJRV3REYjBnc1IwRkJiRU1zUlVGQmRVTTdRVUZEYmtNc2IwSkJRVWw0Unl4WFFVRlhhMGNzVFVGQlRVMHNRMEZCVGl4RFFVRm1PMEZCUTBFc2IwSkJRVWxMTEdsQ1FVRnBRamRITEZGQlFYSkNPMEZCUTBFc2IwSkJRVWt5UlN4TlFVRk5NMFVzVjBGQlYybEhMSE5DUVVGcVFpeERRVUZLTEVWQlFUaERPMEZCUXpGRFdTeHhRMEZCYVVKc1F5eE5RVUZOTTBVc1YwRkJWMmxITEhOQ1FVRnFRaXhEUVVGcVFqdEJRVU5JTzBGQlEwUXNiMEpCUVVsU0xHTkJRV05rTEUxQlFVMHpSU3hYUVVGWFowY3NhVUpCUVdwQ0xFTkJRV3hDTzBGQlEwRTdRVUZEUVN4dlFrRkJTVmdzWlVGQlpUTkhMRkZCUVZGM1J5eFZRVUZTTEVOQlFXMUNVQ3hOUVVGTk0wVXNWMEZCVjNsRkxFOUJRV3BDTEVOQlFXNUNMRU5CUVc1Q08wRkJRMEVzYjBKQlFVbDFReXhyUWtGQmEwSXNTMEZCZEVJN1FVRkRRU3h2UWtGQlNWb3NVVUZCU2l4RlFVRmpPMEZCUTFZc2QwSkJRVWxoTEZkQlFWZDBReXhOUVVGTk0wVXNWMEZCVnpoR0xFbEJRV3BDTEVOQlFXWTdRVUZEUVN4M1FrRkJTVlFzYVVKQlFXbENPVUlzVTBGQmFrSXNTVUZCT0VJd1JDeFJRVUZzUXl4RlFVRTBRenRCUVVONFEwUXNNRU5CUVd0Q1F5eGhRVUZoZGtVc1IwRkJSM2RGTEUxQlFXaENMRWxCUTBGRUxHRkJRV0YyUlN4SFFVRkhlVVVzVDBGRWFFSXNTVUZGUVVZc1lVRkJZWFpGTEVkQlFVY3dSU3hMUVVab1FpeEpRVWRCU0N4aFFVRmhka1VzUjBGQlJ6SkZMRTlCU0d4RE8wRkJTVWdzY1VKQlRFUXNUVUZOU3p0QlFVTkVMRFJDUVVGSlF5eHhRa0ZCY1VKcVF5eFpRVUZ5UWl4NVEwRkJjVUpCTEZsQlFYSkNMRU5CUVVvN1FVRkRRVEpDTERCRFFVRnRRazBzWjBKQlFXZENMRkZCUVdoQ0xFbEJRVFJDTEVOQlFVTTNRaXhYUVVFNVFpeEpRVU5CTmtJc1owSkJRV2RDTEZGQlJHaENMRWxCUlVGQkxHZENRVUZuUWl4VFFVWnNRenRCUVVkSU8wRkJRMG83UVVGRFJDeHZRa0ZCU1d4Q0xGbEJRVmxaTEdWQlFXaENMRVZCUVdsRE8wRkJRemRDTEhkQ1FVRkpTQ3h0UWtGQmJVSTNSeXhSUVVGdVFpeEpRVUVyUW1sSkxITkNRVUZ6UWtRc1YwRkJla1FzUlVGQmMwVTdRVUZEYkVWRExEUkRRVUZ2UWtRc1dVRkJXVTBzUzBGQldpeEZRVUZ3UWp0QlFVTklPMEZCUTBST0xHZERRVUZaYWtrc1NVRkJXaXhEUVVGcFFrTXNVVUZCYWtJN1FVRkRRU3gzUWtGQlNXbEpMSE5DUVVGelFrUXNWMEZCTVVJc1JVRkJkVU03UVVGRGJrTkRMREJEUVVGclFteEpMRWxCUVd4Q0xFTkJRWFZDT0Vjc1kwRkJka0k3UVVGRFNEdEJRVU5LTEdsQ1FWSkVMRTFCVTBzN1FVRkRSQ3gzUWtGQlNVRXNiVUpCUVcxQ04wY3NVVUZCYmtJc1NVRkJLMEp0U1N4M1FrRkJkMEpFTEdGQlFUTkVMRVZCUVRCRk8wRkJRM1JGUXl3NFEwRkJjMEpFTEdOQlFXTkpMRXRCUVdRc1JVRkJkRUk3UVVGRFNEdEJRVU5FU2l4clEwRkJZMjVKTEVsQlFXUXNRMEZCYlVKRExGRkJRVzVDTzBGQlEwRXNkMEpCUVVsdFNTeDNRa0ZCZDBKRUxHRkJRVFZDTEVWQlFUSkRPMEZCUTNaRFF5dzBRMEZCYjBKd1NTeEpRVUZ3UWl4RFFVRjVRamhITEdOQlFYcENPMEZCUTBnN1FVRkRSSFZDTEhkRFFVRnZRbkpKTEVsQlFYQkNMRU5CUVhsQ01FWXNWMEZCZWtJN1FVRkRRVFJETERKRFFVRjFRblJKTEVsQlFYWkNMRU5CUVRaQ2MwWXNkMEpCUVhkQ00wTXNSMEZCUjJkRUxGTkJRVFZDTEVsQlFUQkRUQ3hoUVVGaGEwUXNWMEZCYmtZN1FVRkRTRHRCUVVOS08wRkJRMG9zVTBGNFJFUTdPMEZCTUVSQkxHVkJRVThzVlVGQlZVTXNRMEZCVml4RlFVRmhReXhEUVVGaUxFVkJRV2RDUXl4RFFVRm9RaXhGUVVGdFFrTXNRMEZCYmtJc1JVRkJjMEpETEVOQlFYUkNMRVZCUVhsQ08wRkJRelZDTEdsQ1FVRkxMRWxCUVVsc1NpeEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWx6U1N4WlFVRlpOVWtzVFVGQmFFTXNSVUZCZDBNc1JVRkJSVTBzUTBGQk1VTXNSVUZCTmtNN1FVRkRla01zYjBKQlFVbEpMRkZCUVU4MFNTeEZRVUZGVkN4clFrRkJhMEoyU1N4RFFVRnNRaXhEUVVGR0xFTkJRVmc3UVVGRFFTeHZRa0ZCU1Vrc1ZVRkJVM2xFTEZOQlFXSXNSVUZCZDBJN1FVRkRjRUpyUml4elFrRkJSVlFzV1VGQldYUkpMRU5CUVZvc1EwRkJSaXhKUVVGdlFra3NTMEZCY0VJN1FVRkRTRHRCUVVOS08wRkJRMFFzYVVKQlFVc3NTVUZCU1Vvc1MwRkJTU3hEUVVGaUxFVkJRV2RDUVN4TFFVRkpkMGtzWTBGQll6bEpMRTFCUVd4RExFVkJRVEJETEVWQlFVVk5MRVZCUVRWRExFVkJRU3RETzBGQlF6TkRMRzlDUVVGSlRTeFhRVUZYYTBrc1kwRkJZM2hKTEVWQlFXUXNRMEZCWmp0QlFVTkJMRzlDUVVGSlNTeFBRVUZQTkVrc1JVRkJSVkFzYjBKQlFXOUNla2tzUlVGQmNFSXNRMEZCUml4RFFVRllPMEZCUTBFc2IwSkJRVWxKTEZOQlFWTjVSQ3hUUVVGaUxFVkJRWGRDTzBGQlEzQkNPMEZCUTBnN1FVRkRSQ3h2UWtGQlNTeERRVUZETmtNc1VVRkJSQ3hKUVVGaExGRkJRVTkwUnl4SlFVRlFMSGxEUVVGUFFTeEpRVUZRTEU5QlFXZENMRkZCUVdwRExFVkJRVEpETzBGQlEzWkRNa2tzYzBKQlFVVjZTU3hSUVVGR0xFbEJRV05HTEVsQlFXUTdRVUZEU0N4cFFrRkdSQ3hOUVVkTE8wRkJRMFE3UVVGRFFTeDNRa0ZCU1N0SkxHZENRVUZuUWxJc2RVSkJRWFZDTTBrc1JVRkJka0lzUTBGQmNFSTdRVUZEUVN4M1FrRkJTVzFLTEdGQlFVb3NSVUZCYlVJN1FVRkRaaXcwUWtGQlNYcERMRmxCUVZsMFJ5eEpRVUZvUWl4RlFVRnpRanRCUVVOc1FqQkpMRGhDUVVGRmNrWXNkVUpCUVVZc1EwRkJNRUp6Uml4RlFVRkZla2tzVVVGQlJpeERRVUV4UWl4RlFVRjFRMFlzU1VGQmRrTXNSVUZCTmtNclNTeGhRVUUzUXp0QlFVTklMSGxDUVVaRUxFMUJSMHM3UVVGRFJFb3NPRUpCUVVWNlNTeFJRVUZHTEVsQlFXTXNTVUZCWkR0QlFVTklPMEZCUTBvc2NVSkJVRVFzVFVGUlN6dEJRVU5FTERSQ1FVRkpSaXhKUVVGS0xFVkJRVlU3UVVGRFRqQkpMRGhDUVVGRmJrWXNiMEpCUVVZc1EwRkRTVzlHTEVOQlJFb3NSVUZGU1ROSkxFbEJSa29zUlVGSFNVVXNVVUZJU2l4RlFVbExWaXhoUVVGaFF5eFBRVUZrTEVkQlFUQkNjVW9zUzBGQlMwZ3NRMEZCTDBJc1IwRkJiME1zU1VGS2VFTXNSVUZMU1V3c2IwSkJRVzlDTVVrc1JVRkJjRUlzUTBGTVNqdEJRVTlJTEhsQ1FWSkVMRTFCVTBzN1FVRkRSQ3RKTERoQ1FVRkZla2tzVVVGQlJpeEpRVUZqTEVsQlFXUTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRTanRCUVVORUxHZENRVUZKT0Vnc1owSkJRV2RDV1N4RlFVRkZTU3hIUVVGMFFpeEZRVUV5UWp0QlFVTjJRa3dzYTBKQlFVVkxMRWRCUVVZc1IwRkJVVW9zUlVGQlJVa3NSMEZCVmp0QlFVTklPMEZCUTBRc1owSkJRVWxtTEdsQ1FVRktMRVZCUVhWQ08wRkJRMjVDTzBGQlEwRlZMR3RDUVVGRlRTeFhRVUZHTEVkQlFXZENReXhMUVVGTFF5eExRVUZNTEVOQlFWZEVMRXRCUVV0RkxGTkJRVXdzUTBGQlpWSXNRMEZCWml4RFFVRllMRU5CUVdoQ08wRkJRMEU3UVVGRFFVWXNhMEpCUVVWd1Jpd3lRa0ZCUml4RFFVRTRRbkZHTEVWQlFVVk5MRmRCUVdoRExFVkJRVFpEVEN4RFFVRTNRenRCUVVOSU8wRkJRMG9zVTBGd1JFUTdRVUZ4UkVnc1MwRTNUa1E3TzBGQkswNUJMR0ZCUVZOVExHdENRVUZVTEVOQlFUWkNPVWdzU1VGQk4wSXNSVUZCYlVOakxGVkJRVzVETEVWQlFTdERkRU1zUjBGQkwwTXNSVUZCYjBRN1FVRkRhRVFzV1VGQlNVUXNUMEZCVDNWRExGZEJRVmNzVDBGQldDeExRVUYxUWtFc1YwRkJWeXhQUVVGWUxFVkJRVzlDY1VJc1VVRkJkRVE3UVVGRFFTeFpRVUZKTlVRc1NVRkJTaXhGUVVGVk8wRkJRMDRzWjBKQlFVbDNTaXhQUVVGUEwwZ3NTMEZCUzJZc1RVRkJUQ3hEUVVGWmVrSXNVVUZCV2l4RFFVRnhRazhzVFVGQmNrSXNSMEZCT0VJc1EwRkJla003UVVGRFFTeG5Ra0ZCU1dsRExFdEJRVXRtTEUxQlFVd3NRMEZCV1hwQ0xGRkJRVm9zUTBGQmNVSjFTeXhKUVVGeVFpeE5RVUVyUW5oS0xFbEJRUzlDTEVsQlEwRjVRaXhMUVVGTFppeE5RVUZNTEVOQlFWbDRRaXhYUVVGYUxFTkJRWGRDYzBzc1NVRkJlRUlzVFVGQmEwTjJTaXhIUVVSc1F5eEpRVVZCZDBJc1MwRkJTMllzVFVGQlRDeERRVUZaZGtJc1dVRkJXaXhEUVVGNVFuRkxMRWxCUVhwQ0xFMUJRVzFETEU5QlJuWkRMRVZCUldkRU8wRkJRelZETDBnc2NVSkJRVXRtTEUxQlFVd3NRMEZCV1hwQ0xGRkJRVm9zUTBGQmNVSjNTeXhIUVVGeVFqdEJRVU5CYUVrc2NVSkJRVXRtTEUxQlFVd3NRMEZCV1hoQ0xGZEJRVm9zUTBGQmQwSjFTeXhIUVVGNFFqdEJRVU5CYUVrc2NVSkJRVXRtTEUxQlFVd3NRMEZCV1haQ0xGbEJRVm9zUTBGQmVVSnpTeXhIUVVGNlFqdEJRVU5JTEdGQlRrUXNUVUZQU3p0QlFVTkVMRzlDUVVGSlF5eHRRa0ZCYlVJc05FUkJRWFpDTzBGQlEwRTFSeXh0UWtGQlJ6WkhMRWxCUVVnc1EwRkJVVVFzWjBKQlFWSTdRVUZEU0R0QlFVTktPMEZCUTBvN08wRkJSVVFzWVVGQlUzQkhMSEZDUVVGVUxFTkJRV2RETjBJc1NVRkJhRU1zUlVGQmMwTjRRaXhIUVVGMFF5eEZRVUV5UTNORExGVkJRVE5ETEVWQlFYVkVSU3hMUVVGMlJDeEZRVUU0UkRsQ0xFMUJRVGxFTEVWQlFYTkZPMEZCUTJ4RkxGbEJRVWx2UWl4WFFVRktPMEZCUTBFc1dVRkJTVlVzVFVGQlRYTkNMR05CUVU0c1EwRkJjVUlzYVVKQlFYSkNMRU5CUVVvc1JVRkJOa003UVVGRGVrTm9ReXd3UWtGQlkxVXNUVUZCVFcxSUxHVkJRWEJDTzBGQlEwZ3NVMEZHUkN4TlFVZExPMEZCUTBRM1NDd3dRa0ZCWTJsRkxHMUNRVUZ0UW5aRkxFbEJRVzVDTEVWQlFYbENaMElzUzBGQmVrSXNRMEZCWkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk9VUXNaVUZCUnpCSExFdEJRVWdzUTBGQlV6VkRMRXRCUVZRc1JVRkJaMElzYVVKQlFXaENMRVZCUVcxRFZpeFhRVUZ1UXl4RlFVRm5SQ3hKUVVGb1JEdEJRVU5JTzBGQlEwUkJMRzlDUVVGWlRpeEpRVUZhTEVWQlFXdENlRUlzUjBGQmJFSXNSVUZCZFVKelF5eFZRVUYyUWl4RlFVRnRRMFVzUzBGQmJrTXNSVUZCTUVNNVFpeE5RVUV4UXp0QlFVTkJPMEZCUTBFc1dVRkJTV3RITEdOQlFXVnVTQ3hoUVVGaEswSXNTMEZCUzB3c2FVSkJRWEpETEVWQlFYbEVPMEZCUTNKRUxHZENRVUZKY1VJc1ZVRkJWVXNzUjBGQlJ5dEhMRmRCUVdJc1NVRkJORUlzUTBGQlF6VktMRWxCUVVrMlNpeEpRVUZ5UXl4RlFVRXlRenRCUVVOMlExQXNiVU5CUVcxQ09VZ3NTVUZCYmtJc1JVRkJlVUpqTEZWQlFYcENMRVZCUVhGRGRFTXNSMEZCY2tNN1FVRkRTRHRCUVVOS08wRkJRMG83TzBGQlJVUlJMR3RDUVVGalNpeEpRVUZrTEVkQlFYRkNMRWxCUVVreFFpeEhRVUZITWtJc1NVRkJVQ3hEUVVGWkxGVkJRVlZNTEVkQlFWWXNSVUZCWlR0QlFVTTFRMEVzV1VGQlNWTXNUVUZCU2l4SFFVRmhMRWxCUVdJN1FVRkRRVlFzV1VGQlNWa3NVMEZCU2l4SFFVRm5RaXhKUVVGb1FqdEJRVU5CV2l4WlFVRkpZeXhuUWtGQlNpeERRVUZ4UW5aQ0xFMUJRWEpDTEVkQlFUaENMRU5CUVRsQ08wRkJRMEZUTEZsQlFVbGxMR2RDUVVGS0xFZEJRWFZDTEVsQlFYWkNPMEZCUTBGbUxGbEJRVWxuUWl4WlFVRktMRWRCUVcxQ0xFbEJRVzVDTzBGQlEwRXNXVUZCU1VNc1RVRkJTaXhGUVVGWk8wRkJRMUpxUWl4blFrRkJTV3RDTEU5QlFVb3NSMEZCWXl4SlFVRmtPMEZCUTBnN1FVRkRSR3hDTEZsQlFVbHZRaXhQUVVGS0xFTkJRVmszUWl4TlFVRmFMRWRCUVhGQ0xFTkJRWEpDTzBGQlEwRlRMRmxCUVVseFFpeFZRVUZLTEVOQlFXVTVRaXhOUVVGbUxFZEJRWGRDTEVOQlFYaENPMEZCUTBGVExGbEJRVWx6UWl4WFFVRktMRU5CUVdkQ0wwSXNUVUZCYUVJc1IwRkJlVUlzUTBGQmVrSTdRVUZEU0N4TFFWcHZRaXhGUVZsc1FpeERRVnByUWl4RFFVRnlRanM3UVVGalFXbENMR3RDUVVGalNpeEpRVUZrTEVOQlFXMUNSU3hIUVVGdVFpeEhRVUY1UWl4VlFVRlZSeXhOUVVGV0xFVkJRV3RDUXl4TlFVRnNRaXhGUVVFd1FrTXNWMEZCTVVJc1JVRkJkVU5ETEZOQlFYWkRMRVZCUVd0RVF5eG5Ra0ZCYkVRc1JVRkJiMFU3UVVGRGVrWXNXVUZCU1dsS0xGRkJRVkVzUzBGQlMzWktMRWxCUVV3c1JVRkJXanRCUVVOQkxGbEJRVWwxU2l4TFFVRktMRVZCUVZjN1FVRkRVRUVzYTBKQlFVMXlTaXhOUVVGT0xFZEJRV1ZCTEUxQlFXWTdRVUZEUVhGS0xHdENRVUZOYkVvc1UwRkJUaXhIUVVGclFrRXNVMEZCYkVJN1FVRkRRV3RLTEd0Q1FVRk5PVWtzV1VGQlRpeEhRVUZ4UWt3c1YwRkJja0k3UVVGRFFTeG5Ra0ZCU1Uwc1RVRkJTaXhGUVVGWk8wRkJRMUkyU1N4elFrRkJUVFZKTEU5QlFVNHNSMEZCWjBKU0xFMUJRV2hDTzBGQlEwRnZTaXh6UWtGQlRUTkpMR2xDUVVGT0xFZEJRVEJDVGl4blFrRkJNVUk3UVVGRFNEdEJRVU5FTEcxQ1FVRlBhVW9zUzBGQlVEdEJRVU5JTEZOQlZFUXNUVUZWU3p0QlFVTkVMRzFDUVVGUExFbEJRVWwwU2l4aFFVRktMRU5CUVd0Q1F5eE5RVUZzUWl4RlFVRXdRa01zVFVGQk1VSXNSVUZCYTBORExGZEJRV3hETEVWQlFTdERReXhUUVVFdlF5eEZRVUV3UkVNc1owSkJRVEZFTEVOQlFWQTdRVUZEU0R0QlFVTktMRXRCWmtRN08wRkJhVUpCTEZkQlFVOU1MR0ZCUVZBN1FVRkRTQ3hEUVhCdlFtMUNMRVZCUVhCQ096dEJRWE52UWtFN096czdRVUZKUVRzN096czdPenM3T3pzN096dEJRV0ZCY1VNc1IwRkJSMllzVjBGQlNDeEhRVUZwUWl4VlFVRlZhVWtzU1VGQlZpeEZRVUZuUWtNc1QwRkJhRUlzUlVGQmVVSkRMRTlCUVhwQ0xFVkJRV3RETzBGQlF5OURRU3hqUVVGVlFTeFhRVUZYTEVWQlFYSkNPMEZCUTBFc1VVRkJTWFJLTEdOQlFXTnpTaXhSUVVGUmRFb3NWMEZCVWl4SlFVRjFRbXBETEVkQlFVZHJSU3hoUVVFMVF6dEJRVU5CTzBGQlEwRXNVVUZCU1hOSUxHdENRVUZyUWtRc1VVRkJVVU1zWlVGQlVpeEpRVUV5UW5KSUxFZEJRVWR6U0N4SFFVRklMRU5CUVU5RExGRkJRVkFzUzBGQmIwSjJTQ3hIUVVGSGMwZ3NSMEZCU0N4RFFVRlBSU3hYUVVFMVJUdEJRVU5CTEZGQlFVa3pTaXhUUVVGVExFTkJRVU5xUWl4aFFVRmhReXhQUVVGa0xFdEJRVEJDZFVzc1VVRkJVWFpLTEUxQlFTOURPMEZCUTBFc1VVRkJTVVVzV1VGQldYRktMRkZCUVZGeVNpeFRRVUY0UWp0QlFVTkJMRkZCUVVsRExHMUNRVUZ0UW05S0xGRkJRVkZ3U2l4blFrRkJMMEk3TzBGQlJVRXNVVUZCU1hCQ0xHRkJRV0UyU3l4UFFVRlBReXhSUVVGUUxFTkJRV2RDVWl4SlFVRm9RaXhEUVVGcVFpeEZRVUYzUXp0QlFVTndRMEVzWlVGQlQwRXNTMEZCUzFNc1VVRkJUQ3hGUVVGUU8wRkJRMGc3TzBGQlJVUXNVVUZCU1N4UFFVRlBWQ3hKUVVGUUxFdEJRV2RDTEZGQlFYQkNMRVZCUVRoQ08wRkJRekZDUVN4bFFVRlBXaXhMUVVGTFF5eExRVUZNTEVOQlFWZFhMRWxCUVZnc1EwRkJVRHRCUVVOSU96dEJRVVZFT3p0QlFVVkJMRkZCUVVsVkxHTkJRV01zUTBGQlExUXNUMEZCYmtJN1FVRkRRVUVzWTBGQlZVRXNWMEZCVjJwTUxGRkJRVkZ4UWl4SlFVRlNMRU5CUVdGRkxFZEJRV0lzUlVGQmNrSTdRVUZEUVN4UlFVRkpiMHNzWlVGQlpXeExMR05CUVdOS0xFbEJRV1FzUTBGQmJVSkZMRWRCUVc1Q0xFTkJRWFZDTUVvc1QwRkJka0lzUlVGQlowTjBTaXhOUVVGb1F5eEZRVUYzUTBNc1YwRkJlRU1zUlVGQmNVUkRMRk5CUVhKRUxFVkJRV2RGUXl4blFrRkJhRVVzUTBGQmJrSTdPMEZCUlVGblF5eFBRVUZIT0Vnc1NVRkJTQ3hEUVVGUlF5eFZRVUZTTEVkQlFYRkNMRWxCUVhKQ08wRkJRMEVzVVVGQlNVTXNUVUZCVFVnc1lVRkJZVFZKTEZkQlFXSXNRMEZCZVVKcFNTeEpRVUY2UWl4RFFVRldPMEZCUTBGc1NDeFBRVUZIT0Vnc1NVRkJTQ3hEUVVGUlF5eFZRVUZTTEVkQlFYRkNMRXRCUVhKQ096dEJRVVZCY0Vzc2EwSkJRV05LTEVsQlFXUXNRMEZCYlVJd1N5eEhRVUZ1UWl4RFFVRjFRa29zV1VGQmRrSTdRVUZEUVN4UlFVRkpVaXhsUVVGS0xFVkJRWEZDTzBGQlEycENSaXhuUWtGQlVYSkxMR05CUVZJc1EwRkJkVUp2VEN4UFFVRlBReXhUUVVGUUxFTkJRV2xDUXl4UFFVRjRRenRCUVVOSU8wRkJRMFFzVVVGQlNWSXNWMEZCU2l4RlFVRnBRanRCUVVOaU1Vd3NaMEpCUVZGeFFpeEpRVUZTTEVOQlFXRXdTeXhIUVVGaUxFTkJRV2xDWkN4UFFVRnFRanRCUVVOSU96dEJRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQkxGZEJRVTloTEVkQlFWQTdRVUZEU0N4RFFYcERSRHM3UVVFeVEwRm9TU3hIUVVGSFppeFhRVUZJTEVOQlFXVXZReXhQUVVGbUxFZEJRWGxDUVN4UFFVRjZRanRCUVVOQk9FUXNSMEZCUjJZc1YwRkJTQ3hEUVVGbFowSXNhMEpCUVdZc1IwRkJiME1zVlVGQlZXcENMRVZCUVZZc1JVRkJZenRCUVVNNVF5eFJRVUZKY0VNc1lVRkJZWE5NTEU5QlFVOUhMRXRCUVZBc1EwRkJZVU1zVTBGQllpeERRVUYxUWtNc1RVRkJka0lzUTBGQk9FSjJTaXhGUVVFNVFpeERRVUZxUWl4RlFVRnZSRHRCUVVOb1JFRXNZVUZCUzJ0S0xFOUJRVTlITEV0QlFWQXNRMEZCWVVNc1UwRkJZaXhEUVVGMVFrVXNZMEZCZGtJc1EwRkJjME40U2l4RlFVRjBReXhEUVVGTU8wRkJRMEZuUWl4WFFVRkhSU3hOUVVGSUxFTkJRVlVzU1VGQlZpeEZRVUZuUW14Q0xFVkJRV2hDTzBGQlEwZ3NTMEZJUkN4TlFVbExPMEZCUTBSblFpeFhRVUZIUlN4TlFVRklMRU5CUVZVc1NVRkJWaXhGUVVGblFteENMRVZCUVdoQ08wRkJRMGc3UVVGRFNpeERRVkpFSWl3aVptbHNaU0k2SW1SbGMyVnlhV0ZzYVhwbExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVE10TWpBeE5pQkRhSFZyYjI1bklGUmxZMmh1YjJ4dloybGxjeUJKYm1NdVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTNMVEl3TVRnZ1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVYRzVjYmlCb2RIUndjem92TDNkM2R5NWpiMk52Y3k1amIyMHZYRzVjYmlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVNCamIzQjVYRzRnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmxibWRwYm1VZ2MyOTFjbU5sSUdOdlpHVWdLSFJvWlNCY0lsTnZablIzWVhKbFhDSXBMQ0JoSUd4cGJXbDBaV1FzWEc0Z0lIZHZjbXhrZDJsa1pTd2djbTk1WVd4MGVTMW1jbVZsTENCdWIyNHRZWE56YVdkdVlXSnNaU3dnY21WMmIyTmhZbXhsSUdGdVpDQnViMjR0WlhoamJIVnphWFpsSUd4cFkyVnVjMlZjYmlCMGJ5QjFjMlVnUTI5amIzTWdRM0psWVhSdmNpQnpiMnhsYkhrZ2RHOGdaR1YyWld4dmNDQm5ZVzFsY3lCdmJpQjViM1Z5SUhSaGNtZGxkQ0J3YkdGMFptOXliWE11SUZsdmRTQnphR0ZzYkZ4dUlDQnViM1FnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5bWRIZGhjbVVnWm05eUlHUmxkbVZzYjNCcGJtY2diM1JvWlhJZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2RHaGhkQ2R6WEc0Z0lIVnpaV1FnWm05eUlHUmxkbVZzYjNCcGJtY2daMkZ0WlhNdUlGbHZkU0JoY21VZ2JtOTBJR2R5WVc1MFpXUWdkRzhnY0hWaWJHbHphQ3dnWkdsemRISnBZblYwWlN4Y2JpQWdjM1ZpYkdsalpXNXpaU3dnWVc1a0wyOXlJSE5sYkd3Z1kyOXdhV1Z6SUc5bUlFTnZZMjl6SUVOeVpXRjBiM0l1WEc1Y2JpQlVhR1VnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nYVc0Z2RHaHBjeUJNYVdObGJuTmxJRUZuY21WbGJXVnVkQ0JoY21VZ2JHbGpaVzV6WldRc0lHNXZkQ0J6YjJ4a0xseHVJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGlCeVpYTmxjblpsY3lCaGJHd2djbWxuYUhSeklHNXZkQ0JsZUhCeVpYTnpiSGtnWjNKaGJuUmxaQ0IwYnlCNWIzVXVYRzVjYmlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVElFOVNYRzRnU1UxUVRFbEZSQ3dnU1U1RFRGVkVTVTVISUVKVlZDQk9UMVFnVEVsTlNWUkZSQ0JVVHlCVVNFVWdWMEZTVWtGT1ZFbEZVeUJQUmlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzWEc0Z1JrbFVUa1ZUVXlCR1QxSWdRU0JRUVZKVVNVTlZURUZTSUZCVlVsQlBVMFVnUVU1RUlFNVBUa2xPUmxKSlRrZEZUVVZPVkM0Z1NVNGdUazhnUlZaRlRsUWdVMGhCVEV3Z1ZFaEZYRzRnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3dnUkVGTlFVZEZVeUJQVWlCUFZFaEZVbHh1SUV4SlFVSkpURWxVV1N3Z1YwaEZWRWhGVWlCSlRpQkJUaUJCUTFSSlQwNGdUMFlnUTA5T1ZGSkJRMVFzSUZSUFVsUWdUMUlnVDFSSVJWSlhTVk5GTENCQlVrbFRTVTVISUVaU1QwMHNYRzRnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGx4dUlGUklSU0JUVDBaVVYwRlNSUzVjYmlBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1MllYSWdhbk1nUFNCeVpYRjFhWEpsS0NjdUwycHpKeWs3WEc1MllYSWdRWFIwY2lBOUlISmxjWFZwY21Vb0p5NHZZWFIwY21saWRYUmxKeWs3WEc1MllYSWdRME5EYkdGemN5QTlJSEpsY1hWcGNtVW9KeTR2UTBORGJHRnpjeWNwTzF4dWRtRnlJRzFwYzJNZ1BTQnlaWEYxYVhKbEtDY3VMaTkxZEdsc2N5OXRhWE5qSnlrN1hHNWNiaTh2SUVoRlRGQkZVbE5jYmx4dUx5b3FYRzRnS2lBaEkyVnVJRU52Ym5SaGFXNXpJR2x1Wm05eWJXRjBhVzl1SUdOdmJHeGxZM1JsWkNCa2RYSnBibWNnWkdWelpYSnBZV3hwZW1GMGFXOXVYRzRnS2lBaEkzcG9JT1dNaGVXUXErV1BqZVc2aitXSWwrV01sdWFYdHVlYWhPUzRnT1M2bStTL29lYUJyMXh1SUNvZ1FHTnNZWE56SUVSbGRHRnBiSE5jYmlBcVhHNGdLaTljYm5aaGNpQkVaWFJoYVd4eklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUd4cGMzUWdiMllnZEdobElHUmxjR1Z1WkhNZ1lYTnpaWFJ6SnlCMWRXbGtYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRUZEhKcGJtZGJYWDBnZFhWcFpFeHBjM1JjYmlBZ0lDQWdLaTljYmlBZ0lDQjBhR2x6TG5WMWFXUk1hWE4wSUQwZ1cxMDdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dkR2hsSUc5aWFpQnNhWE4wSUhkb2IzTmxJR1pwWld4a0lHNWxaV1J6SUhSdklHeHZZV1FnWVhOelpYUWdZbmtnZFhWcFpGeHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdUMkpxWldOMFcxMTlJSFYxYVdSUFltcE1hWE4wWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1MWRXbGtUMkpxVEdsemRDQTlJRnRkTzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUhSb1pTQmpiM0p5WlhOd2IyNWthVzVuSUdacFpXeGtJRzVoYldVZ2QyaHBZMmdnY21WbVpYSmxibU5sWkNCMGJ5QjBhR1VnWVhOelpYUmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMU4wY21sdVoxdGRmU0IxZFdsa1VISnZjRXhwYzNSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxuVjFhV1JRY205d1RHbHpkQ0E5SUZ0ZE8xeHVYRzRnSUNBZ0x5OGdWRTlFVHlBdElFUkZURTFGSUhOcGJtTmxJREl1TUZ4dUlDQWdJSFJvYVhNdVgzTjBhV3hzVlhObFZYSnNJRDBnYW5NdVkzSmxZWFJsVFdGd0tIUnlkV1VwTzF4dWZUdGNiaThxS2x4dUlDb2dRRzFsZEdodlpDQnlaWE5sZEZ4dUlDb3ZYRzVFWlhSaGFXeHpMbkJ5YjNSdmRIbHdaUzV5WlhObGRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IwYUdsekxuVjFhV1JNYVhOMExteGxibWQwYUNBOUlEQTdYRzRnSUNBZ2RHaHBjeTUxZFdsa1QySnFUR2x6ZEM1c1pXNW5kR2dnUFNBd08xeHVJQ0FnSUhSb2FYTXVkWFZwWkZCeWIzQk1hWE4wTG14bGJtZDBhQ0E5SURBN1hHNGdJQ0FnYW5NdVkyeGxZWElvZEdocGN5NWZjM1JwYkd4VmMyVlZjbXdwTzF4dWZUdGNibWxtSUNoRFExOUZSRWxVVDFJZ2ZId2dRME5mVkVWVFZDa2dlMXh1SUNBZ0lFUmxkR0ZwYkhNdWNISnZkRzkwZVhCbExtRnpjMmxuYmtGemMyVjBjMEo1SUQwZ1puVnVZM1JwYjI0Z0tHZGxkSFJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJwWjI1dmNtVWdkR2hwY3k1ZmMzUnBiR3hWYzJWVmNteGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBc0lHeGxiaUE5SUhSb2FYTXVkWFZwWkV4cGMzUXViR1Z1WjNSb095QnBJRHdnYkdWdU95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMWRXbGtJRDBnZEdocGN5NTFkV2xrVEdsemRGdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ2WW1vZ1BTQjBhR2x6TG5WMWFXUlBZbXBNYVhOMFcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJ5YjNBZ1BTQjBhR2x6TG5WMWFXUlFjbTl3VEdsemRGdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOWlhbHR3Y205d1hTQTlJR2RsZEhSbGNpaDFkV2xrS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNTlYRzR2THlBdktpcGNiaTh2SUNBcUlFQnRaWFJvYjJRZ1oyVjBWWFZwWkU5bVhHNHZMeUFnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjJKcVhHNHZMeUFnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnY0hKdmNFNWhiV1ZjYmk4dklDQXFJRUJ5WlhSMWNtNGdlMU4wY21sdVozMWNiaTh2SUNBcUwxeHVMeThnUkdWMFlXbHNjeTV3Y205MGIzUjVjR1V1WjJWMFZYVnBaRTltSUQwZ1puVnVZM1JwYjI0Z0tHOWlhaXdnY0hKdmNFNWhiV1VwSUh0Y2JpOHZJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUm9hWE11ZFhWcFpFOWlha3hwYzNRdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmk4dklDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRYVnBaRTlpYWt4cGMzUmJhVjBnUFQwOUlHOWlhaUFtSmlCMGFHbHpMblYxYVdSUWNtOXdUR2x6ZEZ0cFhTQTlQVDBnY0hKdmNFNWhiV1VwSUh0Y2JpOHZJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuVjFhV1JNYVhOMFcybGRPMXh1THk4Z0lDQWdJQ0FnSUNCOVhHNHZMeUFnSUNBZ2ZWeHVMeThnSUNBZ0lISmxkSFZ5YmlCY0lsd2lPMXh1THk4Z2ZUdGNiaThxS2x4dUlDb2dRRzFsZEdodlpDQndkWE5vWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IySnFYRzRnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnY0hKdmNFNWhiV1ZjYmlBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCMWRXbGtYRzRnS2k5Y2JrUmxkR0ZwYkhNdWNISnZkRzkwZVhCbExuQjFjMmdnUFNCbWRXNWpkR2x2YmlBb2IySnFMQ0J3Y205d1RtRnRaU3dnZFhWcFpDd2dYM04wYVd4c1ZYTmxWWEpzS1NCN1hHNGdJQ0FnYVdZZ0tGOXpkR2xzYkZWelpWVnliQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6ZEdsc2JGVnpaVlZ5YkZ0MGFHbHpMblYxYVdSTWFYTjBMbXhsYm1kMGFGMGdQU0IwY25WbE8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxuVjFhV1JNYVhOMExuQjFjMmdvZFhWcFpDazdYRzRnSUNBZ2RHaHBjeTUxZFdsa1QySnFUR2x6ZEM1d2RYTm9LRzlpYWlrN1hHNGdJQ0FnZEdocGN5NTFkV2xrVUhKdmNFeHBjM1F1Y0hWemFDaHdjbTl3VG1GdFpTazdYRzU5TzF4dVhHNUVaWFJoYVd4ekxuQnZiMndnUFNCdVpYY2dhbk11VUc5dmJDaG1kVzVqZEdsdmJpQW9iMkpxS1NCN1hHNGdJQ0FnYjJKcUxuSmxjMlYwS0NrN1hHNTlMQ0F4TUNrN1hHNWNia1JsZEdGcGJITXVjRzl2YkM1blpYUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyZGxkQ2dwSUh4OElHNWxkeUJFWlhSaGFXeHpLQ2s3WEc1OU8xeHVYRzR2THlCSlRWQk1SVTFGVGxRZ1QwWWdSRVZUUlZKSlFVeEpXa0ZVU1U5T1hHNWNiblpoY2lCZlJHVnpaWEpwWVd4cGVtVnlJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCZlJHVnpaWEpwWVd4cGVtVnlLSEpsYzNWc2RDd2dkR0Z5WjJWMExDQmpiR0Z6YzBacGJtUmxjaXdnWTNWemRHOXRSVzUyTENCcFoyNXZjbVZGWkdsMGIzSlBibXg1S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WemRXeDBJRDBnY21WemRXeDBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTjFjM1J2YlVWdWRpQTlJR04xYzNSdmJVVnVkanRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtaWE5sY21saGJHbDZaV1JNYVhOMElEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR1Z6WlhKcFlXeHBlbVZrUkdGMFlTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOc1lYTnpSbWx1WkdWeUlEMGdZMnhoYzNOR2FXNWtaWEk3WEc0Z0lDQWdJQ0FnSUdsbUlDaERRMTlFUlZZcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1JoY21kbGRDQTlJSFJoY21kbGREdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmxuYm05eVpVVmthWFJ2Y2s5dWJIa2dQU0JwWjI1dmNtVkZaR2wwYjNKUGJteDVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmxrVEdsemRDQTlJRnRkTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlwWkU5aWFreHBjM1FnUFNCYlhUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFXUlFjbTl3VEdsemRDQTlJRnRkTzF4dUlDQWdJSDFjYmx4dUlDQWdJR1oxYm1OMGFXOXVJRjlrWlhKbFptVnlaVzVqWlNBb2MyVnNaaWtnZTF4dUlDQWdJQ0FnSUNBdkx5RG92NW5waDR6a3VJM3BoNGZubEtqcGdZM2xqb2JsajQzbHVvL2xpSmZsakpibnU1UG1ucHpubW9UbWxybmx2SS92dkl6bG02RGt1THJsajQzbHVvL2xpSmZsakpibm1vVG51NVBtbnB6bHBvTG1ucHpsdkpYbmxLamxpTERscEkzbW5ZTG5tb1RscEpicGc2amx1cFB2dkl6bHZvamxycm5tbUpQbG9JYm1vSWptdXFMbGg3cmpnSUpjYmlBZ0lDQWdJQ0FnZG1GeUlHUmxjMlZ5YVdGc2FYcGxaRXhwYzNRZ1BTQnpaV3htTG1SbGMyVnlhV0ZzYVhwbFpFeHBjM1E3WEc0Z0lDQWdJQ0FnSUhaaGNpQnBaRkJ5YjNCTWFYTjBJRDBnYzJWc1ppNWZhV1JRY205d1RHbHpkRHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbGtUR2x6ZENBOUlITmxiR1l1WDJsa1RHbHpkRHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbGtUMkpxVEdsemRDQTlJSE5sYkdZdVgybGtUMkpxVEdsemREdGNiaUFnSUNBZ0lDQWdkbUZ5SUc5dVJHVnlaV1psY21WdVkyVmtJRDBnYzJWc1ppNWZZMnhoYzNOR2FXNWtaWElnSmlZZ2MyVnNaaTVmWTJ4aGMzTkdhVzVrWlhJdWIyNUVaWEpsWm1WeVpXNWpaV1E3WEc0Z0lDQWdJQ0FnSUhaaGNpQnBMQ0J3Y205d1RtRnRaU3dnYVdRN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hEUTE5RlJFbFVUMUlnSmlZZ2IyNUVaWEpsWm1WeVpXNWpaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnBaRXhwYzNRdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1RtRnRaU0E5SUdsa1VISnZjRXhwYzNSYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1FnUFNCcFpFeHBjM1JiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUlBZbXBNYVhOMFcybGRXM0J5YjNCT1lXMWxYU0E5SUdSbGMyVnlhV0ZzYVhwbFpFeHBjM1JiYVdSZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVSR1Z5WldabGNtVnVZMlZrS0dSbGMyVnlhV0ZzYVhwbFpFeHBjM1FzSUdsa0xDQnBaRTlpYWt4cGMzUmJhVjBzSUhCeWIzQk9ZVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCcFpFeHBjM1F1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3VG1GdFpTQTlJR2xrVUhKdmNFeHBjM1JiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUWdQU0JwWkV4cGMzUmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdSUFltcE1hWE4wVzJsZFczQnliM0JPWVcxbFhTQTlJR1JsYzJWeWFXRnNhWHBsWkV4cGMzUmJhV1JkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUhCeWIzUnZkSGx3WlNBOUlGOUVaWE5sY21saGJHbDZaWEl1Y0hKdmRHOTBlWEJsTzF4dVhHNGdJQ0FnY0hKdmRHOTBlWEJsTG1SbGMyVnlhV0ZzYVhwbElEMGdablZ1WTNScGIyNGdLR3B6YjI1UFltb3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYW5OdmJrOWlhaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcWMyOXVRWEp5WVhrZ1BTQnFjMjl1VDJKcU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxaa052ZFc1MElEMGdhbk52YmtGeWNtRjVMbXhsYm1kMGFEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR1Z6WlhKcFlXeHBlbVZrVEdsemRDNXNaVzVuZEdnZ1BTQnlaV1pEYjNWdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHUmxjMlZ5YVdGc2FYcGxYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElISmxaa052ZFc1ME95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hbk52YmtGeWNtRjVXMmxkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoRFExOUZSRWxVVDFJZ2ZId2dRME5mVkVWVFZDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUcxaGFXNVVZWEpuWlhRZ1BTQW9hU0E5UFQwZ01DQW1KaUIwYUdsekxsOTBZWEpuWlhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrWlhObGNtbGhiR2w2WldSTWFYTjBXMmxkSUQwZ2RHaHBjeTVmWkdWelpYSnBZV3hwZW1WUFltcGxZM1FvYW5OdmJrRnljbUY1VzJsZExDQm1ZV3h6WlN3Z2JXRnBibFJoY21kbGRDd2dkR2hwY3k1a1pYTmxjbWxoYkdsNlpXUk1hWE4wTENBbkp5QXJJR2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1a1pYTmxjbWxoYkdsNlpXUk1hWE4wVzJsZElEMGdkR2hwY3k1ZlpHVnpaWEpwWVd4cGVtVlBZbXBsWTNRb2FuTnZia0Z5Y21GNVcybGRMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1SbGMyVnlhV0ZzYVhwbFpFUmhkR0VnUFNCeVpXWkRiM1Z1ZENBK0lEQWdQeUIwYUdsekxtUmxjMlZ5YVdGc2FYcGxaRXhwYzNSYk1GMGdPaUJiWFR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4dkx5QmpZV3hzWW1GamExeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5bWIzSWdLSFpoY2lCcUlEMGdNRHNnYWlBOElISmxaa052ZFc1ME95QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lHbG1JQ2h5WldabGNtVnVZMlZrVEdsemRGdHFYUzV2YmtGbWRHVnlSR1Z6WlhKcFlXeHBlbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQWdJQ0J5WldabGNtVnVZMlZrVEdsemRGdHFYUzV2YmtGbWRHVnlSR1Z6WlhKcFlXeHBlbVVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dmZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWtaWE5sY21saGJHbDZaV1JNYVhOMExteGxibWQwYUNBOUlERTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RME5mUlVSSlZFOVNJSHg4SUVORFgxUkZVMVFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJsYzJWeWFXRnNhWHBsWkVSaGRHRWdQU0JxYzI5dVQySnFJRDhnZEdocGN5NWZaR1Z6WlhKcFlXeHBlbVZQWW1wbFkzUW9hbk52Yms5aWFpd2dabUZzYzJVc0lIUm9hWE11WDNSaGNtZGxkQ3dnZEdocGN5NWtaWE5sY21saGJHbDZaV1JNYVhOMExDQW5NQ2NwSURvZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpHVnpaWEpwWVd4cGVtVmtSR0YwWVNBOUlHcHpiMjVQWW1vZ1B5QjBhR2x6TGw5a1pYTmxjbWxoYkdsNlpVOWlhbVZqZENocWMyOXVUMkpxTENCbVlXeHpaU2tnT2lCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWtaWE5sY21saGJHbDZaV1JNYVhOMFd6QmRJRDBnZEdocGN5NWtaWE5sY21saGJHbDZaV1JFWVhSaE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5OHZJR05oYkd4aVlXTnJYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwybG1JQ2hrWlhObGNtbGhiR2w2WldSRVlYUmhMbTl1UVdaMFpYSkVaWE5sY21saGJHbDZaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ1pHVnpaWEpwWVd4cGVtVmtSR0YwWVM1dmJrRm1kR1Z5UkdWelpYSnBZV3hwZW1Vb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dmZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1pHVnlaV1psY21WdVkyVmNiaUFnSUNBZ0lDQWdYMlJsY21WbVpYSmxibU5sS0hSb2FYTXBPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtUmxjMlZ5YVdGc2FYcGxaRVJoZEdFN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUM4dkx5b3FYRzRnSUNBZ0x5OGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdjMlZ5YVdGc2FYcGxaQ0F0SUZSb1pTQnZZbW9nZEc4Z1pHVnpaWEpwWVd4cGVtVXNJRzExYzNRZ1ltVWdibTl1TFc1cGJGeHVJQ0FnSUM4dklDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQmZjM1JwYkd4VmMyVlZjbXhjYmlBZ0lDQXZMeUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JiZEdGeVoyVjBQVzUxYkd4ZElDMGdaV1JwZEc5eUlHOXViSGxjYmlBZ0lDQXZMeUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JiYjNkdVpYSmRJQzBnWkdWaWRXY2diMjVzZVZ4dUlDQWdJQzh2SUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUZ0d2NtOXdUbUZ0WlYwZ0xTQmtaV0oxWnlCdmJteDVYRzRnSUNBZ0x5OGdLaTljYmlBZ0lDQndjbTkwYjNSNWNHVXVYMlJsYzJWeWFXRnNhWHBsVDJKcVpXTjBJRDBnWm5WdVkzUnBiMjRnS0hObGNtbGhiR2w2WldRc0lGOXpkR2xzYkZWelpWVnliQ3dnZEdGeVoyVjBMQ0J2ZDI1bGNpd2djSEp2Y0U1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQnliM0E3WEc0Z0lDQWdJQ0FnSUhaaGNpQnZZbW9nUFNCdWRXeHNPeUFnSUNBZ0x5OGdkR2hsSUc5aWFpQjBieUJ5WlhSMWNtNWNiaUFnSUNBZ0lDQWdkbUZ5SUd0c1lYTnpJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkbUZ5SUhSNWNHVWdQU0J6WlhKcFlXeHBlbVZrTGw5ZmRIbHdaVjlmTzF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3WlNrZ2UxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVlWEJsSUU5aWFtVmpkQ0FvYVc1amJIVmthVzVuSUVORFEyeGhjM01wWEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR3RzWVhOeklEMGdkR2hwY3k1ZlkyeGhjM05HYVc1a1pYSW9kSGx3WlN3Z2MyVnlhV0ZzYVhwbFpDd2diM2R1WlhJc0lIQnliM0JPWVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hhMnhoYzNNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYm05MFVtVndiM0owWldRZ1BTQjBhR2x6TGw5amJHRnpjMFpwYm1SbGNpQTlQVDBnYW5NdVgyZGxkRU5zWVhOelFubEpaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JtOTBVbVZ3YjNKMFpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyTXVaR1Z6WlhKcFlXeHBlbVV1Y21Wd2IzSjBUV2x6YzJsdVowTnNZWE56S0hSNWNHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NoRFExOUZSRWxVVDFJZ2ZId2dRME5mVkVWVFZDa2dKaVlnZEdGeVoyVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RYTmxJSFJoY21kbGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dnSVNoMFlYSm5aWFFnYVc1emRHRnVZMlZ2WmlCcmJHRnpjeWtnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG5kaGNtNUpSQ2cxTXpBd0xDQnFjeTVuWlhSRGJHRnpjMDVoYldVb2RHRnlaMlYwS1N3Z2EyeGhjM01wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlltb2dQU0IwWVhKblpYUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJwYm5OMFlXNTBhV0YwWlNCaElHNWxkeUJ2WW1wbFkzUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZZbW9nUFNCdVpYY2dhMnhoYzNNb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHOWlhaTVmWkdWelpYSnBZV3hwZW1VcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZZbW91WDJSbGMyVnlhV0ZzYVhwbEtITmxjbWxoYkdsNlpXUXVZMjl1ZEdWdWRDd2dkR2hwY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc5aWFqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoall5NURiR0Z6Y3k1ZmFYTkRRME5zWVhOektHdHNZWE56S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOWtaWE5sY21saGJHbDZaVVpwY21WRGJHRnpjeWgwYUdsekxDQnZZbW9zSUhObGNtbGhiR2w2WldRc0lHdHNZWE56TENCMFlYSm5aWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaR1Z6WlhKcFlXeHBlbVZVZVhCbFpFOWlhbVZqZENodlltb3NJSE5sY21saGJHbDZaV1FzSUd0c1lYTnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2dnSVVGeWNtRjVMbWx6UVhKeVlYa29jMlZ5YVdGc2FYcGxaQ2tnS1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHVnRZbVZrWkdWa0lIQnlhVzFwZEdsMlpTQnFZWFpoYzJOeWFYQjBJRzlpYW1WamRGeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCdlltb2dQU0FvS0VORFgwVkVTVlJQVWlCOGZDQkRRMTlVUlZOVUtTQW1KaUIwWVhKblpYUXBJSHg4SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaR1Z6WlhKcFlXeHBlbVZRY21sdGFYUnBkbVZQWW1wbFkzUW9iMkpxTENCelpYSnBZV3hwZW1Wa0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRWEp5WVhsY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDaERRMTlGUkVsVVQxSWdmSHdnUTBOZlZFVlRWQ2tnSmlZZ2RHRnlaMlYwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwTG14bGJtZDBhQ0E5SUhObGNtbGhiR2w2WldRdWJHVnVaM1JvTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5aWFpQTlJSFJoY21kbGREdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOWlhaUE5SUc1bGR5QkJjbkpoZVNoelpYSnBZV3hwZW1Wa0xteGxibWQwYUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzJWeWFXRnNhWHBsWkM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNBZ1BTQnpaWEpwWVd4cGVtVmtXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NISnZjQ0E5UFQwZ0oyOWlhbVZqZENjZ0ppWWdjSEp2Y0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1EwTmZSVVJKVkU5U0lIeDhJRU5EWDFSRlUxUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyUmxjMlZ5YVdGc2FYcGxUMkpxUm1sbGJHUW9iMkpxTENCd2NtOXdMQ0FuSnlBcklHa3NJSFJoY21kbGRDQW1KaUJ2WW1vc0lGOXpkR2xzYkZWelpWVnliQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5a1pYTmxjbWxoYkdsNlpVOWlha1pwWld4a0tHOWlhaXdnY0hKdmNDd2dKeWNnS3lCcExDQnVkV3hzTENCZmMzUnBiR3hWYzJWVmNtd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZZbXBiYVYwZ1BTQndjbTl3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYjJKcU8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNBdkx5RGxrb3dnWDJSbGMyVnlhV0ZzYVhwbFQySnFaV04wSU9TNGplV1FqT2VhaE9XY3NPYVd1ZVdjcU9TNmp1UzhtdVdJcE9hV3JTQnBaQ0Rsa293Z2RYVnBaRnh1SUNBZ0lIQnliM1J2ZEhsd1pTNWZaR1Z6WlhKcFlXeHBlbVZQWW1wR2FXVnNaQ0E5SUdaMWJtTjBhVzl1SUNodlltb3NJR3B6YjI1UFltb3NJSEJ5YjNCT1lXMWxMQ0IwWVhKblpYUXNJRjl6ZEdsc2JGVnpaVlZ5YkNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYVdRZ1BTQnFjMjl1VDJKcUxsOWZhV1JmWHp0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2xrSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIxZFdsa0lEMGdhbk52Yms5aWFpNWZYM1YxYVdSZlh6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDFkV2xrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OXBaaUFvUlU1QlFreEZYMVJCVWtkRlZDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwraS9tZW1Iak9TNGplV0JtdVM3dStTOWxlYVRqZVM5bk8rOGpPV2JvT1M0dXVhY2llV1ByK2lEdmVpd2crZVVxT2lBaGVtY2dPaW1nZWVmcGVtQmsrUytuZWkxbHVXVHF1UzZteUJoYzNObGRPT0FnbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwraXdnK2VVcU9pQWhlUzl2K2VVcUNCMWRXbGtUR2x6ZENEbWw3YnZ2SXpsajYva3U2WGxpS1RtbHEwZ2IySnFXM0J5YjNCT1lXMWxYU0RtbUsvbGtLYmt1THJucWJydnZJemt1THJucWJybGlKbm9vYWpucExybHZvWG92NXZrdUlEbXJhWGxpcURvdmIzdnZJeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHkva3VJM2t1THJucWJybGlKbmxqNnJtbUsvb29ham1tSTdrdnAzb3RaYmxoYlBuczd2amdJSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNCcFppQW9kR0Z5WjJWMElDWW1JSFJoY21kbGRGdHdjbTl3VG1GdFpWMGdKaVlnZEdGeVoyVjBXM0J5YjNCT1lXMWxYUzVmZFhWcFpDQTlQVDBnZFhWcFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbUZ6YzJWeWRDaHZZbXBiY0hKdmNFNWhiV1ZkSUQwOVBTQjBZWEpuWlhSYmNISnZjRTVoYldWZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpYTjFiSFF1Y0hWemFDaHZZbW9zSUhCeWIzQk9ZVzFsTENCMWRXbGtMQ0JmYzNScGJHeFZjMlZWY213cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRU5EWDBWRVNWUlBVaUI4ZkNCRFExOVVSVk5VS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzlpYWx0d2NtOXdUbUZ0WlYwZ1BTQjBhR2x6TGw5a1pYTmxjbWxoYkdsNlpVOWlhbVZqZENocWMyOXVUMkpxTENCZmMzUnBiR3hWYzJWVmNtd3NJSFJoY21kbGRDQW1KaUIwWVhKblpYUmJjSEp2Y0U1aGJXVmRMQ0J2WW1vc0lIQnliM0JPWVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzlpYWx0d2NtOXdUbUZ0WlYwZ1BTQjBhR2x6TGw5a1pYTmxjbWxoYkdsNlpVOWlhbVZqZENocWMyOXVUMkpxTENCZmMzUnBiR3hWYzJWVmNtd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmtUMkpxSUQwZ2RHaHBjeTVrWlhObGNtbGhiR2w2WldSTWFYTjBXMmxrWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa1QySnFLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJKcVczQnliM0JPWVcxbFhTQTlJR1JQWW1vN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlwWkV4cGMzUXVjSFZ6YUNocFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFXUlBZbXBNYVhOMExuQjFjMmdvYjJKcUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5cFpGQnliM0JNYVhOMExuQjFjMmdvY0hKdmNFNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSEJ5YjNSdmRIbHdaUzVmWkdWelpYSnBZV3hwZW1WUWNtbHRhWFJwZG1WUFltcGxZM1FnUFNCbWRXNWpkR2x2YmlBb2FXNXpkR0Z1WTJVc0lITmxjbWxoYkdsNlpXUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJ3Y205d1RtRnRaU0JwYmlCelpYSnBZV3hwZW1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMlZ5YVdGc2FYcGxaQzVvWVhOUGQyNVFjbTl3WlhKMGVTaHdjbTl3VG1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NISnZjQ0E5SUhObGNtbGhiR2w2WldSYmNISnZjRTVoYldWZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjSEp2Y0NBaFBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5YjNCT1lXMWxJQ0U5UFNBblgxOTBlWEJsWDE4bkx5b2dKaVlnYXlBaFBTQW5YMTlwWkY5Zkp5b3ZLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5OMFlXNWpaVnR3Y205d1RtRnRaVjBnUFNCd2NtOXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0hKdmNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VORFgwVkVTVlJQVWlCOGZDQkRRMTlVUlZOVUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1ppNWZaR1Z6WlhKcFlXeHBlbVZQWW1wR2FXVnNaQ2hwYm5OMFlXNWpaU3dnY0hKdmNDd2djSEp2Y0U1aGJXVXNJSE5sYkdZdVgzUmhjbWRsZENBbUppQnBibk4wWVc1alpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaV3htTGw5a1pYTmxjbWxoYkdsNlpVOWlha1pwWld4a0tHbHVjM1JoYm1ObExDQndjbTl3TENCd2NtOXdUbUZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5OMFlXNWpaVnR3Y205d1RtRnRaVjBnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ0x5OGdablZ1WTNScGIyNGdYMk52YlhCcGJHVlVlWEJsWkU5aWFtVmpkQ0FvWVdOalpYTnpiM0lzSUd0c1lYTnpMQ0JqZEc5eVEyOWtaU2tnZTF4dUlDQWdJQzh2SUNBZ0lDQnBaaUFvYTJ4aGMzTWdQVDA5SUdOakxsWmxZeklwSUh0Y2JpQWdJQ0F2THlBZ0lDQWdJQ0FnSUhKbGRIVnliaUJnZTJBZ0sxeHVJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRzhrZTJGalkyVnpjMjl5ZlM1NFBYQnliM0F1ZUh4OE1EdGdJQ3RjYmlBZ0lDQXZMeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCdkpIdGhZMk5sYzNOdmNuMHVlVDF3Y205d0xubDhmREE3WUNBclhHNGdJQ0FnTHk4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWUgxZ08xeHVJQ0FnSUM4dklDQWdJQ0I5WEc0Z0lDQWdMeThnSUNBZ0lHVnNjMlVnYVdZZ0tHdHNZWE56SUQwOVBTQmpZeTVEYjJ4dmNpa2dlMXh1SUNBZ0lDOHZJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHQjdZQ0FyWEc0Z0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCdkpIdGhZMk5sYzNOdmNuMHVjajF3Y205d0xuSjhmREE3WUNBclhHNGdJQ0FnTHk4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQnZKSHRoWTJObGMzTnZjbjB1Wnoxd2NtOXdMbWQ4ZkRBN1lDQXJYRzRnSUNBZ0x5OGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0J2Skh0aFkyTmxjM052Y24wdVlqMXdjbTl3TG1KOGZEQTdZQ0FyWEc0Z0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCdkpIdGhZMk5sYzNOdmNuMHVZVDBvY0hKdmNDNWhQVDA5ZFc1a1pXWnBibVZrUHpJMU5UcHdjbTl3TG1FcE8yQWdLMXh1SUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQjlZRHRjYmlBZ0lDQXZMeUFnSUNBZ2ZWeHVJQ0FnSUM4dklDQWdJQ0JsYkhObElHbG1JQ2hyYkdGemN5QTlQVDBnWTJNdVUybDZaU2tnZTF4dUlDQWdJQzh2SUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0I3WUNBclhHNGdJQ0FnTHk4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQnZKSHRoWTJObGMzTnZjbjB1ZDJsa2RHZzljSEp2Y0M1M2FXUjBhSHg4TUR0Z0lDdGNiaUFnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRzhrZTJGalkyVnpjMjl5ZlM1b1pXbG5hSFE5Y0hKdmNDNW9aV2xuYUhSOGZEQTdZQ0FyWEc0Z0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZSDFnTzF4dUlDQWdJQzh2SUNBZ0lDQjlYRzRnSUNBZ0x5OGdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDOHZJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHQnpMbDlrWlhObGNtbGhiR2w2WlZSNWNHVmtUMkpxWldOMEtHOGtlMkZqWTJWemMyOXlmU3h3Y205d0xDUjdZM1J2Y2tOdlpHVjlLVHRnTzF4dUlDQWdJQzh2SUNBZ0lDQjlYRzRnSUNBZ0x5OGdmVnh1WEc0Z0lDQWdMeThnWkdWelpYSnBZV3hwZW1VZ1ZtRnNkV1ZVZVhCbFhHNGdJQ0FnY0hKdmRHOTBlWEJsTGw5a1pYTmxjbWxoYkdsNlpWUjVjR1ZrVDJKcVpXTjBJRDBnWm5WdVkzUnBiMjRnS0dsdWMzUmhibU5sTENCelpYSnBZV3hwZW1Wa0xDQnJiR0Z6Y3lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYTJ4aGMzTWdQVDA5SUdOakxsWmxZeklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1YzNSaGJtTmxMbmdnUFNCelpYSnBZV3hwZW1Wa0xuZ2dmSHdnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1YzNSaGJtTmxMbmtnUFNCelpYSnBZV3hwZW1Wa0xua2dmSHdnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hyYkdGemN5QTlQVDBnWTJNdVZtVmpNeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdGdVkyVXVlQ0E5SUhObGNtbGhiR2w2WldRdWVDQjhmQ0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdGdVkyVXVlU0E5SUhObGNtbGhiR2w2WldRdWVTQjhmQ0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdGdVkyVXVlaUE5SUhObGNtbGhiR2w2WldRdWVpQjhmQ0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR3RzWVhOeklEMDlQU0JqWXk1RGIyeHZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdGdVkyVXVjaUE5SUhObGNtbGhiR2w2WldRdWNpQjhmQ0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdGdVkyVXVaeUE5SUhObGNtbGhiR2w2WldRdVp5QjhmQ0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdGdVkyVXVZaUE5SUhObGNtbGhiR2w2WldRdVlpQjhmQ0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdFZ1BTQnpaWEpwWVd4cGVtVmtMbUU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibk4wWVc1alpTNWhJRDBnS0dFZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSURJMU5TQTZJR0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR3RzWVhOeklEMDlQU0JqWXk1VGFYcGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibk4wWVc1alpTNTNhV1IwYUNBOUlITmxjbWxoYkdsNlpXUXVkMmxrZEdnZ2ZId2dNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVjM1JoYm1ObExtaGxhV2RvZENBOUlITmxjbWxoYkdsNlpXUXVhR1ZwWjJoMElIeDhJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IyWVhJZ1JFVkdRVlZNVkNBOUlFRjBkSEl1UkVWTVNVMUZWRVZTSUNzZ0oyUmxabUYxYkhRbk8xeHVJQ0FnSUNBZ0lDQjJZWElnWVhSMGNuTWdQU0JCZEhSeUxtZGxkRU5zWVhOelFYUjBjbk1vYTJ4aGMzTXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1ptRnpkRVJsWm1sdVpXUlFjbTl3Y3lBOUlHdHNZWE56TGw5ZmNISnZjSE5mWHlCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU5aWFtVmpkQzVyWlhsektHbHVjM1JoYm1ObEtUc2dJQ0FnTHk4ZzZZR041WTZHSUdsdWMzUmhibU5sNzd5TTVhYUM1cDZjNVlXMzVweUo1N0c3NVo2TDc3eU01b21ONUxpTjVMeWE1b3FLSUY5ZmRIbHdaVjlmSU9TNW4raXZ1K2kvbSthZHBWeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR1poYzNSRVpXWnBibVZrVUhKdmNITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd2NtOXdUbUZ0WlNBOUlHWmhjM1JFWldacGJtVmtVSEp2Y0hOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkbUZzZFdVZ1BTQnpaWEpwWVd4cGVtVmtXM0J5YjNCT1lXMWxYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpTQTlQVDBnZFc1a1pXWnBibVZrSUh4OElDRnpaWEpwWVd4cGVtVmtMbWhoYzA5M2JsQnliM0JsY25SNUtIQnliM0JPWVcxbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUc1dmRDQnpaWEpwWVd4cGVtVmtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhKbFkyOTJaWElnZEc4Z1pHVm1ZWFZzZENCMllXeDFaU0JwYmlCV1lXeDFaVlI1Y0dVc0lHSmxZMkYxYzJVZ1pXeHBiV2x1WVhSbFpDQndjbTl3WlhKMGFXVnpJR1Z4ZFdGc2N5QjBiMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsMGN5QmtaV1poZFd4MElIWmhiSFZsSUdsdUlGWmhiSFZsVkhsd1pTd2dibTkwSUdSbFptRjFiSFFnZG1Gc2RXVWdhVzRnZFhObGNpQmpiR0Z6YzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxJRDBnUTBORGJHRnpjeTVuWlhSRVpXWmhkV3gwS0dGMGRISnpXM0J5YjNCT1lXMWxJQ3NnUkVWR1FWVk1WRjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFpoYkhWbElDRTlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWMzUmhibU5sVzNCeWIzQk9ZVzFsWFNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RME5mUlVSSlZFOVNJSHg4SUVORFgxUkZVMVFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlpHVnpaWEpwWVd4cGVtVlBZbXBHYVdWc1pDaHBibk4wWVc1alpTd2dkbUZzZFdVc0lIQnliM0JPWVcxbExDQjBhR2x6TGw5MFlYSm5aWFFnSmlZZ2FXNXpkR0Z1WTJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlpHVnpaWEpwWVd4cGVtVlBZbXBHYVdWc1pDaHBibk4wWVc1alpTd2dkbUZzZFdVc0lIQnliM0JPWVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibk4wWVc1alpWdHdjbTl3VG1GdFpWMGdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdaMWJtTjBhVzl1SUdOdmJYQnBiR1ZQWW1wbFkzUlVlWEJsU21sMElDaHpiM1Z5WTJWekxDQmtaV1poZFd4MFZtRnNkV1VzSUdGalkyVnpjMjl5Vkc5VFpYUXNJSEJ5YjNCT1lXMWxUR2wwWlhKaGJGUnZVMlYwTENCaGMzTjFiV1ZJWVhabFVISnZjRWxtU1hOV1lXeDFaU3dnYzNScGJHeFZjMlZWY213cElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dSbFptRjFiSFJXWVd4MVpTQnBibk4wWVc1alpXOW1JR05qTGxaaGJIVmxWSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ptRnpkQ0JqWVhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXRnpjM1Z0WlVoaGRtVlFjbTl3U1daSmMxWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyOTFjbU5sY3k1d2RYTm9LQ2RwWmlod2NtOXdLWHNuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqZEc5eVEyOWtaU0E5SUdwekxtZGxkRU5zWVhOelRtRnRaU2hrWldaaGRXeDBWbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzI5MWNtTmxjeTV3ZFhOb0tHQnpMbDlrWlhObGNtbGhiR2w2WlZSNWNHVmtUMkpxWldOMEtHOGtlMkZqWTJWemMyOXlWRzlUWlhSOUxIQnliM0FzSkh0amRHOXlRMjlrWlgwcE8yQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZoYzNOMWJXVklZWFpsVUhKdmNFbG1TWE5XWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE52ZFhKalpYTXVjSFZ6YUNnbmZXVnNjMlVnYnljZ0t5QmhZMk5sYzNOdmNsUnZVMlYwSUNzZ0p6MXVkV3hzT3ljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMjkxY21ObGN5NXdkWE5vS0NkcFppaHdjbTl3S1hzbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiM1Z5WTJWekxuQjFjMmdvSjNNdVgyUmxjMlZ5YVdGc2FYcGxUMkpxUm1sbGJHUW9ieXh3Y205d0xDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0U1aGJXVk1hWFJsY21Gc1ZHOVRaWFFnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0NoRFExOUZSRWxVVDFJZ2ZId2dRME5mVkVWVFZDa2dQeUFuTEhRbUptOHNKeUE2SUNjc2JuVnNiQ3duS1NBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaElYTjBhV3hzVlhObFZYSnNJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5azdKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpiM1Z5WTJWekxuQjFjMmdvSjMxbGJITmxJRzhuSUNzZ1lXTmpaWE56YjNKVWIxTmxkQ0FySUNjOWJuVnNiRHNuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQmpiMjF3YVd4bFJHVnpaWEpwWVd4cGVtVWdQU0JEUTE5VFZWQlFUMUpVWDBwSlZDQS9JR1oxYm1OMGFXOXVJQ2h6Wld4bUxDQnJiR0Z6Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnVkZsUVJTQTlJRUYwZEhJdVJFVk1TVTFGVkVWU0lDc2dKM1I1Y0dVbk8xeHVJQ0FnSUNBZ0lDQjJZWElnUlVSSlZFOVNYMDlPVEZrZ1BTQkJkSFJ5TGtSRlRFbE5SVlJGVWlBcklDZGxaR2wwYjNKUGJteDVKenRjYmlBZ0lDQWdJQ0FnZG1GeUlFUkZSa0ZWVEZRZ1BTQkJkSFJ5TGtSRlRFbE5SVlJGVWlBcklDZGtaV1poZFd4MEp6dGNiaUFnSUNBZ0lDQWdkbUZ5SUZOQlZrVmZWVkpNWDBGVFgwRlRVMFZVSUQwZ1FYUjBjaTVFUlV4SlRVVlVSVklnS3lBbmMyRjJaVlZ5YkVGelFYTnpaWFFuTzF4dUlDQWdJQ0FnSUNCMllYSWdSazlTVFVWU1RGbGZVMFZTU1VGTVNWcEZSRjlCVXlBOUlFRjBkSEl1UkVWTVNVMUZWRVZTSUNzZ0oyWnZjbTFsY214NVUyVnlhV0ZzYVhwbFpFRnpKenRjYmlBZ0lDQWdJQ0FnZG1GeUlHRjBkSEp6SUQwZ1FYUjBjaTVuWlhSRGJHRnpjMEYwZEhKektHdHNZWE56S1R0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnY0hKdmNITWdQU0JyYkdGemN5NWZYM1poYkhWbGMxOWZPMXh1SUNBZ0lDQWdJQ0F2THlCelpXeG1MQ0J2WW1vc0lITmxjbWxoYkdsNlpXUkVZWFJoTENCcmJHRnpjeXdnZEdGeVoyVjBYRzRnSUNBZ0lDQWdJSFpoY2lCemIzVnlZMlZ6SUQwZ1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSjNaaGNpQndjbTl3T3lkY2JpQWdJQ0FnSUNBZ1hUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdaaGMzUk5iMlJsSUQwZ2JXbHpZeTVDVlVsTVZFbE9YME5NUVZOVFNVUmZVa1V1ZEdWemRDaHFjeTVmWjJWMFEyeGhjM05KWkNocmJHRnpjeWtwTzF4dUlDQWdJQ0FnSUNBdkx5QnpiM1Z5WTJWekxuQjFjMmdvSjNaaGNpQjJZaXgyYml4MmN5eDJieXgyZFN4Mlpqc25LVHNnSUNBZ0x5OGdZbTl2YkdWaGJpd2diblZ0WW1WeUxDQnpkSEpwYm1jc0lHOWlhbVZqZEN3Z2RXNWtaV1pwYm1Wa0xDQm1kVzVqZEdsdmJseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQndJRDBnTURzZ2NDQThJSEJ5YjNCekxteGxibWQwYURzZ2NDc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY0hKdmNFNWhiV1VnUFNCd2NtOXdjMXR3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnb1EwTmZVRkpGVmtsRlZ5QjhmQ0FvUTBOZlJVUkpWRTlTSUNZbUlITmxiR1l1WDJsbmJtOXlaVVZrYVhSdmNrOXViSGtwS1NBbUppQmhkSFJ5YzF0d2NtOXdUbUZ0WlNBcklFVkVTVlJQVWw5UFRreFpYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsT3lBZ0lDOHZJSE5yYVhBZ1pXUnBkRzl5SUc5dWJIa2dhV1lnYVc0Z2NISmxkbWxsZDF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVdOalpYTnpiM0pVYjFObGRDd2djSEp2Y0U1aGJXVk1hWFJsY21Gc1ZHOVRaWFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUTBORGJHRnpjeTVKUkVWT1ZFbEdTVVZTWDFKRkxuUmxjM1FvY0hKdmNFNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjRTVoYldWTWFYUmxjbUZzVkc5VFpYUWdQU0FuWENJbklDc2djSEp2Y0U1aGJXVWdLeUFuWENJbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmpZMlZ6YzI5eVZHOVRaWFFnUFNBbkxpY2dLeUJ3Y205d1RtRnRaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCT1lXMWxUR2wwWlhKaGJGUnZVMlYwSUQwZ1EwTkRiR0Z6Y3k1bGMyTmhjR1ZHYjNKS1V5aHdjbTl3VG1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV05qWlhOemIzSlViMU5sZENBOUlDZGJKeUFySUhCeWIzQk9ZVzFsVEdsMFpYSmhiRlJ2VTJWMElDc2dKMTBuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVdOalpYTnpiM0pVYjBkbGRDQTlJR0ZqWTJWemMyOXlWRzlUWlhRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYUjBjbk5iY0hKdmNFNWhiV1VnS3lCR1QxSk5SVkpNV1Y5VFJWSkpRVXhKV2tWRVgwRlRYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQndjbTl3VG1GdFpWUnZVbVZoWkNBOUlHRjBkSEp6VzNCeWIzQk9ZVzFsSUNzZ1JrOVNUVVZTVEZsZlUwVlNTVUZNU1ZwRlJGOUJVMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFTkRRMnhoYzNNdVNVUkZUbFJKUmtsRlVsOVNSUzUwWlhOMEtIQnliM0JPWVcxbFZHOVNaV0ZrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWTJObGMzTnZjbFJ2UjJWMElEMGdKeTRuSUNzZ2NISnZjRTVoYldWVWIxSmxZV1E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFkyTmxjM052Y2xSdlIyVjBJRDBnSjFzbklDc2dRME5EYkdGemN5NWxjMk5oY0dWR2IzSktVeWh3Y205d1RtRnRaVlJ2VW1WaFpDa2dLeUFuWFNjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6YjNWeVkyVnpMbkIxYzJnb0ozQnliM0E5WkNjZ0t5QmhZMk5sYzNOdmNsUnZSMlYwSUNzZ0p6c25LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITnZkWEpqWlhNdWNIVnphQ2hnYVdZb2RIbHdaVzltSUNSN1EwTmZTbE5DSUh4OElFTkRYMUpWVGxSSlRVVWdQeUFuS0hCeWIzQXBKeUE2SUNkd2NtOXdKMzBoUFQxY0luVnVaR1ZtYVc1bFpGd2lLWHRnS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITjBhV3hzVlhObFZYSnNJRDBnWVhSMGNuTmJjSEp2Y0U1aGJXVWdLeUJUUVZaRlgxVlNURjlCVTE5QlUxTkZWRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJtZFc1amRHbHZiaUIxYm1SbFptbHVaV1FnYjJKcVpXTjBLRzUxYkd3cElITjBjbWx1WnlCaWIyOXNaV0Z1SUc1MWJXSmxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JsWm1GMWJIUldZV3gxWlNBOUlFTkRRMnhoYzNNdVoyVjBSR1ZtWVhWc2RDaGhkSFJ5YzF0d2NtOXdUbUZ0WlNBcklFUkZSa0ZWVEZSZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1ZWE4wVFc5a1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcGMxQnlhVzFwZEdsMlpWUjVjR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIVnpaWEpVZVhCbElEMGdZWFIwY25OYmNISnZjRTVoYldVZ0t5QlVXVkJGWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aR1ZtWVhWc2RGWmhiSFZsSUQwOVBTQjFibVJsWm1sdVpXUWdKaVlnZFhObGNsUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWE5RY21sdGFYUnBkbVZVZVhCbElEMGdkWE5sY2xSNWNHVWdQVDA5SUdOakxsTjBjbWx1WnlCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWeVZIbHdaU0E5UFQwZ1kyTXVTVzUwWldkbGNpQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVnlWSGx3WlNBOVBUMGdZMk11Um14dllYUWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYTmxjbFI1Y0dVZ1BUMDlJR05qTGtKdmIyeGxZVzQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR1ZtWVhWc2RGUjVjR1VnUFNCMGVYQmxiMllnWkdWbVlYVnNkRlpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYzFCeWFXMXBkR2wyWlZSNWNHVWdQU0FvWkdWbVlYVnNkRlI1Y0dVZ1BUMDlJQ2R6ZEhKcGJtY25JQ1ltSUNGemRHbHNiRlZ6WlZWeWJDa2dmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZEZSNWNHVWdQVDA5SUNkdWRXMWlaWEluSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUlVlWEJsSUQwOVBTQW5ZbTl2YkdWaGJpYzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHpVSEpwYldsMGFYWmxWSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YjNWeVkyVnpMbkIxYzJnb1lHOGtlMkZqWTJWemMyOXlWRzlUWlhSOVBYQnliM0E3WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjF3YVd4bFQySnFaV04wVkhsd1pVcHBkQ2h6YjNWeVkyVnpMQ0JrWldaaGRXeDBWbUZzZFdVc0lHRmpZMlZ6YzI5eVZHOVRaWFFzSUhCeWIzQk9ZVzFsVEdsMFpYSmhiRlJ2VTJWMExDQjBjblZsTENCemRHbHNiRlZ6WlZWeWJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMjkxY21ObGN5NXdkWE5vS0dCcFppaDBlWEJsYjJZZ0pIdERRMTlLVTBJZ2ZId2dRME5mVWxWT1ZFbE5SU0EvSUNjb2NISnZjQ2tuSURvZ0ozQnliM0FuZlNFOVBWd2liMkpxWldOMFhDSXBlMkFnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjI4bklDc2dZV05qWlhOemIzSlViMU5sZENBcklDYzljSEp2Y0RzbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjMxbGJITmxleWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJYQnBiR1ZQWW1wbFkzUlVlWEJsU21sMEtITnZkWEpqWlhNc0lHUmxabUYxYkhSV1lXeDFaU3dnWVdOalpYTnpiM0pVYjFObGRDd2djSEp2Y0U1aGJXVk1hWFJsY21Gc1ZHOVRaWFFzSUdaaGJITmxMQ0J6ZEdsc2JGVnpaVlZ5YkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyOTFjbU5sY3k1d2RYTm9LQ2Q5SnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpiM1Z5WTJWekxuQjFjMmdvSjMwbktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb1kyTXVhbk11YVhORGFHbHNaRU5zWVhOelQyWW9hMnhoYzNNc0lHTmpMbDlDWVhObFRtOWtaU2tnZkh3Z1kyTXVhbk11YVhORGFHbHNaRU5zWVhOelQyWW9hMnhoYzNNc0lHTmpMa052YlhCdmJtVnVkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoRFExOVFVa1ZXU1VWWElIeDhJQ2hEUTE5RlJFbFVUMUlnSmlZZ2MyVnNaaTVmYVdkdWIzSmxSV1JwZEc5eVQyNXNlU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiV0Y1VlhObFpFbHVVR1Z5YzJsemRGSnZiM1FnUFNCcWN5NXBjME5vYVd4a1EyeGhjM05QWmlocmJHRnpjeXdnWTJNdVRtOWtaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMWhlVlZ6WldSSmJsQmxjbk5wYzNSU2IyOTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnZkWEpqWlhNdWNIVnphQ2duWkM1ZmFXUW1KaWh2TGw5cFpEMWtMbDlwWkNrN0p5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMjkxY21ObGN5NXdkWE5vS0Nka0xsOXBaQ1ltS0c4dVgybGtQV1F1WDJsa0tUc25LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2NISnZjSE5iY0hKdmNITXViR1Z1WjNSb0lDMGdNVjBnUFQwOUlDZGZKR1Z5YVdGc2FYcGxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdSbFpYQWdZMjl3ZVNCdmNtbG5hVzVoYkNCelpYSnBZV3hwZW1Wa0lHUmhkR0ZjYmlBZ0lDQWdJQ0FnSUNBZ0lITnZkWEpqWlhNdWNIVnphQ2duYnk1ZkpHVnlhV0ZzYVhwbFpEMUtVMDlPTG5CaGNuTmxLRXBUVDA0dWMzUnlhVzVuYVdaNUtHUXBLVHNuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhCaGNuTmxJSFJvWlNCelpYSnBZV3hwZW1Wa0lHUmhkR0VnWVhNZ2NISnBiV2wwYVhabElHcGhkbUZ6WTNKcGNIUWdiMkpxWldOMExDQnpieUJwZEhNZ1gxOXBaRjlmSUhkcGJHd2dZbVVnWkdWeVpXWmxjbVZ1WTJWa1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YjNWeVkyVnpMbkIxYzJnb0ozTXVYMlJsYzJWeWFXRnNhWHBsVUhKcGJXbDBhWFpsVDJKcVpXTjBLRzh1WHlSbGNtbGhiR2w2WldRc1pDazdKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVaMWJtTjBhVzl1S0Nkekp5d2dKMjhuTENBblpDY3NJQ2RySnl3Z0ozUW5MQ0J6YjNWeVkyVnpMbXB2YVc0b0p5Y3BLVHRjYmlBZ0lDQjlJRG9nWm5WdVkzUnBiMjRnS0hObGJHWXNJR3RzWVhOektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbVlYTjBUVzlrWlNBOUlHMXBjMk11UWxWSlRGUkpUbDlEVEVGVFUwbEVYMUpGTG5SbGMzUW9hbk11WDJkbGRFTnNZWE56U1dRb2EyeGhjM01wS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE5vYjNWc1pFTnZjSGxKWkNBOUlHTmpMbXB6TG1selEyaHBiR1JEYkdGemMwOW1LR3RzWVhOekxDQmpZeTVmUW1GelpVNXZaR1VwSUh4OElHTmpMbXB6TG1selEyaHBiR1JEYkdGemMwOW1LR3RzWVhOekxDQmpZeTVEYjIxd2IyNWxiblFwTzF4dUlDQWdJQ0FnSUNCMllYSWdjMmh2ZFd4a1EyOXdlVkpoZDBSaGRHRTdYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlITnBiWEJzWlZCeWIzQnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6YVcxd2JHVlFjbTl3YzFSdlVtVmhaQ0E5SUhOcGJYQnNaVkJ5YjNCek8xeHVJQ0FnSUNBZ0lDQjJZWElnWVdSMllXNWpaV1JRY205d2N5QTlJRnRkTzF4dUlDQWdJQ0FnSUNCMllYSWdZV1IyWVc1alpXUlFjbTl3YzFSdlVtVmhaQ0E5SUdGa2RtRnVZMlZrVUhKdmNITTdYRzRnSUNBZ0lDQWdJSFpoY2lCaFpIWmhibU5sWkZCeWIzQnpWWE5sVlhKc0lEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhaaGNpQmhaSFpoYm1ObFpGQnliM0J6Vm1Gc2RXVlVlWEJsSUQwZ1cxMDdYRzVjYmlBZ0lDQWdJQ0FnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQndjbTl3Y3lBOUlHdHNZWE56TGw5ZmRtRnNkV1Z6WDE4N1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YUc5MWJHUkRiM0I1VW1GM1JHRjBZU0E5SUhCeWIzQnpXM0J5YjNCekxteGxibWQwYUNBdElERmRJRDA5UFNBblh5UmxjbWxoYkdsNlpXUW5PMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVhSMGNuTWdQU0JCZEhSeUxtZGxkRU5zWVhOelFYUjBjbk1vYTJ4aGMzTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRlJaVUVVZ1BTQkJkSFJ5TGtSRlRFbE5SVlJGVWlBcklDZDBlWEJsSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCRVJVWkJWVXhVSUQwZ1FYUjBjaTVFUlV4SlRVVlVSVklnS3lBblpHVm1ZWFZzZENjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1UwRldSVjlWVWt4ZlFWTmZRVk5UUlZRZ1BTQkJkSFJ5TGtSRlRFbE5SVlJGVWlBcklDZHpZWFpsVlhKc1FYTkJjM05sZENjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1JrOVNUVVZTVEZsZlUwVlNTVUZNU1ZwRlJGOUJVeUE5SUVGMGRISXVSRVZNU1UxRlZFVlNJQ3NnSjJadmNtMWxjbXg1VTJWeWFXRnNhWHBsWkVGekp6dGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2NDQTlJREE3SUhBZ1BDQndjbTl3Y3k1c1pXNW5kR2c3SUhBckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd2NtOXdUbUZ0WlNBOUlIQnliM0J6VzNCZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ3Y205d1RtRnRaVlJ2VW1WaFpDQTlJSEJ5YjNCT1lXMWxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaGRIUnljMXR3Y205d1RtRnRaU0FySUVaUFVrMUZVa3haWDFORlVrbEJURWxhUlVSZlFWTmRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JPWVcxbFZHOVNaV0ZrSUQwZ1lYUjBjbk5iY0hKdmNFNWhiV1VnS3lCR1QxSk5SVkpNV1Y5VFJWSkpRVXhKV2tWRVgwRlRYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITjBhV3hzVlhObFZYSnNJRDBnWVhSMGNuTmJjSEp2Y0U1aGJXVWdLeUJUUVZaRlgxVlNURjlCVTE5QlUxTkZWRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1puVnVZM1JwYjI0Z2RXNWtaV1pwYm1Wa0lHOWlhbVZqZENodWRXeHNLU0J6ZEhKcGJtY2dZbTl2YkdWaGJpQnVkVzFpWlhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR1ZtWVhWc2RGWmhiSFZsSUQwZ1EwTkRiR0Z6Y3k1blpYUkVaV1poZFd4MEtHRjBkSEp6VzNCeWIzQk9ZVzFsSUNzZ1JFVkdRVlZNVkYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJwYzFCeWFXMXBkR2wyWlZSNWNHVWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm1GemRFMXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhWelpYSlVlWEJsSUQwZ1lYUjBjbk5iY0hKdmNFNWhiV1VnS3lCVVdWQkZYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JsWm1GMWJIUldZV3gxWlNBOVBUMGdkVzVrWldacGJtVmtJQ1ltSUhWelpYSlVlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGMxQnlhVzFwZEdsMlpWUjVjR1VnUFNCMWMyVnlWSGx3WlNBOVBUMGdZMk11VTNSeWFXNW5JSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWeVZIbHdaU0E5UFQwZ1kyTXVTVzUwWldkbGNpQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sY2xSNWNHVWdQVDA5SUdOakxrWnNiMkYwSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVnlWSGx3WlNBOVBUMGdZMk11UW05dmJHVmhianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrWldaaGRXeDBWSGx3WlNBOUlIUjVjR1Z2WmlCa1pXWmhkV3gwVm1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjMUJ5YVcxcGRHbDJaVlI1Y0dVZ1BTQW9aR1ZtWVhWc2RGUjVjR1VnUFQwOUlDZHpkSEpwYm1jbklDWW1JQ0Z6ZEdsc2JGVnpaVlZ5YkNrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhSVWVYQmxJRDA5UFNBbmJuVnRZbVZ5SnlCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZEZSNWNHVWdQVDA5SUNkaWIyOXNaV0Z1Snp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1ptRnpkRTF2WkdVZ0ppWWdhWE5RY21sdGFYUnBkbVZVZVhCbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbTl3VG1GdFpWUnZVbVZoWkNBaFBUMGdjSEp2Y0U1aGJXVWdKaVlnYzJsdGNHeGxVSEp2Y0hOVWIxSmxZV1FnUFQwOUlITnBiWEJzWlZCeWIzQnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVcxd2JHVlFjbTl3YzFSdlVtVmhaQ0E5SUhOcGJYQnNaVkJ5YjNCekxuTnNhV05sS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MybHRjR3hsVUhKdmNITXVjSFZ6YUNod2NtOXdUbUZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemFXMXdiR1ZRY205d2MxUnZVbVZoWkNBaFBUMGdjMmx0Y0d4bFVISnZjSE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOcGJYQnNaVkJ5YjNCelZHOVNaV0ZrTG5CMWMyZ29jSEp2Y0U1aGJXVlViMUpsWVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jSEp2Y0U1aGJXVlViMUpsWVdRZ0lUMDlJSEJ5YjNCT1lXMWxJQ1ltSUdGa2RtRnVZMlZrVUhKdmNITlViMUpsWVdRZ1BUMDlJR0ZrZG1GdVkyVmtVSEp2Y0hNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmtkbUZ1WTJWa1VISnZjSE5VYjFKbFlXUWdQU0JoWkhaaGJtTmxaRkJ5YjNCekxuTnNhV05sS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXUjJZVzVqWldSUWNtOXdjeTV3ZFhOb0tIQnliM0JPWVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRmtkbUZ1WTJWa1VISnZjSE5VYjFKbFlXUWdJVDA5SUdGa2RtRnVZMlZrVUhKdmNITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZrZG1GdVkyVmtVSEp2Y0hOVWIxSmxZV1F1Y0hWemFDaHdjbTl3VG1GdFpWUnZVbVZoWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXUjJZVzVqWldSUWNtOXdjMVZ6WlZWeWJDNXdkWE5vS0hOMGFXeHNWWE5sVlhKc0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdSMllXNWpaV1JRY205d2MxWmhiSFZsVkhsd1pTNXdkWE5vS0Noa1pXWmhkV3gwVm1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUJqWXk1V1lXeDFaVlI1Y0dVcElDWW1JR1JsWm1GMWJIUldZV3gxWlM1amIyNXpkSEoxWTNSdmNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLU2dwTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb2N5d2dieXdnWkN3Z2F5d2dkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J6YVcxd2JHVlFjbTl3Y3k1c1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd2NtOXdJRDBnWkZ0emFXMXdiR1ZRY205d2MxUnZVbVZoWkZ0cFhWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCeWIzQWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2VzNOcGJYQnNaVkJ5YjNCelcybGRYU0E5SUhCeWIzQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCaFpIWmhibU5sWkZCeWIzQnpMbXhsYm1kMGFEc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEJ5YjNCT1lXMWxJRDBnWVdSMllXNWpaV1JRY205d2MxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NISnZjQ0E5SUdSYllXUjJZVzVqWldSUWNtOXdjMVJ2VW1WaFpGdHBYVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnliM0FnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZtWVhOMFRXOWtaU0FtSmlCMGVYQmxiMllnY0hKdmNDQWhQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMXR3Y205d1RtRnRaVjBnUFNCd2NtOXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ptRnpkRTF2WkdVZ0tITnZJSGRwYkd3Z2JtOTBJSE5wYlhCc1pWQnliM0FwSUc5eUlHOWlhbVZqZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnZG1Gc2RXVlVlWEJsUTNSdmNpQTlJR0ZrZG1GdVkyVmtVSEp2Y0hOV1lXeDFaVlI1Y0dWYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlZSNWNHVkRkRzl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9abUZ6ZEUxdlpHVWdmSHdnY0hKdmNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhNdVgyUmxjMlZ5YVdGc2FYcGxWSGx3WldSUFltcGxZM1FvYjF0d2NtOXdUbUZ0WlYwc0lIQnliM0FzSUhaaGJIVmxWSGx3WlVOMGIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMXR3Y205d1RtRnRaVjBnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5YjNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6TGw5a1pYTmxjbWxoYkdsNlpVOWlha1pwWld4a0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3VG1GdFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tFTkRYMFZFU1ZSUFVpQjhmQ0JEUTE5VVJWTlVLU0EvSUNoMElDWW1JRzhwSURvZ2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1IyWVc1alpXUlFjbTl3YzFWelpWVnliRnRwWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMXR3Y205d1RtRnRaVjBnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOb2IzVnNaRU52Y0hsSlpDQW1KaUJrTGw5cFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzh1WDJsa0lEMGdaQzVmYVdRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJodmRXeGtRMjl3ZVZKaGQwUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QmtaV1Z3SUdOdmNIa2diM0pwWjJsdVlXd2djMlZ5YVdGc2FYcGxaQ0JrWVhSaFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2J5NWZKR1Z5YVdGc2FYcGxaQ0E5SUVwVFQwNHVjR0Z5YzJVb1NsTlBUaTV6ZEhKcGJtZHBabmtvWkNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSEJoY25ObElIUm9aU0J6WlhKcFlXeHBlbVZrSUdSaGRHRWdZWE1nY0hKcGJXbDBhWFpsSUdwaGRtRnpZM0pwY0hRZ2IySnFaV04wTENCemJ5QnBkSE1nWDE5cFpGOWZJSGRwYkd3Z1ltVWdaR1Z5WldabGNtVnVZMlZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY3k1ZlpHVnpaWEpwWVd4cGVtVlFjbWx0YVhScGRtVlBZbXBsWTNRb2J5NWZKR1Z5YVdGc2FYcGxaQ3dnWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWm5WdVkzUnBiMjRnZFc1c2FXNXJWVzUxYzJWa1VISmxabUZpSUNoelpXeG1MQ0J6WlhKcFlXeHBlbVZrTENCdlltb3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIVjFhV1FnUFNCelpYSnBZV3hwZW1Wa1d5ZGhjM05sZENkZElDWW1JSE5sY21saGJHbDZaV1JiSjJGemMyVjBKMTB1WDE5MWRXbGtYMTg3WEc0Z0lDQWdJQ0FnSUdsbUlDaDFkV2xrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JHRnpkQ0E5SUhObGJHWXVjbVZ6ZFd4MExuVjFhV1JNYVhOMExteGxibWQwYUNBdElERTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMlZzWmk1eVpYTjFiSFF1ZFhWcFpFeHBjM1JiYkdGemRGMGdQVDA5SUhWMWFXUWdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxuSmxjM1ZzZEM1MWRXbGtUMkpxVEdsemRGdHNZWE4wWFNBOVBUMGdiMkpxSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTV5WlhOMWJIUXVkWFZwWkZCeWIzQk1hWE4wVzJ4aGMzUmRJRDA5UFNBbllYTnpaWFFuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTV5WlhOMWJIUXVkWFZwWkV4cGMzUXVjRzl3S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTV5WlhOMWJIUXVkWFZwWkU5aWFreHBjM1F1Y0c5d0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1eVpYTjFiSFF1ZFhWcFpGQnliM0JNYVhOMExuQnZjQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHUmxZblZuUlc1MlQyNXNlVWx1Wm04Z1BTQW5SbUZwYkdWa0lIUnZJSE5yYVhBZ2NISmxabUZpSUdGemMyVjBJSGRvYVd4bElHUmxjMlZ5YVdGc2FYcHBibWNnVUhKbFptRmlTVzVtYnljN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyTXVkMkZ5Ymloa1pXSjFaMFZ1ZGs5dWJIbEpibVp2S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR1oxYm1OMGFXOXVJRjlrWlhObGNtbGhiR2w2WlVacGNtVkRiR0Z6Y3lBb2MyVnNaaXdnYjJKcUxDQnpaWEpwWVd4cGVtVmtMQ0JyYkdGemN5d2dkR0Z5WjJWMEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCa1pYTmxjbWxoYkdsNlpUdGNiaUFnSUNBZ0lDQWdhV1lnS0d0c1lYTnpMbWhoYzA5M2JsQnliM0JsY25SNUtDZGZYMlJsYzJWeWFXRnNhWHBsWDE4bktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVnpaWEpwWVd4cGVtVWdQU0JyYkdGemN5NWZYMlJsYzJWeWFXRnNhWHBsWDE4N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWlhObGNtbGhiR2w2WlNBOUlHTnZiWEJwYkdWRVpYTmxjbWxoYkdsNlpTaHpaV3htTENCcmJHRnpjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJwWmlBb1EwTmZWRVZUVkNBbUppQWhhWE5RYUdGdWRHOXRTbE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQmpZeTVzYjJjb1pHVnpaWEpwWVd4cGVtVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FuTXVkbUZzZFdVb2EyeGhjM01zSUNkZlgyUmxjMlZ5YVdGc2FYcGxYMThuTENCa1pYTmxjbWxoYkdsNlpTd2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaR1Z6WlhKcFlXeHBlbVVvYzJWc1ppd2diMkpxTENCelpYSnBZV3hwZW1Wa0xDQnJiR0Z6Y3l3Z2RHRnlaMlYwS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdhV1lnY0hKbGRtbGxkeUJ2Y2lCaWRXbHNaQ0IzYjNKclpYSmNiaUFnSUNBZ0lDQWdhV1lnS0VORFgxQlNSVlpKUlZjZ2ZId2dLRU5EWDBWRVNWUlBVaUFtSmlCelpXeG1MbDlwWjI1dmNtVkZaR2wwYjNKUGJteDVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d0c1lYTnpJRDA5UFNCall5NWZVSEpsWm1GaVNXNW1ieUFtSmlBaGIySnFMbk41Ym1NcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFibXhwYm10VmJuVnpaV1JRY21WbVlXSW9jMlZzWml3Z2MyVnlhV0ZzYVhwbFpDd2diMkpxS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJRjlFWlhObGNtbGhiR2w2WlhJdWNHOXZiQ0E5SUc1bGR5QnFjeTVRYjI5c0tHWjFibU4wYVc5dUlDaHZZbW9wSUh0Y2JpQWdJQ0FnSUNBZ2IySnFMbkpsYzNWc2RDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lHOWlhaTVqZFhOMGIyMUZibllnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0J2WW1vdVpHVnpaWEpwWVd4cGVtVmtUR2x6ZEM1c1pXNW5kR2dnUFNBd08xeHVJQ0FnSUNBZ0lDQnZZbW91WkdWelpYSnBZV3hwZW1Wa1JHRjBZU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJRzlpYWk1ZlkyeGhjM05HYVc1a1pYSWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQnBaaUFvUTBOZlJFVldLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZZbW91WDNSaGNtZGxkQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYjJKcUxsOXBaRXhwYzNRdWJHVnVaM1JvSUQwZ01EdGNiaUFnSUNBZ0lDQWdiMkpxTGw5cFpFOWlha3hwYzNRdWJHVnVaM1JvSUQwZ01EdGNiaUFnSUNBZ0lDQWdiMkpxTGw5cFpGQnliM0JNYVhOMExteGxibWQwYUNBOUlEQTdYRzRnSUNBZ2ZTd2dNU2s3WEc1Y2JpQWdJQ0JmUkdWelpYSnBZV3hwZW1WeUxuQnZiMnd1WjJWMElEMGdablZ1WTNScGIyNGdLSEpsYzNWc2RDd2dkR0Z5WjJWMExDQmpiR0Z6YzBacGJtUmxjaXdnWTNWemRHOXRSVzUyTENCcFoyNXZjbVZGWkdsMGIzSlBibXg1S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJqWVdOb1pTQTlJSFJvYVhNdVgyZGxkQ2dwTzF4dUlDQWdJQ0FnSUNCcFppQW9ZMkZqYUdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxMbkpsYzNWc2RDQTlJSEpsYzNWc2REdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxMbU4xYzNSdmJVVnVkaUE5SUdOMWMzUnZiVVZ1ZGp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oWTJobExsOWpiR0Z6YzBacGJtUmxjaUE5SUdOc1lYTnpSbWx1WkdWeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFTkRYMFJGVmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhZMmhsTGw5MFlYSm5aWFFnUFNCMFlYSm5aWFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVXVYMmxuYm05eVpVVmthWFJ2Y2s5dWJIa2dQU0JwWjI1dmNtVkZaR2wwYjNKUGJteDVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCZlJHVnpaWEpwWVd4cGVtVnlLSEpsYzNWc2RDd2dkR0Z5WjJWMExDQmpiR0Z6YzBacGJtUmxjaXdnWTNWemRHOXRSVzUyTENCcFoyNXZjbVZGWkdsMGIzSlBibXg1S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNiaUFnSUNCeVpYUjFjbTRnWDBSbGMyVnlhV0ZzYVhwbGNqdGNibjBwS0NrN1hHNWNiaThxS2x4dUlDb2dRRzF2WkhWc1pTQmpZMXh1SUNvdlhHNWNiaThxS2x4dUlDb2dJU05sYmlCRVpYTmxjbWxoYkdsNlpTQnFjMjl1SUhSdklHTmpMa0Z6YzJWMFhHNGdLaUFoSTNwb0lPV3doaUJLVTA5T0lPV1BqZVc2aitXSWwrV01sdVM0dXVXdnVlaXhvZVd1bnVTK2krT0FnbHh1SUNwY2JpQXFJT1c5aythTWgrV3VtdVM2aGlCMFlYSm5aWFFnNllDSjZhRzU1cGUyNzd5TTVhYUM1cDZjSUhSaGNtZGxkQ0RsdkpYbmxLam5tb1RsaGJibHJvTWdZWE56WlhRZzU1cUVJSFYxYVdRZzVMaU41WStZNzd5TTVZaVo1TGlONUx5YTVwUzU1WStZSUhSaGNtZGxkQ0RscjdrZ1lYTnpaWFFnNTVxRTVieVY1NVNvNzd5TVhHNGdLaURrdVova3VJM2t2SnJsc0lZZ2RYVnBaQ0RrdjUzbHJaamxpTEFnY21WemRXeDBJT1d2dWVpeG9lUzRyZU9BZ2x4dUlDcGNiaUFxSUVCdFpYUm9iMlFnWkdWelpYSnBZV3hwZW1WY2JpQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZFOWlhbVZqZEgwZ1pHRjBZU0F0SUhSb1pTQnpaWEpwWVd4cGVtVmtJR05qTGtGemMyVjBJR3B6YjI0Z2MzUnlhVzVuSUc5eUlHcHpiMjRnYjJKcVpXTjBMbHh1SUNvZ1FIQmhjbUZ0SUh0RVpYUmhhV3h6ZlNCYlpHVjBZV2xzYzEwZ0xTQmhaR1JwZEdsdmJtRnNJR3h2WVdScGJtY2djbVZ6ZFd4MFhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdXMjl3ZEdsdmJuTmRYRzRnS2lCQWNtVjBkWEp1SUh0dlltcGxZM1I5SUhSb1pTQnRZV2x1SUdSaGRHRW9ZWE56WlhRcFhHNGdLaTljYm1OakxtUmxjMlZ5YVdGc2FYcGxJRDBnWm5WdVkzUnBiMjRnS0dSaGRHRXNJR1JsZEdGcGJITXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JpQWdJQ0IyWVhJZ1kyeGhjM05HYVc1a1pYSWdQU0J2Y0hScGIyNXpMbU5zWVhOelJtbHVaR1Z5SUh4OElHcHpMbDluWlhSRGJHRnpjMEo1U1dRN1hHNGdJQ0FnTHk4ZzVaQ3Y1NVNvSUdOeVpXRjBaVUZ6YzJWMFVtVm1jeURsa0k3dnZJemxwb0xtbnB6bW5Ja2dkWEpzSU9XeG51YUFwK1dJbWVTOG11aWlxK2U3bitTNGdPVzh1dVdJdHVpdXZ1ZTlydVM0dWlCN0lIVjFhV1E2SUNkNGVIZ25JSDN2dkl6bHY0WHBvYnZsa0k3cG5hTGxobzNuaWJubXJvcmxwSVRua0laY2JpQWdJQ0IyWVhJZ1kzSmxZWFJsUVhOelpYUlNaV1p6SUQwZ2IzQjBhVzl1Y3k1amNtVmhkR1ZCYzNObGRGSmxabk1nZkh3Z1kyTXVjM2x6TG5Cc1lYUm1iM0p0SUQwOVBTQmpZeTV6ZVhNdVJVUkpWRTlTWDBOUFVrVTdYRzRnSUNBZ2RtRnlJSFJoY21kbGRDQTlJQ2hEUTE5RlJFbFVUMUlnZkh3Z1EwTmZWRVZUVkNrZ0ppWWdiM0IwYVc5dWN5NTBZWEpuWlhRN1hHNGdJQ0FnZG1GeUlHTjFjM1J2YlVWdWRpQTlJRzl3ZEdsdmJuTXVZM1Z6ZEc5dFJXNTJPMXh1SUNBZ0lIWmhjaUJwWjI1dmNtVkZaR2wwYjNKUGJteDVJRDBnYjNCMGFXOXVjeTVwWjI1dmNtVkZaR2wwYjNKUGJteDVPMXh1WEc0Z0lDQWdhV1lnS0VORFgwVkVTVlJQVWlBbUppQkNkV1ptWlhJdWFYTkNkV1ptWlhJb1pHRjBZU2twSUh0Y2JpQWdJQ0FnSUNBZ1pHRjBZU0E5SUdSaGRHRXVkRzlUZEhKcGJtY29LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1JoZEdFZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUdSaGRHRWdQU0JLVTA5T0xuQmhjbk5sS0dSaGRHRXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZkbUZ5SUc5c1pFcHpiMjRnUFNCS1UwOU9Mbk4wY21sdVoybG1lU2hrWVhSaExDQnVkV3hzTENBeUtUdGNibHh1SUNBZ0lIWmhjaUIwWlcxd1JHVjBZV2xzY3lBOUlDRmtaWFJoYVd4ek8xeHVJQ0FnSUdSbGRHRnBiSE1nUFNCa1pYUmhhV3h6SUh4OElFUmxkR0ZwYkhNdWNHOXZiQzVuWlhRb0tUdGNiaUFnSUNCMllYSWdaR1Z6WlhKcFlXeHBlbVZ5SUQwZ1gwUmxjMlZ5YVdGc2FYcGxjaTV3YjI5c0xtZGxkQ2hrWlhSaGFXeHpMQ0IwWVhKblpYUXNJR05zWVhOelJtbHVaR1Z5TENCamRYTjBiMjFGYm5Zc0lHbG5ibTl5WlVWa2FYUnZjazl1YkhrcE8xeHVYRzRnSUNBZ1kyTXVaMkZ0WlM1ZmFYTkRiRzl1YVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0IyWVhJZ2NtVnpJRDBnWkdWelpYSnBZV3hwZW1WeUxtUmxjMlZ5YVdGc2FYcGxLR1JoZEdFcE8xeHVJQ0FnSUdOakxtZGhiV1V1WDJselEyeHZibWx1WnlBOUlHWmhiSE5sTzF4dVhHNGdJQ0FnWDBSbGMyVnlhV0ZzYVhwbGNpNXdiMjlzTG5CMWRDaGtaWE5sY21saGJHbDZaWElwTzF4dUlDQWdJR2xtSUNoamNtVmhkR1ZCYzNObGRGSmxabk1wSUh0Y2JpQWdJQ0FnSUNBZ1pHVjBZV2xzY3k1aGMzTnBaMjVCYzNObGRITkNlU2hGWkdsMGIzSXVjMlZ5YVdGc2FYcGxMbUZ6UVhOelpYUXBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kR1Z0Y0VSbGRHRnBiSE1wSUh0Y2JpQWdJQ0FnSUNBZ1JHVjBZV2xzY3k1d2IyOXNMbkIxZENoa1pYUmhhV3h6S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2TDNaaGNpQmhablJsY2twemIyNGdQU0JLVTA5T0xuTjBjbWx1WjJsbWVTaGtZWFJoTENCdWRXeHNMQ0F5S1R0Y2JpQWdJQ0F2TDJsbUlDaHZiR1JLYzI5dUlDRTlQU0JoWm5SbGNrcHpiMjRwSUh0Y2JpQWdJQ0F2THlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owcFRUMDRnVTBoUFZVeEVJRzV2ZENCamFHRnVaMlZrSnlrN1hHNGdJQ0FnTHk5OVhHNWNiaUFnSUNCeVpYUjFjbTRnY21Wek8xeHVmVHRjYmx4dVkyTXVaR1Z6WlhKcFlXeHBlbVV1UkdWMFlXbHNjeUE5SUVSbGRHRnBiSE03WEc1all5NWtaWE5sY21saGJHbDZaUzV5WlhCdmNuUk5hWE56YVc1blEyeGhjM01nUFNCbWRXNWpkR2x2YmlBb2FXUXBJSHRjYmlBZ0lDQnBaaUFvUTBOZlJVUkpWRTlTSUNZbUlFVmthWFJ2Y2k1VmRHbHNjeTVWZFdsa1ZYUnBiSE11YVhOVmRXbGtLR2xrS1NrZ2UxeHVJQ0FnSUNBZ0lDQnBaQ0E5SUVWa2FYUnZjaTVWZEdsc2N5NVZkV2xrVlhScGJITXVaR1ZqYjIxd2NtVnpjMVYxYVdRb2FXUXBPMXh1SUNBZ0lDQWdJQ0JqWXk1M1lYSnVTVVFvTlRNd01Td2dhV1FwTzF4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1kyTXVkMkZ5YmtsRUtEVXpNRElzSUdsa0tUdGNiaUFnSUNCOVhHNTlPeUpkZlE9PSJdfQ==