(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCInputManager.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var macro = require('./CCMacro');
        var sys = require('./CCSys');
        var eventManager = require('../event-manager');
        var TOUCH_TIMEOUT = macro.TOUCH_TIMEOUT;
        var _vec2 = cc.v2();
        var inputManager = {
            _mousePressed: false,
            _isRegisterEvent: false,
            _preTouchPoint: cc.v2(0, 0),
            _prevMousePoint: cc.v2(0, 0),
            _preTouchPool: [],
            _preTouchPoolPointer: 0,
            _touches: [],
            _touchesIntegerDict: {},
            _indexBitsUsed: 0,
            _maxTouches: 8,
            _accelEnabled: false,
            _accelInterval: 1 / 5,
            _accelMinus: 1,
            _accelCurTime: 0,
            _acceleration: null,
            _accelDeviceEvent: null,
            _getUnUsedIndex: function _getUnUsedIndex() {
                var temp = this._indexBitsUsed;
                var now = cc.sys.now();
                for (var i = 0; i < this._maxTouches; i++) {
                    if (!(temp & 1)) {
                        this._indexBitsUsed |= 1 << i;
                        return i;
                    } else {
                        var touch = this._touches[i];
                        if (now - touch._lastModified > TOUCH_TIMEOUT) {
                            this._removeUsedIndexBit(i);
                            delete this._touchesIntegerDict[touch.getID()];
                            return i;
                        }
                    }
                    temp >>= 1;
                }
                return -1;
            },
            _removeUsedIndexBit: function _removeUsedIndexBit(index) {
                if (index < 0 || index >= this._maxTouches)
                    return;
                var temp = 1 << index;
                temp = ~temp;
                this._indexBitsUsed &= temp;
            },
            _glView: null,
            handleTouchesBegin: function handleTouchesBegin(touches) {
                var selTouch = void 0, index = void 0, curTouch = void 0, touchID = void 0, handleTouches = [], locTouchIntDict = this._touchesIntegerDict, now = sys.now();
                for (var i = 0, len = touches.length; i < len; i++) {
                    selTouch = touches[i];
                    touchID = selTouch.getID();
                    index = locTouchIntDict[touchID];
                    if (index == null) {
                        var unusedIndex = this._getUnUsedIndex();
                        if (unusedIndex === -1) {
                            cc.logID(2300, unusedIndex);
                            continue;
                        }
                        curTouch = this._touches[unusedIndex] = new cc.Touch(selTouch._point.x, selTouch._point.y, selTouch.getID());
                        curTouch._lastModified = now;
                        curTouch._setPrevPoint(selTouch._prevPoint);
                        locTouchIntDict[touchID] = unusedIndex;
                        handleTouches.push(curTouch);
                    }
                }
                if (handleTouches.length > 0) {
                    this._glView._convertTouchesWithScale(handleTouches);
                    var touchEvent = new cc.Event.EventTouch(handleTouches);
                    touchEvent._eventCode = cc.Event.EventTouch.BEGAN;
                    eventManager.dispatchEvent(touchEvent);
                }
            },
            handleTouchesMove: function handleTouchesMove(touches) {
                var selTouch = void 0, index = void 0, touchID = void 0, handleTouches = [], locTouches = this._touches, now = sys.now();
                for (var i = 0, len = touches.length; i < len; i++) {
                    selTouch = touches[i];
                    touchID = selTouch.getID();
                    index = this._touchesIntegerDict[touchID];
                    if (index == null) {
                        continue;
                    }
                    if (locTouches[index]) {
                        locTouches[index]._setPoint(selTouch._point);
                        locTouches[index]._setPrevPoint(selTouch._prevPoint);
                        locTouches[index]._lastModified = now;
                        handleTouches.push(locTouches[index]);
                    }
                }
                if (handleTouches.length > 0) {
                    this._glView._convertTouchesWithScale(handleTouches);
                    var touchEvent = new cc.Event.EventTouch(handleTouches);
                    touchEvent._eventCode = cc.Event.EventTouch.MOVED;
                    eventManager.dispatchEvent(touchEvent);
                }
            },
            handleTouchesEnd: function handleTouchesEnd(touches) {
                var handleTouches = this.getSetOfTouchesEndOrCancel(touches);
                if (handleTouches.length > 0) {
                    this._glView._convertTouchesWithScale(handleTouches);
                    var touchEvent = new cc.Event.EventTouch(handleTouches);
                    touchEvent._eventCode = cc.Event.EventTouch.ENDED;
                    eventManager.dispatchEvent(touchEvent);
                }
                this._preTouchPool.length = 0;
            },
            handleTouchesCancel: function handleTouchesCancel(touches) {
                var handleTouches = this.getSetOfTouchesEndOrCancel(touches);
                if (handleTouches.length > 0) {
                    this._glView._convertTouchesWithScale(handleTouches);
                    var touchEvent = new cc.Event.EventTouch(handleTouches);
                    touchEvent._eventCode = cc.Event.EventTouch.CANCELLED;
                    eventManager.dispatchEvent(touchEvent);
                }
                this._preTouchPool.length = 0;
            },
            getSetOfTouchesEndOrCancel: function getSetOfTouchesEndOrCancel(touches) {
                var selTouch = void 0, index = void 0, touchID = void 0, handleTouches = [], locTouches = this._touches, locTouchesIntDict = this._touchesIntegerDict;
                for (var i = 0, len = touches.length; i < len; i++) {
                    selTouch = touches[i];
                    touchID = selTouch.getID();
                    index = locTouchesIntDict[touchID];
                    if (index == null) {
                        continue;
                    }
                    if (locTouches[index]) {
                        locTouches[index]._setPoint(selTouch._point);
                        locTouches[index]._setPrevPoint(selTouch._prevPoint);
                        handleTouches.push(locTouches[index]);
                        this._removeUsedIndexBit(index);
                        delete locTouchesIntDict[touchID];
                    }
                }
                return handleTouches;
            },
            getHTMLElementPosition: function getHTMLElementPosition(element) {
                if (CC_WECHATGAME) {
                    return {
                        left: 0,
                        top: 0,
                        width: window.innerWidth,
                        height: window.innerHeight
                    };
                }
                var docElem = document.documentElement;
                var leftOffset = window.pageXOffset - docElem.clientLeft;
                var topOffset = window.pageYOffset - docElem.clientTop;
                if (element.getBoundingClientRect) {
                    var box = element.getBoundingClientRect();
                    return {
                        left: box.left + leftOffset,
                        top: box.top + topOffset,
                        width: box.width,
                        height: box.height
                    };
                } else {
                    if (element instanceof HTMLCanvasElement) {
                        return {
                            left: leftOffset,
                            top: topOffset,
                            width: element.width,
                            height: element.height
                        };
                    } else {
                        return {
                            left: leftOffset,
                            top: topOffset,
                            width: parseInt(element.style.width),
                            height: parseInt(element.style.height)
                        };
                    }
                }
            },
            getPreTouch: function getPreTouch(touch) {
                var preTouch = null;
                var locPreTouchPool = this._preTouchPool;
                var id = touch.getID();
                for (var i = locPreTouchPool.length - 1; i >= 0; i--) {
                    if (locPreTouchPool[i].getID() === id) {
                        preTouch = locPreTouchPool[i];
                        break;
                    }
                }
                if (!preTouch)
                    preTouch = touch;
                return preTouch;
            },
            setPreTouch: function setPreTouch(touch) {
                var find = false;
                var locPreTouchPool = this._preTouchPool;
                var id = touch.getID();
                for (var i = locPreTouchPool.length - 1; i >= 0; i--) {
                    if (locPreTouchPool[i].getID() === id) {
                        locPreTouchPool[i] = touch;
                        find = true;
                        break;
                    }
                }
                if (!find) {
                    if (locPreTouchPool.length <= 50) {
                        locPreTouchPool.push(touch);
                    } else {
                        locPreTouchPool[this._preTouchPoolPointer] = touch;
                        this._preTouchPoolPointer = (this._preTouchPoolPointer + 1) % 50;
                    }
                }
            },
            getTouchByXY: function getTouchByXY(tx, ty, pos) {
                var locPreTouch = this._preTouchPoint;
                var location = this._glView.convertToLocationInView(tx, ty, pos);
                var touch = new cc.Touch(location.x, location.y, 0);
                touch._setPrevPoint(locPreTouch.x, locPreTouch.y);
                locPreTouch.x = location.x;
                locPreTouch.y = location.y;
                return touch;
            },
            getMouseEvent: function getMouseEvent(location, pos, eventType) {
                var locPreMouse = this._prevMousePoint;
                var mouseEvent = new cc.Event.EventMouse(eventType);
                mouseEvent._setPrevCursor(locPreMouse.x, locPreMouse.y);
                locPreMouse.x = location.x;
                locPreMouse.y = location.y;
                this._glView._convertMouseToLocationInView(locPreMouse, pos);
                mouseEvent.setLocation(locPreMouse.x, locPreMouse.y);
                return mouseEvent;
            },
            getPointByEvent: function getPointByEvent(event, pos) {
                if (event.pageX != null)
                    return {
                        x: event.pageX,
                        y: event.pageY
                    };
                if (CC_WECHATGAME) {
                    pos.left = 0;
                    pos.top = 0;
                } else {
                    pos.left -= document.body.scrollLeft;
                    pos.top -= document.body.scrollTop;
                }
                return {
                    x: event.clientX,
                    y: event.clientY
                };
            },
            getTouchesByEvent: function getTouchesByEvent(event, pos) {
                var touchArr = [], locView = this._glView;
                var touch_event = void 0, touch = void 0, preLocation = void 0;
                var locPreTouch = this._preTouchPoint;
                var length = event.changedTouches.length;
                for (var i = 0; i < length; i++) {
                    touch_event = event.changedTouches[i];
                    if (touch_event) {
                        var location = void 0;
                        if (sys.BROWSER_TYPE_FIREFOX === sys.browserType)
                            location = locView.convertToLocationInView(touch_event.pageX, touch_event.pageY, pos, _vec2);
                        else
                            location = locView.convertToLocationInView(touch_event.clientX, touch_event.clientY, pos, _vec2);
                        if (touch_event.identifier != null) {
                            touch = new cc.Touch(location.x, location.y, touch_event.identifier);
                            preLocation = this.getPreTouch(touch).getLocation();
                            touch._setPrevPoint(preLocation.x, preLocation.y);
                            this.setPreTouch(touch);
                        } else {
                            touch = new cc.Touch(location.x, location.y);
                            touch._setPrevPoint(locPreTouch.x, locPreTouch.y);
                        }
                        locPreTouch.x = location.x;
                        locPreTouch.y = location.y;
                        touchArr.push(touch);
                    }
                }
                return touchArr;
            },
            registerSystemEvent: function registerSystemEvent(element) {
                if (this._isRegisterEvent)
                    return;
                this._glView = cc.view;
                var selfPointer = this;
                var prohibition = sys.isMobile;
                var supportMouse = 'mouse' in sys.capabilities;
                var supportTouches = 'touches' in sys.capabilities;
                if (CC_WECHATGAME) {
                    prohibition = false;
                    supportTouches = true;
                    supportMouse = false;
                }
                if (supportMouse) {
                    if (!prohibition) {
                        window.addEventListener('mousedown', function () {
                            selfPointer._mousePressed = true;
                        }, false);
                        window.addEventListener('mouseup', function (event) {
                            if (!selfPointer._mousePressed)
                                return;
                            selfPointer._mousePressed = false;
                            var pos = selfPointer.getHTMLElementPosition(element);
                            var location = selfPointer.getPointByEvent(event, pos);
                            if (!cc.rect(pos.left, pos.top, pos.width, pos.height).contains(location)) {
                                selfPointer.handleTouchesEnd([selfPointer.getTouchByXY(location.x, location.y, pos)]);
                                var mouseEvent = selfPointer.getMouseEvent(location, pos, cc.Event.EventMouse.UP);
                                mouseEvent.setButton(event.button);
                                eventManager.dispatchEvent(mouseEvent);
                            }
                        }, false);
                    }
                    var EventMouse = cc.Event.EventMouse;
                    var _mouseEventsOnElement = [
                        !prohibition && [
                            'mousedown',
                            EventMouse.DOWN,
                            function (event, mouseEvent, location, pos) {
                                selfPointer._mousePressed = true;
                                selfPointer.handleTouchesBegin([selfPointer.getTouchByXY(location.x, location.y, pos)]);
                                element.focus();
                            }
                        ],
                        !prohibition && [
                            'mouseup',
                            EventMouse.UP,
                            function (event, mouseEvent, location, pos) {
                                selfPointer._mousePressed = false;
                                selfPointer.handleTouchesEnd([selfPointer.getTouchByXY(location.x, location.y, pos)]);
                            }
                        ],
                        !prohibition && [
                            'mousemove',
                            EventMouse.MOVE,
                            function (event, mouseEvent, location, pos) {
                                selfPointer.handleTouchesMove([selfPointer.getTouchByXY(location.x, location.y, pos)]);
                                if (!selfPointer._mousePressed) {
                                    mouseEvent.setButton(null);
                                }
                            }
                        ],
                        [
                            'mousewheel',
                            EventMouse.SCROLL,
                            function (event, mouseEvent) {
                                mouseEvent.setScrollData(0, event.wheelDelta);
                            }
                        ],
                        [
                            'DOMMouseScroll',
                            EventMouse.SCROLL,
                            function (event, mouseEvent) {
                                mouseEvent.setScrollData(0, event.detail * -120);
                            }
                        ]
                    ];
                    for (var i = 0; i < _mouseEventsOnElement.length; ++i) {
                        var entry = _mouseEventsOnElement[i];
                        if (entry) {
                            (function () {
                                var name = entry[0];
                                var type = entry[1];
                                var handler = entry[2];
                                element.addEventListener(name, function (event) {
                                    var pos = selfPointer.getHTMLElementPosition(element);
                                    var location = selfPointer.getPointByEvent(event, pos);
                                    var mouseEvent = selfPointer.getMouseEvent(location, pos, type);
                                    mouseEvent.setButton(event.button);
                                    handler(event, mouseEvent, location, pos);
                                    eventManager.dispatchEvent(mouseEvent);
                                    event.stopPropagation();
                                    event.preventDefault();
                                }, false);
                            }());
                        }
                    }
                }
                if (window.navigator.msPointerEnabled) {
                    var _pointerEventsMap = {
                        'MSPointerDown': selfPointer.handleTouchesBegin,
                        'MSPointerMove': selfPointer.handleTouchesMove,
                        'MSPointerUp': selfPointer.handleTouchesEnd,
                        'MSPointerCancel': selfPointer.handleTouchesCancel
                    };
                    var _loop = function _loop(eventName) {
                        var touchEvent = _pointerEventsMap[eventName];
                        element.addEventListener(eventName, function (event) {
                            var pos = selfPointer.getHTMLElementPosition(element);
                            pos.left -= document.documentElement.scrollLeft;
                            pos.top -= document.documentElement.scrollTop;
                            touchEvent.call(selfPointer, [selfPointer.getTouchByXY(event.clientX, event.clientY, pos)]);
                            event.stopPropagation();
                        }, false);
                    };
                    for (var eventName in _pointerEventsMap) {
                        _loop(eventName);
                    }
                }
                if (supportTouches) {
                    var _touchEventsMap = {
                        'touchstart': function touchstart(touchesToHandle) {
                            selfPointer.handleTouchesBegin(touchesToHandle);
                            if (!CC_WECHATGAME) {
                                element.focus();
                            }
                        },
                        'touchmove': function touchmove(touchesToHandle) {
                            selfPointer.handleTouchesMove(touchesToHandle);
                        },
                        'touchend': function touchend(touchesToHandle) {
                            selfPointer.handleTouchesEnd(touchesToHandle);
                        },
                        'touchcancel': function touchcancel(touchesToHandle) {
                            selfPointer.handleTouchesCancel(touchesToHandle);
                        }
                    };
                    var registerTouchEvent = void 0;
                    if (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
                        _touchEventsMap = {
                            onTouchStart: _touchEventsMap.touchstart,
                            onTouchMove: _touchEventsMap.touchmove,
                            onTouchEnd: _touchEventsMap.touchend,
                            onTouchCancel: _touchEventsMap.touchcancel
                        };
                        registerTouchEvent = function registerTouchEvent(eventName) {
                            var handler = _touchEventsMap[eventName];
                            wx[eventName](function (event) {
                                if (!event.changedTouches)
                                    return;
                                var pos = selfPointer.getHTMLElementPosition(element);
                                var body = document.body;
                                pos.left -= body.scrollLeft || 0;
                                pos.top -= body.scrollTop || 0;
                                handler(selfPointer.getTouchesByEvent(event, pos));
                            });
                        };
                    } else {
                        registerTouchEvent = function registerTouchEvent(eventName) {
                            var handler = _touchEventsMap[eventName];
                            element.addEventListener(eventName, function (event) {
                                if (!event.changedTouches)
                                    return;
                                var pos = selfPointer.getHTMLElementPosition(element);
                                var body = document.body;
                                pos.left -= body.scrollLeft || 0;
                                pos.top -= body.scrollTop || 0;
                                handler(selfPointer.getTouchesByEvent(event, pos));
                                event.stopPropagation();
                                event.preventDefault();
                            }, false);
                        };
                    }
                    for (var eventName in _touchEventsMap) {
                        registerTouchEvent(eventName);
                    }
                }
                if (cc.sys.browserType !== cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
                    this._registerKeyboardEvent();
                }
                this._isRegisterEvent = true;
            },
            _registerKeyboardEvent: function _registerKeyboardEvent() {
            },
            _registerAccelerometerEvent: function _registerAccelerometerEvent() {
            },
            update: function update(dt) {
                if (this._accelCurTime > this._accelInterval) {
                    this._accelCurTime -= this._accelInterval;
                    eventManager.dispatchEvent(new cc.Event.EventAcceleration(this._acceleration));
                }
                this._accelCurTime += dt;
            }
        };
        module.exports = _cc.inputManager = inputManager;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,