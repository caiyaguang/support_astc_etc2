(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCScreen.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.screen = {
            _supportsFullScreen: false,
            _preOnFullScreenChange: null,
            _preOnFullScreenError: null,
            _preOnTouch: null,
            _touchEvent: '',
            _fn: null,
            _fnMap: [
                [
                    'requestFullscreen',
                    'exitFullscreen',
                    'fullscreenchange',
                    'fullscreenEnabled',
                    'fullscreenElement',
                    'fullscreenerror'
                ],
                [
                    'requestFullScreen',
                    'exitFullScreen',
                    'fullScreenchange',
                    'fullScreenEnabled',
                    'fullScreenElement',
                    'fullscreenerror'
                ],
                [
                    'webkitRequestFullScreen',
                    'webkitCancelFullScreen',
                    'webkitfullscreenchange',
                    'webkitIsFullScreen',
                    'webkitCurrentFullScreenElement',
                    'webkitfullscreenerror'
                ],
                [
                    'mozRequestFullScreen',
                    'mozCancelFullScreen',
                    'mozfullscreenchange',
                    'mozFullScreen',
                    'mozFullScreenElement',
                    'mozfullscreenerror'
                ],
                [
                    'msRequestFullscreen',
                    'msExitFullscreen',
                    'MSFullscreenChange',
                    'msFullscreenEnabled',
                    'msFullscreenElement',
                    'msfullscreenerror'
                ]
            ],
            init: function init() {
                this._fn = {};
                var i, l, val, map = this._fnMap, valL;
                for (i = 0, l = map.length; i < l; i++) {
                    val = map[i];
                    if (val && typeof document[val[1]] !== 'undefined') {
                        for (i = 0, valL = val.length; i < valL; i++) {
                            this._fn[map[0][i]] = val[i];
                        }
                        break;
                    }
                }
                this._supportsFullScreen = this._fn.requestFullscreen !== undefined;
                this._touchEvent = 'ontouchend' in window ? 'touchend' : 'mousedown';
            },
            fullScreen: function fullScreen() {
                if (!this._supportsFullScreen)
                    return false;
                else if (!document[this._fn.fullscreenElement] && !document[this._fn.webkitFullscreenElement] && !document[this._fn.mozFullScreenElement]) {
                    return false;
                } else {
                    return true;
                }
            },
            requestFullScreen: function requestFullScreen(element, onFullScreenChange) {
                if (element && element.tagName.toLowerCase() === 'video') {
                    if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser && element.readyState > 0) {
                        element.webkitEnterFullscreen && element.webkitEnterFullscreen();
                        return;
                    } else {
                        element.setAttribute('x5-video-player-fullscreen', 'true');
                    }
                }
                if (!this._supportsFullScreen) {
                    return;
                }
                element = element || document.documentElement;
                if (onFullScreenChange) {
                    var eventName = this._fn.fullscreenchange;
                    if (this._preOnFullScreenChange) {
                        document.removeEventListener(eventName, this._preOnFullScreenChange);
                    }
                    this._preOnFullScreenChange = onFullScreenChange;
                    document.addEventListener(eventName, onFullScreenChange, false);
                }
                element[this._fn.requestFullscreen]();
            },
            exitFullScreen: function exitFullScreen(element) {
                if (element && element.tagName.toLowerCase() === 'video') {
                    if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser) {
                        element.webkitExitFullscreen && element.webkitExitFullscreen();
                        return;
                    } else {
                        element.setAttribute('x5-video-player-fullscreen', 'false');
                    }
                }
                return this._supportsFullScreen ? document[this._fn.exitFullscreen]() : true;
            },
            autoFullScreen: function autoFullScreen(element, onFullScreenChange) {
                element = element || document.body;
                this._ensureFullScreen(element, onFullScreenChange);
                this.requestFullScreen(element, onFullScreenChange);
            },
            disableAutoFullScreen: function disableAutoFullScreen(element) {
                var touchTarget = cc.game.canvas || element;
                var touchEventName = this._touchEvent;
                if (this._preOnTouch) {
                    touchTarget.removeEventListener(touchEventName, this._preOnTouch);
                    this._preOnTouch = null;
                }
            },
            _ensureFullScreen: function _ensureFullScreen(element, onFullScreenChange) {
                var self = this;
                var touchTarget = cc.game.canvas || element;
                var fullScreenErrorEventName = this._fn.fullscreenerror;
                var touchEventName = this._touchEvent;
                function onFullScreenError() {
                    self._preOnFullScreenError = null;
                    function onTouch() {
                        self._preOnTouch = null;
                        self.requestFullScreen(element, onFullScreenChange);
                    }
                    if (self._preOnTouch) {
                        touchTarget.removeEventListener(touchEventName, self._preOnTouch);
                    }
                    self._preOnTouch = onTouch;
                    touchTarget.addEventListener(touchEventName, self._preOnTouch, { once: true });
                }
                if (this._preOnFullScreenError) {
                    element.removeEventListener(fullScreenErrorEventName, this._preOnFullScreenError);
                }
                this._preOnFullScreenError = onFullScreenError;
                element.addEventListener(fullScreenErrorEventName, onFullScreenError, { once: true });
            }
        };
        cc.screen.init();
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,