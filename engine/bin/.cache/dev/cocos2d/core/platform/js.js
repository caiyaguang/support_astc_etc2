(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/js.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var tempCIDGenerater = new (require('./id-generater'))('TmpCId.');
        function _getPropertyDescriptor(obj, name) {
            while (obj) {
                var pd = Object.getOwnPropertyDescriptor(obj, name);
                if (pd) {
                    return pd;
                }
                obj = Object.getPrototypeOf(obj);
            }
            return null;
        }
        function _copyprop(name, source, target) {
            var pd = _getPropertyDescriptor(source, name);
            Object.defineProperty(target, name, pd);
        }
        var js = {
            isNumber: function isNumber(obj) {
                return typeof obj === 'number' || obj instanceof Number;
            },
            isString: function isString(obj) {
                return typeof obj === 'string' || obj instanceof String;
            },
            addon: function addon(obj) {
                'use strict';
                obj = obj || {};
                for (var i = 1, length = arguments.length; i < length; i++) {
                    var source = arguments[i];
                    if (source) {
                        if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) !== 'object') {
                            cc.errorID(5402, source);
                            continue;
                        }
                        for (var name in source) {
                            if (!(name in obj)) {
                                _copyprop(name, source, obj);
                            }
                        }
                    }
                }
                return obj;
            },
            mixin: function mixin(obj) {
                'use strict';
                obj = obj || {};
                for (var i = 1, length = arguments.length; i < length; i++) {
                    var source = arguments[i];
                    if (source) {
                        if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) !== 'object') {
                            cc.errorID(5403, source);
                            continue;
                        }
                        for (var name in source) {
                            _copyprop(name, source, obj);
                        }
                    }
                }
                return obj;
            },
            extend: function extend(cls, base) {
                if (CC_DEV) {
                    if (!base) {
                        cc.errorID(5404);
                        return;
                    }
                    if (!cls) {
                        cc.errorID(5405);
                        return;
                    }
                    if (Object.keys(cls.prototype).length > 0) {
                        cc.errorID(5406);
                    }
                }
                for (var p in base) {
                    if (base.hasOwnProperty(p))
                        cls[p] = base[p];
                }
                cls.prototype = Object.create(base.prototype, {
                    constructor: {
                        value: cls,
                        writable: true,
                        configurable: true
                    }
                });
                return cls;
            },
            getSuper: function getSuper(ctor) {
                var proto = ctor.prototype;
                var dunderProto = proto && Object.getPrototypeOf(proto);
                return dunderProto && dunderProto.constructor;
            },
            isChildClassOf: function isChildClassOf(subclass, superclass) {
                if (subclass && superclass) {
                    if (typeof subclass !== 'function') {
                        return false;
                    }
                    if (typeof superclass !== 'function') {
                        if (CC_DEV) {
                            cc.warnID(3625, superclass);
                        }
                        return false;
                    }
                    if (subclass === superclass) {
                        return true;
                    }
                    for (;;) {
                        subclass = js.getSuper(subclass);
                        if (!subclass) {
                            return false;
                        }
                        if (subclass === superclass) {
                            return true;
                        }
                    }
                }
                return false;
            },
            clear: function clear(obj) {
                var keys = Object.keys(obj);
                for (var i = 0; i < keys.length; i++) {
                    delete obj[keys[i]];
                }
            },
            isEmptyObject: function isEmptyObject(obj) {
                for (var key in obj) {
                    return false;
                }
                return true;
            },
            getPropertyDescriptor: _getPropertyDescriptor
        };
        var tmpValueDesc = {
            value: undefined,
            enumerable: false,
            writable: false,
            configurable: true
        };
        js.value = function (obj, prop, value, writable, enumerable) {
            tmpValueDesc.value = value;
            tmpValueDesc.writable = writable;
            tmpValueDesc.enumerable = enumerable;
            Object.defineProperty(obj, prop, tmpValueDesc);
            tmpValueDesc.value = undefined;
        };
        var tmpGetSetDesc = {
            get: null,
            set: null,
            enumerable: false
        };
        js.getset = function (obj, prop, getter, setter, enumerable, configurable) {
            if (typeof setter !== 'function') {
                enumerable = setter;
                setter = undefined;
            }
            tmpGetSetDesc.get = getter;
            tmpGetSetDesc.set = setter;
            tmpGetSetDesc.enumerable = enumerable;
            tmpGetSetDesc.configurable = configurable;
            Object.defineProperty(obj, prop, tmpGetSetDesc);
            tmpGetSetDesc.get = null;
            tmpGetSetDesc.set = null;
        };
        var tmpGetDesc = {
            get: null,
            enumerable: false,
            configurable: false
        };
        js.get = function (obj, prop, getter, enumerable, configurable) {
            tmpGetDesc.get = getter;
            tmpGetDesc.enumerable = enumerable;
            tmpGetDesc.configurable = configurable;
            Object.defineProperty(obj, prop, tmpGetDesc);
            tmpGetDesc.get = null;
        };
        var tmpSetDesc = {
            set: null,
            enumerable: false,
            configurable: false
        };
        js.set = function (obj, prop, setter, enumerable, configurable) {
            tmpSetDesc.set = setter;
            tmpSetDesc.enumerable = enumerable;
            tmpSetDesc.configurable = configurable;
            Object.defineProperty(obj, prop, tmpSetDesc);
            tmpSetDesc.set = null;
        };
        js.getClassName = function (objOrCtor) {
            if (typeof objOrCtor === 'function') {
                var prototype = objOrCtor.prototype;
                if (prototype && prototype.hasOwnProperty('__classname__') && prototype.__classname__) {
                    return prototype.__classname__;
                }
                var retval = '';
                if (objOrCtor.name) {
                    retval = objOrCtor.name;
                }
                if (objOrCtor.toString) {
                    var arr, str = objOrCtor.toString();
                    if (str.charAt(0) === '[') {
                        arr = str.match(/\[\w+\s*(\w+)\]/);
                    } else {
                        arr = str.match(/function\s*(\w+)/);
                    }
                    if (arr && arr.length === 2) {
                        retval = arr[1];
                    }
                }
                return retval !== 'Object' ? retval : '';
            } else if (objOrCtor && objOrCtor.constructor) {
                return js.getClassName(objOrCtor.constructor);
            }
            return '';
        };
        function isTempClassId(id) {
            return typeof id !== 'string' || id.startsWith(tempCIDGenerater.prefix);
        }
        (function () {
            var _idToClass = {};
            var _nameToClass = {};
            function setup(key, publicName, table) {
                js.getset(js, publicName, function () {
                    return Object.assign({}, table);
                }, function (value) {
                    js.clear(table);
                    Object.assign(table, value);
                });
                return function (id, constructor) {
                    if (constructor.prototype.hasOwnProperty(key)) {
                        delete table[constructor.prototype[key]];
                    }
                    js.value(constructor.prototype, key, id);
                    if (id) {
                        var registered = table[id];
                        if (registered && registered !== constructor) {
                            var error = 'A Class already exists with the same ' + key + ' : "' + id + '".';
                            if (CC_TEST) {
                                error += ' (This may be caused by error of unit test.) If you dont need serialization, you can set class id to "". You can also call cc.js.unregisterClass to remove the id of unused class';
                            }
                            cc.error(error);
                        } else {
                            table[id] = constructor;
                        }
                    }
                };
            }
            js._setClassId = setup('__cid__', '_registeredClassIds', _idToClass);
            var doSetClassName = setup('__classname__', '_registeredClassNames', _nameToClass);
            js.setClassName = function (className, constructor) {
                doSetClassName(className, constructor);
                if (!constructor.prototype.hasOwnProperty('__cid__')) {
                    var id = className || tempCIDGenerater.getNewId();
                    if (id) {
                        js._setClassId(id, constructor);
                    }
                }
            };
            js.unregisterClass = function () {
                for (var i = 0; i < arguments.length; i++) {
                    var p = arguments[i].prototype;
                    var classId = p.__cid__;
                    if (classId) {
                        delete _idToClass[classId];
                    }
                    var classname = p.__classname__;
                    if (classname) {
                        delete _nameToClass[classname];
                    }
                }
            };
            js._getClassById = function (classId) {
                return _idToClass[classId];
            };
            js.getClassByName = function (classname) {
                return _nameToClass[classname];
            };
            js._getClassId = function (obj, allowTempId) {
                allowTempId = typeof allowTempId !== 'undefined' ? allowTempId : true;
                var res;
                if (typeof obj === 'function' && obj.prototype.hasOwnProperty('__cid__')) {
                    res = obj.prototype.__cid__;
                    if (!allowTempId && (CC_DEV || CC_EDITOR) && isTempClassId(res)) {
                        return '';
                    }
                    return res;
                }
                if (obj && obj.constructor) {
                    var prototype = obj.constructor.prototype;
                    if (prototype && prototype.hasOwnProperty('__cid__')) {
                        res = obj.__cid__;
                        if (!allowTempId && (CC_DEV || CC_EDITOR) && isTempClassId(res)) {
                            return '';
                        }
                        return res;
                    }
                }
                return '';
            };
        }());
        js.obsolete = function (obj, obsoleted, newExpr, writable) {
            var extractPropName = /([^.]+)$/;
            var oldProp = extractPropName.exec(obsoleted)[0];
            var newProp = extractPropName.exec(newExpr)[0];
            function get() {
                if (CC_DEV) {
                    cc.warnID(5400, obsoleted, newExpr);
                }
                return this[newProp];
            }
            if (writable) {
                js.getset(obj, oldProp, get, function (value) {
                    if (CC_DEV) {
                        cc.warnID(5401, obsoleted, newExpr);
                    }
                    this[newProp] = value;
                });
            } else {
                js.get(obj, oldProp, get);
            }
        };
        js.obsoletes = function (obj, objName, props, writable) {
            for (var obsoleted in props) {
                var newName = props[obsoleted];
                js.obsolete(obj, objName + '.' + obsoleted, newName, writable);
            }
        };
        var REGEXP_NUM_OR_STR = /(%d)|(%s)/;
        var REGEXP_STR = /%s/;
        js.formatStr = function () {
            var argLen = arguments.length;
            if (argLen === 0) {
                return '';
            }
            var msg = arguments[0];
            if (argLen === 1) {
                return '' + msg;
            }
            var hasSubstitution = typeof msg === 'string' && REGEXP_NUM_OR_STR.test(msg);
            if (hasSubstitution) {
                for (var i = 1; i < argLen; ++i) {
                    var arg = arguments[i];
                    var regExpToTest = typeof arg === 'number' ? REGEXP_NUM_OR_STR : REGEXP_STR;
                    if (regExpToTest.test(msg))
                        msg = msg.replace(regExpToTest, arg);
                    else
                        msg += ' ' + arg;
                }
            } else {
                for (var _i = 1; _i < argLen; ++_i) {
                    msg += ' ' + arguments[_i];
                }
            }
            return msg;
        };
        js.shiftArguments = function () {
            var len = arguments.length - 1;
            var args = new Array(len);
            for (var i = 0; i < len; ++i) {
                args[i] = arguments[i + 1];
            }
            return args;
        };
        js.createMap = function (forceDictMode) {
            var map = Object.create(null);
            if (forceDictMode) {
                var INVALID_IDENTIFIER_1 = '.';
                var INVALID_IDENTIFIER_2 = '/';
                map[INVALID_IDENTIFIER_1] = true;
                map[INVALID_IDENTIFIER_2] = true;
                delete map[INVALID_IDENTIFIER_1];
                delete map[INVALID_IDENTIFIER_2];
            }
            return map;
        };
        function removeAt(array, index) {
            array.splice(index, 1);
        }
        function fastRemoveAt(array, index) {
            var length = array.length;
            if (index < 0 || index >= length) {
                return;
            }
            array[index] = array[length - 1];
            array.length = length - 1;
        }
        function remove(array, value) {
            var index = array.indexOf(value);
            if (index >= 0) {
                removeAt(array, index);
                return true;
            } else {
                return false;
            }
        }
        function fastRemove(array, value) {
            var index = array.indexOf(value);
            if (index >= 0) {
                array[index] = array[array.length - 1];
                --array.length;
            }
        }
        function verifyType(array, type) {
            if (array && array.length > 0) {
                for (var i = 0; i < array.length; i++) {
                    if (!(array[i] instanceof type)) {
                        cc.logID(1300);
                        return false;
                    }
                }
            }
            return true;
        }
        function removeArray(array, minusArr) {
            for (var i = 0, l = minusArr.length; i < l; i++) {
                remove(array, minusArr[i]);
            }
        }
        function appendObjectsAt(array, addObjs, index) {
            array.splice.apply(array, [
                index,
                0
            ].concat(addObjs));
            return array;
        }
        var indexOf = Array.prototype.indexOf;
        function contains(array, value) {
            return array.indexOf(value) >= 0;
        }
        function copy(array) {
            var i, len = array.length, arr_clone = new Array(len);
            for (i = 0; i < len; i += 1) {
                arr_clone[i] = array[i];
            }
            return arr_clone;
        }
        js.array = {
            remove: remove,
            fastRemove: fastRemove,
            removeAt: removeAt,
            fastRemoveAt: fastRemoveAt,
            contains: contains,
            verifyType: verifyType,
            removeArray: removeArray,
            appendObjectsAt: appendObjectsAt,
            copy: copy,
            indexOf: indexOf,
            MutableForwardIterator: require('../utils/mutable-forward-iterator')
        };
        function Pool(cleanupFunc, size) {
            if (size === undefined) {
                size = cleanupFunc;
                cleanupFunc = null;
            }
            this.get = null;
            this.count = 0;
            this._pool = new Array(size);
            this._cleanup = cleanupFunc;
        }
        Pool.prototype._get = function () {
            if (this.count > 0) {
                --this.count;
                var cache = this._pool[this.count];
                this._pool[this.count] = null;
                return cache;
            }
            return null;
        };
        Pool.prototype.put = function (obj) {
            var pool = this._pool;
            if (this.count < pool.length) {
                if (this._cleanup && this._cleanup(obj) === false) {
                    return;
                }
                pool[this.count] = obj;
                ++this.count;
            }
        };
        Pool.prototype.resize = function (length) {
            if (length >= 0) {
                this._pool.length = length;
                if (this.count > length) {
                    this.count = length;
                }
            }
        };
        js.Pool = Pool;
        cc.js = js;
        module.exports = js;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzLmpzIiwiL1VzZXJzL3p6ZjIwMTkvRGVza3RvcC9kZXZlbG9wbWVudC9zdXBwb3J0X2FzdGMvZW5naW5lL2NvY29zMmQvY29yZS9wbGF0Zm9ybS9qcy5qcyJdLCJuYW1lcyI6WyJ0ZW1wQ0lER2VuZXJhdGVyIiwicmVxdWlyZSIsIl9nZXRQcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmoiLCJuYW1lIiwicGQiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIl9jb3B5cHJvcCIsInNvdXJjZSIsInRhcmdldCIsImRlZmluZVByb3BlcnR5IiwianMiLCJpc051bWJlciIsIk51bWJlciIsImlzU3RyaW5nIiwiU3RyaW5nIiwiYWRkb24iLCJpIiwibGVuZ3RoIiwiYXJndW1lbnRzIiwiY2MiLCJlcnJvcklEIiwibWl4aW4iLCJleHRlbmQiLCJjbHMiLCJiYXNlIiwiQ0NfREVWIiwia2V5cyIsInByb3RvdHlwZSIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImdldFN1cGVyIiwiY3RvciIsInByb3RvIiwiZHVuZGVyUHJvdG8iLCJpc0NoaWxkQ2xhc3NPZiIsInN1YmNsYXNzIiwic3VwZXJjbGFzcyIsIndhcm5JRCIsImNsZWFyIiwiaXNFbXB0eU9iamVjdCIsImtleSIsImdldFByb3BlcnR5RGVzY3JpcHRvciIsInRtcFZhbHVlRGVzYyIsInVuZGVmaW5lZCIsImVudW1lcmFibGUiLCJwcm9wIiwidG1wR2V0U2V0RGVzYyIsImdldCIsInNldCIsImdldHNldCIsImdldHRlciIsInNldHRlciIsInRtcEdldERlc2MiLCJ0bXBTZXREZXNjIiwiZ2V0Q2xhc3NOYW1lIiwib2JqT3JDdG9yIiwiX19jbGFzc25hbWVfXyIsInJldHZhbCIsInRvU3RyaW5nIiwiYXJyIiwic3RyIiwiY2hhckF0IiwibWF0Y2giLCJpc1RlbXBDbGFzc0lkIiwiaWQiLCJzdGFydHNXaXRoIiwicHJlZml4IiwiX2lkVG9DbGFzcyIsIl9uYW1lVG9DbGFzcyIsInNldHVwIiwicHVibGljTmFtZSIsInRhYmxlIiwiYXNzaWduIiwicmVnaXN0ZXJlZCIsImVycm9yIiwiQ0NfVEVTVCIsIl9zZXRDbGFzc0lkIiwiZG9TZXRDbGFzc05hbWUiLCJzZXRDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJnZXROZXdJZCIsInVucmVnaXN0ZXJDbGFzcyIsImNsYXNzSWQiLCJfX2NpZF9fIiwiY2xhc3NuYW1lIiwiX2dldENsYXNzQnlJZCIsImdldENsYXNzQnlOYW1lIiwiX2dldENsYXNzSWQiLCJhbGxvd1RlbXBJZCIsInJlcyIsIkNDX0VESVRPUiIsIm9ic29sZXRlIiwib2Jzb2xldGVkIiwibmV3RXhwciIsImV4dHJhY3RQcm9wTmFtZSIsIm9sZFByb3AiLCJleGVjIiwibmV3UHJvcCIsIm9ic29sZXRlcyIsIm9iak5hbWUiLCJwcm9wcyIsIm5ld05hbWUiLCJSRUdFWFBfTlVNX09SX1NUUiIsIlJFR0VYUF9TVFIiLCJmb3JtYXRTdHIiLCJhcmdMZW4iLCJtc2ciLCJoYXNTdWJzdGl0dXRpb24iLCJ0ZXN0IiwiYXJnIiwicmVnRXhwVG9UZXN0IiwicmVwbGFjZSIsInNoaWZ0QXJndW1lbnRzIiwibGVuIiwiYXJncyIsIkFycmF5IiwiY3JlYXRlTWFwIiwiZm9yY2VEaWN0TW9kZSIsIm1hcCIsIklOVkFMSURfSURFTlRJRklFUl8xIiwiSU5WQUxJRF9JREVOVElGSUVSXzIiLCJyZW1vdmVBdCIsImFycmF5IiwiaW5kZXgiLCJzcGxpY2UiLCJmYXN0UmVtb3ZlQXQiLCJyZW1vdmUiLCJpbmRleE9mIiwiZmFzdFJlbW92ZSIsInZlcmlmeVR5cGUiLCJ0eXBlIiwibG9nSUQiLCJyZW1vdmVBcnJheSIsIm1pbnVzQXJyIiwibCIsImFwcGVuZE9iamVjdHNBdCIsImFkZE9ianMiLCJhcHBseSIsImNvbmNhdCIsImNvbnRhaW5zIiwiY29weSIsImFycl9jbG9uZSIsIk11dGFibGVGb3J3YXJkSXRlcmF0b3IiLCJQb29sIiwiY2xlYW51cEZ1bmMiLCJzaXplIiwiY291bnQiLCJfcG9vbCIsIl9jbGVhbnVwIiwiX2dldCIsImNhY2hlIiwicHV0IiwicG9vbCIsInJlc2l6ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7OztJQUFBLElBQUEsVUFBQSxHQUFBLHdDQUFBOzs7Ozs7Ozs7Ozs7Ozs7O1FBMkJBLElBQU1BLGdCQUFBQSxHQUFtQixJQUFLQyxDQUFBQSxPQUFBQSxDQUFRLGdCQUFSQSxFQUFMLENBQWdDLFNBQWhDLENBQXpCO1FBR0EsU0FBU0Msc0JBQVQsQ0FBaUNDLEdBQWpDLEVBQXNDQyxJQUF0QyxFQUE0QztBQUFBLFlBQ3hDLE9BQU9ELEdBQVAsRUFBWTtBQUFBLGdCQUNSLElBQUlFLEVBQUFBLEdBQUtDLE1BQUFBLENBQU9DLHdCQUFQRCxDQUFnQ0gsR0FBaENHLEVBQXFDRixJQUFyQ0UsQ0FBVCxDQURRO0FBQUEsZ0JBRVIsSUFBSUQsRUFBSixFQUFRO0FBQUEsb0JBQ0osT0FBT0EsRUFBUCxDQURJO0FBQUEsaUJBRkE7QUFBQSxnQkFLUkYsR0FBQUEsR0FBTUcsTUFBQUEsQ0FBT0UsY0FBUEYsQ0FBc0JILEdBQXRCRyxDQUFOSCxDQUxRO0FBQUEsYUFENEI7QUFBQSxZQVF4QyxPQUFPLElBQVAsQ0FSd0M7QUFBQTtRQVc1QyxTQUFTTSxTQUFULENBQW1CTCxJQUFuQixFQUF5Qk0sTUFBekIsRUFBaUNDLE1BQWpDLEVBQXlDO0FBQUEsWUFDckMsSUFBSU4sRUFBQUEsR0FBS0gsc0JBQUFBLENBQXVCUSxNQUF2QlIsRUFBK0JFLElBQS9CRixDQUFULENBRHFDO0FBQUEsWUFFckNJLE1BQUFBLENBQU9NLGNBQVBOLENBQXNCSyxNQUF0QkwsRUFBOEJGLElBQTlCRSxFQUFvQ0QsRUFBcENDLEVBRnFDO0FBQUE7UUFXekMsSUFBSU8sRUFBQUEsR0FBSztBQUFBLFlBVUxDLFFBQUFBLEVBQVUsU0FBQSxRQUFBLENBQVNYLEdBQVQsRUFBYztBQUFB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SCxDQUFlVSxNQUFmVixHQUF3QixVQUFVbkksTUFBVixFQUFrQjtBQUFBLFlBQ3RDLElBQUlBLE1BQUFBLElBQVUsQ0FBZCxFQUFpQjtBQUFBLGdCQUNiLEtBQUt1SSxLQUFMLENBQVd2SSxNQUFYLEdBQW9CQSxNQUFwQixDQURhO0FBQUEsZ0JBRWIsSUFBSSxLQUFLc0ksS0FBTCxHQUFhdEksTUFBakIsRUFBeUI7QUFBQSxvQkFDckIsS0FBS3NJLEtBQUwsR0FBYXRJLE1BQWIsQ0FEcUI7QUFBQSxpQkFGWjtBQUFBLGFBRHFCO0FBQUEsU0FBMUNtSTtRQVNBMUksRUFBQUEsQ0FBRzBJLElBQUgxSSxHQUFVMEksSUFBVjFJO1FBSUFTLEVBQUFBLENBQUdULEVBQUhTLEdBQVFULEVBQVJTO1FBRUE0SSxNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQnJKLEVBQWpCcUoiLCJmaWxlIjoianMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAwOC0yMDEwIFJpY2FyZG8gUXVlc2FkYVxuIENvcHlyaWdodCAoYykgMjAxMS0yMDEyIGNvY29zMmQteC5vcmdcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwOi8vd3d3LmNvY29zMmQteC5vcmdcblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmNvbnN0IHRlbXBDSURHZW5lcmF0ZXIgPSBuZXcgKHJlcXVpcmUoJy4vaWQtZ2VuZXJhdGVyJykpKCdUbXBDSWQuJyk7XG5cblxuZnVuY3Rpb24gX2dldFByb3BlcnR5RGVzY3JpcHRvciAob2JqLCBuYW1lKSB7XG4gICAgd2hpbGUgKG9iaikge1xuICAgICAgICB2YXIgcGQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgbmFtZSk7XG4gICAgICAgIGlmIChwZCkge1xuICAgICAgICAgICAgcmV0dXJuIHBkO1xuICAgICAgICB9XG4gICAgICAgIG9iaiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gX2NvcHlwcm9wKG5hbWUsIHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgdmFyIHBkID0gX2dldFByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIG5hbWUpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHBkKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBwcm92aWRlcyBzb21lIEphdmFTY3JpcHQgdXRpbGl0aWVzLlxuICogQWxsIG1lbWJlcnMgY2FuIGJlIGFjY2Vzc2VkIHdpdGggXCJjYy5qc1wiLlxuICogQHN1Ym1vZHVsZSBqc1xuICogQG1vZHVsZSBqc1xuICovXG52YXIganMgPSB7XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGUgb2JqIHdoZXRoZXIgaXMgbnVtYmVyIG9yIG5vdFxuICAgICAqIElmIGEgbnVtYmVyIGlzIGNyZWF0ZWQgYnkgdXNpbmcgJ25ldyBOdW1iZXIoMTAwODYpJywgdGhlIHR5cGVvZiBpdCB3aWxsIGJlIFwib2JqZWN0XCIuLi5cbiAgICAgKiBUaGVuIHlvdSBjYW4gdXNlIHRoaXMgZnVuY3Rpb24gaWYgeW91IGNhcmUgYWJvdXQgdGhpcyBjYXNlLlxuICAgICAqIEBtZXRob2QgaXNOdW1iZXJcbiAgICAgKiBAcGFyYW0geyp9IG9ialxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzTnVtYmVyOiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdudW1iZXInIHx8IG9iaiBpbnN0YW5jZW9mIE51bWJlcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIG9iaiB3aGV0aGVyIGlzIHN0cmluZyBvciBub3QuXG4gICAgICogSWYgYSBzdHJpbmcgaXMgY3JlYXRlZCBieSB1c2luZyAnbmV3IFN0cmluZyhcImJsYWJsYVwiKScsIHRoZSB0eXBlb2YgaXQgd2lsbCBiZSBcIm9iamVjdFwiLi4uXG4gICAgICogVGhlbiB5b3UgY2FuIHVzZSB0aGlzIGZ1bmN0aW9uIGlmIHlvdSBjYXJlIGFib3V0IHRoaXMgY2FzZS5cbiAgICAgKiBAbWV0aG9kIGlzU3RyaW5nXG4gICAgICogQHBhcmFtIHsqfSBvYmpcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc1N0cmluZzogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyB8fCBvYmogaW5zdGFuY2VvZiBTdHJpbmc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvcHkgYWxsIHByb3BlcnRpZXMgbm90IGRlZmluZWQgaW4gb2JqIGZyb20gYXJndW1lbnRzWzEuLi5uXVxuICAgICAqIEBtZXRob2QgYWRkb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIG9iamVjdCB0byBleHRlbmQgaXRzIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gLi4uc291cmNlT2JqIHNvdXJjZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHRoZSByZXN1bHQgb2JqXG4gICAgICovXG4gICAgYWRkb246IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgJ3VzZSBzdHJpY3QnO1xuICAgICAgICBvYmogPSBvYmogfHwge307XG4gICAgICAgIGZvciAodmFyIGkgPSAxLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoNTQwMiwgc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBuYW1lIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoICEobmFtZSBpbiBvYmopICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NvcHlwcm9wKCBuYW1lLCBzb3VyY2UsIG9iaik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY29weSBhbGwgcHJvcGVydGllcyBmcm9tIGFyZ3VtZW50c1sxLi4ubl0gdG8gb2JqXG4gICAgICogQG1ldGhvZCBtaXhpblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gLi4uc291cmNlT2JqXG4gICAgICogQHJldHVybiB7T2JqZWN0fSB0aGUgcmVzdWx0IG9ialxuICAgICAqL1xuICAgIG1peGluOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgICAgb2JqID0gb2JqIHx8IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDU0MDMsIHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgbmFtZSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgX2NvcHlwcm9wKCBuYW1lLCBzb3VyY2UsIG9iaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlcml2ZSB0aGUgY2xhc3MgZnJvbSB0aGUgc3VwcGxpZWQgYmFzZSBjbGFzcy5cbiAgICAgKiBCb3RoIGNsYXNzZXMgYXJlIGp1c3QgbmF0aXZlIGphdmFzY3JpcHQgY29uc3RydWN0b3JzLCBub3QgY3JlYXRlZCBieSBjYy5DbGFzcywgc29cbiAgICAgKiB1c3VhbGx5IHlvdSB3aWxsIHdhbnQgdG8gaW5oZXJpdCB1c2luZyB7eyNjcm9zc0xpbmsgXCJjYy9DbGFzczptZXRob2RcIn19Y2MuQ2xhc3Mge3svY3Jvc3NMaW5rfX0gaW5zdGVhZC5cbiAgICAgKiBAbWV0aG9kIGV4dGVuZFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNsc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGJhc2UgLSB0aGUgYmFzZWNsYXNzIHRvIGluaGVyaXRcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIHJlc3VsdCBjbGFzc1xuICAgICAqL1xuICAgIGV4dGVuZDogZnVuY3Rpb24gKGNscywgYmFzZSkge1xuICAgICAgICBpZiAoQ0NfREVWKSB7XG4gICAgICAgICAgICBpZiAoIWJhc2UpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDU0MDQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2xzKSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3JJRCg1NDA1KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoY2xzLnByb3RvdHlwZSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoNTQwNik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgcCBpbiBiYXNlKSBpZiAoYmFzZS5oYXNPd25Qcm9wZXJ0eShwKSkgY2xzW3BdID0gYmFzZVtwXTtcbiAgICAgICAgY2xzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoYmFzZS5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGNscyxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbHM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCBzdXBlciBjbGFzc1xuICAgICAqIEBtZXRob2QgZ2V0U3VwZXJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdG9yIC0gdGhlIGNvbnN0cnVjdG9yIG9mIHN1YmNsYXNzXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAgICovXG4gICAgZ2V0U3VwZXIgKGN0b3IpIHtcbiAgICAgICAgdmFyIHByb3RvID0gY3Rvci5wcm90b3R5cGU7IC8vIGJpbmRlZCBmdW5jdGlvbiBkbyBub3QgaGF2ZSBwcm90b3R5cGVcbiAgICAgICAgdmFyIGR1bmRlclByb3RvID0gcHJvdG8gJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgICAgICAgcmV0dXJuIGR1bmRlclByb3RvICYmIGR1bmRlclByb3RvLmNvbnN0cnVjdG9yO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciBzdWJjbGFzcyBpcyBjaGlsZCBvZiBzdXBlcmNsYXNzIG9yIGVxdWFscyB0byBzdXBlcmNsYXNzXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGlzQ2hpbGRDbGFzc09mXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ViY2xhc3NcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdXBlcmNsYXNzXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0NoaWxkQ2xhc3NPZiAoc3ViY2xhc3MsIHN1cGVyY2xhc3MpIHtcbiAgICAgICAgaWYgKHN1YmNsYXNzICYmIHN1cGVyY2xhc3MpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3ViY2xhc3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN1cGVyY2xhc3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBpZiAoQ0NfREVWKSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLndhcm5JRCgzNjI1LCBzdXBlcmNsYXNzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN1YmNsYXNzID09PSBzdXBlcmNsYXNzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICAgc3ViY2xhc3MgPSBqcy5nZXRTdXBlcihzdWJjbGFzcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJjbGFzcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdWJjbGFzcyA9PT0gc3VwZXJjbGFzcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbnVtZXJhYmxlIHByb3BlcnRpZXMgZnJvbSBvYmplY3RcbiAgICAgKiBAbWV0aG9kIGNsZWFyXG4gICAgICogQHBhcmFtIHthbnl9IG9ialxuICAgICAqL1xuICAgIGNsZWFyOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkZWxldGUgb2JqW2tleXNbaV1dO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIG9iaiBpcyBhbiBlbXB0eSBvYmplY3RcbiAgICAgKiBAbWV0aG9kIGlzRW1wdHlPYmplY3RcbiAgICAgKiBAcGFyYW0ge2FueX0gb2JqIFxuICAgICAqL1xuICAgIGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgcHJvcGVydHkgZGVzY3JpcHRvciBpbiBvYmplY3QgYW5kIGFsbCBpdHMgYW5jZXN0b3JzXG4gICAgICogQG1ldGhvZCBnZXRQcm9wZXJ0eURlc2NyaXB0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG4gICAgZ2V0UHJvcGVydHlEZXNjcmlwdG9yOiBfZ2V0UHJvcGVydHlEZXNjcmlwdG9yXG59O1xuXG5cbnZhciB0bXBWYWx1ZURlc2MgPSB7XG4gICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG59O1xuXG4vKipcbiAqIERlZmluZSB2YWx1ZSwganVzdCBoZWxwIHRvIGNhbGwgT2JqZWN0LmRlZmluZVByb3BlcnR5Ljxicj5cbiAqIFRoZSBjb25maWd1cmFibGUgd2lsbCBiZSB0cnVlLlxuICogQG1ldGhvZCB2YWx1ZVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHtCb29sZWFufSBbd3JpdGFibGU9ZmFsc2VdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtlbnVtZXJhYmxlPWZhbHNlXVxuICovXG5qcy52YWx1ZSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbHVlLCB3cml0YWJsZSwgZW51bWVyYWJsZSkge1xuICAgIHRtcFZhbHVlRGVzYy52YWx1ZSA9IHZhbHVlO1xuICAgIHRtcFZhbHVlRGVzYy53cml0YWJsZSA9IHdyaXRhYmxlO1xuICAgIHRtcFZhbHVlRGVzYy5lbnVtZXJhYmxlID0gZW51bWVyYWJsZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCB0bXBWYWx1ZURlc2MpO1xuICAgIHRtcFZhbHVlRGVzYy52YWx1ZSA9IHVuZGVmaW5lZDtcbn07XG5cbnZhciB0bXBHZXRTZXREZXNjID0ge1xuICAgIGdldDogbnVsbCxcbiAgICBzZXQ6IG51bGwsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG59O1xuXG4vKipcbiAqIERlZmluZSBnZXQgc2V0IGFjY2Vzc29yLCBqdXN0IGhlbHAgdG8gY2FsbCBPYmplY3QuZGVmaW5lUHJvcGVydHkoLi4uKVxuICogQG1ldGhvZCBnZXRzZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXR0ZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtzZXR0ZXI9bnVsbF1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2VudW1lcmFibGU9ZmFsc2VdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWd1cmFibGU9ZmFsc2VdXG4gKi9cbmpzLmdldHNldCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIGdldHRlciwgc2V0dGVyLCBlbnVtZXJhYmxlLCBjb25maWd1cmFibGUpIHtcbiAgICBpZiAodHlwZW9mIHNldHRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlbnVtZXJhYmxlID0gc2V0dGVyO1xuICAgICAgICBzZXR0ZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRtcEdldFNldERlc2MuZ2V0ID0gZ2V0dGVyO1xuICAgIHRtcEdldFNldERlc2Muc2V0ID0gc2V0dGVyO1xuICAgIHRtcEdldFNldERlc2MuZW51bWVyYWJsZSA9IGVudW1lcmFibGU7XG4gICAgdG1wR2V0U2V0RGVzYy5jb25maWd1cmFibGUgPSBjb25maWd1cmFibGU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwgdG1wR2V0U2V0RGVzYyk7XG4gICAgdG1wR2V0U2V0RGVzYy5nZXQgPSBudWxsO1xuICAgIHRtcEdldFNldERlc2Muc2V0ID0gbnVsbDtcbn07XG5cbnZhciB0bXBHZXREZXNjID0ge1xuICAgIGdldDogbnVsbCxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IGZhbHNlXG59O1xuXG4vKipcbiAqIERlZmluZSBnZXQgYWNjZXNzb3IsIGp1c3QgaGVscCB0byBjYWxsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSguLi4pXG4gKiBAbWV0aG9kIGdldFxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldHRlclxuICogQHBhcmFtIHtCb29sZWFufSBbZW51bWVyYWJsZT1mYWxzZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZ3VyYWJsZT1mYWxzZV1cbiAqL1xuanMuZ2V0ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgZ2V0dGVyLCBlbnVtZXJhYmxlLCBjb25maWd1cmFibGUpIHtcbiAgICB0bXBHZXREZXNjLmdldCA9IGdldHRlcjtcbiAgICB0bXBHZXREZXNjLmVudW1lcmFibGUgPSBlbnVtZXJhYmxlO1xuICAgIHRtcEdldERlc2MuY29uZmlndXJhYmxlID0gY29uZmlndXJhYmxlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHRtcEdldERlc2MpO1xuICAgIHRtcEdldERlc2MuZ2V0ID0gbnVsbDtcbn07XG5cbnZhciB0bXBTZXREZXNjID0ge1xuICAgIHNldDogbnVsbCxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IGZhbHNlXG59O1xuXG4vKipcbiAqIERlZmluZSBzZXQgYWNjZXNzb3IsIGp1c3QgaGVscCB0byBjYWxsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSguLi4pXG4gKiBAbWV0aG9kIHNldFxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlclxuICogQHBhcmFtIHtCb29sZWFufSBbZW51bWVyYWJsZT1mYWxzZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbmZpZ3VyYWJsZT1mYWxzZV1cbiAqL1xuanMuc2V0ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgc2V0dGVyLCBlbnVtZXJhYmxlLCBjb25maWd1cmFibGUpIHtcbiAgICB0bXBTZXREZXNjLnNldCA9IHNldHRlcjtcbiAgICB0bXBTZXREZXNjLmVudW1lcmFibGUgPSBlbnVtZXJhYmxlO1xuICAgIHRtcFNldERlc2MuY29uZmlndXJhYmxlID0gY29uZmlndXJhYmxlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHRtcFNldERlc2MpO1xuICAgIHRtcFNldERlc2Muc2V0ID0gbnVsbDtcbn07XG5cbi8qKlxuICogR2V0IGNsYXNzIG5hbWUgb2YgdGhlIG9iamVjdCwgaWYgb2JqZWN0IGlzIGp1c3QgYSB7fSAoYW5kIHdoaWNoIGNsYXNzIG5hbWVkICdPYmplY3QnKSwgaXQgd2lsbCByZXR1cm4gXCJcIi5cbiAqIChtb2RpZmllZCBmcm9tIDxhIGhyZWY9XCJodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEyNDk1MzEvaG93LXRvLWdldC1hLWphdmFzY3JpcHQtb2JqZWN0cy1jbGFzc1wiPnRoZSBjb2RlIGZyb20gdGhpcyBzdGFja292ZXJmbG93IHBvc3Q8L2E+KVxuICogQG1ldGhvZCBnZXRDbGFzc05hbWVcbiAqIEBwYXJhbSB7T2JqZWN0fEZ1bmN0aW9ufSBvYmpPckN0b3IgLSBpbnN0YW5jZSBvciBjb25zdHJ1Y3RvclxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5qcy5nZXRDbGFzc05hbWUgPSBmdW5jdGlvbiAob2JqT3JDdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBvYmpPckN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIHByb3RvdHlwZSA9IG9iak9yQ3Rvci5wcm90b3R5cGU7XG4gICAgICAgIGlmIChwcm90b3R5cGUgJiYgcHJvdG90eXBlLmhhc093blByb3BlcnR5KCdfX2NsYXNzbmFtZV9fJykgJiYgcHJvdG90eXBlLl9fY2xhc3NuYW1lX18pIHtcbiAgICAgICAgICAgIHJldHVybiBwcm90b3R5cGUuX19jbGFzc25hbWVfXztcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmV0dmFsID0gJyc7XG4gICAgICAgIC8vICBmb3IgYnJvd3NlcnMgd2hpY2ggaGF2ZSBuYW1lIHByb3BlcnR5IGluIHRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgb2JqZWN0LCBzdWNoIGFzIGNocm9tZVxuICAgICAgICBpZiAob2JqT3JDdG9yLm5hbWUpIHtcbiAgICAgICAgICAgIHJldHZhbCA9IG9iak9yQ3Rvci5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmpPckN0b3IudG9TdHJpbmcpIHtcbiAgICAgICAgICAgIHZhciBhcnIsIHN0ciA9IG9iak9yQ3Rvci50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKHN0ci5jaGFyQXQoMCkgPT09ICdbJykge1xuICAgICAgICAgICAgICAgIC8vIHN0ciBpcyBcIltvYmplY3Qgb2JqZWN0Q2xhc3NdXCJcbiAgICAgICAgICAgICAgICBhcnIgPSBzdHIubWF0Y2goL1xcW1xcdytcXHMqKFxcdyspXFxdLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBzdHIgaXMgZnVuY3Rpb24gb2JqZWN0Q2xhc3MgKCkge30gZm9yIElFIEZpcmVmb3hcbiAgICAgICAgICAgICAgICBhcnIgPSBzdHIubWF0Y2goL2Z1bmN0aW9uXFxzKihcXHcrKS8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFyciAmJiBhcnIubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dmFsID0gYXJyWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXR2YWwgIT09ICdPYmplY3QnID8gcmV0dmFsIDogJyc7XG4gICAgfVxuICAgIGVsc2UgaWYgKG9iak9yQ3RvciAmJiBvYmpPckN0b3IuY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGpzLmdldENsYXNzTmFtZShvYmpPckN0b3IuY29uc3RydWN0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59O1xuXG5mdW5jdGlvbiBpc1RlbXBDbGFzc0lkIChpZCkge1xuICAgIHJldHVybiB0eXBlb2YgaWQgIT09ICdzdHJpbmcnIHx8IGlkLnN0YXJ0c1dpdGgodGVtcENJREdlbmVyYXRlci5wcmVmaXgpO1xufVxuXG4vLyBpZCDms6jlhoxcbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9pZFRvQ2xhc3MgPSB7fTtcbiAgICB2YXIgX25hbWVUb0NsYXNzID0ge307XG5cbiAgICBmdW5jdGlvbiBzZXR1cCAoa2V5LCBwdWJsaWNOYW1lLCB0YWJsZSkge1xuICAgICAgICBqcy5nZXRzZXQoanMsIHB1YmxpY05hbWUsXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRhYmxlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBqcy5jbGVhcih0YWJsZSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0YWJsZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlkLCBjb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgLy8gZGVyZWdpc3RlciBvbGRcbiAgICAgICAgICAgIGlmIChjb25zdHJ1Y3Rvci5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0YWJsZVtjb25zdHJ1Y3Rvci5wcm90b3R5cGVba2V5XV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqcy52YWx1ZShjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGtleSwgaWQpO1xuICAgICAgICAgICAgLy8gcmVnaXN0ZXIgY2xhc3NcbiAgICAgICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciByZWdpc3RlcmVkID0gdGFibGVbaWRdO1xuICAgICAgICAgICAgICAgIGlmIChyZWdpc3RlcmVkICYmIHJlZ2lzdGVyZWQgIT09IGNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9ICdBIENsYXNzIGFscmVhZHkgZXhpc3RzIHdpdGggdGhlIHNhbWUgJyArIGtleSArICcgOiBcIicgKyBpZCArICdcIi4nO1xuICAgICAgICAgICAgICAgICAgICBpZiAoQ0NfVEVTVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgKz0gJyAoVGhpcyBtYXkgYmUgY2F1c2VkIGJ5IGVycm9yIG9mIHVuaXQgdGVzdC4pIFxcXG5JZiB5b3UgZG9udCBuZWVkIHNlcmlhbGl6YXRpb24sIHlvdSBjYW4gc2V0IGNsYXNzIGlkIHRvIFwiXCIuIFlvdSBjYW4gYWxzbyBjYWxsIFxcXG5jYy5qcy51bnJlZ2lzdGVyQ2xhc3MgdG8gcmVtb3ZlIHRoZSBpZCBvZiB1bnVzZWQgY2xhc3MnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNjLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlW2lkXSA9IGNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL2lmIChpZCA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgIC8vICAgIGNvbnNvbGUudHJhY2UoXCJcIiwgdGFibGUgPT09IF9uYW1lVG9DbGFzcyk7XG4gICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgdGhlIGNsYXNzIGJ5IHNwZWNpZmllZCBpZCwgaWYgaXRzIGNsYXNzbmFtZSBpcyBub3QgZGVmaW5lZCwgdGhlIGNsYXNzIG5hbWUgd2lsbCBhbHNvIGJlIHNldC5cbiAgICAgKiBAbWV0aG9kIF9zZXRDbGFzc0lkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzSWRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgLyoqXG4gICAgICogISNlbiBBbGwgY2xhc3NlcyByZWdpc3RlcmVkIGluIHRoZSBlbmdpbmUsIGluZGV4ZWQgYnkgSUQuXG4gICAgICogISN6aCDlvJXmk47kuK3lt7Lms6jlhoznmoTmiYDmnInnsbvlnovvvIzpgJrov4cgSUQg6L+b6KGM57Si5byV44CCXG4gICAgICogQHByb3BlcnR5IF9yZWdpc3RlcmVkQ2xhc3NJZHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIHNhdmUgYWxsIHJlZ2lzdGVyZWQgY2xhc3NlcyBiZWZvcmUgbG9hZGluZyBzY3JpcHRzXG4gICAgICogbGV0IGJ1aWx0aW5DbGFzc0lkcyA9IGNjLmpzLl9yZWdpc3RlcmVkQ2xhc3NJZHM7XG4gICAgICogbGV0IGJ1aWx0aW5DbGFzc05hbWVzID0gY2MuanMuX3JlZ2lzdGVyZWRDbGFzc05hbWVzO1xuICAgICAqIC8vIGxvYWQgc29tZSBzY3JpcHRzIHRoYXQgY29udGFpbiBDQ0NsYXNzXG4gICAgICogLi4uXG4gICAgICogLy8gY2xlYXIgYWxsIGxvYWRlZCBjbGFzc2VzXG4gICAgICogY2MuanMuX3JlZ2lzdGVyZWRDbGFzc0lkcyA9IGJ1aWx0aW5DbGFzc0lkcztcbiAgICAgKiBjYy5qcy5fcmVnaXN0ZXJlZENsYXNzTmFtZXMgPSBidWlsdGluQ2xhc3NOYW1lcztcbiAgICAgKi9cbiAgICBqcy5fc2V0Q2xhc3NJZCA9IHNldHVwKCdfX2NpZF9fJywgJ19yZWdpc3RlcmVkQ2xhc3NJZHMnLCBfaWRUb0NsYXNzKTtcblxuICAgIC8qKlxuICAgICAqICEjZW4gQWxsIGNsYXNzZXMgcmVnaXN0ZXJlZCBpbiB0aGUgZW5naW5lLCBpbmRleGVkIGJ5IG5hbWUuXG4gICAgICogISN6aCDlvJXmk47kuK3lt7Lms6jlhoznmoTmiYDmnInnsbvlnovvvIzpgJrov4flkI3np7Dov5vooYzntKLlvJXjgIJcbiAgICAgKiBAcHJvcGVydHkgX3JlZ2lzdGVyZWRDbGFzc05hbWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBzYXZlIGFsbCByZWdpc3RlcmVkIGNsYXNzZXMgYmVmb3JlIGxvYWRpbmcgc2NyaXB0c1xuICAgICAqIGxldCBidWlsdGluQ2xhc3NJZHMgPSBjYy5qcy5fcmVnaXN0ZXJlZENsYXNzSWRzO1xuICAgICAqIGxldCBidWlsdGluQ2xhc3NOYW1lcyA9IGNjLmpzLl9yZWdpc3RlcmVkQ2xhc3NOYW1lcztcbiAgICAgKiAvLyBsb2FkIHNvbWUgc2NyaXB0cyB0aGF0IGNvbnRhaW4gQ0NDbGFzc1xuICAgICAqIC4uLlxuICAgICAqIC8vIGNsZWFyIGFsbCBsb2FkZWQgY2xhc3Nlc1xuICAgICAqIGNjLmpzLl9yZWdpc3RlcmVkQ2xhc3NJZHMgPSBidWlsdGluQ2xhc3NJZHM7XG4gICAgICogY2MuanMuX3JlZ2lzdGVyZWRDbGFzc05hbWVzID0gYnVpbHRpbkNsYXNzTmFtZXM7XG4gICAgICovXG4gICAgdmFyIGRvU2V0Q2xhc3NOYW1lID0gc2V0dXAoJ19fY2xhc3NuYW1lX18nLCAnX3JlZ2lzdGVyZWRDbGFzc05hbWVzJywgX25hbWVUb0NsYXNzKTtcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIHRoZSBjbGFzcyBieSBzcGVjaWZpZWQgbmFtZSBtYW51YWxseVxuICAgICAqIEBtZXRob2Qgc2V0Q2xhc3NOYW1lXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAganMuc2V0Q2xhc3NOYW1lID0gZnVuY3Rpb24gKGNsYXNzTmFtZSwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgZG9TZXRDbGFzc05hbWUoY2xhc3NOYW1lLCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgIC8vIGF1dG8gc2V0IGNsYXNzIGlkXG4gICAgICAgIGlmICghY29uc3RydWN0b3IucHJvdG90eXBlLmhhc093blByb3BlcnR5KCdfX2NpZF9fJykpIHtcbiAgICAgICAgICAgIHZhciBpZCA9IGNsYXNzTmFtZSB8fCB0ZW1wQ0lER2VuZXJhdGVyLmdldE5ld0lkKCk7XG4gICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICBqcy5fc2V0Q2xhc3NJZChpZCwgY29uc3RydWN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXIgYSBjbGFzcyBmcm9tIGZpcmViYWxsLlxuICAgICAqXG4gICAgICogSWYgeW91IGRvbnQgbmVlZCBhIHJlZ2lzdGVyZWQgY2xhc3MgYW55bW9yZSwgeW91IHNob3VsZCB1bnJlZ2lzdGVyIHRoZSBjbGFzcyBzbyB0aGF0IEZpcmViYWxsIHdpbGwgbm90IGtlZXAgaXRzIHJlZmVyZW5jZSBhbnltb3JlLlxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgaXRzIHN0aWxsIHlvdXIgcmVzcG9uc2liaWxpdHkgdG8gZnJlZSBvdGhlciByZWZlcmVuY2VzIHRvIHRoZSBjbGFzcy5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgdW5yZWdpc3RlckNsYXNzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gLi4uY29uc3RydWN0b3IgLSB0aGUgY2xhc3MgeW91IHdpbGwgd2FudCB0byB1bnJlZ2lzdGVyLCBhbnkgbnVtYmVyIG9mIGNsYXNzZXMgY2FuIGJlIGFkZGVkXG4gICAgICovXG4gICAganMudW5yZWdpc3RlckNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHAgPSBhcmd1bWVudHNbaV0ucHJvdG90eXBlO1xuICAgICAgICAgICAgdmFyIGNsYXNzSWQgPSBwLl9fY2lkX187XG4gICAgICAgICAgICBpZiAoY2xhc3NJZCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBfaWRUb0NsYXNzW2NsYXNzSWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNsYXNzbmFtZSA9IHAuX19jbGFzc25hbWVfXztcbiAgICAgICAgICAgIGlmIChjbGFzc25hbWUpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgX25hbWVUb0NsYXNzW2NsYXNzbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZWdpc3RlcmVkIGNsYXNzIGJ5IGlkXG4gICAgICogQG1ldGhvZCBfZ2V0Q2xhc3NCeUlkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzSWRcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gY29uc3RydWN0b3JcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGpzLl9nZXRDbGFzc0J5SWQgPSBmdW5jdGlvbiAoY2xhc3NJZCkge1xuICAgICAgICByZXR1cm4gX2lkVG9DbGFzc1tjbGFzc0lkXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZWdpc3RlcmVkIGNsYXNzIGJ5IG5hbWVcbiAgICAgKiBAbWV0aG9kIGdldENsYXNzQnlOYW1lXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzbmFtZVxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGpzLmdldENsYXNzQnlOYW1lID0gZnVuY3Rpb24gKGNsYXNzbmFtZSkge1xuICAgICAgICByZXR1cm4gX25hbWVUb0NsYXNzW2NsYXNzbmFtZV07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCBjbGFzcyBpZCBvZiB0aGUgb2JqZWN0XG4gICAgICogQG1ldGhvZCBfZ2V0Q2xhc3NJZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fEZ1bmN0aW9ufSBvYmogLSBpbnN0YW5jZSBvciBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbG93VGVtcElkPXRydWVdIC0gY2FuIHJldHVybiB0ZW1wIGlkIGluIGVkaXRvclxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGpzLl9nZXRDbGFzc0lkID0gZnVuY3Rpb24gKG9iaiwgYWxsb3dUZW1wSWQpIHtcbiAgICAgICAgYWxsb3dUZW1wSWQgPSAodHlwZW9mIGFsbG93VGVtcElkICE9PSAndW5kZWZpbmVkJyA/IGFsbG93VGVtcElkOiB0cnVlKTtcblxuICAgICAgICB2YXIgcmVzO1xuICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmoucHJvdG90eXBlLmhhc093blByb3BlcnR5KCdfX2NpZF9fJykpIHtcbiAgICAgICAgICAgIHJlcyA9IG9iai5wcm90b3R5cGUuX19jaWRfXztcbiAgICAgICAgICAgIGlmICghYWxsb3dUZW1wSWQgJiYgKENDX0RFViB8fCBDQ19FRElUT1IpICYmIGlzVGVtcENsYXNzSWQocmVzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iaiAmJiBvYmouY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIHZhciBwcm90b3R5cGUgPSBvYmouY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgICAgICAgICAgaWYgKHByb3RvdHlwZSAmJiBwcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ19fY2lkX18nKSkge1xuICAgICAgICAgICAgICAgIHJlcyA9IG9iai5fX2NpZF9fO1xuICAgICAgICAgICAgICAgIGlmICghYWxsb3dUZW1wSWQgJiYgKENDX0RFViB8fCBDQ19FRElUT1IpICYmIGlzVGVtcENsYXNzSWQocmVzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH07XG59KSgpO1xuXG4vKipcbiAqIERlZmluZXMgYSBwb2x5ZmlsbCBmaWVsZCBmb3Igb2Jzb2xldGVkIGNvZGVzLlxuICogQG1ldGhvZCBvYnNvbGV0ZVxuICogQHBhcmFtIHthbnl9IG9iaiAtIFlvdXJPYmplY3Qgb3IgWW91ckNsYXNzLnByb3RvdHlwZVxuICogQHBhcmFtIHtTdHJpbmd9IG9ic29sZXRlZCAtIFwiT2xkUGFyYW1cIiBvciBcIllvdXJDbGFzcy5PbGRQYXJhbVwiXG4gKiBAcGFyYW0ge1N0cmluZ30gbmV3RXhwciAtIFwiTmV3UGFyYW1cIiBvciBcIllvdXJDbGFzcy5OZXdQYXJhbVwiXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFt3cml0YWJsZT1mYWxzZV1cbiAqL1xuanMub2Jzb2xldGUgPSBmdW5jdGlvbiAob2JqLCBvYnNvbGV0ZWQsIG5ld0V4cHIsIHdyaXRhYmxlKSB7XG4gICAgdmFyIGV4dHJhY3RQcm9wTmFtZSA9IC8oW14uXSspJC87XG4gICAgdmFyIG9sZFByb3AgPSBleHRyYWN0UHJvcE5hbWUuZXhlYyhvYnNvbGV0ZWQpWzBdO1xuICAgIHZhciBuZXdQcm9wID0gZXh0cmFjdFByb3BOYW1lLmV4ZWMobmV3RXhwcilbMF07XG4gICAgZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgICAgaWYgKENDX0RFVikge1xuICAgICAgICAgICAgY2Mud2FybklEKDU0MDAsIG9ic29sZXRlZCwgbmV3RXhwcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbbmV3UHJvcF07XG4gICAgfVxuICAgIGlmICh3cml0YWJsZSkge1xuICAgICAgICBqcy5nZXRzZXQob2JqLCBvbGRQcm9wLFxuICAgICAgICAgICAgZ2V0LFxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKENDX0RFVikge1xuICAgICAgICAgICAgICAgICAgICBjYy53YXJuSUQoNTQwMSwgb2Jzb2xldGVkLCBuZXdFeHByKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpc1tuZXdQcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAganMuZ2V0KG9iaiwgb2xkUHJvcCwgZ2V0KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIERlZmluZXMgYWxsIHBvbHlmaWxsIGZpZWxkcyBmb3Igb2Jzb2xldGVkIGNvZGVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBwcm9wcy5cbiAqIEBtZXRob2Qgb2Jzb2xldGVzXG4gKiBAcGFyYW0ge2FueX0gb2JqIC0gWW91ck9iamVjdCBvciBZb3VyQ2xhc3MucHJvdG90eXBlXG4gKiBAcGFyYW0ge2FueX0gb2JqTmFtZSAtIFwiWW91ck9iamVjdFwiIG9yIFwiWW91ckNsYXNzXCJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICogQHBhcmFtIHtCb29sZWFufSBbd3JpdGFibGU9ZmFsc2VdXG4gKi9cbmpzLm9ic29sZXRlcyA9IGZ1bmN0aW9uIChvYmosIG9iak5hbWUsIHByb3BzLCB3cml0YWJsZSkge1xuICAgIGZvciAodmFyIG9ic29sZXRlZCBpbiBwcm9wcykge1xuICAgICAgICB2YXIgbmV3TmFtZSA9IHByb3BzW29ic29sZXRlZF07XG4gICAgICAgIGpzLm9ic29sZXRlKG9iaiwgb2JqTmFtZSArICcuJyArIG9ic29sZXRlZCwgbmV3TmFtZSwgd3JpdGFibGUpO1xuICAgIH1cbn07XG5cbnZhciBSRUdFWFBfTlVNX09SX1NUUiA9IC8oJWQpfCglcykvO1xudmFyIFJFR0VYUF9TVFIgPSAvJXMvO1xuXG4vKipcbiAqIEEgc3RyaW5nIHRvb2wgdG8gY29uc3RydWN0IGEgc3RyaW5nIHdpdGggZm9ybWF0IHN0cmluZy5cbiAqIEBtZXRob2QgZm9ybWF0U3RyXG4gKiBAcGFyYW0ge1N0cmluZ3xhbnl9IG1zZyAtIEEgSmF2YVNjcmlwdCBzdHJpbmcgY29udGFpbmluZyB6ZXJvIG9yIG1vcmUgc3Vic3RpdHV0aW9uIHN0cmluZ3MgKCVzKS5cbiAqIEBwYXJhbSB7YW55fSAuLi5zdWJzdCAtIEphdmFTY3JpcHQgb2JqZWN0cyB3aXRoIHdoaWNoIHRvIHJlcGxhY2Ugc3Vic3RpdHV0aW9uIHN0cmluZ3Mgd2l0aGluIG1zZy4gVGhpcyBnaXZlcyB5b3UgYWRkaXRpb25hbCBjb250cm9sIG92ZXIgdGhlIGZvcm1hdCBvZiB0aGUgb3V0cHV0LlxuICogQHJldHVybnMge1N0cmluZ31cbiAqIEBleGFtcGxlXG4gKiBjYy5qcy5mb3JtYXRTdHIoXCJhOiAlcywgYjogJXNcIiwgYSwgYik7XG4gKiBjYy5qcy5mb3JtYXRTdHIoYSwgYiwgYyk7XG4gKi9cbmpzLmZvcm1hdFN0ciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJnTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAoYXJnTGVuID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIG1zZyA9IGFyZ3VtZW50c1swXTtcbiAgICBpZiAoYXJnTGVuID09PSAxKSB7XG4gICAgICAgIHJldHVybiAnJyArIG1zZztcbiAgICB9XG5cbiAgICB2YXIgaGFzU3Vic3RpdHV0aW9uID0gdHlwZW9mIG1zZyA9PT0gJ3N0cmluZycgJiYgUkVHRVhQX05VTV9PUl9TVFIudGVzdChtc2cpO1xuICAgIGlmIChoYXNTdWJzdGl0dXRpb24pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmdMZW47ICsraSkge1xuICAgICAgICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIHZhciByZWdFeHBUb1Rlc3QgPSB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyA/IFJFR0VYUF9OVU1fT1JfU1RSIDogUkVHRVhQX1NUUjtcbiAgICAgICAgICAgIGlmIChyZWdFeHBUb1Rlc3QudGVzdChtc2cpKVxuICAgICAgICAgICAgICAgIG1zZyA9IG1zZy5yZXBsYWNlKHJlZ0V4cFRvVGVzdCwgYXJnKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBtc2cgKz0gJyAnICsgYXJnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ0xlbjsgKytpKSB7XG4gICAgICAgICAgICBtc2cgKz0gJyAnICsgYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtc2c7XG59O1xuXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BldGthYW50b25vdi9ibHVlYmlyZC9pc3N1ZXMvMTM4OVxuanMuc2hpZnRBcmd1bWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgIH1cbiAgICByZXR1cm4gYXJncztcbn07XG5cbi8qKlxuICogISNlblxuICogQSBzaW1wbGUgd3JhcHBlciBvZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgd2hpY2ggZW5zdXJlcyB0aGUgcmV0dXJuIG9iamVjdCBoYXZlIG5vIHByb3RvdHlwZSAoYW5kIHRodXMgbm8gaW5oZXJpdGVkIG1lbWJlcnMpLiBTbyB3ZSBjYW4gc2tpcCBgaGFzT3duUHJvcGVydHlgIGNhbGxzIG9uIHByb3BlcnR5IGxvb2t1cHMuIEl0IGlzIGEgd29ydGh3aGlsZSBvcHRpbWl6YXRpb24gdGhhbiB0aGUgYHt9YCBsaXRlcmFsIHdoZW4gYGhhc093blByb3BlcnR5YCBjYWxscyBhcmUgbmVjZXNzYXJ5LlxuICogISN6aFxuICog6K+l5pa55rOV5piv5a+5IGBPYmplY3QuY3JlYXRlKG51bGwpYCDnmoTnroDljZXlsIHoo4XjgIJgT2JqZWN0LmNyZWF0ZShudWxsKWAg55So5LqO5Yib5bu65pegIHByb3RvdHlwZSDvvIjkuZ/lsLHml6Dnu6fmib/vvInnmoTnqbrlr7nosaHjgILov5nmoLfmiJHku6zlnKjor6Xlr7nosaHkuIrmn6Xmib7lsZ7mgKfml7bvvIzlsLHkuI3nlKjov5vooYwgYGhhc093blByb3BlcnR5YCDliKTmlq3jgILlnKjpnIDopoHpopHnuYHliKTmlq0gYGhhc093blByb3BlcnR5YCDml7bvvIzkvb/nlKjov5nkuKrmlrnms5XmgKfog73kvJrmr5QgYHt9YCDmm7Tpq5jjgIJcbiAqXG4gKiBAbWV0aG9kIGNyZWF0ZU1hcFxuICogQHBhcmFtIHtCb29sZWFufSBbZm9yY2VEaWN0TW9kZT1mYWxzZV0gLSBBcHBseSB0aGUgZGVsZXRlIG9wZXJhdG9yIHRvIG5ld2x5IGNyZWF0ZWQgbWFwIG9iamVjdC4gVGhpcyBjYXVzZXMgVjggdG8gcHV0IHRoZSBvYmplY3QgaW4gXCJkaWN0aW9uYXJ5IG1vZGVcIiBhbmQgZGlzYWJsZXMgY3JlYXRpb24gb2YgaGlkZGVuIGNsYXNzZXMgd2hpY2ggYXJlIHZlcnkgZXhwZW5zaXZlIGZvciBvYmplY3RzIHRoYXQgYXJlIGNvbnN0YW50bHkgY2hhbmdpbmcgc2hhcGUuXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmpzLmNyZWF0ZU1hcCA9IGZ1bmN0aW9uIChmb3JjZURpY3RNb2RlKSB7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgaWYgKGZvcmNlRGljdE1vZGUpIHtcbiAgICAgICAgY29uc3QgSU5WQUxJRF9JREVOVElGSUVSXzEgPSAnLic7XG4gICAgICAgIGNvbnN0IElOVkFMSURfSURFTlRJRklFUl8yID0gJy8nO1xuICAgICAgICBtYXBbSU5WQUxJRF9JREVOVElGSUVSXzFdID0gdHJ1ZTtcbiAgICAgICAgbWFwW0lOVkFMSURfSURFTlRJRklFUl8yXSA9IHRydWU7XG4gICAgICAgIGRlbGV0ZSBtYXBbSU5WQUxJRF9JREVOVElGSUVSXzFdO1xuICAgICAgICBkZWxldGUgbWFwW0lOVkFMSURfSURFTlRJRklFUl8yXTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn07XG5cbi8qKlxuICogQGNsYXNzIGFycmF5XG4gKiBAc3RhdGljXG4gKi9cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBhcnJheSBpdGVtIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gKiBAbWV0aG9kIHJlbW92ZUF0XG4gKiBAcGFyYW0ge2FueVtdfSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUF0IChhcnJheSwgaW5kZXgpIHtcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGFycmF5IGl0ZW0gYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAqIEl0J3MgZmFzdGVyIGJ1dCB0aGUgb3JkZXIgb2YgdGhlIGFycmF5IHdpbGwgYmUgY2hhbmdlZC5cbiAqIEBtZXRob2QgZmFzdFJlbW92ZUF0XG4gKiBAcGFyYW0ge2FueVtdfSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gKi9cbmZ1bmN0aW9uIGZhc3RSZW1vdmVBdCAoYXJyYXksIGluZGV4KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFycmF5W2luZGV4XSA9IGFycmF5W2xlbmd0aCAtIDFdO1xuICAgIGFycmF5Lmxlbmd0aCA9IGxlbmd0aCAtIDE7XG59XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhIHNwZWNpZmljIG9iamVjdCBmcm9tIHRoZSBhcnJheS5cbiAqIEBtZXRob2QgcmVtb3ZlXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJheVxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiByZW1vdmUgKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YodmFsdWUpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIHJlbW92ZUF0KGFycmF5LCBpbmRleCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGEgc3BlY2lmaWMgb2JqZWN0IGZyb20gdGhlIGFycmF5LlxuICogSXQncyBmYXN0ZXIgYnV0IHRoZSBvcmRlciBvZiB0aGUgYXJyYXkgd2lsbCBiZSBjaGFuZ2VkLlxuICogQG1ldGhvZCBmYXN0UmVtb3ZlXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGZhc3RSZW1vdmUgKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YodmFsdWUpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xuICAgICAgICAtLWFycmF5Lmxlbmd0aDtcbiAgICB9XG59XG5cbi8qKlxuICogVmVyaWZ5IGFycmF5J3MgVHlwZVxuICogQG1ldGhvZCB2ZXJpZnlUeXBlXG4gKiBAcGFyYW0ge2FycmF5fSBhcnJheVxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHlwZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gdmVyaWZ5VHlwZSAoYXJyYXksIHR5cGUpIHtcbiAgICBpZiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIShhcnJheVtpXSBpbnN0YW5jZW9mICB0eXBlKSkge1xuICAgICAgICAgICAgICAgIGNjLmxvZ0lEKDEzMDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGZyb20gYXJyYXkgYWxsIHZhbHVlcyBpbiBtaW51c0Fyci4gRm9yIGVhY2ggVmFsdWUgaW4gbWludXNBcnIsIHRoZSBmaXJzdCBtYXRjaGluZyBpbnN0YW5jZSBpbiBhcnJheSB3aWxsIGJlIHJlbW92ZWQuXG4gKiBAbWV0aG9kIHJlbW92ZUFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBTb3VyY2UgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IG1pbnVzQXJyIG1pbnVzIEFycmF5XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUFycmF5IChhcnJheSwgbWludXNBcnIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG1pbnVzQXJyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICByZW1vdmUoYXJyYXksIG1pbnVzQXJyW2ldKTtcbiAgICB9XG59XG5cbi8qKlxuICogSW5zZXJ0cyBzb21lIG9iamVjdHMgYXQgaW5kZXhcbiAqIEBtZXRob2QgYXBwZW5kT2JqZWN0c0F0XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheVxuICogQHBhcmFtIHtBcnJheX0gYWRkT2Jqc1xuICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gYXBwZW5kT2JqZWN0c0F0IChhcnJheSwgYWRkT2JqcywgaW5kZXgpIHtcbiAgICBhcnJheS5zcGxpY2UuYXBwbHkoYXJyYXksIFtpbmRleCwgMF0uY29uY2F0KGFkZE9ianMpKTtcbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogRXhhY3Qgc2FtZSBmdW5jdGlvbiBhcyBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi48YnI+XG4gKiBIQUNLOiB1Z2xpeSBoYWNrIGZvciBCYWlkdSBtb2JpbGUgYnJvd3NlciBjb21wYXRpYmlsaXR5LCBzdHVwaWQgQmFpZHUgZ3V5cyBtb2RpZnkgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgZm9yIGFsbCBwYWdlcyBsb2FkZWQsIHRoZWlyIHZlcnNpb24gY2hhbmdlcyBzdHJpY3QgY29tcGFyaXNvbiB0byBub24tc3RyaWN0IGNvbXBhcmlzb24sIGl0IGFsc28gaWdub3JlcyB0aGUgc2Vjb25kIHBhcmFtZXRlciBvZiB0aGUgb3JpZ2luYWwgQVBJLCBhbmQgdGhpcyB3aWxsIGNhdXNlIGV2ZW50IGhhbmRsZXIgZW50ZXIgaW5maW5pdGUgbG9vcC48YnI+XG4gKiBCYWlkdSBkZXZlbG9wZXJzLCBpZiB5b3UgZXZlciBzZWUgdGhpcyBkb2N1bWVudGF0aW9uLCBoZXJlIGlzIHRoZSBzdGFuZGFyZDogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaW5kZXhPZiwgU2VyaW91c2x5IVxuICpcbiAqIEBtZXRob2QgaW5kZXhPZlxuICogQHBhcmFtIHthbnl9IHNlYXJjaEVsZW1lbnQgLSBFbGVtZW50IHRvIGxvY2F0ZSBpbiB0aGUgYXJyYXkuXG4gKiBAcGFyYW0ge051bWJlcn0gW2Zyb21JbmRleD0wXSAtIFRoZSBpbmRleCB0byBzdGFydCB0aGUgc2VhcmNoIGF0XG4gKiBAcmV0dXJuIHtOdW1iZXJ9IC0gdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGEgZ2l2ZW4gZWxlbWVudCBjYW4gYmUgZm91bmQgaW4gdGhlIGFycmF5LCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xudmFyIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGFycmF5IGNvbnRhaW5zIGEgc3BlY2lmaWMgdmFsdWUuXG4gKiBAbWV0aG9kIGNvbnRhaW5zXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJheVxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBjb250YWlucyAoYXJyYXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIGFycmF5LmluZGV4T2YodmFsdWUpID49IDA7XG59XG5cbi8qKlxuICogQ29weSBhbiBhcnJheSdzIGl0ZW0gdG8gYSBuZXcgYXJyYXkgKGl0cyBwZXJmb3JtYW5jZSBpcyBiZXR0ZXIgdGhhbiBBcnJheS5zbGljZSlcbiAqIEBtZXRob2QgY29weVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXlcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5mdW5jdGlvbiBjb3B5IChhcnJheSkge1xuICAgIHZhciBpLCBsZW4gPSBhcnJheS5sZW5ndGgsIGFycl9jbG9uZSA9IG5ldyBBcnJheShsZW4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSlcbiAgICAgICAgYXJyX2Nsb25lW2ldID0gYXJyYXlbaV07XG4gICAgcmV0dXJuIGFycl9jbG9uZTtcbn1cblxuanMuYXJyYXkgPSB7XG4gICAgcmVtb3ZlLFxuICAgIGZhc3RSZW1vdmUsXG4gICAgcmVtb3ZlQXQsXG4gICAgZmFzdFJlbW92ZUF0LFxuICAgIGNvbnRhaW5zLFxuICAgIHZlcmlmeVR5cGUsXG4gICAgcmVtb3ZlQXJyYXksXG4gICAgYXBwZW5kT2JqZWN0c0F0LFxuICAgIGNvcHksXG4gICAgaW5kZXhPZixcbiAgICBNdXRhYmxlRm9yd2FyZEl0ZXJhdG9yOiByZXF1aXJlKCcuLi91dGlscy9tdXRhYmxlLWZvcndhcmQtaXRlcmF0b3InKVxufTtcblxuLy8gT0JKRUNUIFBPT0xcblxuLyoqXG4gKiAhI2VuXG4gKiBBIGZpeGVkLWxlbmd0aCBvYmplY3QgcG9vbCBkZXNpZ25lZCBmb3IgZ2VuZXJhbCB0eXBlLjxicj5cbiAqIFRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIG9iamVjdCBwb29sIGlzIHZlcnkgc2ltcGxlLFxuICogaXQgY2FuIGhlbHBzIHlvdSB0byBpbXByb3ZlIHlvdXIgZ2FtZSBwZXJmb3JtYW5jZSBmb3Igb2JqZWN0cyB3aGljaCBuZWVkIGZyZXF1ZW50IHJlbGVhc2UgYW5kIHJlY3JlYXRlIG9wZXJhdGlvbnM8YnIvPlxuICogISN6aFxuICog6ZW/5bqm5Zu65a6a55qE5a+56LGh57yT5a2Y5rGg77yM5Y+v5Lul55So5p2l57yT5a2Y5ZCE56eN5a+56LGh57G75Z6L44CCPGJyLz5cbiAqIOi/meS4quWvueixoeaxoOeahOWunueOsOmdnuW4uOeyvueugO+8jOWug+WPr+S7peW4ruWKqeaCqOaPkOmrmOa4uOaIj+aAp+iDve+8jOmAgueUqOS6juS8mOWMluWvueixoeeahOWPjeWkjeWIm+W7uuWSjOmUgOavgeOAglxuICogQGNsYXNzIFBvb2xcbiAqIEBleGFtcGxlXG4gKlxuICpFeGFtcGxlIDE6XG4gKlxuICpmdW5jdGlvbiBEZXRhaWxzICgpIHtcbiAqICAgIHRoaXMudXVpZExpc3QgPSBbXTtcbiAqfTtcbiAqRGV0YWlscy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gKiAgICB0aGlzLnV1aWRMaXN0Lmxlbmd0aCA9IDA7XG4gKn07XG4gKkRldGFpbHMucG9vbCA9IG5ldyBqcy5Qb29sKGZ1bmN0aW9uIChvYmopIHtcbiAqICAgIG9iai5yZXNldCgpO1xuICp9LCA1KTtcbiAqRGV0YWlscy5wb29sLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAqICAgIHJldHVybiB0aGlzLl9nZXQoKSB8fCBuZXcgRGV0YWlscygpO1xuICp9O1xuICpcbiAqdmFyIGRldGFpbCA9IERldGFpbHMucG9vbC5nZXQoKTtcbiAqLi4uXG4gKkRldGFpbHMucG9vbC5wdXQoZGV0YWlsKTtcbiAqXG4gKkV4YW1wbGUgMjpcbiAqXG4gKmZ1bmN0aW9uIERldGFpbHMgKGJ1ZmZlcikge1xuICogICAgdGhpcy51dWlkTGlzdCA9IGJ1ZmZlcjtcbiAqfTtcbiAqLi4uXG4gKkRldGFpbHMucG9vbC5nZXQgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gKiAgICB2YXIgY2FjaGVkID0gdGhpcy5fZ2V0KCk7XG4gKiAgICBpZiAoY2FjaGVkKSB7XG4gKiAgICAgICAgY2FjaGVkLnV1aWRMaXN0ID0gYnVmZmVyO1xuICogICAgICAgIHJldHVybiBjYWNoZWQ7XG4gKiAgICB9XG4gKiAgICBlbHNlIHtcbiAqICAgICAgICByZXR1cm4gbmV3IERldGFpbHMoYnVmZmVyKTtcbiAqICAgIH1cbiAqfTtcbiAqXG4gKnZhciBkZXRhaWwgPSBEZXRhaWxzLnBvb2wuZ2V0KCBbXSApO1xuICouLi5cbiAqL1xuLyoqXG4gKiAhI2VuXG4gKiBDb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYW4gb2JqZWN0IHBvb2wgZm9yIHRoZSBzcGVjaWZpYyBvYmplY3QgdHlwZS5cbiAqIFlvdSBjYW4gcGFzcyBhIGNhbGxiYWNrIGFyZ3VtZW50IGZvciBwcm9jZXNzIHRoZSBjbGVhbnVwIGxvZ2ljIHdoZW4gdGhlIG9iamVjdCBpcyByZWN5Y2xlZC5cbiAqICEjemhcbiAqIOS9v+eUqOaehOmAoOWHveaVsOadpeWIm+W7uuS4gOS4quaMh+WumuWvueixoeexu+Wei+eahOWvueixoeaxoO+8jOaCqOWPr+S7peS8oOmAkuS4gOS4quWbnuiwg+WHveaVsO+8jOeUqOS6juWkhOeQhuWvueixoeWbnuaUtuaXtueahOa4heeQhumAu+i+keOAglxuICogQG1ldGhvZCBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NsZWFudXBGdW5jXSAtIHRoZSBjYWxsYmFjayBtZXRob2QgdXNlZCB0byBwcm9jZXNzIHRoZSBjbGVhbnVwIGxvZ2ljIHdoZW4gdGhlIG9iamVjdCBpcyByZWN5Y2xlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGVhbnVwRnVuYy5vYmpcbiAqIEBwYXJhbSB7TnVtYmVyfSBzaXplIC0gaW5pdGlhbGl6ZXMgdGhlIGxlbmd0aCBvZiB0aGUgYXJyYXlcbiAqIEB0eXBlc2NyaXB0XG4gKiBjb25zdHJ1Y3RvcihjbGVhbnVwRnVuYzogKG9iajogYW55KSA9PiB2b2lkLCBzaXplOiBudW1iZXIpXG4gKiBjb25zdHJ1Y3RvcihzaXplOiBudW1iZXIpXG4gKi9cbmZ1bmN0aW9uIFBvb2wgKGNsZWFudXBGdW5jLCBzaXplKSB7XG4gICAgaWYgKHNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzaXplID0gY2xlYW51cEZ1bmM7XG4gICAgICAgIGNsZWFudXBGdW5jID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5nZXQgPSBudWxsO1xuICAgIHRoaXMuY291bnQgPSAwO1xuICAgIHRoaXMuX3Bvb2wgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgdGhpcy5fY2xlYW51cCA9IGNsZWFudXBGdW5jO1xufVxuXG4vKipcbiAqICEjZW5cbiAqIEdldCBhbmQgaW5pdGlhbGl6ZSBhbiBvYmplY3QgZnJvbSBwb29sLiBUaGlzIG1ldGhvZCBkZWZhdWx0cyB0byBudWxsIGFuZCByZXF1aXJlcyB0aGUgdXNlciB0byBpbXBsZW1lbnQgaXQuXG4gKiAhI3poXG4gKiDojrflj5blubbliJ3lp4vljJblr7nosaHmsaDkuK3nmoTlr7nosaHjgILov5nkuKrmlrnms5Xpu5jorqTkuLrnqbrvvIzpnIDopoHnlKjmiLfoh6rlt7Hlrp7njrDjgIJcbiAqIEBtZXRob2QgZ2V0XG4gKiBAcGFyYW0ge2FueX0gLi4ucGFyYW1zIC0gcGFyYW1ldGVycyB0byB1c2VkIHRvIGluaXRpYWxpemUgdGhlIG9iamVjdFxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuXG4vKipcbiAqICEjZW5cbiAqIFRoZSBjdXJyZW50IG51bWJlciBvZiBhdmFpbGFibGUgb2JqZWN0cywgdGhlIGRlZmF1bHQgaXMgMCwgaXQgd2lsbCBncmFkdWFsbHkgaW5jcmVhc2Ugd2l0aCB0aGUgcmVjeWNsZSBvZiB0aGUgb2JqZWN0LFxuICogdGhlIG1heGltdW0gd2lsbCBub3QgZXhjZWVkIHRoZSBzaXplIHNwZWNpZmllZCB3aGVuIHRoZSBjb25zdHJ1Y3RvciBpcyBjYWxsZWQuXG4gKiAhI3poXG4gKiDlvZPliY3lj6/nlKjlr7nosaHmlbDph4/vvIzkuIDlvIDlp4vpu5jorqTmmK8gMO+8jOmaj+edgOWvueixoeeahOWbnuaUtuS8mumAkOa4kOWinuWkp++8jOacgOWkp+S4jeS8mui2hei/h+iwg+eUqOaehOmAoOWHveaVsOaXtuaMh+WumueahCBzaXpl44CCXG4gKiBAcHJvcGVydHkge051bWJlcn0gY291bnRcbiAqIEBkZWZhdWx0IDBcbiAqL1xuXG4vKipcbiAqICEjZW5cbiAqIEdldCBhbiBvYmplY3QgZnJvbSBwb29sLCBpZiBubyBhdmFpbGFibGUgb2JqZWN0IGluIHRoZSBwb29sLCBudWxsIHdpbGwgYmUgcmV0dXJuZWQuXG4gKiAhI3poXG4gKiDojrflj5blr7nosaHmsaDkuK3nmoTlr7nosaHvvIzlpoLmnpzlr7nosaHmsaDmsqHmnInlj6/nlKjlr7nosaHvvIzliJnov5Tlm57nqbrjgIJcbiAqIEBtZXRob2QgX2dldFxuICogQHJldHVybnMge09iamVjdHxudWxsfVxuICovXG5Qb29sLnByb3RvdHlwZS5fZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmNvdW50ID4gMCkge1xuICAgICAgICAtLXRoaXMuY291bnQ7XG4gICAgICAgIHZhciBjYWNoZSA9IHRoaXMuX3Bvb2xbdGhpcy5jb3VudF07XG4gICAgICAgIHRoaXMuX3Bvb2xbdGhpcy5jb3VudF0gPSBudWxsO1xuICAgICAgICByZXR1cm4gY2FjaGU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiAhI2VuIFB1dCBhbiBvYmplY3QgaW50byB0aGUgcG9vbC5cbiAqICEjemgg5ZCR5a+56LGh5rGg6L+U6L+Y5LiA5Liq5LiN5YaN6ZyA6KaB55qE5a+56LGh44CCXG4gKiBAbWV0aG9kIHB1dFxuICovXG5Qb29sLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIHBvb2wgPSB0aGlzLl9wb29sO1xuICAgIGlmICh0aGlzLmNvdW50IDwgcG9vbC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NsZWFudXAgJiYgdGhpcy5fY2xlYW51cChvYmopID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHBvb2xbdGhpcy5jb3VudF0gPSBvYmo7XG4gICAgICAgICsrdGhpcy5jb3VudDtcbiAgICB9XG59O1xuXG4vKipcbiAqICEjZW4gUmVzaXplIHRoZSBwb29sLlxuICogISN6aCDorr7nva7lr7nosaHmsaDlrrnph4/jgIJcbiAqIEBtZXRob2QgcmVzaXplXG4gKi9cblBvb2wucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICBpZiAobGVuZ3RoID49IDApIHtcbiAgICAgICAgdGhpcy5fcG9vbC5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIGlmICh0aGlzLmNvdW50ID4gbGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmNvdW50ID0gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuanMuUG9vbCA9IFBvb2w7XG5cbi8vXG5cbmNjLmpzID0ganM7XG5cbm1vZHVsZS5leHBvcnRzID0ganM7XG5cbi8vIGZpeCBzdWJtb2R1bGUgcG9sbHV0ZSAuLi5cbi8qKlxuICogQHN1Ym1vZHVsZSBjY1xuICovXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCBSaWNhcmRvIFF1ZXNhZGFcbiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxMiBjb2NvczJkLXgub3JnXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgdGVtcENJREdlbmVyYXRlciA9IG5ldyAocmVxdWlyZSgnLi9pZC1nZW5lcmF0ZXInKSkoJ1RtcENJZC4nKTtcblxuZnVuY3Rpb24gX2dldFByb3BlcnR5RGVzY3JpcHRvcihvYmosIG5hbWUpIHtcbiAgICB3aGlsZSAob2JqKSB7XG4gICAgICAgIHZhciBwZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBuYW1lKTtcbiAgICAgICAgaWYgKHBkKSB7XG4gICAgICAgICAgICByZXR1cm4gcGQ7XG4gICAgICAgIH1cbiAgICAgICAgb2JqID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBfY29weXByb3AobmFtZSwgc291cmNlLCB0YXJnZXQpIHtcbiAgICB2YXIgcGQgPSBfZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgbmFtZSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwgcGQpO1xufVxuXG4vKipcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHNvbWUgSmF2YVNjcmlwdCB1dGlsaXRpZXMuXG4gKiBBbGwgbWVtYmVycyBjYW4gYmUgYWNjZXNzZWQgd2l0aCBcImNjLmpzXCIuXG4gKiBAc3VibW9kdWxlIGpzXG4gKiBAbW9kdWxlIGpzXG4gKi9cbnZhciBqcyA9IHtcblxuICAgIC8qKlxuICAgICAqIENoZWNrIHRoZSBvYmogd2hldGhlciBpcyBudW1iZXIgb3Igbm90XG4gICAgICogSWYgYSBudW1iZXIgaXMgY3JlYXRlZCBieSB1c2luZyAnbmV3IE51bWJlcigxMDA4NiknLCB0aGUgdHlwZW9mIGl0IHdpbGwgYmUgXCJvYmplY3RcIi4uLlxuICAgICAqIFRoZW4geW91IGNhbiB1c2UgdGhpcyBmdW5jdGlvbiBpZiB5b3UgY2FyZSBhYm91dCB0aGlzIGNhc2UuXG4gICAgICogQG1ldGhvZCBpc051bWJlclxuICAgICAqIEBwYXJhbSB7Kn0gb2JqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNOdW1iZXI6IGZ1bmN0aW9uIGlzTnVtYmVyKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ251bWJlcicgfHwgb2JqIGluc3RhbmNlb2YgTnVtYmVyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGUgb2JqIHdoZXRoZXIgaXMgc3RyaW5nIG9yIG5vdC5cbiAgICAgKiBJZiBhIHN0cmluZyBpcyBjcmVhdGVkIGJ5IHVzaW5nICduZXcgU3RyaW5nKFwiYmxhYmxhXCIpJywgdGhlIHR5cGVvZiBpdCB3aWxsIGJlIFwib2JqZWN0XCIuLi5cbiAgICAgKiBUaGVuIHlvdSBjYW4gdXNlIHRoaXMgZnVuY3Rpb24gaWYgeW91IGNhcmUgYWJvdXQgdGhpcyBjYXNlLlxuICAgICAqIEBtZXRob2QgaXNTdHJpbmdcbiAgICAgKiBAcGFyYW0geyp9IG9ialxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzU3RyaW5nOiBmdW5jdGlvbiBpc1N0cmluZyhvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdzdHJpbmcnIHx8IG9iaiBpbnN0YW5jZW9mIFN0cmluZztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29weSBhbGwgcHJvcGVydGllcyBub3QgZGVmaW5lZCBpbiBvYmogZnJvbSBhcmd1bWVudHNbMS4uLm5dXG4gICAgICogQG1ldGhvZCBhZGRvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmogb2JqZWN0IHRvIGV4dGVuZCBpdHMgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAuLi5zb3VyY2VPYmogc291cmNlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhlIHJlc3VsdCBvYmpcbiAgICAgKi9cbiAgICBhZGRvbjogZnVuY3Rpb24gYWRkb24ob2JqKSB7XG4gICAgICAgICd1c2Ugc3RyaWN0JztcblxuICAgICAgICBvYmogPSBvYmogfHwge307XG4gICAgICAgIGZvciAodmFyIGkgPSAxLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCh0eXBlb2Ygc291cmNlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzb3VyY2UpKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3JJRCg1NDAyLCBzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobmFtZSBpbiBvYmopKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY29weXByb3AobmFtZSwgc291cmNlLCBvYmopO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNvcHkgYWxsIHByb3BlcnRpZXMgZnJvbSBhcmd1bWVudHNbMS4uLm5dIHRvIG9ialxuICAgICAqIEBtZXRob2QgbWl4aW5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IC4uLnNvdXJjZU9ialxuICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhlIHJlc3VsdCBvYmpcbiAgICAgKi9cbiAgICBtaXhpbjogZnVuY3Rpb24gbWl4aW4ob2JqKSB7XG4gICAgICAgICd1c2Ugc3RyaWN0JztcblxuICAgICAgICBvYmogPSBvYmogfHwge307XG4gICAgICAgIGZvciAodmFyIGkgPSAxLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCh0eXBlb2Ygc291cmNlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzb3VyY2UpKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3JJRCg1NDAzLCBzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgX2NvcHlwcm9wKG5hbWUsIHNvdXJjZSwgb2JqKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVyaXZlIHRoZSBjbGFzcyBmcm9tIHRoZSBzdXBwbGllZCBiYXNlIGNsYXNzLlxuICAgICAqIEJvdGggY2xhc3NlcyBhcmUganVzdCBuYXRpdmUgamF2YXNjcmlwdCBjb25zdHJ1Y3RvcnMsIG5vdCBjcmVhdGVkIGJ5IGNjLkNsYXNzLCBzb1xuICAgICAqIHVzdWFsbHkgeW91IHdpbGwgd2FudCB0byBpbmhlcml0IHVzaW5nIHt7I2Nyb3NzTGluayBcImNjL0NsYXNzOm1ldGhvZFwifX1jYy5DbGFzcyB7ey9jcm9zc0xpbmt9fSBpbnN0ZWFkLlxuICAgICAqIEBtZXRob2QgZXh0ZW5kXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2xzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYmFzZSAtIHRoZSBiYXNlY2xhc3MgdG8gaW5oZXJpdFxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0aGUgcmVzdWx0IGNsYXNzXG4gICAgICovXG4gICAgZXh0ZW5kOiBmdW5jdGlvbiBleHRlbmQoY2xzLCBiYXNlKSB7XG4gICAgICAgIGlmIChDQ19ERVYpIHtcbiAgICAgICAgICAgIGlmICghYmFzZSkge1xuICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoNTQwNCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjbHMpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDU0MDUpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhjbHMucHJvdG90eXBlKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3JJRCg1NDA2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBwIGluIGJhc2UpIHtcbiAgICAgICAgICAgIGlmIChiYXNlLmhhc093blByb3BlcnR5KHApKSBjbHNbcF0gPSBiYXNlW3BdO1xuICAgICAgICB9Y2xzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoYmFzZS5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGNscyxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbHM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCBzdXBlciBjbGFzc1xuICAgICAqIEBtZXRob2QgZ2V0U3VwZXJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdG9yIC0gdGhlIGNvbnN0cnVjdG9yIG9mIHN1YmNsYXNzXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259XG4gICAgICovXG4gICAgZ2V0U3VwZXI6IGZ1bmN0aW9uIGdldFN1cGVyKGN0b3IpIHtcbiAgICAgICAgdmFyIHByb3RvID0gY3Rvci5wcm90b3R5cGU7IC8vIGJpbmRlZCBmdW5jdGlvbiBkbyBub3QgaGF2ZSBwcm90b3R5cGVcbiAgICAgICAgdmFyIGR1bmRlclByb3RvID0gcHJvdG8gJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgICAgICAgcmV0dXJuIGR1bmRlclByb3RvICYmIGR1bmRlclByb3RvLmNvbnN0cnVjdG9yO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHN1YmNsYXNzIGlzIGNoaWxkIG9mIHN1cGVyY2xhc3Mgb3IgZXF1YWxzIHRvIHN1cGVyY2xhc3NcbiAgICAgKlxuICAgICAqIEBtZXRob2QgaXNDaGlsZENsYXNzT2ZcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdWJjbGFzc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1cGVyY2xhc3NcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzQ2hpbGRDbGFzc09mOiBmdW5jdGlvbiBpc0NoaWxkQ2xhc3NPZihzdWJjbGFzcywgc3VwZXJjbGFzcykge1xuICAgICAgICBpZiAoc3ViY2xhc3MgJiYgc3VwZXJjbGFzcykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdWJjbGFzcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3VwZXJjbGFzcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGlmIChDQ19ERVYpIHtcbiAgICAgICAgICAgICAgICAgICAgY2Mud2FybklEKDM2MjUsIHN1cGVyY2xhc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3ViY2xhc3MgPT09IHN1cGVyY2xhc3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgICBzdWJjbGFzcyA9IGpzLmdldFN1cGVyKHN1YmNsYXNzKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN1YmNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN1YmNsYXNzID09PSBzdXBlcmNsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGZyb20gb2JqZWN0XG4gICAgICogQG1ldGhvZCBjbGVhclxuICAgICAqIEBwYXJhbSB7YW55fSBvYmpcbiAgICAgKi9cbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIob2JqKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkZWxldGUgb2JqW2tleXNbaV1dO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIG9iaiBpcyBhbiBlbXB0eSBvYmplY3RcbiAgICAgKiBAbWV0aG9kIGlzRW1wdHlPYmplY3RcbiAgICAgKiBAcGFyYW0ge2FueX0gb2JqIFxuICAgICAqL1xuICAgIGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uIGlzRW1wdHlPYmplY3Qob2JqKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHByb3BlcnR5IGRlc2NyaXB0b3IgaW4gb2JqZWN0IGFuZCBhbGwgaXRzIGFuY2VzdG9yc1xuICAgICAqIEBtZXRob2QgZ2V0UHJvcGVydHlEZXNjcmlwdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIGdldFByb3BlcnR5RGVzY3JpcHRvcjogX2dldFByb3BlcnR5RGVzY3JpcHRvclxufTtcblxudmFyIHRtcFZhbHVlRGVzYyA9IHtcbiAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbn07XG5cbi8qKlxuICogRGVmaW5lIHZhbHVlLCBqdXN0IGhlbHAgdG8gY2FsbCBPYmplY3QuZGVmaW5lUHJvcGVydHkuPGJyPlxuICogVGhlIGNvbmZpZ3VyYWJsZSB3aWxsIGJlIHRydWUuXG4gKiBAbWV0aG9kIHZhbHVlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcFxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFt3cml0YWJsZT1mYWxzZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2VudW1lcmFibGU9ZmFsc2VdXG4gKi9cbmpzLnZhbHVlID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsdWUsIHdyaXRhYmxlLCBlbnVtZXJhYmxlKSB7XG4gICAgdG1wVmFsdWVEZXNjLnZhbHVlID0gdmFsdWU7XG4gICAgdG1wVmFsdWVEZXNjLndyaXRhYmxlID0gd3JpdGFibGU7XG4gICAgdG1wVmFsdWVEZXNjLmVudW1lcmFibGUgPSBlbnVtZXJhYmxlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHRtcFZhbHVlRGVzYyk7XG4gICAgdG1wVmFsdWVEZXNjLnZhbHVlID0gdW5kZWZpbmVkO1xufTtcblxudmFyIHRtcEdldFNldERlc2MgPSB7XG4gICAgZ2V0OiBudWxsLFxuICAgIHNldDogbnVsbCxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZVxufTtcblxuLyoqXG4gKiBEZWZpbmUgZ2V0IHNldCBhY2Nlc3NvciwganVzdCBoZWxwIHRvIGNhbGwgT2JqZWN0LmRlZmluZVByb3BlcnR5KC4uLilcbiAqIEBtZXRob2QgZ2V0c2V0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZ2V0dGVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbc2V0dGVyPW51bGxdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtlbnVtZXJhYmxlPWZhbHNlXVxuICogQHBhcmFtIHtCb29sZWFufSBbY29uZmlndXJhYmxlPWZhbHNlXVxuICovXG5qcy5nZXRzZXQgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCBnZXR0ZXIsIHNldHRlciwgZW51bWVyYWJsZSwgY29uZmlndXJhYmxlKSB7XG4gICAgaWYgKHR5cGVvZiBzZXR0ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZW51bWVyYWJsZSA9IHNldHRlcjtcbiAgICAgICAgc2V0dGVyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0bXBHZXRTZXREZXNjLmdldCA9IGdldHRlcjtcbiAgICB0bXBHZXRTZXREZXNjLnNldCA9IHNldHRlcjtcbiAgICB0bXBHZXRTZXREZXNjLmVudW1lcmFibGUgPSBlbnVtZXJhYmxlO1xuICAgIHRtcEdldFNldERlc2MuY29uZmlndXJhYmxlID0gY29uZmlndXJhYmxlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHRtcEdldFNldERlc2MpO1xuICAgIHRtcEdldFNldERlc2MuZ2V0ID0gbnVsbDtcbiAgICB0bXBHZXRTZXREZXNjLnNldCA9IG51bGw7XG59O1xuXG52YXIgdG1wR2V0RGVzYyA9IHtcbiAgICBnZXQ6IG51bGwsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZVxufTtcblxuLyoqXG4gKiBEZWZpbmUgZ2V0IGFjY2Vzc29yLCBqdXN0IGhlbHAgdG8gY2FsbCBPYmplY3QuZGVmaW5lUHJvcGVydHkoLi4uKVxuICogQG1ldGhvZCBnZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXR0ZXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2VudW1lcmFibGU9ZmFsc2VdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWd1cmFibGU9ZmFsc2VdXG4gKi9cbmpzLmdldCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIGdldHRlciwgZW51bWVyYWJsZSwgY29uZmlndXJhYmxlKSB7XG4gICAgdG1wR2V0RGVzYy5nZXQgPSBnZXR0ZXI7XG4gICAgdG1wR2V0RGVzYy5lbnVtZXJhYmxlID0gZW51bWVyYWJsZTtcbiAgICB0bXBHZXREZXNjLmNvbmZpZ3VyYWJsZSA9IGNvbmZpZ3VyYWJsZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCB0bXBHZXREZXNjKTtcbiAgICB0bXBHZXREZXNjLmdldCA9IG51bGw7XG59O1xuXG52YXIgdG1wU2V0RGVzYyA9IHtcbiAgICBzZXQ6IG51bGwsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZVxufTtcblxuLyoqXG4gKiBEZWZpbmUgc2V0IGFjY2Vzc29yLCBqdXN0IGhlbHAgdG8gY2FsbCBPYmplY3QuZGVmaW5lUHJvcGVydHkoLi4uKVxuICogQG1ldGhvZCBzZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2VudW1lcmFibGU9ZmFsc2VdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtjb25maWd1cmFibGU9ZmFsc2VdXG4gKi9cbmpzLnNldCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHNldHRlciwgZW51bWVyYWJsZSwgY29uZmlndXJhYmxlKSB7XG4gICAgdG1wU2V0RGVzYy5zZXQgPSBzZXR0ZXI7XG4gICAgdG1wU2V0RGVzYy5lbnVtZXJhYmxlID0gZW51bWVyYWJsZTtcbiAgICB0bXBTZXREZXNjLmNvbmZpZ3VyYWJsZSA9IGNvbmZpZ3VyYWJsZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCB0bXBTZXREZXNjKTtcbiAgICB0bXBTZXREZXNjLnNldCA9IG51bGw7XG59O1xuXG4vKipcbiAqIEdldCBjbGFzcyBuYW1lIG9mIHRoZSBvYmplY3QsIGlmIG9iamVjdCBpcyBqdXN0IGEge30gKGFuZCB3aGljaCBjbGFzcyBuYW1lZCAnT2JqZWN0JyksIGl0IHdpbGwgcmV0dXJuIFwiXCIuXG4gKiAobW9kaWZpZWQgZnJvbSA8YSBocmVmPVwiaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMjQ5NTMxL2hvdy10by1nZXQtYS1qYXZhc2NyaXB0LW9iamVjdHMtY2xhc3NcIj50aGUgY29kZSBmcm9tIHRoaXMgc3RhY2tvdmVyZmxvdyBwb3N0PC9hPilcbiAqIEBtZXRob2QgZ2V0Q2xhc3NOYW1lXG4gKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gb2JqT3JDdG9yIC0gaW5zdGFuY2Ugb3IgY29uc3RydWN0b3JcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuanMuZ2V0Q2xhc3NOYW1lID0gZnVuY3Rpb24gKG9iak9yQ3Rvcikge1xuICAgIGlmICh0eXBlb2Ygb2JqT3JDdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBwcm90b3R5cGUgPSBvYmpPckN0b3IucHJvdG90eXBlO1xuICAgICAgICBpZiAocHJvdG90eXBlICYmIHByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgnX19jbGFzc25hbWVfXycpICYmIHByb3RvdHlwZS5fX2NsYXNzbmFtZV9fKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvdG90eXBlLl9fY2xhc3NuYW1lX187XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJldHZhbCA9ICcnO1xuICAgICAgICAvLyAgZm9yIGJyb3dzZXJzIHdoaWNoIGhhdmUgbmFtZSBwcm9wZXJ0eSBpbiB0aGUgY29uc3RydWN0b3Igb2YgdGhlIG9iamVjdCwgc3VjaCBhcyBjaHJvbWVcbiAgICAgICAgaWYgKG9iak9yQ3Rvci5uYW1lKSB7XG4gICAgICAgICAgICByZXR2YWwgPSBvYmpPckN0b3IubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqT3JDdG9yLnRvU3RyaW5nKSB7XG4gICAgICAgICAgICB2YXIgYXJyLFxuICAgICAgICAgICAgICAgIHN0ciA9IG9iak9yQ3Rvci50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKHN0ci5jaGFyQXQoMCkgPT09ICdbJykge1xuICAgICAgICAgICAgICAgIC8vIHN0ciBpcyBcIltvYmplY3Qgb2JqZWN0Q2xhc3NdXCJcbiAgICAgICAgICAgICAgICBhcnIgPSBzdHIubWF0Y2goL1xcW1xcdytcXHMqKFxcdyspXFxdLyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHN0ciBpcyBmdW5jdGlvbiBvYmplY3RDbGFzcyAoKSB7fSBmb3IgSUUgRmlyZWZveFxuICAgICAgICAgICAgICAgIGFyciA9IHN0ci5tYXRjaCgvZnVuY3Rpb25cXHMqKFxcdyspLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXJyICYmIGFyci5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR2YWwgPSBhcnJbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldHZhbCAhPT0gJ09iamVjdCcgPyByZXR2YWwgOiAnJztcbiAgICB9IGVsc2UgaWYgKG9iak9yQ3RvciAmJiBvYmpPckN0b3IuY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGpzLmdldENsYXNzTmFtZShvYmpPckN0b3IuY29uc3RydWN0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59O1xuXG5mdW5jdGlvbiBpc1RlbXBDbGFzc0lkKGlkKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpZCAhPT0gJ3N0cmluZycgfHwgaWQuc3RhcnRzV2l0aCh0ZW1wQ0lER2VuZXJhdGVyLnByZWZpeCk7XG59XG5cbi8vIGlkIOazqOWGjFxuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2lkVG9DbGFzcyA9IHt9O1xuICAgIHZhciBfbmFtZVRvQ2xhc3MgPSB7fTtcblxuICAgIGZ1bmN0aW9uIHNldHVwKGtleSwgcHVibGljTmFtZSwgdGFibGUpIHtcbiAgICAgICAganMuZ2V0c2V0KGpzLCBwdWJsaWNOYW1lLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGFibGUpO1xuICAgICAgICB9LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGpzLmNsZWFyKHRhYmxlKTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGFibGUsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaWQsIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICAvLyBkZXJlZ2lzdGVyIG9sZFxuICAgICAgICAgICAgaWYgKGNvbnN0cnVjdG9yLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRhYmxlW2NvbnN0cnVjdG9yLnByb3RvdHlwZVtrZXldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGpzLnZhbHVlKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwga2V5LCBpZCk7XG4gICAgICAgICAgICAvLyByZWdpc3RlciBjbGFzc1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZ2lzdGVyZWQgPSB0YWJsZVtpZF07XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2lzdGVyZWQgJiYgcmVnaXN0ZXJlZCAhPT0gY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJ0EgQ2xhc3MgYWxyZWFkeSBleGlzdHMgd2l0aCB0aGUgc2FtZSAnICsga2V5ICsgJyA6IFwiJyArIGlkICsgJ1wiLic7XG4gICAgICAgICAgICAgICAgICAgIGlmIChDQ19URVNUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciArPSAnIChUaGlzIG1heSBiZSBjYXVzZWQgYnkgZXJyb3Igb2YgdW5pdCB0ZXN0LikgXFxcbklmIHlvdSBkb250IG5lZWQgc2VyaWFsaXphdGlvbiwgeW91IGNhbiBzZXQgY2xhc3MgaWQgdG8gXCJcIi4gWW91IGNhbiBhbHNvIGNhbGwgXFxcbmNjLmpzLnVucmVnaXN0ZXJDbGFzcyB0byByZW1vdmUgdGhlIGlkIG9mIHVudXNlZCBjbGFzcyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlW2lkXSA9IGNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL2lmIChpZCA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgIC8vICAgIGNvbnNvbGUudHJhY2UoXCJcIiwgdGFibGUgPT09IF9uYW1lVG9DbGFzcyk7XG4gICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgdGhlIGNsYXNzIGJ5IHNwZWNpZmllZCBpZCwgaWYgaXRzIGNsYXNzbmFtZSBpcyBub3QgZGVmaW5lZCwgdGhlIGNsYXNzIG5hbWUgd2lsbCBhbHNvIGJlIHNldC5cbiAgICAgKiBAbWV0aG9kIF9zZXRDbGFzc0lkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzSWRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgLyoqXG4gICAgICogISNlbiBBbGwgY2xhc3NlcyByZWdpc3RlcmVkIGluIHRoZSBlbmdpbmUsIGluZGV4ZWQgYnkgSUQuXG4gICAgICogISN6aCDlvJXmk47kuK3lt7Lms6jlhoznmoTmiYDmnInnsbvlnovvvIzpgJrov4cgSUQg6L+b6KGM57Si5byV44CCXG4gICAgICogQHByb3BlcnR5IF9yZWdpc3RlcmVkQ2xhc3NJZHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIHNhdmUgYWxsIHJlZ2lzdGVyZWQgY2xhc3NlcyBiZWZvcmUgbG9hZGluZyBzY3JpcHRzXG4gICAgICogbGV0IGJ1aWx0aW5DbGFzc0lkcyA9IGNjLmpzLl9yZWdpc3RlcmVkQ2xhc3NJZHM7XG4gICAgICogbGV0IGJ1aWx0aW5DbGFzc05hbWVzID0gY2MuanMuX3JlZ2lzdGVyZWRDbGFzc05hbWVzO1xuICAgICAqIC8vIGxvYWQgc29tZSBzY3JpcHRzIHRoYXQgY29udGFpbiBDQ0NsYXNzXG4gICAgICogLi4uXG4gICAgICogLy8gY2xlYXIgYWxsIGxvYWRlZCBjbGFzc2VzXG4gICAgICogY2MuanMuX3JlZ2lzdGVyZWRDbGFzc0lkcyA9IGJ1aWx0aW5DbGFzc0lkcztcbiAgICAgKiBjYy5qcy5fcmVnaXN0ZXJlZENsYXNzTmFtZXMgPSBidWlsdGluQ2xhc3NOYW1lcztcbiAgICAgKi9cbiAgICBqcy5fc2V0Q2xhc3NJZCA9IHNldHVwKCdfX2NpZF9fJywgJ19yZWdpc3RlcmVkQ2xhc3NJZHMnLCBfaWRUb0NsYXNzKTtcblxuICAgIC8qKlxuICAgICAqICEjZW4gQWxsIGNsYXNzZXMgcmVnaXN0ZXJlZCBpbiB0aGUgZW5naW5lLCBpbmRleGVkIGJ5IG5hbWUuXG4gICAgICogISN6aCDlvJXmk47kuK3lt7Lms6jlhoznmoTmiYDmnInnsbvlnovvvIzpgJrov4flkI3np7Dov5vooYzntKLlvJXjgIJcbiAgICAgKiBAcHJvcGVydHkgX3JlZ2lzdGVyZWRDbGFzc05hbWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBzYXZlIGFsbCByZWdpc3RlcmVkIGNsYXNzZXMgYmVmb3JlIGxvYWRpbmcgc2NyaXB0c1xuICAgICAqIGxldCBidWlsdGluQ2xhc3NJZHMgPSBjYy5qcy5fcmVnaXN0ZXJlZENsYXNzSWRzO1xuICAgICAqIGxldCBidWlsdGluQ2xhc3NOYW1lcyA9IGNjLmpzLl9yZWdpc3RlcmVkQ2xhc3NOYW1lcztcbiAgICAgKiAvLyBsb2FkIHNvbWUgc2NyaXB0cyB0aGF0IGNvbnRhaW4gQ0NDbGFzc1xuICAgICAqIC4uLlxuICAgICAqIC8vIGNsZWFyIGFsbCBsb2FkZWQgY2xhc3Nlc1xuICAgICAqIGNjLmpzLl9yZWdpc3RlcmVkQ2xhc3NJZHMgPSBidWlsdGluQ2xhc3NJZHM7XG4gICAgICogY2MuanMuX3JlZ2lzdGVyZWRDbGFzc05hbWVzID0gYnVpbHRpbkNsYXNzTmFtZXM7XG4gICAgICovXG4gICAgdmFyIGRvU2V0Q2xhc3NOYW1lID0gc2V0dXAoJ19fY2xhc3NuYW1lX18nLCAnX3JlZ2lzdGVyZWRDbGFzc05hbWVzJywgX25hbWVUb0NsYXNzKTtcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIHRoZSBjbGFzcyBieSBzcGVjaWZpZWQgbmFtZSBtYW51YWxseVxuICAgICAqIEBtZXRob2Qgc2V0Q2xhc3NOYW1lXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAganMuc2V0Q2xhc3NOYW1lID0gZnVuY3Rpb24gKGNsYXNzTmFtZSwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgZG9TZXRDbGFzc05hbWUoY2xhc3NOYW1lLCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgIC8vIGF1dG8gc2V0IGNsYXNzIGlkXG4gICAgICAgIGlmICghY29uc3RydWN0b3IucHJvdG90eXBlLmhhc093blByb3BlcnR5KCdfX2NpZF9fJykpIHtcbiAgICAgICAgICAgIHZhciBpZCA9IGNsYXNzTmFtZSB8fCB0ZW1wQ0lER2VuZXJhdGVyLmdldE5ld0lkKCk7XG4gICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICBqcy5fc2V0Q2xhc3NJZChpZCwgY29uc3RydWN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXIgYSBjbGFzcyBmcm9tIGZpcmViYWxsLlxuICAgICAqXG4gICAgICogSWYgeW91IGRvbnQgbmVlZCBhIHJlZ2lzdGVyZWQgY2xhc3MgYW55bW9yZSwgeW91IHNob3VsZCB1bnJlZ2lzdGVyIHRoZSBjbGFzcyBzbyB0aGF0IEZpcmViYWxsIHdpbGwgbm90IGtlZXAgaXRzIHJlZmVyZW5jZSBhbnltb3JlLlxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgaXRzIHN0aWxsIHlvdXIgcmVzcG9uc2liaWxpdHkgdG8gZnJlZSBvdGhlciByZWZlcmVuY2VzIHRvIHRoZSBjbGFzcy5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgdW5yZWdpc3RlckNsYXNzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gLi4uY29uc3RydWN0b3IgLSB0aGUgY2xhc3MgeW91IHdpbGwgd2FudCB0byB1bnJlZ2lzdGVyLCBhbnkgbnVtYmVyIG9mIGNsYXNzZXMgY2FuIGJlIGFkZGVkXG4gICAgICovXG4gICAganMudW5yZWdpc3RlckNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHAgPSBhcmd1bWVudHNbaV0ucHJvdG90eXBlO1xuICAgICAgICAgICAgdmFyIGNsYXNzSWQgPSBwLl9fY2lkX187XG4gICAgICAgICAgICBpZiAoY2xhc3NJZCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBfaWRUb0NsYXNzW2NsYXNzSWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNsYXNzbmFtZSA9IHAuX19jbGFzc25hbWVfXztcbiAgICAgICAgICAgIGlmIChjbGFzc25hbWUpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgX25hbWVUb0NsYXNzW2NsYXNzbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZWdpc3RlcmVkIGNsYXNzIGJ5IGlkXG4gICAgICogQG1ldGhvZCBfZ2V0Q2xhc3NCeUlkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzSWRcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gY29uc3RydWN0b3JcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGpzLl9nZXRDbGFzc0J5SWQgPSBmdW5jdGlvbiAoY2xhc3NJZCkge1xuICAgICAgICByZXR1cm4gX2lkVG9DbGFzc1tjbGFzc0lkXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZWdpc3RlcmVkIGNsYXNzIGJ5IG5hbWVcbiAgICAgKiBAbWV0aG9kIGdldENsYXNzQnlOYW1lXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzbmFtZVxuICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGpzLmdldENsYXNzQnlOYW1lID0gZnVuY3Rpb24gKGNsYXNzbmFtZSkge1xuICAgICAgICByZXR1cm4gX25hbWVUb0NsYXNzW2NsYXNzbmFtZV07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldCBjbGFzcyBpZCBvZiB0aGUgb2JqZWN0XG4gICAgICogQG1ldGhvZCBfZ2V0Q2xhc3NJZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fEZ1bmN0aW9ufSBvYmogLSBpbnN0YW5jZSBvciBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbG93VGVtcElkPXRydWVdIC0gY2FuIHJldHVybiB0ZW1wIGlkIGluIGVkaXRvclxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGpzLl9nZXRDbGFzc0lkID0gZnVuY3Rpb24gKG9iaiwgYWxsb3dUZW1wSWQpIHtcbiAgICAgICAgYWxsb3dUZW1wSWQgPSB0eXBlb2YgYWxsb3dUZW1wSWQgIT09ICd1bmRlZmluZWQnID8gYWxsb3dUZW1wSWQgOiB0cnVlO1xuXG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nICYmIG9iai5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ19fY2lkX18nKSkge1xuICAgICAgICAgICAgcmVzID0gb2JqLnByb3RvdHlwZS5fX2NpZF9fO1xuICAgICAgICAgICAgaWYgKCFhbGxvd1RlbXBJZCAmJiAoQ0NfREVWIHx8IENDX0VESVRPUikgJiYgaXNUZW1wQ2xhc3NJZChyZXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqICYmIG9iai5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgdmFyIHByb3RvdHlwZSA9IG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICAgICAgICBpZiAocHJvdG90eXBlICYmIHByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgnX19jaWRfXycpKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gb2JqLl9fY2lkX187XG4gICAgICAgICAgICAgICAgaWYgKCFhbGxvd1RlbXBJZCAmJiAoQ0NfREVWIHx8IENDX0VESVRPUikgJiYgaXNUZW1wQ2xhc3NJZChyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfTtcbn0pKCk7XG5cbi8qKlxuICogRGVmaW5lcyBhIHBvbHlmaWxsIGZpZWxkIGZvciBvYnNvbGV0ZWQgY29kZXMuXG4gKiBAbWV0aG9kIG9ic29sZXRlXG4gKiBAcGFyYW0ge2FueX0gb2JqIC0gWW91ck9iamVjdCBvciBZb3VyQ2xhc3MucHJvdG90eXBlXG4gKiBAcGFyYW0ge1N0cmluZ30gb2Jzb2xldGVkIC0gXCJPbGRQYXJhbVwiIG9yIFwiWW91ckNsYXNzLk9sZFBhcmFtXCJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuZXdFeHByIC0gXCJOZXdQYXJhbVwiIG9yIFwiWW91ckNsYXNzLk5ld1BhcmFtXCJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3dyaXRhYmxlPWZhbHNlXVxuICovXG5qcy5vYnNvbGV0ZSA9IGZ1bmN0aW9uIChvYmosIG9ic29sZXRlZCwgbmV3RXhwciwgd3JpdGFibGUpIHtcbiAgICB2YXIgZXh0cmFjdFByb3BOYW1lID0gLyhbXi5dKykkLztcbiAgICB2YXIgb2xkUHJvcCA9IGV4dHJhY3RQcm9wTmFtZS5leGVjKG9ic29sZXRlZClbMF07XG4gICAgdmFyIG5ld1Byb3AgPSBleHRyYWN0UHJvcE5hbWUuZXhlYyhuZXdFeHByKVswXTtcbiAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmIChDQ19ERVYpIHtcbiAgICAgICAgICAgIGNjLndhcm5JRCg1NDAwLCBvYnNvbGV0ZWQsIG5ld0V4cHIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW25ld1Byb3BdO1xuICAgIH1cbiAgICBpZiAod3JpdGFibGUpIHtcbiAgICAgICAganMuZ2V0c2V0KG9iaiwgb2xkUHJvcCwgZ2V0LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChDQ19ERVYpIHtcbiAgICAgICAgICAgICAgICBjYy53YXJuSUQoNTQwMSwgb2Jzb2xldGVkLCBuZXdFeHByKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXNbbmV3UHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAganMuZ2V0KG9iaiwgb2xkUHJvcCwgZ2V0KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIERlZmluZXMgYWxsIHBvbHlmaWxsIGZpZWxkcyBmb3Igb2Jzb2xldGVkIGNvZGVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBwcm9wcy5cbiAqIEBtZXRob2Qgb2Jzb2xldGVzXG4gKiBAcGFyYW0ge2FueX0gb2JqIC0gWW91ck9iamVjdCBvciBZb3VyQ2xhc3MucHJvdG90eXBlXG4gKiBAcGFyYW0ge2FueX0gb2JqTmFtZSAtIFwiWW91ck9iamVjdFwiIG9yIFwiWW91ckNsYXNzXCJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICogQHBhcmFtIHtCb29sZWFufSBbd3JpdGFibGU9ZmFsc2VdXG4gKi9cbmpzLm9ic29sZXRlcyA9IGZ1bmN0aW9uIChvYmosIG9iak5hbWUsIHByb3BzLCB3cml0YWJsZSkge1xuICAgIGZvciAodmFyIG9ic29sZXRlZCBpbiBwcm9wcykge1xuICAgICAgICB2YXIgbmV3TmFtZSA9IHByb3BzW29ic29sZXRlZF07XG4gICAgICAgIGpzLm9ic29sZXRlKG9iaiwgb2JqTmFtZSArICcuJyArIG9ic29sZXRlZCwgbmV3TmFtZSwgd3JpdGFibGUpO1xuICAgIH1cbn07XG5cbnZhciBSRUdFWFBfTlVNX09SX1NUUiA9IC8oJWQpfCglcykvO1xudmFyIFJFR0VYUF9TVFIgPSAvJXMvO1xuXG4vKipcbiAqIEEgc3RyaW5nIHRvb2wgdG8gY29uc3RydWN0IGEgc3RyaW5nIHdpdGggZm9ybWF0IHN0cmluZy5cbiAqIEBtZXRob2QgZm9ybWF0U3RyXG4gKiBAcGFyYW0ge1N0cmluZ3xhbnl9IG1zZyAtIEEgSmF2YVNjcmlwdCBzdHJpbmcgY29udGFpbmluZyB6ZXJvIG9yIG1vcmUgc3Vic3RpdHV0aW9uIHN0cmluZ3MgKCVzKS5cbiAqIEBwYXJhbSB7YW55fSAuLi5zdWJzdCAtIEphdmFTY3JpcHQgb2JqZWN0cyB3aXRoIHdoaWNoIHRvIHJlcGxhY2Ugc3Vic3RpdHV0aW9uIHN0cmluZ3Mgd2l0aGluIG1zZy4gVGhpcyBnaXZlcyB5b3UgYWRkaXRpb25hbCBjb250cm9sIG92ZXIgdGhlIGZvcm1hdCBvZiB0aGUgb3V0cHV0LlxuICogQHJldHVybnMge1N0cmluZ31cbiAqIEBleGFtcGxlXG4gKiBjYy5qcy5mb3JtYXRTdHIoXCJhOiAlcywgYjogJXNcIiwgYSwgYik7XG4gKiBjYy5qcy5mb3JtYXRTdHIoYSwgYiwgYyk7XG4gKi9cbmpzLmZvcm1hdFN0ciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJnTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAoYXJnTGVuID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIG1zZyA9IGFyZ3VtZW50c1swXTtcbiAgICBpZiAoYXJnTGVuID09PSAxKSB7XG4gICAgICAgIHJldHVybiAnJyArIG1zZztcbiAgICB9XG5cbiAgICB2YXIgaGFzU3Vic3RpdHV0aW9uID0gdHlwZW9mIG1zZyA9PT0gJ3N0cmluZycgJiYgUkVHRVhQX05VTV9PUl9TVFIudGVzdChtc2cpO1xuICAgIGlmIChoYXNTdWJzdGl0dXRpb24pIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdMZW47ICsraSkge1xuICAgICAgICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIHZhciByZWdFeHBUb1Rlc3QgPSB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyA/IFJFR0VYUF9OVU1fT1JfU1RSIDogUkVHRVhQX1NUUjtcbiAgICAgICAgICAgIGlmIChyZWdFeHBUb1Rlc3QudGVzdChtc2cpKSBtc2cgPSBtc2cucmVwbGFjZShyZWdFeHBUb1Rlc3QsIGFyZyk7ZWxzZSBtc2cgKz0gJyAnICsgYXJnO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ0xlbjsgKytfaSkge1xuICAgICAgICAgICAgbXNnICs9ICcgJyArIGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1zZztcbn07XG5cbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGV0a2FhbnRvbm92L2JsdWViaXJkL2lzc3Vlcy8xMzg5XG5qcy5zaGlmdEFyZ3VtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkobGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgIH1cbiAgICByZXR1cm4gYXJncztcbn07XG5cbi8qKlxuICogISNlblxuICogQSBzaW1wbGUgd3JhcHBlciBvZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgd2hpY2ggZW5zdXJlcyB0aGUgcmV0dXJuIG9iamVjdCBoYXZlIG5vIHByb3RvdHlwZSAoYW5kIHRodXMgbm8gaW5oZXJpdGVkIG1lbWJlcnMpLiBTbyB3ZSBjYW4gc2tpcCBgaGFzT3duUHJvcGVydHlgIGNhbGxzIG9uIHByb3BlcnR5IGxvb2t1cHMuIEl0IGlzIGEgd29ydGh3aGlsZSBvcHRpbWl6YXRpb24gdGhhbiB0aGUgYHt9YCBsaXRlcmFsIHdoZW4gYGhhc093blByb3BlcnR5YCBjYWxscyBhcmUgbmVjZXNzYXJ5LlxuICogISN6aFxuICog6K+l5pa55rOV5piv5a+5IGBPYmplY3QuY3JlYXRlKG51bGwpYCDnmoTnroDljZXlsIHoo4XjgIJgT2JqZWN0LmNyZWF0ZShudWxsKWAg55So5LqO5Yib5bu65pegIHByb3RvdHlwZSDvvIjkuZ/lsLHml6Dnu6fmib/vvInnmoTnqbrlr7nosaHjgILov5nmoLfmiJHku6zlnKjor6Xlr7nosaHkuIrmn6Xmib7lsZ7mgKfml7bvvIzlsLHkuI3nlKjov5vooYwgYGhhc093blByb3BlcnR5YCDliKTmlq3jgILlnKjpnIDopoHpopHnuYHliKTmlq0gYGhhc093blByb3BlcnR5YCDml7bvvIzkvb/nlKjov5nkuKrmlrnms5XmgKfog73kvJrmr5QgYHt9YCDmm7Tpq5jjgIJcbiAqXG4gKiBAbWV0aG9kIGNyZWF0ZU1hcFxuICogQHBhcmFtIHtCb29sZWFufSBbZm9yY2VEaWN0TW9kZT1mYWxzZV0gLSBBcHBseSB0aGUgZGVsZXRlIG9wZXJhdG9yIHRvIG5ld2x5IGNyZWF0ZWQgbWFwIG9iamVjdC4gVGhpcyBjYXVzZXMgVjggdG8gcHV0IHRoZSBvYmplY3QgaW4gXCJkaWN0aW9uYXJ5IG1vZGVcIiBhbmQgZGlzYWJsZXMgY3JlYXRpb24gb2YgaGlkZGVuIGNsYXNzZXMgd2hpY2ggYXJlIHZlcnkgZXhwZW5zaXZlIGZvciBvYmplY3RzIHRoYXQgYXJlIGNvbnN0YW50bHkgY2hhbmdpbmcgc2hhcGUuXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmpzLmNyZWF0ZU1hcCA9IGZ1bmN0aW9uIChmb3JjZURpY3RNb2RlKSB7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgaWYgKGZvcmNlRGljdE1vZGUpIHtcbiAgICAgICAgdmFyIElOVkFMSURfSURFTlRJRklFUl8xID0gJy4nO1xuICAgICAgICB2YXIgSU5WQUxJRF9JREVOVElGSUVSXzIgPSAnLyc7XG4gICAgICAgIG1hcFtJTlZBTElEX0lERU5USUZJRVJfMV0gPSB0cnVlO1xuICAgICAgICBtYXBbSU5WQUxJRF9JREVOVElGSUVSXzJdID0gdHJ1ZTtcbiAgICAgICAgZGVsZXRlIG1hcFtJTlZBTElEX0lERU5USUZJRVJfMV07XG4gICAgICAgIGRlbGV0ZSBtYXBbSU5WQUxJRF9JREVOVElGSUVSXzJdO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xufTtcblxuLyoqXG4gKiBAY2xhc3MgYXJyYXlcbiAqIEBzdGF0aWNcbiAqL1xuXG4vKipcbiAqIFJlbW92ZXMgdGhlIGFycmF5IGl0ZW0gYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAqIEBtZXRob2QgcmVtb3ZlQXRcbiAqIEBwYXJhbSB7YW55W119IGFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gaW5kZXhcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQXQoYXJyYXksIGluZGV4KSB7XG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBhcnJheSBpdGVtIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gKiBJdCdzIGZhc3RlciBidXQgdGhlIG9yZGVyIG9mIHRoZSBhcnJheSB3aWxsIGJlIGNoYW5nZWQuXG4gKiBAbWV0aG9kIGZhc3RSZW1vdmVBdFxuICogQHBhcmFtIHthbnlbXX0gYXJyYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleFxuICovXG5mdW5jdGlvbiBmYXN0UmVtb3ZlQXQoYXJyYXksIGluZGV4KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFycmF5W2luZGV4XSA9IGFycmF5W2xlbmd0aCAtIDFdO1xuICAgIGFycmF5Lmxlbmd0aCA9IGxlbmd0aCAtIDE7XG59XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhIHNwZWNpZmljIG9iamVjdCBmcm9tIHRoZSBhcnJheS5cbiAqIEBtZXRob2QgcmVtb3ZlXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJheVxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiByZW1vdmUoYXJyYXksIHZhbHVlKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZih2YWx1ZSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgcmVtb3ZlQXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGEgc3BlY2lmaWMgb2JqZWN0IGZyb20gdGhlIGFycmF5LlxuICogSXQncyBmYXN0ZXIgYnV0IHRoZSBvcmRlciBvZiB0aGUgYXJyYXkgd2lsbCBiZSBjaGFuZ2VkLlxuICogQG1ldGhvZCBmYXN0UmVtb3ZlXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGZhc3RSZW1vdmUoYXJyYXksIHZhbHVlKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZih2YWx1ZSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgICAgIC0tYXJyYXkubGVuZ3RoO1xuICAgIH1cbn1cblxuLyoqXG4gKiBWZXJpZnkgYXJyYXkncyBUeXBlXG4gKiBAbWV0aG9kIHZlcmlmeVR5cGVcbiAqIEBwYXJhbSB7YXJyYXl9IGFycmF5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0eXBlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiB2ZXJpZnlUeXBlKGFycmF5LCB0eXBlKSB7XG4gICAgaWYgKGFycmF5ICYmIGFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCEoYXJyYXlbaV0gaW5zdGFuY2VvZiB0eXBlKSkge1xuICAgICAgICAgICAgICAgIGNjLmxvZ0lEKDEzMDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGZyb20gYXJyYXkgYWxsIHZhbHVlcyBpbiBtaW51c0Fyci4gRm9yIGVhY2ggVmFsdWUgaW4gbWludXNBcnIsIHRoZSBmaXJzdCBtYXRjaGluZyBpbnN0YW5jZSBpbiBhcnJheSB3aWxsIGJlIHJlbW92ZWQuXG4gKiBAbWV0aG9kIHJlbW92ZUFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBTb3VyY2UgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IG1pbnVzQXJyIG1pbnVzIEFycmF5XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUFycmF5KGFycmF5LCBtaW51c0Fycikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbWludXNBcnIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHJlbW92ZShhcnJheSwgbWludXNBcnJbaV0pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBJbnNlcnRzIHNvbWUgb2JqZWN0cyBhdCBpbmRleFxuICogQG1ldGhvZCBhcHBlbmRPYmplY3RzQXRcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhZGRPYmpzXG4gKiBAcGFyYW0ge051bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5mdW5jdGlvbiBhcHBlbmRPYmplY3RzQXQoYXJyYXksIGFkZE9ianMsIGluZGV4KSB7XG4gICAgYXJyYXkuc3BsaWNlLmFwcGx5KGFycmF5LCBbaW5kZXgsIDBdLmNvbmNhdChhZGRPYmpzKSk7XG4gICAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIEV4YWN0IHNhbWUgZnVuY3Rpb24gYXMgQXJyYXkucHJvdG90eXBlLmluZGV4T2YuPGJyPlxuICogSEFDSzogdWdsaXkgaGFjayBmb3IgQmFpZHUgbW9iaWxlIGJyb3dzZXIgY29tcGF0aWJpbGl0eSwgc3R1cGlkIEJhaWR1IGd1eXMgbW9kaWZ5IEFycmF5LnByb3RvdHlwZS5pbmRleE9mIGZvciBhbGwgcGFnZXMgbG9hZGVkLCB0aGVpciB2ZXJzaW9uIGNoYW5nZXMgc3RyaWN0IGNvbXBhcmlzb24gdG8gbm9uLXN0cmljdCBjb21wYXJpc29uLCBpdCBhbHNvIGlnbm9yZXMgdGhlIHNlY29uZCBwYXJhbWV0ZXIgb2YgdGhlIG9yaWdpbmFsIEFQSSwgYW5kIHRoaXMgd2lsbCBjYXVzZSBldmVudCBoYW5kbGVyIGVudGVyIGluZmluaXRlIGxvb3AuPGJyPlxuICogQmFpZHUgZGV2ZWxvcGVycywgaWYgeW91IGV2ZXIgc2VlIHRoaXMgZG9jdW1lbnRhdGlvbiwgaGVyZSBpcyB0aGUgc3RhbmRhcmQ6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2YsIFNlcmlvdXNseSFcbiAqXG4gKiBAbWV0aG9kIGluZGV4T2ZcbiAqIEBwYXJhbSB7YW55fSBzZWFyY2hFbGVtZW50IC0gRWxlbWVudCB0byBsb2NhdGUgaW4gdGhlIGFycmF5LlxuICogQHBhcmFtIHtOdW1iZXJ9IFtmcm9tSW5kZXg9MF0gLSBUaGUgaW5kZXggdG8gc3RhcnQgdGhlIHNlYXJjaCBhdFxuICogQHJldHVybiB7TnVtYmVyfSAtIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGdpdmVuIGVsZW1lbnQgY2FuIGJlIGZvdW5kIGluIHRoZSBhcnJheSwgb3IgLTEgaWYgaXQgaXMgbm90IHByZXNlbnQuXG4gKi9cbnZhciBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBhcnJheSBjb250YWlucyBhIHNwZWNpZmljIHZhbHVlLlxuICogQG1ldGhvZCBjb250YWluc1xuICogQHBhcmFtIHthbnlbXX0gYXJyYXlcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY29udGFpbnMoYXJyYXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIGFycmF5LmluZGV4T2YodmFsdWUpID49IDA7XG59XG5cbi8qKlxuICogQ29weSBhbiBhcnJheSdzIGl0ZW0gdG8gYSBuZXcgYXJyYXkgKGl0cyBwZXJmb3JtYW5jZSBpcyBiZXR0ZXIgdGhhbiBBcnJheS5zbGljZSlcbiAqIEBtZXRob2QgY29weVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXlcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5mdW5jdGlvbiBjb3B5KGFycmF5KSB7XG4gICAgdmFyIGksXG4gICAgICAgIGxlbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgYXJyX2Nsb25lID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGFycl9jbG9uZVtpXSA9IGFycmF5W2ldO1xuICAgIH1yZXR1cm4gYXJyX2Nsb25lO1xufVxuXG5qcy5hcnJheSA9IHtcbiAgICByZW1vdmU6IHJlbW92ZSxcbiAgICBmYXN0UmVtb3ZlOiBmYXN0UmVtb3ZlLFxuICAgIHJlbW92ZUF0OiByZW1vdmVBdCxcbiAgICBmYXN0UmVtb3ZlQXQ6IGZhc3RSZW1vdmVBdCxcbiAgICBjb250YWluczogY29udGFpbnMsXG4gICAgdmVyaWZ5VHlwZTogdmVyaWZ5VHlwZSxcbiAgICByZW1vdmVBcnJheTogcmVtb3ZlQXJyYXksXG4gICAgYXBwZW5kT2JqZWN0c0F0OiBhcHBlbmRPYmplY3RzQXQsXG4gICAgY29weTogY29weSxcbiAgICBpbmRleE9mOiBpbmRleE9mLFxuICAgIE11dGFibGVGb3J3YXJkSXRlcmF0b3I6IHJlcXVpcmUoJy4uL3V0aWxzL211dGFibGUtZm9yd2FyZC1pdGVyYXRvcicpXG59O1xuXG4vLyBPQkpFQ1QgUE9PTFxuXG4vKipcbiAqICEjZW5cbiAqIEEgZml4ZWQtbGVuZ3RoIG9iamVjdCBwb29sIGRlc2lnbmVkIGZvciBnZW5lcmFsIHR5cGUuPGJyPlxuICogVGhlIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgb2JqZWN0IHBvb2wgaXMgdmVyeSBzaW1wbGUsXG4gKiBpdCBjYW4gaGVscHMgeW91IHRvIGltcHJvdmUgeW91ciBnYW1lIHBlcmZvcm1hbmNlIGZvciBvYmplY3RzIHdoaWNoIG5lZWQgZnJlcXVlbnQgcmVsZWFzZSBhbmQgcmVjcmVhdGUgb3BlcmF0aW9uczxici8+XG4gKiAhI3poXG4gKiDplb/luqblm7rlrprnmoTlr7nosaHnvJPlrZjmsaDvvIzlj6/ku6XnlKjmnaXnvJPlrZjlkITnp43lr7nosaHnsbvlnovjgII8YnIvPlxuICog6L+Z5Liq5a+56LGh5rGg55qE5a6e546w6Z2e5bi457K+566A77yM5a6D5Y+v5Lul5biu5Yqp5oKo5o+Q6auY5ri45oiP5oCn6IO977yM6YCC55So5LqO5LyY5YyW5a+56LGh55qE5Y+N5aSN5Yib5bu65ZKM6ZSA5q+B44CCXG4gKiBAY2xhc3MgUG9vbFxuICogQGV4YW1wbGVcbiAqXG4gKkV4YW1wbGUgMTpcbiAqXG4gKmZ1bmN0aW9uIERldGFpbHMgKCkge1xuICogICAgdGhpcy51dWlkTGlzdCA9IFtdO1xuICp9O1xuICpEZXRhaWxzLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAqICAgIHRoaXMudXVpZExpc3QubGVuZ3RoID0gMDtcbiAqfTtcbiAqRGV0YWlscy5wb29sID0gbmV3IGpzLlBvb2woZnVuY3Rpb24gKG9iaikge1xuICogICAgb2JqLnJlc2V0KCk7XG4gKn0sIDUpO1xuICpEZXRhaWxzLnBvb2wuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICogICAgcmV0dXJuIHRoaXMuX2dldCgpIHx8IG5ldyBEZXRhaWxzKCk7XG4gKn07XG4gKlxuICp2YXIgZGV0YWlsID0gRGV0YWlscy5wb29sLmdldCgpO1xuICouLi5cbiAqRGV0YWlscy5wb29sLnB1dChkZXRhaWwpO1xuICpcbiAqRXhhbXBsZSAyOlxuICpcbiAqZnVuY3Rpb24gRGV0YWlscyAoYnVmZmVyKSB7XG4gKiAgICB0aGlzLnV1aWRMaXN0ID0gYnVmZmVyO1xuICp9O1xuICouLi5cbiAqRGV0YWlscy5wb29sLmdldCA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAqICAgIHZhciBjYWNoZWQgPSB0aGlzLl9nZXQoKTtcbiAqICAgIGlmIChjYWNoZWQpIHtcbiAqICAgICAgICBjYWNoZWQudXVpZExpc3QgPSBidWZmZXI7XG4gKiAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAqICAgIH1cbiAqICAgIGVsc2Uge1xuICogICAgICAgIHJldHVybiBuZXcgRGV0YWlscyhidWZmZXIpO1xuICogICAgfVxuICp9O1xuICpcbiAqdmFyIGRldGFpbCA9IERldGFpbHMucG9vbC5nZXQoIFtdICk7XG4gKi4uLlxuICovXG4vKipcbiAqICEjZW5cbiAqIENvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBhbiBvYmplY3QgcG9vbCBmb3IgdGhlIHNwZWNpZmljIG9iamVjdCB0eXBlLlxuICogWW91IGNhbiBwYXNzIGEgY2FsbGJhY2sgYXJndW1lbnQgZm9yIHByb2Nlc3MgdGhlIGNsZWFudXAgbG9naWMgd2hlbiB0aGUgb2JqZWN0IGlzIHJlY3ljbGVkLlxuICogISN6aFxuICog5L2/55So5p6E6YCg5Ye95pWw5p2l5Yib5bu65LiA5Liq5oyH5a6a5a+56LGh57G75Z6L55qE5a+56LGh5rGg77yM5oKo5Y+v5Lul5Lyg6YCS5LiA5Liq5Zue6LCD5Ye95pWw77yM55So5LqO5aSE55CG5a+56LGh5Zue5pS25pe255qE5riF55CG6YC76L6R44CCXG4gKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2xlYW51cEZ1bmNdIC0gdGhlIGNhbGxiYWNrIG1ldGhvZCB1c2VkIHRvIHByb2Nlc3MgdGhlIGNsZWFudXAgbG9naWMgd2hlbiB0aGUgb2JqZWN0IGlzIHJlY3ljbGVkLlxuICogQHBhcmFtIHtPYmplY3R9IGNsZWFudXBGdW5jLm9ialxuICogQHBhcmFtIHtOdW1iZXJ9IHNpemUgLSBpbml0aWFsaXplcyB0aGUgbGVuZ3RoIG9mIHRoZSBhcnJheVxuICogQHR5cGVzY3JpcHRcbiAqIGNvbnN0cnVjdG9yKGNsZWFudXBGdW5jOiAob2JqOiBhbnkpID0+IHZvaWQsIHNpemU6IG51bWJlcilcbiAqIGNvbnN0cnVjdG9yKHNpemU6IG51bWJlcilcbiAqL1xuZnVuY3Rpb24gUG9vbChjbGVhbnVwRnVuYywgc2l6ZSkge1xuICAgIGlmIChzaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2l6ZSA9IGNsZWFudXBGdW5jO1xuICAgICAgICBjbGVhbnVwRnVuYyA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuZ2V0ID0gbnVsbDtcbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB0aGlzLl9wb29sID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHRoaXMuX2NsZWFudXAgPSBjbGVhbnVwRnVuYztcbn1cblxuLyoqXG4gKiAhI2VuXG4gKiBHZXQgYW5kIGluaXRpYWxpemUgYW4gb2JqZWN0IGZyb20gcG9vbC4gVGhpcyBtZXRob2QgZGVmYXVsdHMgdG8gbnVsbCBhbmQgcmVxdWlyZXMgdGhlIHVzZXIgdG8gaW1wbGVtZW50IGl0LlxuICogISN6aFxuICog6I635Y+W5bm25Yid5aeL5YyW5a+56LGh5rGg5Lit55qE5a+56LGh44CC6L+Z5Liq5pa55rOV6buY6K6k5Li656m677yM6ZyA6KaB55So5oi36Ieq5bex5a6e546w44CCXG4gKiBAbWV0aG9kIGdldFxuICogQHBhcmFtIHthbnl9IC4uLnBhcmFtcyAtIHBhcmFtZXRlcnMgdG8gdXNlZCB0byBpbml0aWFsaXplIHRoZSBvYmplY3RcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cblxuLyoqXG4gKiAhI2VuXG4gKiBUaGUgY3VycmVudCBudW1iZXIgb2YgYXZhaWxhYmxlIG9iamVjdHMsIHRoZSBkZWZhdWx0IGlzIDAsIGl0IHdpbGwgZ3JhZHVhbGx5IGluY3JlYXNlIHdpdGggdGhlIHJlY3ljbGUgb2YgdGhlIG9iamVjdCxcbiAqIHRoZSBtYXhpbXVtIHdpbGwgbm90IGV4Y2VlZCB0aGUgc2l6ZSBzcGVjaWZpZWQgd2hlbiB0aGUgY29uc3RydWN0b3IgaXMgY2FsbGVkLlxuICogISN6aFxuICog5b2T5YmN5Y+v55So5a+56LGh5pWw6YeP77yM5LiA5byA5aeL6buY6K6k5pivIDDvvIzpmo/nnYDlr7nosaHnmoTlm57mlLbkvJrpgJDmuJDlop7lpKfvvIzmnIDlpKfkuI3kvJrotoXov4fosIPnlKjmnoTpgKDlh73mlbDml7bmjIflrprnmoQgc2l6ZeOAglxuICogQHByb3BlcnR5IHtOdW1iZXJ9IGNvdW50XG4gKiBAZGVmYXVsdCAwXG4gKi9cblxuLyoqXG4gKiAhI2VuXG4gKiBHZXQgYW4gb2JqZWN0IGZyb20gcG9vbCwgaWYgbm8gYXZhaWxhYmxlIG9iamVjdCBpbiB0aGUgcG9vbCwgbnVsbCB3aWxsIGJlIHJldHVybmVkLlxuICogISN6aFxuICog6I635Y+W5a+56LGh5rGg5Lit55qE5a+56LGh77yM5aaC5p6c5a+56LGh5rGg5rKh5pyJ5Y+v55So5a+56LGh77yM5YiZ6L+U5Zue56m644CCXG4gKiBAbWV0aG9kIF9nZXRcbiAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH1cbiAqL1xuUG9vbC5wcm90b3R5cGUuX2dldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5jb3VudCA+IDApIHtcbiAgICAgICAgLS10aGlzLmNvdW50O1xuICAgICAgICB2YXIgY2FjaGUgPSB0aGlzLl9wb29sW3RoaXMuY291bnRdO1xuICAgICAgICB0aGlzLl9wb29sW3RoaXMuY291bnRdID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGNhY2hlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogISNlbiBQdXQgYW4gb2JqZWN0IGludG8gdGhlIHBvb2wuXG4gKiAhI3poIOWQkeWvueixoeaxoOi/lOi/mOS4gOS4quS4jeWGjemcgOimgeeahOWvueixoeOAglxuICogQG1ldGhvZCBwdXRcbiAqL1xuUG9vbC5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBwb29sID0gdGhpcy5fcG9vbDtcbiAgICBpZiAodGhpcy5jb3VudCA8IHBvb2wubGVuZ3RoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jbGVhbnVwICYmIHRoaXMuX2NsZWFudXAob2JqKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwb29sW3RoaXMuY291bnRdID0gb2JqO1xuICAgICAgICArK3RoaXMuY291bnQ7XG4gICAgfVxufTtcblxuLyoqXG4gKiAhI2VuIFJlc2l6ZSB0aGUgcG9vbC5cbiAqICEjemgg6K6+572u5a+56LGh5rGg5a656YeP44CCXG4gKiBAbWV0aG9kIHJlc2l6ZVxuICovXG5Qb29sLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgaWYgKGxlbmd0aCA+PSAwKSB7XG4gICAgICAgIHRoaXMuX3Bvb2wubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICBpZiAodGhpcy5jb3VudCA+IGxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5jb3VudCA9IGxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmpzLlBvb2wgPSBQb29sO1xuXG4vL1xuXG5jYy5qcyA9IGpzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpzO1xuXG4vLyBmaXggc3VibW9kdWxlIHBvbGx1dGUgLi4uXG4vKipcbiAqIEBzdWJtb2R1bGUgY2NcbiAqL1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1wekxtcHpJbDBzSW01aGJXVnpJanBiSW5SbGJYQkRTVVJIWlc1bGNtRjBaWElpTENKeVpYRjFhWEpsSWl3aVgyZGxkRkJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaUlzSW05aWFpSXNJbTVoYldVaUxDSndaQ0lzSWs5aWFtVmpkQ0lzSW1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaUlzSW1kbGRGQnliM1J2ZEhsd1pVOW1JaXdpWDJOdmNIbHdjbTl3SWl3aWMyOTFjbU5sSWl3aWRHRnlaMlYwSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKcWN5SXNJbWx6VG5WdFltVnlJaXdpVG5WdFltVnlJaXdpYVhOVGRISnBibWNpTENKVGRISnBibWNpTENKaFpHUnZiaUlzSW1raUxDSnNaVzVuZEdnaUxDSmhjbWQxYldWdWRITWlMQ0pqWXlJc0ltVnljbTl5U1VRaUxDSnRhWGhwYmlJc0ltVjRkR1Z1WkNJc0ltTnNjeUlzSW1KaGMyVWlMQ0pEUTE5RVJWWWlMQ0pyWlhseklpd2ljSEp2ZEc5MGVYQmxJaXdpY0NJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aVkzSmxZWFJsSWl3aVkyOXVjM1J5ZFdOMGIzSWlMQ0oyWVd4MVpTSXNJbmR5YVhSaFlteGxJaXdpWTI5dVptbG5kWEpoWW14bElpd2laMlYwVTNWd1pYSWlMQ0pqZEc5eUlpd2ljSEp2ZEc4aUxDSmtkVzVrWlhKUWNtOTBieUlzSW1selEyaHBiR1JEYkdGemMwOW1JaXdpYzNWaVkyeGhjM01pTENKemRYQmxjbU5zWVhOeklpd2lkMkZ5YmtsRUlpd2lZMnhsWVhJaUxDSnBjMFZ0Y0hSNVQySnFaV04wSWl3aWEyVjVJaXdpWjJWMFVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlpd2lkRzF3Vm1Gc2RXVkVaWE5qSWl3aWRXNWtaV1pwYm1Wa0lpd2laVzUxYldWeVlXSnNaU0lzSW5CeWIzQWlMQ0owYlhCSFpYUlRaWFJFWlhOaklpd2laMlYwSWl3aWMyVjBJaXdpWjJWMGMyVjBJaXdpWjJWMGRHVnlJaXdpYzJWMGRHVnlJaXdpZEcxd1IyVjBSR1Z6WXlJc0luUnRjRk5sZEVSbGMyTWlMQ0puWlhSRGJHRnpjMDVoYldVaUxDSnZZbXBQY2tOMGIzSWlMQ0pmWDJOc1lYTnpibUZ0WlY5Zklpd2ljbVYwZG1Gc0lpd2lkRzlUZEhKcGJtY2lMQ0poY25JaUxDSnpkSElpTENKamFHRnlRWFFpTENKdFlYUmphQ0lzSW1selZHVnRjRU5zWVhOelNXUWlMQ0pwWkNJc0luTjBZWEowYzFkcGRHZ2lMQ0p3Y21WbWFYZ2lMQ0pmYVdSVWIwTnNZWE56SWl3aVgyNWhiV1ZVYjBOc1lYTnpJaXdpYzJWMGRYQWlMQ0p3ZFdKc2FXTk9ZVzFsSWl3aWRHRmliR1VpTENKaGMzTnBaMjRpTENKeVpXZHBjM1JsY21Wa0lpd2laWEp5YjNJaUxDSkRRMTlVUlZOVUlpd2lYM05sZEVOc1lYTnpTV1FpTENKa2IxTmxkRU5zWVhOelRtRnRaU0lzSW5ObGRFTnNZWE56VG1GdFpTSXNJbU5zWVhOelRtRnRaU0lzSW1kbGRFNWxkMGxrSWl3aWRXNXlaV2RwYzNSbGNrTnNZWE56SWl3aVkyeGhjM05KWkNJc0lsOWZZMmxrWDE4aUxDSmpiR0Z6YzI1aGJXVWlMQ0pmWjJWMFEyeGhjM05DZVVsa0lpd2laMlYwUTJ4aGMzTkNlVTVoYldVaUxDSmZaMlYwUTJ4aGMzTkpaQ0lzSW1Gc2JHOTNWR1Z0Y0Vsa0lpd2ljbVZ6SWl3aVEwTmZSVVJKVkU5U0lpd2liMkp6YjJ4bGRHVWlMQ0p2WW5OdmJHVjBaV1FpTENKdVpYZEZlSEJ5SWl3aVpYaDBjbUZqZEZCeWIzQk9ZVzFsSWl3aWIyeGtVSEp2Y0NJc0ltVjRaV01pTENKdVpYZFFjbTl3SWl3aWIySnpiMnhsZEdWeklpd2liMkpxVG1GdFpTSXNJbkJ5YjNCeklpd2libVYzVG1GdFpTSXNJbEpGUjBWWVVGOU9WVTFmVDFKZlUxUlNJaXdpVWtWSFJWaFFYMU5VVWlJc0ltWnZjbTFoZEZOMGNpSXNJbUZ5WjB4bGJpSXNJbTF6WnlJc0ltaGhjMU4xWW5OMGFYUjFkR2x2YmlJc0luUmxjM1FpTENKaGNtY2lMQ0p5WldkRmVIQlViMVJsYzNRaUxDSnlaWEJzWVdObElpd2ljMmhwWm5SQmNtZDFiV1Z1ZEhNaUxDSnNaVzRpTENKaGNtZHpJaXdpUVhKeVlYa2lMQ0pqY21WaGRHVk5ZWEFpTENKbWIzSmpaVVJwWTNSTmIyUmxJaXdpYldGd0lpd2lTVTVXUVV4SlJGOUpSRVZPVkVsR1NVVlNYekVpTENKSlRsWkJURWxFWDBsRVJVNVVTVVpKUlZKZk1pSXNJbkpsYlc5MlpVRjBJaXdpWVhKeVlYa2lMQ0pwYm1SbGVDSXNJbk53YkdsalpTSXNJbVpoYzNSU1pXMXZkbVZCZENJc0luSmxiVzkyWlNJc0ltbHVaR1Y0VDJZaUxDSm1ZWE4wVW1WdGIzWmxJaXdpZG1WeWFXWjVWSGx3WlNJc0luUjVjR1VpTENKc2IyZEpSQ0lzSW5KbGJXOTJaVUZ5Y21GNUlpd2liV2x1ZFhOQmNuSWlMQ0pzSWl3aVlYQndaVzVrVDJKcVpXTjBjMEYwSWl3aVlXUmtUMkpxY3lJc0ltRndjR3g1SWl3aVkyOXVZMkYwSWl3aVkyOXVkR0ZwYm5NaUxDSmpiM0I1SWl3aVlYSnlYMk5zYjI1bElpd2lUWFYwWVdKc1pVWnZjbmRoY21SSmRHVnlZWFJ2Y2lJc0lsQnZiMndpTENKamJHVmhiblZ3Um5WdVl5SXNJbk5wZW1VaUxDSmpiM1Z1ZENJc0lsOXdiMjlzSWl3aVgyTnNaV0Z1ZFhBaUxDSmZaMlYwSWl3aVkyRmphR1VpTENKd2RYUWlMQ0p3YjI5c0lpd2ljbVZ6YVhwbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096dEJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVFeVFrRXNTVUZCVFVFc2JVSkJRVzFDTEV0QlFVdERMRkZCUVZFc1owSkJRVklzUTBGQlRDeEZRVUZuUXl4VFFVRm9ReXhEUVVGNlFqczdRVUZIUVN4VFFVRlRReXh6UWtGQlZDeERRVUZwUTBNc1IwRkJha01zUlVGQmMwTkRMRWxCUVhSRExFVkJRVFJETzBGQlEzaERMRmRCUVU5RUxFZEJRVkFzUlVGQldUdEJRVU5TTEZsQlFVbEZMRXRCUVV0RExFOUJRVTlETEhkQ1FVRlFMRU5CUVdkRFNpeEhRVUZvUXl4RlFVRnhRME1zU1VGQmNrTXNRMEZCVkR0QlFVTkJMRmxCUVVsRExFVkJRVW9zUlVGQlVUdEJRVU5LTEcxQ1FVRlBRU3hGUVVGUU8wRkJRMGc3UVVGRFJFWXNZMEZCVFVjc1QwRkJUMFVzWTBGQlVDeERRVUZ6UWt3c1IwRkJkRUlzUTBGQlRqdEJRVU5JTzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBnN08wRkJSVVFzVTBGQlUwMHNVMEZCVkN4RFFVRnRRa3dzU1VGQmJrSXNSVUZCZVVKTkxFMUJRWHBDTEVWQlFXbERReXhOUVVGcVF5eEZRVUY1UXp0QlFVTnlReXhSUVVGSlRpeExRVUZMU0N4MVFrRkJkVUpSTEUxQlFYWkNMRVZCUVN0Q1RpeEpRVUV2UWl4RFFVRlVPMEZCUTBGRkxGZEJRVTlOTEdOQlFWQXNRMEZCYzBKRUxFMUJRWFJDTEVWQlFUaENVQ3hKUVVFNVFpeEZRVUZ2UTBNc1JVRkJjRU03UVVGRFNEczdRVUZGUkRzN096czdPMEZCVFVFc1NVRkJTVkVzUzBGQlN6czdRVUZGVERzN096czdPenM3UVVGUlFVTXNZMEZCVlN4clFrRkJVMWdzUjBGQlZDeEZRVUZqTzBGQlEzQkNMR1ZCUVU4c1QwRkJUMEVzUjBGQlVDeExRVUZsTEZGQlFXWXNTVUZCTWtKQkxHVkJRV1ZaTEUxQlFXcEVPMEZCUTBnc1MwRmFTVHM3UVVGalREczdPenM3T3pzN1FVRlJRVU1zWTBGQlZTeHJRa0ZCVTJJc1IwRkJWQ3hGUVVGak8wRkJRM0JDTEdWQlFVOHNUMEZCVDBFc1IwRkJVQ3hMUVVGbExGRkJRV1lzU1VGQk1rSkJMR1ZCUVdWakxFMUJRV3BFTzBGQlEwZ3NTMEY0UWtrN08wRkJNRUpNT3pzN096czdPMEZCVDBGRExGZEJRVThzWlVGQlZXWXNSMEZCVml4RlFVRmxPMEZCUTJ4Q096dEJRVU5CUVN4alFVRk5RU3hQUVVGUExFVkJRV0k3UVVGRFFTeGhRVUZMTEVsQlFVbG5RaXhKUVVGSkxFTkJRVklzUlVGQlYwTXNVMEZCVTBNc1ZVRkJWVVFzVFVGQmJrTXNSVUZCTWtORUxFbEJRVWxETEUxQlFTOURMRVZCUVhWRVJDeEhRVUYyUkN4RlFVRTBSRHRCUVVONFJDeG5Ra0ZCU1ZRc1UwRkJVMWNzVlVGQlZVWXNRMEZCVml4RFFVRmlPMEZCUTBFc1owSkJRVWxVTEUxQlFVb3NSVUZCV1R0QlFVTlNMRzlDUVVGSkxGRkJRVTlCTEUxQlFWQXNlVU5CUVU5QkxFMUJRVkFzVDBGQmEwSXNVVUZCZEVJc1JVRkJaME03UVVGRE5VSlpMSFZDUVVGSFF5eFBRVUZJTEVOQlFWY3NTVUZCV0N4RlFVRnBRbUlzVFVGQmFrSTdRVUZEUVR0QlFVTklPMEZCUTBRc2NVSkJRVTBzU1VGQlNVNHNTVUZCVml4SlFVRnJRazBzVFVGQmJFSXNSVUZCTUVJN1FVRkRkRUlzZDBKQlFVc3NSVUZCUlU0c1VVRkJVVVFzUjBGQlZpeERRVUZNTEVWQlFYTkNPMEZCUTJ4Q1RTeHJRMEZCVjB3c1NVRkJXQ3hGUVVGcFFrMHNUVUZCYWtJc1JVRkJlVUpRTEVkQlFYcENPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMG83UVVGRFJDeGxRVUZQUVN4SFFVRlFPMEZCUTBnc1MwRnVSRWs3TzBGQmNVUk1PenM3T3pzN08wRkJUMEZ4UWl4WFFVRlBMR1ZCUVZWeVFpeEhRVUZXTEVWQlFXVTdRVUZEYkVJN08wRkJRMEZCTEdOQlFVMUJMRTlCUVU4c1JVRkJZanRCUVVOQkxHRkJRVXNzU1VGQlNXZENMRWxCUVVrc1EwRkJVaXhGUVVGWFF5eFRRVUZUUXl4VlFVRlZSQ3hOUVVGdVF5eEZRVUV5UTBRc1NVRkJTVU1zVFVGQkwwTXNSVUZCZFVSRUxFZEJRWFpFTEVWQlFUUkVPMEZCUTNoRUxHZENRVUZKVkN4VFFVRlRWeXhWUVVGVlJpeERRVUZXTEVOQlFXSTdRVUZEUVN4blFrRkJTVlFzVFVGQlNpeEZRVUZaTzBGQlExSXNiMEpCUVVrc1VVRkJUMEVzVFVGQlVDeDVRMEZCVDBFc1RVRkJVQ3hQUVVGclFpeFJRVUYwUWl4RlFVRm5RenRCUVVNMVFsa3NkVUpCUVVkRExFOUJRVWdzUTBGQlZ5eEpRVUZZTEVWQlFXbENZaXhOUVVGcVFqdEJRVU5CTzBGQlEwZzdRVUZEUkN4eFFrRkJUU3hKUVVGSlRpeEpRVUZXTEVsQlFXdENUU3hOUVVGc1FpeEZRVUV3UWp0QlFVTjBRa1FzT0VKQlFWZE1MRWxCUVZnc1JVRkJhVUpOTEUxQlFXcENMRVZCUVhsQ1VDeEhRVUY2UWp0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVORUxHVkJRVTlCTEVkQlFWQTdRVUZEU0N4TFFUVkZTVHM3UVVFNFJVdzdPenM3T3pzN096dEJRVk5CYzBJc1dVRkJVU3huUWtGQlZVTXNSMEZCVml4RlFVRmxReXhKUVVGbUxFVkJRWEZDTzBGQlEzcENMRmxCUVVsRExFMUJRVW9zUlVGQldUdEJRVU5TTEdkQ1FVRkpMRU5CUVVORUxFbEJRVXdzUlVGQlZ6dEJRVU5RVEN4dFFrRkJSME1zVDBGQlNDeERRVUZYTEVsQlFWZzdRVUZEUVR0QlFVTklPMEZCUTBRc1owSkJRVWtzUTBGQlEwY3NSMEZCVEN4RlFVRlZPMEZCUTA1S0xHMUNRVUZIUXl4UFFVRklMRU5CUVZjc1NVRkJXRHRCUVVOQk8wRkJRMGc3UVVGRFJDeG5Ra0ZCU1dwQ0xFOUJRVTkxUWl4SlFVRlFMRU5CUVZsSUxFbEJRVWxKTEZOQlFXaENMRVZCUVRKQ1ZpeE5RVUV6UWl4SFFVRnZReXhEUVVGNFF5eEZRVUV5UXp0QlFVTjJRMFVzYlVKQlFVZERMRTlCUVVnc1EwRkJWeXhKUVVGWU8wRkJRMGc3UVVGRFNqdEJRVU5FTEdGQlFVc3NTVUZCU1ZFc1EwRkJWQ3hKUVVGalNpeEpRVUZrTzBGQlFXOUNMR2RDUVVGSlFTeExRVUZMU3l4alFVRk1MRU5CUVc5Q1JDeERRVUZ3UWl4RFFVRktMRVZCUVRSQ1RDeEpRVUZKU3l4RFFVRktMRWxCUVZOS0xFdEJRVXRKTEVOQlFVd3NRMEZCVkR0QlFVRm9SQ3hUUVVOQlRDeEpRVUZKU1N4VFFVRktMRWRCUVdkQ2VFSXNUMEZCVHpKQ0xFMUJRVkFzUTBGQlkwNHNTMEZCUzBjc1UwRkJia0lzUlVGQk9FSTdRVUZETVVOSkxIbENRVUZoTzBGQlExUkRMSFZDUVVGUFZDeEhRVVJGTzBGQlJWUlZMREJDUVVGVkxFbEJSa1E3UVVGSFZFTXNPRUpCUVdNN1FVRklURHRCUVVRMlFpeFRRVUU1UWl4RFFVRm9RanRCUVU5QkxHVkJRVTlZTEVkQlFWQTdRVUZEU0N4TFFUbEhTVHM3UVVGblNFdzdPenM3T3p0QlFVMUJXU3haUVhSSVN5eHZRa0Z6U0V0RExFbEJkRWhNTEVWQmMwaFhPMEZCUTFvc1dVRkJTVU1zVVVGQlVVUXNTMEZCUzFRc1UwRkJha0lzUTBGRVdTeERRVU5uUWp0QlFVTTFRaXhaUVVGSlZ5eGpRVUZqUkN4VFFVRlRiRU1zVDBGQlQwVXNZMEZCVUN4RFFVRnpRbWRETEV0QlFYUkNMRU5CUVROQ08wRkJRMEVzWlVGQlQwTXNaVUZCWlVFc1dVRkJXVkFzVjBGQmJFTTdRVUZEU0N4TFFURklTVHM3TzBGQk5FaE1PenM3T3pzN096dEJRVkZCVVN4clFrRndTVXNzTUVKQmIwbFhReXhSUVhCSldDeEZRVzlKY1VKRExGVkJjRWx5UWl4RlFXOUphVU03UVVGRGJFTXNXVUZCU1VRc1dVRkJXVU1zVlVGQmFFSXNSVUZCTkVJN1FVRkRlRUlzWjBKQlFVa3NUMEZCVDBRc1VVRkJVQ3hMUVVGdlFpeFZRVUY0UWl4RlFVRnZRenRCUVVOb1F5eDFRa0ZCVHl4TFFVRlFPMEZCUTBnN1FVRkRSQ3huUWtGQlNTeFBRVUZQUXl4VlFVRlFMRXRCUVhOQ0xGVkJRVEZDTEVWQlFYTkRPMEZCUTJ4RExHOUNRVUZKYUVJc1RVRkJTaXhGUVVGWk8wRkJRMUpPTEhWQ1FVRkhkVUlzVFVGQlNDeERRVUZWTEVsQlFWWXNSVUZCWjBKRUxGVkJRV2hDTzBGQlEwZzdRVUZEUkN4MVFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFJDeG5Ra0ZCU1VRc1lVRkJZVU1zVlVGQmFrSXNSVUZCTmtJN1FVRkRla0lzZFVKQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc2NVSkJRVk03UVVGRFRFUXNNa0pCUVZjNVFpeEhRVUZIZVVJc1VVRkJTQ3hEUVVGWlN5eFJRVUZhTEVOQlFWZzdRVUZEUVN4dlFrRkJTU3hEUVVGRFFTeFJRVUZNTEVWQlFXVTdRVUZEV0N3eVFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFJDeHZRa0ZCU1VFc1lVRkJZVU1zVlVGQmFrSXNSVUZCTmtJN1FVRkRla0lzTWtKQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVORUxHVkJRVThzUzBGQlVEdEJRVU5JTEV0Qk4wcEpPenM3UVVFclNrdzdPenM3TzBGQlMwRkZMRmRCUVU4c1pVRkJWVE5ETEVkQlFWWXNSVUZCWlR0QlFVTnNRaXhaUVVGSk1FSXNUMEZCVDNaQ0xFOUJRVTkxUWl4SlFVRlFMRU5CUVZreFFpeEhRVUZhTEVOQlFWZzdRVUZEUVN4aFFVRkxMRWxCUVVsblFpeEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWxWTEV0QlFVdFVMRTFCUVhwQ0xFVkJRV2xEUkN4SFFVRnFReXhGUVVGelF6dEJRVU5zUXl4dFFrRkJUMmhDTEVsQlFVa3dRaXhMUVVGTFZpeERRVUZNTEVOQlFVb3NRMEZCVUR0QlFVTklPMEZCUTBvc1MwRjZTMGs3TzBGQk1rdE1PenM3T3p0QlFVdEJORUlzYlVKQlFXVXNkVUpCUVZVMVF5eEhRVUZXTEVWQlFXVTdRVUZETVVJc1lVRkJTeXhKUVVGSk5rTXNSMEZCVkN4SlFVRm5RamRETEVkQlFXaENMRVZCUVhGQ08wRkJRMnBDTEcxQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVORUxHVkJRVThzU1VGQlVEdEJRVU5JTEV0QmNreEpPenRCUVhWTVREczdPenM3T3p0QlFVOUJPRU1zTWtKQlFYVkNMME03UVVFNVRHeENMRU5CUVZRN08wRkJhMDFCTEVsQlFVbG5SQ3hsUVVGbE8wRkJRMlptTEZkQlFVOW5RaXhUUVVSUk8wRkJSV1pETEdkQ1FVRlpMRXRCUmtjN1FVRkhabWhDTEdOQlFWVXNTMEZJU3p0QlFVbG1ReXhyUWtGQll6dEJRVXBETEVOQlFXNUNPenRCUVU5Qk96czdPenM3T3pzN08wRkJWVUY0UWl4SFFVRkhjMElzUzBGQlNDeEhRVUZYTEZWQlFWVm9ReXhIUVVGV0xFVkJRV1ZyUkN4SlFVRm1MRVZCUVhGQ2JFSXNTMEZCY2tJc1JVRkJORUpETEZGQlFUVkNMRVZCUVhORFowSXNWVUZCZEVNc1JVRkJhMFE3UVVGRGVrUkdMR2xDUVVGaFppeExRVUZpTEVkQlFYRkNRU3hMUVVGeVFqdEJRVU5CWlN4cFFrRkJZV1FzVVVGQllpeEhRVUYzUWtFc1VVRkJlRUk3UVVGRFFXTXNhVUpCUVdGRkxGVkJRV0lzUjBGQk1FSkJMRlZCUVRGQ08wRkJRMEU1UXl4WFFVRlBUU3hqUVVGUUxFTkJRWE5DVkN4SFFVRjBRaXhGUVVFeVFtdEVMRWxCUVROQ0xFVkJRV2xEU0N4WlFVRnFRenRCUVVOQlFTeHBRa0ZCWVdZc1MwRkJZaXhIUVVGeFFtZENMRk5CUVhKQ08wRkJRMGdzUTBGT1JEczdRVUZSUVN4SlFVRkpSeXhuUWtGQlowSTdRVUZEYUVKRExGTkJRVXNzU1VGRVZ6dEJRVVZvUWtNc1UwRkJTeXhKUVVaWE8wRkJSMmhDU2l4blFrRkJXVHRCUVVoSkxFTkJRWEJDT3p0QlFVMUJPenM3T3pzN096czdPMEZCVlVGMlF5eEhRVUZITkVNc1RVRkJTQ3hIUVVGWkxGVkJRVlYwUkN4SFFVRldMRVZCUVdWclJDeEpRVUZtTEVWQlFYRkNTeXhOUVVGeVFpeEZRVUUyUWtNc1RVRkJOMElzUlVGQmNVTlFMRlZCUVhKRExFVkJRV2xFWml4WlFVRnFSQ3hGUVVFclJEdEJRVU4yUlN4UlFVRkpMRTlCUVU5elFpeE5RVUZRTEV0QlFXdENMRlZCUVhSQ0xFVkJRV3RETzBGQlF6bENVQ3h4UWtGQllVOHNUVUZCWWp0QlFVTkJRU3hwUWtGQlUxSXNVMEZCVkR0QlFVTklPMEZCUTBSSExHdENRVUZqUXl4SFFVRmtMRWRCUVc5Q1J5eE5RVUZ3UWp0QlFVTkJTaXhyUWtGQlkwVXNSMEZCWkN4SFFVRnZRa2NzVFVGQmNFSTdRVUZEUVV3c2EwSkJRV05HTEZWQlFXUXNSMEZCTWtKQkxGVkJRVE5DTzBGQlEwRkZMR3RDUVVGamFrSXNXVUZCWkN4SFFVRTJRa0VzV1VGQk4wSTdRVUZEUVM5Q0xGZEJRVTlOTEdOQlFWQXNRMEZCYzBKVUxFZEJRWFJDTEVWQlFUSkNhMFFzU1VGQk0wSXNSVUZCYVVORExHRkJRV3BETzBGQlEwRkJMR3RDUVVGalF5eEhRVUZrTEVkQlFXOUNMRWxCUVhCQ08wRkJRMEZFTEd0Q1FVRmpSU3hIUVVGa0xFZEJRVzlDTEVsQlFYQkNPMEZCUTBnc1EwRmFSRHM3UVVGalFTeEpRVUZKU1N4aFFVRmhPMEZCUTJKTUxGTkJRVXNzU1VGRVVUdEJRVVZpU0N4blFrRkJXU3hMUVVaRE8wRkJSMkptTEd0Q1FVRmpPMEZCU0VRc1EwRkJha0k3TzBGQlRVRTdPenM3T3pzN096dEJRVk5CZUVJc1IwRkJSekJETEVkQlFVZ3NSMEZCVXl4VlFVRlZjRVFzUjBGQlZpeEZRVUZsYTBRc1NVRkJaaXhGUVVGeFFrc3NUVUZCY2tJc1JVRkJOa0pPTEZWQlFUZENMRVZCUVhsRFppeFpRVUY2UXl4RlFVRjFSRHRCUVVNMVJIVkNMR1ZCUVZkTUxFZEJRVmdzUjBGQmFVSkhMRTFCUVdwQ08wRkJRMEZGTEdWQlFWZFNMRlZCUVZnc1IwRkJkMEpCTEZWQlFYaENPMEZCUTBGUkxHVkJRVmQyUWl4WlFVRllMRWRCUVRCQ1FTeFpRVUV4UWp0QlFVTkJMMElzVjBGQlQwMHNZMEZCVUN4RFFVRnpRbFFzUjBGQmRFSXNSVUZCTWtKclJDeEpRVUV6UWl4RlFVRnBRMDhzVlVGQmFrTTdRVUZEUVVFc1pVRkJWMHdzUjBGQldDeEhRVUZwUWl4SlFVRnFRanRCUVVOSUxFTkJUa1E3TzBGQlVVRXNTVUZCU1Uwc1lVRkJZVHRCUVVOaVRDeFRRVUZMTEVsQlJGRTdRVUZGWWtvc1owSkJRVmtzUzBGR1F6dEJRVWRpWml4clFrRkJZenRCUVVoRUxFTkJRV3BDT3p0QlFVMUJPenM3T3pzN096czdRVUZUUVhoQ0xFZEJRVWN5UXl4SFFVRklMRWRCUVZNc1ZVRkJWWEpFTEVkQlFWWXNSVUZCWld0RUxFbEJRV1lzUlVGQmNVSk5MRTFCUVhKQ0xFVkJRVFpDVUN4VlFVRTNRaXhGUVVGNVEyWXNXVUZCZWtNc1JVRkJkVVE3UVVGRE5VUjNRaXhsUVVGWFRDeEhRVUZZTEVkQlFXbENSeXhOUVVGcVFqdEJRVU5CUlN4bFFVRlhWQ3hWUVVGWUxFZEJRWGRDUVN4VlFVRjRRanRCUVVOQlV5eGxRVUZYZUVJc1dVRkJXQ3hIUVVFd1FrRXNXVUZCTVVJN1FVRkRRUzlDTEZkQlFVOU5MR05CUVZBc1EwRkJjMEpVTEVkQlFYUkNMRVZCUVRKQ2EwUXNTVUZCTTBJc1JVRkJhVU5STEZWQlFXcERPMEZCUTBGQkxHVkJRVmRNTEVkQlFWZ3NSMEZCYVVJc1NVRkJha0k3UVVGRFNDeERRVTVFT3p0QlFWRkJPenM3T3pzN08wRkJUMEV6UXl4SFFVRkhhVVFzV1VGQlNDeEhRVUZyUWl4VlFVRlZReXhUUVVGV0xFVkJRWEZDTzBGQlEyNURMRkZCUVVrc1QwRkJUMEVzVTBGQlVDeExRVUZ4UWl4VlFVRjZRaXhGUVVGeFF6dEJRVU5xUXl4WlFVRkpha01zV1VGQldXbERMRlZCUVZWcVF5eFRRVUV4UWp0QlFVTkJMRmxCUVVsQkxHRkJRV0ZCTEZWQlFWVkZMR05CUVZZc1EwRkJlVUlzWlVGQmVrSXNRMEZCWWl4SlFVRXdSRVlzVlVGQlZXdERMR0ZCUVhoRkxFVkJRWFZHTzBGQlEyNUdMRzFDUVVGUGJFTXNWVUZCVld0RExHRkJRV3BDTzBGQlEwZzdRVUZEUkN4WlFVRkpReXhUUVVGVExFVkJRV0k3UVVGRFFUdEJRVU5CTEZsQlFVbEdMRlZCUVZVelJDeEpRVUZrTEVWQlFXOUNPMEZCUTJoQ05rUXNjVUpCUVZOR0xGVkJRVlV6UkN4SlFVRnVRanRCUVVOSU8wRkJRMFFzV1VGQlNUSkVMRlZCUVZWSExGRkJRV1FzUlVGQmQwSTdRVUZEY0VJc1owSkJRVWxETEVkQlFVbzdRVUZCUVN4blFrRkJVME1zVFVGQlRVd3NWVUZCVlVjc1VVRkJWaXhGUVVGbU8wRkJRMEVzWjBKQlFVbEZMRWxCUVVsRExFMUJRVW9zUTBGQlZ5eERRVUZZTEUxQlFXdENMRWRCUVhSQ0xFVkJRVEpDTzBGQlEzWkNPMEZCUTBGR0xITkNRVUZOUXl4SlFVRkpSU3hMUVVGS0xFTkJRVlVzYVVKQlFWWXNRMEZCVGp0QlFVTklMR0ZCU0VRc1RVRkpTenRCUVVORU8wRkJRMEZJTEhOQ1FVRk5ReXhKUVVGSlJTeExRVUZLTEVOQlFWVXNhMEpCUVZZc1EwRkJUanRCUVVOSU8wRkJRMFFzWjBKQlFVbElMRTlCUVU5QkxFbEJRVWt2UXl4TlFVRktMRXRCUVdVc1EwRkJNVUlzUlVGQk5rSTdRVUZEZWtJMlF5eDVRa0ZCVTBVc1NVRkJTU3hEUVVGS0xFTkJRVlE3UVVGRFNEdEJRVU5LTzBGQlEwUXNaVUZCVDBZc1YwRkJWeXhSUVVGWUxFZEJRWE5DUVN4TlFVRjBRaXhIUVVFclFpeEZRVUYwUXp0QlFVTklMRXRCZWtKRUxFMUJNRUpMTEVsQlFVbEdMR0ZCUVdGQkxGVkJRVlUzUWl4WFFVRXpRaXhGUVVGM1F6dEJRVU42UXl4bFFVRlBja0lzUjBGQlIybEVMRmxCUVVnc1EwRkJaMEpETEZWQlFWVTNRaXhYUVVFeFFpeERRVUZRTzBGQlEwZzdRVUZEUkN4WFFVRlBMRVZCUVZBN1FVRkRTQ3hEUVM5Q1JEczdRVUZwUTBFc1UwRkJVM0ZETEdGQlFWUXNRMEZCZDBKRExFVkJRWGhDTEVWQlFUUkNPMEZCUTNoQ0xGZEJRVThzVDBGQlQwRXNSVUZCVUN4TFFVRmpMRkZCUVdRc1NVRkJNRUpCTEVkQlFVZERMRlZCUVVnc1EwRkJZM3BGTEdsQ1FVRnBRakJGTEUxQlFTOUNMRU5CUVdwRE8wRkJRMGc3TzBGQlJVUTdRVUZEUVN4RFFVRkRMRmxCUVZrN1FVRkRWQ3hSUVVGSlF5eGhRVUZoTEVWQlFXcENPMEZCUTBFc1VVRkJTVU1zWlVGQlpTeEZRVUZ1UWpzN1FVRkZRU3hoUVVGVFF5eExRVUZVTEVOQlFXZENOMElzUjBGQmFFSXNSVUZCY1VJNFFpeFZRVUZ5UWl4RlFVRnBRME1zUzBGQmFrTXNSVUZCZDBNN1FVRkRjRU5zUlN4WFFVRkhORU1zVFVGQlNDeERRVUZWTlVNc1JVRkJWaXhGUVVGamFVVXNWVUZCWkN4RlFVTkpMRmxCUVZrN1FVRkRVaXh0UWtGQlQzaEZMRTlCUVU4d1JTeE5RVUZRTEVOQlFXTXNSVUZCWkN4RlFVRnJRa1FzUzBGQmJFSXNRMEZCVUR0QlFVTklMRk5CU0V3c1JVRkpTU3hWUVVGVk5VTXNTMEZCVml4RlFVRnBRanRCUVVOaWRFSXNaVUZCUjJsRExFdEJRVWdzUTBGQlUybERMRXRCUVZRN1FVRkRRWHBGTEcxQ1FVRlBNRVVzVFVGQlVDeERRVUZqUkN4TFFVRmtMRVZCUVhGQ05VTXNTMEZCY2tJN1FVRkRTQ3hUUVZCTU8wRkJVMEVzWlVGQlR5eFZRVUZWY1VNc1JVRkJWaXhGUVVGamRFTXNWMEZCWkN4RlFVRXlRanRCUVVNNVFqdEJRVU5CTEdkQ1FVRkpRU3haUVVGWlNpeFRRVUZhTEVOQlFYTkNSU3hqUVVGMFFpeERRVUZ4UTJkQ0xFZEJRWEpETEVOQlFVb3NSVUZCSzBNN1FVRkRNME1zZFVKQlFVOHJRaXhOUVVGTk4wTXNXVUZCV1Vvc1UwRkJXaXhEUVVGelFtdENMRWRCUVhSQ0xFTkJRVTRzUTBGQlVEdEJRVU5JTzBGQlEwUnVReXhsUVVGSGMwSXNTMEZCU0N4RFFVRlRSQ3haUVVGWlNpeFRRVUZ5UWl4RlFVRm5RMnRDTEVkQlFXaERMRVZCUVhGRGQwSXNSVUZCY2tNN1FVRkRRVHRCUVVOQkxHZENRVUZKUVN4RlFVRktMRVZCUVZFN1FVRkRTaXh2UWtGQlNWTXNZVUZCWVVZc1RVRkJUVkFzUlVGQlRpeERRVUZxUWp0QlFVTkJMRzlDUVVGSlV5eGpRVUZqUVN4bFFVRmxMME1zVjBGQmFrTXNSVUZCT0VNN1FVRkRNVU1zZDBKQlFVbG5SQ3hSUVVGUkxEQkRRVUV3UTJ4RExFZEJRVEZETEVkQlFXZEVMRTFCUVdoRUxFZEJRWGxFZDBJc1JVRkJla1FzUjBGQk9FUXNTVUZCTVVVN1FVRkRRU3gzUWtGQlNWY3NUMEZCU2l4RlFVRmhPMEZCUTFSRUxHbERRVUZUT3p0MVJFRkJWRHRCUVVkSU8wRkJRMFExUkN4MVFrRkJSelJFTEV0QlFVZ3NRMEZCVTBFc1MwRkJWRHRCUVVOSUxHbENRVkpFTEUxQlUwczdRVUZEUkVnc01FSkJRVTFRTEVWQlFVNHNTVUZCV1hSRExGZEJRVm83UVVGRFNEdEJRVU5FTzBGQlEwRTdRVUZEUVR0QlFVTklPMEZCUTBvc1UwRjZRa1E3UVVFd1FrZzdPMEZCUlVRN096czdPenM3UVVGUFFUczdPenM3T3pzN096czdPenM3UVVGalFYSkNMRTlCUVVkMVJTeFhRVUZJTEVkQlFXbENVQ3hOUVVGTkxGTkJRVTRzUlVGQmFVSXNjVUpCUVdwQ0xFVkJRWGREUml4VlFVRjRReXhEUVVGcVFqczdRVUZGUVRzN096czdPenM3T3pzN096czdRVUZqUVN4UlFVRkpWU3hwUWtGQmFVSlNMRTFCUVUwc1pVRkJUaXhGUVVGMVFpeDFRa0ZCZGtJc1JVRkJaMFJFTEZsQlFXaEVMRU5CUVhKQ096dEJRVVZCT3pzN096czdRVUZOUVM5RUxFOUJRVWQ1UlN4WlFVRklMRWRCUVd0Q0xGVkJRVlZETEZOQlFWWXNSVUZCY1VKeVJDeFhRVUZ5UWl4RlFVRnJRenRCUVVOb1JHMUVMSFZDUVVGbFJTeFRRVUZtTEVWQlFUQkNja1FzVjBGQk1VSTdRVUZEUVR0QlFVTkJMRmxCUVVrc1EwRkJRMEVzV1VGQldVb3NVMEZCV2l4RFFVRnpRa1VzWTBGQmRFSXNRMEZCY1VNc1UwRkJja01zUTBGQlRDeEZRVUZ6UkR0QlFVTnNSQ3huUWtGQlNYZERMRXRCUVV0bExHRkJRV0YyUml4cFFrRkJhVUozUml4UlFVRnFRaXhGUVVGMFFqdEJRVU5CTEdkQ1FVRkphRUlzUlVGQlNpeEZRVUZSTzBGQlEwb3pSQ3h0UWtGQlIzVkZMRmRCUVVnc1EwRkJaVm9zUlVGQlppeEZRVUZ0UW5SRExGZEJRVzVDTzBGQlEwZzdRVUZEU2p0QlFVTktMRXRCVkVRN08wRkJWMEU3T3pzN096czdPenRCUVZOQmNrSXNUMEZCUnpSRkxHVkJRVWdzUjBGQmNVSXNXVUZCV1R0QlFVTTNRaXhoUVVGTExFbEJRVWwwUlN4SlFVRkpMRU5CUVdJc1JVRkJaMEpCTEVsQlFVbEZMRlZCUVZWRUxFMUJRVGxDTEVWQlFYTkRSQ3hIUVVGMFF5eEZRVUV5UXp0QlFVTjJReXhuUWtGQlNWa3NTVUZCU1ZZc1ZVRkJWVVlzUTBGQlZpeEZRVUZoVnl4VFFVRnlRanRCUVVOQkxHZENRVUZKTkVRc1ZVRkJWVE5FTEVWQlFVVTBSQ3hQUVVGb1FqdEJRVU5CTEdkQ1FVRkpSQ3hQUVVGS0xFVkJRV0U3UVVGRFZDeDFRa0ZCVDJZc1YwRkJWMlVzVDBGQldDeERRVUZRTzBGQlEwZzdRVUZEUkN4blFrRkJTVVVzV1VGQldUZEVMRVZCUVVWcFF5eGhRVUZzUWp0QlFVTkJMR2RDUVVGSk5FSXNVMEZCU2l4RlFVRmxPMEZCUTFnc2RVSkJRVTlvUWl4aFFVRmhaMElzVTBGQllpeERRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTktMRXRCV2tRN08wRkJZMEU3T3pzN096czdRVUZQUVM5RkxFOUJRVWRuUml4aFFVRklMRWRCUVcxQ0xGVkJRVlZJTEU5QlFWWXNSVUZCYlVJN1FVRkRiRU1zWlVGQlQyWXNWMEZCVjJVc1QwRkJXQ3hEUVVGUU8wRkJRMGdzUzBGR1JEczdRVUZKUVRzN096czdPMEZCVFVFM1JTeFBRVUZIYVVZc1kwRkJTQ3hIUVVGdlFpeFZRVUZWUml4VFFVRldMRVZCUVhGQ08wRkJRM0pETEdWQlFVOW9RaXhoUVVGaFowSXNVMEZCWWl4RFFVRlFPMEZCUTBnc1MwRkdSRHM3UVVGSlFUczdPenM3T3pzN1FVRlJRUzlGTEU5QlFVZHJSaXhYUVVGSUxFZEJRV2xDTEZWQlFWVTFSaXhIUVVGV0xFVkJRV1UyUml4WFFVRm1MRVZCUVRSQ08wRkJRM3BEUVN4elFrRkJaU3hQUVVGUFFTeFhRVUZRTEV0QlFYVkNMRmRCUVhaQ0xFZEJRWEZEUVN4WFFVRnlReXhIUVVGclJDeEpRVUZxUlRzN1FVRkZRU3haUVVGSlF5eEhRVUZLTzBGQlEwRXNXVUZCU1N4UFFVRlBPVVlzUjBGQlVDeExRVUZsTEZWQlFXWXNTVUZCTmtKQkxFbEJRVWt5UWl4VFFVRktMRU5CUVdORkxHTkJRV1FzUTBGQk5rSXNVMEZCTjBJc1EwRkJha01zUlVGQk1FVTdRVUZEZEVWcFJTeHJRa0ZCVFRsR0xFbEJRVWt5UWl4VFFVRktMRU5CUVdNMlJDeFBRVUZ3UWp0QlFVTkJMR2RDUVVGSkxFTkJRVU5MTEZkQlFVUXNTMEZCYVVKd1JTeFZRVUZWYzBVc1UwRkJNMElzUzBGQmVVTXpRaXhqUVVGak1FSXNSMEZCWkN4RFFVRTNReXhGUVVGcFJUdEJRVU0zUkN4MVFrRkJUeXhGUVVGUU8wRkJRMGc3UVVGRFJDeHRRa0ZCVDBFc1IwRkJVRHRCUVVOSU8wRkJRMFFzV1VGQlNUbEdMRTlCUVU5QkxFbEJRVWtyUWl4WFFVRm1MRVZCUVRSQ08wRkJRM2hDTEdkQ1FVRkpTaXhaUVVGWk0wSXNTVUZCU1N0Q0xGZEJRVW9zUTBGQlowSktMRk5CUVdoRE8wRkJRMEVzWjBKQlFVbEJMR0ZCUVdGQkxGVkJRVlZGTEdOQlFWWXNRMEZCZVVJc1UwRkJla0lzUTBGQmFrSXNSVUZCYzBRN1FVRkRiRVJwUlN4elFrRkJUVGxHTEVsQlFVbDNSaXhQUVVGV08wRkJRMEVzYjBKQlFVa3NRMEZCUTBzc1YwRkJSQ3hMUVVGcFFuQkZMRlZCUVZWelJTeFRRVUV6UWl4TFFVRjVRek5DTEdOQlFXTXdRaXhIUVVGa0xFTkJRVGRETEVWQlFXbEZPMEZCUXpkRUxESkNRVUZQTEVWQlFWQTdRVUZEU0R0QlFVTkVMSFZDUVVGUFFTeEhRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVMR1ZCUVU4c1JVRkJVRHRCUVVOSUxFdEJkRUpFTzBGQmRVSklMRU5CTjB0RU96dEJRU3RMUVRzN096czdPenM3UVVGUlFYQkdMRWRCUVVkelJpeFJRVUZJTEVkQlFXTXNWVUZCVldoSExFZEJRVllzUlVGQlpXbEhMRk5CUVdZc1JVRkJNRUpETEU5QlFURkNMRVZCUVcxRGFrVXNVVUZCYmtNc1JVRkJOa003UVVGRGRrUXNVVUZCU1d0RkxHdENRVUZyUWl4VlFVRjBRanRCUVVOQkxGRkJRVWxETEZWQlFWVkVMR2RDUVVGblFrVXNTVUZCYUVJc1EwRkJjVUpLTEZOQlFYSkNMRVZCUVdkRExFTkJRV2hETEVOQlFXUTdRVUZEUVN4UlFVRkpTeXhWUVVGVlNDeG5Ra0ZCWjBKRkxFbEJRV2hDTEVOQlFYRkNTQ3hQUVVGeVFpeEZRVUU0UWl4RFFVRTVRaXhEUVVGa08wRkJRMEVzWVVGQlV6bERMRWRCUVZRc1IwRkJaMEk3UVVGRFdpeFpRVUZKTTBJc1RVRkJTaXhGUVVGWk8wRkJRMUpPTEdWQlFVZDFRaXhOUVVGSUxFTkJRVlVzU1VGQlZpeEZRVUZuUW5WRUxGTkJRV2hDTEVWQlFUSkNReXhQUVVFelFqdEJRVU5JTzBGQlEwUXNaVUZCVHl4TFFVRkxTU3hQUVVGTUxFTkJRVkE3UVVGRFNEdEJRVU5FTEZGQlFVbHlSU3hSUVVGS0xFVkJRV003UVVGRFZuWkNMRmRCUVVjMFF5eE5RVUZJTEVOQlFWVjBSQ3hIUVVGV0xFVkJRV1Z2Unl4UFFVRm1MRVZCUTBsb1JDeEhRVVJLTEVWQlJVa3NWVUZCVlhCQ0xFdEJRVllzUlVGQmFVSTdRVUZEWWl4blFrRkJTVkFzVFVGQlNpeEZRVUZaTzBGQlExSk9MRzFDUVVGSGRVSXNUVUZCU0N4RFFVRlZMRWxCUVZZc1JVRkJaMEoxUkN4VFFVRm9RaXhGUVVFeVFrTXNUMEZCTTBJN1FVRkRTRHRCUVVORUxHbENRVUZMU1N4UFFVRk1MRWxCUVdkQ2RFVXNTMEZCYUVJN1FVRkRTQ3hUUVZCTU8wRkJVMGdzUzBGV1JDeE5RVmRMTzBGQlEwUjBRaXhYUVVGSE1FTXNSMEZCU0N4RFFVRlBjRVFzUjBGQlVDeEZRVUZaYjBjc1QwRkJXaXhGUVVGeFFtaEVMRWRCUVhKQ08wRkJRMGc3UVVGRFNpeERRWGhDUkRzN1FVRXdRa0U3T3pzN096czdPMEZCVVVFeFF5eEhRVUZITmtZc1UwRkJTQ3hIUVVGbExGVkJRVlYyUnl4SFFVRldMRVZCUVdWM1J5eFBRVUZtTEVWQlFYZENReXhMUVVGNFFpeEZRVUVyUW5oRkxGRkJRUzlDTEVWQlFYbERPMEZCUTNCRUxGTkJRVXNzU1VGQlNXZEZMRk5CUVZRc1NVRkJjMEpSTEV0QlFYUkNMRVZCUVRaQ08wRkJRM3BDTEZsQlFVbERMRlZCUVZWRUxFMUJRVTFTTEZOQlFVNHNRMEZCWkR0QlFVTkJka1lzVjBGQlIzTkdMRkZCUVVnc1EwRkJXV2hITEVkQlFWb3NSVUZCYVVKM1J5eFZRVUZWTEVkQlFWWXNSMEZCWjBKUUxGTkJRV3BETEVWQlFUUkRVeXhQUVVFMVF5eEZRVUZ4UkhwRkxGRkJRWEpFTzBGQlEwZzdRVUZEU2l4RFFVeEVPenRCUVU5QkxFbEJRVWt3UlN4dlFrRkJiMElzVjBGQmVFSTdRVUZEUVN4SlFVRkpReXhoUVVGaExFbEJRV3BDT3p0QlFVVkJPenM3T3pzN096czdPMEZCVlVGc1J5eEhRVUZIYlVjc1UwRkJTQ3hIUVVGbExGbEJRVms3UVVGRGRrSXNVVUZCU1VNc1UwRkJVelZHTEZWQlFWVkVMRTFCUVhaQ08wRkJRMEVzVVVGQlNUWkdMRmRCUVZjc1EwRkJaaXhGUVVGclFqdEJRVU5rTEdWQlFVOHNSVUZCVUR0QlFVTklPMEZCUTBRc1VVRkJTVU1zVFVGQlRUZEdMRlZCUVZVc1EwRkJWaXhEUVVGV08wRkJRMEVzVVVGQlNUUkdMRmRCUVZjc1EwRkJaaXhGUVVGclFqdEJRVU5rTEdWQlFVOHNTMEZCUzBNc1IwRkJXanRCUVVOSU96dEJRVVZFTEZGQlFVbERMR3RDUVVGclFpeFBRVUZQUkN4SFFVRlFMRXRCUVdVc1VVRkJaaXhKUVVFeVFrb3NhMEpCUVd0Q1RTeEpRVUZzUWl4RFFVRjFRa1lzUjBGQmRrSXNRMEZCYWtRN1FVRkRRU3hSUVVGSlF5eGxRVUZLTEVWQlFYRkNPMEZCUTJwQ0xHRkJRVXNzU1VGQlNXaEhMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1RoR0xFMUJRWEJDTEVWQlFUUkNMRVZCUVVVNVJpeERRVUU1UWl4RlFVRnBRenRCUVVNM1FpeG5Ra0ZCU1d0SExFMUJRVTFvUnl4VlFVRlZSaXhEUVVGV0xFTkJRVlk3UVVGRFFTeG5Ra0ZCU1cxSExHVkJRV1VzVDBGQlQwUXNSMEZCVUN4TFFVRmxMRkZCUVdZc1IwRkJNRUpRTEdsQ1FVRXhRaXhIUVVFNFEwTXNWVUZCYWtVN1FVRkRRU3huUWtGQlNVOHNZVUZCWVVZc1NVRkJZaXhEUVVGclFrWXNSMEZCYkVJc1EwRkJTaXhGUVVOSlFTeE5RVUZOUVN4SlFVRkpTeXhQUVVGS0xFTkJRVmxFTEZsQlFWb3NSVUZCTUVKRUxFZEJRVEZDTEVOQlFVNHNRMEZFU2l4TFFVZEpTQ3hQUVVGUExFMUJRVTFITEVkQlFXSTdRVUZEVUR0QlFVTktMRXRCVkVRc1RVRlZTenRCUVVORUxHRkJRVXNzU1VGQlNXeEhMRXRCUVVrc1EwRkJZaXhGUVVGblFrRXNTMEZCU1RoR0xFMUJRWEJDTEVWQlFUUkNMRVZCUVVVNVJpeEZRVUU1UWl4RlFVRnBRenRCUVVNM1FpdEdMRzFDUVVGUExFMUJRVTAzUml4VlFVRlZSaXhGUVVGV0xFTkJRV0k3UVVGRFNEdEJRVU5LTzBGQlEwUXNWMEZCVHl0R0xFZEJRVkE3UVVGRFNDeERRVE5DUkRzN1FVRTJRa0U3UVVGRFFYSkhMRWRCUVVjeVJ5eGpRVUZJTEVkQlFXOUNMRmxCUVZrN1FVRkROVUlzVVVGQlNVTXNUVUZCVFhCSExGVkJRVlZFTEUxQlFWWXNSMEZCYlVJc1EwRkJOMEk3UVVGRFFTeFJRVUZKYzBjc1QwRkJUeXhKUVVGSlF5eExRVUZLTEVOQlFWVkdMRWRCUVZZc1EwRkJXRHRCUVVOQkxGTkJRVWtzU1VGQlNYUkhMRWxCUVVrc1EwRkJXaXhGUVVGbFFTeEpRVUZKYzBjc1IwRkJia0lzUlVGQmQwSXNSVUZCUlhSSExFTkJRVEZDTEVWQlFUWkNPMEZCUTNwQ2RVY3NZVUZCUzNaSExFTkJRVXdzU1VGQlZVVXNWVUZCVlVZc1NVRkJTU3hEUVVGa0xFTkJRVlk3UVVGRFNEdEJRVU5FTEZkQlFVOTFSeXhKUVVGUU8wRkJRMGdzUTBGUVJEczdRVUZUUVRzN096czdPenM3T3p0QlFWVkJOMGNzUjBGQlJ5dEhMRk5CUVVnc1IwRkJaU3hWUVVGVlF5eGhRVUZXTEVWQlFYbENPMEZCUTNCRExGRkJRVWxETEUxQlFVMTRTQ3hQUVVGUE1rSXNUVUZCVUN4RFFVRmpMRWxCUVdRc1EwRkJWanRCUVVOQkxGRkJRVWswUml4aFFVRktMRVZCUVcxQ08wRkJRMllzV1VGQlRVVXNkVUpCUVhWQ0xFZEJRVGRDTzBGQlEwRXNXVUZCVFVNc2RVSkJRWFZDTEVkQlFUZENPMEZCUTBGR0xGbEJRVWxETEc5Q1FVRktMRWxCUVRSQ0xFbEJRVFZDTzBGQlEwRkVMRmxCUVVsRkxHOUNRVUZLTEVsQlFUUkNMRWxCUVRWQ08wRkJRMEVzWlVGQlQwWXNTVUZCU1VNc2IwSkJRVW9zUTBGQlVEdEJRVU5CTEdWQlFVOUVMRWxCUVVsRkxHOUNRVUZLTEVOQlFWQTdRVUZEU0R0QlFVTkVMRmRCUVU5R0xFZEJRVkE3UVVGRFNDeERRVmhFT3p0QlFXRkJPenM3T3p0QlFVdEJPenM3T3pzN1FVRk5RU3hUUVVGVFJ5eFJRVUZVTEVOQlFXMUNReXhMUVVGdVFpeEZRVUV3UWtNc1MwRkJNVUlzUlVGQmFVTTdRVUZETjBKRUxGVkJRVTFGTEUxQlFVNHNRMEZCWVVRc1MwRkJZaXhGUVVGdlFpeERRVUZ3UWp0QlFVTklPenRCUVVWRU96czdPenM3TzBGQlQwRXNVMEZCVTBVc1dVRkJWQ3hEUVVGMVFrZ3NTMEZCZGtJc1JVRkJPRUpETEV0QlFUbENMRVZCUVhGRE8wRkJRMnBETEZGQlFVa3ZSeXhUUVVGVE9FY3NUVUZCVFRsSExFMUJRVzVDTzBGQlEwRXNVVUZCU1N0SExGRkJRVkVzUTBGQlVpeEpRVUZoUVN4VFFVRlRMMGNzVFVGQk1VSXNSVUZCYTBNN1FVRkRPVUk3UVVGRFNEdEJRVU5FT0Vjc1ZVRkJUVU1zUzBGQlRpeEpRVUZsUkN4TlFVRk5PVWNzVTBGQlV5eERRVUZtTEVOQlFXWTdRVUZEUVRoSExGVkJRVTA1Unl4TlFVRk9MRWRCUVdWQkxGTkJRVk1zUTBGQmVFSTdRVUZEU0RzN1FVRkZSRHM3T3pzN096dEJRVTlCTEZOQlFWTnJTQ3hOUVVGVUxFTkJRV2xDU2l4TFFVRnFRaXhGUVVGM1FpOUdMRXRCUVhoQ0xFVkJRU3RDTzBGQlF6TkNMRkZCUVVsblJ5eFJRVUZSUkN4TlFVRk5TeXhQUVVGT0xFTkJRV053Unl4TFFVRmtMRU5CUVZvN1FVRkRRU3hSUVVGSlowY3NVMEZCVXl4RFFVRmlMRVZCUVdkQ08wRkJRMXBHTEdsQ1FVRlRReXhMUVVGVUxFVkJRV2RDUXl4TFFVRm9RanRCUVVOQkxHVkJRVThzU1VGQlVEdEJRVU5JTEV0QlNFUXNUVUZKU3p0QlFVTkVMR1ZCUVU4c1MwRkJVRHRCUVVOSU8wRkJRMG83TzBGQlJVUTdPenM3T3pzN1FVRlBRU3hUUVVGVFN5eFZRVUZVTEVOQlFYRkNUaXhMUVVGeVFpeEZRVUUwUWk5R0xFdEJRVFZDTEVWQlFXMURPMEZCUXk5Q0xGRkJRVWxuUnl4UlFVRlJSQ3hOUVVGTlN5eFBRVUZPTEVOQlFXTndSeXhMUVVGa0xFTkJRVm83UVVGRFFTeFJRVUZKWjBjc1UwRkJVeXhEUVVGaUxFVkJRV2RDTzBGQlExcEVMR05CUVUxRExFdEJRVTRzU1VGQlpVUXNUVUZCVFVFc1RVRkJUVGxITEUxQlFVNHNSMEZCWlN4RFFVRnlRaXhEUVVGbU8wRkJRMEVzVlVGQlJUaEhMRTFCUVUwNVJ5eE5RVUZTTzBGQlEwZzdRVUZEU2pzN1FVRkZSRHM3T3pzN096dEJRVTlCTEZOQlFWTnhTQ3hWUVVGVUxFTkJRWEZDVUN4TFFVRnlRaXhGUVVFMFFsRXNTVUZCTlVJc1JVRkJhME03UVVGRE9VSXNVVUZCU1ZJc1UwRkJVMEVzVFVGQlRUbEhMRTFCUVU0c1IwRkJaU3hEUVVFMVFpeEZRVUVyUWp0QlFVTXpRaXhoUVVGTExFbEJRVWxFTEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNTdEhMRTFCUVUwNVJ5eE5RVUV4UWl4RlFVRnJRMFFzUjBGQmJFTXNSVUZCZFVNN1FVRkRia01zWjBKQlFVa3NSVUZCUlN0SExFMUJRVTB2Unl4RFFVRk9MR0ZCUVhGQ2RVZ3NTVUZCZGtJc1EwRkJTaXhGUVVGclF6dEJRVU01UW5CSUxHMUNRVUZIY1Vnc1MwRkJTQ3hEUVVGVExFbEJRVlE3UVVGRFFTeDFRa0ZCVHl4TFFVRlFPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMFFzVjBGQlR5eEpRVUZRTzBGQlEwZzdPMEZCUlVRN096czdPenRCUVUxQkxGTkJRVk5ETEZkQlFWUXNRMEZCYzBKV0xFdEJRWFJDTEVWQlFUWkNWeXhSUVVFM1FpeEZRVUYxUXp0QlFVTnVReXhUUVVGTExFbEJRVWt4U0N4SlFVRkpMRU5CUVZJc1JVRkJWekpJTEVsQlFVbEVMRk5CUVZONlNDeE5RVUUzUWl4RlFVRnhRMFFzU1VGQlNUSklMRU5CUVhwRExFVkJRVFJETTBnc1IwRkJOVU1zUlVGQmFVUTdRVUZETjBOdFNDeGxRVUZQU2l4TFFVRlFMRVZCUVdOWExGTkJRVk14U0N4RFFVRlVMRU5CUVdRN1FVRkRTRHRCUVVOS096dEJRVVZFT3pzN096czdPenRCUVZGQkxGTkJRVk0wU0N4bFFVRlVMRU5CUVRCQ1lpeExRVUV4UWl4RlFVRnBRMk1zVDBGQmFrTXNSVUZCTUVOaUxFdEJRVEZETEVWQlFXbEVPMEZCUXpkRFJDeFZRVUZOUlN4TlFVRk9MRU5CUVdGaExFdEJRV0lzUTBGQmJVSm1MRXRCUVc1Q0xFVkJRVEJDTEVOQlFVTkRMRXRCUVVRc1JVRkJVU3hEUVVGU0xFVkJRVmRsTEUxQlFWZ3NRMEZCYTBKR0xFOUJRV3hDTEVOQlFURkNPMEZCUTBFc1YwRkJUMlFzUzBGQlVEdEJRVU5JT3p0QlFVVkVPenM3T3pzN096czdPMEZCVlVFc1NVRkJTVXNzVlVGQlZWb3NUVUZCVFRkR0xGTkJRVTRzUTBGQlowSjVSeXhQUVVFNVFqczdRVUZGUVRzN096czdPenRCUVU5QkxGTkJRVk5aTEZGQlFWUXNRMEZCYlVKcVFpeExRVUZ1UWl4RlFVRXdRaTlHTEV0QlFURkNMRVZCUVdsRE8wRkJRemRDTEZkQlFVOHJSaXhOUVVGTlN5eFBRVUZPTEVOQlFXTndSeXhMUVVGa0xFdEJRWGRDTEVOQlFTOUNPMEZCUTBnN08wRkJSVVE3T3pzN096dEJRVTFCTEZOQlFWTnBTQ3hKUVVGVUxFTkJRV1ZzUWl4TFFVRm1MRVZCUVhOQ08wRkJRMnhDTEZGQlFVa3ZSeXhEUVVGS08wRkJRVUVzVVVGQlQzTkhMRTFCUVUxVExFMUJRVTA1Unl4TlFVRnVRanRCUVVGQkxGRkJRVEpDYVVrc1dVRkJXU3hKUVVGSk1VSXNTMEZCU2l4RFFVRlZSaXhIUVVGV0xFTkJRWFpETzBGQlEwRXNVMEZCUzNSSExFbEJRVWtzUTBGQlZDeEZRVUZaUVN4SlFVRkpjMGNzUjBGQmFFSXNSVUZCY1VKMFJ5eExRVUZMTEVOQlFURkNPMEZCUTBsclNTeHJRa0ZCVld4SkxFTkJRVllzU1VGQlpTdEhMRTFCUVUwdlJ5eERRVUZPTEVOQlFXWTdRVUZFU2l4TFFVVkJMRTlCUVU5clNTeFRRVUZRTzBGQlEwZzdPMEZCUlVSNFNTeEhRVUZIY1Vnc1MwRkJTQ3hIUVVGWE8wRkJRMUJKTEd0Q1FVUlBPMEZCUlZCRkxEQkNRVVpQTzBGQlIxQlFMSE5DUVVoUE8wRkJTVkJKTERoQ1FVcFBPMEZCUzFCakxITkNRVXhQTzBGQlRWQldMREJDUVU1UE8wRkJUMUJITERSQ1FWQlBPMEZCVVZCSExHOURRVkpQTzBGQlUxQkxMR05CVkU4N1FVRlZVR0lzYjBKQlZrODdRVUZYVUdVc05FSkJRWGRDY2tvc1VVRkJVU3h0UTBGQlVqdEJRVmhxUWl4RFFVRllPenRCUVdOQk96dEJRVVZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRV3RFUVRzN096czdPenM3T3pzN096czdRVUZqUVN4VFFVRlRjMG9zU1VGQlZDeERRVUZsUXl4WFFVRm1MRVZCUVRSQ1F5eEpRVUUxUWl4RlFVRnJRenRCUVVNNVFpeFJRVUZKUVN4VFFVRlRkRWNzVTBGQllpeEZRVUYzUWp0QlFVTndRbk5ITEdWQlFVOUVMRmRCUVZBN1FVRkRRVUVzYzBKQlFXTXNTVUZCWkR0QlFVTklPMEZCUTBRc1UwRkJTMnBITEVkQlFVd3NSMEZCVnl4SlFVRllPMEZCUTBFc1UwRkJTMjFITEV0QlFVd3NSMEZCWVN4RFFVRmlPMEZCUTBFc1UwRkJTME1zUzBGQlRDeEhRVUZoTEVsQlFVbG9ReXhMUVVGS0xFTkJRVlU0UWl4SlFVRldMRU5CUVdJN1FVRkRRU3hUUVVGTFJ5eFJRVUZNTEVkQlFXZENTaXhYUVVGb1FqdEJRVU5JT3p0QlFVVkVPenM3T3pzN096czdPMEZCVlVFN096czdPenM3T3pzN1FVRlZRVHM3T3pzN096czdRVUZSUVVRc1MwRkJTM3BJTEZOQlFVd3NRMEZCWlN0SUxFbEJRV1lzUjBGQmMwSXNXVUZCV1R0QlFVTTVRaXhSUVVGSkxFdEJRVXRJTEV0QlFVd3NSMEZCWVN4RFFVRnFRaXhGUVVGdlFqdEJRVU5vUWl4VlFVRkZMRXRCUVV0QkxFdEJRVkE3UVVGRFFTeFpRVUZKU1N4UlFVRlJMRXRCUVV0SUxFdEJRVXdzUTBGQlZ5eExRVUZMUkN4TFFVRm9RaXhEUVVGYU8wRkJRMEVzWVVGQlMwTXNTMEZCVEN4RFFVRlhMRXRCUVV0RUxFdEJRV2hDTEVsQlFYbENMRWxCUVhwQ08wRkJRMEVzWlVGQlQwa3NTMEZCVUR0QlFVTklPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGU1JEczdRVUZWUVRzN096czdRVUZMUVZBc1MwRkJTM3BJTEZOQlFVd3NRMEZCWldsSkxFZEJRV1lzUjBGQmNVSXNWVUZCVlRWS0xFZEJRVllzUlVGQlpUdEJRVU5vUXl4UlFVRkpOa29zVDBGQlR5eExRVUZMVEN4TFFVRm9RanRCUVVOQkxGRkJRVWtzUzBGQlMwUXNTMEZCVEN4SFFVRmhUU3hMUVVGTE5Va3NUVUZCZEVJc1JVRkJPRUk3UVVGRE1VSXNXVUZCU1N4TFFVRkxkMGtzVVVGQlRDeEpRVUZwUWl4TFFVRkxRU3hSUVVGTUxFTkJRV042U2l4SFFVRmtMRTFCUVhWQ0xFdEJRVFZETEVWQlFXMUVPMEZCUXk5RE8wRkJRMGc3UVVGRFJEWktMR0ZCUVVzc1MwRkJTMDRzUzBGQlZpeEpRVUZ0UW5aS0xFZEJRVzVDTzBGQlEwRXNWVUZCUlN4TFFVRkxkVW9zUzBGQlVEdEJRVU5JTzBGQlEwb3NRMEZVUkRzN1FVRlhRVHM3T3pzN1FVRkxRVWdzUzBGQlMzcElMRk5CUVV3c1EwRkJaVzFKTEUxQlFXWXNSMEZCZDBJc1ZVRkJWVGRKTEUxQlFWWXNSVUZCYTBJN1FVRkRkRU1zVVVGQlNVRXNWVUZCVlN4RFFVRmtMRVZCUVdsQ08wRkJRMklzWVVGQlMzVkpMRXRCUVV3c1EwRkJWM1pKTEUxQlFWZ3NSMEZCYjBKQkxFMUJRWEJDTzBGQlEwRXNXVUZCU1N4TFFVRkxjMGtzUzBGQlRDeEhRVUZoZEVrc1RVRkJha0lzUlVGQmVVSTdRVUZEY2tJc2FVSkJRVXR6U1N4TFFVRk1MRWRCUVdGMFNTeE5RVUZpTzBGQlEwZzdRVUZEU2p0QlFVTktMRU5CVUVRN08wRkJVMEZRTEVkQlFVY3dTU3hKUVVGSUxFZEJRVlZCTEVsQlFWWTdPMEZCUlVFN08wRkJSVUZxU1N4SFFVRkhWQ3hGUVVGSUxFZEJRVkZCTEVWQlFWSTdPMEZCUlVGeFNpeFBRVUZQUXl4UFFVRlFMRWRCUVdsQ2RFb3NSVUZCYWtJN08wRkJSVUU3UVVGRFFTSXNJbVpwYkdVaU9pSnFjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURBNExUSXdNVEFnVW1sallYSmtieUJSZFdWellXUmhYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREV4TFRJd01USWdZMjlqYjNNeVpDMTRMbTl5WjF4dUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE15MHlNREUySUVOb2RXdHZibWNnVkdWamFHNXZiRzluYVdWeklFbHVZeTVjYmlCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRjdE1qQXhPQ0JZYVdGdFpXNGdXV0ZxYVNCVGIyWjBkMkZ5WlNCRGJ5NHNJRXgwWkM1Y2JseHVJR2gwZEhBNkx5OTNkM2N1WTI5amIzTXlaQzE0TG05eVoxeHVYRzRnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0VnWTI5d2VWeHVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pHOWpkVzFsYm5SaGRHbHZiaUJtYVd4bGN5QW9kR2hsSUZ3aVUyOW1kSGRoY21WY0lpa3NJSFJ2SUdSbFlXeGNiaUJwYmlCMGFHVWdVMjltZEhkaGNtVWdkMmwwYUc5MWRDQnlaWE4wY21samRHbHZiaXdnYVc1amJIVmthVzVuSUhkcGRHaHZkWFFnYkdsdGFYUmhkR2x2YmlCMGFHVWdjbWxuYUhSelhHNGdkRzhnZFhObExDQmpiM0I1TENCdGIyUnBabmtzSUcxbGNtZGxMQ0J3ZFdKc2FYTm9MQ0JrYVhOMGNtbGlkWFJsTENCemRXSnNhV05sYm5ObExDQmhibVF2YjNJZ2MyVnNiRnh1SUdOdmNHbGxjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXNJR0Z1WkNCMGJ5QndaWEp0YVhRZ2NHVnljMjl1Y3lCMGJ5QjNhRzl0SUhSb1pTQlRiMlowZDJGeVpTQnBjMXh1SUdaMWNtNXBjMmhsWkNCMGJ5QmtieUJ6Ynl3Z2MzVmlhbVZqZENCMGJ5QjBhR1VnWm05c2JHOTNhVzVuSUdOdmJtUnBkR2x2Ym5NNlhHNWNiaUJVYUdVZ1lXSnZkbVVnWTI5d2VYSnBaMmgwSUc1dmRHbGpaU0JoYm1RZ2RHaHBjeUJ3WlhKdGFYTnphVzl1SUc1dmRHbGpaU0J6YUdGc2JDQmlaU0JwYm1Oc2RXUmxaQ0JwYmx4dUlHRnNiQ0JqYjNCcFpYTWdiM0lnYzNWaWMzUmhiblJwWVd3Z2NHOXlkR2x2Ym5NZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTGx4dVhHNGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVeUJQVWx4dUlFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWWdUVVZTUTBoQlRsUkJRa2xNU1ZSWkxGeHVJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlZ4dUlFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZKY2JpQk1TVUZDU1V4SlZGa3NJRmRJUlZSSVJWSWdTVTRnUVU0Z1FVTlVTVTlPSUU5R0lFTlBUbFJTUVVOVUxDQlVUMUpVSUU5U0lFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTEZ4dUlFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSU0JWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNWNiaUJVU0VVZ1UwOUdWRmRCVWtVdVhHNGdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVZMjl1YzNRZ2RHVnRjRU5KUkVkbGJtVnlZWFJsY2lBOUlHNWxkeUFvY21WeGRXbHlaU2duTGk5cFpDMW5aVzVsY21GMFpYSW5LU2tvSjFSdGNFTkpaQzRuS1R0Y2JseHVYRzVtZFc1amRHbHZiaUJmWjJWMFVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlDaHZZbW9zSUc1aGJXVXBJSHRjYmlBZ0lDQjNhR2xzWlNBb2IySnFLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQndaQ0E5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9iMkpxTENCdVlXMWxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIQmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NHUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYjJKcUlEMGdUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0c5aWFpazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVmVnh1WEc1bWRXNWpkR2x2YmlCZlkyOXdlWEJ5YjNBb2JtRnRaU3dnYzI5MWNtTmxMQ0IwWVhKblpYUXBJSHRjYmlBZ0lDQjJZWElnY0dRZ1BTQmZaMlYwVUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0hOdmRYSmpaU3dnYm1GdFpTazdYRzRnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSFJoY21kbGRDd2dibUZ0WlN3Z2NHUXBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGUm9hWE1nYlc5a2RXeGxJSEJ5YjNacFpHVnpJSE52YldVZ1NtRjJZVk5qY21sd2RDQjFkR2xzYVhScFpYTXVYRzRnS2lCQmJHd2diV1Z0WW1WeWN5QmpZVzRnWW1VZ1lXTmpaWE56WldRZ2QybDBhQ0JjSW1OakxtcHpYQ0l1WEc0Z0tpQkFjM1ZpYlc5a2RXeGxJR3B6WEc0Z0tpQkFiVzlrZFd4bElHcHpYRzRnS2k5Y2JuWmhjaUJxY3lBOUlIdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5vWldOcklIUm9aU0J2WW1vZ2QyaGxkR2hsY2lCcGN5QnVkVzFpWlhJZ2IzSWdibTkwWEc0Z0lDQWdJQ29nU1dZZ1lTQnVkVzFpWlhJZ2FYTWdZM0psWVhSbFpDQmllU0IxYzJsdVp5QW5ibVYzSUU1MWJXSmxjaWd4TURBNE5pa25MQ0IwYUdVZ2RIbHdaVzltSUdsMElIZHBiR3dnWW1VZ1hDSnZZbXBsWTNSY0lpNHVMbHh1SUNBZ0lDQXFJRlJvWlc0Z2VXOTFJR05oYmlCMWMyVWdkR2hwY3lCbWRXNWpkR2x2YmlCcFppQjViM1VnWTJGeVpTQmhZbTkxZENCMGFHbHpJR05oYzJVdVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCcGMwNTFiV0psY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3S24wZ2IySnFYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdlMEp2YjJ4bFlXNTlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FYTk9kVzFpWlhJNklHWjFibU4wYVc5dUtHOWlhaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhsd1pXOW1JRzlpYWlBOVBUMGdKMjUxYldKbGNpY2dmSHdnYjJKcUlHbHVjM1JoYm1ObGIyWWdUblZ0WW1WeU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRhR1ZqYXlCMGFHVWdiMkpxSUhkb1pYUm9aWElnYVhNZ2MzUnlhVzVuSUc5eUlHNXZkQzVjYmlBZ0lDQWdLaUJKWmlCaElITjBjbWx1WnlCcGN5QmpjbVZoZEdWa0lHSjVJSFZ6YVc1bklDZHVaWGNnVTNSeWFXNW5LRndpWW14aFlteGhYQ0lwSnl3Z2RHaGxJSFI1Y0dWdlppQnBkQ0IzYVd4c0lHSmxJRndpYjJKcVpXTjBYQ0l1TGk1Y2JpQWdJQ0FnS2lCVWFHVnVJSGx2ZFNCallXNGdkWE5sSUhSb2FYTWdablZ1WTNScGIyNGdhV1lnZVc5MUlHTmhjbVVnWVdKdmRYUWdkR2hwY3lCallYTmxMbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdhWE5UZEhKcGJtZGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2V5cDlJRzlpYWx4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2x6VTNSeWFXNW5PaUJtZFc1amRHbHZiaWh2WW1vcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmlCdlltb2dQVDA5SUNkemRISnBibWNuSUh4OElHOWlhaUJwYm5OMFlXNWpaVzltSUZOMGNtbHVaenRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTI5d2VTQmhiR3dnY0hKdmNHVnlkR2xsY3lCdWIzUWdaR1ZtYVc1bFpDQnBiaUJ2WW1vZ1puSnZiU0JoY21kMWJXVnVkSE5iTVM0dUxtNWRYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQmhaR1J2Ymx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2WW1vZ2IySnFaV04wSUhSdklHVjRkR1Z1WkNCcGRITWdjSEp2Y0dWeWRHbGxjMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQXVMaTV6YjNWeVkyVlBZbW9nYzI5MWNtTmxJRzlpYW1WamRDQjBieUJqYjNCNUlIQnliM0JsY25ScFpYTWdabkp2YlZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDBnZEdobElISmxjM1ZzZENCdlltcGNiaUFnSUNBZ0tpOWNiaUFnSUNCaFpHUnZiam9nWm5WdVkzUnBiMjRnS0c5aWFpa2dlMXh1SUNBZ0lDQWdJQ0FuZFhObElITjBjbWxqZENjN1hHNGdJQ0FnSUNBZ0lHOWlhaUE5SUc5aWFpQjhmQ0I3ZlR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREVzSUd4bGJtZDBhQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrZ1BDQnNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOdmRYSmpaU0E5SUdGeVozVnRaVzUwYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpiM1Z5WTJVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSE52ZFhKalpTQWhQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11WlhKeWIzSkpSQ2cxTkRBeUxDQnpiM1Z5WTJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDZ2dkbUZ5SUc1aGJXVWdhVzRnYzI5MWNtTmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dnSVNodVlXMWxJR2x1SUc5aWFpa2dLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmWTI5d2VYQnliM0FvSUc1aGJXVXNJSE52ZFhKalpTd2diMkpxS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiMkpxTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCamIzQjVJR0ZzYkNCd2NtOXdaWEowYVdWeklHWnliMjBnWVhKbmRXMWxiblJ6V3pFdUxpNXVYU0IwYnlCdlltcGNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHMXBlR2x1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzlpYWx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0F1TGk1emIzVnlZMlZQWW1wY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0UFltcGxZM1I5SUhSb1pTQnlaWE4xYkhRZ2IySnFYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JXbDRhVzQ2SUdaMWJtTjBhVzl1SUNodlltb3BJSHRjYmlBZ0lDQWdJQ0FnSjNWelpTQnpkSEpwWTNRbk8xeHVJQ0FnSUNBZ0lDQnZZbW9nUFNCdlltb2dmSHdnZTMwN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F4TENCc1pXNW5kR2dnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lCcElEd2diR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCemIzVnlZMlVnUFNCaGNtZDFiV1Z1ZEhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMjkxY21ObEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ6YjNWeVkyVWdJVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG1WeWNtOXlTVVFvTlRRd015d2djMjkxY21ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9JSFpoY2lCdVlXMWxJR2x1SUhOdmRYSmpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZZMjl3ZVhCeWIzQW9JRzVoYldVc0lITnZkWEpqWlN3Z2IySnFLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzlpYWp0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JHVnlhWFpsSUhSb1pTQmpiR0Z6Y3lCbWNtOXRJSFJvWlNCemRYQndiR2xsWkNCaVlYTmxJR05zWVhOekxseHVJQ0FnSUNBcUlFSnZkR2dnWTJ4aGMzTmxjeUJoY21VZ2FuVnpkQ0J1WVhScGRtVWdhbUYyWVhOamNtbHdkQ0JqYjI1emRISjFZM1J2Y25Nc0lHNXZkQ0JqY21WaGRHVmtJR0o1SUdOakxrTnNZWE56TENCemIxeHVJQ0FnSUNBcUlIVnpkV0ZzYkhrZ2VXOTFJSGRwYkd3Z2QyRnVkQ0IwYnlCcGJtaGxjbWwwSUhWemFXNW5JSHQ3STJOeWIzTnpUR2x1YXlCY0ltTmpMME5zWVhOek9tMWxkR2h2WkZ3aWZYMWpZeTVEYkdGemN5QjdleTlqY205emMweHBibXQ5ZlNCcGJuTjBaV0ZrTGx4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWlhoMFpXNWtYRzRnSUNBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdZMnh6WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWW1GelpTQXRJSFJvWlNCaVlYTmxZMnhoYzNNZ2RHOGdhVzVvWlhKcGRGeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwWjFibU4wYVc5dWZTQjBhR1VnY21WemRXeDBJR05zWVhOelhHNGdJQ0FnSUNvdlhHNGdJQ0FnWlhoMFpXNWtPaUJtZFc1amRHbHZiaUFvWTJ4ekxDQmlZWE5sS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hEUTE5RVJWWXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWW1GelpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG1WeWNtOXlTVVFvTlRRd05DazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGamJITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWXk1bGNuSnZja2xFS0RVME1EVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoUFltcGxZM1F1YTJWNWN5aGpiSE11Y0hKdmRHOTBlWEJsS1M1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11WlhKeWIzSkpSQ2cxTkRBMktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQndJR2x1SUdKaGMyVXBJR2xtSUNoaVlYTmxMbWhoYzA5M2JsQnliM0JsY25SNUtIQXBLU0JqYkhOYmNGMGdQU0JpWVhObFczQmRPMXh1SUNBZ0lDQWdJQ0JqYkhNdWNISnZkRzkwZVhCbElEMGdUMkpxWldOMExtTnlaV0YwWlNoaVlYTmxMbkJ5YjNSdmRIbHdaU3dnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNSeWRXTjBiM0k2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWTJ4ekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOc2N6dGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwSUhOMWNHVnlJR05zWVhOelhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCblpYUlRkWEJsY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdOMGIzSWdMU0IwYUdVZ1kyOXVjM1J5ZFdOMGIzSWdiMllnYzNWaVkyeGhjM05jYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRHZFc1amRHbHZibjFjYmlBZ0lDQWdLaTljYmlBZ0lDQm5aWFJUZFhCbGNpQW9ZM1J2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY0hKdmRHOGdQU0JqZEc5eUxuQnliM1J2ZEhsd1pUc2dMeThnWW1sdVpHVmtJR1oxYm1OMGFXOXVJR1J2SUc1dmRDQm9ZWFpsSUhCeWIzUnZkSGx3WlZ4dUlDQWdJQ0FnSUNCMllYSWdaSFZ1WkdWeVVISnZkRzhnUFNCd2NtOTBieUFtSmlCUFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWW9jSEp2ZEc4cE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pIVnVaR1Z5VUhKdmRHOGdKaVlnWkhWdVpHVnlVSEp2ZEc4dVkyOXVjM1J5ZFdOMGIzSTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5vWldOcmN5QjNhR1YwYUdWeUlITjFZbU5zWVhOeklHbHpJR05vYVd4a0lHOW1JSE4xY0dWeVkyeGhjM01nYjNJZ1pYRjFZV3h6SUhSdklITjFjR1Z5WTJ4aGMzTmNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2FYTkRhR2xzWkVOc1lYTnpUMlpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0J6ZFdKamJHRnpjMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJSE4xY0dWeVkyeGhjM05jYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRDYjI5c1pXRnVmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHbHpRMmhwYkdSRGJHRnpjMDltSUNoemRXSmpiR0Z6Y3l3Z2MzVndaWEpqYkdGemN5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2MzVmlZMnhoYzNNZ0ppWWdjM1Z3WlhKamJHRnpjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ6ZFdKamJHRnpjeUFoUFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjM1Z3WlhKamJHRnpjeUFoUFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoRFExOUVSVllwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11ZDJGeWJrbEVLRE0yTWpVc0lITjFjR1Z5WTJ4aGMzTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzNWaVkyeGhjM01nUFQwOUlITjFjR1Z5WTJ4aGMzTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvT3pzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkV0pqYkdGemN5QTlJR3B6TG1kbGRGTjFjR1Z5S0hOMVltTnNZWE56S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWE4xWW1Oc1lYTnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITjFZbU5zWVhOeklEMDlQU0J6ZFhCbGNtTnNZWE56S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsYlc5MlpYTWdZV3hzSUdWdWRXMWxjbUZpYkdVZ2NISnZjR1Z5ZEdsbGN5Qm1jbTl0SUc5aWFtVmpkRnh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdZMnhsWVhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTJGdWVYMGdiMkpxWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMnhsWVhJNklHWjFibU4wYVc5dUlDaHZZbW9wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR3RsZVhNZ1BTQlBZbXBsWTNRdWEyVjVjeWh2WW1vcE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3RsZVhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCdlltcGJhMlY1YzF0cFhWMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJobFkydHpJSGRvWlhSb1pYSWdiMkpxSUdseklHRnVJR1Z0Y0hSNUlHOWlhbVZqZEZ4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnYVhORmJYQjBlVTlpYW1WamRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1lXNTVmU0J2WW1vZ1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYVhORmJYQjBlVTlpYW1WamREb2dablZ1WTNScGIyNGdLRzlpYWlrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2IySnFLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWRsZENCd2NtOXdaWEowZVNCa1pYTmpjbWx3ZEc5eUlHbHVJRzlpYW1WamRDQmhibVFnWVd4c0lHbDBjeUJoYm1ObGMzUnZjbk5jYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEZCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2WW1wY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYm1GdFpWeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwOWlhbVZqZEgxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSUWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJNklGOW5aWFJRY205d1pYSjBlVVJsYzJOeWFYQjBiM0pjYm4wN1hHNWNibHh1ZG1GeUlIUnRjRlpoYkhWbFJHVnpZeUE5SUh0Y2JpQWdJQ0IyWVd4MVpUb2dkVzVrWldacGJtVmtMRnh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJR1poYkhObExGeHVJQ0FnSUhkeWFYUmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVmNibjA3WEc1Y2JpOHFLbHh1SUNvZ1JHVm1hVzVsSUhaaGJIVmxMQ0JxZFhOMElHaGxiSEFnZEc4Z1kyRnNiQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrdVBHSnlQbHh1SUNvZ1ZHaGxJR052Ym1acFozVnlZV0pzWlNCM2FXeHNJR0psSUhSeWRXVXVYRzRnS2lCQWJXVjBhRzlrSUhaaGJIVmxYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnYjJKcVhHNGdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdjSEp2Y0Z4dUlDb2dRSEJoY21GdElIdGhibmw5SUhaaGJIVmxYRzRnS2lCQWNHRnlZVzBnZTBKdmIyeGxZVzU5SUZ0M2NtbDBZV0pzWlQxbVlXeHpaVjFjYmlBcUlFQndZWEpoYlNCN1FtOXZiR1ZoYm4wZ1cyVnVkVzFsY21GaWJHVTlabUZzYzJWZFhHNGdLaTljYm1wekxuWmhiSFZsSUQwZ1puVnVZM1JwYjI0Z0tHOWlhaXdnY0hKdmNDd2dkbUZzZFdVc0lIZHlhWFJoWW14bExDQmxiblZ0WlhKaFlteGxLU0I3WEc0Z0lDQWdkRzF3Vm1Gc2RXVkVaWE5qTG5aaGJIVmxJRDBnZG1Gc2RXVTdYRzRnSUNBZ2RHMXdWbUZzZFdWRVpYTmpMbmR5YVhSaFlteGxJRDBnZDNKcGRHRmliR1U3WEc0Z0lDQWdkRzF3Vm1Gc2RXVkVaWE5qTG1WdWRXMWxjbUZpYkdVZ1BTQmxiblZ0WlhKaFlteGxPMXh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h2WW1vc0lIQnliM0FzSUhSdGNGWmhiSFZsUkdWell5azdYRzRnSUNBZ2RHMXdWbUZzZFdWRVpYTmpMblpoYkhWbElEMGdkVzVrWldacGJtVmtPMXh1ZlR0Y2JseHVkbUZ5SUhSdGNFZGxkRk5sZEVSbGMyTWdQU0I3WEc0Z0lDQWdaMlYwT2lCdWRXeHNMRnh1SUNBZ0lITmxkRG9nYm5Wc2JDeGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQm1ZV3h6WlN4Y2JuMDdYRzVjYmk4cUtseHVJQ29nUkdWbWFXNWxJR2RsZENCelpYUWdZV05qWlhOemIzSXNJR3AxYzNRZ2FHVnNjQ0IwYnlCallXeHNJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNndUxpNHBYRzRnS2lCQWJXVjBhRzlrSUdkbGRITmxkRnh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5aWFseHVJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSEJ5YjNCY2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR2RsZEhSbGNseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnVzNObGRIUmxjajF1ZFd4c1hWeHVJQ29nUUhCaGNtRnRJSHRDYjI5c1pXRnVmU0JiWlc1MWJXVnlZV0pzWlQxbVlXeHpaVjFjYmlBcUlFQndZWEpoYlNCN1FtOXZiR1ZoYm4wZ1cyTnZibVpwWjNWeVlXSnNaVDFtWVd4elpWMWNiaUFxTDF4dWFuTXVaMlYwYzJWMElEMGdablZ1WTNScGIyNGdLRzlpYWl3Z2NISnZjQ3dnWjJWMGRHVnlMQ0J6WlhSMFpYSXNJR1Z1ZFcxbGNtRmliR1VzSUdOdmJtWnBaM1Z5WVdKc1pTa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMlYwZEdWeUlDRTlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVWdQU0J6WlhSMFpYSTdYRzRnSUNBZ0lDQWdJSE5sZEhSbGNpQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQjlYRzRnSUNBZ2RHMXdSMlYwVTJWMFJHVnpZeTVuWlhRZ1BTQm5aWFIwWlhJN1hHNGdJQ0FnZEcxd1IyVjBVMlYwUkdWell5NXpaWFFnUFNCelpYUjBaWEk3WEc0Z0lDQWdkRzF3UjJWMFUyVjBSR1Z6WXk1bGJuVnRaWEpoWW14bElEMGdaVzUxYldWeVlXSnNaVHRjYmlBZ0lDQjBiWEJIWlhSVFpYUkVaWE5qTG1OdmJtWnBaM1Z5WVdKc1pTQTlJR052Ym1acFozVnlZV0pzWlR0Y2JpQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2IySnFMQ0J3Y205d0xDQjBiWEJIWlhSVFpYUkVaWE5qS1R0Y2JpQWdJQ0IwYlhCSFpYUlRaWFJFWlhOakxtZGxkQ0E5SUc1MWJHdzdYRzRnSUNBZ2RHMXdSMlYwVTJWMFJHVnpZeTV6WlhRZ1BTQnVkV3hzTzF4dWZUdGNibHh1ZG1GeUlIUnRjRWRsZEVSbGMyTWdQU0I3WEc0Z0lDQWdaMlYwT2lCdWRXeHNMRnh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJR1poYkhObExGeHVJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dabUZzYzJWY2JuMDdYRzVjYmk4cUtseHVJQ29nUkdWbWFXNWxJR2RsZENCaFkyTmxjM052Y2l3Z2FuVnpkQ0JvWld4d0lIUnZJR05oYkd3Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLQzR1TGlsY2JpQXFJRUJ0WlhSb2IyUWdaMlYwWEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ2IySnFYRzRnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnY0hKdmNGeHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWjJWMGRHVnlYRzRnS2lCQWNHRnlZVzBnZTBKdmIyeGxZVzU5SUZ0bGJuVnRaWEpoWW14bFBXWmhiSE5sWFZ4dUlDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQmJZMjl1Wm1sbmRYSmhZbXhsUFdaaGJITmxYVnh1SUNvdlhHNXFjeTVuWlhRZ1BTQm1kVzVqZEdsdmJpQW9iMkpxTENCd2NtOXdMQ0JuWlhSMFpYSXNJR1Z1ZFcxbGNtRmliR1VzSUdOdmJtWnBaM1Z5WVdKc1pTa2dlMXh1SUNBZ0lIUnRjRWRsZEVSbGMyTXVaMlYwSUQwZ1oyVjBkR1Z5TzF4dUlDQWdJSFJ0Y0VkbGRFUmxjMk11Wlc1MWJXVnlZV0pzWlNBOUlHVnVkVzFsY21GaWJHVTdYRzRnSUNBZ2RHMXdSMlYwUkdWell5NWpiMjVtYVdkMWNtRmliR1VnUFNCamIyNW1hV2QxY21GaWJHVTdYRzRnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRzlpYWl3Z2NISnZjQ3dnZEcxd1IyVjBSR1Z6WXlrN1hHNGdJQ0FnZEcxd1IyVjBSR1Z6WXk1blpYUWdQU0J1ZFd4c08xeHVmVHRjYmx4dWRtRnlJSFJ0Y0ZObGRFUmxjMk1nUFNCN1hHNGdJQ0FnYzJWME9pQnVkV3hzTEZ4dUlDQWdJR1Z1ZFcxbGNtRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nWm1Gc2MyVmNibjA3WEc1Y2JpOHFLbHh1SUNvZ1JHVm1hVzVsSUhObGRDQmhZMk5sYzNOdmNpd2dhblZ6ZENCb1pXeHdJSFJ2SUdOaGJHd2dUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0M0dUxpbGNiaUFxSUVCdFpYUm9iMlFnYzJWMFhHNGdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdiMkpxWEc0Z0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2NISnZjRnh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ2MyVjBkR1Z5WEc0Z0tpQkFjR0Z5WVcwZ2UwSnZiMnhsWVc1OUlGdGxiblZ0WlhKaFlteGxQV1poYkhObFhWeHVJQ29nUUhCaGNtRnRJSHRDYjI5c1pXRnVmU0JiWTI5dVptbG5kWEpoWW14bFBXWmhiSE5sWFZ4dUlDb3ZYRzVxY3k1elpYUWdQU0JtZFc1amRHbHZiaUFvYjJKcUxDQndjbTl3TENCelpYUjBaWElzSUdWdWRXMWxjbUZpYkdVc0lHTnZibVpwWjNWeVlXSnNaU2tnZTF4dUlDQWdJSFJ0Y0ZObGRFUmxjMk11YzJWMElEMGdjMlYwZEdWeU8xeHVJQ0FnSUhSdGNGTmxkRVJsYzJNdVpXNTFiV1Z5WVdKc1pTQTlJR1Z1ZFcxbGNtRmliR1U3WEc0Z0lDQWdkRzF3VTJWMFJHVnpZeTVqYjI1bWFXZDFjbUZpYkdVZ1BTQmpiMjVtYVdkMWNtRmliR1U3WEc0Z0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0c5aWFpd2djSEp2Y0N3Z2RHMXdVMlYwUkdWell5azdYRzRnSUNBZ2RHMXdVMlYwUkdWell5NXpaWFFnUFNCdWRXeHNPMXh1ZlR0Y2JseHVMeW9xWEc0Z0tpQkhaWFFnWTJ4aGMzTWdibUZ0WlNCdlppQjBhR1VnYjJKcVpXTjBMQ0JwWmlCdlltcGxZM1FnYVhNZ2FuVnpkQ0JoSUh0OUlDaGhibVFnZDJocFkyZ2dZMnhoYzNNZ2JtRnRaV1FnSjA5aWFtVmpkQ2NwTENCcGRDQjNhV3hzSUhKbGRIVnliaUJjSWx3aUxseHVJQ29nS0cxdlpHbG1hV1ZrSUdaeWIyMGdQR0VnYUhKbFpqMWNJbWgwZEhBNkx5OXpkR0ZqYTI5MlpYSm1iRzkzTG1OdmJTOXhkV1Z6ZEdsdmJuTXZNVEkwT1RVek1TOW9iM2N0ZEc4dFoyVjBMV0V0YW1GMllYTmpjbWx3ZEMxdlltcGxZM1J6TFdOc1lYTnpYQ0krZEdobElHTnZaR1VnWm5KdmJTQjBhR2x6SUhOMFlXTnJiM1psY21ac2IzY2djRzl6ZER3dllUNHBYRzRnS2lCQWJXVjBhRzlrSUdkbGRFTnNZWE56VG1GdFpWeHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjhSblZ1WTNScGIyNTlJRzlpYWs5eVEzUnZjaUF0SUdsdWMzUmhibU5sSUc5eUlHTnZibk4wY25WamRHOXlYRzRnS2lCQWNtVjBkWEp1SUh0VGRISnBibWQ5WEc0Z0tpOWNibXB6TG1kbGRFTnNZWE56VG1GdFpTQTlJR1oxYm1OMGFXOXVJQ2h2WW1wUGNrTjBiM0lwSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc5aWFrOXlRM1J2Y2lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjSEp2ZEc5MGVYQmxJRDBnYjJKcVQzSkRkRzl5TG5CeWIzUnZkSGx3WlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ5YjNSdmRIbHdaU0FtSmlCd2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGtvSjE5ZlkyeGhjM051WVcxbFgxOG5LU0FtSmlCd2NtOTBiM1I1Y0dVdVgxOWpiR0Z6YzI1aGJXVmZYeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnliM1J2ZEhsd1pTNWZYMk5zWVhOemJtRnRaVjlmTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlhSMllXd2dQU0FuSnp0Y2JpQWdJQ0FnSUNBZ0x5OGdJR1p2Y2lCaWNtOTNjMlZ5Y3lCM2FHbGphQ0JvWVhabElHNWhiV1VnY0hKdmNHVnlkSGtnYVc0Z2RHaGxJR052Ym5OMGNuVmpkRzl5SUc5bUlIUm9aU0J2WW1wbFkzUXNJSE4xWTJnZ1lYTWdZMmh5YjIxbFhHNGdJQ0FnSUNBZ0lHbG1JQ2h2WW1wUGNrTjBiM0l1Ym1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkbUZzSUQwZ2IySnFUM0pEZEc5eUxtNWhiV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLRzlpYWs5eVEzUnZjaTUwYjFOMGNtbHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdGeWNpd2djM1J5SUQwZ2IySnFUM0pEZEc5eUxuUnZVM1J5YVc1bktDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jM1J5TG1Ob1lYSkJkQ2d3S1NBOVBUMGdKMXNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjM1J5SUdseklGd2lXMjlpYW1WamRDQnZZbXBsWTNSRGJHRnpjMTFjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeWNpQTlJSE4wY2k1dFlYUmphQ2d2WEZ4YlhGeDNLMXhjY3lvb1hGeDNLeWxjWEYwdktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE4wY2lCcGN5Qm1kVzVqZEdsdmJpQnZZbXBsWTNSRGJHRnpjeUFvS1NCN2ZTQm1iM0lnU1VVZ1JtbHlaV1p2ZUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeWNpQTlJSE4wY2k1dFlYUmphQ2d2Wm5WdVkzUnBiMjVjWEhNcUtGeGNkeXNwTHlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVhKeUlDWW1JR0Z5Y2k1c1pXNW5kR2dnUFQwOUlESXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMllXd2dQU0JoY25KYk1WMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxkSFpoYkNBaFBUMGdKMDlpYW1WamRDY2dQeUJ5WlhSMllXd2dPaUFuSnp0Y2JpQWdJQ0I5WEc0Z0lDQWdaV3h6WlNCcFppQW9iMkpxVDNKRGRHOXlJQ1ltSUc5aWFrOXlRM1J2Y2k1amIyNXpkSEoxWTNSdmNpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhbk11WjJWMFEyeGhjM05PWVcxbEtHOWlhazl5UTNSdmNpNWpiMjV6ZEhKMVkzUnZjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlBbkp6dGNibjA3WEc1Y2JtWjFibU4wYVc5dUlHbHpWR1Z0Y0VOc1lYTnpTV1FnS0dsa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUJwWkNBaFBUMGdKM04wY21sdVp5Y2dmSHdnYVdRdWMzUmhjblJ6VjJsMGFDaDBaVzF3UTBsRVIyVnVaWEpoZEdWeUxuQnlaV1pwZUNrN1hHNTlYRzVjYmk4dklHbGtJT2F6cU9XR2pGeHVLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IyWVhJZ1gybGtWRzlEYkdGemN5QTlJSHQ5TzF4dUlDQWdJSFpoY2lCZmJtRnRaVlJ2UTJ4aGMzTWdQU0I3ZlR0Y2JseHVJQ0FnSUdaMWJtTjBhVzl1SUhObGRIVndJQ2hyWlhrc0lIQjFZbXhwWTA1aGJXVXNJSFJoWW14bEtTQjdYRzRnSUNBZ0lDQWdJR3B6TG1kbGRITmxkQ2hxY3l3Z2NIVmliR2xqVG1GdFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z2RHRmliR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHcHpMbU5zWldGeUtIUmhZbXhsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUFltcGxZM1F1WVhOemFXZHVLSFJoWW14bExDQjJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb2FXUXNJR052Ym5OMGNuVmpkRzl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCa1pYSmxaMmx6ZEdWeUlHOXNaRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR052Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElIUmhZbXhsVzJOdmJuTjBjblZqZEc5eUxuQnliM1J2ZEhsd1pWdHJaWGxkWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHcHpMblpoYkhWbEtHTnZibk4wY25WamRHOXlMbkJ5YjNSdmRIbHdaU3dnYTJWNUxDQnBaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ5WldkcGMzUmxjaUJqYkdGemMxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxaMmx6ZEdWeVpXUWdQU0IwWVdKc1pWdHBaRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxaMmx6ZEdWeVpXUWdKaVlnY21WbmFYTjBaWEpsWkNBaFBUMGdZMjl1YzNSeWRXTjBiM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWeWNtOXlJRDBnSjBFZ1EyeGhjM01nWVd4eVpXRmtlU0JsZUdsemRITWdkMmwwYUNCMGFHVWdjMkZ0WlNBbklDc2dhMlY1SUNzZ0p5QTZJRndpSnlBcklHbGtJQ3NnSjF3aUxpYzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaERRMTlVUlZOVUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2lBclBTQW5JQ2hVYUdseklHMWhlU0JpWlNCallYVnpaV1FnWW5rZ1pYSnliM0lnYjJZZ2RXNXBkQ0IwWlhOMExpa2dYRnhjYmtsbUlIbHZkU0JrYjI1MElHNWxaV1FnYzJWeWFXRnNhWHBoZEdsdmJpd2dlVzkxSUdOaGJpQnpaWFFnWTJ4aGMzTWdhV1FnZEc4Z1hDSmNJaTRnV1c5MUlHTmhiaUJoYkhOdklHTmhiR3dnWEZ4Y2JtTmpMbXB6TG5WdWNtVm5hWE4wWlhKRGJHRnpjeUIwYnlCeVpXMXZkbVVnZEdobElHbGtJRzltSUhWdWRYTmxaQ0JqYkdGemN5YzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11WlhKeWIzSW9aWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0ZpYkdWYmFXUmRJRDBnWTI5dWMzUnlkV04wYjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZhV1lnS0dsa0lEMDlQU0JjSWx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ1kyOXVjMjlzWlM1MGNtRmpaU2hjSWx3aUxDQjBZV0pzWlNBOVBUMGdYMjVoYldWVWIwTnNZWE56S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwzMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaV2RwYzNSbGNpQjBhR1VnWTJ4aGMzTWdZbmtnYzNCbFkybG1hV1ZrSUdsa0xDQnBaaUJwZEhNZ1kyeGhjM051WVcxbElHbHpJRzV2ZENCa1pXWnBibVZrTENCMGFHVWdZMnhoYzNNZ2JtRnRaU0IzYVd4c0lHRnNjMjhnWW1VZ2MyVjBMbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdYM05sZEVOc1lYTnpTV1JjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdZMnhoYzNOSlpGeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHTnZibk4wY25WamRHOXlYRzRnSUNBZ0lDb2dRSEJ5YVhaaGRHVmNiaUFnSUNBZ0tpOWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUVGc2JDQmpiR0Z6YzJWeklISmxaMmx6ZEdWeVpXUWdhVzRnZEdobElHVnVaMmx1WlN3Z2FXNWtaWGhsWkNCaWVTQkpSQzVjYmlBZ0lDQWdLaUFoSTNwb0lPVzhsZWFUanVTNHJlVzNzdWF6cU9XR2pPZWFoT2FKZ09hY2llZXh1K1dlaSsrOGpPbUFtdWkvaHlCSlJDRG92NXZvb1l6bnRLTGx2SlhqZ0lKY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ1gzSmxaMmx6ZEdWeVpXUkRiR0Z6YzBsa2MxeHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FnSUNvZ0x5OGdjMkYyWlNCaGJHd2djbVZuYVhOMFpYSmxaQ0JqYkdGemMyVnpJR0psWm05eVpTQnNiMkZrYVc1bklITmpjbWx3ZEhOY2JpQWdJQ0FnS2lCc1pYUWdZblZwYkhScGJrTnNZWE56U1dSeklEMGdZMk11YW5NdVgzSmxaMmx6ZEdWeVpXUkRiR0Z6YzBsa2N6dGNiaUFnSUNBZ0tpQnNaWFFnWW5WcGJIUnBia05zWVhOelRtRnRaWE1nUFNCall5NXFjeTVmY21WbmFYTjBaWEpsWkVOc1lYTnpUbUZ0WlhNN1hHNGdJQ0FnSUNvZ0x5OGdiRzloWkNCemIyMWxJSE5qY21sd2RITWdkR2hoZENCamIyNTBZV2x1SUVORFEyeGhjM05jYmlBZ0lDQWdLaUF1TGk1Y2JpQWdJQ0FnS2lBdkx5QmpiR1ZoY2lCaGJHd2diRzloWkdWa0lHTnNZWE56WlhOY2JpQWdJQ0FnS2lCall5NXFjeTVmY21WbmFYTjBaWEpsWkVOc1lYTnpTV1J6SUQwZ1luVnBiSFJwYmtOc1lYTnpTV1J6TzF4dUlDQWdJQ0FxSUdOakxtcHpMbDl5WldkcGMzUmxjbVZrUTJ4aGMzTk9ZVzFsY3lBOUlHSjFhV3gwYVc1RGJHRnpjMDVoYldWek8xeHVJQ0FnSUNBcUwxeHVJQ0FnSUdwekxsOXpaWFJEYkdGemMwbGtJRDBnYzJWMGRYQW9KMTlmWTJsa1gxOG5MQ0FuWDNKbFoybHpkR1Z5WldSRGJHRnpjMGxrY3ljc0lGOXBaRlJ2UTJ4aGMzTXBPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQkJiR3dnWTJ4aGMzTmxjeUJ5WldkcGMzUmxjbVZrSUdsdUlIUm9aU0JsYm1kcGJtVXNJR2x1WkdWNFpXUWdZbmtnYm1GdFpTNWNiaUFnSUNBZ0tpQWhJM3BvSU9XOGxlYVRqdVM0cmVXM3N1YXpxT1dHak9lYWhPYUpnT2FjaWVleHUrV2VpKys4ak9tQW11aS9oK1dRamVlbnNPaS9tK2loak9lMG91VzhsZU9BZ2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCZmNtVm5hWE4wWlhKbFpFTnNZWE56VG1GdFpYTmNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnSUNBcUlDOHZJSE5oZG1VZ1lXeHNJSEpsWjJsemRHVnlaV1FnWTJ4aGMzTmxjeUJpWldadmNtVWdiRzloWkdsdVp5QnpZM0pwY0hSelhHNGdJQ0FnSUNvZ2JHVjBJR0oxYVd4MGFXNURiR0Z6YzBsa2N5QTlJR05qTG1wekxsOXlaV2RwYzNSbGNtVmtRMnhoYzNOSlpITTdYRzRnSUNBZ0lDb2diR1YwSUdKMWFXeDBhVzVEYkdGemMwNWhiV1Z6SUQwZ1kyTXVhbk11WDNKbFoybHpkR1Z5WldSRGJHRnpjMDVoYldWek8xeHVJQ0FnSUNBcUlDOHZJR3h2WVdRZ2MyOXRaU0J6WTNKcGNIUnpJSFJvWVhRZ1kyOXVkR0ZwYmlCRFEwTnNZWE56WEc0Z0lDQWdJQ29nTGk0dVhHNGdJQ0FnSUNvZ0x5OGdZMnhsWVhJZ1lXeHNJR3h2WVdSbFpDQmpiR0Z6YzJWelhHNGdJQ0FnSUNvZ1kyTXVhbk11WDNKbFoybHpkR1Z5WldSRGJHRnpjMGxrY3lBOUlHSjFhV3gwYVc1RGJHRnpjMGxrY3p0Y2JpQWdJQ0FnS2lCall5NXFjeTVmY21WbmFYTjBaWEpsWkVOc1lYTnpUbUZ0WlhNZ1BTQmlkV2xzZEdsdVEyeGhjM05PWVcxbGN6dGNiaUFnSUNBZ0tpOWNiaUFnSUNCMllYSWdaRzlUWlhSRGJHRnpjMDVoYldVZ1BTQnpaWFIxY0NnblgxOWpiR0Z6YzI1aGJXVmZYeWNzSUNkZmNtVm5hWE4wWlhKbFpFTnNZWE56VG1GdFpYTW5MQ0JmYm1GdFpWUnZRMnhoYzNNcE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVZuYVhOMFpYSWdkR2hsSUdOc1lYTnpJR0o1SUhOd1pXTnBabWxsWkNCdVlXMWxJRzFoYm5WaGJHeDVYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnpaWFJEYkdGemMwNWhiV1ZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdZMnhoYzNOT1lXMWxYRzRnSUNBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdZMjl1YzNSeWRXTjBiM0pjYmlBZ0lDQWdLaTljYmlBZ0lDQnFjeTV6WlhSRGJHRnpjMDVoYldVZ1BTQm1kVzVqZEdsdmJpQW9ZMnhoYzNOT1lXMWxMQ0JqYjI1emRISjFZM1J2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQmtiMU5sZEVOc1lYTnpUbUZ0WlNoamJHRnpjMDVoYldVc0lHTnZibk4wY25WamRHOXlLVHRjYmlBZ0lDQWdJQ0FnTHk4Z1lYVjBieUJ6WlhRZ1kyeGhjM01nYVdSY2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZqYjI1emRISjFZM1J2Y2k1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGtvSjE5ZlkybGtYMThuS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHbGtJRDBnWTJ4aGMzTk9ZVzFsSUh4OElIUmxiWEJEU1VSSFpXNWxjbUYwWlhJdVoyVjBUbVYzU1dRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdwekxsOXpaWFJEYkdGemMwbGtLR2xrTENCamIyNXpkSEoxWTNSdmNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWVzV5WldkcGMzUmxjaUJoSUdOc1lYTnpJR1p5YjIwZ1ptbHlaV0poYkd3dVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCSlppQjViM1VnWkc5dWRDQnVaV1ZrSUdFZ2NtVm5hWE4wWlhKbFpDQmpiR0Z6Y3lCaGJubHRiM0psTENCNWIzVWdjMmh2ZFd4a0lIVnVjbVZuYVhOMFpYSWdkR2hsSUdOc1lYTnpJSE52SUhSb1lYUWdSbWx5WldKaGJHd2dkMmxzYkNCdWIzUWdhMlZsY0NCcGRITWdjbVZtWlhKbGJtTmxJR0Z1ZVcxdmNtVXVYRzRnSUNBZ0lDb2dVR3hsWVhObElHNXZkR1VnZEdoaGRDQnBkSE1nYzNScGJHd2dlVzkxY2lCeVpYTndiMjV6YVdKcGJHbDBlU0IwYnlCbWNtVmxJRzkwYUdWeUlISmxabVZ5Wlc1alpYTWdkRzhnZEdobElHTnNZWE56TGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0IxYm5KbFoybHpkR1Z5UTJ4aGMzTmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQXVMaTVqYjI1emRISjFZM1J2Y2lBdElIUm9aU0JqYkdGemN5QjViM1VnZDJsc2JDQjNZVzUwSUhSdklIVnVjbVZuYVhOMFpYSXNJR0Z1ZVNCdWRXMWlaWElnYjJZZ1kyeGhjM05sY3lCallXNGdZbVVnWVdSa1pXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCcWN5NTFibkpsWjJsemRHVnlRMnhoYzNNZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY0NBOUlHRnlaM1Z0Wlc1MGMxdHBYUzV3Y205MGIzUjVjR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTJ4aGMzTkpaQ0E5SUhBdVgxOWphV1JmWHp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamJHRnpjMGxrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUY5cFpGUnZRMnhoYzNOYlkyeGhjM05KWkYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTJ4aGMzTnVZVzFsSUQwZ2NDNWZYMk5zWVhOemJtRnRaVjlmTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOc1lYTnpibUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCZmJtRnRaVlJ2UTJ4aGMzTmJZMnhoYzNOdVlXMWxYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhRZ2RHaGxJSEpsWjJsemRHVnlaV1FnWTJ4aGMzTWdZbmtnYVdSY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUY5blpYUkRiR0Z6YzBKNVNXUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ1kyeGhjM05KWkZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBaMWJtTjBhVzl1ZlNCamIyNXpkSEoxWTNSdmNseHVJQ0FnSUNBcUlFQndjbWwyWVhSbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYW5NdVgyZGxkRU5zWVhOelFubEpaQ0E5SUdaMWJtTjBhVzl1SUNoamJHRnpjMGxrS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmFXUlViME5zWVhOelcyTnNZWE56U1dSZE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFFnZEdobElISmxaMmx6ZEdWeVpXUWdZMnhoYzNNZ1lua2dibUZ0WlZ4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWjJWMFEyeGhjM05DZVU1aGJXVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ1kyeGhjM051WVcxbFhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1JuVnVZM1JwYjI1OUlHTnZibk4wY25WamRHOXlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FuTXVaMlYwUTJ4aGMzTkNlVTVoYldVZ1BTQm1kVzVqZEdsdmJpQW9ZMnhoYzNOdVlXMWxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmYm1GdFpWUnZRMnhoYzNOYlkyeGhjM051WVcxbFhUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwSUdOc1lYTnpJR2xrSUc5bUlIUm9aU0J2WW1wbFkzUmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lGOW5aWFJEYkdGemMwbGtYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOFJuVnVZM1JwYjI1OUlHOWlhaUF0SUdsdWMzUmhibU5sSUc5eUlHTnZibk4wY25WamRHOXlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQmJZV3hzYjNkVVpXMXdTV1E5ZEhKMVpWMGdMU0JqWVc0Z2NtVjBkWEp1SUhSbGJYQWdhV1FnYVc0Z1pXUnBkRzl5WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VTNSeWFXNW5mVnh1SUNBZ0lDQXFJRUJ3Y21sMllYUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FuTXVYMmRsZEVOc1lYTnpTV1FnUFNCbWRXNWpkR2x2YmlBb2IySnFMQ0JoYkd4dmQxUmxiWEJKWkNrZ2UxeHVJQ0FnSUNBZ0lDQmhiR3h2ZDFSbGJYQkpaQ0E5SUNoMGVYQmxiMllnWVd4c2IzZFVaVzF3U1dRZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z1lXeHNiM2RVWlcxd1NXUTZJSFJ5ZFdVcE8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTTdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYjJKcUlEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHOWlhaTV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa29KMTlmWTJsa1gxOG5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6SUQwZ2IySnFMbkJ5YjNSdmRIbHdaUzVmWDJOcFpGOWZPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZoYkd4dmQxUmxiWEJKWkNBbUppQW9RME5mUkVWV0lIeDhJRU5EWDBWRVNWUlBVaWtnSmlZZ2FYTlVaVzF3UTJ4aGMzTkpaQ2h5WlhNcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDY25PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsY3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYjJKcUlDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJ5YjNSdmRIbHdaU0E5SUc5aWFpNWpiMjV6ZEhKMVkzUnZjaTV3Y205MGIzUjVjR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0hKdmRHOTBlWEJsSUNZbUlIQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVNnblgxOWphV1JmWHljcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6SUQwZ2IySnFMbDlmWTJsa1gxODdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGaGJHeHZkMVJsYlhCSlpDQW1KaUFvUTBOZlJFVldJSHg4SUVORFgwVkVTVlJQVWlrZ0ppWWdhWE5VWlcxd1EyeGhjM05KWkNoeVpYTXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBbkp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdKeWM3WEc0Z0lDQWdmVHRjYm4wcEtDazdYRzVjYmk4cUtseHVJQ29nUkdWbWFXNWxjeUJoSUhCdmJIbG1hV3hzSUdacFpXeGtJR1p2Y2lCdlluTnZiR1YwWldRZ1kyOWtaWE11WEc0Z0tpQkFiV1YwYUc5a0lHOWljMjlzWlhSbFhHNGdLaUJBY0dGeVlXMGdlMkZ1ZVgwZ2IySnFJQzBnV1c5MWNrOWlhbVZqZENCdmNpQlpiM1Z5UTJ4aGMzTXVjSEp2ZEc5MGVYQmxYRzRnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYjJKemIyeGxkR1ZrSUMwZ1hDSlBiR1JRWVhKaGJWd2lJRzl5SUZ3aVdXOTFja05zWVhOekxrOXNaRkJoY21GdFhDSmNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J1WlhkRmVIQnlJQzBnWENKT1pYZFFZWEpoYlZ3aUlHOXlJRndpV1c5MWNrTnNZWE56TGs1bGQxQmhjbUZ0WENKY2JpQXFJRUJ3WVhKaGJTQjdRbTl2YkdWaGJuMGdXM2R5YVhSaFlteGxQV1poYkhObFhWeHVJQ292WEc1cWN5NXZZbk52YkdWMFpTQTlJR1oxYm1OMGFXOXVJQ2h2WW1vc0lHOWljMjlzWlhSbFpDd2dibVYzUlhod2Npd2dkM0pwZEdGaWJHVXBJSHRjYmlBZ0lDQjJZWElnWlhoMGNtRmpkRkJ5YjNCT1lXMWxJRDBnTHloYlhpNWRLeWtrTHp0Y2JpQWdJQ0IyWVhJZ2IyeGtVSEp2Y0NBOUlHVjRkSEpoWTNSUWNtOXdUbUZ0WlM1bGVHVmpLRzlpYzI5c1pYUmxaQ2xiTUYwN1hHNGdJQ0FnZG1GeUlHNWxkMUJ5YjNBZ1BTQmxlSFJ5WVdOMFVISnZjRTVoYldVdVpYaGxZeWh1WlhkRmVIQnlLVnN3WFR0Y2JpQWdJQ0JtZFc1amRHbHZiaUJuWlhRZ0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1EwTmZSRVZXS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1M1lYSnVTVVFvTlRRd01Dd2diMkp6YjJ4bGRHVmtMQ0J1WlhkRmVIQnlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGMxdHVaWGRRY205d1hUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIZHlhWFJoWW14bEtTQjdYRzRnSUNBZ0lDQWdJR3B6TG1kbGRITmxkQ2h2WW1vc0lHOXNaRkJ5YjNBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1EwTmZSRVZXS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG5kaGNtNUpSQ2cxTkRBeExDQnZZbk52YkdWMFpXUXNJRzVsZDBWNGNISXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdselcyNWxkMUJ5YjNCZElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnFjeTVuWlhRb2IySnFMQ0J2YkdSUWNtOXdMQ0JuWlhRcE8xeHVJQ0FnSUgxY2JuMDdYRzVjYmk4cUtseHVJQ29nUkdWbWFXNWxjeUJoYkd3Z2NHOXNlV1pwYkd3Z1ptbGxiR1J6SUdadmNpQnZZbk52YkdWMFpXUWdZMjlrWlhNZ1kyOXljbVZ6Y0c5dVpHbHVaeUIwYnlCMGFHVWdaVzUxYldWeVlXSnNaU0J3Y205d1pYSjBhV1Z6SUc5bUlIQnliM0J6TGx4dUlDb2dRRzFsZEdodlpDQnZZbk52YkdWMFpYTmNiaUFxSUVCd1lYSmhiU0I3WVc1NWZTQnZZbW9nTFNCWmIzVnlUMkpxWldOMElHOXlJRmx2ZFhKRGJHRnpjeTV3Y205MGIzUjVjR1ZjYmlBcUlFQndZWEpoYlNCN1lXNTVmU0J2WW1wT1lXMWxJQzBnWENKWmIzVnlUMkpxWldOMFhDSWdiM0lnWENKWmIzVnlRMnhoYzNOY0lseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSEJ5YjNCelhHNGdLaUJBY0dGeVlXMGdlMEp2YjJ4bFlXNTlJRnQzY21sMFlXSnNaVDFtWVd4elpWMWNiaUFxTDF4dWFuTXViMkp6YjJ4bGRHVnpJRDBnWm5WdVkzUnBiMjRnS0c5aWFpd2diMkpxVG1GdFpTd2djSEp2Y0hNc0lIZHlhWFJoWW14bEtTQjdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2IySnpiMnhsZEdWa0lHbHVJSEJ5YjNCektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdVpYZE9ZVzFsSUQwZ2NISnZjSE5iYjJKemIyeGxkR1ZrWFR0Y2JpQWdJQ0FnSUNBZ2FuTXViMkp6YjJ4bGRHVW9iMkpxTENCdlltcE9ZVzFsSUNzZ0p5NG5JQ3NnYjJKemIyeGxkR1ZrTENCdVpYZE9ZVzFsTENCM2NtbDBZV0pzWlNrN1hHNGdJQ0FnZlZ4dWZUdGNibHh1ZG1GeUlGSkZSMFZZVUY5T1ZVMWZUMUpmVTFSU0lEMGdMeWdsWkNsOEtDVnpLUzg3WEc1MllYSWdVa1ZIUlZoUVgxTlVVaUE5SUM4bGN5ODdYRzVjYmk4cUtseHVJQ29nUVNCemRISnBibWNnZEc5dmJDQjBieUJqYjI1emRISjFZM1FnWVNCemRISnBibWNnZDJsMGFDQm1iM0p0WVhRZ2MzUnlhVzVuTGx4dUlDb2dRRzFsZEdodlpDQm1iM0p0WVhSVGRISmNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mR0Z1ZVgwZ2JYTm5JQzBnUVNCS1lYWmhVMk55YVhCMElITjBjbWx1WnlCamIyNTBZV2x1YVc1bklIcGxjbThnYjNJZ2JXOXlaU0J6ZFdKemRHbDBkWFJwYjI0Z2MzUnlhVzVuY3lBb0pYTXBMbHh1SUNvZ1FIQmhjbUZ0SUh0aGJubDlJQzR1TG5OMVluTjBJQzBnU21GMllWTmpjbWx3ZENCdlltcGxZM1J6SUhkcGRHZ2dkMmhwWTJnZ2RHOGdjbVZ3YkdGalpTQnpkV0p6ZEdsMGRYUnBiMjRnYzNSeWFXNW5jeUIzYVhSb2FXNGdiWE5uTGlCVWFHbHpJR2RwZG1WeklIbHZkU0JoWkdScGRHbHZibUZzSUdOdmJuUnliMndnYjNabGNpQjBhR1VnWm05eWJXRjBJRzltSUhSb1pTQnZkWFJ3ZFhRdVhHNGdLaUJBY21WMGRYSnVjeUI3VTNSeWFXNW5mVnh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJR05qTG1wekxtWnZjbTFoZEZOMGNpaGNJbUU2SUNWekxDQmlPaUFsYzF3aUxDQmhMQ0JpS1R0Y2JpQXFJR05qTG1wekxtWnZjbTFoZEZOMGNpaGhMQ0JpTENCaktUdGNiaUFxTDF4dWFuTXVabTl5YldGMFUzUnlJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhaaGNpQmhjbWRNWlc0Z1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb08xeHVJQ0FnSUdsbUlDaGhjbWRNWlc0Z1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNjbk8xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ2JYTm5JRDBnWVhKbmRXMWxiblJ6V3pCZE8xeHVJQ0FnSUdsbUlDaGhjbWRNWlc0Z1BUMDlJREVwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNjbklDc2diWE5uTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCb1lYTlRkV0p6ZEdsMGRYUnBiMjRnUFNCMGVYQmxiMllnYlhObklEMDlQU0FuYzNSeWFXNW5KeUFtSmlCU1JVZEZXRkJmVGxWTlgwOVNYMU5VVWk1MFpYTjBLRzF6WnlrN1hHNGdJQ0FnYVdZZ0tHaGhjMU4xWW5OMGFYUjFkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTVRzZ2FTQThJR0Z5WjB4bGJqc2dLeXRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1lYSm5JRDBnWVhKbmRXMWxiblJ6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxaMFY0Y0ZSdlZHVnpkQ0E5SUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2R1ZFcxaVpYSW5JRDhnVWtWSFJWaFFYMDVWVFY5UFVsOVRWRklnT2lCU1JVZEZXRkJmVTFSU08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxaMFY0Y0ZSdlZHVnpkQzUwWlhOMEtHMXpaeWtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlhObklEMGdiWE5uTG5KbGNHeGhZMlVvY21WblJYaHdWRzlVWlhOMExDQmhjbWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxelp5QXJQU0FuSUNjZ0t5QmhjbWM3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F4T3lCcElEd2dZWEpuVEdWdU95QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzF6WnlBclBTQW5JQ2NnS3lCaGNtZDFiV1Z1ZEhOYmFWMDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUcxelp6dGNibjA3WEc1Y2JpOHZJSE5sWlNCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNHVjBhMkZoYm5SdmJtOTJMMkpzZFdWaWFYSmtMMmx6YzNWbGN5OHhNemc1WEc1cWN5NXphR2xtZEVGeVozVnRaVzUwY3lBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjJZWElnYkdWdUlEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQXRJREU3WEc0Z0lDQWdkbUZ5SUdGeVozTWdQU0J1WlhjZ1FYSnlZWGtvYkdWdUtUdGNiaUFnSUNCbWIzSW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JHVnVPeUFySzJrcElIdGNiaUFnSUNBZ0lDQWdZWEpuYzF0cFhTQTlJR0Z5WjNWdFpXNTBjMXRwSUNzZ01WMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJoY21kek8xeHVmVHRjYmx4dUx5b3FYRzRnS2lBaEkyVnVYRzRnS2lCQklITnBiWEJzWlNCM2NtRndjR1Z5SUc5bUlHQlBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BZQ0IzYUdsamFDQmxibk4xY21WeklIUm9aU0J5WlhSMWNtNGdiMkpxWldOMElHaGhkbVVnYm04Z2NISnZkRzkwZVhCbElDaGhibVFnZEdoMWN5QnVieUJwYm1obGNtbDBaV1FnYldWdFltVnljeWt1SUZOdklIZGxJR05oYmlCemEybHdJR0JvWVhOUGQyNVFjbTl3WlhKMGVXQWdZMkZzYkhNZ2IyNGdjSEp2Y0dWeWRIa2diRzl2YTNWd2N5NGdTWFFnYVhNZ1lTQjNiM0owYUhkb2FXeGxJRzl3ZEdsdGFYcGhkR2x2YmlCMGFHRnVJSFJvWlNCZ2UzMWdJR3hwZEdWeVlXd2dkMmhsYmlCZ2FHRnpUM2R1VUhKdmNHVnlkSGxnSUdOaGJHeHpJR0Z5WlNCdVpXTmxjM05oY25rdVhHNGdLaUFoSTNwb1hHNGdLaURvcjZYbWxybm1zNVhtbUsvbHI3a2dZRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2xnSU9lYWhPZXVnT1dObGVXd2dlaWpoZU9BZ21CUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cFlDRG5sS2prdW83bGlKdmx1N3JtbDZBZ2NISnZkRzkwZVhCbElPKzhpT1M1bitXd3NlYVhvT2U3cCthSnYrKzhpZWVhaE9lcHV1V3Z1ZWl4b2VPQWd1aS9tZWFndCthSWtlUzdyT1djcU9pdnBlV3Z1ZWl4b2VTNGl1YWZwZWFKdnVXeG51YUFwK2FYdHUrOGpPV3dzZVM0amVlVXFPaS9tK2loakNCZ2FHRnpUM2R1VUhKdmNHVnlkSGxnSU9XSXBPYVdyZU9BZ3VXY3FPbWNnT2ltZ2VtaWtlZTVnZVdJcE9hV3JTQmdhR0Z6VDNkdVVISnZjR1Z5ZEhsZ0lPYVh0dSs4ak9TOXYrZVVxT2kvbWVTNHF1YVd1ZWF6bGVhQXAraUR2ZVM4bXVhdmxDQmdlMzFnSU9hYnRPbXJtT09BZ2x4dUlDcGNiaUFxSUVCdFpYUm9iMlFnWTNKbFlYUmxUV0Z3WEc0Z0tpQkFjR0Z5WVcwZ2UwSnZiMnhsWVc1OUlGdG1iM0pqWlVScFkzUk5iMlJsUFdaaGJITmxYU0F0SUVGd2NHeDVJSFJvWlNCa1pXeGxkR1VnYjNCbGNtRjBiM0lnZEc4Z2JtVjNiSGtnWTNKbFlYUmxaQ0J0WVhBZ2IySnFaV04wTGlCVWFHbHpJR05oZFhObGN5QldPQ0IwYnlCd2RYUWdkR2hsSUc5aWFtVmpkQ0JwYmlCY0ltUnBZM1JwYjI1aGNua2diVzlrWlZ3aUlHRnVaQ0JrYVhOaFlteGxjeUJqY21WaGRHbHZiaUJ2WmlCb2FXUmtaVzRnWTJ4aGMzTmxjeUIzYUdsamFDQmhjbVVnZG1WeWVTQmxlSEJsYm5OcGRtVWdabTl5SUc5aWFtVmpkSE1nZEdoaGRDQmhjbVVnWTI5dWMzUmhiblJzZVNCamFHRnVaMmx1WnlCemFHRndaUzVjYmlBcUlFQnlaWFIxY200Z2UwOWlhbVZqZEgxY2JpQXFMMXh1YW5NdVkzSmxZWFJsVFdGd0lEMGdablZ1WTNScGIyNGdLR1p2Y21ObFJHbGpkRTF2WkdVcElIdGNiaUFnSUNCMllYSWdiV0Z3SUQwZ1QySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tUdGNiaUFnSUNCcFppQW9abTl5WTJWRWFXTjBUVzlrWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCSlRsWkJURWxFWDBsRVJVNVVTVVpKUlZKZk1TQTlJQ2N1Snp0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnU1U1V1FVeEpSRjlKUkVWT1ZFbEdTVVZTWHpJZ1BTQW5MeWM3WEc0Z0lDQWdJQ0FnSUcxaGNGdEpUbFpCVEVsRVgwbEVSVTVVU1VaSlJWSmZNVjBnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0J0WVhCYlNVNVdRVXhKUkY5SlJFVk9WRWxHU1VWU1h6SmRJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElHMWhjRnRKVGxaQlRFbEVYMGxFUlU1VVNVWkpSVkpmTVYwN1hHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCdFlYQmJTVTVXUVV4SlJGOUpSRVZPVkVsR1NVVlNYekpkTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JXRndPMXh1ZlR0Y2JseHVMeW9xWEc0Z0tpQkFZMnhoYzNNZ1lYSnlZWGxjYmlBcUlFQnpkR0YwYVdOY2JpQXFMMXh1WEc0dktpcGNiaUFxSUZKbGJXOTJaWE1nZEdobElHRnljbUY1SUdsMFpXMGdZWFFnZEdobElITndaV05wWm1sbFpDQnBibVJsZUM1Y2JpQXFJRUJ0WlhSb2IyUWdjbVZ0YjNabFFYUmNiaUFxSUVCd1lYSmhiU0I3WVc1NVcxMTlJR0Z5Y21GNVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdhVzVrWlhoY2JpQXFMMXh1Wm5WdVkzUnBiMjRnY21WdGIzWmxRWFFnS0dGeWNtRjVMQ0JwYm1SbGVDa2dlMXh1SUNBZ0lHRnljbUY1TG5Od2JHbGpaU2hwYm1SbGVDd2dNU2s3WEc1OVhHNWNiaThxS2x4dUlDb2dVbVZ0YjNabGN5QjBhR1VnWVhKeVlYa2dhWFJsYlNCaGRDQjBhR1VnYzNCbFkybG1hV1ZrSUdsdVpHVjRMbHh1SUNvZ1NYUW5jeUJtWVhOMFpYSWdZblYwSUhSb1pTQnZjbVJsY2lCdlppQjBhR1VnWVhKeVlYa2dkMmxzYkNCaVpTQmphR0Z1WjJWa0xseHVJQ29nUUcxbGRHaHZaQ0JtWVhOMFVtVnRiM1psUVhSY2JpQXFJRUJ3WVhKaGJTQjdZVzU1VzExOUlHRnljbUY1WEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2FXNWtaWGhjYmlBcUwxeHVablZ1WTNScGIyNGdabUZ6ZEZKbGJXOTJaVUYwSUNoaGNuSmhlU3dnYVc1a1pYZ3BJSHRjYmlBZ0lDQjJZWElnYkdWdVozUm9JRDBnWVhKeVlYa3ViR1Z1WjNSb08xeHVJQ0FnSUdsbUlDaHBibVJsZUNBOElEQWdmSHdnYVc1a1pYZ2dQajBnYkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzRnSUNBZ1lYSnlZWGxiYVc1a1pYaGRJRDBnWVhKeVlYbGJiR1Z1WjNSb0lDMGdNVjA3WEc0Z0lDQWdZWEp5WVhrdWJHVnVaM1JvSUQwZ2JHVnVaM1JvSUMwZ01UdGNibjFjYmx4dUx5b3FYRzRnS2lCU1pXMXZkbVZ6SUhSb1pTQm1hWEp6ZENCdlkyTjFjbkpsYm1ObElHOW1JR0VnYzNCbFkybG1hV01nYjJKcVpXTjBJR1p5YjIwZ2RHaGxJR0Z5Y21GNUxseHVJQ29nUUcxbGRHaHZaQ0J5WlcxdmRtVmNiaUFxSUVCd1lYSmhiU0I3WVc1NVcxMTlJR0Z5Y21GNVhHNGdLaUJBY0dGeVlXMGdlMkZ1ZVgwZ2RtRnNkV1ZjYmlBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OVhHNGdLaTljYm1aMWJtTjBhVzl1SUhKbGJXOTJaU0FvWVhKeVlYa3NJSFpoYkhWbEtTQjdYRzRnSUNBZ2RtRnlJR2x1WkdWNElEMGdZWEp5WVhrdWFXNWtaWGhQWmloMllXeDFaU2s3WEc0Z0lDQWdhV1lnS0dsdVpHVjRJRDQ5SURBcElIdGNiaUFnSUNBZ0lDQWdjbVZ0YjNabFFYUW9ZWEp5WVhrc0lHbHVaR1Y0S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRkpsYlc5MlpYTWdkR2hsSUdacGNuTjBJRzlqWTNWeWNtVnVZMlVnYjJZZ1lTQnpjR1ZqYVdacFl5QnZZbXBsWTNRZ1puSnZiU0IwYUdVZ1lYSnlZWGt1WEc0Z0tpQkpkQ2R6SUdaaGMzUmxjaUJpZFhRZ2RHaGxJRzl5WkdWeUlHOW1JSFJvWlNCaGNuSmhlU0IzYVd4c0lHSmxJR05vWVc1blpXUXVYRzRnS2lCQWJXVjBhRzlrSUdaaGMzUlNaVzF2ZG1WY2JpQXFJRUJ3WVhKaGJTQjdZVzU1VzExOUlHRnljbUY1WEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2RtRnNkV1ZjYmlBcUwxeHVablZ1WTNScGIyNGdabUZ6ZEZKbGJXOTJaU0FvWVhKeVlYa3NJSFpoYkhWbEtTQjdYRzRnSUNBZ2RtRnlJR2x1WkdWNElEMGdZWEp5WVhrdWFXNWtaWGhQWmloMllXeDFaU2s3WEc0Z0lDQWdhV1lnS0dsdVpHVjRJRDQ5SURBcElIdGNiaUFnSUNBZ0lDQWdZWEp5WVhsYmFXNWtaWGhkSUQwZ1lYSnlZWGxiWVhKeVlYa3ViR1Z1WjNSb0lDMGdNVjA3WEc0Z0lDQWdJQ0FnSUMwdFlYSnlZWGt1YkdWdVozUm9PMXh1SUNBZ0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCV1pYSnBabmtnWVhKeVlYa25jeUJVZVhCbFhHNGdLaUJBYldWMGFHOWtJSFpsY21sbWVWUjVjR1ZjYmlBcUlFQndZWEpoYlNCN1lYSnlZWGw5SUdGeWNtRjVYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCMGVYQmxYRzRnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUIyWlhKcFpubFVlWEJsSUNoaGNuSmhlU3dnZEhsd1pTa2dlMXh1SUNBZ0lHbG1JQ2hoY25KaGVTQW1KaUJoY25KaGVTNXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1lYSnlZWGt1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hLR0Z5Y21GNVcybGRJR2x1YzNSaGJtTmxiMllnSUhSNWNHVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJNdWJHOW5TVVFvTVRNd01DazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGSmxiVzkyWlhNZ1puSnZiU0JoY25KaGVTQmhiR3dnZG1Gc2RXVnpJR2x1SUcxcGJuVnpRWEp5TGlCR2IzSWdaV0ZqYUNCV1lXeDFaU0JwYmlCdGFXNTFjMEZ5Y2l3Z2RHaGxJR1pwY25OMElHMWhkR05vYVc1bklHbHVjM1JoYm1ObElHbHVJR0Z5Y21GNUlIZHBiR3dnWW1VZ2NtVnRiM1psWkM1Y2JpQXFJRUJ0WlhSb2IyUWdjbVZ0YjNabFFYSnlZWGxjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUdGeWNtRjVJRk52ZFhKalpTQkJjbkpoZVZ4dUlDb2dRSEJoY21GdElIdEJjbkpoZVgwZ2JXbHVkWE5CY25JZ2JXbHVkWE1nUVhKeVlYbGNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NtVnRiM1psUVhKeVlYa2dLR0Z5Y21GNUxDQnRhVzUxYzBGeWNpa2dlMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc0lEMGdiV2x1ZFhOQmNuSXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhKbGJXOTJaU2hoY25KaGVTd2diV2x1ZFhOQmNuSmJhVjBwTzF4dUlDQWdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkpibk5sY25SeklITnZiV1VnYjJKcVpXTjBjeUJoZENCcGJtUmxlRnh1SUNvZ1FHMWxkR2h2WkNCaGNIQmxibVJQWW1wbFkzUnpRWFJjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGw5SUdGeWNtRjVYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0JoWkdSUFltcHpYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYVc1a1pYaGNiaUFxSUVCeVpYUjFjbTRnZTBGeWNtRjVmVnh1SUNvdlhHNW1kVzVqZEdsdmJpQmhjSEJsYm1SUFltcGxZM1J6UVhRZ0tHRnljbUY1TENCaFpHUlBZbXB6TENCcGJtUmxlQ2tnZTF4dUlDQWdJR0Z5Y21GNUxuTndiR2xqWlM1aGNIQnNlU2hoY25KaGVTd2dXMmx1WkdWNExDQXdYUzVqYjI1allYUW9ZV1JrVDJKcWN5a3BPMXh1SUNBZ0lISmxkSFZ5YmlCaGNuSmhlVHRjYm4xY2JseHVMeW9xWEc0Z0tpQkZlR0ZqZENCellXMWxJR1oxYm1OMGFXOXVJR0Z6SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVwYm1SbGVFOW1ManhpY2o1Y2JpQXFJRWhCUTBzNklIVm5iR2w1SUdoaFkyc2dabTl5SUVKaGFXUjFJRzF2WW1sc1pTQmljbTkzYzJWeUlHTnZiWEJoZEdsaWFXeHBkSGtzSUhOMGRYQnBaQ0JDWVdsa2RTQm5kWGx6SUcxdlpHbG1lU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVhVzVrWlhoUFppQm1iM0lnWVd4c0lIQmhaMlZ6SUd4dllXUmxaQ3dnZEdobGFYSWdkbVZ5YzJsdmJpQmphR0Z1WjJWeklITjBjbWxqZENCamIyMXdZWEpwYzI5dUlIUnZJRzV2YmkxemRISnBZM1FnWTI5dGNHRnlhWE52Yml3Z2FYUWdZV3h6YnlCcFoyNXZjbVZ6SUhSb1pTQnpaV052Ym1RZ2NHRnlZVzFsZEdWeUlHOW1JSFJvWlNCdmNtbG5hVzVoYkNCQlVFa3NJR0Z1WkNCMGFHbHpJSGRwYkd3Z1kyRjFjMlVnWlhabGJuUWdhR0Z1Wkd4bGNpQmxiblJsY2lCcGJtWnBibWwwWlNCc2IyOXdManhpY2o1Y2JpQXFJRUpoYVdSMUlHUmxkbVZzYjNCbGNuTXNJR2xtSUhsdmRTQmxkbVZ5SUhObFpTQjBhR2x6SUdSdlkzVnRaVzUwWVhScGIyNHNJR2hsY21VZ2FYTWdkR2hsSUhOMFlXNWtZWEprT2lCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1dGIzcHBiR3hoTG05eVp5OWxiaTFWVXk5a2IyTnpMMWRsWWk5S1lYWmhVMk55YVhCMEwxSmxabVZ5Wlc1alpTOUhiRzlpWVd4ZlQySnFaV04wY3k5QmNuSmhlUzlwYm1SbGVFOW1MQ0JUWlhKcGIzVnpiSGtoWEc0Z0tseHVJQ29nUUcxbGRHaHZaQ0JwYm1SbGVFOW1YRzRnS2lCQWNHRnlZVzBnZTJGdWVYMGdjMlZoY21Ob1JXeGxiV1Z1ZENBdElFVnNaVzFsYm5RZ2RHOGdiRzlqWVhSbElHbHVJSFJvWlNCaGNuSmhlUzVjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYlpuSnZiVWx1WkdWNFBUQmRJQzBnVkdobElHbHVaR1Y0SUhSdklITjBZWEowSUhSb1pTQnpaV0Z5WTJnZ1lYUmNiaUFxSUVCeVpYUjFjbTRnZTA1MWJXSmxjbjBnTFNCMGFHVWdabWx5YzNRZ2FXNWtaWGdnWVhRZ2QyaHBZMmdnWVNCbmFYWmxiaUJsYkdWdFpXNTBJR05oYmlCaVpTQm1iM1Z1WkNCcGJpQjBhR1VnWVhKeVlYa3NJRzl5SUMweElHbG1JR2wwSUdseklHNXZkQ0J3Y21WelpXNTBMbHh1SUNvdlhHNTJZWElnYVc1a1pYaFBaaUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVwYm1SbGVFOW1PMXh1WEc0dktpcGNiaUFxSUVSbGRHVnliV2x1WlhNZ2QyaGxkR2hsY2lCMGFHVWdZWEp5WVhrZ1kyOXVkR0ZwYm5NZ1lTQnpjR1ZqYVdacFl5QjJZV3gxWlM1Y2JpQXFJRUJ0WlhSb2IyUWdZMjl1ZEdGcGJuTmNiaUFxSUVCd1lYSmhiU0I3WVc1NVcxMTlJR0Z5Y21GNVhHNGdLaUJBY0dGeVlXMGdlMkZ1ZVgwZ2RtRnNkV1ZjYmlBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OVhHNGdLaTljYm1aMWJtTjBhVzl1SUdOdmJuUmhhVzV6SUNoaGNuSmhlU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQnlaWFIxY200Z1lYSnlZWGt1YVc1a1pYaFBaaWgyWVd4MVpTa2dQajBnTUR0Y2JuMWNibHh1THlvcVhHNGdLaUJEYjNCNUlHRnVJR0Z5Y21GNUozTWdhWFJsYlNCMGJ5QmhJRzVsZHlCaGNuSmhlU0FvYVhSeklIQmxjbVp2Y20xaGJtTmxJR2x6SUdKbGRIUmxjaUIwYUdGdUlFRnljbUY1TG5Oc2FXTmxLVnh1SUNvZ1FHMWxkR2h2WkNCamIzQjVYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVmU0JoY25KaGVWeHVJQ29nUUhKbGRIVnliaUI3UVhKeVlYbDlYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTnZjSGtnS0dGeWNtRjVLU0I3WEc0Z0lDQWdkbUZ5SUdrc0lHeGxiaUE5SUdGeWNtRjVMbXhsYm1kMGFDd2dZWEp5WDJOc2IyNWxJRDBnYm1WM0lFRnljbUY1S0d4bGJpazdYRzRnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUd4bGJqc2dhU0FyUFNBeEtWeHVJQ0FnSUNBZ0lDQmhjbkpmWTJ4dmJtVmJhVjBnUFNCaGNuSmhlVnRwWFR0Y2JpQWdJQ0J5WlhSMWNtNGdZWEp5WDJOc2IyNWxPMXh1ZlZ4dVhHNXFjeTVoY25KaGVTQTlJSHRjYmlBZ0lDQnlaVzF2ZG1Vc1hHNGdJQ0FnWm1GemRGSmxiVzkyWlN4Y2JpQWdJQ0J5WlcxdmRtVkJkQ3hjYmlBZ0lDQm1ZWE4wVW1WdGIzWmxRWFFzWEc0Z0lDQWdZMjl1ZEdGcGJuTXNYRzRnSUNBZ2RtVnlhV1o1Vkhsd1pTeGNiaUFnSUNCeVpXMXZkbVZCY25KaGVTeGNiaUFnSUNCaGNIQmxibVJQWW1wbFkzUnpRWFFzWEc0Z0lDQWdZMjl3ZVN4Y2JpQWdJQ0JwYm1SbGVFOW1MRnh1SUNBZ0lFMTFkR0ZpYkdWR2IzSjNZWEprU1hSbGNtRjBiM0k2SUhKbGNYVnBjbVVvSnk0dUwzVjBhV3h6TDIxMWRHRmliR1V0Wm05eWQyRnlaQzFwZEdWeVlYUnZjaWNwWEc1OU8xeHVYRzR2THlCUFFrcEZRMVFnVUU5UFRGeHVYRzR2S2lwY2JpQXFJQ0VqWlc1Y2JpQXFJRUVnWm1sNFpXUXRiR1Z1WjNSb0lHOWlhbVZqZENCd2IyOXNJR1JsYzJsbmJtVmtJR1p2Y2lCblpXNWxjbUZzSUhSNWNHVXVQR0p5UGx4dUlDb2dWR2hsSUdsdGNHeGxiV1Z1ZEdGMGFXOXVJRzltSUhSb2FYTWdiMkpxWldOMElIQnZiMndnYVhNZ2RtVnllU0J6YVcxd2JHVXNYRzRnS2lCcGRDQmpZVzRnYUdWc2NITWdlVzkxSUhSdklHbHRjSEp2ZG1VZ2VXOTFjaUJuWVcxbElIQmxjbVp2Y20xaGJtTmxJR1p2Y2lCdlltcGxZM1J6SUhkb2FXTm9JRzVsWldRZ1puSmxjWFZsYm5RZ2NtVnNaV0Z6WlNCaGJtUWdjbVZqY21WaGRHVWdiM0JsY21GMGFXOXVjenhpY2k4K1hHNGdLaUFoSTNwb1hHNGdLaURwbGIvbHVxYmxtN3JscnBybm1vVGxyN25vc2FIbnZKUGxyWmptc2FEdnZJemxqNi9rdTZYbmxLam1uYVhudkpQbHJaamxrSVRucDQzbHI3bm9zYUhuc2J2bG5vdmpnSUk4WW5JdlBseHVJQ29nNkwrWjVMaXE1YSs1NkxHaDVyR2c1NXFFNWE2ZTU0Nnc2WjJlNWJpNDU3Sys1NjZBNzd5TTVhNkQ1WSt2NUx1bDViaXU1WXFwNW9LbzVvK1E2YXVZNXJpNDVvaVA1b0NuNklPOTc3eU02WUNDNTVTbzVMcU81THlZNVl5VzVhKzU2TEdoNTVxRTVZK041YVNONVlpYjVidTY1WktNNlpTQTVxK0I0NENDWEc0Z0tpQkFZMnhoYzNNZ1VHOXZiRnh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFYRzRnS2tWNFlXMXdiR1VnTVRwY2JpQXFYRzRnS21aMWJtTjBhVzl1SUVSbGRHRnBiSE1nS0NrZ2UxeHVJQ29nSUNBZ2RHaHBjeTUxZFdsa1RHbHpkQ0E5SUZ0ZE8xeHVJQ3A5TzF4dUlDcEVaWFJoYVd4ekxuQnliM1J2ZEhsd1pTNXlaWE5sZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBcUlDQWdJSFJvYVhNdWRYVnBaRXhwYzNRdWJHVnVaM1JvSUQwZ01EdGNiaUFxZlR0Y2JpQXFSR1YwWVdsc2N5NXdiMjlzSUQwZ2JtVjNJR3B6TGxCdmIyd29ablZ1WTNScGIyNGdLRzlpYWlrZ2UxeHVJQ29nSUNBZ2IySnFMbkpsYzJWMEtDazdYRzRnS24wc0lEVXBPMXh1SUNwRVpYUmhhV3h6TG5CdmIyd3VaMlYwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNvZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJkbGRDZ3BJSHg4SUc1bGR5QkVaWFJoYVd4ektDazdYRzRnS24wN1hHNGdLbHh1SUNwMllYSWdaR1YwWVdsc0lEMGdSR1YwWVdsc2N5NXdiMjlzTG1kbGRDZ3BPMXh1SUNvdUxpNWNiaUFxUkdWMFlXbHNjeTV3YjI5c0xuQjFkQ2hrWlhSaGFXd3BPMXh1SUNwY2JpQXFSWGhoYlhCc1pTQXlPbHh1SUNwY2JpQXFablZ1WTNScGIyNGdSR1YwWVdsc2N5QW9ZblZtWm1WeUtTQjdYRzRnS2lBZ0lDQjBhR2x6TG5WMWFXUk1hWE4wSUQwZ1luVm1abVZ5TzF4dUlDcDlPMXh1SUNvdUxpNWNiaUFxUkdWMFlXbHNjeTV3YjI5c0xtZGxkQ0E5SUdaMWJtTjBhVzl1SUNoaWRXWm1aWElwSUh0Y2JpQXFJQ0FnSUhaaGNpQmpZV05vWldRZ1BTQjBhR2x6TGw5blpYUW9LVHRjYmlBcUlDQWdJR2xtSUNoallXTm9aV1FwSUh0Y2JpQXFJQ0FnSUNBZ0lDQmpZV05vWldRdWRYVnBaRXhwYzNRZ1BTQmlkV1ptWlhJN1hHNGdLaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkR0Y2JpQXFJQ0FnSUgxY2JpQXFJQ0FnSUdWc2MyVWdlMXh1SUNvZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1JHVjBZV2xzY3loaWRXWm1aWElwTzF4dUlDb2dJQ0FnZlZ4dUlDcDlPMXh1SUNwY2JpQXFkbUZ5SUdSbGRHRnBiQ0E5SUVSbGRHRnBiSE11Y0c5dmJDNW5aWFFvSUZ0ZElDazdYRzRnS2k0dUxseHVJQ292WEc0dktpcGNiaUFxSUNFalpXNWNiaUFxSUVOdmJuTjBjblZqZEc5eUlHWnZjaUJqY21WaGRHbHVaeUJoYmlCdlltcGxZM1FnY0c5dmJDQm1iM0lnZEdobElITndaV05wWm1saklHOWlhbVZqZENCMGVYQmxMbHh1SUNvZ1dXOTFJR05oYmlCd1lYTnpJR0VnWTJGc2JHSmhZMnNnWVhKbmRXMWxiblFnWm05eUlIQnliMk5sYzNNZ2RHaGxJR05zWldGdWRYQWdiRzluYVdNZ2QyaGxiaUIwYUdVZ2IySnFaV04wSUdseklISmxZM2xqYkdWa0xseHVJQ29nSVNONmFGeHVJQ29nNUwyLzU1U281cDZFNllDZzVZZTk1cFd3NXAybDVZaWI1YnU2NUxpQTVMaXE1b3lINWE2YTVhKzU2TEdoNTdHNzVaNkw1NXFFNWErNTZMR2g1ckdnNzd5TTVvS281WSt2NUx1bDVMeWc2WUNTNUxpQTVMaXE1WnVlNkxDRDVZZTk1cFd3Nzd5TTU1U281THFPNWFTRTU1Q0c1YSs1NkxHaDVadWU1cFMyNXBlMjU1cUU1cmlGNTVDRzZZQzc2TDZSNDRDQ1hHNGdLaUJBYldWMGFHOWtJR052Ym5OMGNuVmpkRzl5WEc0Z0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmJZMnhsWVc1MWNFWjFibU5kSUMwZ2RHaGxJR05oYkd4aVlXTnJJRzFsZEdodlpDQjFjMlZrSUhSdklIQnliMk5sYzNNZ2RHaGxJR05zWldGdWRYQWdiRzluYVdNZ2QyaGxiaUIwYUdVZ2IySnFaV04wSUdseklISmxZM2xqYkdWa0xseHVJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJR05zWldGdWRYQkdkVzVqTG05aWFseHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJSE5wZW1VZ0xTQnBibWwwYVdGc2FYcGxjeUIwYUdVZ2JHVnVaM1JvSUc5bUlIUm9aU0JoY25KaGVWeHVJQ29nUUhSNWNHVnpZM0pwY0hSY2JpQXFJR052Ym5OMGNuVmpkRzl5S0dOc1pXRnVkWEJHZFc1ak9pQW9iMkpxT2lCaGJua3BJRDArSUhadmFXUXNJSE5wZW1VNklHNTFiV0psY2lsY2JpQXFJR052Ym5OMGNuVmpkRzl5S0hOcGVtVTZJRzUxYldKbGNpbGNiaUFxTDF4dVpuVnVZM1JwYjI0Z1VHOXZiQ0FvWTJ4bFlXNTFjRVoxYm1Nc0lITnBlbVVwSUh0Y2JpQWdJQ0JwWmlBb2MybDZaU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSE5wZW1VZ1BTQmpiR1ZoYm5Wd1JuVnVZenRjYmlBZ0lDQWdJQ0FnWTJ4bFlXNTFjRVoxYm1NZ1BTQnVkV3hzTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG1kbGRDQTlJRzUxYkd3N1hHNGdJQ0FnZEdocGN5NWpiM1Z1ZENBOUlEQTdYRzRnSUNBZ2RHaHBjeTVmY0c5dmJDQTlJRzVsZHlCQmNuSmhlU2h6YVhwbEtUdGNiaUFnSUNCMGFHbHpMbDlqYkdWaGJuVndJRDBnWTJ4bFlXNTFjRVoxYm1NN1hHNTlYRzVjYmk4cUtseHVJQ29nSVNObGJseHVJQ29nUjJWMElHRnVaQ0JwYm1sMGFXRnNhWHBsSUdGdUlHOWlhbVZqZENCbWNtOXRJSEJ2YjJ3dUlGUm9hWE1nYldWMGFHOWtJR1JsWm1GMWJIUnpJSFJ2SUc1MWJHd2dZVzVrSUhKbGNYVnBjbVZ6SUhSb1pTQjFjMlZ5SUhSdklHbHRjR3hsYldWdWRDQnBkQzVjYmlBcUlDRWplbWhjYmlBcUlPaU90K1dQbHVXNXR1V0luZVduaStXTWx1V3Z1ZWl4b2VheG9PUzRyZWVhaE9XdnVlaXhvZU9BZ3VpL21lUzRxdWFXdWVhemxlbTdtT2l1cE9TNHV1ZXB1dSs4ak9tY2dPaW1nZWVVcU9hSXQraUhxdVczc2VXdW51ZU9zT09BZ2x4dUlDb2dRRzFsZEdodlpDQm5aWFJjYmlBcUlFQndZWEpoYlNCN1lXNTVmU0F1TGk1d1lYSmhiWE1nTFNCd1lYSmhiV1YwWlhKeklIUnZJSFZ6WldRZ2RHOGdhVzVwZEdsaGJHbDZaU0IwYUdVZ2IySnFaV04wWEc0Z0tpQkFjbVYwZFhKdWN5QjdUMkpxWldOMGZWeHVJQ292WEc1Y2JpOHFLbHh1SUNvZ0lTTmxibHh1SUNvZ1ZHaGxJR04xY25KbGJuUWdiblZ0WW1WeUlHOW1JR0YyWVdsc1lXSnNaU0J2WW1wbFkzUnpMQ0IwYUdVZ1pHVm1ZWFZzZENCcGN5QXdMQ0JwZENCM2FXeHNJR2R5WVdSMVlXeHNlU0JwYm1OeVpXRnpaU0IzYVhSb0lIUm9aU0J5WldONVkyeGxJRzltSUhSb1pTQnZZbXBsWTNRc1hHNGdLaUIwYUdVZ2JXRjRhVzExYlNCM2FXeHNJRzV2ZENCbGVHTmxaV1FnZEdobElITnBlbVVnYzNCbFkybG1hV1ZrSUhkb1pXNGdkR2hsSUdOdmJuTjBjblZqZEc5eUlHbHpJR05oYkd4bFpDNWNiaUFxSUNFamVtaGNiaUFxSU9XOWsrV0pqZVdQcitlVXFPV3Z1ZWl4b2VhVnNPbUhqKys4ak9TNGdPVzhnT1duaSttN21PaXVwT2FZcnlBdzc3eU02WnFQNTUyQTVhKzU2TEdoNTVxRTVadWU1cFMyNUx5YTZZQ1E1cmlRNWFLZTVhU243N3lNNXB5QTVhU241TGlONUx5YTZMYUY2TCtINkxDRDU1U281cDZFNllDZzVZZTk1cFd3NXBlMjVveUg1YTZhNTVxRUlITnBlbVhqZ0lKY2JpQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0JqYjNWdWRGeHVJQ29nUUdSbFptRjFiSFFnTUZ4dUlDb3ZYRzVjYmk4cUtseHVJQ29nSVNObGJseHVJQ29nUjJWMElHRnVJRzlpYW1WamRDQm1jbTl0SUhCdmIyd3NJR2xtSUc1dklHRjJZV2xzWVdKc1pTQnZZbXBsWTNRZ2FXNGdkR2hsSUhCdmIyd3NJRzUxYkd3Z2QybHNiQ0JpWlNCeVpYUjFjbTVsWkM1Y2JpQXFJQ0VqZW1oY2JpQXFJT2lPdCtXUGx1V3Z1ZWl4b2VheG9PUzRyZWVhaE9XdnVlaXhvZSs4ak9XbWd1YWVuT1d2dWVpeG9lYXhvT2F5b2VhY2llV1ByK2VVcU9XdnVlaXhvZSs4ak9XSW1laS9sT1dibnVlcHV1T0FnbHh1SUNvZ1FHMWxkR2h2WkNCZloyVjBYRzRnS2lCQWNtVjBkWEp1Y3lCN1QySnFaV04wZkc1MWJHeDlYRzRnS2k5Y2JsQnZiMnd1Y0hKdmRHOTBlWEJsTGw5blpYUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WTI5MWJuUWdQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDMHRkR2hwY3k1amIzVnVkRHRjYmlBZ0lDQWdJQ0FnZG1GeUlHTmhZMmhsSUQwZ2RHaHBjeTVmY0c5dmJGdDBhR2x6TG1OdmRXNTBYVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjRzl2YkZ0MGFHbHpMbU52ZFc1MFhTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzU5TzF4dVhHNHZLaXBjYmlBcUlDRWpaVzRnVUhWMElHRnVJRzlpYW1WamRDQnBiblJ2SUhSb1pTQndiMjlzTGx4dUlDb2dJU042YUNEbGtKSGxyN25vc2FIbXNhRG92NVRvdjVqa3VJRGt1S3JrdUkzbGhvM3BuSURvcG9Ibm1vVGxyN25vc2FIamdJSmNiaUFxSUVCdFpYUm9iMlFnY0hWMFhHNGdLaTljYmxCdmIyd3VjSEp2ZEc5MGVYQmxMbkIxZENBOUlHWjFibU4wYVc5dUlDaHZZbW9wSUh0Y2JpQWdJQ0IyWVhJZ2NHOXZiQ0E5SUhSb2FYTXVYM0J2YjJ3N1hHNGdJQ0FnYVdZZ0tIUm9hWE11WTI5MWJuUWdQQ0J3YjI5c0xteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZZMnhsWVc1MWNDQW1KaUIwYUdsekxsOWpiR1ZoYm5Wd0tHOWlhaWtnUFQwOUlHWmhiSE5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY0c5dmJGdDBhR2x6TG1OdmRXNTBYU0E5SUc5aWFqdGNiaUFnSUNBZ0lDQWdLeXQwYUdsekxtTnZkVzUwTzF4dUlDQWdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2dJU05sYmlCU1pYTnBlbVVnZEdobElIQnZiMnd1WEc0Z0tpQWhJM3BvSU9pdXZ1ZTlydVd2dWVpeG9lYXhvT1d1dWVtSGorT0FnbHh1SUNvZ1FHMWxkR2h2WkNCeVpYTnBlbVZjYmlBcUwxeHVVRzl2YkM1d2NtOTBiM1I1Y0dVdWNtVnphWHBsSUQwZ1puVnVZM1JwYjI0Z0tHeGxibWQwYUNrZ2UxeHVJQ0FnSUdsbUlDaHNaVzVuZEdnZ1BqMGdNQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3YjI5c0xteGxibWQwYUNBOUlHeGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkyOTFiblFnUGlCc1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOTFiblFnUFNCc1pXNW5kR2c3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OU8xeHVYRzVxY3k1UWIyOXNJRDBnVUc5dmJEdGNibHh1THk5Y2JseHVZMk11YW5NZ1BTQnFjenRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCcWN6dGNibHh1THk4Z1ptbDRJSE4xWW0xdlpIVnNaU0J3YjJ4c2RYUmxJQzR1TGx4dUx5b3FYRzRnS2lCQWMzVmliVzlrZFd4bElHTmpYRzRnS2k5Y2JpSmRmUT09Il19