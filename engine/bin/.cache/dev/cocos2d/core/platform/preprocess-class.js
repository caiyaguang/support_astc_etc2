(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/preprocess-class.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('./js');
        var SerializableAttrs = {
            url: { canUsedInGet: true },
            default: {},
            serializable: {},
            editorOnly: {},
            formerlySerializedAs: {}
        };
        var TYPO_TO_CORRECT_DEV = CC_DEV && {
            extend: 'extends',
            property: 'properties',
            static: 'statics',
            constructor: 'ctor'
        };
        function parseNotify(val, propName, notify, properties) {
            if (val.get || val.set) {
                if (CC_DEV) {
                    cc.warnID(5500);
                }
                return;
            }
            if (val.hasOwnProperty('default')) {
                var newKey = '_N$' + propName;
                val.get = function () {
                    return this[newKey];
                };
                val.set = function (value) {
                    var oldValue = this[newKey];
                    this[newKey] = value;
                    notify.call(this, oldValue);
                };
                if (CC_EDITOR) {
                    val.notifyFor = newKey;
                }
                var newValue = {};
                properties[newKey] = newValue;
                for (var attr in SerializableAttrs) {
                    var v = SerializableAttrs[attr];
                    if (val.hasOwnProperty(attr)) {
                        newValue[attr] = val[attr];
                        if (!v.canUsedInGet) {
                            delete val[attr];
                        }
                    }
                }
            } else if (CC_DEV) {
                cc.warnID(5501);
            }
        }
        function checkUrl(val, className, propName, url) {
            if (Array.isArray(url)) {
                if (url.length > 0) {
                    url = url[0];
                } else if (CC_EDITOR) {
                    return cc.errorID(5502, className, propName);
                }
            }
            if (CC_EDITOR) {
                if (url == null) {
                    return cc.warnID(5503, className, propName);
                }
                if (typeof url !== 'function' || !js.isChildClassOf(url, cc.RawAsset)) {
                    return cc.errorID(5504, className, propName);
                }
                if (url === cc.RawAsset) {
                    cc.warn('Please change the definition of property \'%s\' in class \'%s\'. Starting from v1.10,\n' + 'the use of declaring a property in CCClass as a URL has been deprecated.\n' + 'For example, if property is cc.RawAsset, the previous definition is:\n' + '    %s: cc.RawAsset,\n' + '    // or:\n' + '    %s: {\n' + '      url: cc.RawAsset,\n' + '      default: ""\n' + '    },\n' + '    // and the original method to get url is:\n' + '    `this.%s`\n' + 'Now it should be changed to:\n' + '    %s: {\n' + '      type: cc.Asset,     // use \'type:\' to define Asset object directly\n' + '      default: null,      // object\'s default value is null\n' + '    },\n' + '    // and you must get the url by using:\n' + '    `this.%s.nativeUrl`\n' + '(This helps us to successfully refactor all RawAssets at v2.0, ' + 'sorry for the inconvenience. \uD83D\uDE30 )', propName, className, propName, propName, propName, propName, propName);
                } else if (js.isChildClassOf(url, cc.Asset)) {
                    if (cc.RawAsset.wasRawAssetType(url)) {
                        if (!val._short) {
                            cc.warn('Please change the definition of property \'%s\' in class \'%s\'. Starting from v1.10,\n' + 'the use of declaring a property in CCClass as a URL has been deprecated.\n' + 'For example, if property is Texture2D, the previous definition is:\n' + '    %s: cc.Texture2D,\n' + '    // or:\n' + '    %s: {\n' + '      url: cc.Texture2D,\n' + '      default: ""\n' + '    },\n' + 'Now it should be changed to:\n' + '    %s: {\n' + '      type: cc.Texture2D, // use \'type:\' to define Texture2D object directly\n' + '      default: null,      // object\'s default value is null\n' + '    },\n' + '(This helps us to successfully refactor all RawAssets at v2.0, ' + 'sorry for the inconvenience. \uD83D\uDE30 )', propName, className, propName, propName, propName);
                        }
                    } else {
                        return cc.errorID(5505, className, propName, cc.js.getClassName(url));
                    }
                }
                if (val.type) {
                    return cc.warnID(5506, className, propName);
                }
            }
            val.type = url;
        }
        function parseType(val, type, className, propName) {
            if (Array.isArray(type)) {
                if (CC_EDITOR && 'default' in val) {
                    var isArray = require('./CCClass').isArray;
                    if (!isArray(val.default)) {
                        cc.warnID(5507, className, propName);
                    }
                }
                if (type.length > 0) {
                    if (cc.RawAsset.isRawAssetType(type[0])) {
                        val.url = type[0];
                        delete val.type;
                        return;
                    } else {
                        val.type = type = type[0];
                    }
                } else {
                    return cc.errorID(5508, className, propName);
                }
            }
            if (CC_EDITOR) {
                if (typeof type === 'function') {
                    if (cc.RawAsset.isRawAssetType(type)) {
                        cc.warnID(5509, className, propName, js.getClassName(type));
                    }
                } else if (type === 'Number') {
                    cc.warnID(5510, className, propName);
                } else if (type == null) {
                    cc.warnID(5511, className, propName);
                }
            }
        }
        function postCheckType(val, type, className, propName) {
            if (CC_EDITOR && typeof type === 'function') {
                if (cc.Class._isCCClass(type) && val.serializable !== false && !js._getClassId(type, false)) {
                    cc.warnID(5512, className, propName, className, propName);
                }
            }
        }
        function getBaseClassWherePropertyDefined_DEV(propName, cls) {
            if (CC_DEV) {
                var res;
                for (; cls && cls.__props__ && cls.__props__.indexOf(propName) !== -1; cls = cls.$super) {
                    res = cls;
                }
                if (!res) {
                    cc.error('unknown error');
                }
                return res;
            }
        }
        exports.getFullFormOfProperty = function (options, propname_dev, classname_dev) {
            var isLiteral = options && options.constructor === Object;
            if (!isLiteral) {
                if (Array.isArray(options) && options.length > 0) {
                    var type = options[0];
                    if (CC_DEV && cc.RawAsset.wasRawAssetType(type)) {
                        cc.warn('Please change the definition of property \'%s\' in class \'%s\'. Starting from v1.10,\n' + 'properties in CCClass can not be abbreviated if they are of type RawAsset.\n' + 'Please use the complete form.\n' + 'For example, if property is Texture2D\'s url array, the previous definition is:\n' + '    %s: [cc.Texture2D],\n' + 'If you use JS, it should be changed to:\n' + '    %s: {\n' + '      type: cc.Texture2D, // use \'type:\' to define an array of Texture2D objects\n' + '      default: []\n' + '    },\n' + 'If you use TS, it should be changed to:\n' + '    %s: {\n' + '      type: cc.Texture2D, // use \'type:\' to define an array of Texture2D objects\n' + '    }\n' + '   %s: cc.Texture2D[] = [];\n' + '(This helps us to successfully refactor all RawAssets at v2.0, ' + 'sorry for the inconvenience. \uD83D\uDE30 )', propname_dev, classname_dev, propname_dev, propname_dev);
                        return {
                            default: [],
                            url: options,
                            _short: true
                        };
                    }
                    return {
                        default: [],
                        type: options,
                        _short: true
                    };
                } else if (typeof options === 'function') {
                    var type = options;
                    if (!cc.RawAsset.isRawAssetType(type)) {
                        if (cc.RawAsset.wasRawAssetType(type)) {
                            if (CC_DEV) {
                                cc.warn('Please change the definition of property \'%s\' in class \'%s\'. Starting from v1.10,\n' + 'properties in CCClass can not be abbreviated if they are of type RawAsset.\n' + 'Please use the complete form.\n' + 'For example, if the type is Texture2D, the previous definition is:\n' + '    %s: cc.Texture2D,\n' + 'If you use JS, it should be changed to:\n' + '    %s: {\n' + '      type: cc.Texture2D // use \'type:\' to define Texture2D object directly\n' + '      default: null,     // object\'s default value is null\n' + '    },\n' + 'If you use TS, it should be changed to:\n' + '    %s: {\n' + '      type: cc.Texture2D // use \'type:\' to define Texture2D object directly\n' + '    }\n' + '    %s: cc.Texture2D = null;\n' + '(This helps us to successfully refactor all RawAssets at v2.0, ' + 'sorry for the inconvenience. \uD83D\uDE30 )', propname_dev, classname_dev, propname_dev, propname_dev);
                            }
                        } else {
                            return {
                                default: js.isChildClassOf(type, cc.ValueType) ? new type() : null,
                                type: type,
                                _short: true
                            };
                        }
                    }
                    return {
                        default: '',
                        url: type,
                        _short: true
                    };
                } else {
                    return {
                        default: options,
                        _short: true
                    };
                }
            }
            return null;
        };
        exports.preprocessAttrs = function (properties, className, cls, es6) {
            for (var propName in properties) {
                var val = properties[propName];
                var fullForm = exports.getFullFormOfProperty(val, propName, className);
                if (fullForm) {
                    val = properties[propName] = fullForm;
                }
                if (val) {
                    if (CC_EDITOR) {
                        if ('default' in val) {
                            if (val.get) {
                                cc.errorID(5513, className, propName);
                            } else if (val.set) {
                                cc.errorID(5514, className, propName);
                            } else if (cc.Class._isCCClass(val.default)) {
                                val.default = null;
                                cc.errorID(5515, className, propName);
                            }
                        } else if (!val.get && !val.set) {
                            var maybeTypeScript = es6;
                            if (!maybeTypeScript) {
                                cc.errorID(5516, className, propName);
                            }
                        }
                    }
                    if (CC_DEV && !val.override && cls.__props__.indexOf(propName) !== -1) {
                        var baseClass = js.getClassName(getBaseClassWherePropertyDefined_DEV(propName, cls));
                        cc.warnID(5517, className, propName, baseClass, propName);
                    }
                    var notify = val.notify;
                    if (notify) {
                        if (CC_DEV && es6) {
                            cc.error('not yet support notify attribute for ES6 Classes');
                        } else {
                            parseNotify(val, propName, notify, properties);
                        }
                    }
                    if ('type' in val) {
                        parseType(val, val.type, className, propName);
                    }
                    if ('url' in val) {
                        checkUrl(val, className, propName, val.url);
                    }
                    if ('type' in val) {
                        postCheckType(val, val.type, className, propName);
                    }
                }
            }
        };
        if (CC_DEV) {
            var CALL_SUPER_DESTROY_REG_DEV = /\b\._super\b|destroy\s*\.\s*call\s*\(\s*\w+\s*[,|)]/;
            exports.doValidateMethodWithProps_DEV = function (func, funcName, className, cls, base) {
                if (cls.__props__ && cls.__props__.indexOf(funcName) >= 0) {
                    var baseClassName = js.getClassName(getBaseClassWherePropertyDefined_DEV(funcName, cls));
                    cc.errorID(3648, className, funcName, baseClassName);
                    return false;
                }
                if (funcName === 'destroy' && js.isChildClassOf(base, cc.Component) && !CALL_SUPER_DESTROY_REG_DEV.test(func)) {
                    cc.error('Overwriting \'' + funcName + '\' function in \'' + className + '\' class without calling super is not allowed. Call the super function in \'' + funcName + '\' please.');
                }
            };
        }
        exports.validateMethodWithProps = function (func, funcName, className, cls, base) {
            if (CC_DEV && funcName === 'constructor') {
                cc.errorID(3643, className);
                return false;
            }
            if (typeof func === 'function' || func === null) {
                if (CC_DEV) {
                    this.doValidateMethodWithProps_DEV(func, funcName, className, cls, base);
                }
            } else {
                if (CC_DEV) {
                    if (func === false && base && base.prototype) {
                        var overrided = base.prototype[funcName];
                        if (typeof overrided === 'function') {
                            var baseFuc = js.getClassName(base) + '.' + funcName;
                            var subFuc = className + '.' + funcName;
                            cc.warnID(3624, subFuc, baseFuc, subFuc, subFuc);
                        }
                    }
                    var correct = TYPO_TO_CORRECT_DEV[funcName];
                    if (correct) {
                        cc.warnID(3621, className, funcName, correct);
                    } else if (func) {
                        cc.errorID(3622, className, funcName);
                    }
                }
                return false;
            }
            return true;
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZXByb2Nlc3MtY2xhc3MuanMiLCIvVXNlcnMvenpmMjAxOS9EZXNrdG9wL2RldmVsb3BtZW50L3N1cHBvcnRfYXN0Yy9lbmdpbmUvY29jb3MyZC9jb3JlL3BsYXRmb3JtL3ByZXByb2Nlc3MtY2xhc3MuanMiXSwibmFtZXMiOlsianMiLCJyZXF1aXJlIiwiU2VyaWFsaXphYmxlQXR0cnMiLCJ1cmwiLCJjYW5Vc2VkSW5HZXQiLCJkZWZhdWx0Iiwic2VyaWFsaXphYmxlIiwiZWRpdG9yT25seSIsImZvcm1lcmx5U2VyaWFsaXplZEFzIiwiVFlQT19UT19DT1JSRUNUX0RFViIsIkNDX0RFViIsImV4dGVuZCIsInByb3BlcnR5Iiwic3RhdGljIiwiY29uc3RydWN0b3IiLCJwYXJzZU5vdGlmeSIsInZhbCIsInByb3BOYW1lIiwibm90aWZ5IiwicHJvcGVydGllcyIsImdldCIsInNldCIsImNjIiwid2FybklEIiwiaGFzT3duUHJvcGVydHkiLCJuZXdLZXkiLCJ2YWx1ZSIsIm9sZFZhbHVlIiwiY2FsbCIsIkNDX0VESVRPUiIsIm5vdGlmeUZvciIsIm5ld1ZhbHVlIiwiYXR0ciIsInYiLCJjaGVja1VybCIsImNsYXNzTmFtZSIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImVycm9ySUQiLCJpc0NoaWxkQ2xhc3NPZiIsIlJhd0Fzc2V0Iiwid2FybiIsIkFzc2V0Iiwid2FzUmF3QXNzZXRUeXBlIiwiX3Nob3J0IiwiZ2V0Q2xhc3NOYW1lIiwidHlwZSIsInBhcnNlVHlwZSIsImlzUmF3QXNzZXRUeXBlIiwicG9zdENoZWNrVHlwZSIsIkNsYXNzIiwiX2lzQ0NDbGFzcyIsIl9nZXRDbGFzc0lkIiwiZ2V0QmFzZUNsYXNzV2hlcmVQcm9wZXJ0eURlZmluZWRfREVWIiwiY2xzIiwicmVzIiwiX19wcm9wc19fIiwiaW5kZXhPZiIsIiRzdXBlciIsImVycm9yIiwiZXhwb3J0cyIsImdldEZ1bGxGb3JtT2ZQcm9wZXJ0eSIsIm9wdGlvbnMiLCJwcm9wbmFtZV9kZXYiLCJjbGFzc25hbWVfZGV2IiwiaXNMaXRlcmFsIiwiT2JqZWN0IiwiVmFsdWVUeXBlIiwicHJlcHJvY2Vzc0F0dHJzIiwiZXM2IiwiZnVsbEZvcm0iLCJtYXliZVR5cGVTY3JpcHQiLCJvdmVycmlkZSIsImJhc2VDbGFzcyIsIkNBTExfU1VQRVJfREVTVFJPWV9SRUdfREVWIiwiZG9WYWxpZGF0ZU1ldGhvZFdpdGhQcm9wc19ERVYiLCJmdW5jIiwiZnVuY05hbWUiLCJiYXNlIiwiYmFzZUNsYXNzTmFtZSIsIkNvbXBvbmVudCIsInRlc3QiLCJ2YWxpZGF0ZU1ldGhvZFdpdGhQcm9wcyIsInByb3RvdHlwZSIsIm92ZXJyaWRlZCIsImJhc2VGdWMiLCJzdWJGdWMiLCJjb3JyZWN0Il0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUEwQkEsSUFBTUEsRUFBQUEsR0FBS0MsT0FBQUEsQ0FBUSxNQUFSQSxDQUFYO1FBSUEsSUFBSUMsaUJBQUFBLEdBQW9CO0FBQUEsWUFDcEJDLEdBQUFBLEVBQUssRUFDREMsWUFBQUEsRUFBYyxJQURiLEVBRGU7QUFBQSxZQUlwQkMsT0FBQUEsRUFBUyxFQUpXO0FBQUEsWUFLcEJDLFlBQUFBLEVBQWMsRUFMTTtBQUFBLFlBTXBCQyxVQUFBQSxFQUFZLEVBTlE7QUFBQSxZQU9wQkMsb0JBQUFBLEVBQXNCLEVBUEY7QUFBQSxTQUF4QjtRQVVBLElBQUlDLG1CQUFBQSxHQUFzQkMsTUFBQUEsSUFBVTtBQUFBLFlBQ2hDQyxNQUFBQSxFQUFRLFNBRHdCO0FBQUEsWUFFaENDLFFBQUFBLEVBQVUsWUFGc0I7QUFBQSxZQUdoQ0MsTUFBQUEsRUFBUSxTQUh3QjtBQUFBLFlBSWhDQyxXQUFBQSxFQUFhLE1BSm1CO0FBQUEsU0FBcEM7UUFRQSxTQUFTQyxXQUFULENBQXNCQyxHQUF0QixFQUEyQkMsUUFBM0IsRUFBcUNDLE1BQXJDLEVBQTZDQyxVQUE3QyxFQUF5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b250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuY29uc3QganMgPSByZXF1aXJlKCcuL2pzJyk7XG5cbi8vIOWinuWKoOmihOWkhOeQhuWxnuaAp+i/meS4quatpemqpOeahOebrueahOaYr+mZjeS9jiBDQ0NsYXNzIOeahOWunueOsOmavuW6pu+8jOWwhuavlOi+g+eos+WumueahOmAmueUqOmAu+i+keWSjOS4gOS6m+mcgOaxguavlOi+g+eBtea0u+eahOWxnuaAp+mcgOaxguWIhumalOW8gOOAglxuXG52YXIgU2VyaWFsaXphYmxlQXR0cnMgPSB7XG4gICAgdXJsOiB7XG4gICAgICAgIGNhblVzZWRJbkdldDogdHJ1ZVxuICAgIH0sXG4gICAgZGVmYXVsdDoge30sXG4gICAgc2VyaWFsaXphYmxlOiB7fSxcbiAgICBlZGl0b3JPbmx5OiB7fSxcbiAgICBmb3JtZXJseVNlcmlhbGl6ZWRBczoge31cbn07XG5cbnZhciBUWVBPX1RPX0NPUlJFQ1RfREVWID0gQ0NfREVWICYmIHtcbiAgICBleHRlbmQ6ICdleHRlbmRzJyxcbiAgICBwcm9wZXJ0eTogJ3Byb3BlcnRpZXMnLFxuICAgIHN0YXRpYzogJ3N0YXRpY3MnLFxuICAgIGNvbnN0cnVjdG9yOiAnY3Rvcidcbn07XG5cbi8vIOmihOWkhOeQhiBub3RpZnkg562J5omp5bGV5bGe5oCnXG5mdW5jdGlvbiBwYXJzZU5vdGlmeSAodmFsLCBwcm9wTmFtZSwgbm90aWZ5LCBwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKHZhbC5nZXQgfHwgdmFsLnNldCkge1xuICAgICAgICBpZiAoQ0NfREVWKSB7XG4gICAgICAgICAgICBjYy53YXJuSUQoNTUwMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmFsLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykpIHtcbiAgICAgICAgLy8g5re75Yqg5paw55qE5YaF6YOo5bGe5oCn77yM5bCG5Y6f5p2l55qE5bGe5oCn5L+u5pS55Li6IGdldHRlci9zZXR0ZXIg5b2i5byPXG4gICAgICAgIC8vIO+8iOS7pSBfIOW8gOWktOWwhuiHquWKqOiuvue9rnByb3BlcnR5IOS4uiB2aXNpYmxlOiBmYWxzZe+8iVxuICAgICAgICB2YXIgbmV3S2V5ID0gXCJfTiRcIiArIHByb3BOYW1lO1xuXG4gICAgICAgIHZhbC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tuZXdLZXldO1xuICAgICAgICB9O1xuICAgICAgICB2YWwuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzW25ld0tleV07XG4gICAgICAgICAgICB0aGlzW25ld0tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG5vdGlmeS5jYWxsKHRoaXMsIG9sZFZhbHVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICB2YWwubm90aWZ5Rm9yID0gbmV3S2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0ge307XG4gICAgICAgIHByb3BlcnRpZXNbbmV3S2V5XSA9IG5ld1ZhbHVlO1xuICAgICAgICAvLyDlsIbkuI3og73nlKjkuo5nZXTmlrnms5XkuK3nmoTlsZ7mgKfnp7vliqjliLBuZXdWYWx1ZeS4rVxuICAgICAgICBmb3IgKHZhciBhdHRyIGluIFNlcmlhbGl6YWJsZUF0dHJzKSB7XG4gICAgICAgICAgICB2YXIgdiA9IFNlcmlhbGl6YWJsZUF0dHJzW2F0dHJdO1xuICAgICAgICAgICAgaWYgKHZhbC5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlW2F0dHJdID0gdmFsW2F0dHJdO1xuICAgICAgICAgICAgICAgIGlmICghdi5jYW5Vc2VkSW5HZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHZhbFthdHRyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoQ0NfREVWKSB7XG4gICAgICAgIGNjLndhcm5JRCg1NTAxKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrVXJsICh2YWwsIGNsYXNzTmFtZSwgcHJvcE5hbWUsIHVybCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHVybCkpIHtcbiAgICAgICAgaWYgKHVybC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB1cmwgPSB1cmxbMF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICByZXR1cm4gY2MuZXJyb3JJRCg1NTAyLCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgIGlmICh1cmwgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGNjLndhcm5JRCg1NTAzLCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHVybCAhPT0gJ2Z1bmN0aW9uJyB8fCAhanMuaXNDaGlsZENsYXNzT2YodXJsLCBjYy5SYXdBc3NldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYy5lcnJvcklEKDU1MDQsIGNsYXNzTmFtZSwgcHJvcE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cmwgPT09IGNjLlJhd0Fzc2V0KSB7XG4gICAgICAgICAgICBjYy53YXJuKCdQbGVhc2UgY2hhbmdlIHRoZSBkZWZpbml0aW9uIG9mIHByb3BlcnR5IFxcJyVzXFwnIGluIGNsYXNzIFxcJyVzXFwnLiBTdGFydGluZyBmcm9tIHYxLjEwLFxcbicgK1xuICAgICAgICAgICAgICAgICAgICAndGhlIHVzZSBvZiBkZWNsYXJpbmcgYSBwcm9wZXJ0eSBpbiBDQ0NsYXNzIGFzIGEgVVJMIGhhcyBiZWVuIGRlcHJlY2F0ZWQuXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICdGb3IgZXhhbXBsZSwgaWYgcHJvcGVydHkgaXMgY2MuUmF3QXNzZXQsIHRoZSBwcmV2aW91cyBkZWZpbml0aW9uIGlzOlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAnICAgICVzOiBjYy5SYXdBc3NldCxcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgJyAgICAvLyBvcjpcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgJyAgICAlczoge1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAnICAgICAgdXJsOiBjYy5SYXdBc3NldCxcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgJyAgICAgIGRlZmF1bHQ6IFwiXCJcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgJyAgICB9LFxcbicgK1xuICAgICAgICAgICAgICAgICAgICAnICAgIC8vIGFuZCB0aGUgb3JpZ2luYWwgbWV0aG9kIHRvIGdldCB1cmwgaXM6XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICcgICAgYHRoaXMuJXNgXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICdOb3cgaXQgc2hvdWxkIGJlIGNoYW5nZWQgdG86XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICcgICAgJXM6IHtcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgJyAgICAgIHR5cGU6IGNjLkFzc2V0LCAgICAgLy8gdXNlIFxcJ3R5cGU6XFwnIHRvIGRlZmluZSBBc3NldCBvYmplY3QgZGlyZWN0bHlcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgJyAgICAgIGRlZmF1bHQ6IG51bGwsICAgICAgLy8gb2JqZWN0XFwncyBkZWZhdWx0IHZhbHVlIGlzIG51bGxcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgJyAgICB9LFxcbicgK1xuICAgICAgICAgICAgICAgICAgICAnICAgIC8vIGFuZCB5b3UgbXVzdCBnZXQgdGhlIHVybCBieSB1c2luZzpcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgJyAgICBgdGhpcy4lcy5uYXRpdmVVcmxgXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICcoVGhpcyBoZWxwcyB1cyB0byBzdWNjZXNzZnVsbHkgcmVmYWN0b3IgYWxsIFJhd0Fzc2V0cyBhdCB2Mi4wLCAnICtcbiAgICAgICAgICAgICAgICAgICAgJ3NvcnJ5IGZvciB0aGUgaW5jb252ZW5pZW5jZS4gXFx1RDgzRFxcdURFMzAgKScsXG4gICAgICAgICAgICAgICAgICAgIHByb3BOYW1lLCBjbGFzc05hbWUsIHByb3BOYW1lLCBwcm9wTmFtZSwgcHJvcE5hbWUsIHByb3BOYW1lLCBwcm9wTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoanMuaXNDaGlsZENsYXNzT2YodXJsLCBjYy5Bc3NldCkpIHtcbiAgICAgICAgICAgIGlmIChjYy5SYXdBc3NldC53YXNSYXdBc3NldFR5cGUodXJsKSkge1xuICAgICAgICAgICAgICAgIGlmICghdmFsLl9zaG9ydCkge1xuICAgICAgICAgICAgICAgICAgICBjYy53YXJuKCdQbGVhc2UgY2hhbmdlIHRoZSBkZWZpbml0aW9uIG9mIHByb3BlcnR5IFxcJyVzXFwnIGluIGNsYXNzIFxcJyVzXFwnLiBTdGFydGluZyBmcm9tIHYxLjEwLFxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aGUgdXNlIG9mIGRlY2xhcmluZyBhIHByb3BlcnR5IGluIENDQ2xhc3MgYXMgYSBVUkwgaGFzIGJlZW4gZGVwcmVjYXRlZC5cXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRm9yIGV4YW1wbGUsIGlmIHByb3BlcnR5IGlzIFRleHR1cmUyRCwgdGhlIHByZXZpb3VzIGRlZmluaXRpb24gaXM6XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAlczogY2MuVGV4dHVyZTJELFxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgLy8gb3I6XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAlczoge1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICB1cmw6IGNjLlRleHR1cmUyRCxcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgZGVmYXVsdDogXCJcIlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgfSxcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTm93IGl0IHNob3VsZCBiZSBjaGFuZ2VkIHRvOlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgJXM6IHtcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgdHlwZTogY2MuVGV4dHVyZTJELCAvLyB1c2UgXFwndHlwZTpcXCcgdG8gZGVmaW5lIFRleHR1cmUyRCBvYmplY3QgZGlyZWN0bHlcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgZGVmYXVsdDogbnVsbCwgICAgICAvLyBvYmplY3RcXCdzIGRlZmF1bHQgdmFsdWUgaXMgbnVsbFxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgfSxcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKFRoaXMgaGVscHMgdXMgdG8gc3VjY2Vzc2Z1bGx5IHJlZmFjdG9yIGFsbCBSYXdBc3NldHMgYXQgdjIuMCwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NvcnJ5IGZvciB0aGUgaW5jb252ZW5pZW5jZS4gXFx1RDgzRFxcdURFMzAgKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcE5hbWUsIGNsYXNzTmFtZSwgcHJvcE5hbWUsIHByb3BOYW1lLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNjLmVycm9ySUQoNTUwNSwgY2xhc3NOYW1lLCBwcm9wTmFtZSwgY2MuanMuZ2V0Q2xhc3NOYW1lKHVybCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwudHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNjLndhcm5JRCg1NTA2LCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YWwudHlwZSA9IHVybDtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlICh2YWwsIHR5cGUsIGNsYXNzTmFtZSwgcHJvcE5hbWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgICBpZiAoQ0NfRURJVE9SICYmICdkZWZhdWx0JyBpbiB2YWwpIHtcbiAgICAgICAgICAgIHZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9DQ0NsYXNzJykuaXNBcnJheTsgICAvLyByZXF1aXJlIGxhemlseSB0byBhdm9pZCBjaXJjdWxhciByZXF1aXJlKCkgY2FsbHNcbiAgICAgICAgICAgIGlmICghaXNBcnJheSh2YWwuZGVmYXVsdCkpIHtcbiAgICAgICAgICAgICAgICBjYy53YXJuSUQoNTUwNywgY2xhc3NOYW1lLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKGNjLlJhd0Fzc2V0LmlzUmF3QXNzZXRUeXBlKHR5cGVbMF0pKSB7XG4gICAgICAgICAgICAgICAgdmFsLnVybCA9IHR5cGVbMF07XG4gICAgICAgICAgICAgICAgZGVsZXRlIHZhbC50eXBlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbC50eXBlID0gdHlwZSA9IHR5cGVbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY2MuZXJyb3JJRCg1NTA4LCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaWYgKGNjLlJhd0Fzc2V0LmlzUmF3QXNzZXRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDU1MDksIGNsYXNzTmFtZSwgcHJvcE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGpzLmdldENsYXNzTmFtZSh0eXBlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICAgICAgICAgIGNjLndhcm5JRCg1NTEwLCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlID09IG51bGwpIHtcbiAgICAgICAgICAgIGNjLndhcm5JRCg1NTExLCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcG9zdENoZWNrVHlwZSAodmFsLCB0eXBlLCBjbGFzc05hbWUsIHByb3BOYW1lKSB7XG4gICAgaWYgKENDX0VESVRPUiAmJiB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoY2MuQ2xhc3MuX2lzQ0NDbGFzcyh0eXBlKSAmJiB2YWwuc2VyaWFsaXphYmxlICE9PSBmYWxzZSAmJiAhanMuX2dldENsYXNzSWQodHlwZSwgZmFsc2UpKSB7XG4gICAgICAgICAgICBjYy53YXJuSUQoNTUxMiwgY2xhc3NOYW1lLCBwcm9wTmFtZSwgY2xhc3NOYW1lLCBwcm9wTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEJhc2VDbGFzc1doZXJlUHJvcGVydHlEZWZpbmVkX0RFViAocHJvcE5hbWUsIGNscykge1xuICAgIGlmIChDQ19ERVYpIHtcbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgZm9yICg7IGNscyAmJiBjbHMuX19wcm9wc19fICYmIGNscy5fX3Byb3BzX18uaW5kZXhPZihwcm9wTmFtZSkgIT09IC0xOyBjbHMgPSBjbHMuJHN1cGVyKSB7XG4gICAgICAgICAgICByZXMgPSBjbHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXMpIHtcbiAgICAgICAgICAgIGNjLmVycm9yKCd1bmtub3duIGVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG59XG5cbmV4cG9ydHMuZ2V0RnVsbEZvcm1PZlByb3BlcnR5ID0gZnVuY3Rpb24gKG9wdGlvbnMsIHByb3BuYW1lX2RldiwgY2xhc3NuYW1lX2Rldikge1xuICAgIHZhciBpc0xpdGVyYWwgPSBvcHRpb25zICYmIG9wdGlvbnMuY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiAgICBpZiAoICFpc0xpdGVyYWwgKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMpICYmIG9wdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBvcHRpb25zWzBdO1xuICAgICAgICAgICAgaWYgKENDX0RFViAmJiBjYy5SYXdBc3NldC53YXNSYXdBc3NldFR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBkZXByZWNhdGUgYG15UHJvcDogW2NjLlRleHR1cmUyRF1gIHNpbmNlIDEuMTBcbiAgICAgICAgICAgICAgICBjYy53YXJuKCdQbGVhc2UgY2hhbmdlIHRoZSBkZWZpbml0aW9uIG9mIHByb3BlcnR5IFxcJyVzXFwnIGluIGNsYXNzIFxcJyVzXFwnLiBTdGFydGluZyBmcm9tIHYxLjEwLFxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Byb3BlcnRpZXMgaW4gQ0NDbGFzcyBjYW4gbm90IGJlIGFiYnJldmlhdGVkIGlmIHRoZXkgYXJlIG9mIHR5cGUgUmF3QXNzZXQuXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnUGxlYXNlIHVzZSB0aGUgY29tcGxldGUgZm9ybS5cXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdGb3IgZXhhbXBsZSwgaWYgcHJvcGVydHkgaXMgVGV4dHVyZTJEXFwncyB1cmwgYXJyYXksIHRoZSBwcmV2aW91cyBkZWZpbml0aW9uIGlzOlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAlczogW2NjLlRleHR1cmUyRF0sXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnSWYgeW91IHVzZSBKUywgaXQgc2hvdWxkIGJlIGNoYW5nZWQgdG86XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnICAgICVzOiB7XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgdHlwZTogY2MuVGV4dHVyZTJELCAvLyB1c2UgXFwndHlwZTpcXCcgdG8gZGVmaW5lIGFuIGFycmF5IG9mIFRleHR1cmUyRCBvYmplY3RzXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgZGVmYXVsdDogW11cXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgICAgfSxcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdJZiB5b3UgdXNlIFRTLCBpdCBzaG91bGQgYmUgY2hhbmdlZCB0bzpcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgICAgJXM6IHtcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICB0eXBlOiBjYy5UZXh0dXJlMkQsIC8vIHVzZSBcXCd0eXBlOlxcJyB0byBkZWZpbmUgYW4gYXJyYXkgb2YgVGV4dHVyZTJEIG9iamVjdHNcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgICAgfVxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyAgICVzOiBjYy5UZXh0dXJlMkRbXSA9IFtdO1xcbicrXG4gICAgICAgICAgICAgICAgICAgICAgICAnKFRoaXMgaGVscHMgdXMgdG8gc3VjY2Vzc2Z1bGx5IHJlZmFjdG9yIGFsbCBSYXdBc3NldHMgYXQgdjIuMCwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnc29ycnkgZm9yIHRoZSBpbmNvbnZlbmllbmNlLiBcXHVEODNEXFx1REUzMCApJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BuYW1lX2RldiwgY2xhc3NuYW1lX2RldiwgcHJvcG5hbWVfZGV2LCBwcm9wbmFtZV9kZXYpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFtdLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIF9zaG9ydDogdHJ1ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFtdLFxuICAgICAgICAgICAgICAgIHR5cGU6IG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgX3Nob3J0OiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IG9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoIWNjLlJhd0Fzc2V0LmlzUmF3QXNzZXRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNjLlJhd0Fzc2V0Lndhc1Jhd0Fzc2V0VHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBkZXByZWNhdGUgYG15UHJvcDogY2MuVGV4dHVyZTJEYCBzaW5jZSAxLjEwXG4gICAgICAgICAgICAgICAgICAgIGlmIChDQ19ERVYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLndhcm4oJ1BsZWFzZSBjaGFuZ2UgdGhlIGRlZmluaXRpb24gb2YgcHJvcGVydHkgXFwnJXNcXCcgaW4gY2xhc3MgXFwnJXNcXCcuIFN0YXJ0aW5nIGZyb20gdjEuMTAsXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwcm9wZXJ0aWVzIGluIENDQ2xhc3MgY2FuIG5vdCBiZSBhYmJyZXZpYXRlZCBpZiB0aGV5IGFyZSBvZiB0eXBlIFJhd0Fzc2V0LlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGxlYXNlIHVzZSB0aGUgY29tcGxldGUgZm9ybS5cXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZvciBleGFtcGxlLCBpZiB0aGUgdHlwZSBpcyBUZXh0dXJlMkQsIHRoZSBwcmV2aW91cyBkZWZpbml0aW9uIGlzOlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICVzOiBjYy5UZXh0dXJlMkQsXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdJZiB5b3UgdXNlIEpTLCBpdCBzaG91bGQgYmUgY2hhbmdlZCB0bzpcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAlczoge1xcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgdHlwZTogY2MuVGV4dHVyZTJEIC8vIHVzZSBcXCd0eXBlOlxcJyB0byBkZWZpbmUgVGV4dHVyZTJEIG9iamVjdCBkaXJlY3RseVxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgZGVmYXVsdDogbnVsbCwgICAgIC8vIG9iamVjdFxcJ3MgZGVmYXVsdCB2YWx1ZSBpcyBudWxsXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgfSxcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0lmIHlvdSB1c2UgVFMsIGl0IHNob3VsZCBiZSBjaGFuZ2VkIHRvOlxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICVzOiB7XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICB0eXBlOiBjYy5UZXh0dXJlMkQgLy8gdXNlIFxcJ3R5cGU6XFwnIHRvIGRlZmluZSBUZXh0dXJlMkQgb2JqZWN0IGRpcmVjdGx5XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgfVxcbicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICVzOiBjYy5UZXh0dXJlMkQgPSBudWxsO1xcbicrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcoVGhpcyBoZWxwcyB1cyB0byBzdWNjZXNzZnVsbHkgcmVmYWN0b3IgYWxsIFJhd0Fzc2V0cyBhdCB2Mi4wLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NvcnJ5IGZvciB0aGUgaW5jb252ZW5pZW5jZS4gXFx1RDgzRFxcdURFMzAgKScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BuYW1lX2RldiwgY2xhc3NuYW1lX2RldiwgcHJvcG5hbWVfZGV2LCBwcm9wbmFtZV9kZXYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoganMuaXNDaGlsZENsYXNzT2YodHlwZSwgY2MuVmFsdWVUeXBlKSA/IG5ldyB0eXBlKCkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zaG9ydDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJycsXG4gICAgICAgICAgICAgICAgdXJsOiB0eXBlLFxuICAgICAgICAgICAgICAgIF9zaG9ydDogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBfc2hvcnQ6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnRzLnByZXByb2Nlc3NBdHRycyA9IGZ1bmN0aW9uIChwcm9wZXJ0aWVzLCBjbGFzc05hbWUsIGNscywgZXM2KSB7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcGVydGllcykge1xuICAgICAgICB2YXIgdmFsID0gcHJvcGVydGllc1twcm9wTmFtZV07XG4gICAgICAgIHZhciBmdWxsRm9ybSA9IGV4cG9ydHMuZ2V0RnVsbEZvcm1PZlByb3BlcnR5KHZhbCwgcHJvcE5hbWUsIGNsYXNzTmFtZSk7XG4gICAgICAgIGlmIChmdWxsRm9ybSkge1xuICAgICAgICAgICAgdmFsID0gcHJvcGVydGllc1twcm9wTmFtZV0gPSBmdWxsRm9ybTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbC5nZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoNTUxMywgY2xhc3NOYW1lLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsLnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3JJRCg1NTE0LCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjYy5DbGFzcy5faXNDQ0NsYXNzKHZhbC5kZWZhdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsLmRlZmF1bHQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3JJRCg1NTE1LCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghdmFsLmdldCAmJiAhdmFsLnNldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF5YmVUeXBlU2NyaXB0ID0gZXM2O1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW1heWJlVHlwZVNjcmlwdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3JJRCg1NTE2LCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChDQ19ERVYgJiYgIXZhbC5vdmVycmlkZSAmJiBjbHMuX19wcm9wc19fLmluZGV4T2YocHJvcE5hbWUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIG92ZXJyaWRlXG4gICAgICAgICAgICAgICAgdmFyIGJhc2VDbGFzcyA9IGpzLmdldENsYXNzTmFtZShnZXRCYXNlQ2xhc3NXaGVyZVByb3BlcnR5RGVmaW5lZF9ERVYocHJvcE5hbWUsIGNscykpO1xuICAgICAgICAgICAgICAgIGNjLndhcm5JRCg1NTE3LCBjbGFzc05hbWUsIHByb3BOYW1lLCBiYXNlQ2xhc3MsIHByb3BOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBub3RpZnkgPSB2YWwubm90aWZ5O1xuICAgICAgICAgICAgaWYgKG5vdGlmeSkge1xuICAgICAgICAgICAgICAgIGlmIChDQ19ERVYgJiYgZXM2KSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmVycm9yKCdub3QgeWV0IHN1cHBvcnQgbm90aWZ5IGF0dHJpYnV0ZSBmb3IgRVM2IENsYXNzZXMnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlTm90aWZ5KHZhbCwgcHJvcE5hbWUsIG5vdGlmeSwgcHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJ3R5cGUnIGluIHZhbCkge1xuICAgICAgICAgICAgICAgIHBhcnNlVHlwZSh2YWwsIHZhbC50eXBlLCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCd1cmwnIGluIHZhbCkge1xuICAgICAgICAgICAgICAgIGNoZWNrVXJsKHZhbCwgY2xhc3NOYW1lLCBwcm9wTmFtZSwgdmFsLnVybCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgndHlwZScgaW4gdmFsKSB7XG4gICAgICAgICAgICAgICAgcG9zdENoZWNrVHlwZSh2YWwsIHZhbC50eXBlLCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmlmIChDQ19ERVYpIHtcbiAgICBjb25zdCBDQUxMX1NVUEVSX0RFU1RST1lfUkVHX0RFViA9IC9cXGJcXC5fc3VwZXJcXGJ8ZGVzdHJveVxccypcXC5cXHMqY2FsbFxccypcXChcXHMqXFx3K1xccypbLHwpXS87XG4gICAgZXhwb3J0cy5kb1ZhbGlkYXRlTWV0aG9kV2l0aFByb3BzX0RFViA9IGZ1bmN0aW9uIChmdW5jLCBmdW5jTmFtZSwgY2xhc3NOYW1lLCBjbHMsIGJhc2UpIHtcbiAgICAgICAgaWYgKGNscy5fX3Byb3BzX18gJiYgY2xzLl9fcHJvcHNfXy5pbmRleE9mKGZ1bmNOYW1lKSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBmaW5kIGNsYXNzIHRoYXQgZGVmaW5lcyB0aGlzIG1ldGhvZCBhcyBhIHByb3BlcnR5XG4gICAgICAgICAgICB2YXIgYmFzZUNsYXNzTmFtZSA9IGpzLmdldENsYXNzTmFtZShnZXRCYXNlQ2xhc3NXaGVyZVByb3BlcnR5RGVmaW5lZF9ERVYoZnVuY05hbWUsIGNscykpO1xuICAgICAgICAgICAgY2MuZXJyb3JJRCgzNjQ4LCBjbGFzc05hbWUsIGZ1bmNOYW1lLCBiYXNlQ2xhc3NOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnVuY05hbWUgPT09ICdkZXN0cm95JyAmJlxuICAgICAgICAgICAganMuaXNDaGlsZENsYXNzT2YoYmFzZSwgY2MuQ29tcG9uZW50KSAmJlxuICAgICAgICAgICAgIUNBTExfU1VQRVJfREVTVFJPWV9SRUdfREVWLnRlc3QoZnVuYylcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjYy5lcnJvcihgT3ZlcndyaXRpbmcgJyR7ZnVuY05hbWV9JyBmdW5jdGlvbiBpbiAnJHtjbGFzc05hbWV9JyBjbGFzcyB3aXRob3V0IGNhbGxpbmcgc3VwZXIgaXMgbm90IGFsbG93ZWQuIENhbGwgdGhlIHN1cGVyIGZ1bmN0aW9uIGluICcke2Z1bmNOYW1lfScgcGxlYXNlLmApO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0cy52YWxpZGF0ZU1ldGhvZFdpdGhQcm9wcyA9IGZ1bmN0aW9uIChmdW5jLCBmdW5jTmFtZSwgY2xhc3NOYW1lLCBjbHMsIGJhc2UpIHtcbiAgICBpZiAoQ0NfREVWICYmIGZ1bmNOYW1lID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIGNjLmVycm9ySUQoMzY0MywgY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicgfHwgZnVuYyA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoQ0NfREVWKSB7XG4gICAgICAgICAgICB0aGlzLmRvVmFsaWRhdGVNZXRob2RXaXRoUHJvcHNfREVWKGZ1bmMsIGZ1bmNOYW1lLCBjbGFzc05hbWUsIGNscywgYmFzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChDQ19ERVYpIHtcbiAgICAgICAgICAgIGlmIChmdW5jID09PSBmYWxzZSAmJiBiYXNlICYmIGJhc2UucHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgb3ZlcnJpZGVcbiAgICAgICAgICAgICAgICB2YXIgb3ZlcnJpZGVkID0gYmFzZS5wcm90b3R5cGVbZnVuY05hbWVdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3ZlcnJpZGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiYXNlRnVjID0ganMuZ2V0Q2xhc3NOYW1lKGJhc2UpICsgJy4nICsgZnVuY05hbWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJGdWMgPSBjbGFzc05hbWUgKyAnLicgKyBmdW5jTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgY2Mud2FybklEKDM2MjQsIHN1YkZ1YywgYmFzZUZ1Yywgc3ViRnVjLCBzdWJGdWMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb3JyZWN0ID0gVFlQT19UT19DT1JSRUNUX0RFVltmdW5jTmFtZV07XG4gICAgICAgICAgICBpZiAoY29ycmVjdCkge1xuICAgICAgICAgICAgICAgIGNjLndhcm5JRCgzNjIxLCBjbGFzc05hbWUsIGZ1bmNOYW1lLCBjb3JyZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGZ1bmMpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDM2MjIsIGNsYXNzTmFtZSwgZnVuY05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBqcyA9IHJlcXVpcmUoJy4vanMnKTtcblxuLy8g5aKe5Yqg6aKE5aSE55CG5bGe5oCn6L+Z5Liq5q2l6aqk55qE55uu55qE5piv6ZmN5L2OIENDQ2xhc3Mg55qE5a6e546w6Zq+5bqm77yM5bCG5q+U6L6D56iz5a6a55qE6YCa55So6YC76L6R5ZKM5LiA5Lqb6ZyA5rGC5q+U6L6D54G15rS755qE5bGe5oCn6ZyA5rGC5YiG6ZqU5byA44CCXG5cbnZhciBTZXJpYWxpemFibGVBdHRycyA9IHtcbiAgICB1cmw6IHtcbiAgICAgICAgY2FuVXNlZEluR2V0OiB0cnVlXG4gICAgfSxcbiAgICBkZWZhdWx0OiB7fSxcbiAgICBzZXJpYWxpemFibGU6IHt9LFxuICAgIGVkaXRvck9ubHk6IHt9LFxuICAgIGZvcm1lcmx5U2VyaWFsaXplZEFzOiB7fVxufTtcblxudmFyIFRZUE9fVE9fQ09SUkVDVF9ERVYgPSBDQ19ERVYgJiYge1xuICAgIGV4dGVuZDogJ2V4dGVuZHMnLFxuICAgIHByb3BlcnR5OiAncHJvcGVydGllcycsXG4gICAgc3RhdGljOiAnc3RhdGljcycsXG4gICAgY29uc3RydWN0b3I6ICdjdG9yJ1xufTtcblxuLy8g6aKE5aSE55CGIG5vdGlmeSDnrYnmianlsZXlsZ7mgKdcbmZ1bmN0aW9uIHBhcnNlTm90aWZ5KHZhbCwgcHJvcE5hbWUsIG5vdGlmeSwgcHJvcGVydGllcykge1xuICAgIGlmICh2YWwuZ2V0IHx8IHZhbC5zZXQpIHtcbiAgICAgICAgaWYgKENDX0RFVikge1xuICAgICAgICAgICAgY2Mud2FybklEKDU1MDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHZhbC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpKSB7XG4gICAgICAgIC8vIOa3u+WKoOaWsOeahOWGhemDqOWxnuaAp++8jOWwhuWOn+adpeeahOWxnuaAp+S/ruaUueS4uiBnZXR0ZXIvc2V0dGVyIOW9ouW8j1xuICAgICAgICAvLyDvvIjku6UgXyDlvIDlpLTlsIboh6rliqjorr7nva5wcm9wZXJ0eSDkuLogdmlzaWJsZTogZmFsc2XvvIlcbiAgICAgICAgdmFyIG5ld0tleSA9IFwiX04kXCIgKyBwcm9wTmFtZTtcblxuICAgICAgICB2YWwuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbbmV3S2V5XTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFsLnNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpc1tuZXdLZXldO1xuICAgICAgICAgICAgdGhpc1tuZXdLZXldID0gdmFsdWU7XG4gICAgICAgICAgICBub3RpZnkuY2FsbCh0aGlzLCBvbGRWYWx1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKENDX0VESVRPUikge1xuICAgICAgICAgICAgdmFsLm5vdGlmeUZvciA9IG5ld0tleTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IHt9O1xuICAgICAgICBwcm9wZXJ0aWVzW25ld0tleV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgLy8g5bCG5LiN6IO955So5LqOZ2V05pa55rOV5Lit55qE5bGe5oCn56e75Yqo5YiwbmV3VmFsdWXkuK1cbiAgICAgICAgZm9yICh2YXIgYXR0ciBpbiBTZXJpYWxpemFibGVBdHRycykge1xuICAgICAgICAgICAgdmFyIHYgPSBTZXJpYWxpemFibGVBdHRyc1thdHRyXTtcbiAgICAgICAgICAgIGlmICh2YWwuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZVthdHRyXSA9IHZhbFthdHRyXTtcbiAgICAgICAgICAgICAgICBpZiAoIXYuY2FuVXNlZEluR2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWxbYXR0cl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChDQ19ERVYpIHtcbiAgICAgICAgY2Mud2FybklEKDU1MDEpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tVcmwodmFsLCBjbGFzc05hbWUsIHByb3BOYW1lLCB1cmwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh1cmwpKSB7XG4gICAgICAgIGlmICh1cmwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdXJsID0gdXJsWzBdO1xuICAgICAgICB9IGVsc2UgaWYgKENDX0VESVRPUikge1xuICAgICAgICAgICAgcmV0dXJuIGNjLmVycm9ySUQoNTUwMiwgY2xhc3NOYW1lLCBwcm9wTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKENDX0VESVRPUikge1xuICAgICAgICBpZiAodXJsID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjYy53YXJuSUQoNTUwMywgY2xhc3NOYW1lLCBwcm9wTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB1cmwgIT09ICdmdW5jdGlvbicgfHwgIWpzLmlzQ2hpbGRDbGFzc09mKHVybCwgY2MuUmF3QXNzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2MuZXJyb3JJRCg1NTA0LCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodXJsID09PSBjYy5SYXdBc3NldCkge1xuICAgICAgICAgICAgY2Mud2FybignUGxlYXNlIGNoYW5nZSB0aGUgZGVmaW5pdGlvbiBvZiBwcm9wZXJ0eSBcXCclc1xcJyBpbiBjbGFzcyBcXCclc1xcJy4gU3RhcnRpbmcgZnJvbSB2MS4xMCxcXG4nICsgJ3RoZSB1c2Ugb2YgZGVjbGFyaW5nIGEgcHJvcGVydHkgaW4gQ0NDbGFzcyBhcyBhIFVSTCBoYXMgYmVlbiBkZXByZWNhdGVkLlxcbicgKyAnRm9yIGV4YW1wbGUsIGlmIHByb3BlcnR5IGlzIGNjLlJhd0Fzc2V0LCB0aGUgcHJldmlvdXMgZGVmaW5pdGlvbiBpczpcXG4nICsgJyAgICAlczogY2MuUmF3QXNzZXQsXFxuJyArICcgICAgLy8gb3I6XFxuJyArICcgICAgJXM6IHtcXG4nICsgJyAgICAgIHVybDogY2MuUmF3QXNzZXQsXFxuJyArICcgICAgICBkZWZhdWx0OiBcIlwiXFxuJyArICcgICAgfSxcXG4nICsgJyAgICAvLyBhbmQgdGhlIG9yaWdpbmFsIG1ldGhvZCB0byBnZXQgdXJsIGlzOlxcbicgKyAnICAgIGB0aGlzLiVzYFxcbicgKyAnTm93IGl0IHNob3VsZCBiZSBjaGFuZ2VkIHRvOlxcbicgKyAnICAgICVzOiB7XFxuJyArICcgICAgICB0eXBlOiBjYy5Bc3NldCwgICAgIC8vIHVzZSBcXCd0eXBlOlxcJyB0byBkZWZpbmUgQXNzZXQgb2JqZWN0IGRpcmVjdGx5XFxuJyArICcgICAgICBkZWZhdWx0OiBudWxsLCAgICAgIC8vIG9iamVjdFxcJ3MgZGVmYXVsdCB2YWx1ZSBpcyBudWxsXFxuJyArICcgICAgfSxcXG4nICsgJyAgICAvLyBhbmQgeW91IG11c3QgZ2V0IHRoZSB1cmwgYnkgdXNpbmc6XFxuJyArICcgICAgYHRoaXMuJXMubmF0aXZlVXJsYFxcbicgKyAnKFRoaXMgaGVscHMgdXMgdG8gc3VjY2Vzc2Z1bGx5IHJlZmFjdG9yIGFsbCBSYXdBc3NldHMgYXQgdjIuMCwgJyArICdzb3JyeSBmb3IgdGhlIGluY29udmVuaWVuY2UuIFxcdUQ4M0RcXHVERTMwICknLCBwcm9wTmFtZSwgY2xhc3NOYW1lLCBwcm9wTmFtZSwgcHJvcE5hbWUsIHByb3BOYW1lLCBwcm9wTmFtZSwgcHJvcE5hbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGpzLmlzQ2hpbGRDbGFzc09mKHVybCwgY2MuQXNzZXQpKSB7XG4gICAgICAgICAgICBpZiAoY2MuUmF3QXNzZXQud2FzUmF3QXNzZXRUeXBlKHVybCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbC5fc2hvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2Mud2FybignUGxlYXNlIGNoYW5nZSB0aGUgZGVmaW5pdGlvbiBvZiBwcm9wZXJ0eSBcXCclc1xcJyBpbiBjbGFzcyBcXCclc1xcJy4gU3RhcnRpbmcgZnJvbSB2MS4xMCxcXG4nICsgJ3RoZSB1c2Ugb2YgZGVjbGFyaW5nIGEgcHJvcGVydHkgaW4gQ0NDbGFzcyBhcyBhIFVSTCBoYXMgYmVlbiBkZXByZWNhdGVkLlxcbicgKyAnRm9yIGV4YW1wbGUsIGlmIHByb3BlcnR5IGlzIFRleHR1cmUyRCwgdGhlIHByZXZpb3VzIGRlZmluaXRpb24gaXM6XFxuJyArICcgICAgJXM6IGNjLlRleHR1cmUyRCxcXG4nICsgJyAgICAvLyBvcjpcXG4nICsgJyAgICAlczoge1xcbicgKyAnICAgICAgdXJsOiBjYy5UZXh0dXJlMkQsXFxuJyArICcgICAgICBkZWZhdWx0OiBcIlwiXFxuJyArICcgICAgfSxcXG4nICsgJ05vdyBpdCBzaG91bGQgYmUgY2hhbmdlZCB0bzpcXG4nICsgJyAgICAlczoge1xcbicgKyAnICAgICAgdHlwZTogY2MuVGV4dHVyZTJELCAvLyB1c2UgXFwndHlwZTpcXCcgdG8gZGVmaW5lIFRleHR1cmUyRCBvYmplY3QgZGlyZWN0bHlcXG4nICsgJyAgICAgIGRlZmF1bHQ6IG51bGwsICAgICAgLy8gb2JqZWN0XFwncyBkZWZhdWx0IHZhbHVlIGlzIG51bGxcXG4nICsgJyAgICB9LFxcbicgKyAnKFRoaXMgaGVscHMgdXMgdG8gc3VjY2Vzc2Z1bGx5IHJlZmFjdG9yIGFsbCBSYXdBc3NldHMgYXQgdjIuMCwgJyArICdzb3JyeSBmb3IgdGhlIGluY29udmVuaWVuY2UuIFxcdUQ4M0RcXHVERTMwICknLCBwcm9wTmFtZSwgY2xhc3NOYW1lLCBwcm9wTmFtZSwgcHJvcE5hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYy5lcnJvcklEKDU1MDUsIGNsYXNzTmFtZSwgcHJvcE5hbWUsIGNjLmpzLmdldENsYXNzTmFtZSh1cmwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsLnR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBjYy53YXJuSUQoNTUwNiwgY2xhc3NOYW1lLCBwcm9wTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFsLnR5cGUgPSB1cmw7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZSh2YWwsIHR5cGUsIGNsYXNzTmFtZSwgcHJvcE5hbWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgICBpZiAoQ0NfRURJVE9SICYmICdkZWZhdWx0JyBpbiB2YWwpIHtcbiAgICAgICAgICAgIHZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9DQ0NsYXNzJykuaXNBcnJheTsgLy8gcmVxdWlyZSBsYXppbHkgdG8gYXZvaWQgY2lyY3VsYXIgcmVxdWlyZSgpIGNhbGxzXG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkodmFsLmRlZmF1bHQpKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDU1MDcsIGNsYXNzTmFtZSwgcHJvcE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmIChjYy5SYXdBc3NldC5pc1Jhd0Fzc2V0VHlwZSh0eXBlWzBdKSkge1xuICAgICAgICAgICAgICAgIHZhbC51cmwgPSB0eXBlWzBdO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWwudHlwZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbC50eXBlID0gdHlwZSA9IHR5cGVbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY2MuZXJyb3JJRCg1NTA4LCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaWYgKGNjLlJhd0Fzc2V0LmlzUmF3QXNzZXRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDU1MDksIGNsYXNzTmFtZSwgcHJvcE5hbWUsIGpzLmdldENsYXNzTmFtZSh0eXBlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICAgICAgICAgIGNjLndhcm5JRCg1NTEwLCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09IG51bGwpIHtcbiAgICAgICAgICAgIGNjLndhcm5JRCg1NTExLCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcG9zdENoZWNrVHlwZSh2YWwsIHR5cGUsIGNsYXNzTmFtZSwgcHJvcE5hbWUpIHtcbiAgICBpZiAoQ0NfRURJVE9SICYmIHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlmIChjYy5DbGFzcy5faXNDQ0NsYXNzKHR5cGUpICYmIHZhbC5zZXJpYWxpemFibGUgIT09IGZhbHNlICYmICFqcy5fZ2V0Q2xhc3NJZCh0eXBlLCBmYWxzZSkpIHtcbiAgICAgICAgICAgIGNjLndhcm5JRCg1NTEyLCBjbGFzc05hbWUsIHByb3BOYW1lLCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0QmFzZUNsYXNzV2hlcmVQcm9wZXJ0eURlZmluZWRfREVWKHByb3BOYW1lLCBjbHMpIHtcbiAgICBpZiAoQ0NfREVWKSB7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIGZvciAoOyBjbHMgJiYgY2xzLl9fcHJvcHNfXyAmJiBjbHMuX19wcm9wc19fLmluZGV4T2YocHJvcE5hbWUpICE9PSAtMTsgY2xzID0gY2xzLiRzdXBlcikge1xuICAgICAgICAgICAgcmVzID0gY2xzO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVzKSB7XG4gICAgICAgICAgICBjYy5lcnJvcigndW5rbm93biBlcnJvcicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufVxuXG5leHBvcnRzLmdldEZ1bGxGb3JtT2ZQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvcHRpb25zLCBwcm9wbmFtZV9kZXYsIGNsYXNzbmFtZV9kZXYpIHtcbiAgICB2YXIgaXNMaXRlcmFsID0gb3B0aW9ucyAmJiBvcHRpb25zLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG4gICAgaWYgKCFpc0xpdGVyYWwpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucykgJiYgb3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IG9wdGlvbnNbMF07XG4gICAgICAgICAgICBpZiAoQ0NfREVWICYmIGNjLlJhd0Fzc2V0Lndhc1Jhd0Fzc2V0VHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgICAgIC8vIGRlcHJlY2F0ZSBgbXlQcm9wOiBbY2MuVGV4dHVyZTJEXWAgc2luY2UgMS4xMFxuICAgICAgICAgICAgICAgIGNjLndhcm4oJ1BsZWFzZSBjaGFuZ2UgdGhlIGRlZmluaXRpb24gb2YgcHJvcGVydHkgXFwnJXNcXCcgaW4gY2xhc3MgXFwnJXNcXCcuIFN0YXJ0aW5nIGZyb20gdjEuMTAsXFxuJyArICdwcm9wZXJ0aWVzIGluIENDQ2xhc3MgY2FuIG5vdCBiZSBhYmJyZXZpYXRlZCBpZiB0aGV5IGFyZSBvZiB0eXBlIFJhd0Fzc2V0LlxcbicgKyAnUGxlYXNlIHVzZSB0aGUgY29tcGxldGUgZm9ybS5cXG4nICsgJ0ZvciBleGFtcGxlLCBpZiBwcm9wZXJ0eSBpcyBUZXh0dXJlMkRcXCdzIHVybCBhcnJheSwgdGhlIHByZXZpb3VzIGRlZmluaXRpb24gaXM6XFxuJyArICcgICAgJXM6IFtjYy5UZXh0dXJlMkRdLFxcbicgKyAnSWYgeW91IHVzZSBKUywgaXQgc2hvdWxkIGJlIGNoYW5nZWQgdG86XFxuJyArICcgICAgJXM6IHtcXG4nICsgJyAgICAgIHR5cGU6IGNjLlRleHR1cmUyRCwgLy8gdXNlIFxcJ3R5cGU6XFwnIHRvIGRlZmluZSBhbiBhcnJheSBvZiBUZXh0dXJlMkQgb2JqZWN0c1xcbicgKyAnICAgICAgZGVmYXVsdDogW11cXG4nICsgJyAgICB9LFxcbicgKyAnSWYgeW91IHVzZSBUUywgaXQgc2hvdWxkIGJlIGNoYW5nZWQgdG86XFxuJyArICcgICAgJXM6IHtcXG4nICsgJyAgICAgIHR5cGU6IGNjLlRleHR1cmUyRCwgLy8gdXNlIFxcJ3R5cGU6XFwnIHRvIGRlZmluZSBhbiBhcnJheSBvZiBUZXh0dXJlMkQgb2JqZWN0c1xcbicgKyAnICAgIH1cXG4nICsgJyAgICVzOiBjYy5UZXh0dXJlMkRbXSA9IFtdO1xcbicgKyAnKFRoaXMgaGVscHMgdXMgdG8gc3VjY2Vzc2Z1bGx5IHJlZmFjdG9yIGFsbCBSYXdBc3NldHMgYXQgdjIuMCwgJyArICdzb3JyeSBmb3IgdGhlIGluY29udmVuaWVuY2UuIFxcdUQ4M0RcXHVERTMwICknLCBwcm9wbmFtZV9kZXYsIGNsYXNzbmFtZV9kZXYsIHByb3BuYW1lX2RldiwgcHJvcG5hbWVfZGV2KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiBbXSxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBvcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBfc2hvcnQ6IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBbXSxcbiAgICAgICAgICAgICAgICB0eXBlOiBvcHRpb25zLFxuICAgICAgICAgICAgICAgIF9zaG9ydDogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBvcHRpb25zO1xuICAgICAgICAgICAgaWYgKCFjYy5SYXdBc3NldC5pc1Jhd0Fzc2V0VHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgICAgIGlmIChjYy5SYXdBc3NldC53YXNSYXdBc3NldFR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVwcmVjYXRlIGBteVByb3A6IGNjLlRleHR1cmUyRGAgc2luY2UgMS4xMFxuICAgICAgICAgICAgICAgICAgICBpZiAoQ0NfREVWKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYy53YXJuKCdQbGVhc2UgY2hhbmdlIHRoZSBkZWZpbml0aW9uIG9mIHByb3BlcnR5IFxcJyVzXFwnIGluIGNsYXNzIFxcJyVzXFwnLiBTdGFydGluZyBmcm9tIHYxLjEwLFxcbicgKyAncHJvcGVydGllcyBpbiBDQ0NsYXNzIGNhbiBub3QgYmUgYWJicmV2aWF0ZWQgaWYgdGhleSBhcmUgb2YgdHlwZSBSYXdBc3NldC5cXG4nICsgJ1BsZWFzZSB1c2UgdGhlIGNvbXBsZXRlIGZvcm0uXFxuJyArICdGb3IgZXhhbXBsZSwgaWYgdGhlIHR5cGUgaXMgVGV4dHVyZTJELCB0aGUgcHJldmlvdXMgZGVmaW5pdGlvbiBpczpcXG4nICsgJyAgICAlczogY2MuVGV4dHVyZTJELFxcbicgKyAnSWYgeW91IHVzZSBKUywgaXQgc2hvdWxkIGJlIGNoYW5nZWQgdG86XFxuJyArICcgICAgJXM6IHtcXG4nICsgJyAgICAgIHR5cGU6IGNjLlRleHR1cmUyRCAvLyB1c2UgXFwndHlwZTpcXCcgdG8gZGVmaW5lIFRleHR1cmUyRCBvYmplY3QgZGlyZWN0bHlcXG4nICsgJyAgICAgIGRlZmF1bHQ6IG51bGwsICAgICAvLyBvYmplY3RcXCdzIGRlZmF1bHQgdmFsdWUgaXMgbnVsbFxcbicgKyAnICAgIH0sXFxuJyArICdJZiB5b3UgdXNlIFRTLCBpdCBzaG91bGQgYmUgY2hhbmdlZCB0bzpcXG4nICsgJyAgICAlczoge1xcbicgKyAnICAgICAgdHlwZTogY2MuVGV4dHVyZTJEIC8vIHVzZSBcXCd0eXBlOlxcJyB0byBkZWZpbmUgVGV4dHVyZTJEIG9iamVjdCBkaXJlY3RseVxcbicgKyAnICAgIH1cXG4nICsgJyAgICAlczogY2MuVGV4dHVyZTJEID0gbnVsbDtcXG4nICsgJyhUaGlzIGhlbHBzIHVzIHRvIHN1Y2Nlc3NmdWxseSByZWZhY3RvciBhbGwgUmF3QXNzZXRzIGF0IHYyLjAsICcgKyAnc29ycnkgZm9yIHRoZSBpbmNvbnZlbmllbmNlLiBcXHVEODNEXFx1REUzMCApJywgcHJvcG5hbWVfZGV2LCBjbGFzc25hbWVfZGV2LCBwcm9wbmFtZV9kZXYsIHByb3BuYW1lX2Rldik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoganMuaXNDaGlsZENsYXNzT2YodHlwZSwgY2MuVmFsdWVUeXBlKSA/IG5ldyB0eXBlKCkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zaG9ydDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJycsXG4gICAgICAgICAgICAgICAgdXJsOiB0eXBlLFxuICAgICAgICAgICAgICAgIF9zaG9ydDogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBfc2hvcnQ6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnRzLnByZXByb2Nlc3NBdHRycyA9IGZ1bmN0aW9uIChwcm9wZXJ0aWVzLCBjbGFzc05hbWUsIGNscywgZXM2KSB7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcGVydGllcykge1xuICAgICAgICB2YXIgdmFsID0gcHJvcGVydGllc1twcm9wTmFtZV07XG4gICAgICAgIHZhciBmdWxsRm9ybSA9IGV4cG9ydHMuZ2V0RnVsbEZvcm1PZlByb3BlcnR5KHZhbCwgcHJvcE5hbWUsIGNsYXNzTmFtZSk7XG4gICAgICAgIGlmIChmdWxsRm9ybSkge1xuICAgICAgICAgICAgdmFsID0gcHJvcGVydGllc1twcm9wTmFtZV0gPSBmdWxsRm9ybTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbC5nZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoNTUxMywgY2xhc3NOYW1lLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsLnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3JJRCg1NTE0LCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjYy5DbGFzcy5faXNDQ0NsYXNzKHZhbC5kZWZhdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsLmRlZmF1bHQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3JJRCg1NTE1LCBjbGFzc05hbWUsIHByb3BOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbC5nZXQgJiYgIXZhbC5zZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heWJlVHlwZVNjcmlwdCA9IGVzNjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXliZVR5cGVTY3JpcHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoNTUxNiwgY2xhc3NOYW1lLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQ0NfREVWICYmICF2YWwub3ZlcnJpZGUgJiYgY2xzLl9fcHJvcHNfXy5pbmRleE9mKHByb3BOYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBvdmVycmlkZVxuICAgICAgICAgICAgICAgIHZhciBiYXNlQ2xhc3MgPSBqcy5nZXRDbGFzc05hbWUoZ2V0QmFzZUNsYXNzV2hlcmVQcm9wZXJ0eURlZmluZWRfREVWKHByb3BOYW1lLCBjbHMpKTtcbiAgICAgICAgICAgICAgICBjYy53YXJuSUQoNTUxNywgY2xhc3NOYW1lLCBwcm9wTmFtZSwgYmFzZUNsYXNzLCBwcm9wTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbm90aWZ5ID0gdmFsLm5vdGlmeTtcbiAgICAgICAgICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoQ0NfREVWICYmIGVzNikge1xuICAgICAgICAgICAgICAgICAgICBjYy5lcnJvcignbm90IHlldCBzdXBwb3J0IG5vdGlmeSBhdHRyaWJ1dGUgZm9yIEVTNiBDbGFzc2VzJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VOb3RpZnkodmFsLCBwcm9wTmFtZSwgbm90aWZ5LCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgndHlwZScgaW4gdmFsKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VUeXBlKHZhbCwgdmFsLnR5cGUsIGNsYXNzTmFtZSwgcHJvcE5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJ3VybCcgaW4gdmFsKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tVcmwodmFsLCBjbGFzc05hbWUsIHByb3BOYW1lLCB2YWwudXJsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCd0eXBlJyBpbiB2YWwpIHtcbiAgICAgICAgICAgICAgICBwb3N0Q2hlY2tUeXBlKHZhbCwgdmFsLnR5cGUsIGNsYXNzTmFtZSwgcHJvcE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuaWYgKENDX0RFVikge1xuICAgIHZhciBDQUxMX1NVUEVSX0RFU1RST1lfUkVHX0RFViA9IC9cXGJcXC5fc3VwZXJcXGJ8ZGVzdHJveVxccypcXC5cXHMqY2FsbFxccypcXChcXHMqXFx3K1xccypbLHwpXS87XG4gICAgZXhwb3J0cy5kb1ZhbGlkYXRlTWV0aG9kV2l0aFByb3BzX0RFViA9IGZ1bmN0aW9uIChmdW5jLCBmdW5jTmFtZSwgY2xhc3NOYW1lLCBjbHMsIGJhc2UpIHtcbiAgICAgICAgaWYgKGNscy5fX3Byb3BzX18gJiYgY2xzLl9fcHJvcHNfXy5pbmRleE9mKGZ1bmNOYW1lKSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBmaW5kIGNsYXNzIHRoYXQgZGVmaW5lcyB0aGlzIG1ldGhvZCBhcyBhIHByb3BlcnR5XG4gICAgICAgICAgICB2YXIgYmFzZUNsYXNzTmFtZSA9IGpzLmdldENsYXNzTmFtZShnZXRCYXNlQ2xhc3NXaGVyZVByb3BlcnR5RGVmaW5lZF9ERVYoZnVuY05hbWUsIGNscykpO1xuICAgICAgICAgICAgY2MuZXJyb3JJRCgzNjQ4LCBjbGFzc05hbWUsIGZ1bmNOYW1lLCBiYXNlQ2xhc3NOYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnVuY05hbWUgPT09ICdkZXN0cm95JyAmJiBqcy5pc0NoaWxkQ2xhc3NPZihiYXNlLCBjYy5Db21wb25lbnQpICYmICFDQUxMX1NVUEVSX0RFU1RST1lfUkVHX0RFVi50ZXN0KGZ1bmMpKSB7XG4gICAgICAgICAgICBjYy5lcnJvcignT3ZlcndyaXRpbmcgXFwnJyArIGZ1bmNOYW1lICsgJ1xcJyBmdW5jdGlvbiBpbiBcXCcnICsgY2xhc3NOYW1lICsgJ1xcJyBjbGFzcyB3aXRob3V0IGNhbGxpbmcgc3VwZXIgaXMgbm90IGFsbG93ZWQuIENhbGwgdGhlIHN1cGVyIGZ1bmN0aW9uIGluIFxcJycgKyBmdW5jTmFtZSArICdcXCcgcGxlYXNlLicpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0cy52YWxpZGF0ZU1ldGhvZFdpdGhQcm9wcyA9IGZ1bmN0aW9uIChmdW5jLCBmdW5jTmFtZSwgY2xhc3NOYW1lLCBjbHMsIGJhc2UpIHtcbiAgICBpZiAoQ0NfREVWICYmIGZ1bmNOYW1lID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIGNjLmVycm9ySUQoMzY0MywgY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicgfHwgZnVuYyA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoQ0NfREVWKSB7XG4gICAgICAgICAgICB0aGlzLmRvVmFsaWRhdGVNZXRob2RXaXRoUHJvcHNfREVWKGZ1bmMsIGZ1bmNOYW1lLCBjbGFzc05hbWUsIGNscywgYmFzZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoQ0NfREVWKSB7XG4gICAgICAgICAgICBpZiAoZnVuYyA9PT0gZmFsc2UgJiYgYmFzZSAmJiBiYXNlLnByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIG92ZXJyaWRlXG4gICAgICAgICAgICAgICAgdmFyIG92ZXJyaWRlZCA9IGJhc2UucHJvdG90eXBlW2Z1bmNOYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG92ZXJyaWRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmFzZUZ1YyA9IGpzLmdldENsYXNzTmFtZShiYXNlKSArICcuJyArIGZ1bmNOYW1lO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3ViRnVjID0gY2xhc3NOYW1lICsgJy4nICsgZnVuY05hbWU7XG4gICAgICAgICAgICAgICAgICAgIGNjLndhcm5JRCgzNjI0LCBzdWJGdWMsIGJhc2VGdWMsIHN1YkZ1Yywgc3ViRnVjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29ycmVjdCA9IFRZUE9fVE9fQ09SUkVDVF9ERVZbZnVuY05hbWVdO1xuICAgICAgICAgICAgaWYgKGNvcnJlY3QpIHtcbiAgICAgICAgICAgICAgICBjYy53YXJuSUQoMzYyMSwgY2xhc3NOYW1lLCBmdW5jTmFtZSwgY29ycmVjdCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZ1bmMpIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDM2MjIsIGNsYXNzTmFtZSwgZnVuY05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5CeVpYQnliMk5sYzNNdFkyeGhjM011YW5NaVhTd2libUZ0WlhNaU9sc2lhbk1pTENKeVpYRjFhWEpsSWl3aVUyVnlhV0ZzYVhwaFlteGxRWFIwY25NaUxDSjFjbXdpTENKallXNVZjMlZrU1c1SFpYUWlMQ0prWldaaGRXeDBJaXdpYzJWeWFXRnNhWHBoWW14bElpd2laV1JwZEc5eVQyNXNlU0lzSW1admNtMWxjbXg1VTJWeWFXRnNhWHBsWkVGeklpd2lWRmxRVDE5VVQxOURUMUpTUlVOVVgwUkZWaUlzSWtORFgwUkZWaUlzSW1WNGRHVnVaQ0lzSW5CeWIzQmxjblI1SWl3aWMzUmhkR2xqSWl3aVkyOXVjM1J5ZFdOMGIzSWlMQ0p3WVhKelpVNXZkR2xtZVNJc0luWmhiQ0lzSW5CeWIzQk9ZVzFsSWl3aWJtOTBhV1o1SWl3aWNISnZjR1Z5ZEdsbGN5SXNJbWRsZENJc0luTmxkQ0lzSW1Oaklpd2lkMkZ5YmtsRUlpd2lhR0Z6VDNkdVVISnZjR1Z5ZEhraUxDSnVaWGRMWlhraUxDSjJZV3gxWlNJc0ltOXNaRlpoYkhWbElpd2lZMkZzYkNJc0lrTkRYMFZFU1ZSUFVpSXNJbTV2ZEdsbWVVWnZjaUlzSW01bGQxWmhiSFZsSWl3aVlYUjBjaUlzSW5ZaUxDSmphR1ZqYTFWeWJDSXNJbU5zWVhOelRtRnRaU0lzSWtGeWNtRjVJaXdpYVhOQmNuSmhlU0lzSW14bGJtZDBhQ0lzSW1WeWNtOXlTVVFpTENKcGMwTm9hV3hrUTJ4aGMzTlBaaUlzSWxKaGQwRnpjMlYwSWl3aWQyRnliaUlzSWtGemMyVjBJaXdpZDJGelVtRjNRWE56WlhSVWVYQmxJaXdpWDNOb2IzSjBJaXdpWjJWMFEyeGhjM05PWVcxbElpd2lkSGx3WlNJc0luQmhjbk5sVkhsd1pTSXNJbWx6VW1GM1FYTnpaWFJVZVhCbElpd2ljRzl6ZEVOb1pXTnJWSGx3WlNJc0lrTnNZWE56SWl3aVgybHpRME5EYkdGemN5SXNJbDluWlhSRGJHRnpjMGxrSWl3aVoyVjBRbUZ6WlVOc1lYTnpWMmhsY21WUWNtOXdaWEowZVVSbFptbHVaV1JmUkVWV0lpd2lZMnh6SWl3aWNtVnpJaXdpWDE5d2NtOXdjMTlmSWl3aWFXNWtaWGhQWmlJc0lpUnpkWEJsY2lJc0ltVnljbTl5SWl3aVpYaHdiM0owY3lJc0ltZGxkRVoxYkd4R2IzSnRUMlpRY205d1pYSjBlU0lzSW05d2RHbHZibk1pTENKd2NtOXdibUZ0WlY5a1pYWWlMQ0pqYkdGemMyNWhiV1ZmWkdWMklpd2lhWE5NYVhSbGNtRnNJaXdpVDJKcVpXTjBJaXdpVm1Gc2RXVlVlWEJsSWl3aWNISmxjSEp2WTJWemMwRjBkSEp6SWl3aVpYTTJJaXdpWm5Wc2JFWnZjbTBpTENKdFlYbGlaVlI1Y0dWVFkzSnBjSFFpTENKdmRtVnljbWxrWlNJc0ltSmhjMlZEYkdGemN5SXNJa05CVEV4ZlUxVlFSVkpmUkVWVFZGSlBXVjlTUlVkZlJFVldJaXdpWkc5V1lXeHBaR0YwWlUxbGRHaHZaRmRwZEdoUWNtOXdjMTlFUlZZaUxDSm1kVzVqSWl3aVpuVnVZMDVoYldVaUxDSmlZWE5sSWl3aVltRnpaVU5zWVhOelRtRnRaU0lzSWtOdmJYQnZibVZ1ZENJc0luUmxjM1FpTENKMllXeHBaR0YwWlUxbGRHaHZaRmRwZEdoUWNtOXdjeUlzSW5CeWIzUnZkSGx3WlNJc0ltOTJaWEp5YVdSbFpDSXNJbUpoYzJWR2RXTWlMQ0p6ZFdKR2RXTWlMQ0pqYjNKeVpXTjBJbDBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVRCQ1FTeEpRVUZOUVN4TFFVRkxReXhSUVVGUkxFMUJRVklzUTBGQldEczdRVUZGUVRzN1FVRkZRU3hKUVVGSlF5eHZRa0ZCYjBJN1FVRkRjRUpETEZOQlFVczdRVUZEUkVNc2MwSkJRV003UVVGRVlpeExRVVJsTzBGQlNYQkNReXhoUVVGVExFVkJTbGM3UVVGTGNFSkRMR3RDUVVGakxFVkJURTA3UVVGTmNFSkRMR2RDUVVGWkxFVkJUbEU3UVVGUGNFSkRMREJDUVVGelFqdEJRVkJHTEVOQlFYaENPenRCUVZWQkxFbEJRVWxETEhOQ1FVRnpRa01zVlVGQlZUdEJRVU5vUTBNc1dVRkJVU3hUUVVSM1FqdEJRVVZvUTBNc1kwRkJWU3haUVVaelFqdEJRVWRvUTBNc1dVRkJVU3hUUVVoM1FqdEJRVWxvUTBNc2FVSkJRV0U3UVVGS2JVSXNRMEZCY0VNN08wRkJUMEU3UVVGRFFTeFRRVUZUUXl4WFFVRlVMRU5CUVhOQ1F5eEhRVUYwUWl4RlFVRXlRa01zVVVGQk0wSXNSVUZCY1VORExFMUJRWEpETEVWQlFUWkRReXhWUVVFM1F5eEZRVUY1UkR0QlFVTnlSQ3hSUVVGSlNDeEpRVUZKU1N4SFFVRktMRWxCUVZkS0xFbEJRVWxMTEVkQlFXNUNMRVZCUVhkQ08wRkJRM0JDTEZsQlFVbFlMRTFCUVVvc1JVRkJXVHRCUVVOU1dTeGxRVUZIUXl4TlFVRklMRU5CUVZVc1NVRkJWanRCUVVOSU8wRkJRMFE3UVVGRFNEdEJRVU5FTEZGQlFVbFFMRWxCUVVsUkxHTkJRVW9zUTBGQmJVSXNVMEZCYmtJc1EwRkJTaXhGUVVGdFF6dEJRVU12UWp0QlFVTkJPMEZCUTBFc1dVRkJTVU1zVTBGQlV5eFJRVUZSVWl4UlFVRnlRanM3UVVGRlFVUXNXVUZCU1Vrc1IwRkJTaXhIUVVGVkxGbEJRVms3UVVGRGJFSXNiVUpCUVU4c1MwRkJTMHNzVFVGQlRDeERRVUZRTzBGQlEwZ3NVMEZHUkR0QlFVZEJWQ3haUVVGSlN5eEhRVUZLTEVkQlFWVXNWVUZCVlVzc1MwRkJWaXhGUVVGcFFqdEJRVU4yUWl4blFrRkJTVU1zVjBGQlZ5eExRVUZMUml4TlFVRk1MRU5CUVdZN1FVRkRRU3hwUWtGQlMwRXNUVUZCVEN4SlFVRmxReXhMUVVGbU8wRkJRMEZTTEcxQ1FVRlBWU3hKUVVGUUxFTkJRVmtzU1VGQldpeEZRVUZyUWtRc1VVRkJiRUk3UVVGRFNDeFRRVXBFT3p0QlFVMUJMRmxCUVVsRkxGTkJRVW9zUlVGQlpUdEJRVU5ZWWl4blFrRkJTV01zVTBGQlNpeEhRVUZuUWt3c1RVRkJhRUk3UVVGRFNEczdRVUZGUkN4WlFVRkpUU3hYUVVGWExFVkJRV1k3UVVGRFFWb3NiVUpCUVZkTkxFMUJRVmdzU1VGQmNVSk5MRkZCUVhKQ08wRkJRMEU3UVVGRFFTeGhRVUZMTEVsQlFVbERMRWxCUVZRc1NVRkJhVUk1UWl4cFFrRkJha0lzUlVGQmIwTTdRVUZEYUVNc1owSkJRVWtyUWl4SlFVRkpMMElzYTBKQlFXdENPRUlzU1VGQmJFSXNRMEZCVWp0QlFVTkJMR2RDUVVGSmFFSXNTVUZCU1ZFc1kwRkJTaXhEUVVGdFFsRXNTVUZCYmtJc1EwRkJTaXhGUVVFNFFqdEJRVU14UWtRc2VVSkJRVk5ETEVsQlFWUXNTVUZCYVVKb1FpeEpRVUZKWjBJc1NVRkJTaXhEUVVGcVFqdEJRVU5CTEc5Q1FVRkpMRU5CUVVORExFVkJRVVUzUWl4WlFVRlFMRVZCUVhGQ08wRkJRMnBDTERKQ1FVRlBXU3hKUVVGSlowSXNTVUZCU2l4RFFVRlFPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMG9zUzBFNVFrUXNUVUVyUWtzc1NVRkJTWFJDTEUxQlFVb3NSVUZCV1R0QlFVTmlXU3hYUVVGSFF5eE5RVUZJTEVOQlFWVXNTVUZCVmp0QlFVTklPMEZCUTBvN08wRkJSVVFzVTBGQlUxY3NVVUZCVkN4RFFVRnRRbXhDTEVkQlFXNUNMRVZCUVhkQ2JVSXNVMEZCZUVJc1JVRkJiVU5zUWl4UlFVRnVReXhGUVVFMlEyUXNSMEZCTjBNc1JVRkJhMFE3UVVGRE9VTXNVVUZCU1dsRExFMUJRVTFETEU5QlFVNHNRMEZCWTJ4RExFZEJRV1FzUTBGQlNpeEZRVUYzUWp0QlFVTndRaXhaUVVGSlFTeEpRVUZKYlVNc1RVRkJTaXhIUVVGaExFTkJRV3BDTEVWQlFXOUNPMEZCUTJoQ2JrTXNhMEpCUVUxQkxFbEJRVWtzUTBGQlNpeERRVUZPTzBGQlEwZ3NVMEZHUkN4TlFVZExMRWxCUVVrd1FpeFRRVUZLTEVWQlFXVTdRVUZEYUVJc2JVSkJRVTlRTEVkQlFVZHBRaXhQUVVGSUxFTkJRVmNzU1VGQldDeEZRVUZwUWtvc1UwRkJha0lzUlVGQk5FSnNRaXhSUVVFMVFpeERRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVMRkZCUVVsWkxGTkJRVW9zUlVGQlpUdEJRVU5ZTEZsQlFVa3hRaXhQUVVGUExFbEJRVmdzUlVGQmFVSTdRVUZEWWl4dFFrRkJUMjFDTEVkQlFVZERMRTFCUVVnc1EwRkJWU3hKUVVGV0xFVkJRV2RDV1N4VFFVRm9RaXhGUVVFeVFteENMRkZCUVROQ0xFTkJRVkE3UVVGRFNEdEJRVU5FTEZsQlFVa3NUMEZCVDJRc1IwRkJVQ3hMUVVGbExGVkJRV1lzU1VGQk5rSXNRMEZCUTBnc1IwRkJSM2RETEdOQlFVZ3NRMEZCYTBKeVF5eEhRVUZzUWl4RlFVRjFRbTFDTEVkQlFVZHRRaXhSUVVFeFFpeERRVUZzUXl4RlFVRjFSVHRCUVVOdVJTeHRRa0ZCVDI1Q0xFZEJRVWRwUWl4UFFVRklMRU5CUVZjc1NVRkJXQ3hGUVVGcFFrb3NVMEZCYWtJc1JVRkJORUpzUWl4UlFVRTFRaXhEUVVGUU8wRkJRMGc3UVVGRFJDeFpRVUZKWkN4UlFVRlJiVUlzUjBGQlIyMUNMRkZCUVdZc1JVRkJlVUk3UVVGRGNrSnVRaXhsUVVGSGIwSXNTVUZCU0N4RFFVRlJMRFJHUVVOQkxEUkZRVVJCTEVkQlJVRXNkMFZCUmtFc1IwRkhRU3gzUWtGSVFTeEhRVWxCTEdOQlNrRXNSMEZMUVN4aFFVeEJMRWRCVFVFc01rSkJUa0VzUjBGUFFTeHhRa0ZRUVN4SFFWRkJMRlZCVWtFc1IwRlRRU3hwUkVGVVFTeEhRVlZCTEdsQ1FWWkJMRWRCVjBFc1owTkJXRUVzUjBGWlFTeGhRVnBCTEVkQllVRXNPRVZCWWtFc1IwRmpRU3huUlVGa1FTeEhRV1ZCTEZWQlprRXNSMEZuUWtFc05rTkJhRUpCTEVkQmFVSkJMREpDUVdwQ1FTeEhRV3RDUVN4cFJVRnNRa0VzUjBGdFFrRXNOa05CYmtKU0xFVkJiMEpSZWtJc1VVRndRbElzUlVGdlFtdENhMElzVTBGd1FteENMRVZCYjBJMlFteENMRkZCY0VJM1FpeEZRVzlDZFVOQkxGRkJjRUoyUXl4RlFXOUNhVVJCTEZGQmNFSnFSQ3hGUVc5Q01rUkJMRkZCY0VJelJDeEZRVzlDY1VWQkxGRkJjRUp5UlR0QlFYRkNTQ3hUUVhSQ1JDeE5RWFZDU3l4SlFVRkpha0lzUjBGQlIzZERMR05CUVVnc1EwRkJhMEp5UXl4SFFVRnNRaXhGUVVGMVFtMUNMRWRCUVVkeFFpeExRVUV4UWl4RFFVRktMRVZCUVhORE8wRkJRM1pETEdkQ1FVRkpja0lzUjBGQlIyMUNMRkZCUVVnc1EwRkJXVWNzWlVGQldpeERRVUUwUW5wRExFZEJRVFZDTEVOQlFVb3NSVUZCYzBNN1FVRkRiRU1zYjBKQlFVa3NRMEZCUTJFc1NVRkJTVFpDTEUxQlFWUXNSVUZCYVVJN1FVRkRZblpDTEhWQ1FVRkhiMElzU1VGQlNDeERRVUZSTERSR1FVTkJMRFJGUVVSQkxFZEJSVUVzYzBWQlJrRXNSMEZIUVN4NVFrRklRU3hIUVVsQkxHTkJTa0VzUjBGTFFTeGhRVXhCTEVkQlRVRXNORUpCVGtFc1IwRlBRU3h4UWtGUVFTeEhRVkZCTEZWQlVrRXNSMEZUUVN4blEwRlVRU3hIUVZWQkxHRkJWa0VzUjBGWFFTeHJSa0ZZUVN4SFFWbEJMR2RGUVZwQkxFZEJZVUVzVlVGaVFTeEhRV05CTEdsRlFXUkJMRWRCWlVFc05rTkJabElzUlVGblFsRjZRaXhSUVdoQ1VpeEZRV2RDYTBKclFpeFRRV2hDYkVJc1JVRm5RalpDYkVJc1VVRm9RamRDTEVWQlowSjFRMEVzVVVGb1FuWkRMRVZCWjBKcFJFRXNVVUZvUW1wRU8wRkJhVUpJTzBGQlEwb3NZVUZ3UWtRc1RVRnhRa3M3UVVGRFJDeDFRa0ZCVDBzc1IwRkJSMmxDTEU5QlFVZ3NRMEZCVnl4SlFVRllMRVZCUVdsQ1NpeFRRVUZxUWl4RlFVRTBRbXhDTEZGQlFUVkNMRVZCUVhORFN5eEhRVUZIZEVJc1JVRkJTQ3hEUVVGTk9FTXNXVUZCVGl4RFFVRnRRak5ETEVkQlFXNUNMRU5CUVhSRExFTkJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwUXNXVUZCU1dFc1NVRkJTU3RDTEVsQlFWSXNSVUZCWXp0QlFVTldMRzFDUVVGUGVrSXNSMEZCUjBNc1RVRkJTQ3hEUVVGVkxFbEJRVllzUlVGQlowSlpMRk5CUVdoQ0xFVkJRVEpDYkVJc1VVRkJNMElzUTBGQlVEdEJRVU5JTzBGQlEwbzdRVUZEUkVRc1VVRkJTU3RDTEVsQlFVb3NSMEZCVnpWRExFZEJRVmc3UVVGRFNEczdRVUZGUkN4VFFVRlROa01zVTBGQlZDeERRVUZ2UW1oRExFZEJRWEJDTEVWQlFYbENLMElzU1VGQmVrSXNSVUZCSzBKYUxGTkJRUzlDTEVWQlFUQkRiRUlzVVVGQk1VTXNSVUZCYjBRN1FVRkRhRVFzVVVGQlNXMUNMRTFCUVUxRExFOUJRVTRzUTBGQlkxVXNTVUZCWkN4RFFVRktMRVZCUVhsQ08wRkJRM0pDTEZsQlFVbHNRaXhoUVVGaExHRkJRV0ZpTEVkQlFUbENMRVZCUVcxRE8wRkJReTlDTEdkQ1FVRkpjVUlzVlVGQlZYQkRMRkZCUVZFc1YwRkJVaXhGUVVGeFFtOURMRTlCUVc1RExFTkJSQ3RDTEVOQlEyVTdRVUZET1VNc1owSkJRVWtzUTBGQlEwRXNVVUZCVVhKQ0xFbEJRVWxZTEU5QlFWb3NRMEZCVEN4RlFVRXlRanRCUVVOMlFtbENMRzFDUVVGSFF5eE5RVUZJTEVOQlFWVXNTVUZCVml4RlFVRm5RbGtzVTBGQmFFSXNSVUZCTWtKc1FpeFJRVUV6UWp0QlFVTklPMEZCUTBvN1FVRkRSQ3haUVVGSk9FSXNTMEZCUzFRc1RVRkJUQ3hIUVVGakxFTkJRV3hDTEVWQlFYRkNPMEZCUTJwQ0xHZENRVUZKYUVJc1IwRkJSMjFDTEZGQlFVZ3NRMEZCV1ZFc1kwRkJXaXhEUVVFeVFrWXNTMEZCU3l4RFFVRk1MRU5CUVROQ0xFTkJRVW9zUlVGQmVVTTdRVUZEY2tNdlFpeHZRa0ZCU1dJc1IwRkJTaXhIUVVGVk5FTXNTMEZCU3l4RFFVRk1MRU5CUVZZN1FVRkRRU3gxUWtGQlR5OUNMRWxCUVVrclFpeEpRVUZZTzBGQlEwRTdRVUZEU0N4aFFVcEVMRTFCUzBzN1FVRkRSQzlDTEc5Q1FVRkpLMElzU1VGQlNpeEhRVUZYUVN4UFFVRlBRU3hMUVVGTExFTkJRVXdzUTBGQmJFSTdRVUZEU0R0QlFVTktMRk5CVkVRc1RVRlZTenRCUVVORUxHMUNRVUZQZWtJc1IwRkJSMmxDTEU5QlFVZ3NRMEZCVnl4SlFVRllMRVZCUVdsQ1NpeFRRVUZxUWl4RlFVRTBRbXhDTEZGQlFUVkNMRU5CUVZBN1FVRkRTRHRCUVVOS08wRkJRMFFzVVVGQlNWa3NVMEZCU2l4RlFVRmxPMEZCUTFnc1dVRkJTU3hQUVVGUGEwSXNTVUZCVUN4TFFVRm5RaXhWUVVGd1FpeEZRVUZuUXp0QlFVTTFRaXhuUWtGQlNYcENMRWRCUVVkdFFpeFJRVUZJTEVOQlFWbFJMR05CUVZvc1EwRkJNa0pHTEVsQlFUTkNMRU5CUVVvc1JVRkJjME03UVVGRGJFTjZRaXh0UWtGQlIwTXNUVUZCU0N4RFFVRlZMRWxCUVZZc1JVRkJaMEpaTEZOQlFXaENMRVZCUVRKQ2JFSXNVVUZCTTBJc1JVRkRTV3BDTEVkQlFVYzRReXhaUVVGSUxFTkJRV2RDUXl4SlFVRm9RaXhEUVVSS08wRkJSVWc3UVVGRFNpeFRRVXhFTEUxQlRVc3NTVUZCU1VFc1UwRkJVeXhSUVVGaUxFVkJRWFZDTzBGQlEzaENla0lzWlVGQlIwTXNUVUZCU0N4RFFVRlZMRWxCUVZZc1JVRkJaMEpaTEZOQlFXaENMRVZCUVRKQ2JFSXNVVUZCTTBJN1FVRkRTQ3hUUVVaSkxFMUJSMEVzU1VGQlNUaENMRkZCUVZFc1NVRkJXaXhGUVVGclFqdEJRVU51UW5wQ0xHVkJRVWRETEUxQlFVZ3NRMEZCVlN4SlFVRldMRVZCUVdkQ1dTeFRRVUZvUWl4RlFVRXlRbXhDTEZGQlFUTkNPMEZCUTBnN1FVRkRTanRCUVVOS096dEJRVVZFTEZOQlFWTnBReXhoUVVGVUxFTkJRWGRDYkVNc1IwRkJlRUlzUlVGQk5rSXJRaXhKUVVFM1FpeEZRVUZ0UTFvc1UwRkJia01zUlVGQk9FTnNRaXhSUVVFNVF5eEZRVUYzUkR0QlFVTndSQ3hSUVVGSldTeGhRVUZoTEU5QlFVOXJRaXhKUVVGUUxFdEJRV2RDTEZWQlFXcERMRVZCUVRaRE8wRkJRM3BETEZsQlFVbDZRaXhIUVVGSE5rSXNTMEZCU0N4RFFVRlRReXhWUVVGVUxFTkJRVzlDVEN4SlFVRndRaXhMUVVFMlFpOUNMRWxCUVVsV0xGbEJRVW9zUzBGQmNVSXNTMEZCYkVRc1NVRkJNa1FzUTBGQlEwNHNSMEZCUjNGRUxGZEJRVWdzUTBGQlpVNHNTVUZCWml4RlFVRnhRaXhMUVVGeVFpeERRVUZvUlN4RlFVRTJSanRCUVVONlJucENMR1ZCUVVkRExFMUJRVWdzUTBGQlZTeEpRVUZXTEVWQlFXZENXU3hUUVVGb1FpeEZRVUV5UW14Q0xGRkJRVE5DTEVWQlFYRkRhMElzVTBGQmNrTXNSVUZCWjBSc1FpeFJRVUZvUkR0QlFVTklPMEZCUTBvN1FVRkRTanM3UVVGRlJDeFRRVUZUY1VNc2IwTkJRVlFzUTBGQkswTnlReXhSUVVFdlF5eEZRVUY1UkhORExFZEJRWHBFTEVWQlFUaEVPMEZCUXpGRUxGRkJRVWszUXl4TlFVRktMRVZCUVZrN1FVRkRVaXhaUVVGSk9FTXNSMEZCU2p0QlFVTkJMR1ZCUVU5RUxFOUJRVTlCTEVsQlFVbEZMRk5CUVZnc1NVRkJkMEpHTEVsQlFVbEZMRk5CUVVvc1EwRkJZME1zVDBGQlpDeERRVUZ6UW5wRExGRkJRWFJDTEUxQlFXOURMRU5CUVVNc1EwRkJjRVVzUlVGQmRVVnpReXhOUVVGTlFTeEpRVUZKU1N4TlFVRnFSaXhGUVVGNVJqdEJRVU55Umtnc2EwSkJRVTFFTEVkQlFVNDdRVUZEU0R0QlFVTkVMRmxCUVVrc1EwRkJRME1zUjBGQlRDeEZRVUZWTzBGQlEwNXNReXhsUVVGSGMwTXNTMEZCU0N4RFFVRlRMR1ZCUVZRN1FVRkRTRHRCUVVORUxHVkJRVTlLTEVkQlFWQTdRVUZEU0R0QlFVTktPenRCUVVWRVN5eFJRVUZSUXl4eFFrRkJVaXhIUVVGblF5eFZRVUZWUXl4UFFVRldMRVZCUVcxQ1F5eFpRVUZ1UWl4RlFVRnBRME1zWVVGQmFrTXNSVUZCWjBRN1FVRkROVVVzVVVGQlNVTXNXVUZCV1Vnc1YwRkJWMEVzVVVGQlVXcEVMRmRCUVZJc1MwRkJkMEp4UkN4TlFVRnVSRHRCUVVOQkxGRkJRVXNzUTBGQlEwUXNVMEZCVGl4RlFVRnJRanRCUVVOa0xGbEJRVWs1UWl4TlFVRk5ReXhQUVVGT0xFTkJRV013UWl4UFFVRmtMRXRCUVRCQ1FTeFJRVUZSZWtJc1RVRkJVaXhIUVVGcFFpeERRVUV2UXl4RlFVRnJSRHRCUVVNNVF5eG5Ra0ZCU1ZNc1QwRkJUMmRDTEZGQlFWRXNRMEZCVWl4RFFVRllPMEZCUTBFc1owSkJRVWx5UkN4VlFVRlZXU3hIUVVGSGJVSXNVVUZCU0N4RFFVRlpSeXhsUVVGYUxFTkJRVFJDUnl4SlFVRTFRaXhEUVVGa0xFVkJRV2xFTzBGQlF6ZERPMEZCUTBGNlFpeHRRa0ZCUjI5Q0xFbEJRVWdzUTBGQlVTdzBSa0ZEUVN3NFJVRkVRU3hIUVVWQkxHbERRVVpCTEVkQlIwRXNiVVpCU0VFc1IwRkpRU3d5UWtGS1FTeEhRVXRCTERKRFFVeEJMRWRCVFVFc1lVRk9RU3hIUVU5QkxITkdRVkJCTEVkQlVVRXNjVUpCVWtFc1IwRlRRU3hWUVZSQkxFZEJWVUVzTWtOQlZrRXNSMEZYUVN4aFFWaEJMRWRCV1VFc2MwWkJXa0VzUjBGaFFTeFRRV0pCTEVkQlkwRXNLMEpCWkVFc1IwRmxRU3hwUlVGbVFTeEhRV2RDUVN3MlEwRm9RbElzUlVGcFFsRnpRaXhaUVdwQ1VpeEZRV2xDYzBKRExHRkJha0owUWl4RlFXbENjVU5FTEZsQmFrSnlReXhGUVdsQ2JVUkJMRmxCYWtKdVJEdEJRV3RDUVN4MVFrRkJUenRCUVVOSU0wUXNOa0pCUVZNc1JVRkVUanRCUVVWSVJpeDVRa0ZCU3pSRUxFOUJSa1k3UVVGSFNHeENMRFJDUVVGUk8wRkJTRXdzYVVKQlFWQTdRVUZMU0R0QlFVTkVMRzFDUVVGUE8wRkJRMGg0UXl4NVFrRkJVeXhGUVVST08wRkJSVWd3UXl4elFrRkJUV2RDTEU5QlJrZzdRVUZIU0d4Q0xIZENRVUZSTzBGQlNFd3NZVUZCVUR0QlFVdElMRk5CYWtORUxFMUJhME5MTEVsQlFVa3NUMEZCVDJ0Q0xFOUJRVkFzUzBGQmJVSXNWVUZCZGtJc1JVRkJiVU03UVVGRGNFTXNaMEpCUVVsb1FpeFBRVUZQWjBJc1QwRkJXRHRCUVVOQkxHZENRVUZKTEVOQlFVTjZReXhIUVVGSGJVSXNVVUZCU0N4RFFVRlpVU3hqUVVGYUxFTkJRVEpDUml4SlFVRXpRaXhEUVVGTUxFVkJRWFZETzBGQlEyNURMRzlDUVVGSmVrSXNSMEZCUjIxQ0xGRkJRVWdzUTBGQldVY3NaVUZCV2l4RFFVRTBRa2NzU1VGQk5VSXNRMEZCU2l4RlFVRjFRenRCUVVOdVF6dEJRVU5CTEhkQ1FVRkpja01zVFVGQlNpeEZRVUZaTzBGQlExSlpMREpDUVVGSGIwSXNTVUZCU0N4RFFVRlJMRFJHUVVOQkxEaEZRVVJCTEVkQlJVRXNhVU5CUmtFc1IwRkhRU3h6UlVGSVFTeEhRVWxCTEhsQ1FVcEJMRWRCUzBFc01rTkJURUVzUjBGTlFTeGhRVTVCTEVkQlQwRXNhVVpCVUVFc1IwRlJRU3dyUkVGU1FTeEhRVk5CTEZWQlZFRXNSMEZWUVN3eVEwRldRU3hIUVZkQkxHRkJXRUVzUjBGWlFTeHBSa0ZhUVN4SFFXRkJMRk5CWWtFc1IwRmpRU3huUTBGa1FTeEhRV1ZCTEdsRlFXWkJMRWRCWjBKQkxEWkRRV2hDVWl4RlFXbENVWE5DTEZsQmFrSlNMRVZCYVVKelFrTXNZVUZxUW5SQ0xFVkJhVUp4UTBRc1dVRnFRbkpETEVWQmFVSnRSRUVzV1VGcVFtNUVPMEZCYTBKSU8wRkJRMG9zYVVKQmRFSkVMRTFCZFVKTE8wRkJRMFFzTWtKQlFVODdRVUZEU0RORUxHbERRVUZUVEN4SFFVRkhkME1zWTBGQlNDeERRVUZyUWs4c1NVRkJiRUlzUlVGQmQwSjZRaXhIUVVGSE9FTXNVMEZCTTBJc1NVRkJkME1zU1VGQlNYSkNMRWxCUVVvc1JVRkJlRU1zUjBGQmNVUXNTVUZFTTBRN1FVRkZTRUVzT0VKQlFVMUJMRWxCUmtnN1FVRkhTRVlzWjBOQlFWRTdRVUZJVEN4eFFrRkJVRHRCUVV0SU8wRkJRMG83UVVGRFJDeHRRa0ZCVHp0QlFVTkllRU1zZVVKQlFWTXNSVUZFVGp0QlFVVklSaXh4UWtGQlN6UkRMRWxCUmtZN1FVRkhTRVlzZDBKQlFWRTdRVUZJVEN4aFFVRlFPMEZCUzBnc1UwRjJRMGtzVFVGM1EwRTdRVUZEUkN4dFFrRkJUenRCUVVOSWVFTXNlVUpCUVZNd1JDeFBRVVJPTzBGQlJVaHNRaXgzUWtGQlVUdEJRVVpNTEdGQlFWQTdRVUZKU0R0QlFVTktPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGeVJrUTdPMEZCZFVaQlowSXNVVUZCVVZFc1pVRkJVaXhIUVVFd1FpeFZRVUZWYkVRc1ZVRkJWaXhGUVVGelFtZENMRk5CUVhSQ0xFVkJRV2xEYjBJc1IwRkJha01zUlVGQmMwTmxMRWRCUVhSRExFVkJRVEpETzBGQlEycEZMRk5CUVVzc1NVRkJTWEpFTEZGQlFWUXNTVUZCY1VKRkxGVkJRWEpDTEVWQlFXbERPMEZCUXpkQ0xGbEJRVWxJTEUxQlFVMUhMRmRCUVZkR0xGRkJRVmdzUTBGQlZqdEJRVU5CTEZsQlFVbHpSQ3hYUVVGWFZpeFJRVUZSUXl4eFFrRkJVaXhEUVVFNFFqbERMRWRCUVRsQ0xFVkJRVzFEUXl4UlFVRnVReXhGUVVFMlEydENMRk5CUVRkRExFTkJRV1k3UVVGRFFTeFpRVUZKYjBNc1VVRkJTaXhGUVVGak8wRkJRMVoyUkN4clFrRkJUVWNzVjBGQlYwWXNVVUZCV0N4SlFVRjFRbk5FTEZGQlFUZENPMEZCUTBnN1FVRkRSQ3haUVVGSmRrUXNSMEZCU2l4RlFVRlRPMEZCUTB3c1owSkJRVWxoTEZOQlFVb3NSVUZCWlR0QlFVTllMRzlDUVVGSkxHRkJRV0ZpTEVkQlFXcENMRVZCUVhOQ08wRkJRMnhDTEhkQ1FVRkpRU3hKUVVGSlNTeEhRVUZTTEVWQlFXRTdRVUZEVkVVc01rSkJRVWRwUWl4UFFVRklMRU5CUVZjc1NVRkJXQ3hGUVVGcFFrb3NVMEZCYWtJc1JVRkJORUpzUWl4UlFVRTFRanRCUVVOSUxIRkNRVVpFTEUxQlIwc3NTVUZCU1VRc1NVRkJTVXNzUjBGQlVpeEZRVUZoTzBGQlEyUkRMREpDUVVGSGFVSXNUMEZCU0N4RFFVRlhMRWxCUVZnc1JVRkJhVUpLTEZOQlFXcENMRVZCUVRSQ2JFSXNVVUZCTlVJN1FVRkRTQ3h4UWtGR1NTeE5RVWRCTEVsQlFVbExMRWRCUVVjMlFpeExRVUZJTEVOQlFWTkRMRlZCUVZRc1EwRkJiMEp3UXl4SlFVRkpXQ3hQUVVGNFFpeERRVUZLTEVWQlFYTkRPMEZCUTNaRFZ5dzBRa0ZCU1Znc1QwRkJTaXhIUVVGakxFbEJRV1E3UVVGRFFXbENMREpDUVVGSGFVSXNUMEZCU0N4RFFVRlhMRWxCUVZnc1JVRkJhVUpLTEZOQlFXcENMRVZCUVRSQ2JFSXNVVUZCTlVJN1FVRkRTRHRCUVVOS0xHbENRVmhFTEUxQldVc3NTVUZCU1N4RFFVRkRSQ3hKUVVGSlNTeEhRVUZNTEVsQlFWa3NRMEZCUTBvc1NVRkJTVXNzUjBGQmNrSXNSVUZCTUVJN1FVRkRNMElzZDBKQlFVbHRSQ3hyUWtGQmEwSkdMRWRCUVhSQ08wRkJRMEVzZDBKQlFVa3NRMEZCUTBVc1pVRkJUQ3hGUVVGelFqdEJRVU5zUW14RUxESkNRVUZIYVVJc1QwRkJTQ3hEUVVGWExFbEJRVmdzUlVGQmFVSktMRk5CUVdwQ0xFVkJRVFJDYkVJc1VVRkJOVUk3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEUkN4blFrRkJTVkFzVlVGQlZTeERRVUZEVFN4SlFVRkplVVFzVVVGQlppeEpRVUV5UW14Q0xFbEJRVWxGTEZOQlFVb3NRMEZCWTBNc1QwRkJaQ3hEUVVGelFucERMRkZCUVhSQ0xFMUJRVzlETEVOQlFVTXNRMEZCY0VVc1JVRkJkVVU3UVVGRGJrVTdRVUZEUVN4dlFrRkJTWGxFTEZsQlFWa3hSU3hIUVVGSE9FTXNXVUZCU0N4RFFVRm5RbEVzY1VOQlFYRkRja01zVVVGQmNrTXNSVUZCSzBOelF5eEhRVUV2UXl4RFFVRm9RaXhEUVVGb1FqdEJRVU5CYWtNc2JVSkJRVWRETEUxQlFVZ3NRMEZCVlN4SlFVRldMRVZCUVdkQ1dTeFRRVUZvUWl4RlFVRXlRbXhDTEZGQlFUTkNMRVZCUVhGRGVVUXNVMEZCY2tNc1JVRkJaMFI2UkN4UlFVRm9SRHRCUVVOSU8wRkJRMFFzWjBKQlFVbERMRk5CUVZOR0xFbEJRVWxGTEUxQlFXcENPMEZCUTBFc1owSkJRVWxCTEUxQlFVb3NSVUZCV1R0QlFVTlNMRzlDUVVGSlVpeFZRVUZWTkVRc1IwRkJaQ3hGUVVGdFFqdEJRVU5tYUVRc2RVSkJRVWR6UXl4TFFVRklMRU5CUVZNc2EwUkJRVlE3UVVGRFNDeHBRa0ZHUkN4TlFVZExPMEZCUTBRM1F5eG5RMEZCV1VNc1IwRkJXaXhGUVVGcFFrTXNVVUZCYWtJc1JVRkJNa0pETEUxQlFUTkNMRVZCUVcxRFF5eFZRVUZ1UXp0QlFVTklPMEZCUTBvN08wRkJSVVFzWjBKQlFVa3NWVUZCVlVnc1IwRkJaQ3hGUVVGdFFqdEJRVU5tWjBNc01FSkJRVlZvUXl4SFFVRldMRVZCUVdWQkxFbEJRVWtyUWl4SlFVRnVRaXhGUVVGNVFsb3NVMEZCZWtJc1JVRkJiME5zUWl4UlFVRndRenRCUVVOSU96dEJRVVZFTEdkQ1FVRkpMRk5CUVZORUxFZEJRV0lzUlVGQmEwSTdRVUZEWkd0Q0xIbENRVUZUYkVJc1IwRkJWQ3hGUVVGamJVSXNVMEZCWkN4RlFVRjVRbXhDTEZGQlFYcENMRVZCUVcxRFJDeEpRVUZKWWl4SFFVRjJRenRCUVVOSU96dEJRVVZFTEdkQ1FVRkpMRlZCUVZWaExFZEJRV1FzUlVGQmJVSTdRVUZEWm10RExEaENRVUZqYkVNc1IwRkJaQ3hGUVVGdFFrRXNTVUZCU1N0Q0xFbEJRWFpDTEVWQlFUWkNXaXhUUVVFM1FpeEZRVUYzUTJ4Q0xGRkJRWGhETzBGQlEwZzdRVUZEU2p0QlFVTktPMEZCUTBvc1EwRjRSRVE3TzBGQk1FUkJMRWxCUVVsUUxFMUJRVW9zUlVGQldUdEJRVU5TTEZGQlFVMXBSU3cyUWtGQk5rSXNjVVJCUVc1RE8wRkJRMEZrTEZsQlFWRmxMRFpDUVVGU0xFZEJRWGRETEZWQlFWVkRMRWxCUVZZc1JVRkJaMEpETEZGQlFXaENMRVZCUVRCQ00wTXNVMEZCTVVJc1JVRkJjVU52UWl4SFFVRnlReXhGUVVFd1EzZENMRWxCUVRGRExFVkJRV2RFTzBGQlEzQkdMRmxCUVVsNFFpeEpRVUZKUlN4VFFVRktMRWxCUVdsQ1JpeEpRVUZKUlN4VFFVRktMRU5CUVdORExFOUJRV1FzUTBGQmMwSnZRaXhSUVVGMFFpeExRVUZ0UXl4RFFVRjRSQ3hGUVVFeVJEdEJRVU4yUkR0QlFVTkJMR2RDUVVGSlJTeG5Ra0ZCWjBKb1JpeEhRVUZIT0VNc1dVRkJTQ3hEUVVGblFsRXNjVU5CUVhGRGQwSXNVVUZCY2tNc1JVRkJLME4yUWl4SFFVRXZReXhEUVVGb1FpeERRVUZ3UWp0QlFVTkJha01zWlVGQlIybENMRTlCUVVnc1EwRkJWeXhKUVVGWUxFVkJRV2xDU2l4VFFVRnFRaXhGUVVFMFFqSkRMRkZCUVRWQ0xFVkJRWE5EUlN4aFFVRjBRenRCUVVOQkxHMUNRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTkVMRmxCUVVsR0xHRkJRV0VzVTBGQllpeEpRVU5CT1VVc1IwRkJSM2RETEdOQlFVZ3NRMEZCYTBKMVF5eEpRVUZzUWl4RlFVRjNRbnBFTEVkQlFVY3lSQ3hUUVVFelFpeERRVVJCTEVsQlJVRXNRMEZCUTA0c01rSkJRVEpDVHl4SlFVRXpRaXhEUVVGblEwd3NTVUZCYUVNc1EwRkdUQ3hGUVVkRk8wRkJRMFYyUkN4bFFVRkhjME1zUzBGQlNDeHZRa0ZCZVVKclFpeFJRVUY2UWl4NVFrRkJiVVF6UXl4VFFVRnVSQ3h2UmtGQmVVa3lReXhSUVVGNlNUdEJRVU5JTzBGQlEwb3NTMEZpUkR0QlFXTklPenRCUVVWRWFrSXNVVUZCVVhOQ0xIVkNRVUZTTEVkQlFXdERMRlZCUVZWT0xFbEJRVllzUlVGQlowSkRMRkZCUVdoQ0xFVkJRVEJDTTBNc1UwRkJNVUlzUlVGQmNVTnZRaXhIUVVGeVF5eEZRVUV3UTNkQ0xFbEJRVEZETEVWQlFXZEVPMEZCUXpsRkxGRkJRVWx5UlN4VlFVRlZiMFVzWVVGQllTeGhRVUV6UWl4RlFVRXdRenRCUVVOMFEzaEVMRmRCUVVkcFFpeFBRVUZJTEVOQlFWY3NTVUZCV0N4RlFVRnBRa29zVTBGQmFrSTdRVUZEUVN4bFFVRlBMRXRCUVZBN1FVRkRTRHRCUVVORUxGRkJRVWtzVDBGQlR6QkRMRWxCUVZBc1MwRkJaMElzVlVGQmFFSXNTVUZCT0VKQkxGTkJRVk1zU1VGQk0wTXNSVUZCYVVRN1FVRkROME1zV1VGQlNXNUZMRTFCUVVvc1JVRkJXVHRCUVVOU0xHbENRVUZMYTBVc05rSkJRVXdzUTBGQmJVTkRMRWxCUVc1RExFVkJRWGxEUXl4UlFVRjZReXhGUVVGdFJETkRMRk5CUVc1RUxFVkJRVGhFYjBJc1IwRkJPVVFzUlVGQmJVVjNRaXhKUVVGdVJUdEJRVU5JTzBGQlEwb3NTMEZLUkN4TlFVdExPMEZCUTBRc1dVRkJTWEpGTEUxQlFVb3NSVUZCV1R0QlFVTlNMR2RDUVVGSmJVVXNVMEZCVXl4TFFVRlVMRWxCUVd0Q1JTeEpRVUZzUWl4SlFVRXdRa0VzUzBGQlMwc3NVMEZCYmtNc1JVRkJPRU03UVVGRE1VTTdRVUZEUVN4dlFrRkJTVU1zV1VGQldVNHNTMEZCUzBzc1UwRkJUQ3hEUVVGbFRpeFJRVUZtTEVOQlFXaENPMEZCUTBFc2IwSkJRVWtzVDBGQlQwOHNVMEZCVUN4TFFVRnhRaXhWUVVGNlFpeEZRVUZ4UXp0QlFVTnFReXgzUWtGQlNVTXNWVUZCVlhSR0xFZEJRVWM0UXl4WlFVRklMRU5CUVdkQ2FVTXNTVUZCYUVJc1NVRkJkMElzUjBGQmVFSXNSMEZCT0VKRUxGRkJRVFZETzBGQlEwRXNkMEpCUVVsVExGTkJRVk53UkN4WlFVRlpMRWRCUVZvc1IwRkJhMEl5UXl4UlFVRXZRanRCUVVOQmVFUXNkVUpCUVVkRExFMUJRVWdzUTBGQlZTeEpRVUZXTEVWQlFXZENaMFVzVFVGQmFFSXNSVUZCZDBKRUxFOUJRWGhDTEVWQlFXbERReXhOUVVGcVF5eEZRVUY1UTBFc1RVRkJla003UVVGRFNEdEJRVU5LTzBGQlEwUXNaMEpCUVVsRExGVkJRVlV2UlN4dlFrRkJiMEp4UlN4UlFVRndRaXhEUVVGa08wRkJRMEVzWjBKQlFVbFZMRTlCUVVvc1JVRkJZVHRCUVVOVWJFVXNiVUpCUVVkRExFMUJRVWdzUTBGQlZTeEpRVUZXTEVWQlFXZENXU3hUUVVGb1FpeEZRVUV5UWpKRExGRkJRVE5DTEVWQlFYRkRWU3hQUVVGeVF6dEJRVU5JTEdGQlJrUXNUVUZIU3l4SlFVRkpXQ3hKUVVGS0xFVkJRVlU3UVVGRFdIWkVMRzFDUVVGSGFVSXNUMEZCU0N4RFFVRlhMRWxCUVZnc1JVRkJhVUpLTEZOQlFXcENMRVZCUVRSQ01rTXNVVUZCTlVJN1FVRkRTRHRCUVVOS08wRkJRMFFzWlVGQlR5eExRVUZRTzBGQlEwZzdRVUZEUkN4WFFVRlBMRWxCUVZBN1FVRkRTQ3hEUVdoRFJDSXNJbVpwYkdVaU9pSndjbVZ3Y205alpYTnpMV05zWVhOekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVE10TWpBeE5pQkRhSFZyYjI1bklGUmxZMmh1YjJ4dloybGxjeUJKYm1NdVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTNMVEl3TVRnZ1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVYRzVjYmlCb2RIUndjem92TDNkM2R5NWpiMk52Y3k1amIyMHZYRzVjYmlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVNCamIzQjVYRzRnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmxibWRwYm1VZ2MyOTFjbU5sSUdOdlpHVWdLSFJvWlNCY0lsTnZablIzWVhKbFhDSXBMQ0JoSUd4cGJXbDBaV1FzWEc0Z0lIZHZjbXhrZDJsa1pTd2djbTk1WVd4MGVTMW1jbVZsTENCdWIyNHRZWE56YVdkdVlXSnNaU3dnY21WMmIyTmhZbXhsSUdGdVpDQnViMjR0WlhoamJIVnphWFpsSUd4cFkyVnVjMlZjYmlCMGJ5QjFjMlVnUTI5amIzTWdRM0psWVhSdmNpQnpiMnhsYkhrZ2RHOGdaR1YyWld4dmNDQm5ZVzFsY3lCdmJpQjViM1Z5SUhSaGNtZGxkQ0J3YkdGMFptOXliWE11SUZsdmRTQnphR0ZzYkZ4dUlDQnViM1FnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5bWRIZGhjbVVnWm05eUlHUmxkbVZzYjNCcGJtY2diM1JvWlhJZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2RHaGhkQ2R6WEc0Z0lIVnpaV1FnWm05eUlHUmxkbVZzYjNCcGJtY2daMkZ0WlhNdUlGbHZkU0JoY21VZ2JtOTBJR2R5WVc1MFpXUWdkRzhnY0hWaWJHbHphQ3dnWkdsemRISnBZblYwWlN4Y2JpQWdjM1ZpYkdsalpXNXpaU3dnWVc1a0wyOXlJSE5sYkd3Z1kyOXdhV1Z6SUc5bUlFTnZZMjl6SUVOeVpXRjBiM0l1WEc1Y2JpQlVhR1VnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nYVc0Z2RHaHBjeUJNYVdObGJuTmxJRUZuY21WbGJXVnVkQ0JoY21VZ2JHbGpaVzV6WldRc0lHNXZkQ0J6YjJ4a0xseHVJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGlCeVpYTmxjblpsY3lCaGJHd2djbWxuYUhSeklHNXZkQ0JsZUhCeVpYTnpiSGtnWjNKaGJuUmxaQ0IwYnlCNWIzVXVYRzVjYmlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVElFOVNYRzRnU1UxUVRFbEZSQ3dnU1U1RFRGVkVTVTVISUVKVlZDQk9UMVFnVEVsTlNWUkZSQ0JVVHlCVVNFVWdWMEZTVWtGT1ZFbEZVeUJQUmlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzWEc0Z1JrbFVUa1ZUVXlCR1QxSWdRU0JRUVZKVVNVTlZURUZTSUZCVlVsQlBVMFVnUVU1RUlFNVBUa2xPUmxKSlRrZEZUVVZPVkM0Z1NVNGdUazhnUlZaRlRsUWdVMGhCVEV3Z1ZFaEZYRzRnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3dnUkVGTlFVZEZVeUJQVWlCUFZFaEZVbHh1SUV4SlFVSkpURWxVV1N3Z1YwaEZWRWhGVWlCSlRpQkJUaUJCUTFSSlQwNGdUMFlnUTA5T1ZGSkJRMVFzSUZSUFVsUWdUMUlnVDFSSVJWSlhTVk5GTENCQlVrbFRTVTVISUVaU1QwMHNYRzRnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGx4dUlGUklSU0JUVDBaVVYwRlNSUzVjYmlBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WEc1amIyNXpkQ0JxY3lBOUlISmxjWFZwY21Vb0p5NHZhbk1uS1R0Y2JseHVMeThnNWFLZTVZcWc2YUtFNWFTRTU1Q0c1YkdlNW9DbjZMK1o1TGlxNXEybDZhcWs1NXFFNTV1dTU1cUU1cGl2NlptTjVMMk9JRU5EUTJ4aGMzTWc1NXFFNWE2ZTU0Nnc2WnErNWJxbTc3eU01YkNHNXErVTZMNkQ1Nml6NWE2YTU1cUU2WUNhNTVTbzZZQzc2TDZSNVpLTTVMaUE1THFiNlp5QTVyR0M1cStVNkw2RDU0RzE1clM3NTVxRTViR2U1b0NuNlp5QTVyR0M1WWlHNlpxVTVieUE0NENDWEc1Y2JuWmhjaUJUWlhKcFlXeHBlbUZpYkdWQmRIUnljeUE5SUh0Y2JpQWdJQ0IxY213NklIdGNiaUFnSUNBZ0lDQWdZMkZ1VlhObFpFbHVSMlYwT2lCMGNuVmxYRzRnSUNBZ2ZTeGNiaUFnSUNCa1pXWmhkV3gwT2lCN2ZTeGNiaUFnSUNCelpYSnBZV3hwZW1GaWJHVTZJSHQ5TEZ4dUlDQWdJR1ZrYVhSdmNrOXViSGs2SUh0OUxGeHVJQ0FnSUdadmNtMWxjbXg1VTJWeWFXRnNhWHBsWkVGek9pQjdmVnh1ZlR0Y2JseHVkbUZ5SUZSWlVFOWZWRTlmUTA5U1VrVkRWRjlFUlZZZ1BTQkRRMTlFUlZZZ0ppWWdlMXh1SUNBZ0lHVjRkR1Z1WkRvZ0oyVjRkR1Z1WkhNbkxGeHVJQ0FnSUhCeWIzQmxjblI1T2lBbmNISnZjR1Z5ZEdsbGN5Y3NYRzRnSUNBZ2MzUmhkR2xqT2lBbmMzUmhkR2xqY3ljc1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJNklDZGpkRzl5SjF4dWZUdGNibHh1THk4ZzZhS0U1YVNFNTVDR0lHNXZkR2xtZVNEbnJZbm1pYW5sc1pYbHNaN21nS2RjYm1aMWJtTjBhVzl1SUhCaGNuTmxUbTkwYVdaNUlDaDJZV3dzSUhCeWIzQk9ZVzFsTENCdWIzUnBabmtzSUhCeWIzQmxjblJwWlhNcElIdGNiaUFnSUNCcFppQW9kbUZzTG1kbGRDQjhmQ0IyWVd3dWMyVjBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaERRMTlFUlZZcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxuZGhjbTVKUkNnMU5UQXdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gyWVd3dWFHRnpUM2R1VUhKdmNHVnlkSGtvSjJSbFptRjFiSFFuS1NrZ2UxeHVJQ0FnSUNBZ0lDQXZMeURtdDd2bGlxRG1sckRubW9UbGhvWHBnNmpsc1o3bWdLZnZ2SXpsc0libGpwL21uYVhubW9UbHNaN21nS2ZrdjY3bWxMbmt1TG9nWjJWMGRHVnlMM05sZEhSbGNpRGx2YUxsdkk5Y2JpQWdJQ0FnSUNBZ0x5OGc3N3lJNUx1bElGOGc1YnlBNWFTMDViQ0c2SWVxNVlxbzZLNis1NzJ1Y0hKdmNHVnlkSGtnNUxpNklIWnBjMmxpYkdVNklHWmhiSE5sNzd5SlhHNGdJQ0FnSUNBZ0lIWmhjaUJ1WlhkTFpYa2dQU0JjSWw5T0pGd2lJQ3NnY0hKdmNFNWhiV1U3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnNMbWRsZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpXMjVsZDB0bGVWMDdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUhaaGJDNXpaWFFnUFNCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdmJHUldZV3gxWlNBOUlIUm9hWE5iYm1WM1MyVjVYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE5iYm1WM1MyVjVYU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtOTBhV1o1TG1OaGJHd29kR2hwY3l3Z2IyeGtWbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaERRMTlGUkVsVVQxSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiQzV1YjNScFpubEdiM0lnUFNCdVpYZExaWGs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjJZWElnYm1WM1ZtRnNkV1VnUFNCN2ZUdGNiaUFnSUNBZ0lDQWdjSEp2Y0dWeWRHbGxjMXR1WlhkTFpYbGRJRDBnYm1WM1ZtRnNkV1U3WEc0Z0lDQWdJQ0FnSUM4dklPV3dodVM0amVpRHZlZVVxT1M2am1kbGRPYVd1ZWF6bGVTNHJlZWFoT1d4bnVhQXArZW51K1dLcU9XSXNHNWxkMVpoYkhWbDVMaXRYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR0YwZEhJZ2FXNGdVMlZ5YVdGc2FYcGhZbXhsUVhSMGNuTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIySUQwZ1UyVnlhV0ZzYVhwaFlteGxRWFIwY25OYllYUjBjbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZG1Gc0xtaGhjMDkzYmxCeWIzQmxjblI1S0dGMGRISXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1ZtRnNkV1ZiWVhSMGNsMGdQU0IyWVd4YllYUjBjbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjJMbU5oYmxWelpXUkpia2RsZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdkbUZzVzJGMGRISmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJR2xtSUNoRFExOUVSVllwSUh0Y2JpQWdJQ0FnSUNBZ1kyTXVkMkZ5YmtsRUtEVTFNREVwTzF4dUlDQWdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdZMmhsWTJ0VmNtd2dLSFpoYkN3Z1kyeGhjM05PWVcxbExDQndjbTl3VG1GdFpTd2dkWEpzS1NCN1hHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZFhKc0tTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RYSnNMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFZ5YkNBOUlIVnliRnN3WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaERRMTlGUkVsVVQxSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCall5NWxjbkp2Y2tsRUtEVTFNRElzSUdOc1lYTnpUbUZ0WlN3Z2NISnZjRTVoYldVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaERRMTlGUkVsVVQxSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIVnliQ0E5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyTXVkMkZ5YmtsRUtEVTFNRE1zSUdOc1lYTnpUbUZ0WlN3Z2NISnZjRTVoYldVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZFhKc0lDRTlQU0FuWm5WdVkzUnBiMjRuSUh4OElDRnFjeTVwYzBOb2FXeGtRMnhoYzNOUFppaDFjbXdzSUdOakxsSmhkMEZ6YzJWMEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOakxtVnljbTl5U1VRb05UVXdOQ3dnWTJ4aGMzTk9ZVzFsTENCd2NtOXdUbUZ0WlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hWeWJDQTlQVDBnWTJNdVVtRjNRWE56WlhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxuZGhjbTRvSjFCc1pXRnpaU0JqYUdGdVoyVWdkR2hsSUdSbFptbHVhWFJwYjI0Z2IyWWdjSEp2Y0dWeWRIa2dYRnduSlhOY1hDY2dhVzRnWTJ4aGMzTWdYRnduSlhOY1hDY3VJRk4wWVhKMGFXNW5JR1p5YjIwZ2RqRXVNVEFzWEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkMGFHVWdkWE5sSUc5bUlHUmxZMnhoY21sdVp5QmhJSEJ5YjNCbGNuUjVJR2x1SUVORFEyeGhjM01nWVhNZ1lTQlZVa3dnYUdGeklHSmxaVzRnWkdWd2NtVmpZWFJsWkM1Y1hHNG5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owWnZjaUJsZUdGdGNHeGxMQ0JwWmlCd2NtOXdaWEowZVNCcGN5QmpZeTVTWVhkQmMzTmxkQ3dnZEdobElIQnlaWFpwYjNWeklHUmxabWx1YVhScGIyNGdhWE02WEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjZ0lDQWdKWE02SUdOakxsSmhkMEZ6YzJWMExGeGNiaWNnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5JQ0FnSUM4dklHOXlPbHhjYmljZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuSUNBZ0lDVnpPaUI3WEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjZ0lDQWdJQ0IxY213NklHTmpMbEpoZDBGemMyVjBMRnhjYmljZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuSUNBZ0lDQWdaR1ZtWVhWc2REb2dYQ0pjSWx4Y2JpY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbklDQWdJSDBzWEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjZ0lDQWdMeThnWVc1a0lIUm9aU0J2Y21sbmFXNWhiQ0J0WlhSb2IyUWdkRzhnWjJWMElIVnliQ0JwY3pwY1hHNG5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5QWdJQ0JnZEdocGN5NGxjMkJjWEc0bklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjA1dmR5QnBkQ0J6YUc5MWJHUWdZbVVnWTJoaGJtZGxaQ0IwYnpwY1hHNG5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5QWdJQ0FsY3pvZ2UxeGNiaWNnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5JQ0FnSUNBZ2RIbHdaVG9nWTJNdVFYTnpaWFFzSUNBZ0lDQXZMeUIxYzJVZ1hGd25kSGx3WlRwY1hDY2dkRzhnWkdWbWFXNWxJRUZ6YzJWMElHOWlhbVZqZENCa2FYSmxZM1JzZVZ4Y2JpY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbklDQWdJQ0FnWkdWbVlYVnNkRG9nYm5Wc2JDd2dJQ0FnSUNBdkx5QnZZbXBsWTNSY1hDZHpJR1JsWm1GMWJIUWdkbUZzZFdVZ2FYTWdiblZzYkZ4Y2JpY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbklDQWdJSDBzWEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjZ0lDQWdMeThnWVc1a0lIbHZkU0J0ZFhOMElHZGxkQ0IwYUdVZ2RYSnNJR0o1SUhWemFXNW5PbHhjYmljZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuSUNBZ0lHQjBhR2x6TGlWekxtNWhkR2wyWlZWeWJHQmNYRzRuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKeWhVYUdseklHaGxiSEJ6SUhWeklIUnZJSE4xWTJObGMzTm1kV3hzZVNCeVpXWmhZM1J2Y2lCaGJHd2dVbUYzUVhOelpYUnpJR0YwSUhZeUxqQXNJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5jMjl5Y25rZ1ptOXlJSFJvWlNCcGJtTnZiblpsYm1sbGJtTmxMaUJjWEhWRU9ETkVYRngxUkVVek1DQXBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjRTVoYldVc0lHTnNZWE56VG1GdFpTd2djSEp2Y0U1aGJXVXNJSEJ5YjNCT1lXMWxMQ0J3Y205d1RtRnRaU3dnY0hKdmNFNWhiV1VzSUhCeWIzQk9ZVzFsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaHFjeTVwYzBOb2FXeGtRMnhoYzNOUFppaDFjbXdzSUdOakxrRnpjMlYwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTmpMbEpoZDBGemMyVjBMbmRoYzFKaGQwRnpjMlYwVkhsd1pTaDFjbXdwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0YyWVd3dVgzTm9iM0owS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG5kaGNtNG9KMUJzWldGelpTQmphR0Z1WjJVZ2RHaGxJR1JsWm1sdWFYUnBiMjRnYjJZZ2NISnZjR1Z5ZEhrZ1hGd25KWE5jWENjZ2FXNGdZMnhoYzNNZ1hGd25KWE5jWENjdUlGTjBZWEowYVc1bklHWnliMjBnZGpFdU1UQXNYRnh1SnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKM1JvWlNCMWMyVWdiMllnWkdWamJHRnlhVzVuSUdFZ2NISnZjR1Z5ZEhrZ2FXNGdRME5EYkdGemN5QmhjeUJoSUZWU1RDQm9ZWE1nWW1WbGJpQmtaWEJ5WldOaGRHVmtMbHhjYmljZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RHYjNJZ1pYaGhiWEJzWlN3Z2FXWWdjSEp2Y0dWeWRIa2dhWE1nVkdWNGRIVnlaVEpFTENCMGFHVWdjSEpsZG1sdmRYTWdaR1ZtYVc1cGRHbHZiaUJwY3pwY1hHNG5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbklDQWdJQ1Z6T2lCall5NVVaWGgwZFhKbE1rUXNYRnh1SnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKeUFnSUNBdkx5QnZjanBjWEc0bklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuSUNBZ0lDVnpPaUI3WEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnlBZ0lDQWdJSFZ5YkRvZ1kyTXVWR1Y0ZEhWeVpUSkVMRnhjYmljZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2NnSUNBZ0lDQmtaV1poZFd4ME9pQmNJbHdpWEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnlBZ0lDQjlMRnhjYmljZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RPYjNjZ2FYUWdjMmh2ZFd4a0lHSmxJR05vWVc1blpXUWdkRzg2WEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnlBZ0lDQWxjem9nZTF4Y2JpY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjZ0lDQWdJQ0IwZVhCbE9pQmpZeTVVWlhoMGRYSmxNa1FzSUM4dklIVnpaU0JjWENkMGVYQmxPbHhjSnlCMGJ5QmtaV1pwYm1VZ1ZHVjRkSFZ5WlRKRUlHOWlhbVZqZENCa2FYSmxZM1JzZVZ4Y2JpY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjZ0lDQWdJQ0JrWldaaGRXeDBPaUJ1ZFd4c0xDQWdJQ0FnSUM4dklHOWlhbVZqZEZ4Y0ozTWdaR1ZtWVhWc2RDQjJZV3gxWlNCcGN5QnVkV3hzWEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnlBZ0lDQjlMRnhjYmljZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2NvVkdocGN5Qm9aV3h3Y3lCMWN5QjBieUJ6ZFdOalpYTnpablZzYkhrZ2NtVm1ZV04wYjNJZ1lXeHNJRkpoZDBGemMyVjBjeUJoZENCMk1pNHdMQ0FuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5jMjl5Y25rZ1ptOXlJSFJvWlNCcGJtTnZiblpsYm1sbGJtTmxMaUJjWEhWRU9ETkVYRngxUkVVek1DQXBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdUbUZ0WlN3Z1kyeGhjM05PWVcxbExDQndjbTl3VG1GdFpTd2djSEp2Y0U1aGJXVXNJSEJ5YjNCT1lXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMk11WlhKeWIzSkpSQ2cxTlRBMUxDQmpiR0Z6YzA1aGJXVXNJSEJ5YjNCT1lXMWxMQ0JqWXk1cWN5NW5aWFJEYkdGemMwNWhiV1VvZFhKc0tTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0haaGJDNTBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMk11ZDJGeWJrbEVLRFUxTURZc0lHTnNZWE56VG1GdFpTd2djSEp2Y0U1aGJXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lIWmhiQzUwZVhCbElEMGdkWEpzTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ3WVhKelpWUjVjR1VnS0haaGJDd2dkSGx3WlN3Z1kyeGhjM05PWVcxbExDQndjbTl3VG1GdFpTa2dlMXh1SUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtIUjVjR1VwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hEUTE5RlJFbFVUMUlnSmlZZ0oyUmxabUYxYkhRbklHbHVJSFpoYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHbHpRWEp5WVhrZ1BTQnlaWEYxYVhKbEtDY3VMME5EUTJ4aGMzTW5LUzVwYzBGeWNtRjVPeUFnSUM4dklISmxjWFZwY21VZ2JHRjZhV3g1SUhSdklHRjJiMmxrSUdOcGNtTjFiR0Z5SUhKbGNYVnBjbVVvS1NCallXeHNjMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZwYzBGeWNtRjVLSFpoYkM1a1pXWmhkV3gwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbmRoY201SlJDZzFOVEEzTENCamJHRnpjMDVoYldVc0lIQnliM0JPWVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pTNXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTJNdVVtRjNRWE56WlhRdWFYTlNZWGRCYzNObGRGUjVjR1VvZEhsd1pWc3dYU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXd3VkWEpzSUQwZ2RIbHdaVnN3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnZG1Gc0xuUjVjR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzTG5SNWNHVWdQU0IwZVhCbElEMGdkSGx3WlZzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZeTVsY25KdmNrbEVLRFUxTURnc0lHTnNZWE56VG1GdFpTd2djSEp2Y0U1aGJXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hEUTE5RlJFbFVUMUlwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQjBlWEJsSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTJNdVVtRjNRWE56WlhRdWFYTlNZWGRCYzNObGRGUjVjR1VvZEhsd1pTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWXk1M1lYSnVTVVFvTlRVd09Td2dZMnhoYzNOT1lXMWxMQ0J3Y205d1RtRnRaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FuTXVaMlYwUTJ4aGMzTk9ZVzFsS0hSNWNHVXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2gwZVhCbElEMDlQU0FuVG5WdFltVnlKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMk11ZDJGeWJrbEVLRFUxTVRBc0lHTnNZWE56VG1GdFpTd2djSEp2Y0U1aGJXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hSNWNHVWdQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyTXVkMkZ5YmtsRUtEVTFNVEVzSUdOc1lYTnpUbUZ0WlN3Z2NISnZjRTVoYldVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCd2IzTjBRMmhsWTJ0VWVYQmxJQ2gyWVd3c0lIUjVjR1VzSUdOc1lYTnpUbUZ0WlN3Z2NISnZjRTVoYldVcElIdGNiaUFnSUNCcFppQW9RME5mUlVSSlZFOVNJQ1ltSUhSNWNHVnZaaUIwZVhCbElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqWXk1RGJHRnpjeTVmYVhORFEwTnNZWE56S0hSNWNHVXBJQ1ltSUhaaGJDNXpaWEpwWVd4cGVtRmliR1VnSVQwOUlHWmhiSE5sSUNZbUlDRnFjeTVmWjJWMFEyeGhjM05KWkNoMGVYQmxMQ0JtWVd4elpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmpMbmRoY201SlJDZzFOVEV5TENCamJHRnpjMDVoYldVc0lIQnliM0JPWVcxbExDQmpiR0Z6YzA1aGJXVXNJSEJ5YjNCT1lXMWxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwUW1GelpVTnNZWE56VjJobGNtVlFjbTl3WlhKMGVVUmxabWx1WldSZlJFVldJQ2h3Y205d1RtRnRaU3dnWTJ4ektTQjdYRzRnSUNBZ2FXWWdLRU5EWDBSRlZpa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVnpPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tEc2dZMnh6SUNZbUlHTnNjeTVmWDNCeWIzQnpYMThnSmlZZ1kyeHpMbDlmY0hKdmNITmZYeTVwYm1SbGVFOW1LSEJ5YjNCT1lXMWxLU0FoUFQwZ0xURTdJR05zY3lBOUlHTnNjeTRrYzNWd1pYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjeUE5SUdOc2N6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb0lYSmxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMk11WlhKeWIzSW9KM1Z1YTI1dmQyNGdaWEp5YjNJbktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6TzF4dUlDQWdJSDFjYm4xY2JseHVaWGh3YjNKMGN5NW5aWFJHZFd4c1JtOXliVTltVUhKdmNHVnlkSGtnUFNCbWRXNWpkR2x2YmlBb2IzQjBhVzl1Y3l3Z2NISnZjRzVoYldWZlpHVjJMQ0JqYkdGemMyNWhiV1ZmWkdWMktTQjdYRzRnSUNBZ2RtRnlJR2x6VEdsMFpYSmhiQ0E5SUc5d2RHbHZibk1nSmlZZ2IzQjBhVzl1Y3k1amIyNXpkSEoxWTNSdmNpQTlQVDBnVDJKcVpXTjBPMXh1SUNBZ0lHbG1JQ2dnSVdselRHbDBaWEpoYkNBcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29iM0IwYVc5dWN5a2dKaVlnYjNCMGFXOXVjeTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RIbHdaU0E5SUc5d2RHbHZibk5iTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1EwTmZSRVZXSUNZbUlHTmpMbEpoZDBGemMyVjBMbmRoYzFKaGQwRnpjMlYwVkhsd1pTaDBlWEJsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1JsY0hKbFkyRjBaU0JnYlhsUWNtOXdPaUJiWTJNdVZHVjRkSFZ5WlRKRVhXQWdjMmx1WTJVZ01TNHhNRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG5kaGNtNG9KMUJzWldGelpTQmphR0Z1WjJVZ2RHaGxJR1JsWm1sdWFYUnBiMjRnYjJZZ2NISnZjR1Z5ZEhrZ1hGd25KWE5jWENjZ2FXNGdZMnhoYzNNZ1hGd25KWE5jWENjdUlGTjBZWEowYVc1bklHWnliMjBnZGpFdU1UQXNYRnh1SnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmNISnZjR1Z5ZEdsbGN5QnBiaUJEUTBOc1lYTnpJR05oYmlCdWIzUWdZbVVnWVdKaWNtVjJhV0YwWldRZ2FXWWdkR2hsZVNCaGNtVWdiMllnZEhsd1pTQlNZWGRCYzNObGRDNWNYRzRuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkUWJHVmhjMlVnZFhObElIUm9aU0JqYjIxd2JHVjBaU0JtYjNKdExseGNiaWNnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBadmNpQmxlR0Z0Y0d4bExDQnBaaUJ3Y205d1pYSjBlU0JwY3lCVVpYaDBkWEpsTWtSY1hDZHpJSFZ5YkNCaGNuSmhlU3dnZEdobElIQnlaWFpwYjNWeklHUmxabWx1YVhScGIyNGdhWE02WEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5JQ0FnSUNWek9pQmJZMk11VkdWNGRIVnlaVEpFWFN4Y1hHNG5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RKWmlCNWIzVWdkWE5sSUVwVExDQnBkQ0J6YUc5MWJHUWdZbVVnWTJoaGJtZGxaQ0IwYnpwY1hHNG5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2NnSUNBZ0pYTTZJSHRjWEc0bklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDY2dJQ0FnSUNCMGVYQmxPaUJqWXk1VVpYaDBkWEpsTWtRc0lDOHZJSFZ6WlNCY1hDZDBlWEJsT2x4Y0p5QjBieUJrWldacGJtVWdZVzRnWVhKeVlYa2diMllnVkdWNGRIVnlaVEpFSUc5aWFtVmpkSE5jWEc0bklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDY2dJQ0FnSUNCa1pXWmhkV3gwT2lCYlhWeGNiaWNnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnlBZ0lDQjlMRnhjYmljZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owbG1JSGx2ZFNCMWMyVWdWRk1zSUdsMElITm9iM1ZzWkNCaVpTQmphR0Z1WjJWa0lIUnZPbHhjYmljZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5QWdJQ0FsY3pvZ2UxeGNiaWNnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnlBZ0lDQWdJSFI1Y0dVNklHTmpMbFJsZUhSMWNtVXlSQ3dnTHk4Z2RYTmxJRnhjSjNSNWNHVTZYRnduSUhSdklHUmxabWx1WlNCaGJpQmhjbkpoZVNCdlppQlVaWGgwZFhKbE1rUWdiMkpxWldOMGMxeGNiaWNnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnlBZ0lDQjlYRnh1SnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbklDQWdKWE02SUdOakxsUmxlSFIxY21VeVJGdGRJRDBnVzEwN1hGeHVKeXRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2NvVkdocGN5Qm9aV3h3Y3lCMWN5QjBieUJ6ZFdOalpYTnpablZzYkhrZ2NtVm1ZV04wYjNJZ1lXeHNJRkpoZDBGemMyVjBjeUJoZENCMk1pNHdMQ0FuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkemIzSnllU0JtYjNJZ2RHaGxJR2x1WTI5dWRtVnVhV1Z1WTJVdUlGeGNkVVE0TTBSY1hIVkVSVE13SUNrbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjRzVoYldWZlpHVjJMQ0JqYkdGemMyNWhiV1ZmWkdWMkxDQndjbTl3Ym1GdFpWOWtaWFlzSUhCeWIzQnVZVzFsWDJSbGRpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nVzEwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ5YkRvZ2IzQjBhVzl1Y3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM05vYjNKME9pQjBjblZsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ1cxMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ2IzQjBhVzl1Y3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmMyaHZjblE2SUhSeWRXVmNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHOXdkR2x2Ym5NZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMGVYQmxJRDBnYjNCMGFXOXVjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWTJNdVVtRjNRWE56WlhRdWFYTlNZWGRCYzNObGRGUjVjR1VvZEhsd1pTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyTXVVbUYzUVhOelpYUXVkMkZ6VW1GM1FYTnpaWFJVZVhCbEtIUjVjR1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdSbGNISmxZMkYwWlNCZ2JYbFFjbTl3T2lCall5NVVaWGgwZFhKbE1rUmdJSE5wYm1ObElERXVNVEJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRU5EWDBSRlZpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11ZDJGeWJpZ25VR3hsWVhObElHTm9ZVzVuWlNCMGFHVWdaR1ZtYVc1cGRHbHZiaUJ2WmlCd2NtOXdaWEowZVNCY1hDY2xjMXhjSnlCcGJpQmpiR0Z6Y3lCY1hDY2xjMXhjSnk0Z1UzUmhjblJwYm1jZ1puSnZiU0IyTVM0eE1DeGNYRzRuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjNCeWIzQmxjblJwWlhNZ2FXNGdRME5EYkdGemN5QmpZVzRnYm05MElHSmxJR0ZpWW5KbGRtbGhkR1ZrSUdsbUlIUm9aWGtnWVhKbElHOW1JSFI1Y0dVZ1VtRjNRWE56WlhRdVhGeHVKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RRYkdWaGMyVWdkWE5sSUhSb1pTQmpiMjF3YkdWMFpTQm1iM0p0TGx4Y2JpY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5SbTl5SUdWNFlXMXdiR1VzSUdsbUlIUm9aU0IwZVhCbElHbHpJRlJsZUhSMWNtVXlSQ3dnZEdobElIQnlaWFpwYjNWeklHUmxabWx1YVhScGIyNGdhWE02WEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDY2dJQ0FnSlhNNklHTmpMbFJsZUhSMWNtVXlSQ3hjWEc0bklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owbG1JSGx2ZFNCMWMyVWdTbE1zSUdsMElITm9iM1ZzWkNCaVpTQmphR0Z1WjJWa0lIUnZPbHhjYmljZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbklDQWdJQ1Z6T2lCN1hGeHVKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2NnSUNBZ0lDQjBlWEJsT2lCall5NVVaWGgwZFhKbE1rUWdMeThnZFhObElGeGNKM1I1Y0dVNlhGd25JSFJ2SUdSbFptbHVaU0JVWlhoMGRYSmxNa1FnYjJKcVpXTjBJR1JwY21WamRHeDVYRnh1SnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjZ0lDQWdJQ0JrWldaaGRXeDBPaUJ1ZFd4c0xDQWdJQ0FnTHk4Z2IySnFaV04wWEZ3bmN5QmtaV1poZFd4MElIWmhiSFZsSUdseklHNTFiR3hjWEc0bklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5QWdJQ0I5TEZ4Y2JpY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5TV1lnZVc5MUlIVnpaU0JVVXl3Z2FYUWdjMmh2ZFd4a0lHSmxJR05vWVc1blpXUWdkRzg2WEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDY2dJQ0FnSlhNNklIdGNYRzRuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnlBZ0lDQWdJSFI1Y0dVNklHTmpMbFJsZUhSMWNtVXlSQ0F2THlCMWMyVWdYRnduZEhsd1pUcGNYQ2NnZEc4Z1pHVm1hVzVsSUZSbGVIUjFjbVV5UkNCdlltcGxZM1FnWkdseVpXTjBiSGxjWEc0bklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5QWdJQ0I5WEZ4dUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDY2dJQ0FnSlhNNklHTmpMbFJsZUhSMWNtVXlSQ0E5SUc1MWJHdzdYRnh1Snl0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnloVWFHbHpJR2hsYkhCeklIVnpJSFJ2SUhOMVkyTmxjM05tZFd4c2VTQnlaV1poWTNSdmNpQmhiR3dnVW1GM1FYTnpaWFJ6SUdGMElIWXlMakFzSUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmMyOXljbmtnWm05eUlIUm9aU0JwYm1OdmJuWmxibWxsYm1ObExpQmNYSFZFT0RORVhGeDFSRVV6TUNBcEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjRzVoYldWZlpHVjJMQ0JqYkdGemMyNWhiV1ZmWkdWMkxDQndjbTl3Ym1GdFpWOWtaWFlzSUhCeWIzQnVZVzFsWDJSbGRpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2lCcWN5NXBjME5vYVd4a1EyeGhjM05QWmloMGVYQmxMQ0JqWXk1V1lXeDFaVlI1Y0dVcElEOGdibVYzSUhSNWNHVW9LU0E2SUc1MWJHd3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCMGVYQmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM05vYjNKME9pQjBjblZsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUFuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWNtdzZJSFI1Y0dVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzTm9iM0owT2lCMGNuVmxYRzRnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUJ2Y0hScGIyNXpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjl6YUc5eWREb2dkSEoxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYm4wN1hHNWNibVY0Y0c5eWRITXVjSEpsY0hKdlkyVnpjMEYwZEhKeklEMGdablZ1WTNScGIyNGdLSEJ5YjNCbGNuUnBaWE1zSUdOc1lYTnpUbUZ0WlN3Z1kyeHpMQ0JsY3pZcElIdGNiaUFnSUNCbWIzSWdLSFpoY2lCd2NtOXdUbUZ0WlNCcGJpQndjbTl3WlhKMGFXVnpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjJZV3dnUFNCd2NtOXdaWEowYVdWelczQnliM0JPWVcxbFhUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdaMWJHeEdiM0p0SUQwZ1pYaHdiM0owY3k1blpYUkdkV3hzUm05eWJVOW1VSEp2Y0dWeWRIa29kbUZzTENCd2NtOXdUbUZ0WlN3Z1kyeGhjM05PWVcxbEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0daMWJHeEdiM0p0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd3Z1BTQndjbTl3WlhKMGFXVnpXM0J5YjNCT1lXMWxYU0E5SUdaMWJHeEdiM0p0TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2gyWVd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaERRMTlGUkVsVVQxSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0oyUmxabUYxYkhRbklHbHVJSFpoYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtRnNMbWRsZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyTXVaWEp5YjNKSlJDZzFOVEV6TENCamJHRnpjMDVoYldVc0lIQnliM0JPWVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaDJZV3d1YzJWMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZeTVsY25KdmNrbEVLRFUxTVRRc0lHTnNZWE56VG1GdFpTd2djSEp2Y0U1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR05qTGtOc1lYTnpMbDlwYzBORFEyeGhjM01vZG1Gc0xtUmxabUYxYkhRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3d1WkdWbVlYVnNkQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZeTVsY25KdmNrbEVLRFUxTVRVc0lHTnNZWE56VG1GdFpTd2djSEp2Y0U1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tDRjJZV3d1WjJWMElDWW1JQ0YyWVd3dWMyVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ0WVhsaVpWUjVjR1ZUWTNKcGNIUWdQU0JsY3pZN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGJXRjVZbVZVZVhCbFUyTnlhWEIwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCall5NWxjbkp2Y2tsRUtEVTFNVFlzSUdOc1lYTnpUbUZ0WlN3Z2NISnZjRTVoYldVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRU5EWDBSRlZpQW1KaUFoZG1Gc0xtOTJaWEp5YVdSbElDWW1JR05zY3k1ZlgzQnliM0J6WDE4dWFXNWtaWGhQWmlod2NtOXdUbUZ0WlNrZ0lUMDlJQzB4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZMmhsWTJzZ2IzWmxjbkpwWkdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZbUZ6WlVOc1lYTnpJRDBnYW5NdVoyVjBRMnhoYzNOT1lXMWxLR2RsZEVKaGMyVkRiR0Z6YzFkb1pYSmxVSEp2Y0dWeWRIbEVaV1pwYm1Wa1gwUkZWaWh3Y205d1RtRnRaU3dnWTJ4ektTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11ZDJGeWJrbEVLRFUxTVRjc0lHTnNZWE56VG1GdFpTd2djSEp2Y0U1aGJXVXNJR0poYzJWRGJHRnpjeXdnY0hKdmNFNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzV2ZEdsbWVTQTlJSFpoYkM1dWIzUnBabms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYm05MGFXWjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFTkRYMFJGVmlBbUppQmxjellwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11WlhKeWIzSW9KMjV2ZENCNVpYUWdjM1Z3Y0c5eWRDQnViM1JwWm5rZ1lYUjBjbWxpZFhSbElHWnZjaUJGVXpZZ1EyeGhjM05sY3ljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Z5YzJWT2IzUnBabmtvZG1Gc0xDQndjbTl3VG1GdFpTd2dibTkwYVdaNUxDQndjbTl3WlhKMGFXVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2duZEhsd1pTY2dhVzRnZG1Gc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Z5YzJWVWVYQmxLSFpoYkN3Z2RtRnNMblI1Y0dVc0lHTnNZWE56VG1GdFpTd2djSEp2Y0U1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9KM1Z5YkNjZ2FXNGdkbUZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRWY213b2RtRnNMQ0JqYkdGemMwNWhiV1VzSUhCeWIzQk9ZVzFsTENCMllXd3VkWEpzS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NkMGVYQmxKeUJwYmlCMllXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOMFEyaGxZMnRVZVhCbEtIWmhiQ3dnZG1Gc0xuUjVjR1VzSUdOc1lYTnpUbUZ0WlN3Z2NISnZjRTVoYldVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dWZUdGNibHh1YVdZZ0tFTkRYMFJGVmlrZ2UxeHVJQ0FnSUdOdmJuTjBJRU5CVEV4ZlUxVlFSVkpmUkVWVFZGSlBXVjlTUlVkZlJFVldJRDBnTDF4Y1lseGNMbDl6ZFhCbGNseGNZbnhrWlhOMGNtOTVYRnh6S2x4Y0xseGNjeXBqWVd4c1hGeHpLbHhjS0Z4Y2N5cGNYSGNyWEZ4ektsc3NmQ2xkTHp0Y2JpQWdJQ0JsZUhCdmNuUnpMbVJ2Vm1Gc2FXUmhkR1ZOWlhSb2IyUlhhWFJvVUhKdmNITmZSRVZXSUQwZ1puVnVZM1JwYjI0Z0tHWjFibU1zSUdaMWJtTk9ZVzFsTENCamJHRnpjMDVoYldVc0lHTnNjeXdnWW1GelpTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1kyeHpMbDlmY0hKdmNITmZYeUFtSmlCamJITXVYMTl3Y205d2MxOWZMbWx1WkdWNFQyWW9ablZ1WTA1aGJXVXBJRDQ5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHWnBibVFnWTJ4aGMzTWdkR2hoZENCa1pXWnBibVZ6SUhSb2FYTWdiV1YwYUc5a0lHRnpJR0VnY0hKdmNHVnlkSGxjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJpWVhObFEyeGhjM05PWVcxbElEMGdhbk11WjJWMFEyeGhjM05PWVcxbEtHZGxkRUpoYzJWRGJHRnpjMWRvWlhKbFVISnZjR1Z5ZEhsRVpXWnBibVZrWDBSRlZpaG1kVzVqVG1GdFpTd2dZMnh6S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1bGNuSnZja2xFS0RNMk5EZ3NJR05zWVhOelRtRnRaU3dnWm5WdVkwNWhiV1VzSUdKaGMyVkRiR0Z6YzA1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaG1kVzVqVG1GdFpTQTlQVDBnSjJSbGMzUnliM2tuSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0JxY3k1cGMwTm9hV3hrUTJ4aGMzTlBaaWhpWVhObExDQmpZeTVEYjIxd2IyNWxiblFwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FoUTBGTVRGOVRWVkJGVWw5RVJWTlVVazlaWDFKRlIxOUVSVll1ZEdWemRDaG1kVzVqS1Z4dUlDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxtVnljbTl5S0dCUGRtVnlkM0pwZEdsdVp5QW5KSHRtZFc1alRtRnRaWDBuSUdaMWJtTjBhVzl1SUdsdUlDY2tlMk5zWVhOelRtRnRaWDBuSUdOc1lYTnpJSGRwZEdodmRYUWdZMkZzYkdsdVp5QnpkWEJsY2lCcGN5QnViM1FnWVd4c2IzZGxaQzRnUTJGc2JDQjBhR1VnYzNWd1pYSWdablZ1WTNScGIyNGdhVzRnSnlSN1puVnVZMDVoYldWOUp5QndiR1ZoYzJVdVlDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1ZlZ4dVhHNWxlSEJ2Y25SekxuWmhiR2xrWVhSbFRXVjBhRzlrVjJsMGFGQnliM0J6SUQwZ1puVnVZM1JwYjI0Z0tHWjFibU1zSUdaMWJtTk9ZVzFsTENCamJHRnpjMDVoYldVc0lHTnNjeXdnWW1GelpTa2dlMXh1SUNBZ0lHbG1JQ2hEUTE5RVJWWWdKaVlnWm5WdVkwNWhiV1VnUFQwOUlDZGpiMjV6ZEhKMVkzUnZjaWNwSUh0Y2JpQWdJQ0FnSUNBZ1kyTXVaWEp5YjNKSlJDZ3pOalF6TENCamJHRnpjMDVoYldVcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdablZ1WXlBOVBUMGdKMloxYm1OMGFXOXVKeUI4ZkNCbWRXNWpJRDA5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaERRMTlFUlZZcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaRzlXWVd4cFpHRjBaVTFsZEdodlpGZHBkR2hRY205d2MxOUVSVllvWm5WdVl5d2dablZ1WTA1aGJXVXNJR05zWVhOelRtRnRaU3dnWTJ4ekxDQmlZWE5sS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdhV1lnS0VORFgwUkZWaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0daMWJtTWdQVDA5SUdaaGJITmxJQ1ltSUdKaGMyVWdKaVlnWW1GelpTNXdjbTkwYjNSNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCamFHVmpheUJ2ZG1WeWNtbGtaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdmRtVnljbWxrWldRZ1BTQmlZWE5sTG5CeWIzUnZkSGx3WlZ0bWRXNWpUbUZ0WlYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnZkbVZ5Y21sa1pXUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHSmhjMlZHZFdNZ1BTQnFjeTVuWlhSRGJHRnpjMDVoYldVb1ltRnpaU2tnS3lBbkxpY2dLeUJtZFc1alRtRnRaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE4xWWtaMVl5QTlJR05zWVhOelRtRnRaU0FySUNjdUp5QXJJR1oxYm1OT1lXMWxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCall5NTNZWEp1U1VRb016WXlOQ3dnYzNWaVJuVmpMQ0JpWVhObFJuVmpMQ0J6ZFdKR2RXTXNJSE4xWWtaMVl5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTnZjbkpsWTNRZ1BTQlVXVkJQWDFSUFgwTlBVbEpGUTFSZlJFVldXMloxYm1OT1lXMWxYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqYjNKeVpXTjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJNdWQyRnlia2xFS0RNMk1qRXNJR05zWVhOelRtRnRaU3dnWm5WdVkwNWhiV1VzSUdOdmNuSmxZM1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1puVnVZeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOakxtVnljbTl5U1VRb016WXlNaXdnWTJ4aGMzTk9ZVzFsTENCbWRXNWpUbUZ0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNibjA3WEc0aVhYMD0iXX0=