(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCView.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var EventTarget = require('../event/event-target');
        var js = require('../platform/js');
        var renderer = require('../renderer');
        require('../platform/CCClass');
        var isXiaomiGame = cc.sys.platform === cc.sys.XIAOMI_GAME;
        var isBaiduGame = cc.sys.platform === cc.sys.BAIDU_GAME;
        var isAlipayGame = cc.sys.platform === cc.sys.ALIPAY_GAME;
        var __BrowserGetter = {
            init: function init() {
                if (!CC_WECHATGAME && !CC_QQPLAY && !isBaiduGame && !isXiaomiGame && !isAlipayGame) {
                    this.html = document.getElementsByTagName('html')[0];
                }
            },
            availWidth: function availWidth(frame) {
                if (!frame || frame === this.html)
                    return window.innerWidth;
                else
                    return frame.clientWidth;
            },
            availHeight: function availHeight(frame) {
                if (!frame || frame === this.html)
                    return window.innerHeight;
                else
                    return frame.clientHeight;
            },
            meta: { 'width': 'device-width' },
            adaptationType: cc.sys.browserType
        };
        if (cc.sys.os === cc.sys.OS_IOS)
            __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_SAFARI;
        if (isBaiduGame) {
            if (cc.sys.browserType === cc.sys.BROWSER_TYPE_BAIDU_GAME_SUB) {
                __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_BAIDU_GAME_SUB;
            } else {
                __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_BAIDU_GAME;
            }
        }
        if (isXiaomiGame) {
            __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_XIAOMI_GAME;
        }
        if (isAlipayGame) {
            __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_ALIPAY_GAME;
        }
        if (CC_WECHATGAME) {
            if (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
                __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB;
            } else {
                __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_WECHAT_GAME;
            }
        }
        if (CC_QQPLAY) {
            __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_QQ_PLAY;
        }
        switch (__BrowserGetter.adaptationType) {
        case cc.sys.BROWSER_TYPE_SAFARI:
            __BrowserGetter.meta['minimal-ui'] = 'true';
        case cc.sys.BROWSER_TYPE_SOUGOU:
        case cc.sys.BROWSER_TYPE_UC:
            __BrowserGetter.availWidth = function (frame) {
                return frame.clientWidth;
            };
            __BrowserGetter.availHeight = function (frame) {
                return frame.clientHeight;
            };
            break;
        case cc.sys.BROWSER_TYPE_WECHAT_GAME:
            __BrowserGetter.availWidth = function () {
                return window.innerWidth;
            };
            __BrowserGetter.availHeight = function () {
                return window.innerHeight;
            };
            break;
        case cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB:
            var sharedCanvas = window.sharedCanvas || wx.getSharedCanvas();
            __BrowserGetter.availWidth = function () {
                return sharedCanvas.width;
            };
            __BrowserGetter.availHeight = function () {
                return sharedCanvas.height;
            };
            break;
        }
        var _scissorRect = null;
        var View = function View() {
            EventTarget.call(this);
            var _t = this, _strategyer = cc.ContainerStrategy, _strategy = cc.ContentStrategy;
            __BrowserGetter.init(this);
            _t._frameSize = cc.size(0, 0);
            _t._designResolutionSize = cc.size(0, 0);
            _t._originalDesignResolutionSize = cc.size(0, 0);
            _t._scaleX = 1;
            _t._scaleY = 1;
            _t._viewportRect = cc.rect(0, 0, 0, 0);
            _t._visibleRect = cc.rect(0, 0, 0, 0);
            _t._autoFullScreen = false;
            _t._devicePixelRatio = 1;
            _t._maxPixelRatio = 2;
            _t._retinaEnabled = false;
            _t._resizeCallback = null;
            _t._resizing = false;
            _t._resizeWithBrowserSize = false;
            _t._orientationChanging = true;
            _t._isRotated = false;
            _t._orientation = cc.macro.ORIENTATION_AUTO;
            _t._isAdjustViewport = true;
            _t._antiAliasEnabled = false;
            _t._resolutionPolicy = null;
            _t._rpExactFit = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.EXACT_FIT);
            _t._rpShowAll = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.SHOW_ALL);
            _t._rpNoBorder = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.NO_BORDER);
            _t._rpFixedHeight = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_HEIGHT);
            _t._rpFixedWidth = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_WIDTH);
            cc.game.once(cc.game.EVENT_ENGINE_INITED, this.init, this);
        };
        cc.js.extend(View, EventTarget);
        cc.js.mixin(View.prototype, {
            init: function init() {
                this._initFrameSize();
                this.enableAntiAlias(true);
                var w = cc.game.canvas.width, h = cc.game.canvas.height;
                this._designResolutionSize.width = w;
                this._designResolutionSize.height = h;
                this._originalDesignResolutionSize.width = w;
                this._originalDesignResolutionSize.height = h;
                this._viewportRect.width = w;
                this._viewportRect.height = h;
                this._visibleRect.width = w;
                this._visibleRect.height = h;
                cc.winSize.width = this._visibleRect.width;
                cc.winSize.height = this._visibleRect.height;
                cc.visibleRect && cc.visibleRect.init(this._visibleRect);
            },
            _resizeEvent: function _resizeEvent(forceOrEvent) {
                var view;
                if (this.setDesignResolutionSize) {
                    view = this;
                } else {
                    view = cc.view;
                }
                var prevFrameW = view._frameSize.width, prevFrameH = view._frameSize.height, prevRotated = view._isRotated;
                if (cc.sys.isMobile) {
                    var containerStyle = cc.game.container.style, margin = containerStyle.margin;
                    containerStyle.margin = '0';
                    containerStyle.display = 'none';
                    view._initFrameSize();
                    containerStyle.margin = margin;
                    containerStyle.display = 'block';
                } else {
                    view._initFrameSize();
                }
                if (forceOrEvent !== true && view._isRotated === prevRotated && view._frameSize.width === prevFrameW && view._frameSize.height === prevFrameH)
                    return;
                var width = view._originalDesignResolutionSize.width;
                var height = view._originalDesignResolutionSize.height;
                view._resizing = true;
                if (width > 0)
                    view.setDesignResolutionSize(width, height, view._resolutionPolicy);
                view._resizing = false;
                view.emit('canvas-resize');
                if (view._resizeCallback) {
                    view._resizeCallback.call();
                }
            },
            _orientationChange: function _orientationChange() {
                cc.view._orientationChanging = true;
                cc.view._resizeEvent();
            },
            resizeWithBrowserSize: function resizeWithBrowserSize(enabled) {
                if (enabled) {
                    if (!this._resizeWithBrowserSize) {
                        this._resizeWithBrowserSize = true;
                        window.addEventListener('resize', this._resizeEvent);
                        window.addEventListener('orientationchange', this._orientationChange);
                    }
                } else {
                    if (this._resizeWithBrowserSize) {
                        this._resizeWithBrowserSize = false;
                        window.removeEventListener('resize', this._resizeEvent);
                        window.removeEventListener('orientationchange', this._orientationChange);
                    }
                }
            },
            setResizeCallback: function setResizeCallback(callback) {
                if (CC_EDITOR)
                    return;
                if (typeof callback === 'function' || callback == null) {
                    this._resizeCallback = callback;
                }
            },
            setOrientation: function setOrientation(orientation) {
                orientation = orientation & cc.macro.ORIENTATION_AUTO;
                if (orientation && this._orientation !== orientation) {
                    this._orientation = orientation;
                    var designWidth = this._originalDesignResolutionSize.width;
                    var designHeight = this._originalDesignResolutionSize.height;
                    this.setDesignResolutionSize(designWidth, designHeight, this._resolutionPolicy);
                }
            },
            _initFrameSize: function _initFrameSize() {
                var locFrameSize = this._frameSize;
                var w = __BrowserGetter.availWidth(cc.game.frame);
                var h = __BrowserGetter.availHeight(cc.game.frame);
                var isLandscape = w >= h;
                if (CC_EDITOR || !cc.sys.isMobile || isLandscape && this._orientation & cc.macro.ORIENTATION_LANDSCAPE || !isLandscape && this._orientation & cc.macro.ORIENTATION_PORTRAIT) {
                    locFrameSize.width = w;
                    locFrameSize.height = h;
                    cc.game.container.style['-webkit-transform'] = 'rotate(0deg)';
                    cc.game.container.style.transform = 'rotate(0deg)';
                    this._isRotated = false;
                } else {
                    locFrameSize.width = h;
                    locFrameSize.height = w;
                    cc.game.container.style['-webkit-transform'] = 'rotate(90deg)';
                    cc.game.container.style.transform = 'rotate(90deg)';
                    cc.game.container.style['-webkit-transform-origin'] = '0px 0px 0px';
                    cc.game.container.style.transformOrigin = '0px 0px 0px';
                    this._isRotated = true;
                }
                if (this._orientationChanging) {
                    setTimeout(function () {
                        cc.view._orientationChanging = false;
                    }, 1000);
                }
            },
            _adjustSizeKeepCanvasSize: function _adjustSizeKeepCanvasSize() {
                var designWidth = this._originalDesignResolutionSize.width;
                var designHeight = this._originalDesignResolutionSize.height;
                if (designWidth > 0)
                    this.setDesignResolutionSize(designWidth, designHeight, this._resolutionPolicy);
            },
            _setViewportMeta: function _setViewportMeta(metas, overwrite) {
                var vp = document.getElementById('cocosMetaElement');
                if (vp && overwrite) {
                    document.head.removeChild(vp);
                }
                var elems = document.getElementsByName('viewport'), currentVP = elems ? elems[0] : null, content, key, pattern;
                content = currentVP ? currentVP.content : '';
                vp = vp || document.createElement('meta');
                vp.id = 'cocosMetaElement';
                vp.name = 'viewport';
                vp.content = '';
                for (key in metas) {
                    if (content.indexOf(key) == -1) {
                        content += ',' + key + '=' + metas[key];
                    } else if (overwrite) {
                        pattern = new RegExp(key + 's*=s*[^,]+');
                        content.replace(pattern, key + '=' + metas[key]);
                    }
                }
                if (/^,/.test(content))
                    content = content.substr(1);
                vp.content = content;
                if (currentVP)
                    currentVP.content = content;
                document.head.appendChild(vp);
            },
            _adjustViewportMeta: function _adjustViewportMeta() {
                if (this._isAdjustViewport && !CC_JSB && !CC_RUNTIME && !CC_WECHATGAME && !CC_QQPLAY && !isBaiduGame && !isXiaomiGame && !isAlipayGame) {
                    this._setViewportMeta(__BrowserGetter.meta, false);
                    this._isAdjustViewport = false;
                }
            },
            adjustViewportMeta: function adjustViewportMeta(enabled) {
                this._isAdjustViewport = enabled;
            },
            enableRetina: function enableRetina(enabled) {
                this._retinaEnabled = !!enabled;
            },
            isRetinaEnabled: function isRetinaEnabled() {
                return this._retinaEnabled;
            },
            enableAntiAlias: function enableAntiAlias(enabled) {
                if (this._antiAliasEnabled === enabled) {
                    return;
                }
                this._antiAliasEnabled = enabled;
                if (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL) {
                    var cache = cc.loader._cache;
                    for (var key in cache) {
                        var item = cache[key];
                        var tex = item && item.content instanceof cc.Texture2D ? item.content : null;
                        if (tex) {
                            var Filter = cc.Texture2D.Filter;
                            if (enabled) {
                                tex.setFilters(Filter.LINEAR, Filter.LINEAR);
                            } else {
                                tex.setFilters(Filter.NEAREST, Filter.NEAREST);
                            }
                        }
                    }
                } else if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    var ctx = cc.game.canvas.getContext('2d');
                    ctx.imageSmoothingEnabled = enabled;
                    ctx.mozImageSmoothingEnabled = enabled;
                }
            },
            isAntiAliasEnabled: function isAntiAliasEnabled() {
                return this._antiAliasEnabled;
            },
            enableAutoFullScreen: function enableAutoFullScreen(enabled) {
                if (enabled && enabled !== this._autoFullScreen && cc.sys.isMobile && cc.sys.browserType !== cc.sys.BROWSER_TYPE_WECHAT) {
                    this._autoFullScreen = true;
                    cc.screen.autoFullScreen(cc.game.frame);
                } else {
                    this._autoFullScreen = false;
                    cc.screen.disableAutoFullScreen(cc.game.frame);
                }
            },
            isAutoFullScreenEnabled: function isAutoFullScreenEnabled() {
                return this._autoFullScreen;
            },
            setCanvasSize: function setCanvasSize(width, height) {
                var canvas = cc.game.canvas;
                var container = cc.game.container;
                canvas.width = width * this._devicePixelRatio;
                canvas.height = height * this._devicePixelRatio;
                canvas.style.width = width + 'px';
                canvas.style.height = height + 'px';
                container.style.width = width + 'px';
                container.style.height = height + 'px';
                this._resizeEvent();
            },
            getCanvasSize: function getCanvasSize() {
                return cc.size(cc.game.canvas.width, cc.game.canvas.height);
            },
            getFrameSize: function getFrameSize() {
                return cc.size(this._frameSize.width, this._frameSize.height);
            },
            setFrameSize: function setFrameSize(width, height) {
                this._frameSize.width = width;
                this._frameSize.height = height;
                cc.game.frame.style.width = width + 'px';
                cc.game.frame.style.height = height + 'px';
                this._resizeEvent(true);
            },
            getVisibleSize: function getVisibleSize() {
                return cc.size(this._visibleRect.width, this._visibleRect.height);
            },
            getVisibleSizeInPixel: function getVisibleSizeInPixel() {
                return cc.size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
            },
            getVisibleOrigin: function getVisibleOrigin() {
                return cc.v2(this._visibleRect.x, this._visibleRect.y);
            },
            getVisibleOriginInPixel: function getVisibleOriginInPixel() {
                return cc.v2(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
            },
            getResolutionPolicy: function getResolutionPolicy() {
                return this._resolutionPolicy;
            },
            setResolutionPolicy: function setResolutionPolicy(resolutionPolicy) {
                var _t = this;
                if (resolutionPolicy instanceof cc.ResolutionPolicy) {
                    _t._resolutionPolicy = resolutionPolicy;
                } else {
                    var _locPolicy = cc.ResolutionPolicy;
                    if (resolutionPolicy === _locPolicy.EXACT_FIT)
                        _t._resolutionPolicy = _t._rpExactFit;
                    if (resolutionPolicy === _locPolicy.SHOW_ALL)
                        _t._resolutionPolicy = _t._rpShowAll;
                    if (resolutionPolicy === _locPolicy.NO_BORDER)
                        _t._resolutionPolicy = _t._rpNoBorder;
                    if (resolutionPolicy === _locPolicy.FIXED_HEIGHT)
                        _t._resolutionPolicy = _t._rpFixedHeight;
                    if (resolutionPolicy === _locPolicy.FIXED_WIDTH)
                        _t._resolutionPolicy = _t._rpFixedWidth;
                }
            },
            setDesignResolutionSize: function setDesignResolutionSize(width, height, resolutionPolicy) {
                if (!(width > 0 || height > 0)) {
                    cc.logID(2200);
                    return;
                }
                this.setResolutionPolicy(resolutionPolicy);
                var policy = this._resolutionPolicy;
                if (policy) {
                    policy.preApply(this);
                }
                if (cc.sys.isMobile)
                    this._adjustViewportMeta();
                this._orientationChanging = true;
                if (!this._resizing)
                    this._initFrameSize();
                if (!policy) {
                    cc.logID(2201);
                    return;
                }
                this._originalDesignResolutionSize.width = this._designResolutionSize.width = width;
                this._originalDesignResolutionSize.height = this._designResolutionSize.height = height;
                var result = policy.apply(this, this._designResolutionSize);
                if (result.scale && result.scale.length === 2) {
                    this._scaleX = result.scale[0];
                    this._scaleY = result.scale[1];
                }
                if (result.viewport) {
                    var vp = this._viewportRect, vb = this._visibleRect, rv = result.viewport;
                    vp.x = rv.x;
                    vp.y = rv.y;
                    vp.width = rv.width;
                    vp.height = rv.height;
                    vb.x = 0;
                    vb.y = 0;
                    vb.width = rv.width / this._scaleX;
                    vb.height = rv.height / this._scaleY;
                }
                policy.postApply(this);
                cc.winSize.width = this._visibleRect.width;
                cc.winSize.height = this._visibleRect.height;
                cc.visibleRect && cc.visibleRect.init(this._visibleRect);
                renderer.updateCameraViewport();
                this.emit('design-resolution-changed');
            },
            getDesignResolutionSize: function getDesignResolutionSize() {
                return cc.size(this._designResolutionSize.width, this._designResolutionSize.height);
            },
            setRealPixelResolution: function setRealPixelResolution(width, height, resolutionPolicy) {
                if (!CC_JSB && !CC_RUNTIME && !CC_WECHATGAME && !CC_QQPLAY && !isBaiduGame && !isXiaomiGame && !isAlipayGame) {
                    this._setViewportMeta({ 'width': width }, true);
                    document.documentElement.style.width = width + 'px';
                    document.body.style.width = width + 'px';
                    document.body.style.left = '0px';
                    document.body.style.top = '0px';
                }
                this.setDesignResolutionSize(width, height, resolutionPolicy);
            },
            setViewportInPoints: function setViewportInPoints(x, y, w, h) {
                var locScaleX = this._scaleX, locScaleY = this._scaleY;
                cc.game._renderContext.viewport(x * locScaleX + this._viewportRect.x, y * locScaleY + this._viewportRect.y, w * locScaleX, h * locScaleY);
            },
            setScissorInPoints: function setScissorInPoints(x, y, w, h) {
                var scaleX = this._scaleX, scaleY = this._scaleY;
                var sx = Math.ceil(x * scaleX + this._viewportRect.x);
                var sy = Math.ceil(y * scaleY + this._viewportRect.y);
                var sw = Math.ceil(w * scaleX);
                var sh = Math.ceil(h * scaleY);
                var gl = cc.game._renderContext;
                if (!_scissorRect) {
                    var boxArr = gl.getParameter(gl.SCISSOR_BOX);
                    _scissorRect = cc.rect(boxArr[0], boxArr[1], boxArr[2], boxArr[3]);
                }
                if (_scissorRect.x !== sx || _scissorRect.y !== sy || _scissorRect.width !== sw || _scissorRect.height !== sh) {
                    _scissorRect.x = sx;
                    _scissorRect.y = sy;
                    _scissorRect.width = sw;
                    _scissorRect.height = sh;
                    gl.scissor(sx, sy, sw, sh);
                }
            },
            isScissorEnabled: function isScissorEnabled() {
                return cc.game._renderContext.isEnabled(gl.SCISSOR_TEST);
            },
            getScissorRect: function getScissorRect() {
                if (!_scissorRect) {
                    var boxArr = gl.getParameter(gl.SCISSOR_BOX);
                    _scissorRect = cc.rect(boxArr[0], boxArr[1], boxArr[2], boxArr[3]);
                }
                var scaleXFactor = 1 / this._scaleX;
                var scaleYFactor = 1 / this._scaleY;
                return cc.rect((_scissorRect.x - this._viewportRect.x) * scaleXFactor, (_scissorRect.y - this._viewportRect.y) * scaleYFactor, _scissorRect.width * scaleXFactor, _scissorRect.height * scaleYFactor);
            },
            getViewportRect: function getViewportRect() {
                return this._viewportRect;
            },
            getScaleX: function getScaleX() {
                return this._scaleX;
            },
            getScaleY: function getScaleY() {
                return this._scaleY;
            },
            getDevicePixelRatio: function getDevicePixelRatio() {
                return this._devicePixelRatio;
            },
            convertToLocationInView: function convertToLocationInView(tx, ty, relatedPos, out) {
                var result = out || cc.v2();
                var x = this._devicePixelRatio * (tx - relatedPos.left);
                var y = this._devicePixelRatio * (relatedPos.top + relatedPos.height - ty);
                if (this._isRotated) {
                    result.x = cc.game.canvas.width - y;
                    result.y = x;
                } else {
                    result.x = x;
                    result.y = y;
                }
                return result;
            },
            _convertMouseToLocationInView: function _convertMouseToLocationInView(in_out_point, relatedPos) {
                var viewport = this._viewportRect, _t = this;
                in_out_point.x = (_t._devicePixelRatio * (in_out_point.x - relatedPos.left) - viewport.x) / _t._scaleX;
                in_out_point.y = (_t._devicePixelRatio * (relatedPos.top + relatedPos.height - in_out_point.y) - viewport.y) / _t._scaleY;
            },
            _convertPointWithScale: function _convertPointWithScale(point) {
                var viewport = this._viewportRect;
                point.x = (point.x - viewport.x) / this._scaleX;
                point.y = (point.y - viewport.y) / this._scaleY;
            },
            _convertTouchesWithScale: function _convertTouchesWithScale(touches) {
                var viewport = this._viewportRect, scaleX = this._scaleX, scaleY = this._scaleY, selTouch, selPoint, selPrePoint;
                for (var i = 0; i < touches.length; i++) {
                    selTouch = touches[i];
                    selPoint = selTouch._point;
                    selPrePoint = selTouch._prevPoint;
                    selPoint.x = (selPoint.x - viewport.x) / scaleX;
                    selPoint.y = (selPoint.y - viewport.y) / scaleY;
                    selPrePoint.x = (selPrePoint.x - viewport.x) / scaleX;
                    selPrePoint.y = (selPrePoint.y - viewport.y) / scaleY;
                }
            }
        });
        cc.ContainerStrategy = cc.Class({
            name: 'ContainerStrategy',
            preApply: function preApply(view) {
            },
            apply: function apply(view, designedResolution) {
            },
            postApply: function postApply(view) {
            },
            _setupContainer: function _setupContainer(view, w, h) {
                var locCanvas = cc.game.canvas, locContainer = cc.game.container;
                if (!CC_WECHATGAME && !isBaiduGame && !isXiaomiGame && !isAlipayGame) {
                    if (cc.sys.os === cc.sys.OS_ANDROID) {
                        document.body.style.width = (view._isRotated ? h : w) + 'px';
                        document.body.style.height = (view._isRotated ? w : h) + 'px';
                    }
                    locContainer.style.width = locCanvas.style.width = w + 'px';
                    locContainer.style.height = locCanvas.style.height = h + 'px';
                }
                var devicePixelRatio = view._devicePixelRatio = 1;
                if (view.isRetinaEnabled())
                    devicePixelRatio = view._devicePixelRatio = Math.min(view._maxPixelRatio, window.devicePixelRatio || 1);
                locCanvas.width = w * devicePixelRatio;
                locCanvas.height = h * devicePixelRatio;
            },
            _fixContainer: function _fixContainer() {
                document.body.insertBefore(cc.game.container, document.body.firstChild);
                var bs = document.body.style;
                bs.width = window.innerWidth + 'px';
                bs.height = window.innerHeight + 'px';
                bs.overflow = 'hidden';
                var contStyle = cc.game.container.style;
                contStyle.position = 'fixed';
                contStyle.left = contStyle.top = '0px';
                document.body.scrollTop = 0;
            }
        });
        cc.ContentStrategy = cc.Class({
            name: 'ContentStrategy',
            ctor: function ctor() {
                this._result = {
                    scale: [
                        1,
                        1
                    ],
                    viewport: null
                };
            },
            _buildResult: function _buildResult(containerW, containerH, contentW, contentH, scaleX, scaleY) {
                Math.abs(containerW - contentW) < 2 && (contentW = containerW);
                Math.abs(containerH - contentH) < 2 && (contentH = containerH);
                var viewport = cc.rect((containerW - contentW) / 2, (containerH - contentH) / 2, contentW, contentH);
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                }
                this._result.scale = [
                    scaleX,
                    scaleY
                ];
                this._result.viewport = viewport;
                return this._result;
            },
            preApply: function preApply(view) {
            },
            apply: function apply(view, designedResolution) {
                return {
                    'scale': [
                        1,
                        1
                    ]
                };
            },
            postApply: function postApply(view) {
            }
        });
        (function () {
            var EqualToFrame = cc.Class({
                name: 'EqualToFrame',
                extends: cc.ContainerStrategy,
                apply: function apply(view) {
                    var frameH = view._frameSize.height, containerStyle = cc.game.container.style;
                    this._setupContainer(view, view._frameSize.width, view._frameSize.height);
                    if (view._isRotated) {
                        containerStyle.margin = '0 0 0 ' + frameH + 'px';
                    } else {
                        containerStyle.margin = '0px';
                    }
                    containerStyle.padding = '0px';
                }
            });
            var ProportionalToFrame = cc.Class({
                name: 'ProportionalToFrame',
                extends: cc.ContainerStrategy,
                apply: function apply(view, designedResolution) {
                    var frameW = view._frameSize.width, frameH = view._frameSize.height, containerStyle = cc.game.container.style, designW = designedResolution.width, designH = designedResolution.height, scaleX = frameW / designW, scaleY = frameH / designH, containerW, containerH;
                    scaleX < scaleY ? (containerW = frameW, containerH = designH * scaleX) : (containerW = designW * scaleY, containerH = frameH);
                    var offx = Math.round((frameW - containerW) / 2);
                    var offy = Math.round((frameH - containerH) / 2);
                    containerW = frameW - 2 * offx;
                    containerH = frameH - 2 * offy;
                    this._setupContainer(view, containerW, containerH);
                    if (!CC_EDITOR) {
                        if (view._isRotated) {
                            containerStyle.margin = '0 0 0 ' + frameH + 'px';
                        } else {
                            containerStyle.margin = '0px';
                        }
                        containerStyle.paddingLeft = offx + 'px';
                        containerStyle.paddingRight = offx + 'px';
                        containerStyle.paddingTop = offy + 'px';
                        containerStyle.paddingBottom = offy + 'px';
                    }
                }
            });
            var EqualToWindow = cc.Class({
                name: 'EqualToWindow',
                extends: EqualToFrame,
                preApply: function preApply(view) {
                    this._super(view);
                    cc.game.frame = document.documentElement;
                },
                apply: function apply(view) {
                    this._super(view);
                    this._fixContainer();
                }
            });
            var ProportionalToWindow = cc.Class({
                name: 'ProportionalToWindow',
                extends: ProportionalToFrame,
                preApply: function preApply(view) {
                    this._super(view);
                    cc.game.frame = document.documentElement;
                },
                apply: function apply(view, designedResolution) {
                    this._super(view, designedResolution);
                    this._fixContainer();
                }
            });
            var OriginalContainer = cc.Class({
                name: 'OriginalContainer',
                extends: cc.ContainerStrategy,
                apply: function apply(view) {
                    this._setupContainer(view, cc.game.canvas.width, cc.game.canvas.height);
                }
            });
            cc.ContainerStrategy.EQUAL_TO_FRAME = new EqualToFrame();
            cc.ContainerStrategy.PROPORTION_TO_FRAME = new ProportionalToFrame();
            cc.ContainerStrategy.ORIGINAL_CONTAINER = new OriginalContainer();
            var ExactFit = cc.Class({
                name: 'ExactFit',
                extends: cc.ContentStrategy,
                apply: function apply(view, designedResolution) {
                    var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, scaleX = containerW / designedResolution.width, scaleY = containerH / designedResolution.height;
                    return this._buildResult(containerW, containerH, containerW, containerH, scaleX, scaleY);
                }
            });
            var ShowAll = cc.Class({
                name: 'ShowAll',
                extends: cc.ContentStrategy,
                apply: function apply(view, designedResolution) {
                    var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, designW = designedResolution.width, designH = designedResolution.height, scaleX = containerW / designW, scaleY = containerH / designH, scale = 0, contentW, contentH;
                    scaleX < scaleY ? (scale = scaleX, contentW = containerW, contentH = designH * scale) : (scale = scaleY, contentW = designW * scale, contentH = containerH);
                    return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }
            });
            var NoBorder = cc.Class({
                name: 'NoBorder',
                extends: cc.ContentStrategy,
                apply: function apply(view, designedResolution) {
                    var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, designW = designedResolution.width, designH = designedResolution.height, scaleX = containerW / designW, scaleY = containerH / designH, scale, contentW, contentH;
                    scaleX < scaleY ? (scale = scaleY, contentW = designW * scale, contentH = containerH) : (scale = scaleX, contentW = containerW, contentH = designH * scale);
                    return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }
            });
            var FixedHeight = cc.Class({
                name: 'FixedHeight',
                extends: cc.ContentStrategy,
                apply: function apply(view, designedResolution) {
                    var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, designH = designedResolution.height, scale = containerH / designH, contentW = containerW, contentH = containerH;
                    return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }
            });
            var FixedWidth = cc.Class({
                name: 'FixedWidth',
                extends: cc.ContentStrategy,
                apply: function apply(view, designedResolution) {
                    var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, designW = designedResolution.width, scale = containerW / designW, contentW = containerW, contentH = containerH;
                    return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }
            });
            cc.ContentStrategy.EXACT_FIT = new ExactFit();
            cc.ContentStrategy.SHOW_ALL = new ShowAll();
            cc.ContentStrategy.NO_BORDER = new NoBorder();
            cc.ContentStrategy.FIXED_HEIGHT = new FixedHeight();
            cc.ContentStrategy.FIXED_WIDTH = new FixedWidth();
        }());
        cc.ResolutionPolicy = cc.Class({
            name: 'cc.ResolutionPolicy',
            ctor: function ctor(containerStg, contentStg) {
                this._containerStrategy = null;
                this._contentStrategy = null;
                this.setContainerStrategy(containerStg);
                this.setContentStrategy(contentStg);
            },
            preApply: function preApply(view) {
                this._containerStrategy.preApply(view);
                this._contentStrategy.preApply(view);
            },
            apply: function apply(view, designedResolution) {
                this._containerStrategy.apply(view, designedResolution);
                return this._contentStrategy.apply(view, designedResolution);
            },
            postApply: function postApply(view) {
                this._containerStrategy.postApply(view);
                this._contentStrategy.postApply(view);
            },
            setContainerStrategy: function setContainerStrategy(containerStg) {
                if (containerStg instanceof cc.ContainerStrategy)
                    this._containerStrategy = containerStg;
            },
            setContentStrategy: function setContentStrategy(contentStg) {
                if (contentStg instanceof cc.ContentStrategy)
                    this._contentStrategy = contentStg;
            }
        });
        js.get(cc.ResolutionPolicy.prototype, 'canvasSize', function () {
            return cc.v2(cc.game.canvas.width, cc.game.canvas.height);
        });
        cc.ResolutionPolicy.EXACT_FIT = 0;
        cc.ResolutionPolicy.NO_BORDER = 1;
        cc.ResolutionPolicy.SHOW_ALL = 2;
        cc.ResolutionPolicy.FIXED_HEIGHT = 3;
        cc.ResolutionPolicy.FIXED_WIDTH = 4;
        cc.ResolutionPolicy.UNKNOWN = 5;
        cc.view = new View();
        cc.winSize = cc.v2();
        module.exports = cc.view;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDVmlldy5qcyIsIi9Vc2Vycy96emYyMDE5L0Rlc2t0b3AvZGV2ZWxvcG1lbnQvc3VwcG9ydF9hc3RjL2VuZ2luZS9jb2NvczJkL2NvcmUvcGxhdGZvcm0vQ0NWaWV3LmpzIl0sIm5hbWVzIjpbIkV2ZW50VGFyZ2V0IiwicmVxdWlyZSIsImpzIiwicmVuZGVyZXIiLCJpc1hpYW9taUdhbWUiLCJjYyIsInN5cyIsInBsYXRmb3JtIiwiWElBT01JX0dBTUUiLCJpc0JhaWR1R2FtZSIsIkJBSURVX0dBTUUiLCJpc0FsaXBheUdhbWUiLCJBTElQQVlfR0FNRSIsIl9fQnJvd3NlckdldHRlciIsImluaXQiLCJDQ19XRUNIQVRHQU1FIiwiQ0NfUVFQTEFZIiwiaHRtbCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhdmFpbFdpZHRoIiwiZnJhbWUiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiY2xpZW50V2lkdGgiLCJhdmFpbEhlaWdodCIsImlubmVySGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwibWV0YSIsImFkYXB0YXRpb25UeXBlIiwiYnJvd3NlclR5cGUiLCJvcyIsIk9TX0lPUyIsIkJST1dTRVJfVFlQRV9TQUZBUkkiLCJCUk9XU0VSX1RZUEVfQkFJRFVfR0FNRV9TVUIiLCJCUk9XU0VSX1RZUEVfQkFJRFVfR0FNRSIsIkJST1dTRVJfVFlQRV9YSUFPTUlfR0FNRSIsIkJST1dTRVJfVFlQRV9BTElQQVlfR0FNRSIsIkJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRV9TVUIiLCJCUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUUiLCJCUk9XU0VSX1RZUEVfUVFfUExBWSIsIkJST1dTRVJfVFlQRV9TT1VHT1UiLCJCUk9XU0VSX1RZUEVfVUMiLCJzaGFyZWRDYW52YXMiLCJ3eCIsImdldFNoYXJlZENhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwiX3NjaXNzb3JSZWN0IiwiVmlldyIsImNhbGwiLCJfdCIsIl9zdHJhdGVneWVyIiwiQ29udGFpbmVyU3RyYXRlZ3kiLCJfc3RyYXRlZ3kiLCJDb250ZW50U3RyYXRlZ3kiLCJfZnJhbWVTaXplIiwic2l6ZSIsIl9kZXNpZ25SZXNvbHV0aW9uU2l6ZSIsIl9vcmlnaW5hbERlc2lnblJlc29sdXRpb25TaXplIiwiX3NjYWxlWCIsIl9zY2FsZVkiLCJfdmlld3BvcnRSZWN0IiwicmVjdCIsIl92aXNpYmxlUmVjdCIsIl9hdXRvRnVsbFNjcmVlbiIsIl9kZXZpY2VQaXhlbFJhdGlvIiwiX21heFBpeGVsUmF0aW8iLCJfcmV0aW5hRW5hYmxlZCIsIl9yZXNpemVDYWxsYmFjayIsIl9yZXNpemluZyIsIl9yZXNpemVXaXRoQnJvd3NlclNpemUiLCJfb3JpZW50YXRpb25DaGFuZ2luZyIsIl9pc1JvdGF0ZWQiLCJfb3JpZW50YXRpb24iLCJtYWNybyIsIk9SSUVOVEFUSU9OX0FVVE8iLCJfaXNBZGp1c3RWaWV3cG9ydCIsIl9hbnRpQWxpYXNFbmFibGVkIiwiX3Jlc29sdXRpb25Qb2xpY3kiLCJfcnBFeGFjdEZpdCIsIlJlc29sdXRpb25Qb2xpY3kiLCJFUVVBTF9UT19GUkFNRSIsIkVYQUNUX0ZJVCIsIl9ycFNob3dBbGwiLCJTSE9XX0FMTCIsIl9ycE5vQm9yZGVyIiwiTk9fQk9SREVSIiwiX3JwRml4ZWRIZWlnaHQiLCJGSVhFRF9IRUlHSFQiLCJfcnBGaXhlZFdpZHRoIiwiRklYRURfV0lEVEgiLCJnYW1lIiwib25jZSIsIkVWRU5UX0VOR0lORV9JTklURUQiLCJleHRlbmQiLCJtaXhpbiIsInByb3RvdHlwZSIsIl9pbml0RnJhbWVTaXplIiwiZW5hYmxlQW50aUFsaWFzIiwidyIsImNhbnZhcyIsImgiLCJ3aW5TaXplIiwidmlzaWJsZVJlY3QiLCJfcmVzaXplRXZlbnQiLCJmb3JjZU9yRXZlbnQiLCJ2aWV3Iiwic2V0RGVzaWduUmVzb2x1dGlvblNpemUiLCJwcmV2RnJhbWVXIiwicHJldkZyYW1lSCIsInByZXZSb3RhdGVkIiwiaXNNb2JpbGUiLCJjb250YWluZXJTdHlsZSIsImNvbnRhaW5lciIsInN0eWxlIiwibWFyZ2luIiwiZGlzcGxheSIsImVtaXQiLCJfb3JpZW50YXRpb25DaGFuZ2UiLCJyZXNpemVXaXRoQnJvd3NlclNpemUiLCJlbmFibGVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRSZXNpemVDYWxsYmFjayIsImNhbGxiYWNrIiwiQ0NfRURJVE9SIiwic2V0T3JpZW50YXRpb24iLCJvcmllbnRhdGlvbiIsImRlc2lnbldpZHRoIiwiZGVzaWduSGVpZ2h0IiwibG9jRnJhbWVTaXplIiwiaXNMYW5kc2NhcGUiLCJPUklFTlRBVElPTl9MQU5EU0NBUEUiLCJPUklFTlRBVElPTl9QT1JUUkFJVCIsInRyYW5zZm9ybSIsInRyYW5zZm9ybU9yaWdpbiIsInNldFRpbWVvdXQiLCJfYWRqdXN0U2l6ZUtlZXBDYW52YXNTaXplIiwiX3NldFZpZXdwb3J0TWV0YSIsIm1ldGFzIiwib3ZlcndyaXRlIiwidnAiLCJnZXRFbGVtZW50QnlJZCIsImhlYWQiLCJyZW1vdmVDaGlsZCIsImVsZW1zIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJjdXJyZW50VlAiLCJjb250ZW50Iiwia2V5IiwicGF0dGVybiIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsIm5hbWUiLCJpbmRleE9mIiwiUmVnRXhwIiwicmVwbGFjZSIsInRlc3QiLCJzdWJzdHIiLCJhcHBlbmRDaGlsZCIsIl9hZGp1c3RWaWV3cG9ydE1ldGEiLCJDQ19KU0IiLCJDQ19SVU5USU1FIiwiYWRqdXN0Vmlld3BvcnRNZXRhIiwiZW5hYmxlUmV0aW5hIiwiaXNSZXRpbmFFbmFibGVkIiwicmVuZGVyVHlwZSIsIlJFTkRFUl9UWVBFX1dFQkdMIiwiY2FjaGUiLCJsb2FkZXIiLCJfY2FjaGUiLCJpdGVtIiwidGV4IiwiVGV4dHVyZTJEIiwiRmlsdGVyIiwic2V0RmlsdGVycyIsIkxJTkVBUiIsIk5FQVJFU1QiLCJSRU5ERVJfVFlQRV9DQU5WQVMiLCJjdHgiLCJnZXRDb250ZXh0IiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwibW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwiaXNBbnRpQWxpYXNFbmFibGVkIiwiZW5hYmxlQXV0b0Z1bGxTY3JlZW4iLCJCUk9XU0VSX1RZUEVfV0VDSEFUIiwic2NyZWVuIiwiYXV0b0Z1bGxTY3JlZW4iLCJkaXNhYmxlQXV0b0Z1bGxTY3JlZW4iLCJpc0F1dG9GdWxsU2NyZWVuRW5hYmxlZCIsInNldENhbnZhc1NpemUiLCJnZXRDYW52YXNTaXplIiwiZ2V0RnJhbWVTaXplIiwic2V0RnJhbWVTaXplIiwiZ2V0VmlzaWJsZVNpemUiLCJnZXRWaXNpYmxlU2l6ZUluUGl4ZWwiLCJnZXRWaXNpYmxlT3JpZ2luIiwidjIiLCJ4IiwieSIsImdldFZpc2libGVPcmlnaW5JblBpeGVsIiwiZ2V0UmVzb2x1dGlvblBvbGljeSIsInNldFJlc29sdXRpb25Qb2xpY3kiLCJyZXNvbHV0aW9uUG9saWN5IiwiX2xvY1BvbGljeSIsImxvZ0lEIiwicG9saWN5IiwicHJlQXBwbHkiLCJyZXN1bHQiLCJhcHBseSIsInNjYWxlIiwibGVuZ3RoIiwidmlld3BvcnQiLCJ2YiIsInJ2IiwicG9zdEFwcGx5IiwidXBkYXRlQ2FtZXJhVmlld3BvcnQiLCJnZXREZXNpZ25SZXNvbHV0aW9uU2l6ZSIsInNldFJlYWxQaXhlbFJlc29sdXRpb24iLCJkb2N1bWVudEVsZW1lbnQiLCJib2R5IiwibGVmdCIsInRvcCIsInNldFZpZXdwb3J0SW5Qb2ludHMiLCJsb2NTY2FsZVgiLCJsb2NTY2FsZVkiLCJfcmVuZGVyQ29udGV4dCIsInNldFNjaXNzb3JJblBvaW50cyIsInNjYWxlWCIsInNjYWxlWSIsInN4IiwiTWF0aCIsImNlaWwiLCJzeSIsInN3Iiwic2giLCJnbCIsImJveEFyciIsImdldFBhcmFtZXRlciIsIlNDSVNTT1JfQk9YIiwic2Npc3NvciIsImlzU2Npc3NvckVuYWJsZWQiLCJpc0VuYWJsZWQiLCJTQ0lTU09SX1RFU1QiLCJnZXRTY2lzc29yUmVjdCIsInNjYWxlWEZhY3RvciIsInNjYWxlWUZhY3RvciIsImdldFZpZXdwb3J0UmVjdCIsImdldFNjYWxlWCIsImdldFNjYWxlWSIsImdldERldmljZVBpeGVsUmF0aW8iLCJjb252ZXJ0VG9Mb2NhdGlvbkluVmlldyIsInR4IiwidHkiLCJyZWxhdGVkUG9zIiwib3V0IiwiX2NvbnZlcnRNb3VzZVRvTG9jYXRpb25JblZpZXciLCJpbl9vdXRfcG9pbnQiLCJfY29udmVydFBvaW50V2l0aFNjYWxlIiwicG9pbnQiLCJfY29udmVydFRvdWNoZXNXaXRoU2NhbGUiLCJ0b3VjaGVzIiwic2VsVG91Y2giLCJzZWxQb2ludCIsInNlbFByZVBvaW50IiwiaSIsIl9wb2ludCIsIl9wcmV2UG9pbnQiLCJDbGFzcyIsImRlc2lnbmVkUmVzb2x1dGlvbiIsIl9zZXR1cENvbnRhaW5lciIsImxvY0NhbnZhcyIsImxvY0NvbnRhaW5lciIsIk9TX0FORFJPSUQiLCJkZXZpY2VQaXhlbFJhdGlvIiwibWluIiwiX2ZpeENvbnRhaW5lciIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJicyIsIm92ZXJmbG93IiwiY29udFN0eWxlIiwicG9zaXRpb24iLCJzY3JvbGxUb3AiLCJjdG9yIiwiX3Jlc3VsdCIsIl9idWlsZFJlc3VsdCIsImNvbnRhaW5lclciLCJjb250YWluZXJIIiwiY29udGVudFciLCJjb250ZW50SCIsImFicyIsIkVxdWFsVG9GcmFtZSIsImV4dGVuZHMiLCJmcmFtZUgiLCJwYWRkaW5nIiwiUHJvcG9ydGlvbmFsVG9GcmFtZSIsImZyYW1lVyIsImRlc2lnblciLCJkZXNpZ25IIiwib2ZmeCIsInJvdW5kIiwib2ZmeSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJFcXVhbFRvV2luZG93IiwiX3N1cGVyIiwiUHJvcG9ydGlvbmFsVG9XaW5kb3ciLCJPcmlnaW5hbENvbnRhaW5lciIsIlBST1BPUlRJT05fVE9fRlJBTUUiLCJPUklHSU5BTF9DT05UQUlORVIiLCJFeGFjdEZpdCIsIlNob3dBbGwiLCJOb0JvcmRlciIsIkZpeGVkSGVpZ2h0IiwiRml4ZWRXaWR0aCIsImNvbnRhaW5lclN0ZyIsImNvbnRlbnRTdGciLCJfY29udGFpbmVyU3RyYXRlZ3kiLCJfY29udGVudFN0cmF0ZWd5Iiwic2V0Q29udGFpbmVyU3RyYXRlZ3kiLCJzZXRDb250ZW50U3RyYXRlZ3kiLCJnZXQiLCJVTktOT1dOIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBMkJBLElBQU1BLFdBQUFBLEdBQWNDLE9BQUFBLENBQVEsdUJBQVJBLENBQXBCO1FBQ0EsSUFBTUMsRUFBQUEsR0FBS0QsT0FBQUEsQ0FBUSxnQkFBUkEsQ0FBWDtRQUNBLElBQU1FLFFBQUFBLEdBQVdGLE9BQUFBLENBQVEsYUFBUkEsQ0FBakI7UUFDQUEsT0FBQUEsQ0FBUSxxQkFBUkE7UUFHQSxJQUFNRyxZQUFBQSxHQUFnQkMsRUFBQUEsQ0FBR0MsR0FBSEQsQ0FBT0UsUUFBUEYsS0FBb0JBLEVBQUFBLENBQUdDLEdBQUhELENBQU9HLFdBQWpEO1FBQ0EsSUFBTUMsV0FBQUEsR0FBZUosRUFBQUEsQ0FBR0MsR0FBSEQsQ0FBT0UsUUFBUEYsS0FBb0JBLEVBQUFBLENBQUdDLEdBQUhELENBQU9LLFVBQWhEO1FBQ0EsSUFBTUMsWUFBQUEsR0FBZ0JOLEVBQUFBLENBQUdDLEdBQUhELENBQU9FLFFBQVBGLEtBQW9CQSxFQUFBQSxDQUFHQyxHQUFIRCxDQUFPTyxXQUFqRDtRQUVBLElBQUlDLGVBQUFBLEdBQWtCO0FBQUEsWUFDbEJDLElBQUFBLEVBQU0sU0FBQSxJQUFBLEdBQVU7QUFBQSxnQkFFWixJQUFJLENBQUNDLGFBQUQsSUFBa0IsQ0FBQ0MsU0FBbkIsSUFBZ0MsQ0FBQ1AsV0FBakMsSUFBZ0QsQ0FBQ0wsWUFBakQsSUFBaUUsQ0FBQ08sWUFBdEUsRUFBb0Y7QUFBQSxvQkFDaEYsS0FBS00sSUFBTCxHQUFZQyxRQUFBQSxD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QUFBLENBQU9DLE9BQVBELEdBQWlCbFUsRUFBQUEsQ0FBR3NHLElBQXBCNE4iLCJmaWxlIjoiQ0NWaWV3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCBSaWNhcmRvIFF1ZXNhZGFcbiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxMiBjb2NvczJkLXgub3JnXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5jb25zdCBFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4uL2V2ZW50L2V2ZW50LXRhcmdldCcpO1xuY29uc3QganMgPSByZXF1aXJlKCcuLi9wbGF0Zm9ybS9qcycpO1xuY29uc3QgcmVuZGVyZXIgPSByZXF1aXJlKCcuLi9yZW5kZXJlcicpO1xucmVxdWlyZSgnLi4vcGxhdGZvcm0vQ0NDbGFzcycpO1xuXG4vLyBUT0RPOiBtb3ZlIGludG8gYWRhcHRlclxuY29uc3QgaXNYaWFvbWlHYW1lID0gKGNjLnN5cy5wbGF0Zm9ybSA9PT0gY2Muc3lzLlhJQU9NSV9HQU1FKTtcbmNvbnN0IGlzQmFpZHVHYW1lID0gKGNjLnN5cy5wbGF0Zm9ybSA9PT0gY2Muc3lzLkJBSURVX0dBTUUpO1xuY29uc3QgaXNBbGlwYXlHYW1lID0gKGNjLnN5cy5wbGF0Zm9ybSA9PT0gY2Muc3lzLkFMSVBBWV9HQU1FKTtcblxudmFyIF9fQnJvd3NlckdldHRlciA9IHtcbiAgICBpbml0OiBmdW5jdGlvbigpe1xuICAgICAgICAvLyBOT1RFOiBub3QgbWVyZ2UgaW50byB2Mi4yLjAsIG1vdmUgaW50byBBbGlwYXkgYWRhcHRlclxuICAgICAgICBpZiAoIUNDX1dFQ0hBVEdBTUUgJiYgIUNDX1FRUExBWSAmJiAhaXNCYWlkdUdhbWUgJiYgIWlzWGlhb21pR2FtZSAmJiAhaXNBbGlwYXlHYW1lKSB7XG4gICAgICAgICAgICB0aGlzLmh0bWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImh0bWxcIilbMF07XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGF2YWlsV2lkdGg6IGZ1bmN0aW9uKGZyYW1lKXtcbiAgICAgICAgaWYgKCFmcmFtZSB8fCBmcmFtZSA9PT0gdGhpcy5odG1sKVxuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gZnJhbWUuY2xpZW50V2lkdGg7XG4gICAgfSxcbiAgICBhdmFpbEhlaWdodDogZnVuY3Rpb24oZnJhbWUpe1xuICAgICAgICBpZiAoIWZyYW1lIHx8IGZyYW1lID09PSB0aGlzLmh0bWwpXG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gZnJhbWUuY2xpZW50SGVpZ2h0O1xuICAgIH0sXG4gICAgbWV0YToge1xuICAgICAgICBcIndpZHRoXCI6IFwiZGV2aWNlLXdpZHRoXCJcbiAgICB9LFxuICAgIGFkYXB0YXRpb25UeXBlOiBjYy5zeXMuYnJvd3NlclR5cGVcbn07XG5cbmlmIChjYy5zeXMub3MgPT09IGNjLnN5cy5PU19JT1MpIC8vIEFsbCBicm93c2VycyBhcmUgV2ViVmlld1xuICAgIF9fQnJvd3NlckdldHRlci5hZGFwdGF0aW9uVHlwZSA9IGNjLnN5cy5CUk9XU0VSX1RZUEVfU0FGQVJJO1xuXG5pZiAoaXNCYWlkdUdhbWUpIHtcbiAgICBpZiAoY2Muc3lzLmJyb3dzZXJUeXBlID09PSBjYy5zeXMuQlJPV1NFUl9UWVBFX0JBSURVX0dBTUVfU1VCKSB7XG4gICAgICAgIF9fQnJvd3NlckdldHRlci5hZGFwdGF0aW9uVHlwZSA9IGNjLnN5cy5CUk9XU0VSX1RZUEVfQkFJRFVfR0FNRV9TVUI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBfX0Jyb3dzZXJHZXR0ZXIuYWRhcHRhdGlvblR5cGUgPSBjYy5zeXMuQlJPV1NFUl9UWVBFX0JBSURVX0dBTUU7XG4gICAgfVxufVxuXG5pZiAoaXNYaWFvbWlHYW1lKSB7XG4gICAgX19Ccm93c2VyR2V0dGVyLmFkYXB0YXRpb25UeXBlID0gY2Muc3lzLkJST1dTRVJfVFlQRV9YSUFPTUlfR0FNRTtcbn1cblxuLy8gTk9URTogbm90IG1lcmdlIGludG8gdjIuMi4wLCBtb3ZlIGludG8gQWxpcGF5IGFkYXB0ZXJcbmlmIChpc0FsaXBheUdhbWUpIHtcbiAgICBfX0Jyb3dzZXJHZXR0ZXIuYWRhcHRhdGlvblR5cGUgPSBjYy5zeXMuQlJPV1NFUl9UWVBFX0FMSVBBWV9HQU1FO1xufVxuXG5pZiAoQ0NfV0VDSEFUR0FNRSkge1xuICAgIGlmIChjYy5zeXMuYnJvd3NlclR5cGUgPT09IGNjLnN5cy5CUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUVfU1VCKSB7XG4gICAgICAgIF9fQnJvd3NlckdldHRlci5hZGFwdGF0aW9uVHlwZSA9IGNjLnN5cy5CUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUVfU1VCO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgX19Ccm93c2VyR2V0dGVyLmFkYXB0YXRpb25UeXBlID0gY2Muc3lzLkJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRTtcbiAgICB9XG59XG5cbmlmIChDQ19RUVBMQVkpIHtcbiAgICBfX0Jyb3dzZXJHZXR0ZXIuYWRhcHRhdGlvblR5cGUgPSBjYy5zeXMuQlJPV1NFUl9UWVBFX1FRX1BMQVk7XG59XG5cbnN3aXRjaCAoX19Ccm93c2VyR2V0dGVyLmFkYXB0YXRpb25UeXBlKSB7XG4gICAgY2FzZSBjYy5zeXMuQlJPV1NFUl9UWVBFX1NBRkFSSTpcbiAgICAgICAgX19Ccm93c2VyR2V0dGVyLm1ldGFbXCJtaW5pbWFsLXVpXCJdID0gXCJ0cnVlXCI7XG4gICAgY2FzZSBjYy5zeXMuQlJPV1NFUl9UWVBFX1NPVUdPVTpcbiAgICBjYXNlIGNjLnN5cy5CUk9XU0VSX1RZUEVfVUM6XG4gICAgICAgIF9fQnJvd3NlckdldHRlci5hdmFpbFdpZHRoID0gZnVuY3Rpb24oZnJhbWUpe1xuICAgICAgICAgICAgcmV0dXJuIGZyYW1lLmNsaWVudFdpZHRoO1xuICAgICAgICB9O1xuICAgICAgICBfX0Jyb3dzZXJHZXR0ZXIuYXZhaWxIZWlnaHQgPSBmdW5jdGlvbihmcmFtZSl7XG4gICAgICAgICAgICByZXR1cm4gZnJhbWUuY2xpZW50SGVpZ2h0O1xuICAgICAgICB9O1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIGNjLnN5cy5CUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUU6XG4gICAgICAgIF9fQnJvd3NlckdldHRlci5hdmFpbFdpZHRoID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgfTtcbiAgICAgICAgX19Ccm93c2VyR2V0dGVyLmF2YWlsSGVpZ2h0ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgY2Muc3lzLkJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRV9TVUI6XG4gICAgICAgIHZhciBzaGFyZWRDYW52YXMgPSB3aW5kb3cuc2hhcmVkQ2FudmFzIHx8IHd4LmdldFNoYXJlZENhbnZhcygpO1xuICAgICAgICBfX0Jyb3dzZXJHZXR0ZXIuYXZhaWxXaWR0aCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gc2hhcmVkQ2FudmFzLndpZHRoO1xuICAgICAgICB9O1xuICAgICAgICBfX0Jyb3dzZXJHZXR0ZXIuYXZhaWxIZWlnaHQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHNoYXJlZENhbnZhcy5oZWlnaHQ7XG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xufVxuXG52YXIgX3NjaXNzb3JSZWN0ID0gbnVsbDtcblxuLyoqXG4gKiBjYy52aWV3IGlzIHRoZSBzaW5nbGV0b24gb2JqZWN0IHdoaWNoIHJlcHJlc2VudHMgdGhlIGdhbWUgd2luZG93Ljxici8+XG4gKiBJdCdzIG1haW4gdGFzayBpbmNsdWRlOiA8YnIvPlxuICogIC0gQXBwbHkgdGhlIGRlc2lnbiByZXNvbHV0aW9uIHBvbGljeTxici8+XG4gKiAgLSBQcm92aWRlIGludGVyYWN0aW9uIHdpdGggdGhlIHdpbmRvdywgbGlrZSByZXNpemUgZXZlbnQgb24gd2ViLCByZXRpbmEgZGlzcGxheSBzdXBwb3J0LCBldGMuLi48YnIvPlxuICogIC0gTWFuYWdlIHRoZSBnYW1lIHZpZXcgcG9ydCB3aGljaCBjYW4gYmUgZGlmZmVyZW50IHdpdGggdGhlIHdpbmRvdzxici8+XG4gKiAgLSBNYW5hZ2UgdGhlIGNvbnRlbnQgc2NhbGUgYW5kIHRyYW5zbGF0aW9uPGJyLz5cbiAqIDxici8+XG4gKiBTaW5jZSB0aGUgY2MudmlldyBpcyBhIHNpbmdsZXRvbiwgeW91IGRvbid0IG5lZWQgdG8gY2FsbCBhbnkgY29uc3RydWN0b3Igb3IgY3JlYXRlIGZ1bmN0aW9ucyw8YnIvPlxuICogdGhlIHN0YW5kYXJkIHdheSB0byB1c2UgaXQgaXMgYnkgY2FsbGluZzo8YnIvPlxuICogIC0gY2Mudmlldy5tZXRob2ROYW1lKCk7IDxici8+XG4gKlxuICogQGNsYXNzIFZpZXdcbiAqIEBleHRlbmRzIEV2ZW50VGFyZ2V0XG4gKi9cbnZhciBWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgIEV2ZW50VGFyZ2V0LmNhbGwodGhpcyk7XG5cbiAgICB2YXIgX3QgPSB0aGlzLCBfc3RyYXRlZ3llciA9IGNjLkNvbnRhaW5lclN0cmF0ZWd5LCBfc3RyYXRlZ3kgPSBjYy5Db250ZW50U3RyYXRlZ3k7XG5cbiAgICBfX0Jyb3dzZXJHZXR0ZXIuaW5pdCh0aGlzKTtcblxuICAgIC8vIFNpemUgb2YgcGFyZW50IG5vZGUgdGhhdCBjb250YWlucyBjYy5nYW1lLmNvbnRhaW5lciBhbmQgY2MuZ2FtZS5jYW52YXNcbiAgICBfdC5fZnJhbWVTaXplID0gY2Muc2l6ZSgwLCAwKTtcblxuICAgIC8vIHJlc29sdXRpb24gc2l6ZSwgaXQgaXMgdGhlIHNpemUgYXBwcm9wcmlhdGUgZm9yIHRoZSBhcHAgcmVzb3VyY2VzLlxuICAgIF90Ll9kZXNpZ25SZXNvbHV0aW9uU2l6ZSA9IGNjLnNpemUoMCwgMCk7XG4gICAgX3QuX29yaWdpbmFsRGVzaWduUmVzb2x1dGlvblNpemUgPSBjYy5zaXplKDAsIDApO1xuICAgIF90Ll9zY2FsZVggPSAxO1xuICAgIF90Ll9zY2FsZVkgPSAxO1xuICAgIC8vIFZpZXdwb3J0IGlzIHRoZSBjb250YWluZXIncyByZWN0IHJlbGF0ZWQgdG8gY29udGVudCdzIGNvb3JkaW5hdGVzIGluIHBpeGVsXG4gICAgX3QuX3ZpZXdwb3J0UmVjdCA9IGNjLnJlY3QoMCwgMCwgMCwgMCk7XG4gICAgLy8gVGhlIHZpc2libGUgcmVjdCBpbiBjb250ZW50J3MgY29vcmRpbmF0ZSBpbiBwb2ludFxuICAgIF90Ll92aXNpYmxlUmVjdCA9IGNjLnJlY3QoMCwgMCwgMCwgMCk7XG4gICAgLy8gQXV0byBmdWxsIHNjcmVlbiBkaXNhYmxlZCBieSBkZWZhdWx0XG4gICAgX3QuX2F1dG9GdWxsU2NyZWVuID0gZmFsc2U7XG4gICAgLy8gVGhlIGRldmljZSdzIHBpeGVsIHJhdGlvIChmb3IgcmV0aW5hIGRpc3BsYXlzKVxuICAgIF90Ll9kZXZpY2VQaXhlbFJhdGlvID0gMTtcbiAgICBfdC5fbWF4UGl4ZWxSYXRpbyA9IDI7XG4gICAgLy8gUmV0aW5hIGRpc2FibGVkIGJ5IGRlZmF1bHRcbiAgICBfdC5fcmV0aW5hRW5hYmxlZCA9IGZhbHNlO1xuICAgIC8vIEN1c3RvbSBjYWxsYmFjayBmb3IgcmVzaXplIGV2ZW50XG4gICAgX3QuX3Jlc2l6ZUNhbGxiYWNrID0gbnVsbDtcbiAgICBfdC5fcmVzaXppbmcgPSBmYWxzZTtcbiAgICBfdC5fcmVzaXplV2l0aEJyb3dzZXJTaXplID0gZmFsc2U7XG4gICAgX3QuX29yaWVudGF0aW9uQ2hhbmdpbmcgPSB0cnVlO1xuICAgIF90Ll9pc1JvdGF0ZWQgPSBmYWxzZTtcbiAgICBfdC5fb3JpZW50YXRpb24gPSBjYy5tYWNyby5PUklFTlRBVElPTl9BVVRPO1xuICAgIF90Ll9pc0FkanVzdFZpZXdwb3J0ID0gdHJ1ZTtcbiAgICBfdC5fYW50aUFsaWFzRW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgLy8gU2V0dXAgc3lzdGVtIGRlZmF1bHQgcmVzb2x1dGlvbiBwb2xpY2llc1xuICAgIF90Ll9yZXNvbHV0aW9uUG9saWN5ID0gbnVsbDtcbiAgICBfdC5fcnBFeGFjdEZpdCA9IG5ldyBjYy5SZXNvbHV0aW9uUG9saWN5KF9zdHJhdGVneWVyLkVRVUFMX1RPX0ZSQU1FLCBfc3RyYXRlZ3kuRVhBQ1RfRklUKTtcbiAgICBfdC5fcnBTaG93QWxsID0gbmV3IGNjLlJlc29sdXRpb25Qb2xpY3koX3N0cmF0ZWd5ZXIuRVFVQUxfVE9fRlJBTUUsIF9zdHJhdGVneS5TSE9XX0FMTCk7XG4gICAgX3QuX3JwTm9Cb3JkZXIgPSBuZXcgY2MuUmVzb2x1dGlvblBvbGljeShfc3RyYXRlZ3llci5FUVVBTF9UT19GUkFNRSwgX3N0cmF0ZWd5Lk5PX0JPUkRFUik7XG4gICAgX3QuX3JwRml4ZWRIZWlnaHQgPSBuZXcgY2MuUmVzb2x1dGlvblBvbGljeShfc3RyYXRlZ3llci5FUVVBTF9UT19GUkFNRSwgX3N0cmF0ZWd5LkZJWEVEX0hFSUdIVCk7XG4gICAgX3QuX3JwRml4ZWRXaWR0aCA9IG5ldyBjYy5SZXNvbHV0aW9uUG9saWN5KF9zdHJhdGVneWVyLkVRVUFMX1RPX0ZSQU1FLCBfc3RyYXRlZ3kuRklYRURfV0lEVEgpO1xuXG4gICAgY2MuZ2FtZS5vbmNlKGNjLmdhbWUuRVZFTlRfRU5HSU5FX0lOSVRFRCwgdGhpcy5pbml0LCB0aGlzKTtcbn07XG5cbmNjLmpzLmV4dGVuZChWaWV3LCBFdmVudFRhcmdldCk7XG5cblxuY2MuanMubWl4aW4oVmlldy5wcm90b3R5cGUsIHtcbiAgICBpbml0ICgpIHtcbiAgICAgICAgdGhpcy5faW5pdEZyYW1lU2l6ZSgpO1xuICAgICAgICB0aGlzLmVuYWJsZUFudGlBbGlhcyh0cnVlKTtcblxuICAgICAgICB2YXIgdyA9IGNjLmdhbWUuY2FudmFzLndpZHRoLCBoID0gY2MuZ2FtZS5jYW52YXMuaGVpZ2h0O1xuICAgICAgICB0aGlzLl9kZXNpZ25SZXNvbHV0aW9uU2l6ZS53aWR0aCA9IHc7XG4gICAgICAgIHRoaXMuX2Rlc2lnblJlc29sdXRpb25TaXplLmhlaWdodCA9IGg7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsRGVzaWduUmVzb2x1dGlvblNpemUud2lkdGggPSB3O1xuICAgICAgICB0aGlzLl9vcmlnaW5hbERlc2lnblJlc29sdXRpb25TaXplLmhlaWdodCA9IGg7XG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0UmVjdC53aWR0aCA9IHc7XG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0UmVjdC5oZWlnaHQgPSBoO1xuICAgICAgICB0aGlzLl92aXNpYmxlUmVjdC53aWR0aCA9IHc7XG4gICAgICAgIHRoaXMuX3Zpc2libGVSZWN0LmhlaWdodCA9IGg7XG5cbiAgICAgICAgY2Mud2luU2l6ZS53aWR0aCA9IHRoaXMuX3Zpc2libGVSZWN0LndpZHRoO1xuICAgICAgICBjYy53aW5TaXplLmhlaWdodCA9IHRoaXMuX3Zpc2libGVSZWN0LmhlaWdodDtcbiAgICAgICAgY2MudmlzaWJsZVJlY3QgJiYgY2MudmlzaWJsZVJlY3QuaW5pdCh0aGlzLl92aXNpYmxlUmVjdCk7XG4gICAgfSxcblxuICAgIC8vIFJlc2l6ZSBoZWxwZXIgZnVuY3Rpb25zXG4gICAgX3Jlc2l6ZUV2ZW50OiBmdW5jdGlvbiAoZm9yY2VPckV2ZW50KSB7XG4gICAgICAgIHZhciB2aWV3O1xuICAgICAgICBpZiAodGhpcy5zZXREZXNpZ25SZXNvbHV0aW9uU2l6ZSkge1xuICAgICAgICAgICAgdmlldyA9IHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2aWV3ID0gY2MudmlldztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZyYW1lIHNpemUgY2hhbmdlZCBvciBub3RcbiAgICAgICAgdmFyIHByZXZGcmFtZVcgPSB2aWV3Ll9mcmFtZVNpemUud2lkdGgsIHByZXZGcmFtZUggPSB2aWV3Ll9mcmFtZVNpemUuaGVpZ2h0LCBwcmV2Um90YXRlZCA9IHZpZXcuX2lzUm90YXRlZDtcbiAgICAgICAgaWYgKGNjLnN5cy5pc01vYmlsZSkge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lclN0eWxlID0gY2MuZ2FtZS5jb250YWluZXIuc3R5bGUsXG4gICAgICAgICAgICAgICAgbWFyZ2luID0gY29udGFpbmVyU3R5bGUubWFyZ2luO1xuICAgICAgICAgICAgY29udGFpbmVyU3R5bGUubWFyZ2luID0gJzAnO1xuICAgICAgICAgICAgY29udGFpbmVyU3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIHZpZXcuX2luaXRGcmFtZVNpemUoKTtcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLm1hcmdpbiA9IG1hcmdpbjtcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmlldy5faW5pdEZyYW1lU2l6ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JjZU9yRXZlbnQgIT09IHRydWUgJiYgdmlldy5faXNSb3RhdGVkID09PSBwcmV2Um90YXRlZCAmJiB2aWV3Ll9mcmFtZVNpemUud2lkdGggPT09IHByZXZGcmFtZVcgJiYgdmlldy5fZnJhbWVTaXplLmhlaWdodCA9PT0gcHJldkZyYW1lSClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAvLyBGcmFtZSBzaXplIGNoYW5nZWQsIGRvIHJlc2l6ZSB3b3Jrc1xuICAgICAgICB2YXIgd2lkdGggPSB2aWV3Ll9vcmlnaW5hbERlc2lnblJlc29sdXRpb25TaXplLndpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gdmlldy5fb3JpZ2luYWxEZXNpZ25SZXNvbHV0aW9uU2l6ZS5oZWlnaHQ7XG4gICAgICAgIHZpZXcuX3Jlc2l6aW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKHdpZHRoID4gMClcbiAgICAgICAgICAgIHZpZXcuc2V0RGVzaWduUmVzb2x1dGlvblNpemUod2lkdGgsIGhlaWdodCwgdmlldy5fcmVzb2x1dGlvblBvbGljeSk7XG4gICAgICAgIHZpZXcuX3Jlc2l6aW5nID0gZmFsc2U7XG5cbiAgICAgICAgdmlldy5lbWl0KCdjYW52YXMtcmVzaXplJyk7XG4gICAgICAgIGlmICh2aWV3Ll9yZXNpemVDYWxsYmFjaykge1xuICAgICAgICAgICAgdmlldy5fcmVzaXplQ2FsbGJhY2suY2FsbCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9vcmllbnRhdGlvbkNoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy52aWV3Ll9vcmllbnRhdGlvbkNoYW5naW5nID0gdHJ1ZTtcbiAgICAgICAgY2Mudmlldy5fcmVzaXplRXZlbnQoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFNldHMgdmlldydzIHRhcmdldC1kZW5zaXR5ZHBpIGZvciBhbmRyb2lkIG1vYmlsZSBicm93c2VyLiBpdCBjYW4gYmUgc2V0IHRvOiAgICAgICAgICAgPGJyLz5cbiAgICAgKiAgIDEuIGNjLm1hY3JvLkRFTlNJVFlEUElfREVWSUNFLCB2YWx1ZSBpcyBcImRldmljZS1kcGlcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICAgKiAgIDIuIGNjLm1hY3JvLkRFTlNJVFlEUElfSElHSCwgdmFsdWUgaXMgXCJoaWdoLWRwaVwiICAoZGVmYXVsdCB2YWx1ZSkgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICAgKiAgIDMuIGNjLm1hY3JvLkRFTlNJVFlEUElfTUVESVVNLCB2YWx1ZSBpcyBcIm1lZGl1bS1kcGlcIiAoYnJvd3NlcidzIGRlZmF1bHQgdmFsdWUpICAgICAgICAgICAgPGJyLz5cbiAgICAgKiAgIDQuIGNjLm1hY3JvLkRFTlNJVFlEUElfTE9XLCB2YWx1ZSBpcyBcImxvdy1kcGlcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICAgKiAgIDUuIEN1c3RvbSB2YWx1ZSwgZS5nOiBcIjQ4MFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cbiAgICAgKiAhI3poIOiuvue9ruebruagh+WGheWuueeahOavj+iLseWvuOWDj+e0oOeCueWvhuW6puOAglxuICAgICAqXG4gICAgICogQG1ldGhvZCBzZXRUYXJnZXREZW5zaXR5RFBJXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRlbnNpdHlEUElcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2Mi4wXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCB0YXJnZXQtZGVuc2l0eWRwaSB2YWx1ZSBvZiBjYy52aWV3LlxuICAgICAqICEjemgg6I635Y+W55uu5qCH5YaF5a6555qE5q+P6Iux5a+45YOP57Sg54K55a+G5bqm44CCXG4gICAgICogQG1ldGhvZCBnZXRUYXJnZXREZW5zaXR5RFBJXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2Mi4wXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2V0cyB3aGV0aGVyIHJlc2l6ZSBjYW52YXMgYXV0b21hdGljYWxseSB3aGVuIGJyb3dzZXIncyBzaXplIGNoYW5nZWQuPGJyLz5cbiAgICAgKiBVc2VmdWwgb25seSBvbiB3ZWIuXG4gICAgICogISN6aCDorr7nva7lvZPlj5HnjrDmtY/op4jlmajnmoTlsLrlr7jmlLnlj5jml7bvvIzmmK/lkKboh6rliqjosIPmlbQgY2FudmFzIOWwuuWvuOWkp+Wwj+OAglxuICAgICAqIOS7heWcqCBXZWIg5qih5byP5LiL5pyJ5pWI44CCXG4gICAgICogQG1ldGhvZCByZXNpemVXaXRoQnJvd3NlclNpemVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuYWJsZWQgLSBXaGV0aGVyIGVuYWJsZSBhdXRvbWF0aWMgcmVzaXplIHdpdGggYnJvd3NlcidzIHJlc2l6ZSBldmVudFxuICAgICAqL1xuICAgIHJlc2l6ZVdpdGhCcm93c2VyU2l6ZTogZnVuY3Rpb24gKGVuYWJsZWQpIHtcbiAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICAgIC8vZW5hYmxlXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3Jlc2l6ZVdpdGhCcm93c2VyU2l6ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZVdpdGhCcm93c2VyU2l6ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX3Jlc2l6ZUV2ZW50KTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLl9vcmllbnRhdGlvbkNoYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL2Rpc2FibGVcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZXNpemVXaXRoQnJvd3NlclNpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNpemVXaXRoQnJvd3NlclNpemUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fcmVzaXplRXZlbnQpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMuX29yaWVudGF0aW9uQ2hhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2V0cyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gZm9yIGNjLnZpZXcncyByZXNpemUgYWN0aW9uLDxici8+XG4gICAgICogdGhpcyBjYWxsYmFjayB3aWxsIGJlIGludm9rZWQgYmVmb3JlIGFwcGx5aW5nIHJlc29sdXRpb24gcG9saWN5LCA8YnIvPlxuICAgICAqIHNvIHlvdSBjYW4gZG8gYW55IGFkZGl0aW9uYWwgbW9kaWZpY2F0aW9ucyB3aXRoaW4gdGhlIGNhbGxiYWNrLjxici8+XG4gICAgICogVXNlZnVsIG9ubHkgb24gd2ViLlxuICAgICAqICEjemgg6K6+572uIGNjLnZpZXcg6LCD5pW06KeG56qX5bC65a+46KGM5Li655qE5Zue6LCD5Ye95pWw77yMXG4gICAgICog6L+Z5Liq5Zue6LCD5Ye95pWw5Lya5Zyo5bqU55So6YCC6YWN5qih5byP5LmL5YmN6KKr6LCD55So77yMXG4gICAgICog5Zug5q2k5L2g5Y+v5Lul5Zyo6L+Z5Liq5Zue6LCD5Ye95pWw5YaF5re75Yqg5Lu75oSP6ZmE5Yqg5pS55Y+Y77yMXG4gICAgICog5LuF5ZyoIFdlYiDlubPlj7DkuIvmnInmlYjjgIJcbiAgICAgKiBAbWV0aG9kIHNldFJlc2l6ZUNhbGxiYWNrXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxOdWxsfSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayBmdW5jdGlvblxuICAgICAqL1xuICAgIHNldFJlc2l6ZUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKENDX0VESVRPUikgcmV0dXJuO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nIHx8IGNhbGxiYWNrID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZUNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFNldHMgdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBnYW1lLCBpdCBjYW4gYmUgbGFuZHNjYXBlLCBwb3J0cmFpdCBvciBhdXRvLlxuICAgICAqIFdoZW4gc2V0IGl0IHRvIGxhbmRzY2FwZSBvciBwb3J0cmFpdCwgYW5kIHNjcmVlbiB3L2ggcmF0aW8gZG9lc24ndCBmaXQsIFxuICAgICAqIGNjLnZpZXcgd2lsbCBhdXRvbWF0aWNhbGx5IHJvdGF0ZSB0aGUgZ2FtZSBjYW52YXMgdXNpbmcgQ1NTLlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSBhbnkgZWZmZWN0IGluIG5hdGl2ZSwgXG4gICAgICogaW4gbmF0aXZlLCB5b3UgbmVlZCB0byBzZXQgdGhlIGFwcGxpY2F0aW9uIG9yaWVudGF0aW9uIGluIG5hdGl2ZSBwcm9qZWN0IHNldHRpbmdzXG4gICAgICogISN6aCDorr7nva7muLjmiI/lsY/luZXmnJ3lkJHvvIzlroPog73lpJ/mmK/mqKrniYjvvIznq5bniYjmiJboh6rliqjjgIJcbiAgICAgKiDlvZPorr7nva7kuLrmqKrniYjmiJbnq5bniYjvvIzlubbkuJTlsY/luZXnmoTlrr3pq5jmr5TkvovkuI3ljLnphY3ml7bvvIxcbiAgICAgKiBjYy52aWV3IOS8muiHquWKqOeUqCBDU1Mg5peL6L2s5ri45oiP5Zy65pmv55qEIGNhbnZhc++8jFxuICAgICAqIOi/meS4quaWueazleS4jeS8muWvuSBuYXRpdmUg6YOo5YiG5Lqn55Sf5Lu75L2V5b2x5ZON77yM5a+55LqOIG5hdGl2ZSDogIzoqIDvvIzkvaDpnIDopoHlnKjlupTnlKjorr7nva7kuK3nmoTorr7nva7mjpLniYjjgIJcbiAgICAgKiBAbWV0aG9kIHNldE9yaWVudGF0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9yaWVudGF0aW9uIC0gUG9zc2libGUgdmFsdWVzOiBjYy5tYWNyby5PUklFTlRBVElPTl9MQU5EU0NBUEUgfCBjYy5tYWNyby5PUklFTlRBVElPTl9QT1JUUkFJVCB8IGNjLm1hY3JvLk9SSUVOVEFUSU9OX0FVVE9cbiAgICAgKi9cbiAgICBzZXRPcmllbnRhdGlvbjogZnVuY3Rpb24gKG9yaWVudGF0aW9uKSB7XG4gICAgICAgIG9yaWVudGF0aW9uID0gb3JpZW50YXRpb24gJiBjYy5tYWNyby5PUklFTlRBVElPTl9BVVRPO1xuICAgICAgICBpZiAob3JpZW50YXRpb24gJiYgdGhpcy5fb3JpZW50YXRpb24gIT09IG9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xuICAgICAgICAgICAgdmFyIGRlc2lnbldpZHRoID0gdGhpcy5fb3JpZ2luYWxEZXNpZ25SZXNvbHV0aW9uU2l6ZS53aWR0aDtcbiAgICAgICAgICAgIHZhciBkZXNpZ25IZWlnaHQgPSB0aGlzLl9vcmlnaW5hbERlc2lnblJlc29sdXRpb25TaXplLmhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuc2V0RGVzaWduUmVzb2x1dGlvblNpemUoZGVzaWduV2lkdGgsIGRlc2lnbkhlaWdodCwgdGhpcy5fcmVzb2x1dGlvblBvbGljeSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2luaXRGcmFtZVNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxvY0ZyYW1lU2l6ZSA9IHRoaXMuX2ZyYW1lU2l6ZTtcbiAgICAgICAgdmFyIHcgPSBfX0Jyb3dzZXJHZXR0ZXIuYXZhaWxXaWR0aChjYy5nYW1lLmZyYW1lKTtcbiAgICAgICAgdmFyIGggPSBfX0Jyb3dzZXJHZXR0ZXIuYXZhaWxIZWlnaHQoY2MuZ2FtZS5mcmFtZSk7XG4gICAgICAgIHZhciBpc0xhbmRzY2FwZSA9IHcgPj0gaDtcblxuICAgICAgICBpZiAoQ0NfRURJVE9SIHx8ICFjYy5zeXMuaXNNb2JpbGUgfHxcbiAgICAgICAgICAgIChpc0xhbmRzY2FwZSAmJiB0aGlzLl9vcmllbnRhdGlvbiAmIGNjLm1hY3JvLk9SSUVOVEFUSU9OX0xBTkRTQ0FQRSkgfHwgXG4gICAgICAgICAgICAoIWlzTGFuZHNjYXBlICYmIHRoaXMuX29yaWVudGF0aW9uICYgY2MubWFjcm8uT1JJRU5UQVRJT05fUE9SVFJBSVQpKSB7XG4gICAgICAgICAgICBsb2NGcmFtZVNpemUud2lkdGggPSB3O1xuICAgICAgICAgICAgbG9jRnJhbWVTaXplLmhlaWdodCA9IGg7XG4gICAgICAgICAgICBjYy5nYW1lLmNvbnRhaW5lci5zdHlsZVsnLXdlYmtpdC10cmFuc2Zvcm0nXSA9ICdyb3RhdGUoMGRlZyknO1xuICAgICAgICAgICAgY2MuZ2FtZS5jb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gJ3JvdGF0ZSgwZGVnKSc7XG4gICAgICAgICAgICB0aGlzLl9pc1JvdGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvY0ZyYW1lU2l6ZS53aWR0aCA9IGg7XG4gICAgICAgICAgICBsb2NGcmFtZVNpemUuaGVpZ2h0ID0gdztcbiAgICAgICAgICAgIGNjLmdhbWUuY29udGFpbmVyLnN0eWxlWyctd2Via2l0LXRyYW5zZm9ybSddID0gJ3JvdGF0ZSg5MGRlZyknO1xuICAgICAgICAgICAgY2MuZ2FtZS5jb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gJ3JvdGF0ZSg5MGRlZyknO1xuICAgICAgICAgICAgY2MuZ2FtZS5jb250YWluZXIuc3R5bGVbJy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbiddID0gJzBweCAwcHggMHB4JztcbiAgICAgICAgICAgIGNjLmdhbWUuY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9ICcwcHggMHB4IDBweCc7XG4gICAgICAgICAgICB0aGlzLl9pc1JvdGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vcmllbnRhdGlvbkNoYW5naW5nKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjYy52aWV3Ll9vcmllbnRhdGlvbkNoYW5naW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBoYWNrXG4gICAgX2FkanVzdFNpemVLZWVwQ2FudmFzU2l6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGVzaWduV2lkdGggPSB0aGlzLl9vcmlnaW5hbERlc2lnblJlc29sdXRpb25TaXplLndpZHRoO1xuICAgICAgICB2YXIgZGVzaWduSGVpZ2h0ID0gdGhpcy5fb3JpZ2luYWxEZXNpZ25SZXNvbHV0aW9uU2l6ZS5oZWlnaHQ7XG4gICAgICAgIGlmIChkZXNpZ25XaWR0aCA+IDApXG4gICAgICAgICAgICB0aGlzLnNldERlc2lnblJlc29sdXRpb25TaXplKGRlc2lnbldpZHRoLCBkZXNpZ25IZWlnaHQsIHRoaXMuX3Jlc29sdXRpb25Qb2xpY3kpO1xuICAgIH0sXG5cbiAgICBfc2V0Vmlld3BvcnRNZXRhOiBmdW5jdGlvbiAobWV0YXMsIG92ZXJ3cml0ZSkge1xuICAgICAgICB2YXIgdnAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvY29zTWV0YUVsZW1lbnRcIik7XG4gICAgICAgIGlmKHZwICYmIG92ZXJ3cml0ZSl7XG4gICAgICAgICAgICBkb2N1bWVudC5oZWFkLnJlbW92ZUNoaWxkKHZwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKFwidmlld3BvcnRcIiksXG4gICAgICAgICAgICBjdXJyZW50VlAgPSBlbGVtcyA/IGVsZW1zWzBdIDogbnVsbCxcbiAgICAgICAgICAgIGNvbnRlbnQsIGtleSwgcGF0dGVybjtcblxuICAgICAgICBjb250ZW50ID0gY3VycmVudFZQID8gY3VycmVudFZQLmNvbnRlbnQgOiBcIlwiO1xuICAgICAgICB2cCA9IHZwIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJtZXRhXCIpO1xuICAgICAgICB2cC5pZCA9IFwiY29jb3NNZXRhRWxlbWVudFwiO1xuICAgICAgICB2cC5uYW1lID0gXCJ2aWV3cG9ydFwiO1xuICAgICAgICB2cC5jb250ZW50ID0gXCJcIjtcblxuICAgICAgICBmb3IgKGtleSBpbiBtZXRhcykge1xuICAgICAgICAgICAgaWYgKGNvbnRlbnQuaW5kZXhPZihrZXkpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29udGVudCArPSBcIixcIiArIGtleSArIFwiPVwiICsgbWV0YXNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG92ZXJ3cml0ZSkge1xuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBuZXcgUmVnRXhwKGtleStcIlxccyo9XFxzKlteLF0rXCIpO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQucmVwbGFjZShwYXR0ZXJuLCBrZXkgKyBcIj1cIiArIG1ldGFzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKC9eLC8udGVzdChjb250ZW50KSlcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cigxKTtcblxuICAgICAgICB2cC5jb250ZW50ID0gY29udGVudDtcbiAgICAgICAgLy8gRm9yIGFkb3B0aW5nIGNlcnRhaW4gYW5kcm9pZCBkZXZpY2VzIHdoaWNoIGRvbid0IHN1cHBvcnQgc2Vjb25kIHZpZXdwb3J0XG4gICAgICAgIGlmIChjdXJyZW50VlApXG4gICAgICAgICAgICBjdXJyZW50VlAuY29udGVudCA9IGNvbnRlbnQ7XG5cbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh2cCk7XG4gICAgfSxcblxuICAgIF9hZGp1c3RWaWV3cG9ydE1ldGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gTk9URTogbm90IG1lcmdlIGludG8gdjIuMi4wLCBtb3ZlIGludG8gQWxpcGF5IGFkYXB0ZXJcbiAgICAgICAgaWYgKHRoaXMuX2lzQWRqdXN0Vmlld3BvcnQgJiYgIUNDX0pTQiAmJiAhQ0NfUlVOVElNRSAmJiAhQ0NfV0VDSEFUR0FNRSAmJiAhQ0NfUVFQTEFZICYmICFpc0JhaWR1R2FtZSAmJiAhaXNYaWFvbWlHYW1lICYmICFpc0FsaXBheUdhbWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFZpZXdwb3J0TWV0YShfX0Jyb3dzZXJHZXR0ZXIubWV0YSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5faXNBZGp1c3RWaWV3cG9ydCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXRzIHdoZXRoZXIgdGhlIGVuZ2luZSBtb2RpZnkgdGhlIFwidmlld3BvcnRcIiBtZXRhIGluIHlvdXIgd2ViIHBhZ2UuPGJyLz5cbiAgICAgKiBJdCdzIGVuYWJsZWQgYnkgZGVmYXVsdCwgd2Ugc3Ryb25nbHkgc3VnZ2VzdCB5b3Ugbm90IHRvIGRpc2FibGUgaXQuPGJyLz5cbiAgICAgKiBBbmQgZXZlbiB3aGVuIGl0J3MgZW5hYmxlZCwgeW91IGNhbiBzdGlsbCBzZXQgeW91ciBvd24gXCJ2aWV3cG9ydFwiIG1ldGEsIGl0IHdvbid0IGJlIG92ZXJyaWRkZW48YnIvPlxuICAgICAqIE9ubHkgdXNlZnVsIG9uIHdlYlxuICAgICAqICEjemgg6K6+572u5byV5pOO5piv5ZCm6LCD5pW0IHZpZXdwb3J0IG1ldGEg5p2l6YWN5ZCI5bGP5bmV6YCC6YWN44CCXG4gICAgICog6buY6K6k6K6+572u5Li65ZCv5Yqo77yM5oiR5Lus5by654OI5bu66K6u5L2g5LiN6KaB5bCG5a6D6K6+572u5Li65YWz6Zet44CCXG4gICAgICog5Y2z5L2/5b2T5a6D5ZCv5Yqo5pe277yM5L2g5LuN54S26IO95aSf6K6+572u5L2g55qEIHZpZXdwb3J0IG1ldGHvvIzlroPkuI3kvJrooqvopobnm5bjgIJcbiAgICAgKiDku4XlnKggV2ViIOaooeW8j+S4i+acieaViFxuICAgICAqIEBtZXRob2QgYWRqdXN0Vmlld3BvcnRNZXRhXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBlbmFibGVkIC0gRW5hYmxlIGF1dG9tYXRpYyBtb2RpZmljYXRpb24gdG8gXCJ2aWV3cG9ydFwiIG1ldGFcbiAgICAgKi9cbiAgICBhZGp1c3RWaWV3cG9ydE1ldGE6IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgICAgIHRoaXMuX2lzQWRqdXN0Vmlld3BvcnQgPSBlbmFibGVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0aW5hIHN1cHBvcnQgaXMgZW5hYmxlZCBieSBkZWZhdWx0IGZvciBBcHBsZSBkZXZpY2UgYnV0IGRpc2FibGVkIGZvciBvdGhlciBkZXZpY2VzLDxici8+XG4gICAgICogaXQgdGFrZXMgZWZmZWN0IG9ubHkgd2hlbiB5b3UgY2FsbGVkIHNldERlc2lnblJlc29sdXRpb25Qb2xpY3k8YnIvPlxuICAgICAqIE9ubHkgdXNlZnVsIG9uIHdlYlxuICAgICAqICEjemgg5a+55LqOIEFwcGxlIOi/meenjeaUr+aMgSBSZXRpbmEg5pi+56S655qE6K6+5aSH5LiK6buY6K6k6L+b6KGM5LyY5YyW6ICM5YW25LuW57G75Z6L6K6+5aSH6buY6K6k5LiN6L+b6KGM5LyY5YyW77yMXG4gICAgICog5a6D5LuF5Lya5Zyo5L2g6LCD55SoIHNldERlc2lnblJlc29sdXRpb25Qb2xpY3kg5pa55rOV5pe25pyJ5b2x5ZON44CCXG4gICAgICog5LuF5ZyoIFdlYiDmqKHlvI/kuIvmnInmlYjjgIJcbiAgICAgKiBAbWV0aG9kIGVuYWJsZVJldGluYVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5hYmxlZCAtIEVuYWJsZSBvciBkaXNhYmxlIHJldGluYSBkaXNwbGF5XG4gICAgICovXG4gICAgZW5hYmxlUmV0aW5hOiBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgICAgIHRoaXMuX3JldGluYUVuYWJsZWQgPSAhIWVuYWJsZWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBDaGVjayB3aGV0aGVyIHJldGluYSBkaXNwbGF5IGlzIGVuYWJsZWQuPGJyLz5cbiAgICAgKiBPbmx5IHVzZWZ1bCBvbiB3ZWJcbiAgICAgKiAhI3poIOajgOafpeaYr+WQpuWvuSBSZXRpbmEg5pi+56S66K6+5aSH6L+b6KGM5LyY5YyW44CCXG4gICAgICog5LuF5ZyoIFdlYiDmqKHlvI/kuIvmnInmlYjjgIJcbiAgICAgKiBAbWV0aG9kIGlzUmV0aW5hRW5hYmxlZFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNSZXRpbmFFbmFibGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JldGluYUVuYWJsZWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gV2hldGhlciB0byBFbmFibGUgb24gYW50aS1hbGlhc1xuICAgICAqICEjemgg5o6n5Yi25oqX6ZSv6b2/5piv5ZCm5byA5ZCvXG4gICAgICogQG1ldGhvZCBlbmFibGVBbnRpQWxpYXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuYWJsZWQgLSBFbmFibGUgb3Igbm90IGFudGktYWxpYXNcbiAgICAgKi9cbiAgICBlbmFibGVBbnRpQWxpYXM6IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgICAgIGlmICh0aGlzLl9hbnRpQWxpYXNFbmFibGVkID09PSBlbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYW50aUFsaWFzRW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgICAgIGlmKGNjLmdhbWUucmVuZGVyVHlwZSA9PT0gY2MuZ2FtZS5SRU5ERVJfVFlQRV9XRUJHTCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2MubG9hZGVyLl9jYWNoZTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gY2FjaGVba2V5XTtcbiAgICAgICAgICAgICAgICB2YXIgdGV4ID0gaXRlbSAmJiBpdGVtLmNvbnRlbnQgaW5zdGFuY2VvZiBjYy5UZXh0dXJlMkQgPyBpdGVtLmNvbnRlbnQgOiBudWxsO1xuICAgICAgICAgICAgICAgIGlmICh0ZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIEZpbHRlciA9IGNjLlRleHR1cmUyRC5GaWx0ZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXguc2V0RmlsdGVycyhGaWx0ZXIuTElORUFSLCBGaWx0ZXIuTElORUFSKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleC5zZXRGaWx0ZXJzKEZpbHRlci5ORUFSRVNULCBGaWx0ZXIuTkVBUkVTVCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihjYy5nYW1lLnJlbmRlclR5cGUgPT09IGNjLmdhbWUuUkVOREVSX1RZUEVfQ0FOVkFTKSB7XG4gICAgICAgICAgICB2YXIgY3R4ID0gY2MuZ2FtZS5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIGN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgICAgICAgY3R4Lm1vekltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBSZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgZW5hYmxlIG9uIGFudGktYWxpYXNcbiAgICAgKiAhI3poIOi/lOWbnuW9k+WJjeaYr+WQpuaKl+mUr+m9v1xuICAgICAqIEBtZXRob2QgaXNBbnRpQWxpYXNFbmFibGVkXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0FudGlBbGlhc0VuYWJsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FudGlBbGlhc0VuYWJsZWQ7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogSWYgZW5hYmxlZCwgdGhlIGFwcGxpY2F0aW9uIHdpbGwgdHJ5IGF1dG9tYXRpY2FsbHkgdG8gZW50ZXIgZnVsbCBzY3JlZW4gbW9kZSBvbiBtb2JpbGUgZGV2aWNlczxici8+XG4gICAgICogWW91IGNhbiBwYXNzIHRydWUgYXMgcGFyYW1ldGVyIHRvIGVuYWJsZSBpdCBhbmQgZGlzYWJsZSBpdCBieSBwYXNzaW5nIGZhbHNlLjxici8+XG4gICAgICogT25seSB1c2VmdWwgb24gd2ViXG4gICAgICogISN6aCDlkK/liqjml7bvvIznp7vliqjnq6/muLjmiI/kvJrlnKjnp7vliqjnq6/oh6rliqjlsJ3or5Xov5vlhaXlhajlsY/mqKHlvI/jgIJcbiAgICAgKiDkvaDog73lpJ/kvKDlhaUgdHJ1ZSDkuLrlj4LmlbDljrvlkK/liqjlroPvvIznlKggZmFsc2Ug5Y+C5pWw5p2l5YWz6Zet5a6D44CCXG4gICAgICogQG1ldGhvZCBlbmFibGVBdXRvRnVsbFNjcmVlblxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5hYmxlZCAtIEVuYWJsZSBvciBkaXNhYmxlIGF1dG8gZnVsbCBzY3JlZW4gb24gbW9iaWxlIGRldmljZXNcbiAgICAgKi9cbiAgICBlbmFibGVBdXRvRnVsbFNjcmVlbjogZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgICAgICBpZiAoZW5hYmxlZCAmJiBcbiAgICAgICAgICAgIGVuYWJsZWQgIT09IHRoaXMuX2F1dG9GdWxsU2NyZWVuICYmIFxuICAgICAgICAgICAgY2Muc3lzLmlzTW9iaWxlICYmIFxuICAgICAgICAgICAgY2Muc3lzLmJyb3dzZXJUeXBlICE9PSBjYy5zeXMuQlJPV1NFUl9UWVBFX1dFQ0hBVCkge1xuICAgICAgICAgICAgLy8gQXV0b21hdGljYWxseSBmdWxsIHNjcmVlbiB3aGVuIHVzZXIgdG91Y2hlcyBvbiBtb2JpbGUgdmVyc2lvblxuICAgICAgICAgICAgdGhpcy5fYXV0b0Z1bGxTY3JlZW4gPSB0cnVlO1xuICAgICAgICAgICAgY2Muc2NyZWVuLmF1dG9GdWxsU2NyZWVuKGNjLmdhbWUuZnJhbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYXV0b0Z1bGxTY3JlZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGNjLnNjcmVlbi5kaXNhYmxlQXV0b0Z1bGxTY3JlZW4oY2MuZ2FtZS5mcmFtZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIENoZWNrIHdoZXRoZXIgYXV0byBmdWxsIHNjcmVlbiBpcyBlbmFibGVkLjxici8+XG4gICAgICogT25seSB1c2VmdWwgb24gd2ViXG4gICAgICogISN6aCDmo4Dmn6Xoh6rliqjov5vlhaXlhajlsY/mqKHlvI/mmK/lkKblkK/liqjjgIJcbiAgICAgKiDku4XlnKggV2ViIOaooeW8j+S4i+acieaViOOAglxuICAgICAqIEBtZXRob2QgaXNBdXRvRnVsbFNjcmVlbkVuYWJsZWRcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBBdXRvIGZ1bGwgc2NyZWVuIGVuYWJsZWQgb3Igbm90XG4gICAgICovXG4gICAgaXNBdXRvRnVsbFNjcmVlbkVuYWJsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXV0b0Z1bGxTY3JlZW47XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogTm90IHN1cHBvcnQgb24gbmF0aXZlLjxici8+XG4gICAgICogT24gd2ViLCBpdCBzZXRzIHRoZSBzaXplIG9mIHRoZSBjYW52YXMuXG4gICAgICogISN6aCDov5nkuKrmlrnms5XlubbkuI3mlK/mjIEgbmF0aXZlIOW5s+WPsO+8jOWcqCBXZWIg5bmz5Y+w5LiL77yM5Y+v5Lul55So5p2l6K6+572uIGNhbnZhcyDlsLrlr7jjgIJcbiAgICAgKiBAbWV0aG9kIHNldENhbnZhc1NpemVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2lkdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0XG4gICAgICovXG4gICAgc2V0Q2FudmFzU2l6ZTogZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdmFyIGNhbnZhcyA9IGNjLmdhbWUuY2FudmFzO1xuICAgICAgICB2YXIgY29udGFpbmVyID0gY2MuZ2FtZS5jb250YWluZXI7XG5cbiAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGggKiB0aGlzLl9kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0ICogdGhpcy5fZGV2aWNlUGl4ZWxSYXRpbztcblxuICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuXG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG5cbiAgICAgICAgdGhpcy5fcmVzaXplRXZlbnQoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgdGhlIGNhbnZhcyBzaXplIG9mIHRoZSB2aWV3Ljxici8+XG4gICAgICogT24gbmF0aXZlIHBsYXRmb3JtcywgaXQgcmV0dXJucyB0aGUgc2NyZWVuIHNpemUgc2luY2UgdGhlIHZpZXcgaXMgYSBmdWxsc2NyZWVuIHZpZXcuPGJyLz5cbiAgICAgKiBPbiB3ZWIsIGl0IHJldHVybnMgdGhlIHNpemUgb2YgdGhlIGNhbnZhcyBlbGVtZW50LlxuICAgICAqICEjemgg6L+U5Zue6KeG5Zu+5LitIGNhbnZhcyDnmoTlsLrlr7jjgIJcbiAgICAgKiDlnKggbmF0aXZlIOW5s+WPsOS4i++8jOWug+i/lOWbnuWFqOWxj+inhuWbvuS4i+Wxj+W5leeahOWwuuWvuOOAglxuICAgICAqIOWcqCBXZWIg5bmz5Y+w5LiL77yM5a6D6L+U5ZueIGNhbnZhcyDlhYPntKDlsLrlr7jjgIJcbiAgICAgKiBAbWV0aG9kIGdldENhbnZhc1NpemVcbiAgICAgKiBAcmV0dXJuIHtTaXplfVxuICAgICAqL1xuICAgIGdldENhbnZhc1NpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNjLnNpemUoY2MuZ2FtZS5jYW52YXMud2lkdGgsIGNjLmdhbWUuY2FudmFzLmhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXR1cm5zIHRoZSBmcmFtZSBzaXplIG9mIHRoZSB2aWV3Ljxici8+XG4gICAgICogT24gbmF0aXZlIHBsYXRmb3JtcywgaXQgcmV0dXJucyB0aGUgc2NyZWVuIHNpemUgc2luY2UgdGhlIHZpZXcgaXMgYSBmdWxsc2NyZWVuIHZpZXcuPGJyLz5cbiAgICAgKiBPbiB3ZWIsIGl0IHJldHVybnMgdGhlIHNpemUgb2YgdGhlIGNhbnZhcydzIG91dGVyIERPTSBlbGVtZW50LlxuICAgICAqICEjemgg6L+U5Zue6KeG5Zu+5Lit6L655qGG5bC65a+444CCXG4gICAgICog5ZyoIG5hdGl2ZSDlubPlj7DkuIvvvIzlroPov5Tlm57lhajlsY/op4blm77kuIvlsY/luZXnmoTlsLrlr7jjgIJcbiAgICAgKiDlnKggd2ViIOW5s+WPsOS4i++8jOWug+i/lOWbniBjYW52YXMg5YWD57Sg55qE5aSW5bGCIERPTSDlhYPntKDlsLrlr7jjgIJcbiAgICAgKiBAbWV0aG9kIGdldEZyYW1lU2l6ZVxuICAgICAqIEByZXR1cm4ge1NpemV9XG4gICAgICovXG4gICAgZ2V0RnJhbWVTaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjYy5zaXplKHRoaXMuX2ZyYW1lU2l6ZS53aWR0aCwgdGhpcy5fZnJhbWVTaXplLmhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBPbiBuYXRpdmUsIGl0IHNldHMgdGhlIGZyYW1lIHNpemUgb2Ygdmlldy48YnIvPlxuICAgICAqIE9uIHdlYiwgaXQgc2V0cyB0aGUgc2l6ZSBvZiB0aGUgY2FudmFzJ3Mgb3V0ZXIgRE9NIGVsZW1lbnQuXG4gICAgICogISN6aCDlnKggbmF0aXZlIOW5s+WPsOS4i++8jOiuvue9ruinhuWbvuahhuaetuWwuuWvuOOAglxuICAgICAqIOWcqCB3ZWIg5bmz5Y+w5LiL77yM6K6+572uIGNhbnZhcyDlpJblsYIgRE9NIOWFg+e0oOWwuuWvuOOAglxuICAgICAqIEBtZXRob2Qgc2V0RnJhbWVTaXplXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICAgICAqL1xuICAgIHNldEZyYW1lU2l6ZTogZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5fZnJhbWVTaXplLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuX2ZyYW1lU2l6ZS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGNjLmdhbWUuZnJhbWUuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcbiAgICAgICAgY2MuZ2FtZS5mcmFtZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XG4gICAgICAgIHRoaXMuX3Jlc2l6ZUV2ZW50KHRydWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyB0aGUgdmlzaWJsZSBhcmVhIHNpemUgb2YgdGhlIHZpZXcgcG9ydC5cbiAgICAgKiAhI3poIOi/lOWbnuinhuWbvueql+WPo+WPr+ingeWMuuWfn+WwuuWvuOOAglxuICAgICAqIEBtZXRob2QgZ2V0VmlzaWJsZVNpemVcbiAgICAgKiBAcmV0dXJuIHtTaXplfVxuICAgICAqL1xuICAgIGdldFZpc2libGVTaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjYy5zaXplKHRoaXMuX3Zpc2libGVSZWN0LndpZHRoLHRoaXMuX3Zpc2libGVSZWN0LmhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXR1cm5zIHRoZSB2aXNpYmxlIGFyZWEgc2l6ZSBvZiB0aGUgdmlldyBwb3J0LlxuICAgICAqICEjemgg6L+U5Zue6KeG5Zu+56qX5Y+j5Y+v6KeB5Yy65Z+f5YOP57Sg5bC65a+444CCXG4gICAgICogQG1ldGhvZCBnZXRWaXNpYmxlU2l6ZUluUGl4ZWxcbiAgICAgKiBAcmV0dXJuIHtTaXplfVxuICAgICAqL1xuICAgIGdldFZpc2libGVTaXplSW5QaXhlbDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2Muc2l6ZSggdGhpcy5fdmlzaWJsZVJlY3Qud2lkdGggKiB0aGlzLl9zY2FsZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92aXNpYmxlUmVjdC5oZWlnaHQgKiB0aGlzLl9zY2FsZVkgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgdGhlIHZpc2libGUgb3JpZ2luIG9mIHRoZSB2aWV3IHBvcnQuXG4gICAgICogISN6aCDov5Tlm57op4blm77nqpflj6Plj6/op4HljLrln5/ljp/ngrnjgIJcbiAgICAgKiBAbWV0aG9kIGdldFZpc2libGVPcmlnaW5cbiAgICAgKiBAcmV0dXJuIHtWZWMyfVxuICAgICAqL1xuICAgIGdldFZpc2libGVPcmlnaW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNjLnYyKHRoaXMuX3Zpc2libGVSZWN0LngsdGhpcy5fdmlzaWJsZVJlY3QueSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXR1cm5zIHRoZSB2aXNpYmxlIG9yaWdpbiBvZiB0aGUgdmlldyBwb3J0LlxuICAgICAqICEjemgg6L+U5Zue6KeG5Zu+56qX5Y+j5Y+v6KeB5Yy65Z+f5YOP57Sg5Y6f54K544CCXG4gICAgICogQG1ldGhvZCBnZXRWaXNpYmxlT3JpZ2luSW5QaXhlbFxuICAgICAqIEByZXR1cm4ge1ZlYzJ9XG4gICAgICovXG4gICAgZ2V0VmlzaWJsZU9yaWdpbkluUGl4ZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNjLnYyKHRoaXMuX3Zpc2libGVSZWN0LnggKiB0aGlzLl9zY2FsZVgsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Zpc2libGVSZWN0LnkgKiB0aGlzLl9zY2FsZVkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCByZXNvbHV0aW9uIHBvbGljeVxuICAgICAqICEjemgg6L+U5Zue5b2T5YmN5YiG6L6o546H5pa55qGIXG4gICAgICogQHNlZSBjYy5SZXNvbHV0aW9uUG9saWN5XG4gICAgICogQG1ldGhvZCBnZXRSZXNvbHV0aW9uUG9saWN5XG4gICAgICogQHJldHVybiB7UmVzb2x1dGlvblBvbGljeX1cbiAgICAgKi9cbiAgICBnZXRSZXNvbHV0aW9uUG9saWN5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHV0aW9uUG9saWN5O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2V0cyB0aGUgY3VycmVudCByZXNvbHV0aW9uIHBvbGljeVxuICAgICAqICEjemgg6K6+572u5b2T5YmN5YiG6L6o546H5qih5byPXG4gICAgICogQHNlZSBjYy5SZXNvbHV0aW9uUG9saWN5XG4gICAgICogQG1ldGhvZCBzZXRSZXNvbHV0aW9uUG9saWN5XG4gICAgICogQHBhcmFtIHtSZXNvbHV0aW9uUG9saWN5fE51bWJlcn0gcmVzb2x1dGlvblBvbGljeVxuICAgICAqL1xuICAgIHNldFJlc29sdXRpb25Qb2xpY3k6IGZ1bmN0aW9uIChyZXNvbHV0aW9uUG9saWN5KSB7XG4gICAgICAgIHZhciBfdCA9IHRoaXM7XG4gICAgICAgIGlmIChyZXNvbHV0aW9uUG9saWN5IGluc3RhbmNlb2YgY2MuUmVzb2x1dGlvblBvbGljeSkge1xuICAgICAgICAgICAgX3QuX3Jlc29sdXRpb25Qb2xpY3kgPSByZXNvbHV0aW9uUG9saWN5O1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSBjb21wYXRpYmlsaXR5IHdpdGggSlNCXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIF9sb2NQb2xpY3kgPSBjYy5SZXNvbHV0aW9uUG9saWN5O1xuICAgICAgICAgICAgaWYocmVzb2x1dGlvblBvbGljeSA9PT0gX2xvY1BvbGljeS5FWEFDVF9GSVQpXG4gICAgICAgICAgICAgICAgX3QuX3Jlc29sdXRpb25Qb2xpY3kgPSBfdC5fcnBFeGFjdEZpdDtcbiAgICAgICAgICAgIGlmKHJlc29sdXRpb25Qb2xpY3kgPT09IF9sb2NQb2xpY3kuU0hPV19BTEwpXG4gICAgICAgICAgICAgICAgX3QuX3Jlc29sdXRpb25Qb2xpY3kgPSBfdC5fcnBTaG93QWxsO1xuICAgICAgICAgICAgaWYocmVzb2x1dGlvblBvbGljeSA9PT0gX2xvY1BvbGljeS5OT19CT1JERVIpXG4gICAgICAgICAgICAgICAgX3QuX3Jlc29sdXRpb25Qb2xpY3kgPSBfdC5fcnBOb0JvcmRlcjtcbiAgICAgICAgICAgIGlmKHJlc29sdXRpb25Qb2xpY3kgPT09IF9sb2NQb2xpY3kuRklYRURfSEVJR0hUKVxuICAgICAgICAgICAgICAgIF90Ll9yZXNvbHV0aW9uUG9saWN5ID0gX3QuX3JwRml4ZWRIZWlnaHQ7XG4gICAgICAgICAgICBpZihyZXNvbHV0aW9uUG9saWN5ID09PSBfbG9jUG9saWN5LkZJWEVEX1dJRFRIKVxuICAgICAgICAgICAgICAgIF90Ll9yZXNvbHV0aW9uUG9saWN5ID0gX3QuX3JwRml4ZWRXaWR0aDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2V0cyB0aGUgcmVzb2x1dGlvbiBwb2xpY3kgd2l0aCBkZXNpZ25lZCB2aWV3IHNpemUgaW4gcG9pbnRzLjxici8+XG4gICAgICogVGhlIHJlc29sdXRpb24gcG9saWN5IGluY2x1ZGU6IDxici8+XG4gICAgICogWzFdIFJlc29sdXRpb25FeGFjdEZpdCAgICAgICBGaWxsIHNjcmVlbiBieSBzdHJldGNoLXRvLWZpdDogaWYgdGhlIGRlc2lnbiByZXNvbHV0aW9uIHJhdGlvIG9mIHdpZHRoIHRvIGhlaWdodCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgc2NyZWVuIHJlc29sdXRpb24gcmF0aW8sIHlvdXIgZ2FtZSB2aWV3IHdpbGwgYmUgc3RyZXRjaGVkLjxici8+XG4gICAgICogWzJdIFJlc29sdXRpb25Ob0JvcmRlciAgICAgICBGdWxsIHNjcmVlbiB3aXRob3V0IGJsYWNrIGJvcmRlcjogaWYgdGhlIGRlc2lnbiByZXNvbHV0aW9uIHJhdGlvIG9mIHdpZHRoIHRvIGhlaWdodCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgc2NyZWVuIHJlc29sdXRpb24gcmF0aW8sIHR3byBhcmVhcyBvZiB5b3VyIGdhbWUgdmlldyB3aWxsIGJlIGN1dC48YnIvPlxuICAgICAqIFszXSBSZXNvbHV0aW9uU2hvd0FsbCAgICAgICAgRnVsbCBzY3JlZW4gd2l0aCBibGFjayBib3JkZXI6IGlmIHRoZSBkZXNpZ24gcmVzb2x1dGlvbiByYXRpbyBvZiB3aWR0aCB0byBoZWlnaHQgaXMgZGlmZmVyZW50IGZyb20gdGhlIHNjcmVlbiByZXNvbHV0aW9uIHJhdGlvLCB0d28gYmxhY2sgYm9yZGVycyB3aWxsIGJlIHNob3duLjxici8+XG4gICAgICogWzRdIFJlc29sdXRpb25GaXhlZEhlaWdodCAgICBTY2FsZSB0aGUgY29udGVudCdzIGhlaWdodCB0byBzY3JlZW4ncyBoZWlnaHQgYW5kIHByb3BvcnRpb25hbGx5IHNjYWxlIGl0cyB3aWR0aDxici8+XG4gICAgICogWzVdIFJlc29sdXRpb25GaXhlZFdpZHRoICAgICBTY2FsZSB0aGUgY29udGVudCdzIHdpZHRoIHRvIHNjcmVlbidzIHdpZHRoIGFuZCBwcm9wb3J0aW9uYWxseSBzY2FsZSBpdHMgaGVpZ2h0PGJyLz5cbiAgICAgKiBbY2MuUmVzb2x1dGlvblBvbGljeV0gICAgICAgIFtXZWIgb25seSBmZWF0dXJlXSBDdXN0b20gcmVzb2x1dGlvbiBwb2xpY3ksIGNvbnN0cnVjdGVkIGJ5IGNjLlJlc29sdXRpb25Qb2xpY3k8YnIvPlxuICAgICAqICEjemgg6YCa6L+H6K6+572u6K6+6K6h5YiG6L6o546H5ZKM5Yy56YWN5qih5byP5p2l6L+b6KGM5ri45oiP55S76Z2i55qE5bGP5bmV6YCC6YWN44CCXG4gICAgICogQG1ldGhvZCBzZXREZXNpZ25SZXNvbHV0aW9uU2l6ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCBEZXNpZ24gcmVzb2x1dGlvbiB3aWR0aC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0IERlc2lnbiByZXNvbHV0aW9uIGhlaWdodC5cbiAgICAgKiBAcGFyYW0ge1Jlc29sdXRpb25Qb2xpY3l8TnVtYmVyfSByZXNvbHV0aW9uUG9saWN5IFRoZSByZXNvbHV0aW9uIHBvbGljeSBkZXNpcmVkXG4gICAgICovXG4gICAgc2V0RGVzaWduUmVzb2x1dGlvblNpemU6IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCByZXNvbHV0aW9uUG9saWN5KSB7XG4gICAgICAgIC8vIERlZmVuc2l2ZSBjb2RlXG4gICAgICAgIGlmKCAhKHdpZHRoID4gMCB8fCBoZWlnaHQgPiAwKSApe1xuICAgICAgICAgICAgY2MubG9nSUQoMjIwMCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFJlc29sdXRpb25Qb2xpY3kocmVzb2x1dGlvblBvbGljeSk7XG4gICAgICAgIHZhciBwb2xpY3kgPSB0aGlzLl9yZXNvbHV0aW9uUG9saWN5O1xuICAgICAgICBpZiAocG9saWN5KSB7XG4gICAgICAgICAgICBwb2xpY3kucHJlQXBwbHkodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWluaXQgZnJhbWUgc2l6ZVxuICAgICAgICBpZiAoY2Muc3lzLmlzTW9iaWxlKVxuICAgICAgICAgICAgdGhpcy5fYWRqdXN0Vmlld3BvcnRNZXRhKCk7XG5cbiAgICAgICAgLy8gUGVybWl0IHRvIHJlLWRldGVjdCB0aGUgb3JpZW50YXRpb24gb2YgZGV2aWNlLlxuICAgICAgICB0aGlzLl9vcmllbnRhdGlvbkNoYW5naW5nID0gdHJ1ZTtcbiAgICAgICAgLy8gSWYgcmVzaXppbmcsIHRoZW4gZnJhbWUgc2l6ZSBpcyBhbHJlYWR5IGluaXRpYWxpemVkLCB0aGlzIGxvZ2ljIHNob3VsZCBiZSBpbXByb3ZlZFxuICAgICAgICBpZiAoIXRoaXMuX3Jlc2l6aW5nKVxuICAgICAgICAgICAgdGhpcy5faW5pdEZyYW1lU2l6ZSgpO1xuXG4gICAgICAgIGlmICghcG9saWN5KSB7XG4gICAgICAgICAgICBjYy5sb2dJRCgyMjAxKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX29yaWdpbmFsRGVzaWduUmVzb2x1dGlvblNpemUud2lkdGggPSB0aGlzLl9kZXNpZ25SZXNvbHV0aW9uU2l6ZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLl9vcmlnaW5hbERlc2lnblJlc29sdXRpb25TaXplLmhlaWdodCA9IHRoaXMuX2Rlc2lnblJlc29sdXRpb25TaXplLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gcG9saWN5LmFwcGx5KHRoaXMsIHRoaXMuX2Rlc2lnblJlc29sdXRpb25TaXplKTtcblxuICAgICAgICBpZihyZXN1bHQuc2NhbGUgJiYgcmVzdWx0LnNjYWxlLmxlbmd0aCA9PT0gMil7XG4gICAgICAgICAgICB0aGlzLl9zY2FsZVggPSByZXN1bHQuc2NhbGVbMF07XG4gICAgICAgICAgICB0aGlzLl9zY2FsZVkgPSByZXN1bHQuc2NhbGVbMV07XG4gICAgICAgIH1cblxuICAgICAgICBpZihyZXN1bHQudmlld3BvcnQpe1xuICAgICAgICAgICAgdmFyIHZwID0gdGhpcy5fdmlld3BvcnRSZWN0LFxuICAgICAgICAgICAgICAgIHZiID0gdGhpcy5fdmlzaWJsZVJlY3QsXG4gICAgICAgICAgICAgICAgcnYgPSByZXN1bHQudmlld3BvcnQ7XG5cbiAgICAgICAgICAgIHZwLnggPSBydi54O1xuICAgICAgICAgICAgdnAueSA9IHJ2Lnk7XG4gICAgICAgICAgICB2cC53aWR0aCA9IHJ2LndpZHRoO1xuICAgICAgICAgICAgdnAuaGVpZ2h0ID0gcnYuaGVpZ2h0O1xuXG4gICAgICAgICAgICB2Yi54ID0gMDtcbiAgICAgICAgICAgIHZiLnkgPSAwO1xuICAgICAgICAgICAgdmIud2lkdGggPSBydi53aWR0aCAvIHRoaXMuX3NjYWxlWDtcbiAgICAgICAgICAgIHZiLmhlaWdodCA9IHJ2LmhlaWdodCAvIHRoaXMuX3NjYWxlWTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvbGljeS5wb3N0QXBwbHkodGhpcyk7XG4gICAgICAgIGNjLndpblNpemUud2lkdGggPSB0aGlzLl92aXNpYmxlUmVjdC53aWR0aDtcbiAgICAgICAgY2Mud2luU2l6ZS5oZWlnaHQgPSB0aGlzLl92aXNpYmxlUmVjdC5oZWlnaHQ7XG5cbiAgICAgICAgY2MudmlzaWJsZVJlY3QgJiYgY2MudmlzaWJsZVJlY3QuaW5pdCh0aGlzLl92aXNpYmxlUmVjdCk7XG5cbiAgICAgICAgcmVuZGVyZXIudXBkYXRlQ2FtZXJhVmlld3BvcnQoKTtcbiAgICAgICAgdGhpcy5lbWl0KCdkZXNpZ24tcmVzb2x1dGlvbi1jaGFuZ2VkJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXR1cm5zIHRoZSBkZXNpZ25lZCBzaXplIGZvciB0aGUgdmlldy5cbiAgICAgKiBEZWZhdWx0IHJlc29sdXRpb24gc2l6ZSBpcyB0aGUgc2FtZSBhcyAnZ2V0RnJhbWVTaXplJy5cbiAgICAgKiAhI3poIOi/lOWbnuinhuWbvueahOiuvuiuoeWIhui+qOeOh+OAglxuICAgICAqIOm7mOiupOS4i+WIhui+qOeOh+WwuuWvuOWQjCBgZ2V0RnJhbWVTaXplYCDmlrnms5Xnm7jlkIxcbiAgICAgKiBAbWV0aG9kIGdldERlc2lnblJlc29sdXRpb25TaXplXG4gICAgICogQHJldHVybiB7U2l6ZX1cbiAgICAgKi9cbiAgICBnZXREZXNpZ25SZXNvbHV0aW9uU2l6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2Muc2l6ZSh0aGlzLl9kZXNpZ25SZXNvbHV0aW9uU2l6ZS53aWR0aCwgdGhpcy5fZGVzaWduUmVzb2x1dGlvblNpemUuaGVpZ2h0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFNldHMgdGhlIGNvbnRhaW5lciB0byBkZXNpcmVkIHBpeGVsIHJlc29sdXRpb24gYW5kIGZpdCB0aGUgZ2FtZSBjb250ZW50IHRvIGl0LlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgdmVyeSB1c2VmdWwgZm9yIGFkYXB0YXRpb24gaW4gbW9iaWxlIGJyb3dzZXJzLlxuICAgICAqIEluIHNvbWUgSEQgYW5kcm9pZCBkZXZpY2VzLCB0aGUgcmVzb2x1dGlvbiBpcyB2ZXJ5IGhpZ2gsIGJ1dCBpdHMgYnJvd3NlciBwZXJmb3JtYW5jZSBtYXkgbm90IGJlIHZlcnkgZ29vZC5cbiAgICAgKiBJbiB0aGlzIGNhc2UsIGVuYWJsaW5nIHJldGluYSBkaXNwbGF5IGlzIHZlcnkgY29zdHkgYW5kIG5vdCBzdWdnZXN0ZWQsIGFuZCBpZiByZXRpbmEgaXMgZGlzYWJsZWQsIHRoZSBpbWFnZSBtYXkgYmUgYmx1cnJ5LlxuICAgICAqIEJ1dCB0aGlzIEFQSSBjYW4gYmUgaGVscGZ1bCB0byBzZXQgYSBkZXNpcmVkIHBpeGVsIHJlc29sdXRpb24gd2hpY2ggaXMgaW4gYmV0d2Vlbi5cbiAgICAgKiBUaGlzIEFQSSB3aWxsIGRvIHRoZSBmb2xsb3dpbmc6XG4gICAgICogICAgIDEuIFNldCB2aWV3cG9ydCdzIHdpZHRoIHRvIHRoZSBkZXNpcmVkIHdpZHRoIGluIHBpeGVsXG4gICAgICogICAgIDIuIFNldCBib2R5IHdpZHRoIHRvIHRoZSBleGFjdCBwaXhlbCByZXNvbHV0aW9uXG4gICAgICogICAgIDMuIFRoZSByZXNvbHV0aW9uIHBvbGljeSB3aWxsIGJlIHJlc2V0IHdpdGggZGVzaWduZWQgdmlldyBzaXplIGluIHBvaW50cy5cbiAgICAgKiAhI3poIOiuvue9ruWuueWZqO+8iGNvbnRhaW5lcu+8iemcgOimgeeahOWDj+e0oOWIhui+qOeOh+W5tuS4lOmAgumFjeebuOW6lOWIhui+qOeOh+eahOa4uOaIj+WGheWuueOAglxuICAgICAqIEBtZXRob2Qgc2V0UmVhbFBpeGVsUmVzb2x1dGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCBEZXNpZ24gcmVzb2x1dGlvbiB3aWR0aC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0IERlc2lnbiByZXNvbHV0aW9uIGhlaWdodC5cbiAgICAgKiBAcGFyYW0ge1Jlc29sdXRpb25Qb2xpY3l8TnVtYmVyfSByZXNvbHV0aW9uUG9saWN5IFRoZSByZXNvbHV0aW9uIHBvbGljeSBkZXNpcmVkXG4gICAgICovXG4gICAgc2V0UmVhbFBpeGVsUmVzb2x1dGlvbjogZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJlc29sdXRpb25Qb2xpY3kpIHtcbiAgICAgICAgLy8gTk9URTogbm90IG1lcmdlIGludG8gdjIuMi4wLCBtb3ZlIGludG8gQWxpcGF5IGFkYXB0ZXJcbiAgICAgICAgaWYgKCFDQ19KU0IgJiYgIUNDX1JVTlRJTUUgJiYgIUNDX1dFQ0hBVEdBTUUgJiYgIUNDX1FRUExBWSAmJiAhaXNCYWlkdUdhbWUgJiYgIWlzWGlhb21pR2FtZSAmJiAhaXNBbGlwYXlHYW1lKSB7XG4gICAgICAgICAgICAvLyBTZXQgdmlld3BvcnQncyB3aWR0aFxuICAgICAgICAgICAgdGhpcy5fc2V0Vmlld3BvcnRNZXRhKHtcIndpZHRoXCI6IHdpZHRofSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIFNldCBib2R5IHdpZHRoIHRvIHRoZSBleGFjdCBwaXhlbCByZXNvbHV0aW9uXG4gICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnRvcCA9IFwiMHB4XCI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXNldCB0aGUgcmVzb2x1dGlvbiBzaXplIGFuZCBwb2xpY3lcbiAgICAgICAgdGhpcy5zZXREZXNpZ25SZXNvbHV0aW9uU2l6ZSh3aWR0aCwgaGVpZ2h0LCByZXNvbHV0aW9uUG9saWN5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFNldHMgdmlldyBwb3J0IHJlY3RhbmdsZSB3aXRoIHBvaW50cy5cbiAgICAgKiAhI3poIOeUqOiuvuiuoeWIhui+qOeOh+S4i+eahOeCueWwuuWvuOadpeiuvue9ruinhueql+OAglxuICAgICAqIEBtZXRob2Qgc2V0Vmlld3BvcnRJblBvaW50c1xuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHYyLjBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHcgd2lkdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaCBoZWlnaHRcbiAgICAgKi9cbiAgICBzZXRWaWV3cG9ydEluUG9pbnRzOiBmdW5jdGlvbiAoeCwgeSwgdywgaCkge1xuICAgICAgICB2YXIgbG9jU2NhbGVYID0gdGhpcy5fc2NhbGVYLCBsb2NTY2FsZVkgPSB0aGlzLl9zY2FsZVk7XG4gICAgICAgIGNjLmdhbWUuX3JlbmRlckNvbnRleHQudmlld3BvcnQoKHggKiBsb2NTY2FsZVggKyB0aGlzLl92aWV3cG9ydFJlY3QueCksXG4gICAgICAgICAgICAoeSAqIGxvY1NjYWxlWSArIHRoaXMuX3ZpZXdwb3J0UmVjdC55KSxcbiAgICAgICAgICAgICh3ICogbG9jU2NhbGVYKSxcbiAgICAgICAgICAgIChoICogbG9jU2NhbGVZKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXRzIFNjaXNzb3IgcmVjdGFuZ2xlIHdpdGggcG9pbnRzLlxuICAgICAqICEjemgg55So6K6+6K6h5YiG6L6o546H5LiL55qE54K555qE5bC65a+45p2l6K6+572uIHNjaXNzb3Ig5Ymq6KOB5Yy65Z+f44CCXG4gICAgICogQG1ldGhvZCBzZXRTY2lzc29ySW5Qb2ludHNcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2Mi4wXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhcbiAgICAgKi9cbiAgICBzZXRTY2lzc29ySW5Qb2ludHM6IGZ1bmN0aW9uICh4LCB5LCB3LCBoKSB7XG4gICAgICAgIGxldCBzY2FsZVggPSB0aGlzLl9zY2FsZVgsIHNjYWxlWSA9IHRoaXMuX3NjYWxlWTtcbiAgICAgICAgbGV0IHN4ID0gTWF0aC5jZWlsKHggKiBzY2FsZVggKyB0aGlzLl92aWV3cG9ydFJlY3QueCk7XG4gICAgICAgIGxldCBzeSA9IE1hdGguY2VpbCh5ICogc2NhbGVZICsgdGhpcy5fdmlld3BvcnRSZWN0LnkpO1xuICAgICAgICBsZXQgc3cgPSBNYXRoLmNlaWwodyAqIHNjYWxlWCk7XG4gICAgICAgIGxldCBzaCA9IE1hdGguY2VpbChoICogc2NhbGVZKTtcbiAgICAgICAgbGV0IGdsID0gY2MuZ2FtZS5fcmVuZGVyQ29udGV4dDtcblxuICAgICAgICBpZiAoIV9zY2lzc29yUmVjdCkge1xuICAgICAgICAgICAgdmFyIGJveEFyciA9IGdsLmdldFBhcmFtZXRlcihnbC5TQ0lTU09SX0JPWCk7XG4gICAgICAgICAgICBfc2Npc3NvclJlY3QgPSBjYy5yZWN0KGJveEFyclswXSwgYm94QXJyWzFdLCBib3hBcnJbMl0sIGJveEFyclszXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3NjaXNzb3JSZWN0LnggIT09IHN4IHx8IF9zY2lzc29yUmVjdC55ICE9PSBzeSB8fCBfc2Npc3NvclJlY3Qud2lkdGggIT09IHN3IHx8IF9zY2lzc29yUmVjdC5oZWlnaHQgIT09IHNoKSB7XG4gICAgICAgICAgICBfc2Npc3NvclJlY3QueCA9IHN4O1xuICAgICAgICAgICAgX3NjaXNzb3JSZWN0LnkgPSBzeTtcbiAgICAgICAgICAgIF9zY2lzc29yUmVjdC53aWR0aCA9IHN3O1xuICAgICAgICAgICAgX3NjaXNzb3JSZWN0LmhlaWdodCA9IHNoO1xuICAgICAgICAgICAgZ2wuc2Npc3NvcihzeCwgc3ksIHN3LCBzaCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgd2hldGhlciBHTF9TQ0lTU09SX1RFU1QgaXMgZW5hYmxlXG4gICAgICogISN6aCDmo4Dmn6Ugc2Npc3NvciDmmK/lkKbnlJ/mlYjjgIJcbiAgICAgKiBAbWV0aG9kIGlzU2Npc3NvckVuYWJsZWRcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2Mi4wXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc1NjaXNzb3JFbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjYy5nYW1lLl9yZW5kZXJDb250ZXh0LmlzRW5hYmxlZChnbC5TQ0lTU09SX1RFU1QpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBzY2lzc29yIHJlY3RhbmdsZVxuICAgICAqICEjemgg6L+U5Zue5b2T5YmN55qEIHNjaXNzb3Ig5Ymq6KOB5Yy65Z+f44CCXG4gICAgICogQG1ldGhvZCBnZXRTY2lzc29yUmVjdFxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHYyLjBcbiAgICAgKiBAcmV0dXJuIHtSZWN0fVxuICAgICAqL1xuICAgIGdldFNjaXNzb3JSZWN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX3NjaXNzb3JSZWN0KSB7XG4gICAgICAgICAgICB2YXIgYm94QXJyID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLlNDSVNTT1JfQk9YKTtcbiAgICAgICAgICAgIF9zY2lzc29yUmVjdCA9IGNjLnJlY3QoYm94QXJyWzBdLCBib3hBcnJbMV0sIGJveEFyclsyXSwgYm94QXJyWzNdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NhbGVYRmFjdG9yID0gMSAvIHRoaXMuX3NjYWxlWDtcbiAgICAgICAgdmFyIHNjYWxlWUZhY3RvciA9IDEgLyB0aGlzLl9zY2FsZVk7XG4gICAgICAgIHJldHVybiBjYy5yZWN0KFxuICAgICAgICAgICAgKF9zY2lzc29yUmVjdC54IC0gdGhpcy5fdmlld3BvcnRSZWN0LngpICogc2NhbGVYRmFjdG9yLFxuICAgICAgICAgICAgKF9zY2lzc29yUmVjdC55IC0gdGhpcy5fdmlld3BvcnRSZWN0LnkpICogc2NhbGVZRmFjdG9yLFxuICAgICAgICAgICAgX3NjaXNzb3JSZWN0LndpZHRoICogc2NhbGVYRmFjdG9yLFxuICAgICAgICAgICAgX3NjaXNzb3JSZWN0LmhlaWdodCAqIHNjYWxlWUZhY3RvclxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyB0aGUgdmlldyBwb3J0IHJlY3RhbmdsZS5cbiAgICAgKiAhI3poIOi/lOWbnuinhueql+WJquijgeWMuuWfn+OAglxuICAgICAqIEBtZXRob2QgZ2V0Vmlld3BvcnRSZWN0XG4gICAgICogQHJldHVybiB7UmVjdH1cbiAgICAgKi9cbiAgICBnZXRWaWV3cG9ydFJlY3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXdwb3J0UmVjdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgc2NhbGUgZmFjdG9yIG9mIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbiAoWCBheGlzKS5cbiAgICAgKiAhI3poIOi/lOWbnuaoqui9tOeahOe8qeaUvuavlO+8jOi/meS4que8qeaUvuavlOaYr+WwhueUu+W4g+WDj+e0oOWIhui+qOeOh+aUvuWIsOiuvuiuoeWIhui+qOeOh+eahOavlOS+i+OAglxuICAgICAqIEBtZXRob2QgZ2V0U2NhbGVYXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldFNjYWxlWDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGVYO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyBzY2FsZSBmYWN0b3Igb2YgdGhlIHZlcnRpY2FsIGRpcmVjdGlvbiAoWSBheGlzKS5cbiAgICAgKiAhI3poIOi/lOWbnue6tei9tOeahOe8qeaUvuavlO+8jOi/meS4que8qeaUvuavlOaYr+WwhueUu+W4g+WDj+e0oOWIhui+qOeOh+e8qeaUvuWIsOiuvuiuoeWIhui+qOeOh+eahOavlOS+i+OAglxuICAgICAqIEBtZXRob2QgZ2V0U2NhbGVZXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldFNjYWxlWTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGVZO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyBkZXZpY2UgcGl4ZWwgcmF0aW8gZm9yIHJldGluYSBkaXNwbGF5LlxuICAgICAqICEjemgg6L+U5Zue6K6+5aSH5oiW5rWP6KeI5Zmo5YOP57Sg5q+U5L6L44CCXG4gICAgICogQG1ldGhvZCBnZXREZXZpY2VQaXhlbFJhdGlvXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldERldmljZVBpeGVsUmF0aW86IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGV2aWNlUGl4ZWxSYXRpbztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgdGhlIHJlYWwgbG9jYXRpb24gaW4gdmlldyBmb3IgYSB0cmFuc2xhdGlvbiBiYXNlZCBvbiBhIHJlbGF0ZWQgcG9zaXRpb25cbiAgICAgKiAhI3poIOWwhuWxj+W5leWdkOagh+i9rOaNouS4uua4uOaIj+inhuWbvuS4i+eahOWdkOagh+OAglxuICAgICAqIEBtZXRob2QgY29udmVydFRvTG9jYXRpb25JblZpZXdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdHggLSBUaGUgWCBheGlzIHRyYW5zbGF0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHR5IC0gVGhlIFkgYXhpcyB0cmFuc2xhdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWxhdGVkUG9zIC0gVGhlIHJlbGF0ZWQgcG9zaXRpb24gb2JqZWN0IGluY2x1ZGluZyBcImxlZnRcIiwgXCJ0b3BcIiwgXCJ3aWR0aFwiLCBcImhlaWdodFwiIGluZm9ybWF0aW9uc1xuICAgICAqIEByZXR1cm4ge1ZlYzJ9XG4gICAgICovXG4gICAgY29udmVydFRvTG9jYXRpb25JblZpZXc6IGZ1bmN0aW9uICh0eCwgdHksIHJlbGF0ZWRQb3MsIG91dCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gb3V0IHx8IGNjLnYyKCk7XG4gICAgICAgIGxldCB4ID0gdGhpcy5fZGV2aWNlUGl4ZWxSYXRpbyAqICh0eCAtIHJlbGF0ZWRQb3MubGVmdCk7XG4gICAgICAgIGxldCB5ID0gdGhpcy5fZGV2aWNlUGl4ZWxSYXRpbyAqIChyZWxhdGVkUG9zLnRvcCArIHJlbGF0ZWRQb3MuaGVpZ2h0IC0gdHkpO1xuICAgICAgICBpZiAodGhpcy5faXNSb3RhdGVkKSB7XG4gICAgICAgICAgICByZXN1bHQueCA9IGNjLmdhbWUuY2FudmFzLndpZHRoIC0geTtcbiAgICAgICAgICAgIHJlc3VsdC55ID0geDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC54ID0geDtcbiAgICAgICAgICAgIHJlc3VsdC55ID0geTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBfY29udmVydE1vdXNlVG9Mb2NhdGlvbkluVmlldzogZnVuY3Rpb24gKGluX291dF9wb2ludCwgcmVsYXRlZFBvcykge1xuICAgICAgICB2YXIgdmlld3BvcnQgPSB0aGlzLl92aWV3cG9ydFJlY3QsIF90ID0gdGhpcztcbiAgICAgICAgaW5fb3V0X3BvaW50LnggPSAoKF90Ll9kZXZpY2VQaXhlbFJhdGlvICogKGluX291dF9wb2ludC54IC0gcmVsYXRlZFBvcy5sZWZ0KSkgLSB2aWV3cG9ydC54KSAvIF90Ll9zY2FsZVg7XG4gICAgICAgIGluX291dF9wb2ludC55ID0gKF90Ll9kZXZpY2VQaXhlbFJhdGlvICogKHJlbGF0ZWRQb3MudG9wICsgcmVsYXRlZFBvcy5oZWlnaHQgLSBpbl9vdXRfcG9pbnQueSkgLSB2aWV3cG9ydC55KSAvIF90Ll9zY2FsZVk7XG4gICAgfSxcblxuICAgIF9jb252ZXJ0UG9pbnRXaXRoU2NhbGU6IGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICB2YXIgdmlld3BvcnQgPSB0aGlzLl92aWV3cG9ydFJlY3Q7XG4gICAgICAgIHBvaW50LnggPSAocG9pbnQueCAtIHZpZXdwb3J0LngpIC8gdGhpcy5fc2NhbGVYO1xuICAgICAgICBwb2ludC55ID0gKHBvaW50LnkgLSB2aWV3cG9ydC55KSAvIHRoaXMuX3NjYWxlWTtcbiAgICB9LFxuXG4gICAgX2NvbnZlcnRUb3VjaGVzV2l0aFNjYWxlOiBmdW5jdGlvbiAodG91Y2hlcykge1xuICAgICAgICB2YXIgdmlld3BvcnQgPSB0aGlzLl92aWV3cG9ydFJlY3QsIHNjYWxlWCA9IHRoaXMuX3NjYWxlWCwgc2NhbGVZID0gdGhpcy5fc2NhbGVZLFxuICAgICAgICAgICAgc2VsVG91Y2gsIHNlbFBvaW50LCBzZWxQcmVQb2ludDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzZWxUb3VjaCA9IHRvdWNoZXNbaV07XG4gICAgICAgICAgICBzZWxQb2ludCA9IHNlbFRvdWNoLl9wb2ludDtcbiAgICAgICAgICAgIHNlbFByZVBvaW50ID0gc2VsVG91Y2guX3ByZXZQb2ludDtcblxuICAgICAgICAgICAgc2VsUG9pbnQueCA9IChzZWxQb2ludC54IC0gdmlld3BvcnQueCkgLyBzY2FsZVg7XG4gICAgICAgICAgICBzZWxQb2ludC55ID0gKHNlbFBvaW50LnkgLSB2aWV3cG9ydC55KSAvIHNjYWxlWTtcbiAgICAgICAgICAgIHNlbFByZVBvaW50LnggPSAoc2VsUHJlUG9pbnQueCAtIHZpZXdwb3J0LngpIC8gc2NhbGVYO1xuICAgICAgICAgICAgc2VsUHJlUG9pbnQueSA9IChzZWxQcmVQb2ludC55IC0gdmlld3BvcnQueSkgLyBzY2FsZVk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqXG4gKiAhZW5cbiAqIEVtaXQgd2hlbiBkZXNpZ24gcmVzb2x1dGlvbiBjaGFuZ2VkLlxuICogIXpoXG4gKiDlvZPorr7orqHliIbovqjnjofmlLnlj5jml7blj5HpgIHjgIJcbiAqIEBldmVudCBkZXNpZ24tcmVzb2x1dGlvbi1jaGFuZ2VkXG4gKi9cbiAvKipcbiAqICFlblxuICogRW1pdCB3aGVuIGNhbnZhcyByZXNpemUuXG4gKiAhemhcbiAqIOW9k+eUu+W4g+Wkp+Wwj+aUueWPmOaXtuWPkemAgeOAglxuICogQGV2ZW50IGNhbnZhcy1yZXNpemVcbiAqL1xuXG5cbi8qKlxuICogPHA+Y2MuZ2FtZS5jb250YWluZXJTdHJhdGVneSBjbGFzcyBpcyB0aGUgcm9vdCBzdHJhdGVneSBjbGFzcyBvZiBjb250YWluZXIncyBzY2FsZSBzdHJhdGVneSxcbiAqIGl0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBob3cgdG8gc2NhbGUgdGhlIGNjLmdhbWUuY29udGFpbmVyIGFuZCBjYy5nYW1lLmNhbnZhcyBvYmplY3Q8L3A+XG4gKlxuICogQGNsYXNzIENvbnRhaW5lclN0cmF0ZWd5XG4gKi9cbmNjLkNvbnRhaW5lclN0cmF0ZWd5ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6IFwiQ29udGFpbmVyU3RyYXRlZ3lcIixcbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogTWFuaXB1bGF0aW9uIGJlZm9yZSBhcHBsaW5nIHRoZSBzdHJhdGVneVxuICAgICAqICEjemgg5Zyo5bqU55So562W55Wl5LmL5YmN55qE5pON5L2cXG4gICAgICogQG1ldGhvZCBwcmVBcHBseVxuICAgICAqIEBwYXJhbSB7Vmlld30gdmlldyAtIFRoZSB0YXJnZXQgdmlld1xuICAgICAqL1xuICAgIHByZUFwcGx5OiBmdW5jdGlvbiAodmlldykge1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogRnVuY3Rpb24gdG8gYXBwbHkgdGhpcyBzdHJhdGVneVxuICAgICAqICEjemgg562W55Wl5bqU55So5pa55rOVXG4gICAgICogQG1ldGhvZCBhcHBseVxuICAgICAqIEBwYXJhbSB7Vmlld30gdmlld1xuICAgICAqIEBwYXJhbSB7U2l6ZX0gZGVzaWduZWRSZXNvbHV0aW9uXG4gICAgICovXG4gICAgYXBwbHk6IGZ1bmN0aW9uICh2aWV3LCBkZXNpZ25lZFJlc29sdXRpb24pIHtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIE1hbmlwdWxhdGlvbiBhZnRlciBhcHBseWluZyB0aGUgc3RyYXRlZ3lcbiAgICAgKiAhI3poIOetlueVpeiwg+eUqOS5i+WQjueahOaTjeS9nFxuICAgICAqIEBtZXRob2QgcG9zdEFwcGx5XG4gICAgICogQHBhcmFtIHtWaWV3fSB2aWV3ICBUaGUgdGFyZ2V0IHZpZXdcbiAgICAgKi9cbiAgICBwb3N0QXBwbHk6IGZ1bmN0aW9uICh2aWV3KSB7XG5cbiAgICB9LFxuXG4gICAgX3NldHVwQ29udGFpbmVyOiBmdW5jdGlvbiAodmlldywgdywgaCkge1xuICAgICAgICB2YXIgbG9jQ2FudmFzID0gY2MuZ2FtZS5jYW52YXMsIGxvY0NvbnRhaW5lciA9IGNjLmdhbWUuY29udGFpbmVyO1xuXG4gICAgICAgIC8vIE5PVEU6IG5vdCBtZXJnZSBpbnRvIHYyLjIuMCwgbW92ZSBpbnRvIEFsaXBheSBhZGFwdGVyXG4gICAgICAgIGlmICghQ0NfV0VDSEFUR0FNRSAmJiAhaXNCYWlkdUdhbWUgJiYgIWlzWGlhb21pR2FtZSAmJiAhaXNBbGlwYXlHYW1lKSB7XG4gICAgICAgICAgICBpZiAoY2Muc3lzLm9zID09PSBjYy5zeXMuT1NfQU5EUk9JRCkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUud2lkdGggPSAodmlldy5faXNSb3RhdGVkID8gaCA6IHcpICsgJ3B4JztcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmhlaWdodCA9ICh2aWV3Ll9pc1JvdGF0ZWQgPyB3IDogaCkgKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2V0dXAgc3R5bGVcbiAgICAgICAgICAgIGxvY0NvbnRhaW5lci5zdHlsZS53aWR0aCA9IGxvY0NhbnZhcy5zdHlsZS53aWR0aCA9IHcgKyAncHgnO1xuICAgICAgICAgICAgbG9jQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGxvY0NhbnZhcy5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JztcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXR1cCBwaXhlbCByYXRpbyBmb3IgcmV0aW5hIGRpc3BsYXlcbiAgICAgICAgdmFyIGRldmljZVBpeGVsUmF0aW8gPSB2aWV3Ll9kZXZpY2VQaXhlbFJhdGlvID0gMTtcbiAgICAgICAgaWYgKHZpZXcuaXNSZXRpbmFFbmFibGVkKCkpXG4gICAgICAgICAgICBkZXZpY2VQaXhlbFJhdGlvID0gdmlldy5fZGV2aWNlUGl4ZWxSYXRpbyA9IE1hdGgubWluKHZpZXcuX21heFBpeGVsUmF0aW8sIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpO1xuICAgICAgICAvLyBTZXR1cCBjYW52YXNcbiAgICAgICAgbG9jQ2FudmFzLndpZHRoID0gdyAqIGRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIGxvY0NhbnZhcy5oZWlnaHQgPSBoICogZGV2aWNlUGl4ZWxSYXRpbztcbiAgICB9LFxuXG4gICAgX2ZpeENvbnRhaW5lcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBBZGQgY29udGFpbmVyIHRvIGRvY3VtZW50IGJvZHlcbiAgICAgICAgZG9jdW1lbnQuYm9keS5pbnNlcnRCZWZvcmUoY2MuZ2FtZS5jb250YWluZXIsIGRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZCk7XG4gICAgICAgIC8vIFNldCBib2R5J3Mgd2lkdGggaGVpZ2h0IHRvIHdpbmRvdydzIHNpemUsIGFuZCBmb3JiaWQgb3ZlcmZsb3csIHNvIHRoYXQgZ2FtZSB3aWxsIGJlIGNlbnRlcmVkXG4gICAgICAgIHZhciBicyA9IGRvY3VtZW50LmJvZHkuc3R5bGU7XG4gICAgICAgIGJzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGggKyBcInB4XCI7XG4gICAgICAgIGJzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCArIFwicHhcIjtcbiAgICAgICAgYnMub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgICAgICAvLyBCb2R5IHNpemUgc29sdXRpb24gZG9lc24ndCB3b3JrIG9uIGFsbCBtb2JpbGUgYnJvd3NlciBzbyB0aGlzIGlzIHRoZSBhbGV0ZXJuYXRpdmU6IGZpeGVkIGNvbnRhaW5lclxuICAgICAgICB2YXIgY29udFN0eWxlID0gY2MuZ2FtZS5jb250YWluZXIuc3R5bGU7XG4gICAgICAgIGNvbnRTdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgICAgICAgY29udFN0eWxlLmxlZnQgPSBjb250U3R5bGUudG9wID0gXCIwcHhcIjtcbiAgICAgICAgLy8gUmVwb3NpdGlvbiBib2R5XG4gICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gMDtcbiAgICB9XG59KTtcblxuLyoqXG4gKiA8cD5jYy5Db250ZW50U3RyYXRlZ3kgY2xhc3MgaXMgdGhlIHJvb3Qgc3RyYXRlZ3kgY2xhc3Mgb2YgY29udGVudCdzIHNjYWxlIHN0cmF0ZWd5LFxuICogaXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIGhvdyB0byBzY2FsZSB0aGUgc2NlbmUgYW5kIHNldHVwIHRoZSB2aWV3cG9ydCBmb3IgdGhlIGdhbWU8L3A+XG4gKlxuICogQGNsYXNzIENvbnRlbnRTdHJhdGVneVxuICovXG5jYy5Db250ZW50U3RyYXRlZ3kgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogXCJDb250ZW50U3RyYXRlZ3lcIixcblxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcmVzdWx0ID0ge1xuICAgICAgICAgICAgc2NhbGU6IFsxLCAxXSxcbiAgICAgICAgICAgIHZpZXdwb3J0OiBudWxsXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIF9idWlsZFJlc3VsdDogZnVuY3Rpb24gKGNvbnRhaW5lclcsIGNvbnRhaW5lckgsIGNvbnRlbnRXLCBjb250ZW50SCwgc2NhbGVYLCBzY2FsZVkpIHtcbiAgICAgICAgLy8gTWFrZXMgY29udGVudCBmaXQgYmV0dGVyIHRoZSBjYW52YXNcbiAgICAgICAgTWF0aC5hYnMoY29udGFpbmVyVyAtIGNvbnRlbnRXKSA8IDIgJiYgKGNvbnRlbnRXID0gY29udGFpbmVyVyk7XG4gICAgICAgIE1hdGguYWJzKGNvbnRhaW5lckggLSBjb250ZW50SCkgPCAyICYmIChjb250ZW50SCA9IGNvbnRhaW5lckgpO1xuXG4gICAgICAgIHZhciB2aWV3cG9ydCA9IGNjLnJlY3QoKGNvbnRhaW5lclcgLSBjb250ZW50VykgLyAyLCAoY29udGFpbmVySCAtIGNvbnRlbnRIKSAvIDIsIGNvbnRlbnRXLCBjb250ZW50SCk7XG5cbiAgICAgICAgLy8gVHJhbnNsYXRlIHRoZSBjb250ZW50XG4gICAgICAgIGlmIChjYy5nYW1lLnJlbmRlclR5cGUgPT09IGNjLmdhbWUuUkVOREVSX1RZUEVfQ0FOVkFTKXtcbiAgICAgICAgICAgIC8vVE9ETzogbW9kaWZ5IHNvbWV0aGluZyBmb3Igc2V0VHJhbnNmb3JtXG4gICAgICAgICAgICAvL2NjLmdhbWUuX3JlbmRlckNvbnRleHQudHJhbnNsYXRlKHZpZXdwb3J0LngsIHZpZXdwb3J0LnkgKyBjb250ZW50SCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZXN1bHQuc2NhbGUgPSBbc2NhbGVYLCBzY2FsZVldO1xuICAgICAgICB0aGlzLl9yZXN1bHQudmlld3BvcnQgPSB2aWV3cG9ydDtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIE1hbmlwdWxhdGlvbiBiZWZvcmUgYXBwbHlpbmcgdGhlIHN0cmF0ZWd5XG4gICAgICogISN6aCDnrZbnlaXlupTnlKjliY3nmoTmk43kvZxcbiAgICAgKiBAbWV0aG9kIHByZUFwcGx5XG4gICAgICogQHBhcmFtIHtWaWV3fSB2aWV3IC0gVGhlIHRhcmdldCB2aWV3XG4gICAgICovXG4gICAgcHJlQXBwbHk6IGZ1bmN0aW9uICh2aWV3KSB7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gRnVuY3Rpb24gdG8gYXBwbHkgdGhpcyBzdHJhdGVneVxuICAgICAqIFRoZSByZXR1cm4gdmFsdWUgaXMge3NjYWxlOiBbc2NhbGVYLCBzY2FsZVldLCB2aWV3cG9ydDoge2NjLlJlY3R9fSxcbiAgICAgKiBUaGUgdGFyZ2V0IHZpZXcgY2FuIHRoZW4gYXBwbHkgdGhlc2UgdmFsdWUgdG8gaXRzZWxmLCBpdCdzIHByZWZlcnJlZCBub3QgdG8gbW9kaWZ5IGRpcmVjdGx5IGl0cyBwcml2YXRlIHZhcmlhYmxlc1xuICAgICAqICEjemgg6LCD55So562W55Wl5pa55rOVXG4gICAgICogQG1ldGhvZCBhcHBseVxuICAgICAqIEBwYXJhbSB7Vmlld30gdmlld1xuICAgICAqIEBwYXJhbSB7U2l6ZX0gZGVzaWduZWRSZXNvbHV0aW9uXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBzY2FsZUFuZFZpZXdwb3J0UmVjdFxuICAgICAqL1xuICAgIGFwcGx5OiBmdW5jdGlvbiAodmlldywgZGVzaWduZWRSZXNvbHV0aW9uKSB7XG4gICAgICAgIHJldHVybiB7XCJzY2FsZVwiOiBbMSwgMV19O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogTWFuaXB1bGF0aW9uIGFmdGVyIGFwcGx5aW5nIHRoZSBzdHJhdGVneVxuICAgICAqICEjemgg562W55Wl6LCD55So5LmL5ZCO55qE5pON5L2cXG4gICAgICogQG1ldGhvZCBwb3N0QXBwbHlcbiAgICAgKiBAcGFyYW0ge1ZpZXd9IHZpZXcgLSBUaGUgdGFyZ2V0IHZpZXdcbiAgICAgKi9cbiAgICBwb3N0QXBwbHk6IGZ1bmN0aW9uICh2aWV3KSB7XG4gICAgfVxufSk7XG5cbihmdW5jdGlvbiAoKSB7XG5cbi8vIENvbnRhaW5lciBzY2FsZSBzdHJhdGVneXNcbiAgICAvKipcbiAgICAgKiBAY2xhc3MgRXF1YWxUb0ZyYW1lXG4gICAgICogQGV4dGVuZHMgQ29udGFpbmVyU3RyYXRlZ3lcbiAgICAgKi9cbiAgICB2YXIgRXF1YWxUb0ZyYW1lID0gY2MuQ2xhc3Moe1xuICAgICAgICBuYW1lOiBcIkVxdWFsVG9GcmFtZVwiLFxuICAgICAgICBleHRlbmRzOiBjYy5Db250YWluZXJTdHJhdGVneSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uICh2aWV3KSB7XG4gICAgICAgICAgICB2YXIgZnJhbWVIID0gdmlldy5fZnJhbWVTaXplLmhlaWdodCwgY29udGFpbmVyU3R5bGUgPSBjYy5nYW1lLmNvbnRhaW5lci5zdHlsZTtcbiAgICAgICAgICAgIHRoaXMuX3NldHVwQ29udGFpbmVyKHZpZXcsIHZpZXcuX2ZyYW1lU2l6ZS53aWR0aCwgdmlldy5fZnJhbWVTaXplLmhlaWdodCk7XG4gICAgICAgICAgICAvLyBTZXR1cCBjb250YWluZXIncyBtYXJnaW4gYW5kIHBhZGRpbmdcbiAgICAgICAgICAgIGlmICh2aWV3Ll9pc1JvdGF0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXJTdHlsZS5tYXJnaW4gPSAnMCAwIDAgJyArIGZyYW1lSCArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXJTdHlsZS5tYXJnaW4gPSAnMHB4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLnBhZGRpbmcgPSBcIjBweFwiO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgUHJvcG9ydGlvbmFsVG9GcmFtZVxuICAgICAqIEBleHRlbmRzIENvbnRhaW5lclN0cmF0ZWd5XG4gICAgICovXG4gICAgdmFyIFByb3BvcnRpb25hbFRvRnJhbWUgPSBjYy5DbGFzcyh7XG4gICAgICAgIG5hbWU6IFwiUHJvcG9ydGlvbmFsVG9GcmFtZVwiLFxuICAgICAgICBleHRlbmRzOiBjYy5Db250YWluZXJTdHJhdGVneSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uICh2aWV3LCBkZXNpZ25lZFJlc29sdXRpb24pIHtcbiAgICAgICAgICAgIHZhciBmcmFtZVcgPSB2aWV3Ll9mcmFtZVNpemUud2lkdGgsIGZyYW1lSCA9IHZpZXcuX2ZyYW1lU2l6ZS5oZWlnaHQsIGNvbnRhaW5lclN0eWxlID0gY2MuZ2FtZS5jb250YWluZXIuc3R5bGUsXG4gICAgICAgICAgICAgICAgZGVzaWduVyA9IGRlc2lnbmVkUmVzb2x1dGlvbi53aWR0aCwgZGVzaWduSCA9IGRlc2lnbmVkUmVzb2x1dGlvbi5oZWlnaHQsXG4gICAgICAgICAgICAgICAgc2NhbGVYID0gZnJhbWVXIC8gZGVzaWduVywgc2NhbGVZID0gZnJhbWVIIC8gZGVzaWduSCxcbiAgICAgICAgICAgICAgICBjb250YWluZXJXLCBjb250YWluZXJIO1xuXG4gICAgICAgICAgICBzY2FsZVggPCBzY2FsZVkgPyAoY29udGFpbmVyVyA9IGZyYW1lVywgY29udGFpbmVySCA9IGRlc2lnbkggKiBzY2FsZVgpIDogKGNvbnRhaW5lclcgPSBkZXNpZ25XICogc2NhbGVZLCBjb250YWluZXJIID0gZnJhbWVIKTtcblxuICAgICAgICAgICAgLy8gQWRqdXN0IGNvbnRhaW5lciBzaXplIHdpdGggaW50ZWdlciB2YWx1ZVxuICAgICAgICAgICAgdmFyIG9mZnggPSBNYXRoLnJvdW5kKChmcmFtZVcgLSBjb250YWluZXJXKSAvIDIpO1xuICAgICAgICAgICAgdmFyIG9mZnkgPSBNYXRoLnJvdW5kKChmcmFtZUggLSBjb250YWluZXJIKSAvIDIpO1xuICAgICAgICAgICAgY29udGFpbmVyVyA9IGZyYW1lVyAtIDIgKiBvZmZ4O1xuICAgICAgICAgICAgY29udGFpbmVySCA9IGZyYW1lSCAtIDIgKiBvZmZ5O1xuXG4gICAgICAgICAgICB0aGlzLl9zZXR1cENvbnRhaW5lcih2aWV3LCBjb250YWluZXJXLCBjb250YWluZXJIKTtcbiAgICAgICAgICAgIGlmICghQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICAgICAgLy8gU2V0dXAgY29udGFpbmVyJ3MgbWFyZ2luIGFuZCBwYWRkaW5nXG4gICAgICAgICAgICAgICAgaWYgKHZpZXcuX2lzUm90YXRlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJTdHlsZS5tYXJnaW4gPSAnMCAwIDAgJyArIGZyYW1lSCArICdweCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJTdHlsZS5tYXJnaW4gPSAnMHB4JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGUucGFkZGluZ0xlZnQgPSBvZmZ4ICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLnBhZGRpbmdSaWdodCA9IG9mZnggKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGUucGFkZGluZ1RvcCA9IG9mZnkgKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGUucGFkZGluZ0JvdHRvbSA9IG9mZnkgKyBcInB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEBjbGFzcyBFcXVhbFRvV2luZG93XG4gICAgICogQGV4dGVuZHMgRXF1YWxUb0ZyYW1lXG4gICAgICovXG4gICAgdmFyIEVxdWFsVG9XaW5kb3cgPSBjYy5DbGFzcyh7XG4gICAgICAgIG5hbWU6IFwiRXF1YWxUb1dpbmRvd1wiLFxuICAgICAgICBleHRlbmRzOiBFcXVhbFRvRnJhbWUsXG4gICAgICAgIHByZUFwcGx5OiBmdW5jdGlvbiAodmlldykge1xuICAgICAgICAgICAgdGhpcy5fc3VwZXIodmlldyk7XG4gICAgICAgICAgICBjYy5nYW1lLmZyYW1lID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB9LFxuXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbiAodmlldykge1xuICAgICAgICAgICAgdGhpcy5fc3VwZXIodmlldyk7XG4gICAgICAgICAgICB0aGlzLl9maXhDb250YWluZXIoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIFByb3BvcnRpb25hbFRvV2luZG93XG4gICAgICogQGV4dGVuZHMgUHJvcG9ydGlvbmFsVG9GcmFtZVxuICAgICAqL1xuICAgIHZhciBQcm9wb3J0aW9uYWxUb1dpbmRvdyA9IGNjLkNsYXNzKHtcbiAgICAgICAgbmFtZTogXCJQcm9wb3J0aW9uYWxUb1dpbmRvd1wiLFxuICAgICAgICBleHRlbmRzOiBQcm9wb3J0aW9uYWxUb0ZyYW1lLFxuICAgICAgICBwcmVBcHBseTogZnVuY3Rpb24gKHZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1cGVyKHZpZXcpO1xuICAgICAgICAgICAgY2MuZ2FtZS5mcmFtZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgfSxcblxuICAgICAgICBhcHBseTogZnVuY3Rpb24gKHZpZXcsIGRlc2lnbmVkUmVzb2x1dGlvbikge1xuICAgICAgICAgICAgdGhpcy5fc3VwZXIodmlldywgZGVzaWduZWRSZXNvbHV0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuX2ZpeENvbnRhaW5lcigpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgT3JpZ2luYWxDb250YWluZXJcbiAgICAgKiBAZXh0ZW5kcyBDb250YWluZXJTdHJhdGVneVxuICAgICAqL1xuICAgIHZhciBPcmlnaW5hbENvbnRhaW5lciA9IGNjLkNsYXNzKHtcbiAgICAgICAgbmFtZTogXCJPcmlnaW5hbENvbnRhaW5lclwiLFxuICAgICAgICBleHRlbmRzOiBjYy5Db250YWluZXJTdHJhdGVneSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uICh2aWV3KSB7XG4gICAgICAgICAgICB0aGlzLl9zZXR1cENvbnRhaW5lcih2aWV3LCBjYy5nYW1lLmNhbnZhcy53aWR0aCwgY2MuZ2FtZS5jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4vLyAjTk9UIFNUQUJMRSBvbiBBbmRyb2lkIyBBbGlhczogU3RyYXRlZ3kgdGhhdCBtYWtlcyB0aGUgY29udGFpbmVyJ3Mgc2l6ZSBlcXVhbHMgdG8gdGhlIHdpbmRvdydzIHNpemVcbi8vICAgIGNjLkNvbnRhaW5lclN0cmF0ZWd5LkVRVUFMX1RPX1dJTkRPVyA9IG5ldyBFcXVhbFRvV2luZG93KCk7XG4vLyAjTk9UIFNUQUJMRSBvbiBBbmRyb2lkIyBBbGlhczogU3RyYXRlZ3kgdGhhdCBzY2FsZSBwcm9wb3J0aW9uYWxseSB0aGUgY29udGFpbmVyJ3Mgc2l6ZSB0byB3aW5kb3cncyBzaXplXG4vLyAgICBjYy5Db250YWluZXJTdHJhdGVneS5QUk9QT1JUSU9OX1RPX1dJTkRPVyA9IG5ldyBQcm9wb3J0aW9uYWxUb1dpbmRvdygpO1xuLy8gQWxpYXM6IFN0cmF0ZWd5IHRoYXQgbWFrZXMgdGhlIGNvbnRhaW5lcidzIHNpemUgZXF1YWxzIHRvIHRoZSBmcmFtZSdzIHNpemVcbiAgICBjYy5Db250YWluZXJTdHJhdGVneS5FUVVBTF9UT19GUkFNRSA9IG5ldyBFcXVhbFRvRnJhbWUoKTtcbi8vIEFsaWFzOiBTdHJhdGVneSB0aGF0IHNjYWxlIHByb3BvcnRpb25hbGx5IHRoZSBjb250YWluZXIncyBzaXplIHRvIGZyYW1lJ3Mgc2l6ZVxuICAgIGNjLkNvbnRhaW5lclN0cmF0ZWd5LlBST1BPUlRJT05fVE9fRlJBTUUgPSBuZXcgUHJvcG9ydGlvbmFsVG9GcmFtZSgpO1xuLy8gQWxpYXM6IFN0cmF0ZWd5IHRoYXQga2VlcHMgdGhlIG9yaWdpbmFsIGNvbnRhaW5lcidzIHNpemVcbiAgICBjYy5Db250YWluZXJTdHJhdGVneS5PUklHSU5BTF9DT05UQUlORVIgPSBuZXcgT3JpZ2luYWxDb250YWluZXIoKTtcblxuLy8gQ29udGVudCBzY2FsZSBzdHJhdGVneXNcbiAgICB2YXIgRXhhY3RGaXQgPSBjYy5DbGFzcyh7XG4gICAgICAgIG5hbWU6IFwiRXhhY3RGaXRcIixcbiAgICAgICAgZXh0ZW5kczogY2MuQ29udGVudFN0cmF0ZWd5LFxuICAgICAgICBhcHBseTogZnVuY3Rpb24gKHZpZXcsIGRlc2lnbmVkUmVzb2x1dGlvbikge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lclcgPSBjYy5nYW1lLmNhbnZhcy53aWR0aCwgY29udGFpbmVySCA9IGNjLmdhbWUuY2FudmFzLmhlaWdodCxcbiAgICAgICAgICAgICAgICBzY2FsZVggPSBjb250YWluZXJXIC8gZGVzaWduZWRSZXNvbHV0aW9uLndpZHRoLCBzY2FsZVkgPSBjb250YWluZXJIIC8gZGVzaWduZWRSZXNvbHV0aW9uLmhlaWdodDtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J1aWxkUmVzdWx0KGNvbnRhaW5lclcsIGNvbnRhaW5lckgsIGNvbnRhaW5lclcsIGNvbnRhaW5lckgsIHNjYWxlWCwgc2NhbGVZKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIFNob3dBbGwgPSBjYy5DbGFzcyh7XG4gICAgICAgIG5hbWU6IFwiU2hvd0FsbFwiLFxuICAgICAgICBleHRlbmRzOiBjYy5Db250ZW50U3RyYXRlZ3ksXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbiAodmlldywgZGVzaWduZWRSZXNvbHV0aW9uKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyVyA9IGNjLmdhbWUuY2FudmFzLndpZHRoLCBjb250YWluZXJIID0gY2MuZ2FtZS5jYW52YXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGRlc2lnblcgPSBkZXNpZ25lZFJlc29sdXRpb24ud2lkdGgsIGRlc2lnbkggPSBkZXNpZ25lZFJlc29sdXRpb24uaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHNjYWxlWCA9IGNvbnRhaW5lclcgLyBkZXNpZ25XLCBzY2FsZVkgPSBjb250YWluZXJIIC8gZGVzaWduSCwgc2NhbGUgPSAwLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRXLCBjb250ZW50SDtcblxuICAgICAgICAgICAgc2NhbGVYIDwgc2NhbGVZID8gKHNjYWxlID0gc2NhbGVYLCBjb250ZW50VyA9IGNvbnRhaW5lclcsIGNvbnRlbnRIID0gZGVzaWduSCAqIHNjYWxlKVxuICAgICAgICAgICAgICAgIDogKHNjYWxlID0gc2NhbGVZLCBjb250ZW50VyA9IGRlc2lnblcgKiBzY2FsZSwgY29udGVudEggPSBjb250YWluZXJIKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J1aWxkUmVzdWx0KGNvbnRhaW5lclcsIGNvbnRhaW5lckgsIGNvbnRlbnRXLCBjb250ZW50SCwgc2NhbGUsIHNjYWxlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIE5vQm9yZGVyID0gY2MuQ2xhc3Moe1xuICAgICAgICBuYW1lOiBcIk5vQm9yZGVyXCIsXG4gICAgICAgIGV4dGVuZHM6IGNjLkNvbnRlbnRTdHJhdGVneSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uICh2aWV3LCBkZXNpZ25lZFJlc29sdXRpb24pIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXJXID0gY2MuZ2FtZS5jYW52YXMud2lkdGgsIGNvbnRhaW5lckggPSBjYy5nYW1lLmNhbnZhcy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgZGVzaWduVyA9IGRlc2lnbmVkUmVzb2x1dGlvbi53aWR0aCwgZGVzaWduSCA9IGRlc2lnbmVkUmVzb2x1dGlvbi5oZWlnaHQsXG4gICAgICAgICAgICAgICAgc2NhbGVYID0gY29udGFpbmVyVyAvIGRlc2lnblcsIHNjYWxlWSA9IGNvbnRhaW5lckggLyBkZXNpZ25ILCBzY2FsZSxcbiAgICAgICAgICAgICAgICBjb250ZW50VywgY29udGVudEg7XG5cbiAgICAgICAgICAgIHNjYWxlWCA8IHNjYWxlWSA/IChzY2FsZSA9IHNjYWxlWSwgY29udGVudFcgPSBkZXNpZ25XICogc2NhbGUsIGNvbnRlbnRIID0gY29udGFpbmVySClcbiAgICAgICAgICAgICAgICA6IChzY2FsZSA9IHNjYWxlWCwgY29udGVudFcgPSBjb250YWluZXJXLCBjb250ZW50SCA9IGRlc2lnbkggKiBzY2FsZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWlsZFJlc3VsdChjb250YWluZXJXLCBjb250YWluZXJILCBjb250ZW50VywgY29udGVudEgsIHNjYWxlLCBzY2FsZSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBGaXhlZEhlaWdodCA9IGNjLkNsYXNzKHtcbiAgICAgICAgbmFtZTogXCJGaXhlZEhlaWdodFwiLFxuICAgICAgICBleHRlbmRzOiBjYy5Db250ZW50U3RyYXRlZ3ksXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbiAodmlldywgZGVzaWduZWRSZXNvbHV0aW9uKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyVyA9IGNjLmdhbWUuY2FudmFzLndpZHRoLCBjb250YWluZXJIID0gY2MuZ2FtZS5jYW52YXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGRlc2lnbkggPSBkZXNpZ25lZFJlc29sdXRpb24uaGVpZ2h0LCBzY2FsZSA9IGNvbnRhaW5lckggLyBkZXNpZ25ILFxuICAgICAgICAgICAgICAgIGNvbnRlbnRXID0gY29udGFpbmVyVywgY29udGVudEggPSBjb250YWluZXJIO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYnVpbGRSZXN1bHQoY29udGFpbmVyVywgY29udGFpbmVySCwgY29udGVudFcsIGNvbnRlbnRILCBzY2FsZSwgc2NhbGUpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgRml4ZWRXaWR0aCA9IGNjLkNsYXNzKHtcbiAgICAgICAgbmFtZTogXCJGaXhlZFdpZHRoXCIsXG4gICAgICAgIGV4dGVuZHM6IGNjLkNvbnRlbnRTdHJhdGVneSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uICh2aWV3LCBkZXNpZ25lZFJlc29sdXRpb24pIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXJXID0gY2MuZ2FtZS5jYW52YXMud2lkdGgsIGNvbnRhaW5lckggPSBjYy5nYW1lLmNhbnZhcy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgZGVzaWduVyA9IGRlc2lnbmVkUmVzb2x1dGlvbi53aWR0aCwgc2NhbGUgPSBjb250YWluZXJXIC8gZGVzaWduVyxcbiAgICAgICAgICAgICAgICBjb250ZW50VyA9IGNvbnRhaW5lclcsIGNvbnRlbnRIID0gY29udGFpbmVySDtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J1aWxkUmVzdWx0KGNvbnRhaW5lclcsIGNvbnRhaW5lckgsIGNvbnRlbnRXLCBjb250ZW50SCwgc2NhbGUsIHNjYWxlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4vLyBBbGlhczogU3RyYXRlZ3kgdG8gc2NhbGUgdGhlIGNvbnRlbnQncyBzaXplIHRvIGNvbnRhaW5lcidzIHNpemUsIG5vbiBwcm9wb3J0aW9uYWxcbiAgICBjYy5Db250ZW50U3RyYXRlZ3kuRVhBQ1RfRklUID0gbmV3IEV4YWN0Rml0KCk7XG4vLyBBbGlhczogU3RyYXRlZ3kgdG8gc2NhbGUgdGhlIGNvbnRlbnQncyBzaXplIHByb3BvcnRpb25hbGx5IHRvIG1heGltdW0gc2l6ZSBhbmQga2VlcHMgdGhlIHdob2xlIGNvbnRlbnQgYXJlYSB0byBiZSB2aXNpYmxlXG4gICAgY2MuQ29udGVudFN0cmF0ZWd5LlNIT1dfQUxMID0gbmV3IFNob3dBbGwoKTtcbi8vIEFsaWFzOiBTdHJhdGVneSB0byBzY2FsZSB0aGUgY29udGVudCdzIHNpemUgcHJvcG9ydGlvbmFsbHkgdG8gZmlsbCB0aGUgd2hvbGUgY29udGFpbmVyIGFyZWFcbiAgICBjYy5Db250ZW50U3RyYXRlZ3kuTk9fQk9SREVSID0gbmV3IE5vQm9yZGVyKCk7XG4vLyBBbGlhczogU3RyYXRlZ3kgdG8gc2NhbGUgdGhlIGNvbnRlbnQncyBoZWlnaHQgdG8gY29udGFpbmVyJ3MgaGVpZ2h0IGFuZCBwcm9wb3J0aW9uYWxseSBzY2FsZSBpdHMgd2lkdGhcbiAgICBjYy5Db250ZW50U3RyYXRlZ3kuRklYRURfSEVJR0hUID0gbmV3IEZpeGVkSGVpZ2h0KCk7XG4vLyBBbGlhczogU3RyYXRlZ3kgdG8gc2NhbGUgdGhlIGNvbnRlbnQncyB3aWR0aCB0byBjb250YWluZXIncyB3aWR0aCBhbmQgcHJvcG9ydGlvbmFsbHkgc2NhbGUgaXRzIGhlaWdodFxuICAgIGNjLkNvbnRlbnRTdHJhdGVneS5GSVhFRF9XSURUSCA9IG5ldyBGaXhlZFdpZHRoKCk7XG5cbn0pKCk7XG5cbi8qKlxuICogPHA+Y2MuUmVzb2x1dGlvblBvbGljeSBjbGFzcyBpcyB0aGUgcm9vdCBzdHJhdGVneSBjbGFzcyBvZiBzY2FsZSBzdHJhdGVneSxcbiAqIGl0cyBtYWluIHRhc2sgaXMgdG8gbWFpbnRhaW4gdGhlIGNvbXBhdGliaWxpdHkgd2l0aCBDb2NvczJkLXg8L3A+XG4gKlxuICogQGNsYXNzIFJlc29sdXRpb25Qb2xpY3lcbiAqL1xuLyoqXG4gKiBAbWV0aG9kIGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0NvbnRhaW5lclN0cmF0ZWd5fSBjb250YWluZXJTdGcgVGhlIGNvbnRhaW5lciBzdHJhdGVneVxuICogQHBhcmFtIHtDb250ZW50U3RyYXRlZ3l9IGNvbnRlbnRTdGcgVGhlIGNvbnRlbnQgc3RyYXRlZ3lcbiAqL1xuY2MuUmVzb2x1dGlvblBvbGljeSA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiBcImNjLlJlc29sdXRpb25Qb2xpY3lcIixcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBvZiBjYy5SZXNvbHV0aW9uUG9saWN5XG4gICAgICogQHBhcmFtIHtDb250YWluZXJTdHJhdGVneX0gY29udGFpbmVyU3RnXG4gICAgICogQHBhcmFtIHtDb250ZW50U3RyYXRlZ3l9IGNvbnRlbnRTdGdcbiAgICAgKi9cbiAgICBjdG9yOiBmdW5jdGlvbiAoY29udGFpbmVyU3RnLCBjb250ZW50U3RnKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lclN0cmF0ZWd5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY29udGVudFN0cmF0ZWd5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZXRDb250YWluZXJTdHJhdGVneShjb250YWluZXJTdGcpO1xuICAgICAgICB0aGlzLnNldENvbnRlbnRTdHJhdGVneShjb250ZW50U3RnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBNYW5pcHVsYXRpb24gYmVmb3JlIGFwcGx5aW5nIHRoZSByZXNvbHV0aW9uIHBvbGljeVxuICAgICAqICEjemgg562W55Wl5bqU55So5YmN55qE5pON5L2cXG4gICAgICogQG1ldGhvZCBwcmVBcHBseVxuICAgICAqIEBwYXJhbSB7Vmlld30gdmlldyBUaGUgdGFyZ2V0IHZpZXdcbiAgICAgKi9cbiAgICBwcmVBcHBseTogZnVuY3Rpb24gKHZpZXcpIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyU3RyYXRlZ3kucHJlQXBwbHkodmlldyk7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRTdHJhdGVneS5wcmVBcHBseSh2aWV3KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBGdW5jdGlvbiB0byBhcHBseSB0aGlzIHJlc29sdXRpb24gcG9saWN5XG4gICAgICogVGhlIHJldHVybiB2YWx1ZSBpcyB7c2NhbGU6IFtzY2FsZVgsIHNjYWxlWV0sIHZpZXdwb3J0OiB7Y2MuUmVjdH19LFxuICAgICAqIFRoZSB0YXJnZXQgdmlldyBjYW4gdGhlbiBhcHBseSB0aGVzZSB2YWx1ZSB0byBpdHNlbGYsIGl0J3MgcHJlZmVycmVkIG5vdCB0byBtb2RpZnkgZGlyZWN0bHkgaXRzIHByaXZhdGUgdmFyaWFibGVzXG4gICAgICogISN6aCDosIPnlKjnrZbnlaXmlrnms5VcbiAgICAgKiBAbWV0aG9kIGFwcGx5XG4gICAgICogQHBhcmFtIHtWaWV3fSB2aWV3IC0gVGhlIHRhcmdldCB2aWV3XG4gICAgICogQHBhcmFtIHtTaXplfSBkZXNpZ25lZFJlc29sdXRpb24gLSBUaGUgdXNlciBkZWZpbmVkIGRlc2lnbiByZXNvbHV0aW9uXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbnMgdGhlIHNjYWxlIFgvWSB2YWx1ZXMgYW5kIHRoZSB2aWV3cG9ydCByZWN0XG4gICAgICovXG4gICAgYXBwbHk6IGZ1bmN0aW9uICh2aWV3LCBkZXNpZ25lZFJlc29sdXRpb24pIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyU3RyYXRlZ3kuYXBwbHkodmlldywgZGVzaWduZWRSZXNvbHV0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRTdHJhdGVneS5hcHBseSh2aWV3LCBkZXNpZ25lZFJlc29sdXRpb24pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIE1hbmlwdWxhdGlvbiBhZnRlciBhcHB5bGluZyB0aGUgc3RyYXRlZ3lcbiAgICAgKiAhI3poIOetlueVpeW6lOeUqOS5i+WQjueahOaTjeS9nFxuICAgICAqIEBtZXRob2QgcG9zdEFwcGx5XG4gICAgICogQHBhcmFtIHtWaWV3fSB2aWV3IC0gVGhlIHRhcmdldCB2aWV3XG4gICAgICovXG4gICAgcG9zdEFwcGx5OiBmdW5jdGlvbiAodmlldykge1xuICAgICAgICB0aGlzLl9jb250YWluZXJTdHJhdGVneS5wb3N0QXBwbHkodmlldyk7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRTdHJhdGVneS5wb3N0QXBwbHkodmlldyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXR1cCB0aGUgY29udGFpbmVyJ3Mgc2NhbGUgc3RyYXRlZ3lcbiAgICAgKiAhI3poIOiuvue9ruWuueWZqOeahOmAgumFjeetlueVpVxuICAgICAqIEBtZXRob2Qgc2V0Q29udGFpbmVyU3RyYXRlZ3lcbiAgICAgKiBAcGFyYW0ge0NvbnRhaW5lclN0cmF0ZWd5fSBjb250YWluZXJTdGdcbiAgICAgKi9cbiAgICBzZXRDb250YWluZXJTdHJhdGVneTogZnVuY3Rpb24gKGNvbnRhaW5lclN0Zykge1xuICAgICAgICBpZiAoY29udGFpbmVyU3RnIGluc3RhbmNlb2YgY2MuQ29udGFpbmVyU3RyYXRlZ3kpXG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXJTdHJhdGVneSA9IGNvbnRhaW5lclN0ZztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFNldHVwIHRoZSBjb250ZW50J3Mgc2NhbGUgc3RyYXRlZ3lcbiAgICAgKiAhI3poIOiuvue9ruWGheWuueeahOmAgumFjeetlueVpVxuICAgICAqIEBtZXRob2Qgc2V0Q29udGVudFN0cmF0ZWd5XG4gICAgICogQHBhcmFtIHtDb250ZW50U3RyYXRlZ3l9IGNvbnRlbnRTdGdcbiAgICAgKi9cbiAgICBzZXRDb250ZW50U3RyYXRlZ3k6IGZ1bmN0aW9uIChjb250ZW50U3RnKSB7XG4gICAgICAgIGlmIChjb250ZW50U3RnIGluc3RhbmNlb2YgY2MuQ29udGVudFN0cmF0ZWd5KVxuICAgICAgICAgICAgdGhpcy5fY29udGVudFN0cmF0ZWd5ID0gY29udGVudFN0ZztcbiAgICB9XG59KTtcblxuanMuZ2V0KGNjLlJlc29sdXRpb25Qb2xpY3kucHJvdG90eXBlLCBcImNhbnZhc1NpemVcIiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYy52MihjYy5nYW1lLmNhbnZhcy53aWR0aCwgY2MuZ2FtZS5jYW52YXMuaGVpZ2h0KTtcbn0pO1xuXG4vKipcbiAqIFRoZSBlbnRpcmUgYXBwbGljYXRpb24gaXMgdmlzaWJsZSBpbiB0aGUgc3BlY2lmaWVkIGFyZWEgd2l0aG91dCB0cnlpbmcgdG8gcHJlc2VydmUgdGhlIG9yaWdpbmFsIGFzcGVjdCByYXRpby48YnIvPlxuICogRGlzdG9ydGlvbiBjYW4gb2NjdXIsIGFuZCB0aGUgYXBwbGljYXRpb24gbWF5IGFwcGVhciBzdHJldGNoZWQgb3IgY29tcHJlc3NlZC5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBFWEFDVF9GSVRcbiAqIEByZWFkb25seVxuICogQHN0YXRpY1xuICovXG5jYy5SZXNvbHV0aW9uUG9saWN5LkVYQUNUX0ZJVCA9IDA7XG5cbi8qKlxuICogVGhlIGVudGlyZSBhcHBsaWNhdGlvbiBmaWxscyB0aGUgc3BlY2lmaWVkIGFyZWEsIHdpdGhvdXQgZGlzdG9ydGlvbiBidXQgcG9zc2libHkgd2l0aCBzb21lIGNyb3BwaW5nLDxici8+XG4gKiB3aGlsZSBtYWludGFpbmluZyB0aGUgb3JpZ2luYWwgYXNwZWN0IHJhdGlvIG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBOT19CT1JERVJcbiAqIEByZWFkb25seVxuICogQHN0YXRpY1xuICovXG5jYy5SZXNvbHV0aW9uUG9saWN5Lk5PX0JPUkRFUiA9IDE7XG5cbi8qKlxuICogVGhlIGVudGlyZSBhcHBsaWNhdGlvbiBpcyB2aXNpYmxlIGluIHRoZSBzcGVjaWZpZWQgYXJlYSB3aXRob3V0IGRpc3RvcnRpb24gd2hpbGUgbWFpbnRhaW5pbmcgdGhlIG9yaWdpbmFsPGJyLz5cbiAqIGFzcGVjdCByYXRpbyBvZiB0aGUgYXBwbGljYXRpb24uIEJvcmRlcnMgY2FuIGFwcGVhciBvbiB0d28gc2lkZXMgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFNIT1dfQUxMXG4gKiBAcmVhZG9ubHlcbiAqIEBzdGF0aWNcbiAqL1xuY2MuUmVzb2x1dGlvblBvbGljeS5TSE9XX0FMTCA9IDI7XG5cbi8qKlxuICogVGhlIGFwcGxpY2F0aW9uIHRha2VzIHRoZSBoZWlnaHQgb2YgdGhlIGRlc2lnbiByZXNvbHV0aW9uIHNpemUgYW5kIG1vZGlmaWVzIHRoZSB3aWR0aCBvZiB0aGUgaW50ZXJuYWw8YnIvPlxuICogY2FudmFzIHNvIHRoYXQgaXQgZml0cyB0aGUgYXNwZWN0IHJhdGlvIG9mIHRoZSBkZXZpY2U8YnIvPlxuICogbm8gZGlzdG9ydGlvbiB3aWxsIG9jY3VyIGhvd2V2ZXIgeW91IG11c3QgbWFrZSBzdXJlIHlvdXIgYXBwbGljYXRpb24gd29ya3Mgb24gZGlmZmVyZW50PGJyLz5cbiAqIGFzcGVjdCByYXRpb3NcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBGSVhFRF9IRUlHSFRcbiAqIEByZWFkb25seVxuICogQHN0YXRpY1xuICovXG5jYy5SZXNvbHV0aW9uUG9saWN5LkZJWEVEX0hFSUdIVCA9IDM7XG5cbi8qKlxuICogVGhlIGFwcGxpY2F0aW9uIHRha2VzIHRoZSB3aWR0aCBvZiB0aGUgZGVzaWduIHJlc29sdXRpb24gc2l6ZSBhbmQgbW9kaWZpZXMgdGhlIGhlaWdodCBvZiB0aGUgaW50ZXJuYWw8YnIvPlxuICogY2FudmFzIHNvIHRoYXQgaXQgZml0cyB0aGUgYXNwZWN0IHJhdGlvIG9mIHRoZSBkZXZpY2U8YnIvPlxuICogbm8gZGlzdG9ydGlvbiB3aWxsIG9jY3VyIGhvd2V2ZXIgeW91IG11c3QgbWFrZSBzdXJlIHlvdXIgYXBwbGljYXRpb24gd29ya3Mgb24gZGlmZmVyZW50PGJyLz5cbiAqIGFzcGVjdCByYXRpb3NcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBGSVhFRF9XSURUSFxuICogQHJlYWRvbmx5XG4gKiBAc3RhdGljXG4gKi9cbmNjLlJlc29sdXRpb25Qb2xpY3kuRklYRURfV0lEVEggPSA0O1xuXG4vKipcbiAqIFVua25vdyBwb2xpY3lcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBVTktOT1dOXG4gKiBAcmVhZG9ubHlcbiAqIEBzdGF0aWNcbiAqL1xuY2MuUmVzb2x1dGlvblBvbGljeS5VTktOT1dOID0gNTtcblxuLyoqXG4gKiBAbW9kdWxlIGNjXG4gKi9cblxuLyoqXG4gKiAhI2VuIGNjLnZpZXcgaXMgdGhlIHNoYXJlZCB2aWV3IG9iamVjdC5cbiAqICEjemggY2MudmlldyDmmK/lhajlsYDnmoTop4blm77lr7nosaHjgIJcbiAqIEBwcm9wZXJ0eSB2aWV3XG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7Vmlld31cbiAqL1xuY2MudmlldyA9IG5ldyBWaWV3KCk7XG5cbi8qKlxuICogISNlbiBjYy53aW5TaXplIGlzIHRoZSBhbGlhcyBvYmplY3QgZm9yIHRoZSBzaXplIG9mIHRoZSBjdXJyZW50IGdhbWUgd2luZG93LlxuICogISN6aCBjYy53aW5TaXplIOS4uuW9k+WJjeeahOa4uOaIj+eql+WPo+eahOWkp+Wwj+OAglxuICogQHByb3BlcnR5IHdpblNpemVcbiAqIEB0eXBlIFNpemVcbiAqL1xuY2Mud2luU2l6ZSA9IGNjLnYyKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2MudmlldztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCBSaWNhcmRvIFF1ZXNhZGFcbiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxMiBjb2NvczJkLXgub3JnXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgRXZlbnRUYXJnZXQgPSByZXF1aXJlKCcuLi9ldmVudC9ldmVudC10YXJnZXQnKTtcbnZhciBqcyA9IHJlcXVpcmUoJy4uL3BsYXRmb3JtL2pzJyk7XG52YXIgcmVuZGVyZXIgPSByZXF1aXJlKCcuLi9yZW5kZXJlcicpO1xucmVxdWlyZSgnLi4vcGxhdGZvcm0vQ0NDbGFzcycpO1xuXG4vLyBUT0RPOiBtb3ZlIGludG8gYWRhcHRlclxudmFyIGlzWGlhb21pR2FtZSA9IGNjLnN5cy5wbGF0Zm9ybSA9PT0gY2Muc3lzLlhJQU9NSV9HQU1FO1xudmFyIGlzQmFpZHVHYW1lID0gY2Muc3lzLnBsYXRmb3JtID09PSBjYy5zeXMuQkFJRFVfR0FNRTtcbnZhciBpc0FsaXBheUdhbWUgPSBjYy5zeXMucGxhdGZvcm0gPT09IGNjLnN5cy5BTElQQVlfR0FNRTtcblxudmFyIF9fQnJvd3NlckdldHRlciA9IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICAvLyBOT1RFOiBub3QgbWVyZ2UgaW50byB2Mi4yLjAsIG1vdmUgaW50byBBbGlwYXkgYWRhcHRlclxuICAgICAgICBpZiAoIUNDX1dFQ0hBVEdBTUUgJiYgIUNDX1FRUExBWSAmJiAhaXNCYWlkdUdhbWUgJiYgIWlzWGlhb21pR2FtZSAmJiAhaXNBbGlwYXlHYW1lKSB7XG4gICAgICAgICAgICB0aGlzLmh0bWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImh0bWxcIilbMF07XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGF2YWlsV2lkdGg6IGZ1bmN0aW9uIGF2YWlsV2lkdGgoZnJhbWUpIHtcbiAgICAgICAgaWYgKCFmcmFtZSB8fCBmcmFtZSA9PT0gdGhpcy5odG1sKSByZXR1cm4gd2luZG93LmlubmVyV2lkdGg7ZWxzZSByZXR1cm4gZnJhbWUuY2xpZW50V2lkdGg7XG4gICAgfSxcbiAgICBhdmFpbEhlaWdodDogZnVuY3Rpb24gYXZhaWxIZWlnaHQoZnJhbWUpIHtcbiAgICAgICAgaWYgKCFmcmFtZSB8fCBmcmFtZSA9PT0gdGhpcy5odG1sKSByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0O2Vsc2UgcmV0dXJuIGZyYW1lLmNsaWVudEhlaWdodDtcbiAgICB9LFxuICAgIG1ldGE6IHtcbiAgICAgICAgXCJ3aWR0aFwiOiBcImRldmljZS13aWR0aFwiXG4gICAgfSxcbiAgICBhZGFwdGF0aW9uVHlwZTogY2Muc3lzLmJyb3dzZXJUeXBlXG59O1xuXG5pZiAoY2Muc3lzLm9zID09PSBjYy5zeXMuT1NfSU9TKSAvLyBBbGwgYnJvd3NlcnMgYXJlIFdlYlZpZXdcbiAgICBfX0Jyb3dzZXJHZXR0ZXIuYWRhcHRhdGlvblR5cGUgPSBjYy5zeXMuQlJPV1NFUl9UWVBFX1NBRkFSSTtcblxuaWYgKGlzQmFpZHVHYW1lKSB7XG4gICAgaWYgKGNjLnN5cy5icm93c2VyVHlwZSA9PT0gY2Muc3lzLkJST1dTRVJfVFlQRV9CQUlEVV9HQU1FX1NVQikge1xuICAgICAgICBfX0Jyb3dzZXJHZXR0ZXIuYWRhcHRhdGlvblR5cGUgPSBjYy5zeXMuQlJPV1NFUl9UWVBFX0JBSURVX0dBTUVfU1VCO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIF9fQnJvd3NlckdldHRlci5hZGFwdGF0aW9uVHlwZSA9IGNjLnN5cy5CUk9XU0VSX1RZUEVfQkFJRFVfR0FNRTtcbiAgICB9XG59XG5cbmlmIChpc1hpYW9taUdhbWUpIHtcbiAgICBfX0Jyb3dzZXJHZXR0ZXIuYWRhcHRhdGlvblR5cGUgPSBjYy5zeXMuQlJPV1NFUl9UWVBFX1hJQU9NSV9HQU1FO1xufVxuXG4vLyBOT1RFOiBub3QgbWVyZ2UgaW50byB2Mi4yLjAsIG1vdmUgaW50byBBbGlwYXkgYWRhcHRlclxuaWYgKGlzQWxpcGF5R2FtZSkge1xuICAgIF9fQnJvd3NlckdldHRlci5hZGFwdGF0aW9uVHlwZSA9IGNjLnN5cy5CUk9XU0VSX1RZUEVfQUxJUEFZX0dBTUU7XG59XG5cbmlmIChDQ19XRUNIQVRHQU1FKSB7XG4gICAgaWYgKGNjLnN5cy5icm93c2VyVHlwZSA9PT0gY2Muc3lzLkJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRV9TVUIpIHtcbiAgICAgICAgX19Ccm93c2VyR2V0dGVyLmFkYXB0YXRpb25UeXBlID0gY2Muc3lzLkJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRV9TVUI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgX19Ccm93c2VyR2V0dGVyLmFkYXB0YXRpb25UeXBlID0gY2Muc3lzLkJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRTtcbiAgICB9XG59XG5cbmlmIChDQ19RUVBMQVkpIHtcbiAgICBfX0Jyb3dzZXJHZXR0ZXIuYWRhcHRhdGlvblR5cGUgPSBjYy5zeXMuQlJPV1NFUl9UWVBFX1FRX1BMQVk7XG59XG5cbnN3aXRjaCAoX19Ccm93c2VyR2V0dGVyLmFkYXB0YXRpb25UeXBlKSB7XG4gICAgY2FzZSBjYy5zeXMuQlJPV1NFUl9UWVBFX1NBRkFSSTpcbiAgICAgICAgX19Ccm93c2VyR2V0dGVyLm1ldGFbXCJtaW5pbWFsLXVpXCJdID0gXCJ0cnVlXCI7XG4gICAgY2FzZSBjYy5zeXMuQlJPV1NFUl9UWVBFX1NPVUdPVTpcbiAgICBjYXNlIGNjLnN5cy5CUk9XU0VSX1RZUEVfVUM6XG4gICAgICAgIF9fQnJvd3NlckdldHRlci5hdmFpbFdpZHRoID0gZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJhbWUuY2xpZW50V2lkdGg7XG4gICAgICAgIH07XG4gICAgICAgIF9fQnJvd3NlckdldHRlci5hdmFpbEhlaWdodCA9IGZ1bmN0aW9uIChmcmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyYW1lLmNsaWVudEhlaWdodDtcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSBjYy5zeXMuQlJPV1NFUl9UWVBFX1dFQ0hBVF9HQU1FOlxuICAgICAgICBfX0Jyb3dzZXJHZXR0ZXIuYXZhaWxXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgfTtcbiAgICAgICAgX19Ccm93c2VyR2V0dGVyLmF2YWlsSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSBjYy5zeXMuQlJPV1NFUl9UWVBFX1dFQ0hBVF9HQU1FX1NVQjpcbiAgICAgICAgdmFyIHNoYXJlZENhbnZhcyA9IHdpbmRvdy5zaGFyZWRDYW52YXMgfHwgd3guZ2V0U2hhcmVkQ2FudmFzKCk7XG4gICAgICAgIF9fQnJvd3NlckdldHRlci5hdmFpbFdpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNoYXJlZENhbnZhcy53aWR0aDtcbiAgICAgICAgfTtcbiAgICAgICAgX19Ccm93c2VyR2V0dGVyLmF2YWlsSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNoYXJlZENhbnZhcy5oZWlnaHQ7XG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xufVxuXG52YXIgX3NjaXNzb3JSZWN0ID0gbnVsbDtcblxuLyoqXG4gKiBjYy52aWV3IGlzIHRoZSBzaW5nbGV0b24gb2JqZWN0IHdoaWNoIHJlcHJlc2VudHMgdGhlIGdhbWUgd2luZG93Ljxici8+XG4gKiBJdCdzIG1haW4gdGFzayBpbmNsdWRlOiA8YnIvPlxuICogIC0gQXBwbHkgdGhlIGRlc2lnbiByZXNvbHV0aW9uIHBvbGljeTxici8+XG4gKiAgLSBQcm92aWRlIGludGVyYWN0aW9uIHdpdGggdGhlIHdpbmRvdywgbGlrZSByZXNpemUgZXZlbnQgb24gd2ViLCByZXRpbmEgZGlzcGxheSBzdXBwb3J0LCBldGMuLi48YnIvPlxuICogIC0gTWFuYWdlIHRoZSBnYW1lIHZpZXcgcG9ydCB3aGljaCBjYW4gYmUgZGlmZmVyZW50IHdpdGggdGhlIHdpbmRvdzxici8+XG4gKiAgLSBNYW5hZ2UgdGhlIGNvbnRlbnQgc2NhbGUgYW5kIHRyYW5zbGF0aW9uPGJyLz5cbiAqIDxici8+XG4gKiBTaW5jZSB0aGUgY2MudmlldyBpcyBhIHNpbmdsZXRvbiwgeW91IGRvbid0IG5lZWQgdG8gY2FsbCBhbnkgY29uc3RydWN0b3Igb3IgY3JlYXRlIGZ1bmN0aW9ucyw8YnIvPlxuICogdGhlIHN0YW5kYXJkIHdheSB0byB1c2UgaXQgaXMgYnkgY2FsbGluZzo8YnIvPlxuICogIC0gY2Mudmlldy5tZXRob2ROYW1lKCk7IDxici8+XG4gKlxuICogQGNsYXNzIFZpZXdcbiAqIEBleHRlbmRzIEV2ZW50VGFyZ2V0XG4gKi9cbnZhciBWaWV3ID0gZnVuY3Rpb24gVmlldygpIHtcbiAgICBFdmVudFRhcmdldC5jYWxsKHRoaXMpO1xuXG4gICAgdmFyIF90ID0gdGhpcyxcbiAgICAgICAgX3N0cmF0ZWd5ZXIgPSBjYy5Db250YWluZXJTdHJhdGVneSxcbiAgICAgICAgX3N0cmF0ZWd5ID0gY2MuQ29udGVudFN0cmF0ZWd5O1xuXG4gICAgX19Ccm93c2VyR2V0dGVyLmluaXQodGhpcyk7XG5cbiAgICAvLyBTaXplIG9mIHBhcmVudCBub2RlIHRoYXQgY29udGFpbnMgY2MuZ2FtZS5jb250YWluZXIgYW5kIGNjLmdhbWUuY2FudmFzXG4gICAgX3QuX2ZyYW1lU2l6ZSA9IGNjLnNpemUoMCwgMCk7XG5cbiAgICAvLyByZXNvbHV0aW9uIHNpemUsIGl0IGlzIHRoZSBzaXplIGFwcHJvcHJpYXRlIGZvciB0aGUgYXBwIHJlc291cmNlcy5cbiAgICBfdC5fZGVzaWduUmVzb2x1dGlvblNpemUgPSBjYy5zaXplKDAsIDApO1xuICAgIF90Ll9vcmlnaW5hbERlc2lnblJlc29sdXRpb25TaXplID0gY2Muc2l6ZSgwLCAwKTtcbiAgICBfdC5fc2NhbGVYID0gMTtcbiAgICBfdC5fc2NhbGVZID0gMTtcbiAgICAvLyBWaWV3cG9ydCBpcyB0aGUgY29udGFpbmVyJ3MgcmVjdCByZWxhdGVkIHRvIGNvbnRlbnQncyBjb29yZGluYXRlcyBpbiBwaXhlbFxuICAgIF90Ll92aWV3cG9ydFJlY3QgPSBjYy5yZWN0KDAsIDAsIDAsIDApO1xuICAgIC8vIFRoZSB2aXNpYmxlIHJlY3QgaW4gY29udGVudCdzIGNvb3JkaW5hdGUgaW4gcG9pbnRcbiAgICBfdC5fdmlzaWJsZVJlY3QgPSBjYy5yZWN0KDAsIDAsIDAsIDApO1xuICAgIC8vIEF1dG8gZnVsbCBzY3JlZW4gZGlzYWJsZWQgYnkgZGVmYXVsdFxuICAgIF90Ll9hdXRvRnVsbFNjcmVlbiA9IGZhbHNlO1xuICAgIC8vIFRoZSBkZXZpY2UncyBwaXhlbCByYXRpbyAoZm9yIHJldGluYSBkaXNwbGF5cylcbiAgICBfdC5fZGV2aWNlUGl4ZWxSYXRpbyA9IDE7XG4gICAgX3QuX21heFBpeGVsUmF0aW8gPSAyO1xuICAgIC8vIFJldGluYSBkaXNhYmxlZCBieSBkZWZhdWx0XG4gICAgX3QuX3JldGluYUVuYWJsZWQgPSBmYWxzZTtcbiAgICAvLyBDdXN0b20gY2FsbGJhY2sgZm9yIHJlc2l6ZSBldmVudFxuICAgIF90Ll9yZXNpemVDYWxsYmFjayA9IG51bGw7XG4gICAgX3QuX3Jlc2l6aW5nID0gZmFsc2U7XG4gICAgX3QuX3Jlc2l6ZVdpdGhCcm93c2VyU2l6ZSA9IGZhbHNlO1xuICAgIF90Ll9vcmllbnRhdGlvbkNoYW5naW5nID0gdHJ1ZTtcbiAgICBfdC5faXNSb3RhdGVkID0gZmFsc2U7XG4gICAgX3QuX29yaWVudGF0aW9uID0gY2MubWFjcm8uT1JJRU5UQVRJT05fQVVUTztcbiAgICBfdC5faXNBZGp1c3RWaWV3cG9ydCA9IHRydWU7XG4gICAgX3QuX2FudGlBbGlhc0VuYWJsZWQgPSBmYWxzZTtcblxuICAgIC8vIFNldHVwIHN5c3RlbSBkZWZhdWx0IHJlc29sdXRpb24gcG9saWNpZXNcbiAgICBfdC5fcmVzb2x1dGlvblBvbGljeSA9IG51bGw7XG4gICAgX3QuX3JwRXhhY3RGaXQgPSBuZXcgY2MuUmVzb2x1dGlvblBvbGljeShfc3RyYXRlZ3llci5FUVVBTF9UT19GUkFNRSwgX3N0cmF0ZWd5LkVYQUNUX0ZJVCk7XG4gICAgX3QuX3JwU2hvd0FsbCA9IG5ldyBjYy5SZXNvbHV0aW9uUG9saWN5KF9zdHJhdGVneWVyLkVRVUFMX1RPX0ZSQU1FLCBfc3RyYXRlZ3kuU0hPV19BTEwpO1xuICAgIF90Ll9ycE5vQm9yZGVyID0gbmV3IGNjLlJlc29sdXRpb25Qb2xpY3koX3N0cmF0ZWd5ZXIuRVFVQUxfVE9fRlJBTUUsIF9zdHJhdGVneS5OT19CT1JERVIpO1xuICAgIF90Ll9ycEZpeGVkSGVpZ2h0ID0gbmV3IGNjLlJlc29sdXRpb25Qb2xpY3koX3N0cmF0ZWd5ZXIuRVFVQUxfVE9fRlJBTUUsIF9zdHJhdGVneS5GSVhFRF9IRUlHSFQpO1xuICAgIF90Ll9ycEZpeGVkV2lkdGggPSBuZXcgY2MuUmVzb2x1dGlvblBvbGljeShfc3RyYXRlZ3llci5FUVVBTF9UT19GUkFNRSwgX3N0cmF0ZWd5LkZJWEVEX1dJRFRIKTtcblxuICAgIGNjLmdhbWUub25jZShjYy5nYW1lLkVWRU5UX0VOR0lORV9JTklURUQsIHRoaXMuaW5pdCwgdGhpcyk7XG59O1xuXG5jYy5qcy5leHRlbmQoVmlldywgRXZlbnRUYXJnZXQpO1xuXG5jYy5qcy5taXhpbihWaWV3LnByb3RvdHlwZSwge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHRoaXMuX2luaXRGcmFtZVNpemUoKTtcbiAgICAgICAgdGhpcy5lbmFibGVBbnRpQWxpYXModHJ1ZSk7XG5cbiAgICAgICAgdmFyIHcgPSBjYy5nYW1lLmNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgIGggPSBjYy5nYW1lLmNhbnZhcy5oZWlnaHQ7XG4gICAgICAgIHRoaXMuX2Rlc2lnblJlc29sdXRpb25TaXplLndpZHRoID0gdztcbiAgICAgICAgdGhpcy5fZGVzaWduUmVzb2x1dGlvblNpemUuaGVpZ2h0ID0gaDtcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxEZXNpZ25SZXNvbHV0aW9uU2l6ZS53aWR0aCA9IHc7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsRGVzaWduUmVzb2x1dGlvblNpemUuaGVpZ2h0ID0gaDtcbiAgICAgICAgdGhpcy5fdmlld3BvcnRSZWN0LndpZHRoID0gdztcbiAgICAgICAgdGhpcy5fdmlld3BvcnRSZWN0LmhlaWdodCA9IGg7XG4gICAgICAgIHRoaXMuX3Zpc2libGVSZWN0LndpZHRoID0gdztcbiAgICAgICAgdGhpcy5fdmlzaWJsZVJlY3QuaGVpZ2h0ID0gaDtcblxuICAgICAgICBjYy53aW5TaXplLndpZHRoID0gdGhpcy5fdmlzaWJsZVJlY3Qud2lkdGg7XG4gICAgICAgIGNjLndpblNpemUuaGVpZ2h0ID0gdGhpcy5fdmlzaWJsZVJlY3QuaGVpZ2h0O1xuICAgICAgICBjYy52aXNpYmxlUmVjdCAmJiBjYy52aXNpYmxlUmVjdC5pbml0KHRoaXMuX3Zpc2libGVSZWN0KTtcbiAgICB9LFxuXG5cbiAgICAvLyBSZXNpemUgaGVscGVyIGZ1bmN0aW9uc1xuICAgIF9yZXNpemVFdmVudDogZnVuY3Rpb24gX3Jlc2l6ZUV2ZW50KGZvcmNlT3JFdmVudCkge1xuICAgICAgICB2YXIgdmlldztcbiAgICAgICAgaWYgKHRoaXMuc2V0RGVzaWduUmVzb2x1dGlvblNpemUpIHtcbiAgICAgICAgICAgIHZpZXcgPSB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmlldyA9IGNjLnZpZXc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmcmFtZSBzaXplIGNoYW5nZWQgb3Igbm90XG4gICAgICAgIHZhciBwcmV2RnJhbWVXID0gdmlldy5fZnJhbWVTaXplLndpZHRoLFxuICAgICAgICAgICAgcHJldkZyYW1lSCA9IHZpZXcuX2ZyYW1lU2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICBwcmV2Um90YXRlZCA9IHZpZXcuX2lzUm90YXRlZDtcbiAgICAgICAgaWYgKGNjLnN5cy5pc01vYmlsZSkge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lclN0eWxlID0gY2MuZ2FtZS5jb250YWluZXIuc3R5bGUsXG4gICAgICAgICAgICAgICAgbWFyZ2luID0gY29udGFpbmVyU3R5bGUubWFyZ2luO1xuICAgICAgICAgICAgY29udGFpbmVyU3R5bGUubWFyZ2luID0gJzAnO1xuICAgICAgICAgICAgY29udGFpbmVyU3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIHZpZXcuX2luaXRGcmFtZVNpemUoKTtcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLm1hcmdpbiA9IG1hcmdpbjtcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmlldy5faW5pdEZyYW1lU2l6ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JjZU9yRXZlbnQgIT09IHRydWUgJiYgdmlldy5faXNSb3RhdGVkID09PSBwcmV2Um90YXRlZCAmJiB2aWV3Ll9mcmFtZVNpemUud2lkdGggPT09IHByZXZGcmFtZVcgJiYgdmlldy5fZnJhbWVTaXplLmhlaWdodCA9PT0gcHJldkZyYW1lSCkgcmV0dXJuO1xuXG4gICAgICAgIC8vIEZyYW1lIHNpemUgY2hhbmdlZCwgZG8gcmVzaXplIHdvcmtzXG4gICAgICAgIHZhciB3aWR0aCA9IHZpZXcuX29yaWdpbmFsRGVzaWduUmVzb2x1dGlvblNpemUud2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHQgPSB2aWV3Ll9vcmlnaW5hbERlc2lnblJlc29sdXRpb25TaXplLmhlaWdodDtcbiAgICAgICAgdmlldy5fcmVzaXppbmcgPSB0cnVlO1xuICAgICAgICBpZiAod2lkdGggPiAwKSB2aWV3LnNldERlc2lnblJlc29sdXRpb25TaXplKHdpZHRoLCBoZWlnaHQsIHZpZXcuX3Jlc29sdXRpb25Qb2xpY3kpO1xuICAgICAgICB2aWV3Ll9yZXNpemluZyA9IGZhbHNlO1xuXG4gICAgICAgIHZpZXcuZW1pdCgnY2FudmFzLXJlc2l6ZScpO1xuICAgICAgICBpZiAodmlldy5fcmVzaXplQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZpZXcuX3Jlc2l6ZUNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfb3JpZW50YXRpb25DaGFuZ2U6IGZ1bmN0aW9uIF9vcmllbnRhdGlvbkNoYW5nZSgpIHtcbiAgICAgICAgY2Mudmlldy5fb3JpZW50YXRpb25DaGFuZ2luZyA9IHRydWU7XG4gICAgICAgIGNjLnZpZXcuX3Jlc2l6ZUV2ZW50KCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXRzIHZpZXcncyB0YXJnZXQtZGVuc2l0eWRwaSBmb3IgYW5kcm9pZCBtb2JpbGUgYnJvd3Nlci4gaXQgY2FuIGJlIHNldCB0bzogICAgICAgICAgIDxici8+XG4gICAgICogICAxLiBjYy5tYWNyby5ERU5TSVRZRFBJX0RFVklDRSwgdmFsdWUgaXMgXCJkZXZpY2UtZHBpXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gICAgICogICAyLiBjYy5tYWNyby5ERU5TSVRZRFBJX0hJR0gsIHZhbHVlIGlzIFwiaGlnaC1kcGlcIiAgKGRlZmF1bHQgdmFsdWUpICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gICAgICogICAzLiBjYy5tYWNyby5ERU5TSVRZRFBJX01FRElVTSwgdmFsdWUgaXMgXCJtZWRpdW0tZHBpXCIgKGJyb3dzZXIncyBkZWZhdWx0IHZhbHVlKSAgICAgICAgICAgIDxici8+XG4gICAgICogICA0LiBjYy5tYWNyby5ERU5TSVRZRFBJX0xPVywgdmFsdWUgaXMgXCJsb3ctZHBpXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gICAgICogICA1LiBDdXN0b20gdmFsdWUsIGUuZzogXCI0ODBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XG4gICAgICogISN6aCDorr7nva7nm67moIflhoXlrrnnmoTmr4/oi7Hlr7jlg4/ntKDngrnlr4bluqbjgIJcbiAgICAgKlxuICAgICAqIEBtZXRob2Qgc2V0VGFyZ2V0RGVuc2l0eURQSVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkZW5zaXR5RFBJXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdjIuMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdGFyZ2V0LWRlbnNpdHlkcGkgdmFsdWUgb2YgY2Mudmlldy5cbiAgICAgKiAhI3poIOiOt+WPluebruagh+WGheWuueeahOavj+iLseWvuOWDj+e0oOeCueWvhuW6puOAglxuICAgICAqIEBtZXRob2QgZ2V0VGFyZ2V0RGVuc2l0eURQSVxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdjIuMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFNldHMgd2hldGhlciByZXNpemUgY2FudmFzIGF1dG9tYXRpY2FsbHkgd2hlbiBicm93c2VyJ3Mgc2l6ZSBjaGFuZ2VkLjxici8+XG4gICAgICogVXNlZnVsIG9ubHkgb24gd2ViLlxuICAgICAqICEjemgg6K6+572u5b2T5Y+R546w5rWP6KeI5Zmo55qE5bC65a+45pS55Y+Y5pe277yM5piv5ZCm6Ieq5Yqo6LCD5pW0IGNhbnZhcyDlsLrlr7jlpKflsI/jgIJcbiAgICAgKiDku4XlnKggV2ViIOaooeW8j+S4i+acieaViOOAglxuICAgICAqIEBtZXRob2QgcmVzaXplV2l0aEJyb3dzZXJTaXplXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBlbmFibGVkIC0gV2hldGhlciBlbmFibGUgYXV0b21hdGljIHJlc2l6ZSB3aXRoIGJyb3dzZXIncyByZXNpemUgZXZlbnRcbiAgICAgKi9cbiAgICByZXNpemVXaXRoQnJvd3NlclNpemU6IGZ1bmN0aW9uIHJlc2l6ZVdpdGhCcm93c2VyU2l6ZShlbmFibGVkKSB7XG4gICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgICAvL2VuYWJsZVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9yZXNpemVXaXRoQnJvd3NlclNpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNpemVXaXRoQnJvd3NlclNpemUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl9yZXNpemVFdmVudCk7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgdGhpcy5fb3JpZW50YXRpb25DaGFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9kaXNhYmxlXG4gICAgICAgICAgICBpZiAodGhpcy5fcmVzaXplV2l0aEJyb3dzZXJTaXplKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzaXplV2l0aEJyb3dzZXJTaXplID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX3Jlc2l6ZUV2ZW50KTtcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLl9vcmllbnRhdGlvbkNoYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFNldHMgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciBjYy52aWV3J3MgcmVzaXplIGFjdGlvbiw8YnIvPlxuICAgICAqIHRoaXMgY2FsbGJhY2sgd2lsbCBiZSBpbnZva2VkIGJlZm9yZSBhcHBseWluZyByZXNvbHV0aW9uIHBvbGljeSwgPGJyLz5cbiAgICAgKiBzbyB5b3UgY2FuIGRvIGFueSBhZGRpdGlvbmFsIG1vZGlmaWNhdGlvbnMgd2l0aGluIHRoZSBjYWxsYmFjay48YnIvPlxuICAgICAqIFVzZWZ1bCBvbmx5IG9uIHdlYi5cbiAgICAgKiAhI3poIOiuvue9riBjYy52aWV3IOiwg+aVtOinhueql+WwuuWvuOihjOS4uueahOWbnuiwg+WHveaVsO+8jFxuICAgICAqIOi/meS4quWbnuiwg+WHveaVsOS8muWcqOW6lOeUqOmAgumFjeaooeW8j+S5i+WJjeiiq+iwg+eUqO+8jFxuICAgICAqIOWboOatpOS9oOWPr+S7peWcqOi/meS4quWbnuiwg+WHveaVsOWGhea3u+WKoOS7u+aEj+mZhOWKoOaUueWPmO+8jFxuICAgICAqIOS7heWcqCBXZWIg5bmz5Y+w5LiL5pyJ5pWI44CCXG4gICAgICogQG1ldGhvZCBzZXRSZXNpemVDYWxsYmFja1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258TnVsbH0gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBzZXRSZXNpemVDYWxsYmFjazogZnVuY3Rpb24gc2V0UmVzaXplQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKENDX0VESVRPUikgcmV0dXJuO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nIHx8IGNhbGxiYWNrID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZUNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFNldHMgdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBnYW1lLCBpdCBjYW4gYmUgbGFuZHNjYXBlLCBwb3J0cmFpdCBvciBhdXRvLlxuICAgICAqIFdoZW4gc2V0IGl0IHRvIGxhbmRzY2FwZSBvciBwb3J0cmFpdCwgYW5kIHNjcmVlbiB3L2ggcmF0aW8gZG9lc24ndCBmaXQsIFxuICAgICAqIGNjLnZpZXcgd2lsbCBhdXRvbWF0aWNhbGx5IHJvdGF0ZSB0aGUgZ2FtZSBjYW52YXMgdXNpbmcgQ1NTLlxuICAgICAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSBhbnkgZWZmZWN0IGluIG5hdGl2ZSwgXG4gICAgICogaW4gbmF0aXZlLCB5b3UgbmVlZCB0byBzZXQgdGhlIGFwcGxpY2F0aW9uIG9yaWVudGF0aW9uIGluIG5hdGl2ZSBwcm9qZWN0IHNldHRpbmdzXG4gICAgICogISN6aCDorr7nva7muLjmiI/lsY/luZXmnJ3lkJHvvIzlroPog73lpJ/mmK/mqKrniYjvvIznq5bniYjmiJboh6rliqjjgIJcbiAgICAgKiDlvZPorr7nva7kuLrmqKrniYjmiJbnq5bniYjvvIzlubbkuJTlsY/luZXnmoTlrr3pq5jmr5TkvovkuI3ljLnphY3ml7bvvIxcbiAgICAgKiBjYy52aWV3IOS8muiHquWKqOeUqCBDU1Mg5peL6L2s5ri45oiP5Zy65pmv55qEIGNhbnZhc++8jFxuICAgICAqIOi/meS4quaWueazleS4jeS8muWvuSBuYXRpdmUg6YOo5YiG5Lqn55Sf5Lu75L2V5b2x5ZON77yM5a+55LqOIG5hdGl2ZSDogIzoqIDvvIzkvaDpnIDopoHlnKjlupTnlKjorr7nva7kuK3nmoTorr7nva7mjpLniYjjgIJcbiAgICAgKiBAbWV0aG9kIHNldE9yaWVudGF0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9yaWVudGF0aW9uIC0gUG9zc2libGUgdmFsdWVzOiBjYy5tYWNyby5PUklFTlRBVElPTl9MQU5EU0NBUEUgfCBjYy5tYWNyby5PUklFTlRBVElPTl9QT1JUUkFJVCB8IGNjLm1hY3JvLk9SSUVOVEFUSU9OX0FVVE9cbiAgICAgKi9cbiAgICBzZXRPcmllbnRhdGlvbjogZnVuY3Rpb24gc2V0T3JpZW50YXRpb24ob3JpZW50YXRpb24pIHtcbiAgICAgICAgb3JpZW50YXRpb24gPSBvcmllbnRhdGlvbiAmIGNjLm1hY3JvLk9SSUVOVEFUSU9OX0FVVE87XG4gICAgICAgIGlmIChvcmllbnRhdGlvbiAmJiB0aGlzLl9vcmllbnRhdGlvbiAhPT0gb3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX29yaWVudGF0aW9uID0gb3JpZW50YXRpb247XG4gICAgICAgICAgICB2YXIgZGVzaWduV2lkdGggPSB0aGlzLl9vcmlnaW5hbERlc2lnblJlc29sdXRpb25TaXplLndpZHRoO1xuICAgICAgICAgICAgdmFyIGRlc2lnbkhlaWdodCA9IHRoaXMuX29yaWdpbmFsRGVzaWduUmVzb2x1dGlvblNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5zZXREZXNpZ25SZXNvbHV0aW9uU2l6ZShkZXNpZ25XaWR0aCwgZGVzaWduSGVpZ2h0LCB0aGlzLl9yZXNvbHV0aW9uUG9saWN5KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfaW5pdEZyYW1lU2l6ZTogZnVuY3Rpb24gX2luaXRGcmFtZVNpemUoKSB7XG4gICAgICAgIHZhciBsb2NGcmFtZVNpemUgPSB0aGlzLl9mcmFtZVNpemU7XG4gICAgICAgIHZhciB3ID0gX19Ccm93c2VyR2V0dGVyLmF2YWlsV2lkdGgoY2MuZ2FtZS5mcmFtZSk7XG4gICAgICAgIHZhciBoID0gX19Ccm93c2VyR2V0dGVyLmF2YWlsSGVpZ2h0KGNjLmdhbWUuZnJhbWUpO1xuICAgICAgICB2YXIgaXNMYW5kc2NhcGUgPSB3ID49IGg7XG5cbiAgICAgICAgaWYgKENDX0VESVRPUiB8fCAhY2Muc3lzLmlzTW9iaWxlIHx8IGlzTGFuZHNjYXBlICYmIHRoaXMuX29yaWVudGF0aW9uICYgY2MubWFjcm8uT1JJRU5UQVRJT05fTEFORFNDQVBFIHx8ICFpc0xhbmRzY2FwZSAmJiB0aGlzLl9vcmllbnRhdGlvbiAmIGNjLm1hY3JvLk9SSUVOVEFUSU9OX1BPUlRSQUlUKSB7XG4gICAgICAgICAgICBsb2NGcmFtZVNpemUud2lkdGggPSB3O1xuICAgICAgICAgICAgbG9jRnJhbWVTaXplLmhlaWdodCA9IGg7XG4gICAgICAgICAgICBjYy5nYW1lLmNvbnRhaW5lci5zdHlsZVsnLXdlYmtpdC10cmFuc2Zvcm0nXSA9ICdyb3RhdGUoMGRlZyknO1xuICAgICAgICAgICAgY2MuZ2FtZS5jb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gJ3JvdGF0ZSgwZGVnKSc7XG4gICAgICAgICAgICB0aGlzLl9pc1JvdGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvY0ZyYW1lU2l6ZS53aWR0aCA9IGg7XG4gICAgICAgICAgICBsb2NGcmFtZVNpemUuaGVpZ2h0ID0gdztcbiAgICAgICAgICAgIGNjLmdhbWUuY29udGFpbmVyLnN0eWxlWyctd2Via2l0LXRyYW5zZm9ybSddID0gJ3JvdGF0ZSg5MGRlZyknO1xuICAgICAgICAgICAgY2MuZ2FtZS5jb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gJ3JvdGF0ZSg5MGRlZyknO1xuICAgICAgICAgICAgY2MuZ2FtZS5jb250YWluZXIuc3R5bGVbJy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbiddID0gJzBweCAwcHggMHB4JztcbiAgICAgICAgICAgIGNjLmdhbWUuY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9ICcwcHggMHB4IDBweCc7XG4gICAgICAgICAgICB0aGlzLl9pc1JvdGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vcmllbnRhdGlvbkNoYW5naW5nKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjYy52aWV3Ll9vcmllbnRhdGlvbkNoYW5naW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBoYWNrXG4gICAgX2FkanVzdFNpemVLZWVwQ2FudmFzU2l6ZTogZnVuY3Rpb24gX2FkanVzdFNpemVLZWVwQ2FudmFzU2l6ZSgpIHtcbiAgICAgICAgdmFyIGRlc2lnbldpZHRoID0gdGhpcy5fb3JpZ2luYWxEZXNpZ25SZXNvbHV0aW9uU2l6ZS53aWR0aDtcbiAgICAgICAgdmFyIGRlc2lnbkhlaWdodCA9IHRoaXMuX29yaWdpbmFsRGVzaWduUmVzb2x1dGlvblNpemUuaGVpZ2h0O1xuICAgICAgICBpZiAoZGVzaWduV2lkdGggPiAwKSB0aGlzLnNldERlc2lnblJlc29sdXRpb25TaXplKGRlc2lnbldpZHRoLCBkZXNpZ25IZWlnaHQsIHRoaXMuX3Jlc29sdXRpb25Qb2xpY3kpO1xuICAgIH0sXG5cbiAgICBfc2V0Vmlld3BvcnRNZXRhOiBmdW5jdGlvbiBfc2V0Vmlld3BvcnRNZXRhKG1ldGFzLCBvdmVyd3JpdGUpIHtcbiAgICAgICAgdmFyIHZwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb2Nvc01ldGFFbGVtZW50XCIpO1xuICAgICAgICBpZiAodnAgJiYgb3ZlcndyaXRlKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5oZWFkLnJlbW92ZUNoaWxkKHZwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKFwidmlld3BvcnRcIiksXG4gICAgICAgICAgICBjdXJyZW50VlAgPSBlbGVtcyA/IGVsZW1zWzBdIDogbnVsbCxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBwYXR0ZXJuO1xuXG4gICAgICAgIGNvbnRlbnQgPSBjdXJyZW50VlAgPyBjdXJyZW50VlAuY29udGVudCA6IFwiXCI7XG4gICAgICAgIHZwID0gdnAgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm1ldGFcIik7XG4gICAgICAgIHZwLmlkID0gXCJjb2Nvc01ldGFFbGVtZW50XCI7XG4gICAgICAgIHZwLm5hbWUgPSBcInZpZXdwb3J0XCI7XG4gICAgICAgIHZwLmNvbnRlbnQgPSBcIlwiO1xuXG4gICAgICAgIGZvciAoa2V5IGluIG1ldGFzKSB7XG4gICAgICAgICAgICBpZiAoY29udGVudC5pbmRleE9mKGtleSkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ICs9IFwiLFwiICsga2V5ICsgXCI9XCIgKyBtZXRhc1trZXldO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvdmVyd3JpdGUpIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuID0gbmV3IFJlZ0V4cChrZXkgKyBcIlxccyo9XFxzKlteLF0rXCIpO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQucmVwbGFjZShwYXR0ZXJuLCBrZXkgKyBcIj1cIiArIG1ldGFzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgvXiwvLnRlc3QoY29udGVudCkpIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cigxKTtcblxuICAgICAgICB2cC5jb250ZW50ID0gY29udGVudDtcbiAgICAgICAgLy8gRm9yIGFkb3B0aW5nIGNlcnRhaW4gYW5kcm9pZCBkZXZpY2VzIHdoaWNoIGRvbid0IHN1cHBvcnQgc2Vjb25kIHZpZXdwb3J0XG4gICAgICAgIGlmIChjdXJyZW50VlApIGN1cnJlbnRWUC5jb250ZW50ID0gY29udGVudDtcblxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHZwKTtcbiAgICB9LFxuXG4gICAgX2FkanVzdFZpZXdwb3J0TWV0YTogZnVuY3Rpb24gX2FkanVzdFZpZXdwb3J0TWV0YSgpIHtcbiAgICAgICAgLy8gTk9URTogbm90IG1lcmdlIGludG8gdjIuMi4wLCBtb3ZlIGludG8gQWxpcGF5IGFkYXB0ZXJcbiAgICAgICAgaWYgKHRoaXMuX2lzQWRqdXN0Vmlld3BvcnQgJiYgIUNDX0pTQiAmJiAhQ0NfUlVOVElNRSAmJiAhQ0NfV0VDSEFUR0FNRSAmJiAhQ0NfUVFQTEFZICYmICFpc0JhaWR1R2FtZSAmJiAhaXNYaWFvbWlHYW1lICYmICFpc0FsaXBheUdhbWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFZpZXdwb3J0TWV0YShfX0Jyb3dzZXJHZXR0ZXIubWV0YSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5faXNBZGp1c3RWaWV3cG9ydCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXRzIHdoZXRoZXIgdGhlIGVuZ2luZSBtb2RpZnkgdGhlIFwidmlld3BvcnRcIiBtZXRhIGluIHlvdXIgd2ViIHBhZ2UuPGJyLz5cbiAgICAgKiBJdCdzIGVuYWJsZWQgYnkgZGVmYXVsdCwgd2Ugc3Ryb25nbHkgc3VnZ2VzdCB5b3Ugbm90IHRvIGRpc2FibGUgaXQuPGJyLz5cbiAgICAgKiBBbmQgZXZlbiB3aGVuIGl0J3MgZW5hYmxlZCwgeW91IGNhbiBzdGlsbCBzZXQgeW91ciBvd24gXCJ2aWV3cG9ydFwiIG1ldGEsIGl0IHdvbid0IGJlIG92ZXJyaWRkZW48YnIvPlxuICAgICAqIE9ubHkgdXNlZnVsIG9uIHdlYlxuICAgICAqICEjemgg6K6+572u5byV5pOO5piv5ZCm6LCD5pW0IHZpZXdwb3J0IG1ldGEg5p2l6YWN5ZCI5bGP5bmV6YCC6YWN44CCXG4gICAgICog6buY6K6k6K6+572u5Li65ZCv5Yqo77yM5oiR5Lus5by654OI5bu66K6u5L2g5LiN6KaB5bCG5a6D6K6+572u5Li65YWz6Zet44CCXG4gICAgICog5Y2z5L2/5b2T5a6D5ZCv5Yqo5pe277yM5L2g5LuN54S26IO95aSf6K6+572u5L2g55qEIHZpZXdwb3J0IG1ldGHvvIzlroPkuI3kvJrooqvopobnm5bjgIJcbiAgICAgKiDku4XlnKggV2ViIOaooeW8j+S4i+acieaViFxuICAgICAqIEBtZXRob2QgYWRqdXN0Vmlld3BvcnRNZXRhXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBlbmFibGVkIC0gRW5hYmxlIGF1dG9tYXRpYyBtb2RpZmljYXRpb24gdG8gXCJ2aWV3cG9ydFwiIG1ldGFcbiAgICAgKi9cbiAgICBhZGp1c3RWaWV3cG9ydE1ldGE6IGZ1bmN0aW9uIGFkanVzdFZpZXdwb3J0TWV0YShlbmFibGVkKSB7XG4gICAgICAgIHRoaXMuX2lzQWRqdXN0Vmlld3BvcnQgPSBlbmFibGVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0aW5hIHN1cHBvcnQgaXMgZW5hYmxlZCBieSBkZWZhdWx0IGZvciBBcHBsZSBkZXZpY2UgYnV0IGRpc2FibGVkIGZvciBvdGhlciBkZXZpY2VzLDxici8+XG4gICAgICogaXQgdGFrZXMgZWZmZWN0IG9ubHkgd2hlbiB5b3UgY2FsbGVkIHNldERlc2lnblJlc29sdXRpb25Qb2xpY3k8YnIvPlxuICAgICAqIE9ubHkgdXNlZnVsIG9uIHdlYlxuICAgICAqICEjemgg5a+55LqOIEFwcGxlIOi/meenjeaUr+aMgSBSZXRpbmEg5pi+56S655qE6K6+5aSH5LiK6buY6K6k6L+b6KGM5LyY5YyW6ICM5YW25LuW57G75Z6L6K6+5aSH6buY6K6k5LiN6L+b6KGM5LyY5YyW77yMXG4gICAgICog5a6D5LuF5Lya5Zyo5L2g6LCD55SoIHNldERlc2lnblJlc29sdXRpb25Qb2xpY3kg5pa55rOV5pe25pyJ5b2x5ZON44CCXG4gICAgICog5LuF5ZyoIFdlYiDmqKHlvI/kuIvmnInmlYjjgIJcbiAgICAgKiBAbWV0aG9kIGVuYWJsZVJldGluYVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5hYmxlZCAtIEVuYWJsZSBvciBkaXNhYmxlIHJldGluYSBkaXNwbGF5XG4gICAgICovXG4gICAgZW5hYmxlUmV0aW5hOiBmdW5jdGlvbiBlbmFibGVSZXRpbmEoZW5hYmxlZCkge1xuICAgICAgICB0aGlzLl9yZXRpbmFFbmFibGVkID0gISFlbmFibGVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogQ2hlY2sgd2hldGhlciByZXRpbmEgZGlzcGxheSBpcyBlbmFibGVkLjxici8+XG4gICAgICogT25seSB1c2VmdWwgb24gd2ViXG4gICAgICogISN6aCDmo4Dmn6XmmK/lkKblr7kgUmV0aW5hIOaYvuekuuiuvuWkh+i/m+ihjOS8mOWMluOAglxuICAgICAqIOS7heWcqCBXZWIg5qih5byP5LiL5pyJ5pWI44CCXG4gICAgICogQG1ldGhvZCBpc1JldGluYUVuYWJsZWRcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzUmV0aW5hRW5hYmxlZDogZnVuY3Rpb24gaXNSZXRpbmFFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmV0aW5hRW5hYmxlZDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBXaGV0aGVyIHRvIEVuYWJsZSBvbiBhbnRpLWFsaWFzXG4gICAgICogISN6aCDmjqfliLbmipfplK/pvb/mmK/lkKblvIDlkK9cbiAgICAgKiBAbWV0aG9kIGVuYWJsZUFudGlBbGlhc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5hYmxlZCAtIEVuYWJsZSBvciBub3QgYW50aS1hbGlhc1xuICAgICAqL1xuICAgIGVuYWJsZUFudGlBbGlhczogZnVuY3Rpb24gZW5hYmxlQW50aUFsaWFzKGVuYWJsZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FudGlBbGlhc0VuYWJsZWQgPT09IGVuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hbnRpQWxpYXNFbmFibGVkID0gZW5hYmxlZDtcbiAgICAgICAgaWYgKGNjLmdhbWUucmVuZGVyVHlwZSA9PT0gY2MuZ2FtZS5SRU5ERVJfVFlQRV9XRUJHTCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2MubG9hZGVyLl9jYWNoZTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gY2FjaGVba2V5XTtcbiAgICAgICAgICAgICAgICB2YXIgdGV4ID0gaXRlbSAmJiBpdGVtLmNvbnRlbnQgaW5zdGFuY2VvZiBjYy5UZXh0dXJlMkQgPyBpdGVtLmNvbnRlbnQgOiBudWxsO1xuICAgICAgICAgICAgICAgIGlmICh0ZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIEZpbHRlciA9IGNjLlRleHR1cmUyRC5GaWx0ZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXguc2V0RmlsdGVycyhGaWx0ZXIuTElORUFSLCBGaWx0ZXIuTElORUFSKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleC5zZXRGaWx0ZXJzKEZpbHRlci5ORUFSRVNULCBGaWx0ZXIuTkVBUkVTVCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY2MuZ2FtZS5yZW5kZXJUeXBlID09PSBjYy5nYW1lLlJFTkRFUl9UWVBFX0NBTlZBUykge1xuICAgICAgICAgICAgdmFyIGN0eCA9IGNjLmdhbWUuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgICAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZW5hYmxlZDtcbiAgICAgICAgICAgIGN0eC5tb3pJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUmV0dXJucyB3aGV0aGVyIHRoZSBjdXJyZW50IGVuYWJsZSBvbiBhbnRpLWFsaWFzXG4gICAgICogISN6aCDov5Tlm57lvZPliY3mmK/lkKbmipfplK/pvb9cbiAgICAgKiBAbWV0aG9kIGlzQW50aUFsaWFzRW5hYmxlZFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNBbnRpQWxpYXNFbmFibGVkOiBmdW5jdGlvbiBpc0FudGlBbGlhc0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hbnRpQWxpYXNFbmFibGVkO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIElmIGVuYWJsZWQsIHRoZSBhcHBsaWNhdGlvbiB3aWxsIHRyeSBhdXRvbWF0aWNhbGx5IHRvIGVudGVyIGZ1bGwgc2NyZWVuIG1vZGUgb24gbW9iaWxlIGRldmljZXM8YnIvPlxuICAgICAqIFlvdSBjYW4gcGFzcyB0cnVlIGFzIHBhcmFtZXRlciB0byBlbmFibGUgaXQgYW5kIGRpc2FibGUgaXQgYnkgcGFzc2luZyBmYWxzZS48YnIvPlxuICAgICAqIE9ubHkgdXNlZnVsIG9uIHdlYlxuICAgICAqICEjemgg5ZCv5Yqo5pe277yM56e75Yqo56uv5ri45oiP5Lya5Zyo56e75Yqo56uv6Ieq5Yqo5bCd6K+V6L+b5YWl5YWo5bGP5qih5byP44CCXG4gICAgICog5L2g6IO95aSf5Lyg5YWlIHRydWUg5Li65Y+C5pWw5Y675ZCv5Yqo5a6D77yM55SoIGZhbHNlIOWPguaVsOadpeWFs+mXreWug+OAglxuICAgICAqIEBtZXRob2QgZW5hYmxlQXV0b0Z1bGxTY3JlZW5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuYWJsZWQgLSBFbmFibGUgb3IgZGlzYWJsZSBhdXRvIGZ1bGwgc2NyZWVuIG9uIG1vYmlsZSBkZXZpY2VzXG4gICAgICovXG4gICAgZW5hYmxlQXV0b0Z1bGxTY3JlZW46IGZ1bmN0aW9uIGVuYWJsZUF1dG9GdWxsU2NyZWVuKGVuYWJsZWQpIHtcbiAgICAgICAgaWYgKGVuYWJsZWQgJiYgZW5hYmxlZCAhPT0gdGhpcy5fYXV0b0Z1bGxTY3JlZW4gJiYgY2Muc3lzLmlzTW9iaWxlICYmIGNjLnN5cy5icm93c2VyVHlwZSAhPT0gY2Muc3lzLkJST1dTRVJfVFlQRV9XRUNIQVQpIHtcbiAgICAgICAgICAgIC8vIEF1dG9tYXRpY2FsbHkgZnVsbCBzY3JlZW4gd2hlbiB1c2VyIHRvdWNoZXMgb24gbW9iaWxlIHZlcnNpb25cbiAgICAgICAgICAgIHRoaXMuX2F1dG9GdWxsU2NyZWVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGNjLnNjcmVlbi5hdXRvRnVsbFNjcmVlbihjYy5nYW1lLmZyYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2F1dG9GdWxsU2NyZWVuID0gZmFsc2U7XG4gICAgICAgICAgICBjYy5zY3JlZW4uZGlzYWJsZUF1dG9GdWxsU2NyZWVuKGNjLmdhbWUuZnJhbWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBDaGVjayB3aGV0aGVyIGF1dG8gZnVsbCBzY3JlZW4gaXMgZW5hYmxlZC48YnIvPlxuICAgICAqIE9ubHkgdXNlZnVsIG9uIHdlYlxuICAgICAqICEjemgg5qOA5p+l6Ieq5Yqo6L+b5YWl5YWo5bGP5qih5byP5piv5ZCm5ZCv5Yqo44CCXG4gICAgICog5LuF5ZyoIFdlYiDmqKHlvI/kuIvmnInmlYjjgIJcbiAgICAgKiBAbWV0aG9kIGlzQXV0b0Z1bGxTY3JlZW5FbmFibGVkXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gQXV0byBmdWxsIHNjcmVlbiBlbmFibGVkIG9yIG5vdFxuICAgICAqL1xuICAgIGlzQXV0b0Z1bGxTY3JlZW5FbmFibGVkOiBmdW5jdGlvbiBpc0F1dG9GdWxsU2NyZWVuRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9GdWxsU2NyZWVuO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIE5vdCBzdXBwb3J0IG9uIG5hdGl2ZS48YnIvPlxuICAgICAqIE9uIHdlYiwgaXQgc2V0cyB0aGUgc2l6ZSBvZiB0aGUgY2FudmFzLlxuICAgICAqICEjemgg6L+Z5Liq5pa55rOV5bm25LiN5pSv5oyBIG5hdGl2ZSDlubPlj7DvvIzlnKggV2ViIOW5s+WPsOS4i++8jOWPr+S7peeUqOadpeiuvue9riBjYW52YXMg5bC65a+444CCXG4gICAgICogQG1ldGhvZCBzZXRDYW52YXNTaXplXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICAgICAqL1xuICAgIHNldENhbnZhc1NpemU6IGZ1bmN0aW9uIHNldENhbnZhc1NpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICB2YXIgY2FudmFzID0gY2MuZ2FtZS5jYW52YXM7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBjYy5nYW1lLmNvbnRhaW5lcjtcblxuICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aCAqIHRoaXMuX2RldmljZVBpeGVsUmF0aW87XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKiB0aGlzLl9kZXZpY2VQaXhlbFJhdGlvO1xuXG4gICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG5cbiAgICAgICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgICAgICBjb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcblxuICAgICAgICB0aGlzLl9yZXNpemVFdmVudCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyB0aGUgY2FudmFzIHNpemUgb2YgdGhlIHZpZXcuPGJyLz5cbiAgICAgKiBPbiBuYXRpdmUgcGxhdGZvcm1zLCBpdCByZXR1cm5zIHRoZSBzY3JlZW4gc2l6ZSBzaW5jZSB0aGUgdmlldyBpcyBhIGZ1bGxzY3JlZW4gdmlldy48YnIvPlxuICAgICAqIE9uIHdlYiwgaXQgcmV0dXJucyB0aGUgc2l6ZSBvZiB0aGUgY2FudmFzIGVsZW1lbnQuXG4gICAgICogISN6aCDov5Tlm57op4blm77kuK0gY2FudmFzIOeahOWwuuWvuOOAglxuICAgICAqIOWcqCBuYXRpdmUg5bmz5Y+w5LiL77yM5a6D6L+U5Zue5YWo5bGP6KeG5Zu+5LiL5bGP5bmV55qE5bC65a+444CCXG4gICAgICog5ZyoIFdlYiDlubPlj7DkuIvvvIzlroPov5Tlm54gY2FudmFzIOWFg+e0oOWwuuWvuOOAglxuICAgICAqIEBtZXRob2QgZ2V0Q2FudmFzU2l6ZVxuICAgICAqIEByZXR1cm4ge1NpemV9XG4gICAgICovXG4gICAgZ2V0Q2FudmFzU2l6ZTogZnVuY3Rpb24gZ2V0Q2FudmFzU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIGNjLnNpemUoY2MuZ2FtZS5jYW52YXMud2lkdGgsIGNjLmdhbWUuY2FudmFzLmhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXR1cm5zIHRoZSBmcmFtZSBzaXplIG9mIHRoZSB2aWV3Ljxici8+XG4gICAgICogT24gbmF0aXZlIHBsYXRmb3JtcywgaXQgcmV0dXJucyB0aGUgc2NyZWVuIHNpemUgc2luY2UgdGhlIHZpZXcgaXMgYSBmdWxsc2NyZWVuIHZpZXcuPGJyLz5cbiAgICAgKiBPbiB3ZWIsIGl0IHJldHVybnMgdGhlIHNpemUgb2YgdGhlIGNhbnZhcydzIG91dGVyIERPTSBlbGVtZW50LlxuICAgICAqICEjemgg6L+U5Zue6KeG5Zu+5Lit6L655qGG5bC65a+444CCXG4gICAgICog5ZyoIG5hdGl2ZSDlubPlj7DkuIvvvIzlroPov5Tlm57lhajlsY/op4blm77kuIvlsY/luZXnmoTlsLrlr7jjgIJcbiAgICAgKiDlnKggd2ViIOW5s+WPsOS4i++8jOWug+i/lOWbniBjYW52YXMg5YWD57Sg55qE5aSW5bGCIERPTSDlhYPntKDlsLrlr7jjgIJcbiAgICAgKiBAbWV0aG9kIGdldEZyYW1lU2l6ZVxuICAgICAqIEByZXR1cm4ge1NpemV9XG4gICAgICovXG4gICAgZ2V0RnJhbWVTaXplOiBmdW5jdGlvbiBnZXRGcmFtZVNpemUoKSB7XG4gICAgICAgIHJldHVybiBjYy5zaXplKHRoaXMuX2ZyYW1lU2l6ZS53aWR0aCwgdGhpcy5fZnJhbWVTaXplLmhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBPbiBuYXRpdmUsIGl0IHNldHMgdGhlIGZyYW1lIHNpemUgb2Ygdmlldy48YnIvPlxuICAgICAqIE9uIHdlYiwgaXQgc2V0cyB0aGUgc2l6ZSBvZiB0aGUgY2FudmFzJ3Mgb3V0ZXIgRE9NIGVsZW1lbnQuXG4gICAgICogISN6aCDlnKggbmF0aXZlIOW5s+WPsOS4i++8jOiuvue9ruinhuWbvuahhuaetuWwuuWvuOOAglxuICAgICAqIOWcqCB3ZWIg5bmz5Y+w5LiL77yM6K6+572uIGNhbnZhcyDlpJblsYIgRE9NIOWFg+e0oOWwuuWvuOOAglxuICAgICAqIEBtZXRob2Qgc2V0RnJhbWVTaXplXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICAgICAqL1xuICAgIHNldEZyYW1lU2l6ZTogZnVuY3Rpb24gc2V0RnJhbWVTaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5fZnJhbWVTaXplLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuX2ZyYW1lU2l6ZS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGNjLmdhbWUuZnJhbWUuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcbiAgICAgICAgY2MuZ2FtZS5mcmFtZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XG4gICAgICAgIHRoaXMuX3Jlc2l6ZUV2ZW50KHRydWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyB0aGUgdmlzaWJsZSBhcmVhIHNpemUgb2YgdGhlIHZpZXcgcG9ydC5cbiAgICAgKiAhI3poIOi/lOWbnuinhuWbvueql+WPo+WPr+ingeWMuuWfn+WwuuWvuOOAglxuICAgICAqIEBtZXRob2QgZ2V0VmlzaWJsZVNpemVcbiAgICAgKiBAcmV0dXJuIHtTaXplfVxuICAgICAqL1xuICAgIGdldFZpc2libGVTaXplOiBmdW5jdGlvbiBnZXRWaXNpYmxlU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIGNjLnNpemUodGhpcy5fdmlzaWJsZVJlY3Qud2lkdGgsIHRoaXMuX3Zpc2libGVSZWN0LmhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXR1cm5zIHRoZSB2aXNpYmxlIGFyZWEgc2l6ZSBvZiB0aGUgdmlldyBwb3J0LlxuICAgICAqICEjemgg6L+U5Zue6KeG5Zu+56qX5Y+j5Y+v6KeB5Yy65Z+f5YOP57Sg5bC65a+444CCXG4gICAgICogQG1ldGhvZCBnZXRWaXNpYmxlU2l6ZUluUGl4ZWxcbiAgICAgKiBAcmV0dXJuIHtTaXplfVxuICAgICAqL1xuICAgIGdldFZpc2libGVTaXplSW5QaXhlbDogZnVuY3Rpb24gZ2V0VmlzaWJsZVNpemVJblBpeGVsKCkge1xuICAgICAgICByZXR1cm4gY2Muc2l6ZSh0aGlzLl92aXNpYmxlUmVjdC53aWR0aCAqIHRoaXMuX3NjYWxlWCwgdGhpcy5fdmlzaWJsZVJlY3QuaGVpZ2h0ICogdGhpcy5fc2NhbGVZKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgdGhlIHZpc2libGUgb3JpZ2luIG9mIHRoZSB2aWV3IHBvcnQuXG4gICAgICogISN6aCDov5Tlm57op4blm77nqpflj6Plj6/op4HljLrln5/ljp/ngrnjgIJcbiAgICAgKiBAbWV0aG9kIGdldFZpc2libGVPcmlnaW5cbiAgICAgKiBAcmV0dXJuIHtWZWMyfVxuICAgICAqL1xuICAgIGdldFZpc2libGVPcmlnaW46IGZ1bmN0aW9uIGdldFZpc2libGVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiBjYy52Mih0aGlzLl92aXNpYmxlUmVjdC54LCB0aGlzLl92aXNpYmxlUmVjdC55KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgdGhlIHZpc2libGUgb3JpZ2luIG9mIHRoZSB2aWV3IHBvcnQuXG4gICAgICogISN6aCDov5Tlm57op4blm77nqpflj6Plj6/op4HljLrln5/lg4/ntKDljp/ngrnjgIJcbiAgICAgKiBAbWV0aG9kIGdldFZpc2libGVPcmlnaW5JblBpeGVsXG4gICAgICogQHJldHVybiB7VmVjMn1cbiAgICAgKi9cbiAgICBnZXRWaXNpYmxlT3JpZ2luSW5QaXhlbDogZnVuY3Rpb24gZ2V0VmlzaWJsZU9yaWdpbkluUGl4ZWwoKSB7XG4gICAgICAgIHJldHVybiBjYy52Mih0aGlzLl92aXNpYmxlUmVjdC54ICogdGhpcy5fc2NhbGVYLCB0aGlzLl92aXNpYmxlUmVjdC55ICogdGhpcy5fc2NhbGVZKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgcmVzb2x1dGlvbiBwb2xpY3lcbiAgICAgKiAhI3poIOi/lOWbnuW9k+WJjeWIhui+qOeOh+aWueahiFxuICAgICAqIEBzZWUgY2MuUmVzb2x1dGlvblBvbGljeVxuICAgICAqIEBtZXRob2QgZ2V0UmVzb2x1dGlvblBvbGljeVxuICAgICAqIEByZXR1cm4ge1Jlc29sdXRpb25Qb2xpY3l9XG4gICAgICovXG4gICAgZ2V0UmVzb2x1dGlvblBvbGljeTogZnVuY3Rpb24gZ2V0UmVzb2x1dGlvblBvbGljeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdXRpb25Qb2xpY3k7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHJlc29sdXRpb24gcG9saWN5XG4gICAgICogISN6aCDorr7nva7lvZPliY3liIbovqjnjofmqKHlvI9cbiAgICAgKiBAc2VlIGNjLlJlc29sdXRpb25Qb2xpY3lcbiAgICAgKiBAbWV0aG9kIHNldFJlc29sdXRpb25Qb2xpY3lcbiAgICAgKiBAcGFyYW0ge1Jlc29sdXRpb25Qb2xpY3l8TnVtYmVyfSByZXNvbHV0aW9uUG9saWN5XG4gICAgICovXG4gICAgc2V0UmVzb2x1dGlvblBvbGljeTogZnVuY3Rpb24gc2V0UmVzb2x1dGlvblBvbGljeShyZXNvbHV0aW9uUG9saWN5KSB7XG4gICAgICAgIHZhciBfdCA9IHRoaXM7XG4gICAgICAgIGlmIChyZXNvbHV0aW9uUG9saWN5IGluc3RhbmNlb2YgY2MuUmVzb2x1dGlvblBvbGljeSkge1xuICAgICAgICAgICAgX3QuX3Jlc29sdXRpb25Qb2xpY3kgPSByZXNvbHV0aW9uUG9saWN5O1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSBjb21wYXRpYmlsaXR5IHdpdGggSlNCXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBfbG9jUG9saWN5ID0gY2MuUmVzb2x1dGlvblBvbGljeTtcbiAgICAgICAgICAgICAgICBpZiAocmVzb2x1dGlvblBvbGljeSA9PT0gX2xvY1BvbGljeS5FWEFDVF9GSVQpIF90Ll9yZXNvbHV0aW9uUG9saWN5ID0gX3QuX3JwRXhhY3RGaXQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlc29sdXRpb25Qb2xpY3kgPT09IF9sb2NQb2xpY3kuU0hPV19BTEwpIF90Ll9yZXNvbHV0aW9uUG9saWN5ID0gX3QuX3JwU2hvd0FsbDtcbiAgICAgICAgICAgICAgICBpZiAocmVzb2x1dGlvblBvbGljeSA9PT0gX2xvY1BvbGljeS5OT19CT1JERVIpIF90Ll9yZXNvbHV0aW9uUG9saWN5ID0gX3QuX3JwTm9Cb3JkZXI7XG4gICAgICAgICAgICAgICAgaWYgKHJlc29sdXRpb25Qb2xpY3kgPT09IF9sb2NQb2xpY3kuRklYRURfSEVJR0hUKSBfdC5fcmVzb2x1dGlvblBvbGljeSA9IF90Ll9ycEZpeGVkSGVpZ2h0O1xuICAgICAgICAgICAgICAgIGlmIChyZXNvbHV0aW9uUG9saWN5ID09PSBfbG9jUG9saWN5LkZJWEVEX1dJRFRIKSBfdC5fcmVzb2x1dGlvblBvbGljeSA9IF90Ll9ycEZpeGVkV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTZXRzIHRoZSByZXNvbHV0aW9uIHBvbGljeSB3aXRoIGRlc2lnbmVkIHZpZXcgc2l6ZSBpbiBwb2ludHMuPGJyLz5cbiAgICAgKiBUaGUgcmVzb2x1dGlvbiBwb2xpY3kgaW5jbHVkZTogPGJyLz5cbiAgICAgKiBbMV0gUmVzb2x1dGlvbkV4YWN0Rml0ICAgICAgIEZpbGwgc2NyZWVuIGJ5IHN0cmV0Y2gtdG8tZml0OiBpZiB0aGUgZGVzaWduIHJlc29sdXRpb24gcmF0aW8gb2Ygd2lkdGggdG8gaGVpZ2h0IGlzIGRpZmZlcmVudCBmcm9tIHRoZSBzY3JlZW4gcmVzb2x1dGlvbiByYXRpbywgeW91ciBnYW1lIHZpZXcgd2lsbCBiZSBzdHJldGNoZWQuPGJyLz5cbiAgICAgKiBbMl0gUmVzb2x1dGlvbk5vQm9yZGVyICAgICAgIEZ1bGwgc2NyZWVuIHdpdGhvdXQgYmxhY2sgYm9yZGVyOiBpZiB0aGUgZGVzaWduIHJlc29sdXRpb24gcmF0aW8gb2Ygd2lkdGggdG8gaGVpZ2h0IGlzIGRpZmZlcmVudCBmcm9tIHRoZSBzY3JlZW4gcmVzb2x1dGlvbiByYXRpbywgdHdvIGFyZWFzIG9mIHlvdXIgZ2FtZSB2aWV3IHdpbGwgYmUgY3V0Ljxici8+XG4gICAgICogWzNdIFJlc29sdXRpb25TaG93QWxsICAgICAgICBGdWxsIHNjcmVlbiB3aXRoIGJsYWNrIGJvcmRlcjogaWYgdGhlIGRlc2lnbiByZXNvbHV0aW9uIHJhdGlvIG9mIHdpZHRoIHRvIGhlaWdodCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgc2NyZWVuIHJlc29sdXRpb24gcmF0aW8sIHR3byBibGFjayBib3JkZXJzIHdpbGwgYmUgc2hvd24uPGJyLz5cbiAgICAgKiBbNF0gUmVzb2x1dGlvbkZpeGVkSGVpZ2h0ICAgIFNjYWxlIHRoZSBjb250ZW50J3MgaGVpZ2h0IHRvIHNjcmVlbidzIGhlaWdodCBhbmQgcHJvcG9ydGlvbmFsbHkgc2NhbGUgaXRzIHdpZHRoPGJyLz5cbiAgICAgKiBbNV0gUmVzb2x1dGlvbkZpeGVkV2lkdGggICAgIFNjYWxlIHRoZSBjb250ZW50J3Mgd2lkdGggdG8gc2NyZWVuJ3Mgd2lkdGggYW5kIHByb3BvcnRpb25hbGx5IHNjYWxlIGl0cyBoZWlnaHQ8YnIvPlxuICAgICAqIFtjYy5SZXNvbHV0aW9uUG9saWN5XSAgICAgICAgW1dlYiBvbmx5IGZlYXR1cmVdIEN1c3RvbSByZXNvbHV0aW9uIHBvbGljeSwgY29uc3RydWN0ZWQgYnkgY2MuUmVzb2x1dGlvblBvbGljeTxici8+XG4gICAgICogISN6aCDpgJrov4forr7nva7orr7orqHliIbovqjnjoflkozljLnphY3mqKHlvI/mnaXov5vooYzmuLjmiI/nlLvpnaLnmoTlsY/luZXpgILphY3jgIJcbiAgICAgKiBAbWV0aG9kIHNldERlc2lnblJlc29sdXRpb25TaXplXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIERlc2lnbiByZXNvbHV0aW9uIHdpZHRoLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHQgRGVzaWduIHJlc29sdXRpb24gaGVpZ2h0LlxuICAgICAqIEBwYXJhbSB7UmVzb2x1dGlvblBvbGljeXxOdW1iZXJ9IHJlc29sdXRpb25Qb2xpY3kgVGhlIHJlc29sdXRpb24gcG9saWN5IGRlc2lyZWRcbiAgICAgKi9cbiAgICBzZXREZXNpZ25SZXNvbHV0aW9uU2l6ZTogZnVuY3Rpb24gc2V0RGVzaWduUmVzb2x1dGlvblNpemUod2lkdGgsIGhlaWdodCwgcmVzb2x1dGlvblBvbGljeSkge1xuICAgICAgICAvLyBEZWZlbnNpdmUgY29kZVxuICAgICAgICBpZiAoISh3aWR0aCA+IDAgfHwgaGVpZ2h0ID4gMCkpIHtcbiAgICAgICAgICAgIGNjLmxvZ0lEKDIyMDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRSZXNvbHV0aW9uUG9saWN5KHJlc29sdXRpb25Qb2xpY3kpO1xuICAgICAgICB2YXIgcG9saWN5ID0gdGhpcy5fcmVzb2x1dGlvblBvbGljeTtcbiAgICAgICAgaWYgKHBvbGljeSkge1xuICAgICAgICAgICAgcG9saWN5LnByZUFwcGx5KHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVpbml0IGZyYW1lIHNpemVcbiAgICAgICAgaWYgKGNjLnN5cy5pc01vYmlsZSkgdGhpcy5fYWRqdXN0Vmlld3BvcnRNZXRhKCk7XG5cbiAgICAgICAgLy8gUGVybWl0IHRvIHJlLWRldGVjdCB0aGUgb3JpZW50YXRpb24gb2YgZGV2aWNlLlxuICAgICAgICB0aGlzLl9vcmllbnRhdGlvbkNoYW5naW5nID0gdHJ1ZTtcbiAgICAgICAgLy8gSWYgcmVzaXppbmcsIHRoZW4gZnJhbWUgc2l6ZSBpcyBhbHJlYWR5IGluaXRpYWxpemVkLCB0aGlzIGxvZ2ljIHNob3VsZCBiZSBpbXByb3ZlZFxuICAgICAgICBpZiAoIXRoaXMuX3Jlc2l6aW5nKSB0aGlzLl9pbml0RnJhbWVTaXplKCk7XG5cbiAgICAgICAgaWYgKCFwb2xpY3kpIHtcbiAgICAgICAgICAgIGNjLmxvZ0lEKDIyMDEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb3JpZ2luYWxEZXNpZ25SZXNvbHV0aW9uU2l6ZS53aWR0aCA9IHRoaXMuX2Rlc2lnblJlc29sdXRpb25TaXplLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsRGVzaWduUmVzb2x1dGlvblNpemUuaGVpZ2h0ID0gdGhpcy5fZGVzaWduUmVzb2x1dGlvblNpemUuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICAgIHZhciByZXN1bHQgPSBwb2xpY3kuYXBwbHkodGhpcywgdGhpcy5fZGVzaWduUmVzb2x1dGlvblNpemUpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuc2NhbGUgJiYgcmVzdWx0LnNjYWxlLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgdGhpcy5fc2NhbGVYID0gcmVzdWx0LnNjYWxlWzBdO1xuICAgICAgICAgICAgdGhpcy5fc2NhbGVZID0gcmVzdWx0LnNjYWxlWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3VsdC52aWV3cG9ydCkge1xuICAgICAgICAgICAgdmFyIHZwID0gdGhpcy5fdmlld3BvcnRSZWN0LFxuICAgICAgICAgICAgICAgIHZiID0gdGhpcy5fdmlzaWJsZVJlY3QsXG4gICAgICAgICAgICAgICAgcnYgPSByZXN1bHQudmlld3BvcnQ7XG5cbiAgICAgICAgICAgIHZwLnggPSBydi54O1xuICAgICAgICAgICAgdnAueSA9IHJ2Lnk7XG4gICAgICAgICAgICB2cC53aWR0aCA9IHJ2LndpZHRoO1xuICAgICAgICAgICAgdnAuaGVpZ2h0ID0gcnYuaGVpZ2h0O1xuXG4gICAgICAgICAgICB2Yi54ID0gMDtcbiAgICAgICAgICAgIHZiLnkgPSAwO1xuICAgICAgICAgICAgdmIud2lkdGggPSBydi53aWR0aCAvIHRoaXMuX3NjYWxlWDtcbiAgICAgICAgICAgIHZiLmhlaWdodCA9IHJ2LmhlaWdodCAvIHRoaXMuX3NjYWxlWTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvbGljeS5wb3N0QXBwbHkodGhpcyk7XG4gICAgICAgIGNjLndpblNpemUud2lkdGggPSB0aGlzLl92aXNpYmxlUmVjdC53aWR0aDtcbiAgICAgICAgY2Mud2luU2l6ZS5oZWlnaHQgPSB0aGlzLl92aXNpYmxlUmVjdC5oZWlnaHQ7XG5cbiAgICAgICAgY2MudmlzaWJsZVJlY3QgJiYgY2MudmlzaWJsZVJlY3QuaW5pdCh0aGlzLl92aXNpYmxlUmVjdCk7XG5cbiAgICAgICAgcmVuZGVyZXIudXBkYXRlQ2FtZXJhVmlld3BvcnQoKTtcbiAgICAgICAgdGhpcy5lbWl0KCdkZXNpZ24tcmVzb2x1dGlvbi1jaGFuZ2VkJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXR1cm5zIHRoZSBkZXNpZ25lZCBzaXplIGZvciB0aGUgdmlldy5cbiAgICAgKiBEZWZhdWx0IHJlc29sdXRpb24gc2l6ZSBpcyB0aGUgc2FtZSBhcyAnZ2V0RnJhbWVTaXplJy5cbiAgICAgKiAhI3poIOi/lOWbnuinhuWbvueahOiuvuiuoeWIhui+qOeOh+OAglxuICAgICAqIOm7mOiupOS4i+WIhui+qOeOh+WwuuWvuOWQjCBgZ2V0RnJhbWVTaXplYCDmlrnms5Xnm7jlkIxcbiAgICAgKiBAbWV0aG9kIGdldERlc2lnblJlc29sdXRpb25TaXplXG4gICAgICogQHJldHVybiB7U2l6ZX1cbiAgICAgKi9cbiAgICBnZXREZXNpZ25SZXNvbHV0aW9uU2l6ZTogZnVuY3Rpb24gZ2V0RGVzaWduUmVzb2x1dGlvblNpemUoKSB7XG4gICAgICAgIHJldHVybiBjYy5zaXplKHRoaXMuX2Rlc2lnblJlc29sdXRpb25TaXplLndpZHRoLCB0aGlzLl9kZXNpZ25SZXNvbHV0aW9uU2l6ZS5oZWlnaHQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2V0cyB0aGUgY29udGFpbmVyIHRvIGRlc2lyZWQgcGl4ZWwgcmVzb2x1dGlvbiBhbmQgZml0IHRoZSBnYW1lIGNvbnRlbnQgdG8gaXQuXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyB2ZXJ5IHVzZWZ1bCBmb3IgYWRhcHRhdGlvbiBpbiBtb2JpbGUgYnJvd3NlcnMuXG4gICAgICogSW4gc29tZSBIRCBhbmRyb2lkIGRldmljZXMsIHRoZSByZXNvbHV0aW9uIGlzIHZlcnkgaGlnaCwgYnV0IGl0cyBicm93c2VyIHBlcmZvcm1hbmNlIG1heSBub3QgYmUgdmVyeSBnb29kLlxuICAgICAqIEluIHRoaXMgY2FzZSwgZW5hYmxpbmcgcmV0aW5hIGRpc3BsYXkgaXMgdmVyeSBjb3N0eSBhbmQgbm90IHN1Z2dlc3RlZCwgYW5kIGlmIHJldGluYSBpcyBkaXNhYmxlZCwgdGhlIGltYWdlIG1heSBiZSBibHVycnkuXG4gICAgICogQnV0IHRoaXMgQVBJIGNhbiBiZSBoZWxwZnVsIHRvIHNldCBhIGRlc2lyZWQgcGl4ZWwgcmVzb2x1dGlvbiB3aGljaCBpcyBpbiBiZXR3ZWVuLlxuICAgICAqIFRoaXMgQVBJIHdpbGwgZG8gdGhlIGZvbGxvd2luZzpcbiAgICAgKiAgICAgMS4gU2V0IHZpZXdwb3J0J3Mgd2lkdGggdG8gdGhlIGRlc2lyZWQgd2lkdGggaW4gcGl4ZWxcbiAgICAgKiAgICAgMi4gU2V0IGJvZHkgd2lkdGggdG8gdGhlIGV4YWN0IHBpeGVsIHJlc29sdXRpb25cbiAgICAgKiAgICAgMy4gVGhlIHJlc29sdXRpb24gcG9saWN5IHdpbGwgYmUgcmVzZXQgd2l0aCBkZXNpZ25lZCB2aWV3IHNpemUgaW4gcG9pbnRzLlxuICAgICAqICEjemgg6K6+572u5a655Zmo77yIY29udGFpbmVy77yJ6ZyA6KaB55qE5YOP57Sg5YiG6L6o546H5bm25LiU6YCC6YWN55u45bqU5YiG6L6o546H55qE5ri45oiP5YaF5a6544CCXG4gICAgICogQG1ldGhvZCBzZXRSZWFsUGl4ZWxSZXNvbHV0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIERlc2lnbiByZXNvbHV0aW9uIHdpZHRoLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHQgRGVzaWduIHJlc29sdXRpb24gaGVpZ2h0LlxuICAgICAqIEBwYXJhbSB7UmVzb2x1dGlvblBvbGljeXxOdW1iZXJ9IHJlc29sdXRpb25Qb2xpY3kgVGhlIHJlc29sdXRpb24gcG9saWN5IGRlc2lyZWRcbiAgICAgKi9cbiAgICBzZXRSZWFsUGl4ZWxSZXNvbHV0aW9uOiBmdW5jdGlvbiBzZXRSZWFsUGl4ZWxSZXNvbHV0aW9uKHdpZHRoLCBoZWlnaHQsIHJlc29sdXRpb25Qb2xpY3kpIHtcbiAgICAgICAgLy8gTk9URTogbm90IG1lcmdlIGludG8gdjIuMi4wLCBtb3ZlIGludG8gQWxpcGF5IGFkYXB0ZXJcbiAgICAgICAgaWYgKCFDQ19KU0IgJiYgIUNDX1JVTlRJTUUgJiYgIUNDX1dFQ0hBVEdBTUUgJiYgIUNDX1FRUExBWSAmJiAhaXNCYWlkdUdhbWUgJiYgIWlzWGlhb21pR2FtZSAmJiAhaXNBbGlwYXlHYW1lKSB7XG4gICAgICAgICAgICAvLyBTZXQgdmlld3BvcnQncyB3aWR0aFxuICAgICAgICAgICAgdGhpcy5fc2V0Vmlld3BvcnRNZXRhKHsgXCJ3aWR0aFwiOiB3aWR0aCB9LCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gU2V0IGJvZHkgd2lkdGggdG8gdGhlIGV4YWN0IHBpeGVsIHJlc29sdXRpb25cbiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS53aWR0aCA9IHdpZHRoICsgXCJweFwiO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS53aWR0aCA9IHdpZHRoICsgXCJweFwiO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUudG9wID0gXCIwcHhcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlc2V0IHRoZSByZXNvbHV0aW9uIHNpemUgYW5kIHBvbGljeVxuICAgICAgICB0aGlzLnNldERlc2lnblJlc29sdXRpb25TaXplKHdpZHRoLCBoZWlnaHQsIHJlc29sdXRpb25Qb2xpY3kpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2V0cyB2aWV3IHBvcnQgcmVjdGFuZ2xlIHdpdGggcG9pbnRzLlxuICAgICAqICEjemgg55So6K6+6K6h5YiG6L6o546H5LiL55qE54K55bC65a+45p2l6K6+572u6KeG56qX44CCXG4gICAgICogQG1ldGhvZCBzZXRWaWV3cG9ydEluUG9pbnRzXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdjIuMFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdyB3aWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoIGhlaWdodFxuICAgICAqL1xuICAgIHNldFZpZXdwb3J0SW5Qb2ludHM6IGZ1bmN0aW9uIHNldFZpZXdwb3J0SW5Qb2ludHMoeCwgeSwgdywgaCkge1xuICAgICAgICB2YXIgbG9jU2NhbGVYID0gdGhpcy5fc2NhbGVYLFxuICAgICAgICAgICAgbG9jU2NhbGVZID0gdGhpcy5fc2NhbGVZO1xuICAgICAgICBjYy5nYW1lLl9yZW5kZXJDb250ZXh0LnZpZXdwb3J0KHggKiBsb2NTY2FsZVggKyB0aGlzLl92aWV3cG9ydFJlY3QueCwgeSAqIGxvY1NjYWxlWSArIHRoaXMuX3ZpZXdwb3J0UmVjdC55LCB3ICogbG9jU2NhbGVYLCBoICogbG9jU2NhbGVZKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFNldHMgU2Npc3NvciByZWN0YW5nbGUgd2l0aCBwb2ludHMuXG4gICAgICogISN6aCDnlKjorr7orqHliIbovqjnjofkuIvnmoTngrnnmoTlsLrlr7jmnaXorr7nva4gc2Npc3NvciDliaroo4HljLrln5/jgIJcbiAgICAgKiBAbWV0aG9kIHNldFNjaXNzb3JJblBvaW50c1xuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHYyLjBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaFxuICAgICAqL1xuICAgIHNldFNjaXNzb3JJblBvaW50czogZnVuY3Rpb24gc2V0U2Npc3NvckluUG9pbnRzKHgsIHksIHcsIGgpIHtcbiAgICAgICAgdmFyIHNjYWxlWCA9IHRoaXMuX3NjYWxlWCxcbiAgICAgICAgICAgIHNjYWxlWSA9IHRoaXMuX3NjYWxlWTtcbiAgICAgICAgdmFyIHN4ID0gTWF0aC5jZWlsKHggKiBzY2FsZVggKyB0aGlzLl92aWV3cG9ydFJlY3QueCk7XG4gICAgICAgIHZhciBzeSA9IE1hdGguY2VpbCh5ICogc2NhbGVZICsgdGhpcy5fdmlld3BvcnRSZWN0LnkpO1xuICAgICAgICB2YXIgc3cgPSBNYXRoLmNlaWwodyAqIHNjYWxlWCk7XG4gICAgICAgIHZhciBzaCA9IE1hdGguY2VpbChoICogc2NhbGVZKTtcbiAgICAgICAgdmFyIGdsID0gY2MuZ2FtZS5fcmVuZGVyQ29udGV4dDtcblxuICAgICAgICBpZiAoIV9zY2lzc29yUmVjdCkge1xuICAgICAgICAgICAgdmFyIGJveEFyciA9IGdsLmdldFBhcmFtZXRlcihnbC5TQ0lTU09SX0JPWCk7XG4gICAgICAgICAgICBfc2Npc3NvclJlY3QgPSBjYy5yZWN0KGJveEFyclswXSwgYm94QXJyWzFdLCBib3hBcnJbMl0sIGJveEFyclszXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3NjaXNzb3JSZWN0LnggIT09IHN4IHx8IF9zY2lzc29yUmVjdC55ICE9PSBzeSB8fCBfc2Npc3NvclJlY3Qud2lkdGggIT09IHN3IHx8IF9zY2lzc29yUmVjdC5oZWlnaHQgIT09IHNoKSB7XG4gICAgICAgICAgICBfc2Npc3NvclJlY3QueCA9IHN4O1xuICAgICAgICAgICAgX3NjaXNzb3JSZWN0LnkgPSBzeTtcbiAgICAgICAgICAgIF9zY2lzc29yUmVjdC53aWR0aCA9IHN3O1xuICAgICAgICAgICAgX3NjaXNzb3JSZWN0LmhlaWdodCA9IHNoO1xuICAgICAgICAgICAgZ2wuc2Npc3NvcihzeCwgc3ksIHN3LCBzaCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgd2hldGhlciBHTF9TQ0lTU09SX1RFU1QgaXMgZW5hYmxlXG4gICAgICogISN6aCDmo4Dmn6Ugc2Npc3NvciDmmK/lkKbnlJ/mlYjjgIJcbiAgICAgKiBAbWV0aG9kIGlzU2Npc3NvckVuYWJsZWRcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2Mi4wXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc1NjaXNzb3JFbmFibGVkOiBmdW5jdGlvbiBpc1NjaXNzb3JFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gY2MuZ2FtZS5fcmVuZGVyQ29udGV4dC5pc0VuYWJsZWQoZ2wuU0NJU1NPUl9URVNUKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgc2Npc3NvciByZWN0YW5nbGVcbiAgICAgKiAhI3poIOi/lOWbnuW9k+WJjeeahCBzY2lzc29yIOWJquijgeWMuuWfn+OAglxuICAgICAqIEBtZXRob2QgZ2V0U2Npc3NvclJlY3RcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2Mi4wXG4gICAgICogQHJldHVybiB7UmVjdH1cbiAgICAgKi9cbiAgICBnZXRTY2lzc29yUmVjdDogZnVuY3Rpb24gZ2V0U2Npc3NvclJlY3QoKSB7XG4gICAgICAgIGlmICghX3NjaXNzb3JSZWN0KSB7XG4gICAgICAgICAgICB2YXIgYm94QXJyID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLlNDSVNTT1JfQk9YKTtcbiAgICAgICAgICAgIF9zY2lzc29yUmVjdCA9IGNjLnJlY3QoYm94QXJyWzBdLCBib3hBcnJbMV0sIGJveEFyclsyXSwgYm94QXJyWzNdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NhbGVYRmFjdG9yID0gMSAvIHRoaXMuX3NjYWxlWDtcbiAgICAgICAgdmFyIHNjYWxlWUZhY3RvciA9IDEgLyB0aGlzLl9zY2FsZVk7XG4gICAgICAgIHJldHVybiBjYy5yZWN0KChfc2Npc3NvclJlY3QueCAtIHRoaXMuX3ZpZXdwb3J0UmVjdC54KSAqIHNjYWxlWEZhY3RvciwgKF9zY2lzc29yUmVjdC55IC0gdGhpcy5fdmlld3BvcnRSZWN0LnkpICogc2NhbGVZRmFjdG9yLCBfc2Npc3NvclJlY3Qud2lkdGggKiBzY2FsZVhGYWN0b3IsIF9zY2lzc29yUmVjdC5oZWlnaHQgKiBzY2FsZVlGYWN0b3IpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyB0aGUgdmlldyBwb3J0IHJlY3RhbmdsZS5cbiAgICAgKiAhI3poIOi/lOWbnuinhueql+WJquijgeWMuuWfn+OAglxuICAgICAqIEBtZXRob2QgZ2V0Vmlld3BvcnRSZWN0XG4gICAgICogQHJldHVybiB7UmVjdH1cbiAgICAgKi9cbiAgICBnZXRWaWV3cG9ydFJlY3Q6IGZ1bmN0aW9uIGdldFZpZXdwb3J0UmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXdwb3J0UmVjdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIFJldHVybnMgc2NhbGUgZmFjdG9yIG9mIHRoZSBob3Jpem9udGFsIGRpcmVjdGlvbiAoWCBheGlzKS5cbiAgICAgKiAhI3poIOi/lOWbnuaoqui9tOeahOe8qeaUvuavlO+8jOi/meS4que8qeaUvuavlOaYr+WwhueUu+W4g+WDj+e0oOWIhui+qOeOh+aUvuWIsOiuvuiuoeWIhui+qOeOh+eahOavlOS+i+OAglxuICAgICAqIEBtZXRob2QgZ2V0U2NhbGVYXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldFNjYWxlWDogZnVuY3Rpb24gZ2V0U2NhbGVYKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGVYO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyBzY2FsZSBmYWN0b3Igb2YgdGhlIHZlcnRpY2FsIGRpcmVjdGlvbiAoWSBheGlzKS5cbiAgICAgKiAhI3poIOi/lOWbnue6tei9tOeahOe8qeaUvuavlO+8jOi/meS4que8qeaUvuavlOaYr+WwhueUu+W4g+WDj+e0oOWIhui+qOeOh+e8qeaUvuWIsOiuvuiuoeWIhui+qOeOh+eahOavlOS+i+OAglxuICAgICAqIEBtZXRob2QgZ2V0U2NhbGVZXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldFNjYWxlWTogZnVuY3Rpb24gZ2V0U2NhbGVZKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2NhbGVZO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyBkZXZpY2UgcGl4ZWwgcmF0aW8gZm9yIHJldGluYSBkaXNwbGF5LlxuICAgICAqICEjemgg6L+U5Zue6K6+5aSH5oiW5rWP6KeI5Zmo5YOP57Sg5q+U5L6L44CCXG4gICAgICogQG1ldGhvZCBnZXREZXZpY2VQaXhlbFJhdGlvXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldERldmljZVBpeGVsUmF0aW86IGZ1bmN0aW9uIGdldERldmljZVBpeGVsUmF0aW8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZXZpY2VQaXhlbFJhdGlvO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyB0aGUgcmVhbCBsb2NhdGlvbiBpbiB2aWV3IGZvciBhIHRyYW5zbGF0aW9uIGJhc2VkIG9uIGEgcmVsYXRlZCBwb3NpdGlvblxuICAgICAqICEjemgg5bCG5bGP5bmV5Z2Q5qCH6L2s5o2i5Li65ri45oiP6KeG5Zu+5LiL55qE5Z2Q5qCH44CCXG4gICAgICogQG1ldGhvZCBjb252ZXJ0VG9Mb2NhdGlvbkluVmlld1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0eCAtIFRoZSBYIGF4aXMgdHJhbnNsYXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdHkgLSBUaGUgWSBheGlzIHRyYW5zbGF0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlbGF0ZWRQb3MgLSBUaGUgcmVsYXRlZCBwb3NpdGlvbiBvYmplY3QgaW5jbHVkaW5nIFwibGVmdFwiLCBcInRvcFwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCIgaW5mb3JtYXRpb25zXG4gICAgICogQHJldHVybiB7VmVjMn1cbiAgICAgKi9cbiAgICBjb252ZXJ0VG9Mb2NhdGlvbkluVmlldzogZnVuY3Rpb24gY29udmVydFRvTG9jYXRpb25JblZpZXcodHgsIHR5LCByZWxhdGVkUG9zLCBvdXQpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG91dCB8fCBjYy52MigpO1xuICAgICAgICB2YXIgeCA9IHRoaXMuX2RldmljZVBpeGVsUmF0aW8gKiAodHggLSByZWxhdGVkUG9zLmxlZnQpO1xuICAgICAgICB2YXIgeSA9IHRoaXMuX2RldmljZVBpeGVsUmF0aW8gKiAocmVsYXRlZFBvcy50b3AgKyByZWxhdGVkUG9zLmhlaWdodCAtIHR5KTtcbiAgICAgICAgaWYgKHRoaXMuX2lzUm90YXRlZCkge1xuICAgICAgICAgICAgcmVzdWx0LnggPSBjYy5nYW1lLmNhbnZhcy53aWR0aCAtIHk7XG4gICAgICAgICAgICByZXN1bHQueSA9IHg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQueCA9IHg7XG4gICAgICAgICAgICByZXN1bHQueSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgX2NvbnZlcnRNb3VzZVRvTG9jYXRpb25JblZpZXc6IGZ1bmN0aW9uIF9jb252ZXJ0TW91c2VUb0xvY2F0aW9uSW5WaWV3KGluX291dF9wb2ludCwgcmVsYXRlZFBvcykge1xuICAgICAgICB2YXIgdmlld3BvcnQgPSB0aGlzLl92aWV3cG9ydFJlY3QsXG4gICAgICAgICAgICBfdCA9IHRoaXM7XG4gICAgICAgIGluX291dF9wb2ludC54ID0gKF90Ll9kZXZpY2VQaXhlbFJhdGlvICogKGluX291dF9wb2ludC54IC0gcmVsYXRlZFBvcy5sZWZ0KSAtIHZpZXdwb3J0LngpIC8gX3QuX3NjYWxlWDtcbiAgICAgICAgaW5fb3V0X3BvaW50LnkgPSAoX3QuX2RldmljZVBpeGVsUmF0aW8gKiAocmVsYXRlZFBvcy50b3AgKyByZWxhdGVkUG9zLmhlaWdodCAtIGluX291dF9wb2ludC55KSAtIHZpZXdwb3J0LnkpIC8gX3QuX3NjYWxlWTtcbiAgICB9LFxuXG4gICAgX2NvbnZlcnRQb2ludFdpdGhTY2FsZTogZnVuY3Rpb24gX2NvbnZlcnRQb2ludFdpdGhTY2FsZShwb2ludCkge1xuICAgICAgICB2YXIgdmlld3BvcnQgPSB0aGlzLl92aWV3cG9ydFJlY3Q7XG4gICAgICAgIHBvaW50LnggPSAocG9pbnQueCAtIHZpZXdwb3J0LngpIC8gdGhpcy5fc2NhbGVYO1xuICAgICAgICBwb2ludC55ID0gKHBvaW50LnkgLSB2aWV3cG9ydC55KSAvIHRoaXMuX3NjYWxlWTtcbiAgICB9LFxuXG4gICAgX2NvbnZlcnRUb3VjaGVzV2l0aFNjYWxlOiBmdW5jdGlvbiBfY29udmVydFRvdWNoZXNXaXRoU2NhbGUodG91Y2hlcykge1xuICAgICAgICB2YXIgdmlld3BvcnQgPSB0aGlzLl92aWV3cG9ydFJlY3QsXG4gICAgICAgICAgICBzY2FsZVggPSB0aGlzLl9zY2FsZVgsXG4gICAgICAgICAgICBzY2FsZVkgPSB0aGlzLl9zY2FsZVksXG4gICAgICAgICAgICBzZWxUb3VjaCxcbiAgICAgICAgICAgIHNlbFBvaW50LFxuICAgICAgICAgICAgc2VsUHJlUG9pbnQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc2VsVG91Y2ggPSB0b3VjaGVzW2ldO1xuICAgICAgICAgICAgc2VsUG9pbnQgPSBzZWxUb3VjaC5fcG9pbnQ7XG4gICAgICAgICAgICBzZWxQcmVQb2ludCA9IHNlbFRvdWNoLl9wcmV2UG9pbnQ7XG5cbiAgICAgICAgICAgIHNlbFBvaW50LnggPSAoc2VsUG9pbnQueCAtIHZpZXdwb3J0LngpIC8gc2NhbGVYO1xuICAgICAgICAgICAgc2VsUG9pbnQueSA9IChzZWxQb2ludC55IC0gdmlld3BvcnQueSkgLyBzY2FsZVk7XG4gICAgICAgICAgICBzZWxQcmVQb2ludC54ID0gKHNlbFByZVBvaW50LnggLSB2aWV3cG9ydC54KSAvIHNjYWxlWDtcbiAgICAgICAgICAgIHNlbFByZVBvaW50LnkgPSAoc2VsUHJlUG9pbnQueSAtIHZpZXdwb3J0LnkpIC8gc2NhbGVZO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogIWVuXG4gKiBFbWl0IHdoZW4gZGVzaWduIHJlc29sdXRpb24gY2hhbmdlZC5cbiAqICF6aFxuICog5b2T6K6+6K6h5YiG6L6o546H5pS55Y+Y5pe25Y+R6YCB44CCXG4gKiBAZXZlbnQgZGVzaWduLXJlc29sdXRpb24tY2hhbmdlZFxuICovXG4vKipcbiogIWVuXG4qIEVtaXQgd2hlbiBjYW52YXMgcmVzaXplLlxuKiAhemhcbiog5b2T55S75biD5aSn5bCP5pS55Y+Y5pe25Y+R6YCB44CCXG4qIEBldmVudCBjYW52YXMtcmVzaXplXG4qL1xuXG4vKipcbiAqIDxwPmNjLmdhbWUuY29udGFpbmVyU3RyYXRlZ3kgY2xhc3MgaXMgdGhlIHJvb3Qgc3RyYXRlZ3kgY2xhc3Mgb2YgY29udGFpbmVyJ3Mgc2NhbGUgc3RyYXRlZ3ksXG4gKiBpdCBjb250cm9scyB0aGUgYmVoYXZpb3Igb2YgaG93IHRvIHNjYWxlIHRoZSBjYy5nYW1lLmNvbnRhaW5lciBhbmQgY2MuZ2FtZS5jYW52YXMgb2JqZWN0PC9wPlxuICpcbiAqIEBjbGFzcyBDb250YWluZXJTdHJhdGVneVxuICovXG5jYy5Db250YWluZXJTdHJhdGVneSA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiBcIkNvbnRhaW5lclN0cmF0ZWd5XCIsXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIE1hbmlwdWxhdGlvbiBiZWZvcmUgYXBwbGluZyB0aGUgc3RyYXRlZ3lcbiAgICAgKiAhI3poIOWcqOW6lOeUqOetlueVpeS5i+WJjeeahOaTjeS9nFxuICAgICAqIEBtZXRob2QgcHJlQXBwbHlcbiAgICAgKiBAcGFyYW0ge1ZpZXd9IHZpZXcgLSBUaGUgdGFyZ2V0IHZpZXdcbiAgICAgKi9cbiAgICBwcmVBcHBseTogZnVuY3Rpb24gcHJlQXBwbHkodmlldykge30sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogRnVuY3Rpb24gdG8gYXBwbHkgdGhpcyBzdHJhdGVneVxuICAgICAqICEjemgg562W55Wl5bqU55So5pa55rOVXG4gICAgICogQG1ldGhvZCBhcHBseVxuICAgICAqIEBwYXJhbSB7Vmlld30gdmlld1xuICAgICAqIEBwYXJhbSB7U2l6ZX0gZGVzaWduZWRSZXNvbHV0aW9uXG4gICAgICovXG4gICAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHZpZXcsIGRlc2lnbmVkUmVzb2x1dGlvbikge30sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogTWFuaXB1bGF0aW9uIGFmdGVyIGFwcGx5aW5nIHRoZSBzdHJhdGVneVxuICAgICAqICEjemgg562W55Wl6LCD55So5LmL5ZCO55qE5pON5L2cXG4gICAgICogQG1ldGhvZCBwb3N0QXBwbHlcbiAgICAgKiBAcGFyYW0ge1ZpZXd9IHZpZXcgIFRoZSB0YXJnZXQgdmlld1xuICAgICAqL1xuICAgIHBvc3RBcHBseTogZnVuY3Rpb24gcG9zdEFwcGx5KHZpZXcpIHt9LFxuXG4gICAgX3NldHVwQ29udGFpbmVyOiBmdW5jdGlvbiBfc2V0dXBDb250YWluZXIodmlldywgdywgaCkge1xuICAgICAgICB2YXIgbG9jQ2FudmFzID0gY2MuZ2FtZS5jYW52YXMsXG4gICAgICAgICAgICBsb2NDb250YWluZXIgPSBjYy5nYW1lLmNvbnRhaW5lcjtcblxuICAgICAgICAvLyBOT1RFOiBub3QgbWVyZ2UgaW50byB2Mi4yLjAsIG1vdmUgaW50byBBbGlwYXkgYWRhcHRlclxuICAgICAgICBpZiAoIUNDX1dFQ0hBVEdBTUUgJiYgIWlzQmFpZHVHYW1lICYmICFpc1hpYW9taUdhbWUgJiYgIWlzQWxpcGF5R2FtZSkge1xuICAgICAgICAgICAgaWYgKGNjLnN5cy5vcyA9PT0gY2Muc3lzLk9TX0FORFJPSUQpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLndpZHRoID0gKHZpZXcuX2lzUm90YXRlZCA/IGggOiB3KSArICdweCc7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5oZWlnaHQgPSAodmlldy5faXNSb3RhdGVkID8gdyA6IGgpICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNldHVwIHN0eWxlXG4gICAgICAgICAgICBsb2NDb250YWluZXIuc3R5bGUud2lkdGggPSBsb2NDYW52YXMuc3R5bGUud2lkdGggPSB3ICsgJ3B4JztcbiAgICAgICAgICAgIGxvY0NvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBsb2NDYW52YXMuc3R5bGUuaGVpZ2h0ID0gaCArICdweCc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0dXAgcGl4ZWwgcmF0aW8gZm9yIHJldGluYSBkaXNwbGF5XG4gICAgICAgIHZhciBkZXZpY2VQaXhlbFJhdGlvID0gdmlldy5fZGV2aWNlUGl4ZWxSYXRpbyA9IDE7XG4gICAgICAgIGlmICh2aWV3LmlzUmV0aW5hRW5hYmxlZCgpKSBkZXZpY2VQaXhlbFJhdGlvID0gdmlldy5fZGV2aWNlUGl4ZWxSYXRpbyA9IE1hdGgubWluKHZpZXcuX21heFBpeGVsUmF0aW8sIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpO1xuICAgICAgICAvLyBTZXR1cCBjYW52YXNcbiAgICAgICAgbG9jQ2FudmFzLndpZHRoID0gdyAqIGRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIGxvY0NhbnZhcy5oZWlnaHQgPSBoICogZGV2aWNlUGl4ZWxSYXRpbztcbiAgICB9LFxuXG4gICAgX2ZpeENvbnRhaW5lcjogZnVuY3Rpb24gX2ZpeENvbnRhaW5lcigpIHtcbiAgICAgICAgLy8gQWRkIGNvbnRhaW5lciB0byBkb2N1bWVudCBib2R5XG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKGNjLmdhbWUuY29udGFpbmVyLCBkb2N1bWVudC5ib2R5LmZpcnN0Q2hpbGQpO1xuICAgICAgICAvLyBTZXQgYm9keSdzIHdpZHRoIGhlaWdodCB0byB3aW5kb3cncyBzaXplLCBhbmQgZm9yYmlkIG92ZXJmbG93LCBzbyB0aGF0IGdhbWUgd2lsbCBiZSBjZW50ZXJlZFxuICAgICAgICB2YXIgYnMgPSBkb2N1bWVudC5ib2R5LnN0eWxlO1xuICAgICAgICBicy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoICsgXCJweFwiO1xuICAgICAgICBicy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgIGJzLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgLy8gQm9keSBzaXplIHNvbHV0aW9uIGRvZXNuJ3Qgd29yayBvbiBhbGwgbW9iaWxlIGJyb3dzZXIgc28gdGhpcyBpcyB0aGUgYWxldGVybmF0aXZlOiBmaXhlZCBjb250YWluZXJcbiAgICAgICAgdmFyIGNvbnRTdHlsZSA9IGNjLmdhbWUuY29udGFpbmVyLnN0eWxlO1xuICAgICAgICBjb250U3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gICAgICAgIGNvbnRTdHlsZS5sZWZ0ID0gY29udFN0eWxlLnRvcCA9IFwiMHB4XCI7XG4gICAgICAgIC8vIFJlcG9zaXRpb24gYm9keVxuICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IDA7XG4gICAgfVxufSk7XG5cbi8qKlxuICogPHA+Y2MuQ29udGVudFN0cmF0ZWd5IGNsYXNzIGlzIHRoZSByb290IHN0cmF0ZWd5IGNsYXNzIG9mIGNvbnRlbnQncyBzY2FsZSBzdHJhdGVneSxcbiAqIGl0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBob3cgdG8gc2NhbGUgdGhlIHNjZW5lIGFuZCBzZXR1cCB0aGUgdmlld3BvcnQgZm9yIHRoZSBnYW1lPC9wPlxuICpcbiAqIEBjbGFzcyBDb250ZW50U3RyYXRlZ3lcbiAqL1xuY2MuQ29udGVudFN0cmF0ZWd5ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6IFwiQ29udGVudFN0cmF0ZWd5XCIsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKCkge1xuICAgICAgICB0aGlzLl9yZXN1bHQgPSB7XG4gICAgICAgICAgICBzY2FsZTogWzEsIDFdLFxuICAgICAgICAgICAgdmlld3BvcnQ6IG51bGxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgX2J1aWxkUmVzdWx0OiBmdW5jdGlvbiBfYnVpbGRSZXN1bHQoY29udGFpbmVyVywgY29udGFpbmVySCwgY29udGVudFcsIGNvbnRlbnRILCBzY2FsZVgsIHNjYWxlWSkge1xuICAgICAgICAvLyBNYWtlcyBjb250ZW50IGZpdCBiZXR0ZXIgdGhlIGNhbnZhc1xuICAgICAgICBNYXRoLmFicyhjb250YWluZXJXIC0gY29udGVudFcpIDwgMiAmJiAoY29udGVudFcgPSBjb250YWluZXJXKTtcbiAgICAgICAgTWF0aC5hYnMoY29udGFpbmVySCAtIGNvbnRlbnRIKSA8IDIgJiYgKGNvbnRlbnRIID0gY29udGFpbmVySCk7XG5cbiAgICAgICAgdmFyIHZpZXdwb3J0ID0gY2MucmVjdCgoY29udGFpbmVyVyAtIGNvbnRlbnRXKSAvIDIsIChjb250YWluZXJIIC0gY29udGVudEgpIC8gMiwgY29udGVudFcsIGNvbnRlbnRIKTtcblxuICAgICAgICAvLyBUcmFuc2xhdGUgdGhlIGNvbnRlbnRcbiAgICAgICAgaWYgKGNjLmdhbWUucmVuZGVyVHlwZSA9PT0gY2MuZ2FtZS5SRU5ERVJfVFlQRV9DQU5WQVMpIHtcbiAgICAgICAgICAgIC8vVE9ETzogbW9kaWZ5IHNvbWV0aGluZyBmb3Igc2V0VHJhbnNmb3JtXG4gICAgICAgICAgICAvL2NjLmdhbWUuX3JlbmRlckNvbnRleHQudHJhbnNsYXRlKHZpZXdwb3J0LngsIHZpZXdwb3J0LnkgKyBjb250ZW50SCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZXN1bHQuc2NhbGUgPSBbc2NhbGVYLCBzY2FsZVldO1xuICAgICAgICB0aGlzLl9yZXN1bHQudmlld3BvcnQgPSB2aWV3cG9ydDtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIE1hbmlwdWxhdGlvbiBiZWZvcmUgYXBwbHlpbmcgdGhlIHN0cmF0ZWd5XG4gICAgICogISN6aCDnrZbnlaXlupTnlKjliY3nmoTmk43kvZxcbiAgICAgKiBAbWV0aG9kIHByZUFwcGx5XG4gICAgICogQHBhcmFtIHtWaWV3fSB2aWV3IC0gVGhlIHRhcmdldCB2aWV3XG4gICAgICovXG4gICAgcHJlQXBwbHk6IGZ1bmN0aW9uIHByZUFwcGx5KHZpZXcpIHt9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBGdW5jdGlvbiB0byBhcHBseSB0aGlzIHN0cmF0ZWd5XG4gICAgICogVGhlIHJldHVybiB2YWx1ZSBpcyB7c2NhbGU6IFtzY2FsZVgsIHNjYWxlWV0sIHZpZXdwb3J0OiB7Y2MuUmVjdH19LFxuICAgICAqIFRoZSB0YXJnZXQgdmlldyBjYW4gdGhlbiBhcHBseSB0aGVzZSB2YWx1ZSB0byBpdHNlbGYsIGl0J3MgcHJlZmVycmVkIG5vdCB0byBtb2RpZnkgZGlyZWN0bHkgaXRzIHByaXZhdGUgdmFyaWFibGVzXG4gICAgICogISN6aCDosIPnlKjnrZbnlaXmlrnms5VcbiAgICAgKiBAbWV0aG9kIGFwcGx5XG4gICAgICogQHBhcmFtIHtWaWV3fSB2aWV3XG4gICAgICogQHBhcmFtIHtTaXplfSBkZXNpZ25lZFJlc29sdXRpb25cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHNjYWxlQW5kVmlld3BvcnRSZWN0XG4gICAgICovXG4gICAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHZpZXcsIGRlc2lnbmVkUmVzb2x1dGlvbikge1xuICAgICAgICByZXR1cm4geyBcInNjYWxlXCI6IFsxLCAxXSB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogTWFuaXB1bGF0aW9uIGFmdGVyIGFwcGx5aW5nIHRoZSBzdHJhdGVneVxuICAgICAqICEjemgg562W55Wl6LCD55So5LmL5ZCO55qE5pON5L2cXG4gICAgICogQG1ldGhvZCBwb3N0QXBwbHlcbiAgICAgKiBAcGFyYW0ge1ZpZXd9IHZpZXcgLSBUaGUgdGFyZ2V0IHZpZXdcbiAgICAgKi9cbiAgICBwb3N0QXBwbHk6IGZ1bmN0aW9uIHBvc3RBcHBseSh2aWV3KSB7fVxufSk7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBDb250YWluZXIgc2NhbGUgc3RyYXRlZ3lzXG4gICAgLyoqXG4gICAgICogQGNsYXNzIEVxdWFsVG9GcmFtZVxuICAgICAqIEBleHRlbmRzIENvbnRhaW5lclN0cmF0ZWd5XG4gICAgICovXG4gICAgdmFyIEVxdWFsVG9GcmFtZSA9IGNjLkNsYXNzKHtcbiAgICAgICAgbmFtZTogXCJFcXVhbFRvRnJhbWVcIixcbiAgICAgICAgZXh0ZW5kczogY2MuQ29udGFpbmVyU3RyYXRlZ3ksXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh2aWV3KSB7XG4gICAgICAgICAgICB2YXIgZnJhbWVIID0gdmlldy5fZnJhbWVTaXplLmhlaWdodCxcbiAgICAgICAgICAgICAgICBjb250YWluZXJTdHlsZSA9IGNjLmdhbWUuY29udGFpbmVyLnN0eWxlO1xuICAgICAgICAgICAgdGhpcy5fc2V0dXBDb250YWluZXIodmlldywgdmlldy5fZnJhbWVTaXplLndpZHRoLCB2aWV3Ll9mcmFtZVNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgIC8vIFNldHVwIGNvbnRhaW5lcidzIG1hcmdpbiBhbmQgcGFkZGluZ1xuICAgICAgICAgICAgaWYgKHZpZXcuX2lzUm90YXRlZCkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLm1hcmdpbiA9ICcwIDAgMCAnICsgZnJhbWVIICsgJ3B4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGUubWFyZ2luID0gJzBweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250YWluZXJTdHlsZS5wYWRkaW5nID0gXCIwcHhcIjtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIFByb3BvcnRpb25hbFRvRnJhbWVcbiAgICAgKiBAZXh0ZW5kcyBDb250YWluZXJTdHJhdGVneVxuICAgICAqL1xuICAgIHZhciBQcm9wb3J0aW9uYWxUb0ZyYW1lID0gY2MuQ2xhc3Moe1xuICAgICAgICBuYW1lOiBcIlByb3BvcnRpb25hbFRvRnJhbWVcIixcbiAgICAgICAgZXh0ZW5kczogY2MuQ29udGFpbmVyU3RyYXRlZ3ksXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh2aWV3LCBkZXNpZ25lZFJlc29sdXRpb24pIHtcbiAgICAgICAgICAgIHZhciBmcmFtZVcgPSB2aWV3Ll9mcmFtZVNpemUud2lkdGgsXG4gICAgICAgICAgICAgICAgZnJhbWVIID0gdmlldy5fZnJhbWVTaXplLmhlaWdodCxcbiAgICAgICAgICAgICAgICBjb250YWluZXJTdHlsZSA9IGNjLmdhbWUuY29udGFpbmVyLnN0eWxlLFxuICAgICAgICAgICAgICAgIGRlc2lnblcgPSBkZXNpZ25lZFJlc29sdXRpb24ud2lkdGgsXG4gICAgICAgICAgICAgICAgZGVzaWduSCA9IGRlc2lnbmVkUmVzb2x1dGlvbi5oZWlnaHQsXG4gICAgICAgICAgICAgICAgc2NhbGVYID0gZnJhbWVXIC8gZGVzaWduVyxcbiAgICAgICAgICAgICAgICBzY2FsZVkgPSBmcmFtZUggLyBkZXNpZ25ILFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclcsXG4gICAgICAgICAgICAgICAgY29udGFpbmVySDtcblxuICAgICAgICAgICAgc2NhbGVYIDwgc2NhbGVZID8gKGNvbnRhaW5lclcgPSBmcmFtZVcsIGNvbnRhaW5lckggPSBkZXNpZ25IICogc2NhbGVYKSA6IChjb250YWluZXJXID0gZGVzaWduVyAqIHNjYWxlWSwgY29udGFpbmVySCA9IGZyYW1lSCk7XG5cbiAgICAgICAgICAgIC8vIEFkanVzdCBjb250YWluZXIgc2l6ZSB3aXRoIGludGVnZXIgdmFsdWVcbiAgICAgICAgICAgIHZhciBvZmZ4ID0gTWF0aC5yb3VuZCgoZnJhbWVXIC0gY29udGFpbmVyVykgLyAyKTtcbiAgICAgICAgICAgIHZhciBvZmZ5ID0gTWF0aC5yb3VuZCgoZnJhbWVIIC0gY29udGFpbmVySCkgLyAyKTtcbiAgICAgICAgICAgIGNvbnRhaW5lclcgPSBmcmFtZVcgLSAyICogb2ZmeDtcbiAgICAgICAgICAgIGNvbnRhaW5lckggPSBmcmFtZUggLSAyICogb2ZmeTtcblxuICAgICAgICAgICAgdGhpcy5fc2V0dXBDb250YWluZXIodmlldywgY29udGFpbmVyVywgY29udGFpbmVySCk7XG4gICAgICAgICAgICBpZiAoIUNDX0VESVRPUikge1xuICAgICAgICAgICAgICAgIC8vIFNldHVwIGNvbnRhaW5lcidzIG1hcmdpbiBhbmQgcGFkZGluZ1xuICAgICAgICAgICAgICAgIGlmICh2aWV3Ll9pc1JvdGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGUubWFyZ2luID0gJzAgMCAwICcgKyBmcmFtZUggKyAncHgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLm1hcmdpbiA9ICcwcHgnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250YWluZXJTdHlsZS5wYWRkaW5nTGVmdCA9IG9mZnggKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGUucGFkZGluZ1JpZ2h0ID0gb2ZmeCArIFwicHhcIjtcbiAgICAgICAgICAgICAgICBjb250YWluZXJTdHlsZS5wYWRkaW5nVG9wID0gb2ZmeSArIFwicHhcIjtcbiAgICAgICAgICAgICAgICBjb250YWluZXJTdHlsZS5wYWRkaW5nQm90dG9tID0gb2ZmeSArIFwicHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIEVxdWFsVG9XaW5kb3dcbiAgICAgKiBAZXh0ZW5kcyBFcXVhbFRvRnJhbWVcbiAgICAgKi9cbiAgICB2YXIgRXF1YWxUb1dpbmRvdyA9IGNjLkNsYXNzKHtcbiAgICAgICAgbmFtZTogXCJFcXVhbFRvV2luZG93XCIsXG4gICAgICAgIGV4dGVuZHM6IEVxdWFsVG9GcmFtZSxcbiAgICAgICAgcHJlQXBwbHk6IGZ1bmN0aW9uIHByZUFwcGx5KHZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1cGVyKHZpZXcpO1xuICAgICAgICAgICAgY2MuZ2FtZS5mcmFtZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgfSxcblxuICAgICAgICBhcHBseTogZnVuY3Rpb24gYXBwbHkodmlldykge1xuICAgICAgICAgICAgdGhpcy5fc3VwZXIodmlldyk7XG4gICAgICAgICAgICB0aGlzLl9maXhDb250YWluZXIoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIFByb3BvcnRpb25hbFRvV2luZG93XG4gICAgICogQGV4dGVuZHMgUHJvcG9ydGlvbmFsVG9GcmFtZVxuICAgICAqL1xuICAgIHZhciBQcm9wb3J0aW9uYWxUb1dpbmRvdyA9IGNjLkNsYXNzKHtcbiAgICAgICAgbmFtZTogXCJQcm9wb3J0aW9uYWxUb1dpbmRvd1wiLFxuICAgICAgICBleHRlbmRzOiBQcm9wb3J0aW9uYWxUb0ZyYW1lLFxuICAgICAgICBwcmVBcHBseTogZnVuY3Rpb24gcHJlQXBwbHkodmlldykge1xuICAgICAgICAgICAgdGhpcy5fc3VwZXIodmlldyk7XG4gICAgICAgICAgICBjYy5nYW1lLmZyYW1lID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB9LFxuXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh2aWV3LCBkZXNpZ25lZFJlc29sdXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX3N1cGVyKHZpZXcsIGRlc2lnbmVkUmVzb2x1dGlvbik7XG4gICAgICAgICAgICB0aGlzLl9maXhDb250YWluZXIoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIE9yaWdpbmFsQ29udGFpbmVyXG4gICAgICogQGV4dGVuZHMgQ29udGFpbmVyU3RyYXRlZ3lcbiAgICAgKi9cbiAgICB2YXIgT3JpZ2luYWxDb250YWluZXIgPSBjYy5DbGFzcyh7XG4gICAgICAgIG5hbWU6IFwiT3JpZ2luYWxDb250YWluZXJcIixcbiAgICAgICAgZXh0ZW5kczogY2MuQ29udGFpbmVyU3RyYXRlZ3ksXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh2aWV3KSB7XG4gICAgICAgICAgICB0aGlzLl9zZXR1cENvbnRhaW5lcih2aWV3LCBjYy5nYW1lLmNhbnZhcy53aWR0aCwgY2MuZ2FtZS5jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gI05PVCBTVEFCTEUgb24gQW5kcm9pZCMgQWxpYXM6IFN0cmF0ZWd5IHRoYXQgbWFrZXMgdGhlIGNvbnRhaW5lcidzIHNpemUgZXF1YWxzIHRvIHRoZSB3aW5kb3cncyBzaXplXG4gICAgLy8gICAgY2MuQ29udGFpbmVyU3RyYXRlZ3kuRVFVQUxfVE9fV0lORE9XID0gbmV3IEVxdWFsVG9XaW5kb3coKTtcbiAgICAvLyAjTk9UIFNUQUJMRSBvbiBBbmRyb2lkIyBBbGlhczogU3RyYXRlZ3kgdGhhdCBzY2FsZSBwcm9wb3J0aW9uYWxseSB0aGUgY29udGFpbmVyJ3Mgc2l6ZSB0byB3aW5kb3cncyBzaXplXG4gICAgLy8gICAgY2MuQ29udGFpbmVyU3RyYXRlZ3kuUFJPUE9SVElPTl9UT19XSU5ET1cgPSBuZXcgUHJvcG9ydGlvbmFsVG9XaW5kb3coKTtcbiAgICAvLyBBbGlhczogU3RyYXRlZ3kgdGhhdCBtYWtlcyB0aGUgY29udGFpbmVyJ3Mgc2l6ZSBlcXVhbHMgdG8gdGhlIGZyYW1lJ3Mgc2l6ZVxuICAgIGNjLkNvbnRhaW5lclN0cmF0ZWd5LkVRVUFMX1RPX0ZSQU1FID0gbmV3IEVxdWFsVG9GcmFtZSgpO1xuICAgIC8vIEFsaWFzOiBTdHJhdGVneSB0aGF0IHNjYWxlIHByb3BvcnRpb25hbGx5IHRoZSBjb250YWluZXIncyBzaXplIHRvIGZyYW1lJ3Mgc2l6ZVxuICAgIGNjLkNvbnRhaW5lclN0cmF0ZWd5LlBST1BPUlRJT05fVE9fRlJBTUUgPSBuZXcgUHJvcG9ydGlvbmFsVG9GcmFtZSgpO1xuICAgIC8vIEFsaWFzOiBTdHJhdGVneSB0aGF0IGtlZXBzIHRoZSBvcmlnaW5hbCBjb250YWluZXIncyBzaXplXG4gICAgY2MuQ29udGFpbmVyU3RyYXRlZ3kuT1JJR0lOQUxfQ09OVEFJTkVSID0gbmV3IE9yaWdpbmFsQ29udGFpbmVyKCk7XG5cbiAgICAvLyBDb250ZW50IHNjYWxlIHN0cmF0ZWd5c1xuICAgIHZhciBFeGFjdEZpdCA9IGNjLkNsYXNzKHtcbiAgICAgICAgbmFtZTogXCJFeGFjdEZpdFwiLFxuICAgICAgICBleHRlbmRzOiBjYy5Db250ZW50U3RyYXRlZ3ksXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh2aWV3LCBkZXNpZ25lZFJlc29sdXRpb24pIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXJXID0gY2MuZ2FtZS5jYW52YXMud2lkdGgsXG4gICAgICAgICAgICAgICAgY29udGFpbmVySCA9IGNjLmdhbWUuY2FudmFzLmhlaWdodCxcbiAgICAgICAgICAgICAgICBzY2FsZVggPSBjb250YWluZXJXIC8gZGVzaWduZWRSZXNvbHV0aW9uLndpZHRoLFxuICAgICAgICAgICAgICAgIHNjYWxlWSA9IGNvbnRhaW5lckggLyBkZXNpZ25lZFJlc29sdXRpb24uaGVpZ2h0O1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYnVpbGRSZXN1bHQoY29udGFpbmVyVywgY29udGFpbmVySCwgY29udGFpbmVyVywgY29udGFpbmVySCwgc2NhbGVYLCBzY2FsZVkpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgU2hvd0FsbCA9IGNjLkNsYXNzKHtcbiAgICAgICAgbmFtZTogXCJTaG93QWxsXCIsXG4gICAgICAgIGV4dGVuZHM6IGNjLkNvbnRlbnRTdHJhdGVneSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHZpZXcsIGRlc2lnbmVkUmVzb2x1dGlvbikge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lclcgPSBjYy5nYW1lLmNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgICAgICBjb250YWluZXJIID0gY2MuZ2FtZS5jYW52YXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGRlc2lnblcgPSBkZXNpZ25lZFJlc29sdXRpb24ud2lkdGgsXG4gICAgICAgICAgICAgICAgZGVzaWduSCA9IGRlc2lnbmVkUmVzb2x1dGlvbi5oZWlnaHQsXG4gICAgICAgICAgICAgICAgc2NhbGVYID0gY29udGFpbmVyVyAvIGRlc2lnblcsXG4gICAgICAgICAgICAgICAgc2NhbGVZID0gY29udGFpbmVySCAvIGRlc2lnbkgsXG4gICAgICAgICAgICAgICAgc2NhbGUgPSAwLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRXLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRIO1xuXG4gICAgICAgICAgICBzY2FsZVggPCBzY2FsZVkgPyAoc2NhbGUgPSBzY2FsZVgsIGNvbnRlbnRXID0gY29udGFpbmVyVywgY29udGVudEggPSBkZXNpZ25IICogc2NhbGUpIDogKHNjYWxlID0gc2NhbGVZLCBjb250ZW50VyA9IGRlc2lnblcgKiBzY2FsZSwgY29udGVudEggPSBjb250YWluZXJIKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J1aWxkUmVzdWx0KGNvbnRhaW5lclcsIGNvbnRhaW5lckgsIGNvbnRlbnRXLCBjb250ZW50SCwgc2NhbGUsIHNjYWxlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIE5vQm9yZGVyID0gY2MuQ2xhc3Moe1xuICAgICAgICBuYW1lOiBcIk5vQm9yZGVyXCIsXG4gICAgICAgIGV4dGVuZHM6IGNjLkNvbnRlbnRTdHJhdGVneSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHZpZXcsIGRlc2lnbmVkUmVzb2x1dGlvbikge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lclcgPSBjYy5nYW1lLmNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgICAgICBjb250YWluZXJIID0gY2MuZ2FtZS5jYW52YXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGRlc2lnblcgPSBkZXNpZ25lZFJlc29sdXRpb24ud2lkdGgsXG4gICAgICAgICAgICAgICAgZGVzaWduSCA9IGRlc2lnbmVkUmVzb2x1dGlvbi5oZWlnaHQsXG4gICAgICAgICAgICAgICAgc2NhbGVYID0gY29udGFpbmVyVyAvIGRlc2lnblcsXG4gICAgICAgICAgICAgICAgc2NhbGVZID0gY29udGFpbmVySCAvIGRlc2lnbkgsXG4gICAgICAgICAgICAgICAgc2NhbGUsXG4gICAgICAgICAgICAgICAgY29udGVudFcsXG4gICAgICAgICAgICAgICAgY29udGVudEg7XG5cbiAgICAgICAgICAgIHNjYWxlWCA8IHNjYWxlWSA/IChzY2FsZSA9IHNjYWxlWSwgY29udGVudFcgPSBkZXNpZ25XICogc2NhbGUsIGNvbnRlbnRIID0gY29udGFpbmVySCkgOiAoc2NhbGUgPSBzY2FsZVgsIGNvbnRlbnRXID0gY29udGFpbmVyVywgY29udGVudEggPSBkZXNpZ25IICogc2NhbGUpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYnVpbGRSZXN1bHQoY29udGFpbmVyVywgY29udGFpbmVySCwgY29udGVudFcsIGNvbnRlbnRILCBzY2FsZSwgc2NhbGUpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgRml4ZWRIZWlnaHQgPSBjYy5DbGFzcyh7XG4gICAgICAgIG5hbWU6IFwiRml4ZWRIZWlnaHRcIixcbiAgICAgICAgZXh0ZW5kczogY2MuQ29udGVudFN0cmF0ZWd5LFxuICAgICAgICBhcHBseTogZnVuY3Rpb24gYXBwbHkodmlldywgZGVzaWduZWRSZXNvbHV0aW9uKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyVyA9IGNjLmdhbWUuY2FudmFzLndpZHRoLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lckggPSBjYy5nYW1lLmNhbnZhcy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgZGVzaWduSCA9IGRlc2lnbmVkUmVzb2x1dGlvbi5oZWlnaHQsXG4gICAgICAgICAgICAgICAgc2NhbGUgPSBjb250YWluZXJIIC8gZGVzaWduSCxcbiAgICAgICAgICAgICAgICBjb250ZW50VyA9IGNvbnRhaW5lclcsXG4gICAgICAgICAgICAgICAgY29udGVudEggPSBjb250YWluZXJIO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYnVpbGRSZXN1bHQoY29udGFpbmVyVywgY29udGFpbmVySCwgY29udGVudFcsIGNvbnRlbnRILCBzY2FsZSwgc2NhbGUpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgRml4ZWRXaWR0aCA9IGNjLkNsYXNzKHtcbiAgICAgICAgbmFtZTogXCJGaXhlZFdpZHRoXCIsXG4gICAgICAgIGV4dGVuZHM6IGNjLkNvbnRlbnRTdHJhdGVneSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHZpZXcsIGRlc2lnbmVkUmVzb2x1dGlvbikge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lclcgPSBjYy5nYW1lLmNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgICAgICBjb250YWluZXJIID0gY2MuZ2FtZS5jYW52YXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGRlc2lnblcgPSBkZXNpZ25lZFJlc29sdXRpb24ud2lkdGgsXG4gICAgICAgICAgICAgICAgc2NhbGUgPSBjb250YWluZXJXIC8gZGVzaWduVyxcbiAgICAgICAgICAgICAgICBjb250ZW50VyA9IGNvbnRhaW5lclcsXG4gICAgICAgICAgICAgICAgY29udGVudEggPSBjb250YWluZXJIO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYnVpbGRSZXN1bHQoY29udGFpbmVyVywgY29udGFpbmVySCwgY29udGVudFcsIGNvbnRlbnRILCBzY2FsZSwgc2NhbGUpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBBbGlhczogU3RyYXRlZ3kgdG8gc2NhbGUgdGhlIGNvbnRlbnQncyBzaXplIHRvIGNvbnRhaW5lcidzIHNpemUsIG5vbiBwcm9wb3J0aW9uYWxcbiAgICBjYy5Db250ZW50U3RyYXRlZ3kuRVhBQ1RfRklUID0gbmV3IEV4YWN0Rml0KCk7XG4gICAgLy8gQWxpYXM6IFN0cmF0ZWd5IHRvIHNjYWxlIHRoZSBjb250ZW50J3Mgc2l6ZSBwcm9wb3J0aW9uYWxseSB0byBtYXhpbXVtIHNpemUgYW5kIGtlZXBzIHRoZSB3aG9sZSBjb250ZW50IGFyZWEgdG8gYmUgdmlzaWJsZVxuICAgIGNjLkNvbnRlbnRTdHJhdGVneS5TSE9XX0FMTCA9IG5ldyBTaG93QWxsKCk7XG4gICAgLy8gQWxpYXM6IFN0cmF0ZWd5IHRvIHNjYWxlIHRoZSBjb250ZW50J3Mgc2l6ZSBwcm9wb3J0aW9uYWxseSB0byBmaWxsIHRoZSB3aG9sZSBjb250YWluZXIgYXJlYVxuICAgIGNjLkNvbnRlbnRTdHJhdGVneS5OT19CT1JERVIgPSBuZXcgTm9Cb3JkZXIoKTtcbiAgICAvLyBBbGlhczogU3RyYXRlZ3kgdG8gc2NhbGUgdGhlIGNvbnRlbnQncyBoZWlnaHQgdG8gY29udGFpbmVyJ3MgaGVpZ2h0IGFuZCBwcm9wb3J0aW9uYWxseSBzY2FsZSBpdHMgd2lkdGhcbiAgICBjYy5Db250ZW50U3RyYXRlZ3kuRklYRURfSEVJR0hUID0gbmV3IEZpeGVkSGVpZ2h0KCk7XG4gICAgLy8gQWxpYXM6IFN0cmF0ZWd5IHRvIHNjYWxlIHRoZSBjb250ZW50J3Mgd2lkdGggdG8gY29udGFpbmVyJ3Mgd2lkdGggYW5kIHByb3BvcnRpb25hbGx5IHNjYWxlIGl0cyBoZWlnaHRcbiAgICBjYy5Db250ZW50U3RyYXRlZ3kuRklYRURfV0lEVEggPSBuZXcgRml4ZWRXaWR0aCgpO1xufSkoKTtcblxuLyoqXG4gKiA8cD5jYy5SZXNvbHV0aW9uUG9saWN5IGNsYXNzIGlzIHRoZSByb290IHN0cmF0ZWd5IGNsYXNzIG9mIHNjYWxlIHN0cmF0ZWd5LFxuICogaXRzIG1haW4gdGFzayBpcyB0byBtYWludGFpbiB0aGUgY29tcGF0aWJpbGl0eSB3aXRoIENvY29zMmQteDwvcD5cbiAqXG4gKiBAY2xhc3MgUmVzb2x1dGlvblBvbGljeVxuICovXG4vKipcbiAqIEBtZXRob2QgY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7Q29udGFpbmVyU3RyYXRlZ3l9IGNvbnRhaW5lclN0ZyBUaGUgY29udGFpbmVyIHN0cmF0ZWd5XG4gKiBAcGFyYW0ge0NvbnRlbnRTdHJhdGVneX0gY29udGVudFN0ZyBUaGUgY29udGVudCBzdHJhdGVneVxuICovXG5jYy5SZXNvbHV0aW9uUG9saWN5ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6IFwiY2MuUmVzb2x1dGlvblBvbGljeVwiLFxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIG9mIGNjLlJlc29sdXRpb25Qb2xpY3lcbiAgICAgKiBAcGFyYW0ge0NvbnRhaW5lclN0cmF0ZWd5fSBjb250YWluZXJTdGdcbiAgICAgKiBAcGFyYW0ge0NvbnRlbnRTdHJhdGVneX0gY29udGVudFN0Z1xuICAgICAqL1xuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoY29udGFpbmVyU3RnLCBjb250ZW50U3RnKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lclN0cmF0ZWd5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY29udGVudFN0cmF0ZWd5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZXRDb250YWluZXJTdHJhdGVneShjb250YWluZXJTdGcpO1xuICAgICAgICB0aGlzLnNldENvbnRlbnRTdHJhdGVneShjb250ZW50U3RnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBNYW5pcHVsYXRpb24gYmVmb3JlIGFwcGx5aW5nIHRoZSByZXNvbHV0aW9uIHBvbGljeVxuICAgICAqICEjemgg562W55Wl5bqU55So5YmN55qE5pON5L2cXG4gICAgICogQG1ldGhvZCBwcmVBcHBseVxuICAgICAqIEBwYXJhbSB7Vmlld30gdmlldyBUaGUgdGFyZ2V0IHZpZXdcbiAgICAgKi9cbiAgICBwcmVBcHBseTogZnVuY3Rpb24gcHJlQXBwbHkodmlldykge1xuICAgICAgICB0aGlzLl9jb250YWluZXJTdHJhdGVneS5wcmVBcHBseSh2aWV3KTtcbiAgICAgICAgdGhpcy5fY29udGVudFN0cmF0ZWd5LnByZUFwcGx5KHZpZXcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEZ1bmN0aW9uIHRvIGFwcGx5IHRoaXMgcmVzb2x1dGlvbiBwb2xpY3lcbiAgICAgKiBUaGUgcmV0dXJuIHZhbHVlIGlzIHtzY2FsZTogW3NjYWxlWCwgc2NhbGVZXSwgdmlld3BvcnQ6IHtjYy5SZWN0fX0sXG4gICAgICogVGhlIHRhcmdldCB2aWV3IGNhbiB0aGVuIGFwcGx5IHRoZXNlIHZhbHVlIHRvIGl0c2VsZiwgaXQncyBwcmVmZXJyZWQgbm90IHRvIG1vZGlmeSBkaXJlY3RseSBpdHMgcHJpdmF0ZSB2YXJpYWJsZXNcbiAgICAgKiAhI3poIOiwg+eUqOetlueVpeaWueazlVxuICAgICAqIEBtZXRob2QgYXBwbHlcbiAgICAgKiBAcGFyYW0ge1ZpZXd9IHZpZXcgLSBUaGUgdGFyZ2V0IHZpZXdcbiAgICAgKiBAcGFyYW0ge1NpemV9IGRlc2lnbmVkUmVzb2x1dGlvbiAtIFRoZSB1c2VyIGRlZmluZWQgZGVzaWduIHJlc29sdXRpb25cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWlucyB0aGUgc2NhbGUgWC9ZIHZhbHVlcyBhbmQgdGhlIHZpZXdwb3J0IHJlY3RcbiAgICAgKi9cbiAgICBhcHBseTogZnVuY3Rpb24gYXBwbHkodmlldywgZGVzaWduZWRSZXNvbHV0aW9uKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lclN0cmF0ZWd5LmFwcGx5KHZpZXcsIGRlc2lnbmVkUmVzb2x1dGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50U3RyYXRlZ3kuYXBwbHkodmlldywgZGVzaWduZWRSZXNvbHV0aW9uKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogISNlbiBNYW5pcHVsYXRpb24gYWZ0ZXIgYXBweWxpbmcgdGhlIHN0cmF0ZWd5XG4gICAgICogISN6aCDnrZbnlaXlupTnlKjkuYvlkI7nmoTmk43kvZxcbiAgICAgKiBAbWV0aG9kIHBvc3RBcHBseVxuICAgICAqIEBwYXJhbSB7Vmlld30gdmlldyAtIFRoZSB0YXJnZXQgdmlld1xuICAgICAqL1xuICAgIHBvc3RBcHBseTogZnVuY3Rpb24gcG9zdEFwcGx5KHZpZXcpIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyU3RyYXRlZ3kucG9zdEFwcGx5KHZpZXcpO1xuICAgICAgICB0aGlzLl9jb250ZW50U3RyYXRlZ3kucG9zdEFwcGx5KHZpZXcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2V0dXAgdGhlIGNvbnRhaW5lcidzIHNjYWxlIHN0cmF0ZWd5XG4gICAgICogISN6aCDorr7nva7lrrnlmajnmoTpgILphY3nrZbnlaVcbiAgICAgKiBAbWV0aG9kIHNldENvbnRhaW5lclN0cmF0ZWd5XG4gICAgICogQHBhcmFtIHtDb250YWluZXJTdHJhdGVneX0gY29udGFpbmVyU3RnXG4gICAgICovXG4gICAgc2V0Q29udGFpbmVyU3RyYXRlZ3k6IGZ1bmN0aW9uIHNldENvbnRhaW5lclN0cmF0ZWd5KGNvbnRhaW5lclN0Zykge1xuICAgICAgICBpZiAoY29udGFpbmVyU3RnIGluc3RhbmNlb2YgY2MuQ29udGFpbmVyU3RyYXRlZ3kpIHRoaXMuX2NvbnRhaW5lclN0cmF0ZWd5ID0gY29udGFpbmVyU3RnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2V0dXAgdGhlIGNvbnRlbnQncyBzY2FsZSBzdHJhdGVneVxuICAgICAqICEjemgg6K6+572u5YaF5a6555qE6YCC6YWN562W55WlXG4gICAgICogQG1ldGhvZCBzZXRDb250ZW50U3RyYXRlZ3lcbiAgICAgKiBAcGFyYW0ge0NvbnRlbnRTdHJhdGVneX0gY29udGVudFN0Z1xuICAgICAqL1xuICAgIHNldENvbnRlbnRTdHJhdGVneTogZnVuY3Rpb24gc2V0Q29udGVudFN0cmF0ZWd5KGNvbnRlbnRTdGcpIHtcbiAgICAgICAgaWYgKGNvbnRlbnRTdGcgaW5zdGFuY2VvZiBjYy5Db250ZW50U3RyYXRlZ3kpIHRoaXMuX2NvbnRlbnRTdHJhdGVneSA9IGNvbnRlbnRTdGc7XG4gICAgfVxufSk7XG5cbmpzLmdldChjYy5SZXNvbHV0aW9uUG9saWN5LnByb3RvdHlwZSwgXCJjYW52YXNTaXplXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2MudjIoY2MuZ2FtZS5jYW52YXMud2lkdGgsIGNjLmdhbWUuY2FudmFzLmhlaWdodCk7XG59KTtcblxuLyoqXG4gKiBUaGUgZW50aXJlIGFwcGxpY2F0aW9uIGlzIHZpc2libGUgaW4gdGhlIHNwZWNpZmllZCBhcmVhIHdpdGhvdXQgdHJ5aW5nIHRvIHByZXNlcnZlIHRoZSBvcmlnaW5hbCBhc3BlY3QgcmF0aW8uPGJyLz5cbiAqIERpc3RvcnRpb24gY2FuIG9jY3VyLCBhbmQgdGhlIGFwcGxpY2F0aW9uIG1heSBhcHBlYXIgc3RyZXRjaGVkIG9yIGNvbXByZXNzZWQuXG4gKiBAcHJvcGVydHkge051bWJlcn0gRVhBQ1RfRklUXG4gKiBAcmVhZG9ubHlcbiAqIEBzdGF0aWNcbiAqL1xuY2MuUmVzb2x1dGlvblBvbGljeS5FWEFDVF9GSVQgPSAwO1xuXG4vKipcbiAqIFRoZSBlbnRpcmUgYXBwbGljYXRpb24gZmlsbHMgdGhlIHNwZWNpZmllZCBhcmVhLCB3aXRob3V0IGRpc3RvcnRpb24gYnV0IHBvc3NpYmx5IHdpdGggc29tZSBjcm9wcGluZyw8YnIvPlxuICogd2hpbGUgbWFpbnRhaW5pbmcgdGhlIG9yaWdpbmFsIGFzcGVjdCByYXRpbyBvZiB0aGUgYXBwbGljYXRpb24uXG4gKiBAcHJvcGVydHkge051bWJlcn0gTk9fQk9SREVSXG4gKiBAcmVhZG9ubHlcbiAqIEBzdGF0aWNcbiAqL1xuY2MuUmVzb2x1dGlvblBvbGljeS5OT19CT1JERVIgPSAxO1xuXG4vKipcbiAqIFRoZSBlbnRpcmUgYXBwbGljYXRpb24gaXMgdmlzaWJsZSBpbiB0aGUgc3BlY2lmaWVkIGFyZWEgd2l0aG91dCBkaXN0b3J0aW9uIHdoaWxlIG1haW50YWluaW5nIHRoZSBvcmlnaW5hbDxici8+XG4gKiBhc3BlY3QgcmF0aW8gb2YgdGhlIGFwcGxpY2F0aW9uLiBCb3JkZXJzIGNhbiBhcHBlYXIgb24gdHdvIHNpZGVzIG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBTSE9XX0FMTFxuICogQHJlYWRvbmx5XG4gKiBAc3RhdGljXG4gKi9cbmNjLlJlc29sdXRpb25Qb2xpY3kuU0hPV19BTEwgPSAyO1xuXG4vKipcbiAqIFRoZSBhcHBsaWNhdGlvbiB0YWtlcyB0aGUgaGVpZ2h0IG9mIHRoZSBkZXNpZ24gcmVzb2x1dGlvbiBzaXplIGFuZCBtb2RpZmllcyB0aGUgd2lkdGggb2YgdGhlIGludGVybmFsPGJyLz5cbiAqIGNhbnZhcyBzbyB0aGF0IGl0IGZpdHMgdGhlIGFzcGVjdCByYXRpbyBvZiB0aGUgZGV2aWNlPGJyLz5cbiAqIG5vIGRpc3RvcnRpb24gd2lsbCBvY2N1ciBob3dldmVyIHlvdSBtdXN0IG1ha2Ugc3VyZSB5b3VyIGFwcGxpY2F0aW9uIHdvcmtzIG9uIGRpZmZlcmVudDxici8+XG4gKiBhc3BlY3QgcmF0aW9zXG4gKiBAcHJvcGVydHkge051bWJlcn0gRklYRURfSEVJR0hUXG4gKiBAcmVhZG9ubHlcbiAqIEBzdGF0aWNcbiAqL1xuY2MuUmVzb2x1dGlvblBvbGljeS5GSVhFRF9IRUlHSFQgPSAzO1xuXG4vKipcbiAqIFRoZSBhcHBsaWNhdGlvbiB0YWtlcyB0aGUgd2lkdGggb2YgdGhlIGRlc2lnbiByZXNvbHV0aW9uIHNpemUgYW5kIG1vZGlmaWVzIHRoZSBoZWlnaHQgb2YgdGhlIGludGVybmFsPGJyLz5cbiAqIGNhbnZhcyBzbyB0aGF0IGl0IGZpdHMgdGhlIGFzcGVjdCByYXRpbyBvZiB0aGUgZGV2aWNlPGJyLz5cbiAqIG5vIGRpc3RvcnRpb24gd2lsbCBvY2N1ciBob3dldmVyIHlvdSBtdXN0IG1ha2Ugc3VyZSB5b3VyIGFwcGxpY2F0aW9uIHdvcmtzIG9uIGRpZmZlcmVudDxici8+XG4gKiBhc3BlY3QgcmF0aW9zXG4gKiBAcHJvcGVydHkge051bWJlcn0gRklYRURfV0lEVEhcbiAqIEByZWFkb25seVxuICogQHN0YXRpY1xuICovXG5jYy5SZXNvbHV0aW9uUG9saWN5LkZJWEVEX1dJRFRIID0gNDtcblxuLyoqXG4gKiBVbmtub3cgcG9saWN5XG4gKiBAcHJvcGVydHkge051bWJlcn0gVU5LTk9XTlxuICogQHJlYWRvbmx5XG4gKiBAc3RhdGljXG4gKi9cbmNjLlJlc29sdXRpb25Qb2xpY3kuVU5LTk9XTiA9IDU7XG5cbi8qKlxuICogQG1vZHVsZSBjY1xuICovXG5cbi8qKlxuICogISNlbiBjYy52aWV3IGlzIHRoZSBzaGFyZWQgdmlldyBvYmplY3QuXG4gKiAhI3poIGNjLnZpZXcg5piv5YWo5bGA55qE6KeG5Zu+5a+56LGh44CCXG4gKiBAcHJvcGVydHkgdmlld1xuICogQHN0YXRpY1xuICogQHR5cGUge1ZpZXd9XG4gKi9cbmNjLnZpZXcgPSBuZXcgVmlldygpO1xuXG4vKipcbiAqICEjZW4gY2Mud2luU2l6ZSBpcyB0aGUgYWxpYXMgb2JqZWN0IGZvciB0aGUgc2l6ZSBvZiB0aGUgY3VycmVudCBnYW1lIHdpbmRvdy5cbiAqICEjemggY2Mud2luU2l6ZSDkuLrlvZPliY3nmoTmuLjmiI/nqpflj6PnmoTlpKflsI/jgIJcbiAqIEBwcm9wZXJ0eSB3aW5TaXplXG4gKiBAdHlwZSBTaXplXG4gKi9cbmNjLndpblNpemUgPSBjYy52MigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNjLnZpZXc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EVm1sbGR5NXFjeUpkTENKdVlXMWxjeUk2V3lKRmRtVnVkRlJoY21kbGRDSXNJbkpsY1hWcGNtVWlMQ0pxY3lJc0luSmxibVJsY21WeUlpd2lhWE5ZYVdGdmJXbEhZVzFsSWl3aVkyTWlMQ0p6ZVhNaUxDSndiR0YwWm05eWJTSXNJbGhKUVU5TlNWOUhRVTFGSWl3aWFYTkNZV2xrZFVkaGJXVWlMQ0pDUVVsRVZWOUhRVTFGSWl3aWFYTkJiR2x3WVhsSFlXMWxJaXdpUVV4SlVFRlpYMGRCVFVVaUxDSmZYMEp5YjNkelpYSkhaWFIwWlhJaUxDSnBibWwwSWl3aVEwTmZWMFZEU0VGVVIwRk5SU0lzSWtORFgxRlJVRXhCV1NJc0ltaDBiV3dpTENKa2IyTjFiV1Z1ZENJc0ltZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxJaXdpWVhaaGFXeFhhV1IwYUNJc0ltWnlZVzFsSWl3aWQybHVaRzkzSWl3aWFXNXVaWEpYYVdSMGFDSXNJbU5zYVdWdWRGZHBaSFJvSWl3aVlYWmhhV3hJWldsbmFIUWlMQ0pwYm01bGNraGxhV2RvZENJc0ltTnNhV1Z1ZEVobGFXZG9kQ0lzSW0xbGRHRWlMQ0poWkdGd2RHRjBhVzl1Vkhsd1pTSXNJbUp5YjNkelpYSlVlWEJsSWl3aWIzTWlMQ0pQVTE5SlQxTWlMQ0pDVWs5WFUwVlNYMVJaVUVWZlUwRkdRVkpKSWl3aVFsSlBWMU5GVWw5VVdWQkZYMEpCU1VSVlgwZEJUVVZmVTFWQ0lpd2lRbEpQVjFORlVsOVVXVkJGWDBKQlNVUlZYMGRCVFVVaUxDSkNVazlYVTBWU1gxUlpVRVZmV0VsQlQwMUpYMGRCVFVVaUxDSkNVazlYVTBWU1gxUlpVRVZmUVV4SlVFRlpYMGRCVFVVaUxDSkNVazlYVTBWU1gxUlpVRVZmVjBWRFNFRlVYMGRCVFVWZlUxVkNJaXdpUWxKUFYxTkZVbDlVV1ZCRlgxZEZRMGhCVkY5SFFVMUZJaXdpUWxKUFYxTkZVbDlVV1ZCRlgxRlJYMUJNUVZraUxDSkNVazlYVTBWU1gxUlpVRVZmVTA5VlIwOVZJaXdpUWxKUFYxTkZVbDlVV1ZCRlgxVkRJaXdpYzJoaGNtVmtRMkZ1ZG1Geklpd2lkM2dpTENKblpYUlRhR0Z5WldSRFlXNTJZWE1pTENKM2FXUjBhQ0lzSW1obGFXZG9kQ0lzSWw5elkybHpjMjl5VW1WamRDSXNJbFpwWlhjaUxDSmpZV3hzSWl3aVgzUWlMQ0pmYzNSeVlYUmxaM2xsY2lJc0lrTnZiblJoYVc1bGNsTjBjbUYwWldkNUlpd2lYM04wY21GMFpXZDVJaXdpUTI5dWRHVnVkRk4wY21GMFpXZDVJaXdpWDJaeVlXMWxVMmw2WlNJc0luTnBlbVVpTENKZlpHVnphV2R1VW1WemIyeDFkR2x2YmxOcGVtVWlMQ0pmYjNKcFoybHVZV3hFWlhOcFoyNVNaWE52YkhWMGFXOXVVMmw2WlNJc0lsOXpZMkZzWlZnaUxDSmZjMk5oYkdWWklpd2lYM1pwWlhkd2IzSjBVbVZqZENJc0luSmxZM1FpTENKZmRtbHphV0pzWlZKbFkzUWlMQ0pmWVhWMGIwWjFiR3hUWTNKbFpXNGlMQ0pmWkdWMmFXTmxVR2w0Wld4U1lYUnBieUlzSWw5dFlYaFFhWGhsYkZKaGRHbHZJaXdpWDNKbGRHbHVZVVZ1WVdKc1pXUWlMQ0pmY21WemFYcGxRMkZzYkdKaFkyc2lMQ0pmY21WemFYcHBibWNpTENKZmNtVnphWHBsVjJsMGFFSnliM2R6WlhKVGFYcGxJaXdpWDI5eWFXVnVkR0YwYVc5dVEyaGhibWRwYm1jaUxDSmZhWE5TYjNSaGRHVmtJaXdpWDI5eWFXVnVkR0YwYVc5dUlpd2liV0ZqY204aUxDSlBVa2xGVGxSQlZFbFBUbDlCVlZSUElpd2lYMmx6UVdScWRYTjBWbWxsZDNCdmNuUWlMQ0pmWVc1MGFVRnNhV0Z6Ulc1aFlteGxaQ0lzSWw5eVpYTnZiSFYwYVc5dVVHOXNhV041SWl3aVgzSndSWGhoWTNSR2FYUWlMQ0pTWlhOdmJIVjBhVzl1VUc5c2FXTjVJaXdpUlZGVlFVeGZWRTlmUmxKQlRVVWlMQ0pGV0VGRFZGOUdTVlFpTENKZmNuQlRhRzkzUVd4c0lpd2lVMGhQVjE5QlRFd2lMQ0pmY25CT2IwSnZjbVJsY2lJc0lrNVBYMEpQVWtSRlVpSXNJbDl5Y0VacGVHVmtTR1ZwWjJoMElpd2lSa2xZUlVSZlNFVkpSMGhVSWl3aVgzSndSbWw0WldSWGFXUjBhQ0lzSWtaSldFVkVYMWRKUkZSSUlpd2laMkZ0WlNJc0ltOXVZMlVpTENKRlZrVk9WRjlGVGtkSlRrVmZTVTVKVkVWRUlpd2laWGgwWlc1a0lpd2liV2w0YVc0aUxDSndjbTkwYjNSNWNHVWlMQ0pmYVc1cGRFWnlZVzFsVTJsNlpTSXNJbVZ1WVdKc1pVRnVkR2xCYkdsaGN5SXNJbmNpTENKallXNTJZWE1pTENKb0lpd2lkMmx1VTJsNlpTSXNJblpwYzJsaWJHVlNaV04wSWl3aVgzSmxjMmw2WlVWMlpXNTBJaXdpWm05eVkyVlBja1YyWlc1MElpd2lkbWxsZHlJc0luTmxkRVJsYzJsbmJsSmxjMjlzZFhScGIyNVRhWHBsSWl3aWNISmxka1p5WVcxbFZ5SXNJbkJ5WlhaR2NtRnRaVWdpTENKd2NtVjJVbTkwWVhSbFpDSXNJbWx6VFc5aWFXeGxJaXdpWTI5dWRHRnBibVZ5VTNSNWJHVWlMQ0pqYjI1MFlXbHVaWElpTENKemRIbHNaU0lzSW0xaGNtZHBiaUlzSW1ScGMzQnNZWGtpTENKbGJXbDBJaXdpWDI5eWFXVnVkR0YwYVc5dVEyaGhibWRsSWl3aWNtVnphWHBsVjJsMGFFSnliM2R6WlhKVGFYcGxJaXdpWlc1aFlteGxaQ0lzSW1Ga1pFVjJaVzUwVEdsemRHVnVaWElpTENKeVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUlpd2ljMlYwVW1WemFYcGxRMkZzYkdKaFkyc2lMQ0pqWVd4c1ltRmpheUlzSWtORFgwVkVTVlJQVWlJc0luTmxkRTl5YVdWdWRHRjBhVzl1SWl3aWIzSnBaVzUwWVhScGIyNGlMQ0prWlhOcFoyNVhhV1IwYUNJc0ltUmxjMmxuYmtobGFXZG9kQ0lzSW14dlkwWnlZVzFsVTJsNlpTSXNJbWx6VEdGdVpITmpZWEJsSWl3aVQxSkpSVTVVUVZSSlQwNWZURUZPUkZORFFWQkZJaXdpVDFKSlJVNVVRVlJKVDA1ZlVFOVNWRkpCU1ZRaUxDSjBjbUZ1YzJadmNtMGlMQ0owY21GdWMyWnZjbTFQY21sbmFXNGlMQ0p6WlhSVWFXMWxiM1YwSWl3aVgyRmthblZ6ZEZOcGVtVkxaV1Z3UTJGdWRtRnpVMmw2WlNJc0lsOXpaWFJXYVdWM2NHOXlkRTFsZEdFaUxDSnRaWFJoY3lJc0ltOTJaWEozY21sMFpTSXNJblp3SWl3aVoyVjBSV3hsYldWdWRFSjVTV1FpTENKb1pXRmtJaXdpY21WdGIzWmxRMmhwYkdRaUxDSmxiR1Z0Y3lJc0ltZGxkRVZzWlcxbGJuUnpRbmxPWVcxbElpd2lZM1Z5Y21WdWRGWlFJaXdpWTI5dWRHVnVkQ0lzSW10bGVTSXNJbkJoZEhSbGNtNGlMQ0pqY21WaGRHVkZiR1Z0Wlc1MElpd2lhV1FpTENKdVlXMWxJaXdpYVc1a1pYaFBaaUlzSWxKbFowVjRjQ0lzSW5KbGNHeGhZMlVpTENKMFpYTjBJaXdpYzNWaWMzUnlJaXdpWVhCd1pXNWtRMmhwYkdRaUxDSmZZV1JxZFhOMFZtbGxkM0J2Y25STlpYUmhJaXdpUTBOZlNsTkNJaXdpUTBOZlVsVk9WRWxOUlNJc0ltRmthblZ6ZEZacFpYZHdiM0owVFdWMFlTSXNJbVZ1WVdKc1pWSmxkR2x1WVNJc0ltbHpVbVYwYVc1aFJXNWhZbXhsWkNJc0luSmxibVJsY2xSNWNHVWlMQ0pTUlU1RVJWSmZWRmxRUlY5WFJVSkhUQ0lzSW1OaFkyaGxJaXdpYkc5aFpHVnlJaXdpWDJOaFkyaGxJaXdpYVhSbGJTSXNJblJsZUNJc0lsUmxlSFIxY21VeVJDSXNJa1pwYkhSbGNpSXNJbk5sZEVacGJIUmxjbk1pTENKTVNVNUZRVklpTENKT1JVRlNSVk5VSWl3aVVrVk9SRVZTWDFSWlVFVmZRMEZPVmtGVElpd2lZM1I0SWl3aVoyVjBRMjl1ZEdWNGRDSXNJbWx0WVdkbFUyMXZiM1JvYVc1blJXNWhZbXhsWkNJc0ltMXZla2x0WVdkbFUyMXZiM1JvYVc1blJXNWhZbXhsWkNJc0ltbHpRVzUwYVVGc2FXRnpSVzVoWW14bFpDSXNJbVZ1WVdKc1pVRjFkRzlHZFd4c1UyTnlaV1Z1SWl3aVFsSlBWMU5GVWw5VVdWQkZYMWRGUTBoQlZDSXNJbk5qY21WbGJpSXNJbUYxZEc5R2RXeHNVMk55WldWdUlpd2laR2x6WVdKc1pVRjFkRzlHZFd4c1UyTnlaV1Z1SWl3aWFYTkJkWFJ2Um5Wc2JGTmpjbVZsYmtWdVlXSnNaV1FpTENKelpYUkRZVzUyWVhOVGFYcGxJaXdpWjJWMFEyRnVkbUZ6VTJsNlpTSXNJbWRsZEVaeVlXMWxVMmw2WlNJc0luTmxkRVp5WVcxbFUybDZaU0lzSW1kbGRGWnBjMmxpYkdWVGFYcGxJaXdpWjJWMFZtbHphV0pzWlZOcGVtVkpibEJwZUdWc0lpd2laMlYwVm1semFXSnNaVTl5YVdkcGJpSXNJbll5SWl3aWVDSXNJbmtpTENKblpYUldhWE5wWW14bFQzSnBaMmx1U1c1UWFYaGxiQ0lzSW1kbGRGSmxjMjlzZFhScGIyNVFiMnhwWTNraUxDSnpaWFJTWlhOdmJIVjBhVzl1VUc5c2FXTjVJaXdpY21WemIyeDFkR2x2YmxCdmJHbGplU0lzSWw5c2IyTlFiMnhwWTNraUxDSnNiMmRKUkNJc0luQnZiR2xqZVNJc0luQnlaVUZ3Y0d4NUlpd2ljbVZ6ZFd4MElpd2lZWEJ3YkhraUxDSnpZMkZzWlNJc0lteGxibWQwYUNJc0luWnBaWGR3YjNKMElpd2lkbUlpTENKeWRpSXNJbkJ2YzNSQmNIQnNlU0lzSW5Wd1pHRjBaVU5oYldWeVlWWnBaWGR3YjNKMElpd2laMlYwUkdWemFXZHVVbVZ6YjJ4MWRHbHZibE5wZW1VaUxDSnpaWFJTWldGc1VHbDRaV3hTWlhOdmJIVjBhVzl1SWl3aVpHOWpkVzFsYm5SRmJHVnRaVzUwSWl3aVltOWtlU0lzSW14bFpuUWlMQ0owYjNBaUxDSnpaWFJXYVdWM2NHOXlkRWx1VUc5cGJuUnpJaXdpYkc5alUyTmhiR1ZZSWl3aWJHOWpVMk5oYkdWWklpd2lYM0psYm1SbGNrTnZiblJsZUhRaUxDSnpaWFJUWTJsemMyOXlTVzVRYjJsdWRITWlMQ0p6WTJGc1pWZ2lMQ0p6WTJGc1pWa2lMQ0p6ZUNJc0lrMWhkR2dpTENKalpXbHNJaXdpYzNraUxDSnpkeUlzSW5Ob0lpd2laMndpTENKaWIzaEJjbklpTENKblpYUlFZWEpoYldWMFpYSWlMQ0pUUTBsVFUwOVNYMEpQV0NJc0luTmphWE56YjNJaUxDSnBjMU5qYVhOemIzSkZibUZpYkdWa0lpd2lhWE5GYm1GaWJHVmtJaXdpVTBOSlUxTlBVbDlVUlZOVUlpd2laMlYwVTJOcGMzTnZjbEpsWTNRaUxDSnpZMkZzWlZoR1lXTjBiM0lpTENKelkyRnNaVmxHWVdOMGIzSWlMQ0puWlhSV2FXVjNjRzl5ZEZKbFkzUWlMQ0puWlhSVFkyRnNaVmdpTENKblpYUlRZMkZzWlZraUxDSm5aWFJFWlhacFkyVlFhWGhsYkZKaGRHbHZJaXdpWTI5dWRtVnlkRlJ2VEc5allYUnBiMjVKYmxacFpYY2lMQ0owZUNJc0luUjVJaXdpY21Wc1lYUmxaRkJ2Y3lJc0ltOTFkQ0lzSWw5amIyNTJaWEowVFc5MWMyVlViMHh2WTJGMGFXOXVTVzVXYVdWM0lpd2lhVzVmYjNWMFgzQnZhVzUwSWl3aVgyTnZiblpsY25SUWIybHVkRmRwZEdoVFkyRnNaU0lzSW5CdmFXNTBJaXdpWDJOdmJuWmxjblJVYjNWamFHVnpWMmwwYUZOallXeGxJaXdpZEc5MVkyaGxjeUlzSW5ObGJGUnZkV05vSWl3aWMyVnNVRzlwYm5RaUxDSnpaV3hRY21WUWIybHVkQ0lzSW1raUxDSmZjRzlwYm5RaUxDSmZjSEpsZGxCdmFXNTBJaXdpUTJ4aGMzTWlMQ0prWlhOcFoyNWxaRkpsYzI5c2RYUnBiMjRpTENKZmMyVjBkWEJEYjI1MFlXbHVaWElpTENKc2IyTkRZVzUyWVhNaUxDSnNiMk5EYjI1MFlXbHVaWElpTENKUFUxOUJUa1JTVDBsRUlpd2laR1YyYVdObFVHbDRaV3hTWVhScGJ5SXNJbTFwYmlJc0lsOW1hWGhEYjI1MFlXbHVaWElpTENKcGJuTmxjblJDWldadmNtVWlMQ0ptYVhKemRFTm9hV3hrSWl3aVluTWlMQ0p2ZG1WeVpteHZkeUlzSW1OdmJuUlRkSGxzWlNJc0luQnZjMmwwYVc5dUlpd2ljMk55YjJ4c1ZHOXdJaXdpWTNSdmNpSXNJbDl5WlhOMWJIUWlMQ0pmWW5WcGJHUlNaWE4xYkhRaUxDSmpiMjUwWVdsdVpYSlhJaXdpWTI5dWRHRnBibVZ5U0NJc0ltTnZiblJsYm5SWElpd2lZMjl1ZEdWdWRFZ2lMQ0poWW5NaUxDSkZjWFZoYkZSdlJuSmhiV1VpTENKbGVIUmxibVJ6SWl3aVpuSmhiV1ZJSWl3aWNHRmtaR2x1WnlJc0lsQnliM0J2Y25ScGIyNWhiRlJ2Um5KaGJXVWlMQ0ptY21GdFpWY2lMQ0prWlhOcFoyNVhJaXdpWkdWemFXZHVTQ0lzSW05bVpuZ2lMQ0p5YjNWdVpDSXNJbTltWm5raUxDSndZV1JrYVc1blRHVm1kQ0lzSW5CaFpHUnBibWRTYVdkb2RDSXNJbkJoWkdScGJtZFViM0FpTENKd1lXUmthVzVuUW05MGRHOXRJaXdpUlhGMVlXeFViMWRwYm1SdmR5SXNJbDl6ZFhCbGNpSXNJbEJ5YjNCdmNuUnBiMjVoYkZSdlYybHVaRzkzSWl3aVQzSnBaMmx1WVd4RGIyNTBZV2x1WlhJaUxDSlFVazlRVDFKVVNVOU9YMVJQWDBaU1FVMUZJaXdpVDFKSlIwbE9RVXhmUTA5T1ZFRkpUa1ZTSWl3aVJYaGhZM1JHYVhRaUxDSlRhRzkzUVd4c0lpd2lUbTlDYjNKa1pYSWlMQ0pHYVhobFpFaGxhV2RvZENJc0lrWnBlR1ZrVjJsa2RHZ2lMQ0pqYjI1MFlXbHVaWEpUZEdjaUxDSmpiMjUwWlc1MFUzUm5JaXdpWDJOdmJuUmhhVzVsY2xOMGNtRjBaV2Q1SWl3aVgyTnZiblJsYm5SVGRISmhkR1ZuZVNJc0luTmxkRU52Ym5SaGFXNWxjbE4wY21GMFpXZDVJaXdpYzJWMFEyOXVkR1Z1ZEZOMGNtRjBaV2Q1SWl3aVoyVjBJaXdpVlU1TFRrOVhUaUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFUSkNRU3hKUVVGTlFTeGpRVUZqUXl4UlFVRlJMSFZDUVVGU0xFTkJRWEJDTzBGQlEwRXNTVUZCVFVNc1MwRkJTMFFzVVVGQlVTeG5Ra0ZCVWl4RFFVRllPMEZCUTBFc1NVRkJUVVVzVjBGQlYwWXNVVUZCVVN4aFFVRlNMRU5CUVdwQ08wRkJRMEZCTEZGQlFWRXNjVUpCUVZJN08wRkJSVUU3UVVGRFFTeEpRVUZOUnl4bFFVRm5Ra01zUjBGQlIwTXNSMEZCU0N4RFFVRlBReXhSUVVGUUxFdEJRVzlDUml4SFFVRkhReXhIUVVGSUxFTkJRVTlGTEZkQlFXcEVPMEZCUTBFc1NVRkJUVU1zWTBGQlpVb3NSMEZCUjBNc1IwRkJTQ3hEUVVGUFF5eFJRVUZRTEV0QlFXOUNSaXhIUVVGSFF5eEhRVUZJTEVOQlFVOUpMRlZCUVdoRU8wRkJRMEVzU1VGQlRVTXNaVUZCWjBKT0xFZEJRVWRETEVkQlFVZ3NRMEZCVDBNc1VVRkJVQ3hMUVVGdlFrWXNSMEZCUjBNc1IwRkJTQ3hEUVVGUFRTeFhRVUZxUkRzN1FVRkZRU3hKUVVGSlF5eHJRa0ZCYTBJN1FVRkRiRUpETEZWQlFVMHNaMEpCUVZVN1FVRkRXanRCUVVOQkxGbEJRVWtzUTBGQlEwTXNZVUZCUkN4SlFVRnJRaXhEUVVGRFF5eFRRVUZ1UWl4SlFVRm5ReXhEUVVGRFVDeFhRVUZxUXl4SlFVRm5SQ3hEUVVGRFRDeFpRVUZxUkN4SlFVRnBSU3hEUVVGRFR5eFpRVUYwUlN4RlFVRnZSanRCUVVOb1JpeHBRa0ZCUzAwc1NVRkJUQ3hIUVVGWlF5eFRRVUZUUXl4dlFrRkJWQ3hEUVVFNFFpeE5RVUU1UWl4RlFVRnpReXhEUVVGMFF5eERRVUZhTzBGQlEwZzdRVUZEU2l4TFFVNXBRanRCUVU5c1FrTXNaMEpCUVZrc2IwSkJRVk5ETEV0QlFWUXNSVUZCWlR0QlFVTjJRaXhaUVVGSkxFTkJRVU5CTEV0QlFVUXNTVUZCVlVFc1ZVRkJWU3hMUVVGTFNpeEpRVUUzUWl4RlFVTkpMRTlCUVU5TExFOUJRVTlETEZWQlFXUXNRMEZFU2l4TFFVZEpMRTlCUVU5R0xFMUJRVTFITEZkQlFXSTdRVUZEVUN4TFFWcHBRanRCUVdGc1FrTXNhVUpCUVdFc2NVSkJRVk5LTEV0QlFWUXNSVUZCWlR0QlFVTjRRaXhaUVVGSkxFTkJRVU5CTEV0QlFVUXNTVUZCVlVFc1ZVRkJWU3hMUVVGTFNpeEpRVUUzUWl4RlFVTkpMRTlCUVU5TExFOUJRVTlKTEZkQlFXUXNRMEZFU2l4TFFVZEpMRTlCUVU5TUxFMUJRVTFOTEZsQlFXSTdRVUZEVUN4TFFXeENhVUk3UVVGdFFteENReXhWUVVGTk8wRkJRMFlzYVVKQlFWTTdRVUZFVUN4TFFXNUNXVHRCUVhOQ2JFSkRMRzlDUVVGblFuaENMRWRCUVVkRExFZEJRVWdzUTBGQlQzZENPMEZCZEVKTUxFTkJRWFJDT3p0QlFYbENRU3hKUVVGSmVrSXNSMEZCUjBNc1IwRkJTQ3hEUVVGUGVVSXNSVUZCVUN4TFFVRmpNVUlzUjBGQlIwTXNSMEZCU0N4RFFVRlBNRUlzVFVGQmVrSXNSVUZCYVVNN1FVRkROMEp1UWl4dlFrRkJaMEpuUWl4alFVRm9RaXhIUVVGcFEzaENMRWRCUVVkRExFZEJRVWdzUTBGQlR6SkNMRzFDUVVGNFF6czdRVUZGU2l4SlFVRkplRUlzVjBGQlNpeEZRVUZwUWp0QlFVTmlMRkZCUVVsS0xFZEJRVWRETEVkQlFVZ3NRMEZCVDNkQ0xGZEJRVkFzUzBGQmRVSjZRaXhIUVVGSFF5eEhRVUZJTEVOQlFVODBRaXd5UWtGQmJFTXNSVUZCSzBRN1FVRkRNMFJ5UWl4M1FrRkJaMEpuUWl4alFVRm9RaXhIUVVGcFEzaENMRWRCUVVkRExFZEJRVWdzUTBGQlR6UkNMREpDUVVGNFF6dEJRVU5JTEV0QlJrUXNUVUZIU3p0QlFVTkVja0lzZDBKQlFXZENaMElzWTBGQmFFSXNSMEZCYVVONFFpeEhRVUZIUXl4SFFVRklMRU5CUVU4MlFpeDFRa0ZCZUVNN1FVRkRTRHRCUVVOS096dEJRVVZFTEVsQlFVa3ZRaXhaUVVGS0xFVkJRV3RDTzBGQlEyUlRMRzlDUVVGblFtZENMR05CUVdoQ0xFZEJRV2xEZUVJc1IwRkJSME1zUjBGQlNDeERRVUZQT0VJc2QwSkJRWGhETzBGQlEwZzdPMEZCUlVRN1FVRkRRU3hKUVVGSmVrSXNXVUZCU2l4RlFVRnJRanRCUVVOa1JTeHZRa0ZCWjBKblFpeGpRVUZvUWl4SFFVRnBRM2hDTEVkQlFVZERMRWRCUVVnc1EwRkJUeXRDTEhkQ1FVRjRRenRCUVVOSU96dEJRVVZFTEVsQlFVbDBRaXhoUVVGS0xFVkJRVzFDTzBGQlEyWXNVVUZCU1ZZc1IwRkJSME1zUjBGQlNDeERRVUZQZDBJc1YwRkJVQ3hMUVVGMVFucENMRWRCUVVkRExFZEJRVWdzUTBGQlQyZERMRFJDUVVGc1F5eEZRVUZuUlR0QlFVTTFSSHBDTEhkQ1FVRm5RbWRDTEdOQlFXaENMRWRCUVdsRGVFSXNSMEZCUjBNc1IwRkJTQ3hEUVVGUFowTXNORUpCUVhoRE8wRkJRMGdzUzBGR1JDeE5RVWRMTzBGQlEwUjZRaXgzUWtGQlowSm5RaXhqUVVGb1FpeEhRVUZwUTNoQ0xFZEJRVWRETEVkQlFVZ3NRMEZCVDJsRExIZENRVUY0UXp0QlFVTklPMEZCUTBvN08wRkJSVVFzU1VGQlNYWkNMRk5CUVVvc1JVRkJaVHRCUVVOWVNDeHZRa0ZCWjBKblFpeGpRVUZvUWl4SFFVRnBRM2hDTEVkQlFVZERMRWRCUVVnc1EwRkJUMnRETEc5Q1FVRjRRenRCUVVOSU96dEJRVVZFTEZGQlFWRXpRaXhuUWtGQlowSm5RaXhqUVVGNFFqdEJRVU5KTEZOQlFVdDRRaXhIUVVGSFF5eEhRVUZJTEVOQlFVOHlRaXh0UWtGQldqdEJRVU5KY0VJc2QwSkJRV2RDWlN4SlFVRm9RaXhEUVVGeFFpeFpRVUZ5UWl4SlFVRnhReXhOUVVGeVF6dEJRVU5LTEZOQlFVdDJRaXhIUVVGSFF5eEhRVUZJTEVOQlFVOXRReXh0UWtGQldqdEJRVU5CTEZOQlFVdHdReXhIUVVGSFF5eEhRVUZJTEVOQlFVOXZReXhsUVVGYU8wRkJRMGszUWl4M1FrRkJaMEpQTEZWQlFXaENMRWRCUVRaQ0xGVkJRVk5ETEV0QlFWUXNSVUZCWlR0QlFVTjRReXh0UWtGQlQwRXNUVUZCVFVjc1YwRkJZanRCUVVOSUxGTkJSa1E3UVVGSFFWZ3NkMEpCUVdkQ1dTeFhRVUZvUWl4SFFVRTRRaXhWUVVGVFNpeExRVUZVTEVWQlFXVTdRVUZEZWtNc2JVSkJRVTlCTEUxQlFVMU5MRmxCUVdJN1FVRkRTQ3hUUVVaRU8wRkJSMEU3UVVGRFNpeFRRVUZMZEVJc1IwRkJSME1zUjBGQlNDeERRVUZQYVVNc2QwSkJRVm83UVVGRFNURkNMSGRDUVVGblFrOHNWVUZCYUVJc1IwRkJOa0lzV1VGQlZUdEJRVU51UXl4dFFrRkJUMFVzVDBGQlQwTXNWVUZCWkR0QlFVTklMRk5CUmtRN1FVRkhRVllzZDBKQlFXZENXU3hYUVVGb1FpeEhRVUU0UWl4WlFVRlZPMEZCUTNCRExHMUNRVUZQU0N4UFFVRlBTU3hYUVVGa08wRkJRMGdzVTBGR1JEdEJRVWRCTzBGQlEwb3NVMEZCUzNKQ0xFZEJRVWRETEVkQlFVZ3NRMEZCVDJkRExEUkNRVUZhTzBGQlEwa3NXVUZCU1Vzc1pVRkJaWEpDTEU5QlFVOXhRaXhaUVVGUUxFbEJRWFZDUXl4SFFVRkhReXhsUVVGSUxFVkJRVEZETzBGQlEwRm9ReXgzUWtGQlowSlBMRlZCUVdoQ0xFZEJRVFpDTEZsQlFWVTdRVUZEYmtNc2JVSkJRVTkxUWl4aFFVRmhSeXhMUVVGd1FqdEJRVU5JTEZOQlJrUTdRVUZIUVdwRExIZENRVUZuUWxrc1YwRkJhRUlzUjBGQk9FSXNXVUZCVlR0QlFVTndReXh0UWtGQlQydENMR0ZCUVdGSkxFMUJRWEJDTzBGQlEwZ3NVMEZHUkR0QlFVZEJPMEZCTlVKU096dEJRU3RDUVN4SlFVRkpReXhsUVVGbExFbEJRVzVDT3p0QlFVVkJPenM3T3pzN096czdPenM3T3pzN1FVRmxRU3hKUVVGSlF5eFBRVUZQTEZOQlFWQkJMRWxCUVU4c1IwRkJXVHRCUVVOdVFtcEVMR2RDUVVGWmEwUXNTVUZCV2l4RFFVRnBRaXhKUVVGcVFqczdRVUZGUVN4UlFVRkpReXhMUVVGTExFbEJRVlE3UVVGQlFTeFJRVUZsUXl4alFVRmpMME1zUjBGQlIyZEVMR2xDUVVGb1F6dEJRVUZCTEZGQlFXMUVReXhaUVVGWmFrUXNSMEZCUjJ0RUxHVkJRV3hGT3p0QlFVVkJNVU1zYjBKQlFXZENReXhKUVVGb1FpeERRVUZ4UWl4SlFVRnlRanM3UVVGRlFUdEJRVU5CY1VNc1QwRkJSMHNzVlVGQlNDeEhRVUZuUW01RUxFZEJRVWR2UkN4SlFVRklMRU5CUVZFc1EwRkJVaXhGUVVGWExFTkJRVmdzUTBGQmFFSTdPMEZCUlVFN1FVRkRRVTRzVDBGQlIwOHNjVUpCUVVnc1IwRkJNa0p5UkN4SFFVRkhiMFFzU1VGQlNDeERRVUZSTEVOQlFWSXNSVUZCVnl4RFFVRllMRU5CUVROQ08wRkJRMEZPTEU5QlFVZFJMRFpDUVVGSUxFZEJRVzFEZEVRc1IwRkJSMjlFTEVsQlFVZ3NRMEZCVVN4RFFVRlNMRVZCUVZjc1EwRkJXQ3hEUVVGdVF6dEJRVU5CVGl4UFFVRkhVeXhQUVVGSUxFZEJRV0VzUTBGQllqdEJRVU5CVkN4UFFVRkhWU3hQUVVGSUxFZEJRV0VzUTBGQllqdEJRVU5CTzBGQlEwRldMRTlCUVVkWExHRkJRVWdzUjBGQmJVSjZSQ3hIUVVGSE1FUXNTVUZCU0N4RFFVRlJMRU5CUVZJc1JVRkJWeXhEUVVGWUxFVkJRV01zUTBGQlpDeEZRVUZwUWl4RFFVRnFRaXhEUVVGdVFqdEJRVU5CTzBGQlEwRmFMRTlCUVVkaExGbEJRVWdzUjBGQmEwSXpSQ3hIUVVGSE1FUXNTVUZCU0N4RFFVRlJMRU5CUVZJc1JVRkJWeXhEUVVGWUxFVkJRV01zUTBGQlpDeEZRVUZwUWl4RFFVRnFRaXhEUVVGc1FqdEJRVU5CTzBGQlEwRmFMRTlCUVVkakxHVkJRVWdzUjBGQmNVSXNTMEZCY2tJN1FVRkRRVHRCUVVOQlpDeFBRVUZIWlN4cFFrRkJTQ3hIUVVGMVFpeERRVUYyUWp0QlFVTkJaaXhQUVVGSFowSXNZMEZCU0N4SFFVRnZRaXhEUVVGd1FqdEJRVU5CTzBGQlEwRm9RaXhQUVVGSGFVSXNZMEZCU0N4SFFVRnZRaXhMUVVGd1FqdEJRVU5CTzBGQlEwRnFRaXhQUVVGSGEwSXNaVUZCU0N4SFFVRnhRaXhKUVVGeVFqdEJRVU5CYkVJc1QwRkJSMjFDTEZOQlFVZ3NSMEZCWlN4TFFVRm1PMEZCUTBGdVFpeFBRVUZIYjBJc2MwSkJRVWdzUjBGQk5FSXNTMEZCTlVJN1FVRkRRWEJDTEU5QlFVZHhRaXh2UWtGQlNDeEhRVUV3UWl4SlFVRXhRanRCUVVOQmNrSXNUMEZCUjNOQ0xGVkJRVWdzUjBGQlowSXNTMEZCYUVJN1FVRkRRWFJDTEU5QlFVZDFRaXhaUVVGSUxFZEJRV3RDY2tVc1IwRkJSM05GTEV0QlFVZ3NRMEZCVTBNc1owSkJRVE5DTzBGQlEwRjZRaXhQUVVGSE1FSXNhVUpCUVVnc1IwRkJkVUlzU1VGQmRrSTdRVUZEUVRGQ0xFOUJRVWN5UWl4cFFrRkJTQ3hIUVVGMVFpeExRVUYyUWpzN1FVRkZRVHRCUVVOQk0wSXNUMEZCUnpSQ0xHbENRVUZJTEVkQlFYVkNMRWxCUVhaQ08wRkJRMEUxUWl4UFFVRkhOa0lzVjBGQlNDeEhRVUZwUWl4SlFVRkpNMFVzUjBGQlJ6UkZMR2RDUVVGUUxFTkJRWGRDTjBJc1dVRkJXVGhDTEdOQlFYQkRMRVZCUVc5RU5VSXNWVUZCVlRaQ0xGTkJRVGxFTEVOQlFXcENPMEZCUTBGb1F5eFBRVUZIYVVNc1ZVRkJTQ3hIUVVGblFpeEpRVUZKTDBVc1IwRkJSelJGTEdkQ1FVRlFMRU5CUVhkQ04wSXNXVUZCV1RoQ0xHTkJRWEJETEVWQlFXOUVOVUlzVlVGQlZTdENMRkZCUVRsRUxFTkJRV2hDTzBGQlEwRnNReXhQUVVGSGJVTXNWMEZCU0N4SFFVRnBRaXhKUVVGSmFrWXNSMEZCUnpSRkxHZENRVUZRTEVOQlFYZENOMElzV1VGQldUaENMR05CUVhCRExFVkJRVzlFTlVJc1ZVRkJWV2xETEZOQlFUbEVMRU5CUVdwQ08wRkJRMEZ3UXl4UFFVRkhjVU1zWTBGQlNDeEhRVUZ2UWl4SlFVRkpia1lzUjBGQlJ6UkZMR2RDUVVGUUxFTkJRWGRDTjBJc1dVRkJXVGhDTEdOQlFYQkRMRVZCUVc5RU5VSXNWVUZCVlcxRExGbEJRVGxFTEVOQlFYQkNPMEZCUTBGMFF5eFBRVUZIZFVNc1lVRkJTQ3hIUVVGdFFpeEpRVUZKY2tZc1IwRkJSelJGTEdkQ1FVRlFMRU5CUVhkQ04wSXNXVUZCV1RoQ0xHTkJRWEJETEVWQlFXOUVOVUlzVlVGQlZYRkRMRmRCUVRsRUxFTkJRVzVDT3p0QlFVVkJkRVlzVDBGQlIzVkdMRWxCUVVnc1EwRkJVVU1zU1VGQlVpeERRVUZoZUVZc1IwRkJSM1ZHTEVsQlFVZ3NRMEZCVVVVc2JVSkJRWEpDTEVWQlFUQkRMRXRCUVV0b1JpeEpRVUV2UXl4RlFVRnhSQ3hKUVVGeVJEdEJRVU5JTEVOQk4wTkVPenRCUVN0RFFWUXNSMEZCUjBnc1JVRkJTQ3hEUVVGTk5rWXNUVUZCVGl4RFFVRmhPVU1zU1VGQllpeEZRVUZ0UW1wRUxGZEJRVzVDT3p0QlFVZEJTeXhIUVVGSFNDeEZRVUZJTEVOQlFVMDRSaXhMUVVGT0xFTkJRVmt2UXl4TFFVRkxaMFFzVTBGQmFrSXNSVUZCTkVJN1FVRkRlRUp1Uml4UlFVUjNRaXhyUWtGRGFFSTdRVUZEU2l4aFFVRkxiMFlzWTBGQlREdEJRVU5CTEdGQlFVdERMR1ZCUVV3c1EwRkJjVUlzU1VGQmNrSTdPMEZCUlVFc1dVRkJTVU1zU1VGQlNTOUdMRWRCUVVkMVJpeEpRVUZJTEVOQlFWRlRMRTFCUVZJc1EwRkJaWFpFTEV0QlFYWkNPMEZCUVVFc1dVRkJPRUozUkN4SlFVRkpha2NzUjBGQlIzVkdMRWxCUVVnc1EwRkJVVk1zVFVGQlVpeERRVUZsZEVRc1RVRkJha1E3UVVGRFFTeGhRVUZMVnl4eFFrRkJUQ3hEUVVFeVFsb3NTMEZCTTBJc1IwRkJiVU56UkN4RFFVRnVRenRCUVVOQkxHRkJRVXN4UXl4eFFrRkJUQ3hEUVVFeVFsZ3NUVUZCTTBJc1IwRkJiME4xUkN4RFFVRndRenRCUVVOQkxHRkJRVXN6UXl3MlFrRkJUQ3hEUVVGdFEySXNTMEZCYmtNc1IwRkJNa056UkN4RFFVRXpRenRCUVVOQkxHRkJRVXQ2UXl3MlFrRkJUQ3hEUVVGdFExb3NUVUZCYmtNc1IwRkJORU4xUkN4RFFVRTFRenRCUVVOQkxHRkJRVXQ0UXl4aFFVRk1MRU5CUVcxQ2FFSXNTMEZCYmtJc1IwRkJNa0p6UkN4RFFVRXpRanRCUVVOQkxHRkJRVXQwUXl4aFFVRk1MRU5CUVcxQ1ppeE5RVUZ1UWl4SFFVRTBRblZFTEVOQlFUVkNPMEZCUTBFc1lVRkJTM1JETEZsQlFVd3NRMEZCYTBKc1FpeExRVUZzUWl4SFFVRXdRbk5FTEVOQlFURkNPMEZCUTBFc1lVRkJTM0JETEZsQlFVd3NRMEZCYTBKcVFpeE5RVUZzUWl4SFFVRXlRblZFTEVOQlFUTkNPenRCUVVWQmFrY3NWMEZCUjJ0SExFOUJRVWdzUTBGQlYzcEVMRXRCUVZnc1IwRkJiVUlzUzBGQlMydENMRmxCUVV3c1EwRkJhMEpzUWl4TFFVRnlRenRCUVVOQmVrTXNWMEZCUjJ0SExFOUJRVWdzUTBGQlYzaEVMRTFCUVZnc1IwRkJiMElzUzBGQlMybENMRmxCUVV3c1EwRkJhMEpxUWl4TlFVRjBRenRCUVVOQk1VTXNWMEZCUjIxSExGZEJRVWdzU1VGQmEwSnVSeXhIUVVGSGJVY3NWMEZCU0N4RFFVRmxNVVlzU1VGQlppeERRVUZ2UWl4TFFVRkxhMFFzV1VGQmVrSXNRMEZCYkVJN1FVRkRTQ3hMUVd4Q2RVSTdPenRCUVc5Q2VFSTdRVUZEUVhsRExHdENRVUZqTEhOQ1FVRlZReXhaUVVGV0xFVkJRWGRDTzBGQlEyeERMRmxCUVVsRExFbEJRVW83UVVGRFFTeFpRVUZKTEV0QlFVdERMSFZDUVVGVUxFVkJRV3RETzBGQlF6bENSQ3h0UWtGQlR5eEpRVUZRTzBGQlEwZ3NVMEZHUkN4TlFVVlBPMEZCUTBoQkxHMUNRVUZQZEVjc1IwRkJSM05ITEVsQlFWWTdRVUZEU0RzN1FVRkZSRHRCUVVOQkxGbEJRVWxGTEdGQlFXRkdMRXRCUVV0dVJDeFZRVUZNTEVOQlFXZENWaXhMUVVGcVF6dEJRVUZCTEZsQlFYZERaMFVzWVVGQllVZ3NTMEZCUzI1RUxGVkJRVXdzUTBGQlowSlVMRTFCUVhKRk8wRkJRVUVzV1VGQk5rVm5SU3hqUVVGalNpeExRVUZMYkVNc1ZVRkJhRWM3UVVGRFFTeFpRVUZKY0VVc1IwRkJSME1zUjBGQlNDeERRVUZQTUVjc1VVRkJXQ3hGUVVGeFFqdEJRVU5xUWl4blFrRkJTVU1zYVVKQlFXbENOVWNzUjBGQlIzVkdMRWxCUVVnc1EwRkJVWE5DTEZOQlFWSXNRMEZCYTBKRExFdEJRWFpETzBGQlFVRXNaMEpCUTBsRExGTkJRVk5JTEdWQlFXVkhMRTFCUkRWQ08wRkJSVUZJTERKQ1FVRmxSeXhOUVVGbUxFZEJRWGRDTEVkQlFYaENPMEZCUTBGSUxESkNRVUZsU1N4UFFVRm1MRWRCUVhsQ0xFMUJRWHBDTzBGQlEwRldMR2xDUVVGTFZDeGpRVUZNTzBGQlEwRmxMREpDUVVGbFJ5eE5RVUZtTEVkQlFYZENRU3hOUVVGNFFqdEJRVU5CU0N3eVFrRkJaVWtzVDBGQlppeEhRVUY1UWl4UFFVRjZRanRCUVVOSUxGTkJVa1FzVFVGVFN6dEJRVU5FVml4cFFrRkJTMVFzWTBGQlREdEJRVU5JTzBGQlEwUXNXVUZCU1ZFc2FVSkJRV2xDTEVsQlFXcENMRWxCUVhsQ1F5eExRVUZMYkVNc1ZVRkJUQ3hMUVVGdlFuTkRMRmRCUVRkRExFbEJRVFJFU2l4TFFVRkxia1FzVlVGQlRDeERRVUZuUWxZc1MwRkJhRUlzUzBGQk1FSXJSQ3hWUVVGMFJpeEpRVUZ2UjBZc1MwRkJTMjVFTEZWQlFVd3NRMEZCWjBKVUxFMUJRV2hDTEV0QlFUSkNLMFFzVlVGQmJra3NSVUZEU1RzN1FVRkZTanRCUVVOQkxGbEJRVWxvUlN4UlFVRlJOa1FzUzBGQlMyaEVMRFpDUVVGTUxFTkJRVzFEWWl4TFFVRXZRenRCUVVOQkxGbEJRVWxETEZOQlFWTTBSQ3hMUVVGTGFFUXNOa0pCUVV3c1EwRkJiVU5hTEUxQlFXaEVPMEZCUTBFMFJDeGhRVUZMY2tNc1UwRkJUQ3hIUVVGcFFpeEpRVUZxUWp0QlFVTkJMRmxCUVVsNFFpeFJRVUZSTEVOQlFWb3NSVUZEU1RaRUxFdEJRVXRETEhWQ1FVRk1MRU5CUVRaQ09VUXNTMEZCTjBJc1JVRkJiME5ETEUxQlFYQkRMRVZCUVRSRE5FUXNTMEZCU3pWQ0xHbENRVUZxUkR0QlFVTktORUlzWVVGQlMzSkRMRk5CUVV3c1IwRkJhVUlzUzBGQmFrSTdPMEZCUlVGeFF5eGhRVUZMVnl4SlFVRk1MRU5CUVZVc1pVRkJWanRCUVVOQkxGbEJRVWxZTEV0QlFVdDBReXhsUVVGVUxFVkJRVEJDTzBGQlEzUkNjME1zYVVKQlFVdDBReXhsUVVGTUxFTkJRWEZDYmtJc1NVRkJja0k3UVVGRFNEdEJRVU5LTEV0Qk1VUjFRanM3UVVFMFJIaENjVVVzZDBKQlFXOUNMRGhDUVVGWk8wRkJRelZDYkVnc1YwRkJSM05ITEVsQlFVZ3NRMEZCVVc1RExHOUNRVUZTTEVkQlFTdENMRWxCUVM5Q08wRkJRMEZ1UlN4WFFVRkhjMGNzU1VGQlNDeERRVUZSUml4WlFVRlNPMEZCUTBnc1MwRXZSSFZDT3p0QlFXbEZlRUk3T3pzN096czdPenM3T3pzN096dEJRV1ZCT3pzN096czdPenM3UVVGVFFUczdPenM3T3pzN08wRkJVMEZsTERKQ1FVRjFRaXdyUWtGQlZVTXNUMEZCVml4RlFVRnRRanRCUVVOMFF5eFpRVUZKUVN4UFFVRktMRVZCUVdFN1FVRkRWRHRCUVVOQkxHZENRVUZKTEVOQlFVTXNTMEZCUzJ4RUxITkNRVUZXTEVWQlFXdERPMEZCUXpsQ0xIRkNRVUZMUVN4elFrRkJUQ3hIUVVFNFFpeEpRVUU1UWp0QlFVTkJha1FzZFVKQlFVOXZSeXhuUWtGQlVDeERRVUYzUWl4UlFVRjRRaXhGUVVGclF5eExRVUZMYWtJc1dVRkJka003UVVGRFFXNUdMSFZDUVVGUGIwY3NaMEpCUVZBc1EwRkJkMElzYlVKQlFYaENMRVZCUVRaRExFdEJRVXRJTEd0Q1FVRnNSRHRCUVVOSU8wRkJRMG9zVTBGUVJDeE5RVTlQTzBGQlEwZzdRVUZEUVN4blFrRkJTU3hMUVVGTGFFUXNjMEpCUVZRc1JVRkJhVU03UVVGRE4wSXNjVUpCUVV0QkxITkNRVUZNTEVkQlFUaENMRXRCUVRsQ08wRkJRMEZxUkN4MVFrRkJUM0ZITEcxQ1FVRlFMRU5CUVRKQ0xGRkJRVE5DTEVWQlFYRkRMRXRCUVV0c1FpeFpRVUV4UXp0QlFVTkJia1lzZFVKQlFVOXhSeXh0UWtGQlVDeERRVUV5UWl4dFFrRkJNMElzUlVGQlowUXNTMEZCUzBvc2EwSkJRWEpFTzBGQlEwZzdRVUZEU2p0QlFVTktMRXRCYkVoMVFqczdRVUZ2U0hoQ096czdPenM3T3pzN096czdPMEZCWVVGTExIVkNRVUZ0UWl3eVFrRkJWVU1zVVVGQlZpeEZRVUZ2UWp0QlFVTnVReXhaUVVGSlF5eFRRVUZLTEVWQlFXVTdRVUZEWml4WlFVRkpMRTlCUVU5RUxGRkJRVkFzUzBGQmIwSXNWVUZCY0VJc1NVRkJhME5CTEZsQlFWa3NTVUZCYkVRc1JVRkJkMFE3UVVGRGNFUXNhVUpCUVV0NFJDeGxRVUZNTEVkQlFYVkNkMFFzVVVGQmRrSTdRVUZEU0R0QlFVTktMRXRCZEVsMVFqczdRVUYzU1hoQ096czdPenM3T3pzN096czdPenRCUVdOQlJTeHZRa0ZCWjBJc2QwSkJRVlZETEZkQlFWWXNSVUZCZFVJN1FVRkRia05CTEhOQ1FVRmpRU3hqUVVGak0wZ3NSMEZCUjNORkxFdEJRVWdzUTBGQlUwTXNaMEpCUVhKRE8wRkJRMEVzV1VGQlNXOUVMR1ZCUVdVc1MwRkJTM1JFTEZsQlFVd3NTMEZCYzBKelJDeFhRVUY2UXl4RlFVRnpSRHRCUVVOc1JDeHBRa0ZCUzNSRUxGbEJRVXdzUjBGQmIwSnpSQ3hYUVVGd1FqdEJRVU5CTEdkQ1FVRkpReXhqUVVGakxFdEJRVXQwUlN3MlFrRkJUQ3hEUVVGdFEySXNTMEZCY2tRN1FVRkRRU3huUWtGQlNXOUdMR1ZCUVdVc1MwRkJTM1pGTERaQ1FVRk1MRU5CUVcxRFdpeE5RVUYwUkR0QlFVTkJMR2xDUVVGTE5rUXNkVUpCUVV3c1EwRkJOa0p4UWl4WFFVRTNRaXhGUVVFd1EwTXNXVUZCTVVNc1JVRkJkMFFzUzBGQlMyNUVMR2xDUVVFM1JEdEJRVU5JTzBGQlEwb3NTMEU1U25WQ096dEJRV2RMZUVKdFFpeHZRa0ZCWjBJc01FSkJRVms3UVVGRGVFSXNXVUZCU1dsRExHVkJRV1VzUzBGQlN6TkZMRlZCUVhoQ08wRkJRMEVzV1VGQlNUUkRMRWxCUVVsMlJpeG5Ra0ZCWjBKUExGVkJRV2hDTEVOQlFUSkNaaXhIUVVGSGRVWXNTVUZCU0N4RFFVRlJka1VzUzBGQmJrTXNRMEZCVWp0QlFVTkJMRmxCUVVscFJpeEpRVUZKZWtZc1owSkJRV2RDV1N4WFFVRm9RaXhEUVVFMFFuQkNMRWRCUVVkMVJpeEpRVUZJTEVOQlFWRjJSU3hMUVVGd1F5eERRVUZTTzBGQlEwRXNXVUZCU1N0SExHTkJRV05vUXl4TFFVRkxSU3hEUVVGMlFqczdRVUZGUVN4WlFVRkpkMElzWVVGQllTeERRVUZEZWtnc1IwRkJSME1zUjBGQlNDeERRVUZQTUVjc1VVRkJja0lzU1VGRFEyOUNMR1ZCUVdVc1MwRkJTekZFTEZsQlFVd3NSMEZCYjBKeVJTeEhRVUZIYzBVc1MwRkJTQ3hEUVVGVE1FUXNjVUpCUkRkRExFbEJSVU1zUTBGQlEwUXNWMEZCUkN4SlFVRm5RaXhMUVVGTE1VUXNXVUZCVEN4SFFVRnZRbkpGTEVkQlFVZHpSU3hMUVVGSUxFTkJRVk15UkN4dlFrRkdiRVFzUlVGRmVVVTdRVUZEY2tWSUxIbENRVUZoY2tZc1MwRkJZaXhIUVVGeFFuTkVMRU5CUVhKQ08wRkJRMEVyUWl4NVFrRkJZWEJHTEUxQlFXSXNSMEZCYzBKMVJDeERRVUYwUWp0QlFVTkJha2NzWlVGQlIzVkdMRWxCUVVnc1EwRkJVWE5DTEZOQlFWSXNRMEZCYTBKRExFdEJRV3hDTEVOQlFYZENMRzFDUVVGNFFpeEpRVUVyUXl4alFVRXZRenRCUVVOQk9VY3NaVUZCUjNWR0xFbEJRVWdzUTBGQlVYTkNMRk5CUVZJc1EwRkJhMEpETEV0QlFXeENMRU5CUVhkQ2IwSXNVMEZCZUVJc1IwRkJiME1zWTBGQmNFTTdRVUZEUVN4cFFrRkJTemxFTEZWQlFVd3NSMEZCYTBJc1MwRkJiRUk3UVVGRFNDeFRRVkpFTEUxQlUwczdRVUZEUkRCRUxIbENRVUZoY2tZc1MwRkJZaXhIUVVGeFFuZEVMRU5CUVhKQ08wRkJRMEUyUWl4NVFrRkJZWEJHTEUxQlFXSXNSMEZCYzBKeFJDeERRVUYwUWp0QlFVTkJMMFlzWlVGQlIzVkdMRWxCUVVnc1EwRkJVWE5DTEZOQlFWSXNRMEZCYTBKRExFdEJRV3hDTEVOQlFYZENMRzFDUVVGNFFpeEpRVUVyUXl4bFFVRXZRenRCUVVOQk9VY3NaVUZCUjNWR0xFbEJRVWdzUTBGQlVYTkNMRk5CUVZJc1EwRkJhMEpETEV0QlFXeENMRU5CUVhkQ2IwSXNVMEZCZUVJc1IwRkJiME1zWlVGQmNFTTdRVUZEUVd4SkxHVkJRVWQxUml4SlFVRklMRU5CUVZGelFpeFRRVUZTTEVOQlFXdENReXhMUVVGc1FpeERRVUYzUWl3d1FrRkJlRUlzU1VGQmMwUXNZVUZCZEVRN1FVRkRRVGxITEdWQlFVZDFSaXhKUVVGSUxFTkJRVkZ6UWl4VFFVRlNMRU5CUVd0Q1F5eExRVUZzUWl4RFFVRjNRbkZDTEdWQlFYaENMRWRCUVRCRExHRkJRVEZETzBGQlEwRXNhVUpCUVVzdlJDeFZRVUZNTEVkQlFXdENMRWxCUVd4Q08wRkJRMGc3UVVGRFJDeFpRVUZKTEV0QlFVdEVMRzlDUVVGVUxFVkJRU3RDTzBGQlF6TkNhVVVzZFVKQlFWY3NXVUZCV1R0QlFVTnVRbkJKTEcxQ1FVRkhjMGNzU1VGQlNDeERRVUZSYmtNc2IwSkJRVklzUjBGQkswSXNTMEZCTDBJN1FVRkRTQ3hoUVVaRUxFVkJSVWNzU1VGR1NEdEJRVWRJTzBGQlEwb3NTMEUzVEhWQ096dEJRU3RNZUVJN1FVRkRRV3RGTEN0Q1FVRXlRaXh4UTBGQldUdEJRVU51UXl4WlFVRkpWQ3hqUVVGakxFdEJRVXQwUlN3MlFrRkJUQ3hEUVVGdFEySXNTMEZCY2tRN1FVRkRRU3haUVVGSmIwWXNaVUZCWlN4TFFVRkxka1VzTmtKQlFVd3NRMEZCYlVOYUxFMUJRWFJFTzBGQlEwRXNXVUZCU1d0R0xHTkJRV01zUTBGQmJFSXNSVUZEU1N4TFFVRkxja0lzZFVKQlFVd3NRMEZCTmtKeFFpeFhRVUUzUWl4RlFVRXdRME1zV1VGQk1VTXNSVUZCZDBRc1MwRkJTMjVFTEdsQ1FVRTNSRHRCUVVOUUxFdEJjazExUWpzN1FVRjFUWGhDTkVRc2MwSkJRV3RDTERCQ1FVRlZReXhMUVVGV0xFVkJRV2xDUXl4VFFVRnFRaXhGUVVFMFFqdEJRVU14UXl4WlFVRkpReXhMUVVGTE5VZ3NVMEZCVXpaSUxHTkJRVlFzUTBGQmQwSXNhMEpCUVhoQ0xFTkJRVlE3UVVGRFFTeFpRVUZIUkN4TlFVRk5SQ3hUUVVGVUxFVkJRVzFDTzBGQlEyWXpTQ3h4UWtGQlV6aElMRWxCUVZRc1EwRkJZME1zVjBGQlpDeERRVUV3UWtnc1JVRkJNVUk3UVVGRFNEczdRVUZGUkN4WlFVRkpTU3hSUVVGUmFFa3NVMEZCVTJsSkxHbENRVUZVTEVOQlFUSkNMRlZCUVROQ0xFTkJRVm83UVVGQlFTeFpRVU5KUXl4WlFVRlpSaXhSUVVGUlFTeE5RVUZOTEVOQlFVNHNRMEZCVWl4SFFVRnRRaXhKUVVSdVF6dEJRVUZCTEZsQlJVbEhMRTlCUmtvN1FVRkJRU3haUVVWaFF5eEhRVVppTzBGQlFVRXNXVUZGYTBKRExFOUJSbXhDT3p0QlFVbEJSaXhyUWtGQlZVUXNXVUZCV1VFc1ZVRkJWVU1zVDBGQmRFSXNSMEZCWjBNc1JVRkJNVU03UVVGRFFWQXNZVUZCUzBFc1RVRkJUVFZJTEZOQlFWTnpTU3hoUVVGVUxFTkJRWFZDTEUxQlFYWkNMRU5CUVZnN1FVRkRRVllzVjBGQlIxY3NSVUZCU0N4SFFVRlJMR3RDUVVGU08wRkJRMEZZTEZkQlFVZFpMRWxCUVVnc1IwRkJWU3hWUVVGV08wRkJRMEZhTEZkQlFVZFBMRTlCUVVnc1IwRkJZU3hGUVVGaU96dEJRVVZCTEdGQlFVdERMRWRCUVV3c1NVRkJXVllzUzBGQldpeEZRVUZ0UWp0QlFVTm1MR2RDUVVGSlV5eFJRVUZSVFN4UFFVRlNMRU5CUVdkQ1RDeEhRVUZvUWl4TFFVRjNRaXhEUVVGRExFTkJRVGRDTEVWQlFXZERPMEZCUXpWQ1JDd3lRa0ZCVnl4TlFVRk5ReXhIUVVGT0xFZEJRVmtzUjBGQldpeEhRVUZyUWxZc1RVRkJUVlVzUjBGQlRpeERRVUUzUWp0QlFVTklMR0ZCUmtRc1RVRkhTeXhKUVVGSlZDeFRRVUZLTEVWQlFXVTdRVUZEYUVKVkxEQkNRVUZWTEVsQlFVbExMRTFCUVVvc1EwRkJWMDRzVFVGQlNTeGpRVUZtTEVOQlFWWTdRVUZEUVVRc2QwSkJRVkZSTEU5QlFWSXNRMEZCWjBKT0xFOUJRV2hDTEVWQlFYbENSQ3hOUVVGTkxFZEJRVTRzUjBGQldWWXNUVUZCVFZVc1IwRkJUaXhEUVVGeVF6dEJRVU5JTzBGQlEwbzdRVUZEUkN4WlFVRkhMRXRCUVV0UkxFbEJRVXdzUTBGQlZWUXNUMEZCVml4RFFVRklMRVZCUTBsQkxGVkJRVlZCTEZGQlFWRlZMRTFCUVZJc1EwRkJaU3hEUVVGbUxFTkJRVlk3TzBGQlJVcHFRaXhYUVVGSFR5eFBRVUZJTEVkQlFXRkJMRTlCUVdJN1FVRkRRVHRCUVVOQkxGbEJRVWxFTEZOQlFVb3NSVUZEU1VFc1ZVRkJWVU1zVDBGQlZpeEhRVUZ2UWtFc1QwRkJjRUk3TzBGQlJVcHVTU3hwUWtGQlV6aElMRWxCUVZRc1EwRkJZMmRDTEZkQlFXUXNRMEZCTUVKc1FpeEZRVUV4UWp0QlFVTklMRXRCZWs5MVFqczdRVUV5VDNoQ2JVSXNlVUpCUVhGQ0xDdENRVUZaTzBGQlF6ZENPMEZCUTBFc1dVRkJTU3hMUVVGTGNFWXNhVUpCUVV3c1NVRkJNRUlzUTBGQlEzRkdMRTFCUVROQ0xFbEJRWEZETEVOQlFVTkRMRlZCUVhSRExFbEJRVzlFTEVOQlFVTndTaXhoUVVGeVJDeEpRVUZ6UlN4RFFVRkRReXhUUVVGMlJTeEpRVUZ2Uml4RFFVRkRVQ3hYUVVGeVJpeEpRVUZ2Unl4RFFVRkRUQ3haUVVGeVJ5eEpRVUZ4U0N4RFFVRkRUeXhaUVVFeFNDeEZRVUYzU1R0QlFVTndTU3hwUWtGQlMyZEpMR2RDUVVGTUxFTkJRWE5DT1Vnc1owSkJRV2RDWlN4SlFVRjBReXhGUVVFMFF5eExRVUUxUXp0QlFVTkJMR2xDUVVGTGFVUXNhVUpCUVV3c1IwRkJlVUlzUzBGQmVrSTdRVUZEU0R0QlFVTktMRXRCYWxCMVFqczdRVUZ0VUhoQ096czdPenM3T3pzN096czdPMEZCWVVGMVJpeDNRa0ZCYjBJc05FSkJRVlV6UXl4UFFVRldMRVZCUVcxQ08wRkJRMjVETEdGQlFVczFReXhwUWtGQlRDeEhRVUY1UWpSRExFOUJRWHBDTzBGQlEwZ3NTMEZzVVhWQ096dEJRVzlSZUVJN096czdPenM3T3pzN08wRkJWMEUwUXl4clFrRkJZeXh6UWtGQlV6VkRMRTlCUVZRc1JVRkJhMEk3UVVGRE5VSXNZVUZCUzNKRUxHTkJRVXdzUjBGQmMwSXNRMEZCUXl4RFFVRkRjVVFzVDBGQmVFSTdRVUZEU0N4TFFXcFNkVUk3TzBGQmJWSjRRanM3T3pzN096czdPMEZCVTBFMlF5eHhRa0ZCYVVJc01rSkJRVmM3UVVGRGVFSXNaVUZCVHl4TFFVRkxiRWNzWTBGQldqdEJRVU5JTEV0Qk9WSjFRanM3UVVGblUzaENPenM3T3pzN1FVRk5RU3RDTEhGQ1FVRnBRaXg1UWtGQlZYTkNMRTlCUVZZc1JVRkJiVUk3UVVGRGFFTXNXVUZCU1N4TFFVRkxNME1zYVVKQlFVd3NTMEZCTWtJeVF5eFBRVUV2UWl4RlFVRjNRenRCUVVOd1F6dEJRVU5JTzBGQlEwUXNZVUZCU3pORExHbENRVUZNTEVkQlFYbENNa01zVDBGQmVrSTdRVUZEUVN4WlFVRkhjRWdzUjBGQlIzVkdMRWxCUVVnc1EwRkJVVEpGTEZWQlFWSXNTMEZCZFVKc1N5eEhRVUZIZFVZc1NVRkJTQ3hEUVVGUk5FVXNhVUpCUVd4RExFVkJRWEZFTzBGQlEycEVMR2RDUVVGSlF5eFJRVUZSY0Vzc1IwRkJSM0ZMTEUxQlFVZ3NRMEZCVlVNc1RVRkJkRUk3UVVGRFFTeHBRa0ZCU3l4SlFVRkpja0lzUjBGQlZDeEpRVUZuUW0xQ0xFdEJRV2hDTEVWQlFYVkNPMEZCUTI1Q0xHOUNRVUZKUnl4UFFVRlBTQ3hOUVVGTmJrSXNSMEZCVGl4RFFVRllPMEZCUTBFc2IwSkJRVWwxUWl4TlFVRk5SQ3hSUVVGUlFTeExRVUZMZGtJc1QwRkJUQ3haUVVGM1FtaEtMRWRCUVVkNVN5eFRRVUZ1UXl4SFFVRXJRMFlzUzBGQlMzWkNMRTlCUVhCRUxFZEJRVGhFTEVsQlFYaEZPMEZCUTBFc2IwSkJRVWwzUWl4SFFVRktMRVZCUVZNN1FVRkRUQ3gzUWtGQlNVVXNVMEZCVXpGTExFZEJRVWQ1U3l4VFFVRklMRU5CUVdGRExFMUJRVEZDTzBGQlEwRXNkMEpCUVVsMFJDeFBRVUZLTEVWQlFXRTdRVUZEVkc5RUxEUkNRVUZKUnl4VlFVRktMRU5CUVdWRUxFOUJRVTlGTEUxQlFYUkNMRVZCUVRoQ1JpeFBRVUZQUlN4TlFVRnlRenRCUVVOSUxIRkNRVVpFTEUxQlIwczdRVUZEUkVvc05FSkJRVWxITEZWQlFVb3NRMEZCWlVRc1QwRkJUMGNzVDBGQmRFSXNSVUZCSzBKSUxFOUJRVTlITEU5QlFYUkRPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMG9zVTBGbVJDeE5RV2RDU3l4SlFVRkhOMHNzUjBGQlIzVkdMRWxCUVVnc1EwRkJVVEpGTEZWQlFWSXNTMEZCZFVKc1N5eEhRVUZIZFVZc1NVRkJTQ3hEUVVGUmRVWXNhMEpCUVd4RExFVkJRWE5FTzBGQlEzWkVMR2RDUVVGSlF5eE5RVUZOTDBzc1IwRkJSM1ZHTEVsQlFVZ3NRMEZCVVZNc1RVRkJVaXhEUVVGbFowWXNWVUZCWml4RFFVRXdRaXhKUVVFeFFpeERRVUZXTzBGQlEwRkVMR2RDUVVGSlJTeHhRa0ZCU2l4SFFVRTBRamRFTEU5QlFUVkNPMEZCUTBFeVJDeG5Ra0ZCU1Vjc2QwSkJRVW9zUjBGQkswSTVSQ3hQUVVFdlFqdEJRVU5JTzBGQlEwb3NTMEZvVlhWQ096dEJRV3RWZUVJN096czdPenRCUVUxQkswUXNkMEpCUVc5Q0xEaENRVUZaTzBGQlF6VkNMR1ZCUVU4c1MwRkJTekZITEdsQ1FVRmFPMEZCUTBnc1MwRXhWWFZDTzBGQk1sVjRRanM3T3pzN096czdPenRCUVZWQk1rY3NNRUpCUVhOQ0xEaENRVUZUYUVVc1QwRkJWQ3hGUVVGclFqdEJRVU53UXl4WlFVRkpRU3hYUVVOQlFTeFpRVUZaTEV0QlFVdDRSQ3hsUVVScVFpeEpRVVZCTlVRc1IwRkJSME1zUjBGQlNDeERRVUZQTUVjc1VVRkdVQ3hKUVVkQk0wY3NSMEZCUjBNc1IwRkJTQ3hEUVVGUGQwSXNWMEZCVUN4TFFVRjFRbnBDTEVkQlFVZERMRWRCUVVnc1EwRkJUMjlNTEcxQ1FVaHNReXhGUVVkMVJEdEJRVU51UkR0QlFVTkJMR2xDUVVGTGVrZ3NaVUZCVEN4SFFVRjFRaXhKUVVGMlFqdEJRVU5CTlVRc1pVRkJSM05NTEUxQlFVZ3NRMEZCVlVNc1kwRkJWaXhEUVVGNVFuWk1MRWRCUVVkMVJpeEpRVUZJTEVOQlFWRjJSU3hMUVVGcVF6dEJRVU5JTEZOQlVFUXNUVUZSU3p0QlFVTkVMR2xDUVVGTE5FTXNaVUZCVEN4SFFVRjFRaXhMUVVGMlFqdEJRVU5CTlVRc1pVRkJSM05NTEUxQlFVZ3NRMEZCVlVVc2NVSkJRVllzUTBGQlowTjRUQ3hIUVVGSGRVWXNTVUZCU0N4RFFVRlJka1VzUzBGQmVFTTdRVUZEU0R0QlFVTktMRXRCYkZkMVFqczdRVUZ2VjNoQ096czdPenM3T3pzN1FVRlRRWGxMTERaQ1FVRjVRaXh0UTBGQlZ6dEJRVU5vUXl4bFFVRlBMRXRCUVVzM1NDeGxRVUZhTzBGQlEwZ3NTMEV2VjNWQ096dEJRV2xZZUVJN096czdPenM3TzBGQlVVRTRTQ3h0UWtGQlpTeDFRa0ZCVldwS0xFdEJRVllzUlVGQmFVSkRMRTFCUVdwQ0xFVkJRWGxDTzBGQlEzQkRMRmxCUVVselJDeFRRVUZUYUVjc1IwRkJSM1ZHTEVsQlFVZ3NRMEZCVVZNc1RVRkJja0k3UVVGRFFTeFpRVUZKWVN4WlFVRlpOMGNzUjBGQlIzVkdMRWxCUVVnc1EwRkJVWE5DTEZOQlFYaENPenRCUVVWQllpeGxRVUZQZGtRc1MwRkJVQ3hIUVVGbFFTeFJRVUZSTEV0QlFVdHZRaXhwUWtGQk5VSTdRVUZEUVcxRExHVkJRVTkwUkN4TlFVRlFMRWRCUVdkQ1FTeFRRVUZUTEV0QlFVdHRRaXhwUWtGQk9VSTdPMEZCUlVGdFF5eGxRVUZQWXl4TFFVRlFMRU5CUVdGeVJTeExRVUZpTEVkQlFYRkNRU3hSUVVGUkxFbEJRVGRDTzBGQlEwRjFSQ3hsUVVGUFl5eExRVUZRTEVOQlFXRndSU3hOUVVGaUxFZEJRWE5DUVN4VFFVRlRMRWxCUVM5Q096dEJRVVZCYlVVc2EwSkJRVlZETEV0QlFWWXNRMEZCWjBKeVJTeExRVUZvUWl4SFFVRjNRa0VzVVVGQlVTeEpRVUZvUXp0QlFVTkJiMFVzYTBKQlFWVkRMRXRCUVZZc1EwRkJaMEp3UlN4TlFVRm9RaXhIUVVGNVFrRXNVMEZCVXl4SlFVRnNRenM3UVVGRlFTeGhRVUZMTUVRc1dVRkJURHRCUVVOSUxFdEJkbGwxUWpzN1FVRjVXWGhDT3pzN096czdPenM3T3p0QlFWZEJkVVlzYlVKQlFXVXNlVUpCUVZrN1FVRkRka0lzWlVGQlR6Tk1MRWRCUVVkdlJDeEpRVUZJTEVOQlFWRndSQ3hIUVVGSGRVWXNTVUZCU0N4RFFVRlJVeXhOUVVGU0xFTkJRV1YyUkN4TFFVRjJRaXhGUVVFNFFucERMRWRCUVVkMVJpeEpRVUZJTEVOQlFWRlRMRTFCUVZJc1EwRkJaWFJFTEUxQlFUZERMRU5CUVZBN1FVRkRTQ3hMUVhSYWRVSTdPMEZCZDFwNFFqczdPenM3T3pzN096czdRVUZYUVd0S0xHdENRVUZqTEhkQ1FVRlpPMEZCUTNSQ0xHVkJRVTgxVEN4SFFVRkhiMFFzU1VGQlNDeERRVUZSTEV0QlFVdEVMRlZCUVV3c1EwRkJaMEpXTEV0QlFYaENMRVZCUVN0Q0xFdEJRVXRWTEZWQlFVd3NRMEZCWjBKVUxFMUJRUzlETEVOQlFWQTdRVUZEU0N4TFFYSmhkVUk3TzBGQmRXRjRRanM3T3pzN096czdPenRCUVZWQmJVb3NhMEpCUVdNc2MwSkJRVlZ3U2l4TFFVRldMRVZCUVdsQ1F5eE5RVUZxUWl4RlFVRjVRanRCUVVOdVF5eGhRVUZMVXl4VlFVRk1MRU5CUVdkQ1ZpeExRVUZvUWl4SFFVRjNRa0VzUzBGQmVFSTdRVUZEUVN4aFFVRkxWU3hWUVVGTUxFTkJRV2RDVkN4TlFVRm9RaXhIUVVGNVFrRXNUVUZCZWtJN1FVRkRRVEZETEZkQlFVZDFSaXhKUVVGSUxFTkJRVkYyUlN4TFFVRlNMRU5CUVdNNFJpeExRVUZrTEVOQlFXOUNja1VzUzBGQmNFSXNSMEZCTkVKQkxGRkJRVkVzU1VGQmNFTTdRVUZEUVhwRExGZEJRVWQxUml4SlFVRklMRU5CUVZGMlJTeExRVUZTTEVOQlFXTTRSaXhMUVVGa0xFTkJRVzlDY0VVc1RVRkJjRUlzUjBGQk5rSkJMRk5CUVZNc1NVRkJkRU03UVVGRFFTeGhRVUZMTUVRc1dVRkJUQ3hEUVVGclFpeEpRVUZzUWp0QlFVTklMRXRCZG1KMVFqczdRVUY1WW5oQ096czdPenM3TzBGQlQwRXdSaXh2UWtGQlowSXNNRUpCUVZrN1FVRkRlRUlzWlVGQlR6bE1MRWRCUVVkdlJDeEpRVUZJTEVOQlFWRXNTMEZCUzA4c1dVRkJUQ3hEUVVGclFteENMRXRCUVRGQ0xFVkJRV2RETEV0QlFVdHJRaXhaUVVGTUxFTkJRV3RDYWtJc1RVRkJiRVFzUTBGQlVEdEJRVU5JTEV0QmJHTjFRanM3UVVGdlkzaENPenM3T3pzN08wRkJUMEZ4U2l3eVFrRkJkVUlzYVVOQlFWazdRVUZETDBJc1pVRkJUeTlNTEVkQlFVZHZSQ3hKUVVGSUxFTkJRVk1zUzBGQlMwOHNXVUZCVEN4RFFVRnJRbXhDTEV0QlFXeENMRWRCUVRCQ0xFdEJRVXRqTEU5QlFYaERMRVZCUTFNc1MwRkJTMGtzV1VGQlRDeERRVUZyUW1wQ0xFMUJRV3hDTEVkQlFUSkNMRXRCUVV0akxFOUJSSHBETEVOQlFWQTdRVUZGU0N4TFFUbGpkVUk3TzBGQloyUjRRanM3T3pzN096dEJRVTlCZDBrc2MwSkJRV3RDTERSQ1FVRlpPMEZCUXpGQ0xHVkJRVTlvVFN4SFFVRkhhVTBzUlVGQlNDeERRVUZOTEV0QlFVdDBTU3haUVVGTUxFTkJRV3RDZFVrc1EwRkJlRUlzUlVGQk1FSXNTMEZCUzNaSkxGbEJRVXdzUTBGQmEwSjNTU3hEUVVFMVF5eERRVUZRTzBGQlEwZ3NTMEY2WkhWQ096dEJRVEprZUVJN096czdPenM3UVVGUFFVTXNOa0pCUVhsQ0xHMURRVUZaTzBGQlEycERMR1ZCUVU5d1RTeEhRVUZIYVUwc1JVRkJTQ3hEUVVGTkxFdEJRVXQwU1N4WlFVRk1MRU5CUVd0Q2RVa3NRMEZCYkVJc1IwRkJjMElzUzBGQlN6TkpMRTlCUVdwRExFVkJRMHNzUzBGQlMwa3NXVUZCVEN4RFFVRnJRbmRKTEVOQlFXeENMRWRCUVhOQ0xFdEJRVXN6U1N4UFFVUm9ReXhEUVVGUU8wRkJSVWdzUzBGeVpYVkNPenRCUVhWbGVFSTdPenM3T3pzN08wRkJVVUUyU1N4NVFrRkJjVUlzSzBKQlFWazdRVUZETjBJc1pVRkJUeXhMUVVGTE0wZ3NhVUpCUVZvN1FVRkRTQ3hMUVdwbWRVSTdPMEZCYldaNFFqczdPenM3T3pzN1FVRlJRVFJJTEhsQ1FVRnhRaXcyUWtGQlZVTXNaMEpCUVZZc1JVRkJORUk3UVVGRE4wTXNXVUZCU1hwS0xFdEJRVXNzU1VGQlZEdEJRVU5CTEZsQlFVbDVTaXcwUWtGQk5FSjJUU3hIUVVGSE5FVXNaMEpCUVc1RExFVkJRWEZFTzBGQlEycEVPVUlzWlVGQlJ6UkNMR2xDUVVGSUxFZEJRWFZDTmtnc1owSkJRWFpDTzBGQlEwZzdRVUZEUkR0QlFVaEJMR0ZCU1VzN1FVRkRSQ3h2UWtGQlNVTXNZVUZCWVhoTkxFZEJRVWMwUlN4blFrRkJjRUk3UVVGRFFTeHZRa0ZCUnpKSUxIRkNRVUZ4UWtNc1YwRkJWekZJTEZOQlFXNURMRVZCUTBsb1F5eEhRVUZITkVJc2FVSkJRVWdzUjBGQmRVSTFRaXhIUVVGSE5rSXNWMEZCTVVJN1FVRkRTaXh2UWtGQlJ6UklMSEZDUVVGeFFrTXNWMEZCVjNoSUxGRkJRVzVETEVWQlEwbHNReXhIUVVGSE5FSXNhVUpCUVVnc1IwRkJkVUkxUWl4SFFVRkhhVU1zVlVGQk1VSTdRVUZEU2l4dlFrRkJSM2RJTEhGQ1FVRnhRa01zVjBGQlYzUklMRk5CUVc1RExFVkJRMGx3UXl4SFFVRkhORUlzYVVKQlFVZ3NSMEZCZFVJMVFpeEhRVUZIYlVNc1YwRkJNVUk3UVVGRFNpeHZRa0ZCUjNOSUxIRkNRVUZ4UWtNc1YwRkJWM0JJTEZsQlFXNURMRVZCUTBsMFF5eEhRVUZITkVJc2FVSkJRVWdzUjBGQmRVSTFRaXhIUVVGSGNVTXNZMEZCTVVJN1FVRkRTaXh2UWtGQlIyOUlMSEZDUVVGeFFrTXNWMEZCVjJ4SUxGZEJRVzVETEVWQlEwbDRReXhIUVVGSE5FSXNhVUpCUVVnc1IwRkJkVUkxUWl4SFFVRkhkVU1zWVVGQk1VSTdRVUZEVUR0QlFVTktMRXRCT1dkQ2RVSTdPMEZCWjJoQ2VFSTdPenM3T3pzN096czdPenM3T3pzN1FVRm5Ra0ZyUWl3MlFrRkJlVUlzYVVOQlFWVTVSQ3hMUVVGV0xFVkJRV2xDUXl4TlFVRnFRaXhGUVVGNVFqWktMR2RDUVVGNlFpeEZRVUV5UXp0QlFVTm9SVHRCUVVOQkxGbEJRVWtzUlVGQlJUbEtMRkZCUVZFc1EwRkJVaXhKUVVGaFF5eFRRVUZUTEVOQlFYaENMRU5CUVVvc1JVRkJaME03UVVGRE5VSXhReXhsUVVGSGVVMHNTMEZCU0N4RFFVRlRMRWxCUVZRN1FVRkRRVHRCUVVOSU96dEJRVVZFTEdGQlFVdElMRzFDUVVGTUxFTkJRWGxDUXl4blFrRkJla0k3UVVGRFFTeFpRVUZKUnl4VFFVRlRMRXRCUVV0b1NTeHBRa0ZCYkVJN1FVRkRRU3haUVVGSlowa3NUVUZCU2l4RlFVRlpPMEZCUTFKQkxHMUNRVUZQUXl4UlFVRlFMRU5CUVdkQ0xFbEJRV2hDTzBGQlEwZzdPMEZCUlVRN1FVRkRRU3haUVVGSk0wMHNSMEZCUjBNc1IwRkJTQ3hEUVVGUE1FY3NVVUZCV0N4RlFVTkpMRXRCUVV0cFJDeHRRa0ZCVERzN1FVRkZTanRCUVVOQkxHRkJRVXQ2Uml4dlFrRkJUQ3hIUVVFMFFpeEpRVUUxUWp0QlFVTkJPMEZCUTBFc1dVRkJTU3hEUVVGRExFdEJRVXRHTEZOQlFWWXNSVUZEU1N4TFFVRkxORUlzWTBGQlREczdRVUZGU2l4WlFVRkpMRU5CUVVNMlJ5eE5RVUZNTEVWQlFXRTdRVUZEVkRGTkxHVkJRVWQ1VFN4TFFVRklMRU5CUVZNc1NVRkJWRHRCUVVOQk8wRkJRMGc3TzBGQlJVUXNZVUZCUzI1S0xEWkNRVUZNTEVOQlFXMURZaXhMUVVGdVF5eEhRVUV5UXl4TFFVRkxXU3h4UWtGQlRDeERRVUV5UWxvc1MwRkJNMElzUjBGQmJVTkJMRXRCUVRsRk8wRkJRMEVzWVVGQlMyRXNOa0pCUVV3c1EwRkJiVU5hTEUxQlFXNURMRWRCUVRSRExFdEJRVXRYTEhGQ1FVRk1MRU5CUVRKQ1dDeE5RVUV6UWl4SFFVRnZRMEVzVFVGQmFFWTdPMEZCUlVFc1dVRkJTV3RMTEZOQlFWTkdMRTlCUVU5SExFdEJRVkFzUTBGQllTeEpRVUZpTEVWQlFXMUNMRXRCUVV0NFNpeHhRa0ZCZUVJc1EwRkJZanM3UVVGRlFTeFpRVUZIZFVvc1QwRkJUMFVzUzBGQlVDeEpRVUZuUWtZc1QwRkJUMFVzUzBGQlVDeERRVUZoUXl4TlFVRmlMRXRCUVhkQ0xFTkJRVE5ETEVWQlFUWkRPMEZCUTNwRExHbENRVUZMZUVvc1QwRkJUQ3hIUVVGbGNVb3NUMEZCVDBVc1MwRkJVQ3hEUVVGaExFTkJRV0lzUTBGQlpqdEJRVU5CTEdsQ1FVRkxkRW9zVDBGQlRDeEhRVUZsYjBvc1QwRkJUMFVzUzBGQlVDeERRVUZoTEVOQlFXSXNRMEZCWmp0QlFVTklPenRCUVVWRUxGbEJRVWRHTEU5QlFVOUpMRkZCUVZZc1JVRkJiVUk3UVVGRFppeG5Ra0ZCU1haRkxFdEJRVXNzUzBGQlMyaEdMR0ZCUVdRN1FVRkJRU3huUWtGRFNYZEtMRXRCUVVzc1MwRkJTM1JLTEZsQlJHUTdRVUZCUVN4blFrRkZTWFZLTEV0QlFVdE9MRTlCUVU5SkxGRkJSbWhDT3p0QlFVbEJka1VzWlVGQlIzbEVMRU5CUVVnc1IwRkJUMmRDTEVkQlFVZG9RaXhEUVVGV08wRkJRMEY2UkN4bFFVRkhNRVFzUTBGQlNDeEhRVUZQWlN4SFFVRkhaaXhEUVVGV08wRkJRMEV4UkN4bFFVRkhhRWNzUzBGQlNDeEhRVUZYZVVzc1IwRkJSM3BMTEV0QlFXUTdRVUZEUVdkSExHVkJRVWN2Uml4TlFVRklMRWRCUVZsM1N5eEhRVUZIZUVzc1RVRkJaanM3UVVGRlFYVkxMR1ZCUVVkbUxFTkJRVWdzUjBGQlR5eERRVUZRTzBGQlEwRmxMR1ZCUVVka0xFTkJRVWdzUjBGQlR5eERRVUZRTzBGQlEwRmpMR1ZCUVVkNFN5eExRVUZJTEVkQlFWZDVTeXhIUVVGSGVrc3NTMEZCU0N4SFFVRlhMRXRCUVV0akxFOUJRVE5DTzBGQlEwRXdTaXhsUVVGSGRrc3NUVUZCU0N4SFFVRlpkMHNzUjBGQlIzaExMRTFCUVVnc1IwRkJXU3hMUVVGTFl5eFBRVUUzUWp0QlFVTklPenRCUVVWRWEwb3NaVUZCVDFNc1UwRkJVQ3hEUVVGcFFpeEpRVUZxUWp0QlFVTkJiazRzVjBGQlIydEhMRTlCUVVnc1EwRkJWM3BFTEV0QlFWZ3NSMEZCYlVJc1MwRkJTMnRDTEZsQlFVd3NRMEZCYTBKc1FpeExRVUZ5UXp0QlFVTkJla01zVjBGQlIydEhMRTlCUVVnc1EwRkJWM2hFTEUxQlFWZ3NSMEZCYjBJc1MwRkJTMmxDTEZsQlFVd3NRMEZCYTBKcVFpeE5RVUYwUXpzN1FVRkZRVEZETEZkQlFVZHRSeXhYUVVGSUxFbEJRV3RDYmtjc1IwRkJSMjFITEZkQlFVZ3NRMEZCWlRGR0xFbEJRV1lzUTBGQmIwSXNTMEZCUzJ0RUxGbEJRWHBDTEVOQlFXeENPenRCUVVWQk4wUXNhVUpCUVZOelRpeHZRa0ZCVkR0QlFVTkJMR0ZCUVV0dVJ5eEpRVUZNTEVOQlFWVXNNa0pCUVZZN1FVRkRTQ3hMUVRsc1FuVkNPenRCUVdkdFFuaENPenM3T3pzN096czdRVUZUUVc5SExEWkNRVUY1UWl4dFEwRkJXVHRCUVVOcVF5eGxRVUZQY2s0c1IwRkJSMjlFTEVsQlFVZ3NRMEZCVVN4TFFVRkxReXh4UWtGQlRDeERRVUV5UWxvc1MwRkJia01zUlVGQk1FTXNTMEZCUzFrc2NVSkJRVXdzUTBGQk1rSllMRTFCUVhKRkxFTkJRVkE3UVVGRFNDeExRVE50UW5WQ096dEJRVFp0UW5oQ096czdPenM3T3pzN096czdPenM3T3p0QlFXbENRVFJMTERSQ1FVRjNRaXhuUTBGQlZUZExMRXRCUVZZc1JVRkJhVUpETEUxQlFXcENMRVZCUVhsQ05rb3NaMEpCUVhwQ0xFVkJRVEpETzBGQlF5OUVPMEZCUTBFc1dVRkJTU3hEUVVGRE1VTXNUVUZCUkN4SlFVRlhMRU5CUVVORExGVkJRVm9zU1VGQk1FSXNRMEZCUTNCS0xHRkJRVE5DTEVsQlFUUkRMRU5CUVVORExGTkJRVGRETEVsQlFUQkVMRU5CUVVOUUxGZEJRVE5FTEVsQlFUQkZMRU5CUVVOTUxGbEJRVE5GTEVsQlFUSkdMRU5CUVVOUExGbEJRV2hITEVWQlFUaEhPMEZCUXpGSE8wRkJRMEVzYVVKQlFVdG5TU3huUWtGQlRDeERRVUZ6UWl4RlFVRkRMRk5CUVZNM1JpeExRVUZXTEVWQlFYUkNMRVZCUVhkRExFbEJRWGhET3p0QlFVVkJPMEZCUTBFMVFpeHhRa0ZCVXpCTkxHVkJRVlFzUTBGQmVVSjZSeXhMUVVGNlFpeERRVUVyUW5KRkxFdEJRUzlDTEVkQlFYVkRRU3hSUVVGUkxFbEJRUzlETzBGQlEwRTFRaXh4UWtGQlV6Sk5MRWxCUVZRc1EwRkJZekZITEV0QlFXUXNRMEZCYjBKeVJTeExRVUZ3UWl4SFFVRTBRa0VzVVVGQlVTeEpRVUZ3UXp0QlFVTkJOVUlzY1VKQlFWTXlUU3hKUVVGVUxFTkJRV014Unl4TFFVRmtMRU5CUVc5Q01rY3NTVUZCY0VJc1IwRkJNa0lzUzBGQk0wSTdRVUZEUVRWTkxIRkNRVUZUTWswc1NVRkJWQ3hEUVVGak1VY3NTMEZCWkN4RFFVRnZRalJITEVkQlFYQkNMRWRCUVRCQ0xFdEJRVEZDTzBGQlEwZzdPMEZCUlVRN1FVRkRRU3hoUVVGTGJrZ3NkVUpCUVV3c1EwRkJOa0k1UkN4TFFVRTNRaXhGUVVGdlEwTXNUVUZCY0VNc1JVRkJORU0yU2l4blFrRkJOVU03UVVGRFNDeExRVGR2UW5WQ096dEJRU3R2UW5oQ096czdPenM3T3pzN096dEJRVmRCYjBJc2VVSkJRWEZDTERaQ1FVRlZla0lzUTBGQlZpeEZRVUZoUXl4RFFVRmlMRVZCUVdkQ2NFY3NRMEZCYUVJc1JVRkJiVUpGTEVOQlFXNUNMRVZCUVhOQ08wRkJRM1pETEZsQlFVa3lTQ3haUVVGWkxFdEJRVXR5U3l4UFFVRnlRanRCUVVGQkxGbEJRVGhDYzBzc1dVRkJXU3hMUVVGTGNrc3NUMEZCTDBNN1FVRkRRWGhFTEZkQlFVZDFSaXhKUVVGSUxFTkJRVkYxU1N4alFVRlNMRU5CUVhWQ1pDeFJRVUYyUWl4RFFVRnBRMlFzU1VGQlNUQkNMRk5CUVVvc1IwRkJaMElzUzBGQlMyNUxMR0ZCUVV3c1EwRkJiVUo1U1N4RFFVRndSU3hGUVVOTFF5eEpRVUZKTUVJc1UwRkJTaXhIUVVGblFpeExRVUZMY0Vzc1lVRkJUQ3hEUVVGdFFqQkpMRU5CUkhoRExFVkJSVXR3Unl4SlFVRkpOa2dzVTBGR1ZDeEZRVWRMTTBnc1NVRkJTVFJJTEZOQlNGUTdRVUZKU0N4TFFXaHhRblZDT3p0QlFXdHhRbmhDT3pzN096czdPenM3T3p0QlFWZEJSU3gzUWtGQmIwSXNORUpCUVZVM1FpeERRVUZXTEVWQlFXRkRMRU5CUVdJc1JVRkJaMEp3Unl4RFFVRm9RaXhGUVVGdFFrVXNRMEZCYmtJc1JVRkJjMEk3UVVGRGRFTXNXVUZCU1N0SUxGTkJRVk1zUzBGQlMzcExMRTlCUVd4Q08wRkJRVUVzV1VGQk1rSXdTeXhUUVVGVExFdEJRVXQ2U3l4UFFVRjZRenRCUVVOQkxGbEJRVWt3U3l4TFFVRkxReXhMUVVGTFF5eEpRVUZNTEVOQlFWVnNReXhKUVVGSk9FSXNUVUZCU2l4SFFVRmhMRXRCUVV0MlN5eGhRVUZNTEVOQlFXMUNlVWtzUTBGQk1VTXNRMEZCVkR0QlFVTkJMRmxCUVVsdFF5eExRVUZMUml4TFFVRkxReXhKUVVGTUxFTkJRVlZxUXl4SlFVRkpPRUlzVFVGQlNpeEhRVUZoTEV0QlFVdDRTeXhoUVVGTUxFTkJRVzFDTUVrc1EwRkJNVU1zUTBGQlZEdEJRVU5CTEZsQlFVbHRReXhMUVVGTFNDeExRVUZMUXl4SlFVRk1MRU5CUVZWeVNTeEpRVUZKYVVrc1RVRkJaQ3hEUVVGVU8wRkJRMEVzV1VGQlNVOHNTMEZCUzBvc1MwRkJTME1zU1VGQlRDeERRVUZWYmtrc1NVRkJTV2RKTEUxQlFXUXNRMEZCVkR0QlFVTkJMRmxCUVVsUExFdEJRVXQ0VHl4SFFVRkhkVVlzU1VGQlNDeERRVUZSZFVrc1kwRkJha0k3TzBGQlJVRXNXVUZCU1N4RFFVRkRia3dzV1VGQlRDeEZRVUZ0UWp0QlFVTm1MR2RDUVVGSk9Fd3NVMEZCVTBRc1IwRkJSMFVzV1VGQlNDeERRVUZuUWtZc1IwRkJSMGNzVjBGQmJrSXNRMEZCWWp0QlFVTkJhRTBzTWtKQlFXVXpReXhIUVVGSE1FUXNTVUZCU0N4RFFVRlJLMHNzVDBGQlR5eERRVUZRTEVOQlFWSXNSVUZCYlVKQkxFOUJRVThzUTBGQlVDeERRVUZ1UWl4RlFVRTRRa0VzVDBGQlR5eERRVUZRTEVOQlFUbENMRVZCUVhsRFFTeFBRVUZQTEVOQlFWQXNRMEZCZWtNc1EwRkJaanRCUVVOSU96dEJRVVZFTEZsQlFVazVUQ3hoUVVGaGRVb3NRMEZCWWl4TFFVRnRRbWRETEVWQlFXNUNMRWxCUVhsQ2Rrd3NZVUZCWVhkS0xFTkJRV0lzUzBGQmJVSnJReXhGUVVFMVF5eEpRVUZyUkRGTUxHRkJRV0ZHTEV0QlFXSXNTMEZCZFVJMlRDeEZRVUY2UlN4SlFVRXJSVE5NTEdGQlFXRkVMRTFCUVdJc1MwRkJkMEkyVEN4RlFVRXpSeXhGUVVFclJ6dEJRVU16UnpWTUxIbENRVUZoZFVvc1EwRkJZaXhIUVVGcFFtZERMRVZCUVdwQ08wRkJRMEYyVEN4NVFrRkJZWGRLTEVOQlFXSXNSMEZCYVVKclF5eEZRVUZxUWp0QlFVTkJNVXdzZVVKQlFXRkdMRXRCUVdJc1IwRkJjVUkyVEN4RlFVRnlRanRCUVVOQk0wd3NlVUpCUVdGRUxFMUJRV0lzUjBGQmMwSTJUQ3hGUVVGMFFqdEJRVU5CUXl4bFFVRkhTU3hQUVVGSUxFTkJRVmRXTEVWQlFWZ3NSVUZCWlVjc1JVRkJaaXhGUVVGdFFrTXNSVUZCYmtJc1JVRkJkVUpETEVWQlFYWkNPMEZCUTBnN1FVRkRTaXhMUVdwelFuVkNPenRCUVcxelFuaENPenM3T3pzN096dEJRVkZCVFN4elFrRkJhMElzTkVKQlFWazdRVUZETVVJc1pVRkJUemRQTEVkQlFVZDFSaXhKUVVGSUxFTkJRVkYxU1N4alFVRlNMRU5CUVhWQ1owSXNVMEZCZGtJc1EwRkJhVU5PTEVkQlFVZFBMRmxCUVhCRExFTkJRVkE3UVVGRFNDeExRVGR6UW5WQ096dEJRU3R6UW5oQ096czdPenM3T3p0QlFWRkJReXh2UWtGQlowSXNNRUpCUVZrN1FVRkRlRUlzV1VGQlNTeERRVUZEY2swc1dVRkJUQ3hGUVVGdFFqdEJRVU5tTEdkQ1FVRkpPRXdzVTBGQlUwUXNSMEZCUjBVc1dVRkJTQ3hEUVVGblFrWXNSMEZCUjBjc1YwRkJia0lzUTBGQllqdEJRVU5CYUUwc01rSkJRV1V6UXl4SFFVRkhNRVFzU1VGQlNDeERRVUZSSzBzc1QwRkJUeXhEUVVGUUxFTkJRVklzUlVGQmJVSkJMRTlCUVU4c1EwRkJVQ3hEUVVGdVFpeEZRVUU0UWtFc1QwRkJUeXhEUVVGUUxFTkJRVGxDTEVWQlFYbERRU3hQUVVGUExFTkJRVkFzUTBGQmVrTXNRMEZCWmp0QlFVTklPMEZCUTBRc1dVRkJTVkVzWlVGQlpTeEpRVUZKTEV0QlFVc3hUQ3hQUVVFMVFqdEJRVU5CTEZsQlFVa3lUQ3hsUVVGbExFbEJRVWtzUzBGQlN6Rk1MRTlCUVRWQ08wRkJRMEVzWlVGQlQzaEVMRWRCUVVjd1JDeEpRVUZJTEVOQlEwZ3NRMEZCUTJZc1lVRkJZWFZLTEVOQlFXSXNSMEZCYVVJc1MwRkJTM3BKTEdGQlFVd3NRMEZCYlVKNVNTeERRVUZ5UXl4SlFVRXdReXRETEZsQlJIWkRMRVZCUlVnc1EwRkJRM1JOTEdGQlFXRjNTaXhEUVVGaUxFZEJRV2xDTEV0QlFVc3hTU3hoUVVGTUxFTkJRVzFDTUVrc1EwRkJja01zU1VGQk1FTXJReXhaUVVaMlF5eEZRVWRJZGswc1lVRkJZVVlzUzBGQllpeEhRVUZ4UW5kTkxGbEJTR3hDTEVWQlNVaDBUU3hoUVVGaFJDeE5RVUZpTEVkQlFYTkNkMDBzV1VGS2JrSXNRMEZCVUR0QlFVMUlMRXRCY0hWQ2RVSTdPMEZCYzNWQ2VFSTdPenM3T3pzN1FVRlBRVU1zY1VKQlFXbENMREpDUVVGWk8wRkJRM3BDTEdWQlFVOHNTMEZCU3pGTUxHRkJRVm83UVVGRFNDeExRUzkxUW5WQ096dEJRV2wyUW5oQ096czdPenM3TzBGQlQwRXlUQ3hsUVVGWExIRkNRVUZaTzBGQlEyNUNMR1ZCUVU4c1MwRkJTemRNTEU5QlFWbzdRVUZEU0N4TFFURjJRblZDT3p0QlFUUjJRbmhDT3pzN096czdPMEZCVDBFNFRDeGxRVUZYTEhGQ1FVRlpPMEZCUTI1Q0xHVkJRVThzUzBGQlN6ZE1MRTlCUVZvN1FVRkRTQ3hMUVhKM1FuVkNPenRCUVhWM1FuaENPenM3T3pzN08wRkJUMEU0VEN4NVFrRkJjVUlzSzBKQlFWYzdRVUZETlVJc1pVRkJUeXhMUVVGTGVrd3NhVUpCUVZvN1FVRkRTQ3hMUVdoNFFuVkNPenRCUVd0NFFuaENPenM3T3pzN096czdPMEZCVlVFd1RDdzJRa0ZCZVVJc2FVTkJRVlZETEVWQlFWWXNSVUZCWTBNc1JVRkJaQ3hGUVVGclFrTXNWVUZCYkVJc1JVRkJPRUpETEVkQlFUbENMRVZCUVcxRE8wRkJRM2hFTEZsQlFVa3ZReXhUUVVGVEswTXNUMEZCVHpOUUxFZEJRVWRwVFN4RlFVRklMRVZCUVhCQ08wRkJRMEVzV1VGQlNVTXNTVUZCU1N4TFFVRkxja2tzYVVKQlFVd3NTVUZCTUVJeVRDeExRVUZMUlN4WFFVRlhha01zU1VGQk1VTXNRMEZCVWp0QlFVTkJMRmxCUVVsMFFpeEpRVUZKTEV0QlFVdDBTU3hwUWtGQlRDeEpRVUV3UWpaTUxGZEJRVmRvUXl4SFFVRllMRWRCUVdsQ1owTXNWMEZCVjJoT0xFMUJRVFZDTEVkQlFYRkRLMDBzUlVGQkwwUXNRMEZCVWp0QlFVTkJMRmxCUVVrc1MwRkJTM0pNTEZWQlFWUXNSVUZCY1VJN1FVRkRha0ozU1N4dFFrRkJUMVlzUTBGQlVDeEhRVUZYYkUwc1IwRkJSM1ZHTEVsQlFVZ3NRMEZCVVZNc1RVRkJVaXhEUVVGbGRrUXNTMEZCWml4SFFVRjFRakJLTEVOQlFXeERPMEZCUTBGVExHMUNRVUZQVkN4RFFVRlFMRWRCUVZkRUxFTkJRVmc3UVVGRFNDeFRRVWhFTEUxQlNVczdRVUZEUkZVc2JVSkJRVTlXTEVOQlFWQXNSMEZCVjBFc1EwRkJXRHRCUVVOQlZTeHRRa0ZCVDFRc1EwRkJVQ3hIUVVGWFFTeERRVUZZTzBGQlEwZzdRVUZEUkN4bFFVRlBVeXhOUVVGUU8wRkJRMGdzUzBGNmVVSjFRanM3UVVFeWVVSjRRbWRFTEcxRFFVRXJRaXgxUTBGQlZVTXNXVUZCVml4RlFVRjNRa2dzVlVGQmVFSXNSVUZCYjBNN1FVRkRMMFFzV1VGQlNURkRMRmRCUVZjc1MwRkJTM1pLTEdGQlFYQkNPMEZCUVVFc1dVRkJiVU5ZTEV0QlFVc3NTVUZCZUVNN1FVRkRRU3ROTEhGQ1FVRmhNMFFzUTBGQllpeEhRVUZwUWl4RFFVRkZjRW9zUjBGQlIyVXNhVUpCUVVnc1NVRkJkMEpuVFN4aFFVRmhNMFFzUTBGQllpeEhRVUZwUW5kRUxGZEJRVmRxUXl4SlFVRndSQ3hEUVVGRUxFZEJRVGhFVkN4VFFVRlRaQ3hEUVVGNFJTeEpRVUUyUlhCS0xFZEJRVWRUTEU5QlFXcEhPMEZCUTBGelRTeHhRa0ZCWVRGRUxFTkJRV0lzUjBGQmFVSXNRMEZCUTNKS0xFZEJRVWRsTEdsQ1FVRklMRWxCUVhkQ05rd3NWMEZCVjJoRExFZEJRVmdzUjBGQmFVSm5ReXhYUVVGWGFFNHNUVUZCTlVJc1IwRkJjVU50VGl4aFFVRmhNVVFzUTBGQk1VVXNTVUZCSzBWaExGTkJRVk5pTEVOQlFYcEdMRWxCUVRoR2Nrb3NSMEZCUjFVc1QwRkJiRWc3UVVGRFNDeExRUzk1UW5WQ096dEJRV2w2UW5oQ2MwMHNORUpCUVhkQ0xHZERRVUZWUXl4TFFVRldMRVZCUVdsQ08wRkJRM0pETEZsQlFVa3ZReXhYUVVGWExFdEJRVXQyU2l4aFFVRndRanRCUVVOQmMwMHNZMEZCVFRkRUxFTkJRVTRzUjBGQlZTeERRVUZETmtRc1RVRkJUVGRFTEVOQlFVNHNSMEZCVldNc1UwRkJVMlFzUTBGQmNFSXNTVUZCZVVJc1MwRkJTek5KTEU5QlFYaERPMEZCUTBGM1RTeGpRVUZOTlVRc1EwRkJUaXhIUVVGVkxFTkJRVU0wUkN4TlFVRk5OVVFzUTBGQlRpeEhRVUZWWVN4VFFVRlRZaXhEUVVGd1FpeEpRVUY1UWl4TFFVRkxNMGtzVDBGQmVFTTdRVUZEU0N4TFFYSjZRblZDT3p0QlFYVjZRbmhDZDAwc09FSkJRVEJDTEd0RFFVRlZReXhQUVVGV0xFVkJRVzFDTzBGQlEzcERMRmxCUVVscVJDeFhRVUZYTEV0QlFVdDJTaXhoUVVGd1FqdEJRVUZCTEZsQlFXMURkVXNzVTBGQlV5eExRVUZMZWtzc1QwRkJha1E3UVVGQlFTeFpRVUV3UkRCTExGTkJRVk1zUzBGQlMzcExMRTlCUVhoRk8wRkJRVUVzV1VGRFNUQk5MRkZCUkVvN1FVRkJRU3haUVVOalF5eFJRVVJrTzBGQlFVRXNXVUZEZDBKRExGZEJSSGhDTzBGQlJVRXNZVUZCU3l4SlFVRkpReXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRWxCUVVsS0xGRkJRVkZzUkN4TlFVRTFRaXhGUVVGdlEzTkVMRWRCUVhCRExFVkJRWGxETzBGQlEzSkRTQ3gxUWtGQlYwUXNVVUZCVVVrc1EwRkJVaXhEUVVGWU8wRkJRMEZHTEhWQ1FVRlhSQ3hUUVVGVFNTeE5RVUZ3UWp0QlFVTkJSaXd3UWtGQlkwWXNVMEZCVTBzc1ZVRkJka0k3TzBGQlJVRktMSEZDUVVGVGFrVXNRMEZCVkN4SFFVRmhMRU5CUVVOcFJTeFRRVUZUYWtVc1EwRkJWQ3hIUVVGaFl5eFRRVUZUWkN4RFFVRjJRaXhKUVVFMFFqaENMRTFCUVhwRE8wRkJRMEZ0UXl4eFFrRkJVMmhGTEVOQlFWUXNSMEZCWVN4RFFVRkRaMFVzVTBGQlUyaEZMRU5CUVZRc1IwRkJZV0VzVTBGQlUySXNRMEZCZGtJc1NVRkJORUk0UWl4TlFVRjZRenRCUVVOQmJVTXNkMEpCUVZsc1JTeERRVUZhTEVkQlFXZENMRU5CUVVOclJTeFpRVUZaYkVVc1EwRkJXaXhIUVVGblFtTXNVMEZCVTJRc1EwRkJNVUlzU1VGQkswSTRRaXhOUVVFdlF6dEJRVU5CYjBNc2QwSkJRVmxxUlN4RFFVRmFMRWRCUVdkQ0xFTkJRVU5wUlN4WlFVRlpha1VzUTBGQldpeEhRVUZuUW1Fc1UwRkJVMklzUTBGQk1VSXNTVUZCSzBJNFFpeE5RVUV2UXp0QlFVTklPMEZCUTBvN1FVRndNRUoxUWl4RFFVRTFRanM3UVVGMU1FSkJPenM3T3pzN08wRkJUME03T3pzN096czdPMEZCVTBRN096czdPenRCUVUxQmFrOHNSMEZCUjJkRUxHbENRVUZJTEVkQlFYVkNhRVFzUjBGQlIzZFJMRXRCUVVnc1EwRkJVenRCUVVNMVFtNUlMRlZCUVUwc2JVSkJSSE5DTzBGQlJUVkNPenM3T3pzN08wRkJUMEZ6UkN4alFVRlZMR3RDUVVGVmNrY3NTVUZCVml4RlFVRm5RaXhEUVVONlFpeERRVll5UWpzN1FVRlpOVUk3T3pzN096czdPMEZCVVVGMVJ5eFhRVUZQTEdWQlFWVjJSeXhKUVVGV0xFVkJRV2RDYlVzc2EwSkJRV2hDTEVWQlFXOURMRU5CUXpGRExFTkJja0l5UWpzN1FVRjFRalZDT3pzN096czdPMEZCVDBGMFJDeGxRVUZYTEcxQ1FVRlZOMGNzU1VGQlZpeEZRVUZuUWl4RFFVVXhRaXhEUVdoRE1rSTdPMEZCYTBNMVFtOUxMSEZDUVVGcFFpeDVRa0ZCVlhCTExFbEJRVllzUlVGQlowSlFMRU5CUVdoQ0xFVkJRVzFDUlN4RFFVRnVRaXhGUVVGelFqdEJRVU51UXl4WlFVRkpNRXNzV1VGQldUTlJMRWRCUVVkMVJpeEpRVUZJTEVOQlFWRlRMRTFCUVhoQ08wRkJRVUVzV1VGQlowTTBTeXhsUVVGbE5WRXNSMEZCUjNWR0xFbEJRVWdzUTBGQlVYTkNMRk5CUVhaRU96dEJRVVZCTzBGQlEwRXNXVUZCU1N4RFFVRkRia2NzWVVGQlJDeEpRVUZyUWl4RFFVRkRUaXhYUVVGdVFpeEpRVUZyUXl4RFFVRkRUQ3haUVVGdVF5eEpRVUZ0UkN4RFFVRkRUeXhaUVVGNFJDeEZRVUZ6UlR0QlFVTnNSU3huUWtGQlNVNHNSMEZCUjBNc1IwRkJTQ3hEUVVGUGVVSXNSVUZCVUN4TFFVRmpNVUlzUjBGQlIwTXNSMEZCU0N4RFFVRlBORkVzVlVGQmVrSXNSVUZCY1VNN1FVRkRha05vVVN4NVFrRkJVekpOTEVsQlFWUXNRMEZCWXpGSExFdEJRV1FzUTBGQmIwSnlSU3hMUVVGd1FpeEhRVUUwUWl4RFFVRkROa1FzUzBGQlMyeERMRlZCUVV3c1IwRkJhMEkyUWl4RFFVRnNRaXhIUVVGelFrWXNRMEZCZGtJc1NVRkJORUlzU1VGQmVFUTdRVUZEUVd4R0xIbENRVUZUTWswc1NVRkJWQ3hEUVVGak1VY3NTMEZCWkN4RFFVRnZRbkJGTEUxQlFYQkNMRWRCUVRaQ0xFTkJRVU0wUkN4TFFVRkxiRU1zVlVGQlRDeEhRVUZyUWpKQ0xFTkJRV3hDTEVkQlFYTkNSU3hEUVVGMlFpeEpRVUUwUWl4SlFVRjZSRHRCUVVOSU8wRkJRMFE3UVVGRFFUSkxMSGxDUVVGaE9Vb3NTMEZCWWl4RFFVRnRRbkpGTEV0QlFXNUNMRWRCUVRKQ2EwOHNWVUZCVlRkS0xFdEJRVllzUTBGQlowSnlSU3hMUVVGb1FpeEhRVUYzUW5ORUxFbEJRVWtzU1VGQmRrUTdRVUZEUVRaTExIbENRVUZoT1Vvc1MwRkJZaXhEUVVGdFFuQkZMRTFCUVc1Q0xFZEJRVFJDYVU4c1ZVRkJWVGRLTEV0QlFWWXNRMEZCWjBKd1JTeE5RVUZvUWl4SFFVRjVRblZFTEVsQlFVa3NTVUZCZWtRN1FVRkRTRHRCUVVORU8wRkJRMEVzV1VGQlNUWkxMRzFDUVVGdFFuaExMRXRCUVV0NlF5eHBRa0ZCVEN4SFFVRjVRaXhEUVVGb1JEdEJRVU5CTEZsQlFVbDVReXhMUVVGTE1rUXNaVUZCVEN4RlFVRktMRVZCUTBrMlJ5eHRRa0ZCYlVKNFN5eExRVUZMZWtNc2FVSkJRVXdzUjBGQmVVSnpTeXhMUVVGTE5FTXNSMEZCVEN4RFFVRlRla3NzUzBGQlMzaERMR05CUVdRc1JVRkJPRUkzUXl4UFFVRlBObEFzWjBKQlFWQXNTVUZCTWtJc1EwRkJla1FzUTBGQk5VTTdRVUZEU2p0QlFVTkJTQ3hyUWtGQlZXeFBMRXRCUVZZc1IwRkJhMEp6UkN4SlFVRkpLMHNzWjBKQlFYUkNPMEZCUTBGSUxHdENRVUZWYWs4c1RVRkJWaXhIUVVGdFFuVkVMRWxCUVVrMlN5eG5Ra0ZCZGtJN1FVRkRTQ3hMUVhSRU1rSTdPMEZCZDBRMVFrVXNiVUpCUVdVc2VVSkJRVms3UVVGRGRrSTdRVUZEUVc1UkxHbENRVUZUTWswc1NVRkJWQ3hEUVVGamVVUXNXVUZCWkN4RFFVRXlRbXBTTEVkQlFVZDFSaXhKUVVGSUxFTkJRVkZ6UWl4VFFVRnVReXhGUVVFNFEyaEhMRk5CUVZNeVRTeEpRVUZVTEVOQlFXTXdSQ3hWUVVFMVJEdEJRVU5CTzBGQlEwRXNXVUZCU1VNc1MwRkJTM1JSTEZOQlFWTXlUU3hKUVVGVUxFTkJRV014Unl4TFFVRjJRanRCUVVOQmNVc3NWMEZCUnpGUExFdEJRVWdzUjBGQlYzaENMRTlCUVU5RExGVkJRVkFzUjBGQmIwSXNTVUZCTDBJN1FVRkRRV2xSTEZkQlFVZDZUeXhOUVVGSUxFZEJRVmw2UWl4UFFVRlBTU3hYUVVGUUxFZEJRWEZDTEVsQlFXcERPMEZCUTBFNFVDeFhRVUZIUXl4UlFVRklMRWRCUVdNc1VVRkJaRHRCUVVOQk8wRkJRMEVzV1VGQlNVTXNXVUZCV1hKU0xFZEJRVWQxUml4SlFVRklMRU5CUVZGelFpeFRRVUZTTEVOQlFXdENReXhMUVVGc1F6dEJRVU5CZFVzc2EwSkJRVlZETEZGQlFWWXNSMEZCY1VJc1QwRkJja0k3UVVGRFFVUXNhMEpCUVZVMVJDeEpRVUZXTEVkQlFXbENORVFzVlVGQlZUTkVMRWRCUVZZc1IwRkJaMElzUzBGQmFrTTdRVUZEUVR0QlFVTkJOMDBzYVVKQlFWTXlUU3hKUVVGVUxFTkJRV01yUkN4VFFVRmtMRWRCUVRCQ0xFTkJRVEZDTzBGQlEwZzdRVUYwUlRKQ0xFTkJRVlFzUTBGQmRrSTdPMEZCZVVWQk96czdPenM3UVVGTlFYWlNMRWRCUVVkclJDeGxRVUZJTEVkQlFYRkNiRVFzUjBGQlIzZFJMRXRCUVVnc1EwRkJVenRCUVVNeFFtNUlMRlZCUVUwc2FVSkJSRzlDT3p0QlFVY3hRbTFKTEZWQlFVMHNaMEpCUVZrN1FVRkRaQ3hoUVVGTFF5eFBRVUZNTEVkQlFXVTdRVUZEV0RORkxHMUNRVUZQTEVOQlFVTXNRMEZCUkN4RlFVRkpMRU5CUVVvc1EwRkVTVHRCUVVWWVJTeHpRa0ZCVlR0QlFVWkRMRk5CUVdZN1FVRkpTQ3hMUVZKNVFqczdRVUZWTVVJd1JTeHJRa0ZCWXl4elFrRkJWVU1zVlVGQlZpeEZRVUZ6UWtNc1ZVRkJkRUlzUlVGQmEwTkRMRkZCUVd4RExFVkJRVFJEUXl4UlFVRTFReXhGUVVGelJEbEVMRTFCUVhSRUxFVkJRVGhFUXl4TlFVRTVSQ3hGUVVGelJUdEJRVU5vUmp0QlFVTkJSU3hoUVVGTE5FUXNSMEZCVEN4RFFVRlRTaXhoUVVGaFJTeFJRVUYwUWl4SlFVRnJReXhEUVVGc1F5eExRVUYzUTBFc1YwRkJWMFlzVlVGQmJrUTdRVUZEUVhoRUxHRkJRVXMwUkN4SFFVRk1MRU5CUVZOSUxHRkJRV0ZGTEZGQlFYUkNMRWxCUVd0RExFTkJRV3hETEV0QlFYZERRU3hYUVVGWFJpeFZRVUZ1UkRzN1FVRkZRU3haUVVGSk5VVXNWMEZCVjJoT0xFZEJRVWN3UkN4SlFVRklMRU5CUVZFc1EwRkJRMmxQTEdGQlFXRkZMRkZCUVdRc1NVRkJNRUlzUTBGQmJFTXNSVUZCY1VNc1EwRkJRMFFzWVVGQllVVXNVVUZCWkN4SlFVRXdRaXhEUVVFdlJDeEZRVUZyUlVRc1VVRkJiRVVzUlVGQk5FVkRMRkZCUVRWRkxFTkJRV1k3TzBGQlJVRTdRVUZEUVN4WlFVRkpPVklzUjBGQlIzVkdMRWxCUVVnc1EwRkJVVEpGTEZWQlFWSXNTMEZCZFVKc1N5eEhRVUZIZFVZc1NVRkJTQ3hEUVVGUmRVWXNhMEpCUVc1RExFVkJRWE5FTzBGQlEyeEVPMEZCUTBFN1FVRkRTRHM3UVVGRlJDeGhRVUZMTWtjc1QwRkJUQ3hEUVVGaE0wVXNTMEZCWWl4SFFVRnhRaXhEUVVGRGEwSXNUVUZCUkN4RlFVRlRReXhOUVVGVUxFTkJRWEpDTzBGQlEwRXNZVUZCUzNkRUxFOUJRVXdzUTBGQllYcEZMRkZCUVdJc1IwRkJkMEpCTEZGQlFYaENPMEZCUTBFc1pVRkJUeXhMUVVGTGVVVXNUMEZCV2p0QlFVTklMRXRCTVVKNVFqczdRVUUwUWpGQ096czdPenM3TzBGQlQwRTVSU3hqUVVGVkxHdENRVUZWY2tjc1NVRkJWaXhGUVVGblFpeERRVU42UWl4RFFYQkRlVUk3TzBGQmMwTXhRanM3T3pzN096czdPenRCUVZWQmRVY3NWMEZCVHl4bFFVRlZka2NzU1VGQlZpeEZRVUZuUW0xTExHdENRVUZvUWl4RlFVRnZRenRCUVVOMlF5eGxRVUZQTEVWQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFTkJRVllzUlVGQlVEdEJRVU5JTEV0QmJFUjVRanM3UVVGdlJERkNPenM3T3pzN08wRkJUMEYwUkN4bFFVRlhMRzFDUVVGVk4wY3NTVUZCVml4RlFVRm5RaXhEUVVNeFFqdEJRVFZFZVVJc1EwRkJWQ3hEUVVGeVFqczdRVUVyUkVFc1EwRkJReXhaUVVGWk96dEJRVVZpTzBGQlEwazdPenM3UVVGSlFTeFJRVUZKTUV3c1pVRkJaV2hUTEVkQlFVZDNVU3hMUVVGSUxFTkJRVk03UVVGRGVFSnVTQ3hqUVVGTkxHTkJSR3RDTzBGQlJYaENORWtzYVVKQlFWTnFVeXhIUVVGSFowUXNhVUpCUmxrN1FVRkhlRUkyU2l4bFFVRlBMR1ZCUVZWMlJ5eEpRVUZXTEVWQlFXZENPMEZCUTI1Q0xHZENRVUZKTkV3c1UwRkJVelZNTEV0QlFVdHVSQ3hWUVVGTUxFTkJRV2RDVkN4TlFVRTNRanRCUVVGQkxHZENRVUZ4UTJ0RkxHbENRVUZwUWpWSExFZEJRVWQxUml4SlFVRklMRU5CUVZGelFpeFRRVUZTTEVOQlFXdENReXhMUVVGNFJUdEJRVU5CTEdsQ1FVRkxORW9zWlVGQlRDeERRVUZ4UW5CTExFbEJRWEpDTEVWQlFUSkNRU3hMUVVGTGJrUXNWVUZCVEN4RFFVRm5RbFlzUzBGQk0wTXNSVUZCYTBRMlJDeExRVUZMYmtRc1ZVRkJUQ3hEUVVGblFsUXNUVUZCYkVVN1FVRkRRVHRCUVVOQkxHZENRVUZKTkVRc1MwRkJTMnhETEZWQlFWUXNSVUZCY1VJN1FVRkRha0ozUXl3clFrRkJaVWNzVFVGQlppeEhRVUYzUWl4WFFVRlhiVXdzVFVGQldDeEhRVUZ2UWl4SlFVRTFRenRCUVVOSUxHRkJSa1FzVFVGSFN6dEJRVU5FZEV3c0swSkJRV1ZITEUxQlFXWXNSMEZCZDBJc1MwRkJlRUk3UVVGRFNEdEJRVU5FU0N3eVFrRkJaWFZNTEU5QlFXWXNSMEZCZVVJc1MwRkJla0k3UVVGRFNEdEJRV1IxUWl4TFFVRlVMRU5CUVc1Q096dEJRV2xDUVRzN096dEJRVWxCTEZGQlFVbERMSE5DUVVGelFuQlRMRWRCUVVkM1VTeExRVUZJTEVOQlFWTTdRVUZETDBKdVNDeGpRVUZOTEhGQ1FVUjVRanRCUVVVdlFqUkpMR2xDUVVGVGFsTXNSMEZCUjJkRUxHbENRVVp0UWp0QlFVY3ZRalpLTEdWQlFVOHNaVUZCVlhaSExFbEJRVllzUlVGQlowSnRTeXhyUWtGQmFFSXNSVUZCYjBNN1FVRkRka01zWjBKQlFVazBRaXhUUVVGVEwwd3NTMEZCUzI1RUxGVkJRVXdzUTBGQlowSldMRXRCUVRkQ08wRkJRVUVzWjBKQlFXOURlVkFzVTBGQlV6Vk1MRXRCUVV0dVJDeFZRVUZNTEVOQlFXZENWQ3hOUVVFM1JEdEJRVUZCTEdkQ1FVRnhSV3RGTEdsQ1FVRnBRalZITEVkQlFVZDFSaXhKUVVGSUxFTkJRVkZ6UWl4VFFVRlNMRU5CUVd0Q1F5eExRVUY0Unp0QlFVRkJMR2RDUVVOSmQwd3NWVUZCVlRkQ0xHMUNRVUZ0UW1oUExFdEJSR3BETzBGQlFVRXNaMEpCUTNkRE9GQXNWVUZCVlRsQ0xHMUNRVUZ0UWk5T0xFMUJSSEpGTzBGQlFVRXNaMEpCUlVselRDeFRRVUZUY1VVc1UwRkJVME1zVDBGR2RFSTdRVUZCUVN4blFrRkZLMEp5UlN4VFFVRlRhVVVzVTBGQlUwc3NUMEZHYWtRN1FVRkJRU3huUWtGSFNWb3NWVUZJU2p0QlFVRkJMR2RDUVVkblFrTXNWVUZJYUVJN08wRkJTMEUxUkN4eFFrRkJVME1zVFVGQlZDeEpRVUZ0UWpCRUxHRkJRV0ZWTEUxQlFXSXNSVUZCY1VKVUxHRkJRV0ZYTEZWQlFWVjJSU3hOUVVFdlJDeExRVUV3UlRKRUxHRkJRV0ZYTEZWQlFWVnlSU3hOUVVGMlFpeEZRVUVyUWpKRUxHRkJRV0ZOTEUxQlFYUklPenRCUVVWQk8wRkJRMEVzWjBKQlFVbE5MRTlCUVU5eVJTeExRVUZMYzBVc1MwRkJUQ3hEUVVGWExFTkJRVU5LTEZOQlFWTldMRlZCUVZZc1NVRkJkMElzUTBGQmJrTXNRMEZCV0R0QlFVTkJMR2RDUVVGSlpTeFBRVUZQZGtVc1MwRkJTM05GTEV0QlFVd3NRMEZCVnl4RFFVRkRVQ3hUUVVGVFRpeFZRVUZXTEVsQlFYZENMRU5CUVc1RExFTkJRVmc3UVVGRFFVUXNlVUpCUVdGVkxGTkJRVk1zU1VGQlNVY3NTVUZCTVVJN1FVRkRRVm9zZVVKQlFXRk5MRk5CUVZNc1NVRkJTVkVzU1VGQk1VSTdPMEZCUlVFc2FVSkJRVXRvUXl4bFFVRk1MRU5CUVhGQ2NFc3NTVUZCY2tJc1JVRkJNa0p4VEN4VlFVRXpRaXhGUVVGMVEwTXNWVUZCZGtNN1FVRkRRU3huUWtGQlNTeERRVUZEYmtzc1UwRkJUQ3hGUVVGblFqdEJRVU5hTzBGQlEwRXNiMEpCUVVsdVFpeExRVUZMYkVNc1ZVRkJWQ3hGUVVGeFFqdEJRVU5xUW5kRExHMURRVUZsUnl4TlFVRm1MRWRCUVhkQ0xGZEJRVmR0VEN4TlFVRllMRWRCUVc5Q0xFbEJRVFZETzBGQlEwZ3NhVUpCUmtRc1RVRkhTenRCUVVORWRFd3NiVU5CUVdWSExFMUJRV1lzUjBGQmQwSXNTMEZCZUVJN1FVRkRTRHRCUVVORVNDd3JRa0ZCWlN0TUxGZEJRV1lzUjBGQk5rSklMRTlCUVU4c1NVRkJjRU03UVVGRFFUVk1MQ3RDUVVGbFowMHNXVUZCWml4SFFVRTRRa29zVDBGQlR5eEpRVUZ5UXp0QlFVTkJOVXdzSzBKQlFXVnBUU3hWUVVGbUxFZEJRVFJDU0N4UFFVRlBMRWxCUVc1RE8wRkJRMEU1VEN3clFrRkJaV3ROTEdGQlFXWXNSMEZCSzBKS0xFOUJRVThzU1VGQmRFTTdRVUZEU0R0QlFVTktPMEZCTDBJNFFpeExRVUZVTEVOQlFURkNPenRCUVd0RFFUczdPenRCUVVsQkxGRkJRVWxMTEdkQ1FVRm5RaTlUTEVkQlFVZDNVU3hMUVVGSUxFTkJRVk03UVVGRGVrSnVTQ3hqUVVGTkxHVkJSRzFDTzBGQlJYcENORWtzYVVKQlFWTkVMRmxCUm1kQ08wRkJSM3BDY2tZc2EwSkJRVlVzYTBKQlFWVnlSeXhKUVVGV0xFVkJRV2RDTzBGQlEzUkNMR2xDUVVGTE1FMHNUVUZCVEN4RFFVRlpNVTBzU1VGQldqdEJRVU5CZEVjc1pVRkJSM1ZHTEVsQlFVZ3NRMEZCVVhaRkxFdEJRVklzUjBGQlowSklMRk5CUVZNd1RTeGxRVUY2UWp0QlFVTklMRk5CVG5kQ096dEJRVkY2UWxZc1pVRkJUeXhsUVVGVmRrY3NTVUZCVml4RlFVRm5RanRCUVVOdVFpeHBRa0ZCU3pCTkxFMUJRVXdzUTBGQldURk5MRWxCUVZvN1FVRkRRU3hwUWtGQlN6QkxMR0ZCUVV3N1FVRkRTRHRCUVZoM1FpeExRVUZVTEVOQlFYQkNPenRCUVdOQk96czdPMEZCU1VFc1VVRkJTV2xETEhWQ1FVRjFRbXBVTEVkQlFVZDNVU3hMUVVGSUxFTkJRVk03UVVGRGFFTnVTQ3hqUVVGTkxITkNRVVF3UWp0QlFVVm9RelJKTEdsQ1FVRlRSeXh0UWtGR2RVSTdRVUZIYUVONlJpeHJRa0ZCVlN4clFrRkJWWEpITEVsQlFWWXNSVUZCWjBJN1FVRkRkRUlzYVVKQlFVc3dUU3hOUVVGTUxFTkJRVmt4VFN4SlFVRmFPMEZCUTBGMFJ5eGxRVUZIZFVZc1NVRkJTQ3hEUVVGUmRrVXNTMEZCVWl4SFFVRm5Ra2dzVTBGQlV6Qk5MR1ZCUVhwQ08wRkJRMGdzVTBGT0swSTdPMEZCVVdoRFZpeGxRVUZQTEdWQlFWVjJSeXhKUVVGV0xFVkJRV2RDYlVzc2EwSkJRV2hDTEVWQlFXOURPMEZCUTNaRExHbENRVUZMZFVNc1RVRkJUQ3hEUVVGWk1VMHNTVUZCV2l4RlFVRnJRbTFMTEd0Q1FVRnNRanRCUVVOQkxHbENRVUZMVHl4aFFVRk1PMEZCUTBnN1FVRllLMElzUzBGQlZDeERRVUV6UWpzN1FVRmpRVHM3T3p0QlFVbEJMRkZCUVVsclF5eHZRa0ZCYjBKc1ZDeEhRVUZIZDFFc1MwRkJTQ3hEUVVGVE8wRkJRemRDYmtnc1kwRkJUU3h0UWtGRWRVSTdRVUZGTjBJMFNTeHBRa0ZCVTJwVExFZEJRVWRuUkN4cFFrRkdhVUk3UVVGSE4wSTJTaXhsUVVGUExHVkJRVlYyUnl4SlFVRldMRVZCUVdkQ08wRkJRMjVDTEdsQ1FVRkxiMHNzWlVGQlRDeERRVUZ4UW5CTExFbEJRWEpDTEVWQlFUSkNkRWNzUjBGQlIzVkdMRWxCUVVnc1EwRkJVVk1zVFVGQlVpeERRVUZsZGtRc1MwRkJNVU1zUlVGQmFVUjZReXhIUVVGSGRVWXNTVUZCU0N4RFFVRlJVeXhOUVVGU0xFTkJRV1YwUkN4TlFVRm9SVHRCUVVOSU8wRkJURFJDTEV0QlFWUXNRMEZCZUVJN08wRkJVVW83UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkpNVU1zVDBGQlIyZEVMR2xDUVVGSUxFTkJRWEZDTmtJc1kwRkJja0lzUjBGQmMwTXNTVUZCU1cxT0xGbEJRVW9zUlVGQmRFTTdRVUZEU2p0QlFVTkphRk1zVDBGQlIyZEVMR2xDUVVGSUxFTkJRWEZDYlZFc2JVSkJRWEpDTEVkQlFUSkRMRWxCUVVsbUxHMUNRVUZLTEVWQlFUTkRPMEZCUTBvN1FVRkRTWEJUTEU5QlFVZG5SQ3hwUWtGQlNDeERRVUZ4UW05UkxHdENRVUZ5UWl4SFFVRXdReXhKUVVGSlJpeHBRa0ZCU2l4RlFVRXhRenM3UVVGRlNqdEJRVU5KTEZGQlFVbEhMRmRCUVZkeVZDeEhRVUZIZDFFc1MwRkJTQ3hEUVVGVE8wRkJRM0JDYmtnc1kwRkJUU3hWUVVSak8wRkJSWEJDTkVrc2FVSkJRVk5xVXl4SFFVRkhhMFFzWlVGR1VUdEJRVWR3UWpKS0xHVkJRVThzWlVGQlZYWkhMRWxCUVZZc1JVRkJaMEp0U3l4clFrRkJhRUlzUlVGQmIwTTdRVUZEZGtNc1owSkJRVWxyUWl4aFFVRmhNMUlzUjBGQlIzVkdMRWxCUVVnc1EwRkJVVk1zVFVGQlVpeERRVUZsZGtRc1MwRkJhRU03UVVGQlFTeG5Ra0ZCZFVOdFVDeGhRVUZoTlZJc1IwRkJSM1ZHTEVsQlFVZ3NRMEZCVVZNc1RVRkJVaXhEUVVGbGRFUXNUVUZCYmtVN1FVRkJRU3huUWtGRFNYTk1MRk5CUVZNeVJDeGhRVUZoYkVJc2JVSkJRVzFDYUU4c1MwRkVOME03UVVGQlFTeG5Ra0ZEYjBSM1RDeFRRVUZUTWtRc1lVRkJZVzVDTEcxQ1FVRnRRaTlPTEUxQlJEZEdPenRCUVVkQkxHMUNRVUZQTEV0QlFVdG5VQ3haUVVGTUxFTkJRV3RDUXl4VlFVRnNRaXhGUVVFNFFrTXNWVUZCT1VJc1JVRkJNRU5FTEZWQlFURkRMRVZCUVhORVF5eFZRVUYwUkN4RlFVRnJSVFZFTEUxQlFXeEZMRVZCUVRCRlF5eE5RVUV4UlN4RFFVRlFPMEZCUTBnN1FVRlNiVUlzUzBGQlZDeERRVUZtT3p0QlFWZEJMRkZCUVVseFJpeFZRVUZWZEZRc1IwRkJSM2RSTEV0QlFVZ3NRMEZCVXp0QlFVTnVRbTVJTEdOQlFVMHNVMEZFWVR0QlFVVnVRalJKTEdsQ1FVRlRhbE1zUjBGQlIydEVMR1ZCUms4N1FVRkhia0l5U2l4bFFVRlBMR1ZCUVZWMlJ5eEpRVUZXTEVWQlFXZENiVXNzYTBKQlFXaENMRVZCUVc5RE8wRkJRM1pETEdkQ1FVRkphMElzWVVGQllUTlNMRWRCUVVkMVJpeEpRVUZJTEVOQlFWRlRMRTFCUVZJc1EwRkJaWFpFTEV0QlFXaERPMEZCUVVFc1owSkJRWFZEYlZBc1lVRkJZVFZTTEVkQlFVZDFSaXhKUVVGSUxFTkJRVkZUTEUxQlFWSXNRMEZCWlhSRUxFMUJRVzVGTzBGQlFVRXNaMEpCUTBrMFVDeFZRVUZWTjBJc2JVSkJRVzFDYUU4c1MwRkVha003UVVGQlFTeG5Ra0ZEZDBNNFVDeFZRVUZWT1VJc2JVSkJRVzFDTDA0c1RVRkVja1U3UVVGQlFTeG5Ra0ZGU1hOTUxGTkJRVk15UkN4aFFVRmhWeXhQUVVZeFFqdEJRVUZCTEdkQ1FVVnRRM0pGTEZOQlFWTXlSQ3hoUVVGaFZ5eFBRVVo2UkR0QlFVRkJMR2RDUVVWclJYcEdMRkZCUVZFc1EwRkdNVVU3UVVGQlFTeG5Ra0ZIU1N0RkxGRkJTRW83UVVGQlFTeG5Ra0ZIWTBNc1VVRklaRHM3UVVGTFFUbEVMSEZDUVVGVFF5eE5RVUZVTEVsQlFXMUNia0lzVVVGQlVXdENMRTFCUVZJc1JVRkJaMEkyUkN4WFFVRlhSaXhWUVVFelFpeEZRVUYxUTBjc1YwRkJWMU1zVlVGQlZYcEdMRXRCUVM5RkxFdEJRMDlCTEZGQlFWRnRRaXhOUVVGU0xFVkJRV2RDTkVRc1YwRkJWMU1zVlVGQlZYaEdMRXRCUVhKRExFVkJRVFJEWjBZc1YwRkJWMFlzVlVGRU9VUTdPMEZCUjBFc2JVSkJRVThzUzBGQlMwWXNXVUZCVEN4RFFVRnJRa01zVlVGQmJFSXNSVUZCT0VKRExGVkJRVGxDTEVWQlFUQkRReXhSUVVFeFF5eEZRVUZ2UkVNc1VVRkJjRVFzUlVGQk9FUm9SaXhMUVVFNVJDeEZRVUZ4UlVFc1MwRkJja1VzUTBGQlVEdEJRVU5JTzBGQlltdENMRXRCUVZRc1EwRkJaRHM3UVVGblFrRXNVVUZCU1hsSExGZEJRVmQyVkN4SFFVRkhkMUVzUzBGQlNDeERRVUZUTzBGQlEzQkNia2dzWTBGQlRTeFZRVVJqTzBGQlJYQkNORWtzYVVKQlFWTnFVeXhIUVVGSGEwUXNaVUZHVVR0QlFVZHdRakpLTEdWQlFVOHNaVUZCVlhaSExFbEJRVllzUlVGQlowSnRTeXhyUWtGQmFFSXNSVUZCYjBNN1FVRkRka01zWjBKQlFVbHJRaXhoUVVGaE0xSXNSMEZCUjNWR0xFbEJRVWdzUTBGQlVWTXNUVUZCVWl4RFFVRmxka1FzUzBGQmFFTTdRVUZCUVN4blFrRkJkVU50VUN4aFFVRmhOVklzUjBGQlIzVkdMRWxCUVVnc1EwRkJVVk1zVFVGQlVpeERRVUZsZEVRc1RVRkJia1U3UVVGQlFTeG5Ra0ZEU1RSUUxGVkJRVlUzUWl4dFFrRkJiVUpvVHl4TFFVUnFRenRCUVVGQkxHZENRVU4zUXpoUUxGVkJRVlU1UWl4dFFrRkJiVUl2VGl4TlFVUnlSVHRCUVVGQkxHZENRVVZKYzB3c1UwRkJVekpFTEdGQlFXRlhMRTlCUmpGQ08wRkJRVUVzWjBKQlJXMURja1VzVTBGQlV6SkVMR0ZCUVdGWExFOUJSbnBFTzBGQlFVRXNaMEpCUld0RmVrWXNTMEZHYkVVN1FVRkJRU3huUWtGSFNTdEZMRkZCU0VvN1FVRkJRU3huUWtGSFkwTXNVVUZJWkRzN1FVRkxRVGxFTEhGQ1FVRlRReXhOUVVGVUxFbEJRVzFDYmtJc1VVRkJVVzFDTEUxQlFWSXNSVUZCWjBJMFJDeFhRVUZYVXl4VlFVRlZlRVlzUzBGQmNrTXNSVUZCTkVOblJpeFhRVUZYUml4VlFVRXhSU3hMUVVOUE9VVXNVVUZCVVd0Q0xFMUJRVklzUlVGQlowSTJSQ3hYUVVGWFJpeFZRVUV6UWl4RlFVRjFRMGNzVjBGQlYxTXNWVUZCVlhwR0xFdEJSRzVGT3p0QlFVZEJMRzFDUVVGUExFdEJRVXMwUlN4WlFVRk1MRU5CUVd0Q1F5eFZRVUZzUWl4RlFVRTRRa01zVlVGQk9VSXNSVUZCTUVORExGRkJRVEZETEVWQlFXOUVReXhSUVVGd1JDeEZRVUU0UkdoR0xFdEJRVGxFTEVWQlFYRkZRU3hMUVVGeVJTeERRVUZRTzBGQlEwZzdRVUZpYlVJc1MwRkJWQ3hEUVVGbU96dEJRV2RDUVN4UlFVRkpNRWNzWTBGQlkzaFVMRWRCUVVkM1VTeExRVUZJTEVOQlFWTTdRVUZEZGtKdVNDeGpRVUZOTEdGQlJHbENPMEZCUlhaQ05Fa3NhVUpCUVZOcVV5eEhRVUZIYTBRc1pVRkdWenRCUVVkMlFqSktMR1ZCUVU4c1pVRkJWWFpITEVsQlFWWXNSVUZCWjBKdFN5eHJRa0ZCYUVJc1JVRkJiME03UVVGRGRrTXNaMEpCUVVsclFpeGhRVUZoTTFJc1IwRkJSM1ZHTEVsQlFVZ3NRMEZCVVZNc1RVRkJVaXhEUVVGbGRrUXNTMEZCYUVNN1FVRkJRU3huUWtGQmRVTnRVQ3hoUVVGaE5WSXNSMEZCUjNWR0xFbEJRVWdzUTBGQlVWTXNUVUZCVWl4RFFVRmxkRVFzVFVGQmJrVTdRVUZCUVN4blFrRkRTVFpRTEZWQlFWVTVRaXh0UWtGQmJVSXZUaXhOUVVScVF6dEJRVUZCTEdkQ1FVTjVRMjlMTEZGQlFWRTRSU3hoUVVGaFZ5eFBRVVE1UkR0QlFVRkJMR2RDUVVWSlZpeFhRVUZYUml4VlFVWm1PMEZCUVVFc1owSkJSVEpDUnl4WFFVRlhSaXhWUVVaMFF6czdRVUZKUVN4dFFrRkJUeXhMUVVGTFJpeFpRVUZNTEVOQlFXdENReXhWUVVGc1FpeEZRVUU0UWtNc1ZVRkJPVUlzUlVGQk1FTkRMRkZCUVRGRExFVkJRVzlFUXl4UlFVRndSQ3hGUVVFNFJHaEdMRXRCUVRsRUxFVkJRWEZGUVN4TFFVRnlSU3hEUVVGUU8wRkJRMGc3UVVGVWMwSXNTMEZCVkN4RFFVRnNRanM3UVVGWlFTeFJRVUZKTWtjc1lVRkJZWHBVTEVkQlFVZDNVU3hMUVVGSUxFTkJRVk03UVVGRGRFSnVTQ3hqUVVGTkxGbEJSR2RDTzBGQlJYUkNORWtzYVVKQlFWTnFVeXhIUVVGSGEwUXNaVUZHVlR0QlFVZDBRakpLTEdWQlFVOHNaVUZCVlhaSExFbEJRVllzUlVGQlowSnRTeXhyUWtGQmFFSXNSVUZCYjBNN1FVRkRka01zWjBKQlFVbHJRaXhoUVVGaE0xSXNSMEZCUjNWR0xFbEJRVWdzUTBGQlVWTXNUVUZCVWl4RFFVRmxka1FzUzBGQmFFTTdRVUZCUVN4blFrRkJkVU50VUN4aFFVRmhOVklzUjBGQlIzVkdMRWxCUVVnc1EwRkJVVk1zVFVGQlVpeERRVUZsZEVRc1RVRkJia1U3UVVGQlFTeG5Ra0ZEU1RSUUxGVkJRVlUzUWl4dFFrRkJiVUpvVHl4TFFVUnFRenRCUVVGQkxHZENRVU4zUTNGTExGRkJRVkUyUlN4aFFVRmhWeXhQUVVRM1JEdEJRVUZCTEdkQ1FVVkpWQ3hYUVVGWFJpeFZRVVptTzBGQlFVRXNaMEpCUlRKQ1J5eFhRVUZYUml4VlFVWjBRenM3UVVGSlFTeHRRa0ZCVHl4TFFVRkxSaXhaUVVGTUxFTkJRV3RDUXl4VlFVRnNRaXhGUVVFNFFrTXNWVUZCT1VJc1JVRkJNRU5ETEZGQlFURkRMRVZCUVc5RVF5eFJRVUZ3UkN4RlFVRTRSR2hHTEV0QlFUbEVMRVZCUVhGRlFTeExRVUZ5UlN4RFFVRlFPMEZCUTBnN1FVRlVjVUlzUzBGQlZDeERRVUZxUWpzN1FVRlpTanRCUVVOSk9VMHNUMEZCUjJ0RUxHVkJRVWdzUTBGQmJVSTBRaXhUUVVGdVFpeEhRVUVyUWl4SlFVRkpkVThzVVVGQlNpeEZRVUV2UWp0QlFVTktPMEZCUTBseVZDeFBRVUZIYTBRc1pVRkJTQ3hEUVVGdFFqaENMRkZCUVc1Q0xFZEJRVGhDTEVsQlFVbHpUeXhQUVVGS0xFVkJRVGxDTzBGQlEwbzdRVUZEU1hSVUxFOUJRVWRyUkN4bFFVRklMRU5CUVcxQ1owTXNVMEZCYmtJc1IwRkJLMElzU1VGQlNYRlBMRkZCUVVvc1JVRkJMMEk3UVVGRFNqdEJRVU5KZGxRc1QwRkJSMnRFTEdWQlFVZ3NRMEZCYlVKclF5eFpRVUZ1UWl4SFFVRnJReXhKUVVGSmIwOHNWMEZCU2l4RlFVRnNRenRCUVVOS08wRkJRMGw0VkN4UFFVRkhhMFFzWlVGQlNDeERRVUZ0UW05RExGZEJRVzVDTEVkQlFXbERMRWxCUVVsdFR5eFZRVUZLTEVWQlFXcERPMEZCUlVnc1EwRjRUVVE3TzBGQk1FMUJPenM3T3pzN1FVRk5RVHM3T3pzN1FVRkxRWHBVTEVkQlFVYzBSU3huUWtGQlNDeEhRVUZ6UWpWRkxFZEJRVWQzVVN4TFFVRklMRU5CUVZNN1FVRkRNMEp1U0N4VlFVRk5MSEZDUVVSeFFqdEJRVVV6UWpzN096czdRVUZMUVcxSkxGVkJRVTBzWTBGQlZXdERMRmxCUVZZc1JVRkJkMEpETEZWQlFYaENMRVZCUVc5RE8wRkJRM1JETEdGQlFVdERMR3RDUVVGTUxFZEJRVEJDTEVsQlFURkNPMEZCUTBFc1lVRkJTME1zWjBKQlFVd3NSMEZCZDBJc1NVRkJlRUk3UVVGRFFTeGhRVUZMUXl4dlFrRkJUQ3hEUVVFd1Frb3NXVUZCTVVJN1FVRkRRU3hoUVVGTFN5eHJRa0ZCVEN4RFFVRjNRa29zVlVGQmVFSTdRVUZEU0N4TFFWb3dRanM3UVVGak0wSTdPenM3T3p0QlFVMUJhRWdzWTBGQlZTeHJRa0ZCVlhKSExFbEJRVllzUlVGQlowSTdRVUZEZEVJc1lVRkJTM05PTEd0Q1FVRk1MRU5CUVhkQ2FrZ3NVVUZCZUVJc1EwRkJhVU55Unl4SlFVRnFRenRCUVVOQkxHRkJRVXQxVGl4blFrRkJUQ3hEUVVGelFteElMRkZCUVhSQ0xFTkJRU3RDY2tjc1NVRkJMMEk3UVVGRFNDeExRWFpDTUVJN08wRkJlVUl6UWpzN096czdPenM3T3p0QlFWVkJkVWNzVjBGQlR5eGxRVUZWZGtjc1NVRkJWaXhGUVVGblFtMUxMR3RDUVVGb1FpeEZRVUZ2UXp0QlFVTjJReXhoUVVGTGJVUXNhMEpCUVV3c1EwRkJkMEl2Unl4TFFVRjRRaXhEUVVFNFFuWkhMRWxCUVRsQ0xFVkJRVzlEYlVzc2EwSkJRWEJETzBGQlEwRXNaVUZCVHl4TFFVRkxiMFFzWjBKQlFVd3NRMEZCYzBKb1NDeExRVUYwUWl4RFFVRTBRblpITEVsQlFUVkNMRVZCUVd0RGJVc3NhMEpCUVd4RExFTkJRVkE3UVVGRFNDeExRWFJETUVJN08wRkJkME16UWpzN096czdPMEZCVFVGMFJDeGxRVUZYTEcxQ1FVRlZOMGNzU1VGQlZpeEZRVUZuUWp0QlFVTjJRaXhoUVVGTGMwNHNhMEpCUVV3c1EwRkJkMEo2Unl4VFFVRjRRaXhEUVVGclF6ZEhMRWxCUVd4RE8wRkJRMEVzWVVGQlMzVk9MR2RDUVVGTUxFTkJRWE5DTVVjc1UwRkJkRUlzUTBGQlowTTNSeXhKUVVGb1F6dEJRVU5JTEV0QmFrUXdRanM3UVVGdFJETkNPenM3T3pzN08wRkJUMEYzVGl3d1FrRkJjMElzT0VKQlFWVktMRmxCUVZZc1JVRkJkMEk3UVVGRE1VTXNXVUZCU1VFc2QwSkJRWGRDTVZRc1IwRkJSMmRFTEdsQ1FVRXZRaXhGUVVOSkxFdEJRVXMwVVN4clFrRkJUQ3hIUVVFd1FrWXNXVUZCTVVJN1FVRkRVQ3hMUVRkRU1FSTdPMEZCSzBRelFqczdPenM3T3p0QlFVOUJTeXgzUWtGQmIwSXNORUpCUVZWS0xGVkJRVllzUlVGQmMwSTdRVUZEZEVNc1dVRkJTVUVzYzBKQlFYTkNNMVFzUjBGQlIydEVMR1ZCUVRkQ0xFVkJRMGtzUzBGQlN6SlJMR2RDUVVGTUxFZEJRWGRDUml4VlFVRjRRanRCUVVOUU8wRkJla1V3UWl4RFFVRlVMRU5CUVhSQ096dEJRVFJGUVRsVUxFZEJRVWR0VlN4SFFVRklMRU5CUVU5b1ZTeEhRVUZITkVVc1owSkJRVWdzUTBGQmIwSm5RaXhUUVVFelFpeEZRVUZ6UXl4WlFVRjBReXhGUVVGdlJDeFpRVUZaTzBGQlF6VkVMRmRCUVU4MVJpeEhRVUZIYVUwc1JVRkJTQ3hEUVVGTmFrMHNSMEZCUjNWR0xFbEJRVWdzUTBGQlVWTXNUVUZCVWl4RFFVRmxka1FzUzBGQmNrSXNSVUZCTkVKNlF5eEhRVUZIZFVZc1NVRkJTQ3hEUVVGUlV5eE5RVUZTTEVOQlFXVjBSQ3hOUVVFelF5eERRVUZRTzBGQlEwZ3NRMEZHUkRzN1FVRkpRVHM3T3pzN096dEJRVTlCTVVNc1IwRkJSelJGTEdkQ1FVRklMRU5CUVc5Q1JTeFRRVUZ3UWl4SFFVRm5ReXhEUVVGb1F6czdRVUZGUVRzN096czdPenRCUVU5Qk9VVXNSMEZCUnpSRkxHZENRVUZJTEVOQlFXOUNUU3hUUVVGd1FpeEhRVUZuUXl4RFFVRm9RenM3UVVGRlFUczdPenM3T3p0QlFVOUJiRVlzUjBGQlJ6UkZMR2RDUVVGSUxFTkJRVzlDU1N4UlFVRndRaXhIUVVFclFpeERRVUV2UWpzN1FVRkZRVHM3T3pzN096czdPMEZCVTBGb1JpeEhRVUZITkVVc1owSkJRVWdzUTBGQmIwSlJMRmxCUVhCQ0xFZEJRVzFETEVOQlFXNURPenRCUVVWQk96czdPenM3T3pzN1FVRlRRWEJHTEVkQlFVYzBSU3huUWtGQlNDeERRVUZ2UWxVc1YwRkJjRUlzUjBGQmEwTXNRMEZCYkVNN08wRkJSVUU3T3pzN096dEJRVTFCZEVZc1IwRkJSelJGTEdkQ1FVRklMRU5CUVc5Q2NWQXNUMEZCY0VJc1IwRkJPRUlzUTBGQk9VSTdPMEZCUlVFN096czdRVUZKUVRzN096czdPenRCUVU5QmFsVXNSMEZCUjNOSExFbEJRVWdzUjBGQlZTeEpRVUZKTVVRc1NVRkJTaXhGUVVGV096dEJRVVZCT3pzN096czdRVUZOUVRWRExFZEJRVWRyUnl4UFFVRklMRWRCUVdGc1J5eEhRVUZIYVUwc1JVRkJTQ3hGUVVGaU96dEJRVVZCYVVrc1QwRkJUME1zVDBGQlVDeEhRVUZwUW01VkxFZEJRVWR6Unl4SlFVRndRaUlzSW1acGJHVWlPaUpEUTFacFpYY3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF3T0MweU1ERXdJRkpwWTJGeVpHOGdVWFZsYzJGa1lWeHVJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhNUzB5TURFeUlHTnZZMjl6TW1RdGVDNXZjbWRjYmlCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRNdE1qQXhOaUJEYUhWcmIyNW5JRlJsWTJodWIyeHZaMmxsY3lCSmJtTXVYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREUzTFRJd01UZ2dXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1WEc1Y2JpQm9kSFJ3T2k4dmQzZDNMbU52WTI5ek1tUXRlQzV2Y21kY2JseHVJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhJR052Y0hsY2JpQnZaaUIwYUdseklITnZablIzWVhKbElHRnVaQ0JoYzNOdlkybGhkR1ZrSUdSdlkzVnRaVzUwWVhScGIyNGdabWxzWlhNZ0tIUm9aU0JjSWxOdlpuUjNZWEpsWENJcExDQjBieUJrWldGc1hHNGdhVzRnZEdobElGTnZablIzWVhKbElIZHBkR2h2ZFhRZ2NtVnpkSEpwWTNScGIyNHNJR2x1WTJ4MVpHbHVaeUIzYVhSb2IzVjBJR3hwYldsMFlYUnBiMjRnZEdobElISnBaMmgwYzF4dUlIUnZJSFZ6WlN3Z1kyOXdlU3dnYlc5a2FXWjVMQ0J0WlhKblpTd2djSFZpYkdsemFDd2daR2x6ZEhKcFluVjBaU3dnYzNWaWJHbGpaVzV6WlN3Z1lXNWtMMjl5SUhObGJHeGNiaUJqYjNCcFpYTWdiMllnZEdobElGTnZablIzWVhKbExDQmhibVFnZEc4Z2NHVnliV2wwSUhCbGNuTnZibk1nZEc4Z2QyaHZiU0IwYUdVZ1UyOW1kSGRoY21VZ2FYTmNiaUJtZFhKdWFYTm9aV1FnZEc4Z1pHOGdjMjhzSUhOMVltcGxZM1FnZEc4Z2RHaGxJR1p2Ykd4dmQybHVaeUJqYjI1a2FYUnBiMjV6T2x4dVhHNGdWR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kQ0J1YjNScFkyVWdZVzVrSUhSb2FYTWdjR1Z5YldsemMybHZiaUJ1YjNScFkyVWdjMmhoYkd3Z1ltVWdhVzVqYkhWa1pXUWdhVzVjYmlCaGJHd2dZMjl3YVdWeklHOXlJSE4xWW5OMFlXNTBhV0ZzSUhCdmNuUnBiMjV6SUc5bUlIUm9aU0JUYjJaMGQyRnlaUzVjYmx4dUlGUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkZrZ1QwWWdRVTVaSUV0SlRrUXNJRVZZVUZKRlUxTWdUMUpjYmlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R0lFMUZVa05JUVU1VVFVSkpURWxVV1N4Y2JpQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUaUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVZjYmlCQlZWUklUMUpUSUU5U0lFTlBVRmxTU1VkSVZDQklUMHhFUlZKVElFSkZJRXhKUVVKTVJTQkdUMUlnUVU1WklFTk1RVWxOTENCRVFVMUJSMFZUSUU5U0lFOVVTRVZTWEc0Z1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3hjYmlCUFZWUWdUMFlnVDFJZ1NVNGdRMDlPVGtWRFZFbFBUaUJYU1ZSSUlGUklSU0JUVDBaVVYwRlNSU0JQVWlCVVNFVWdWVk5GSUU5U0lFOVVTRVZTSUVSRlFVeEpUa2RUSUVsT1hHNGdWRWhGSUZOUFJsUlhRVkpGTGx4dUlDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1Y2JtTnZibk4wSUVWMlpXNTBWR0Z5WjJWMElEMGdjbVZ4ZFdseVpTZ25MaTR2WlhabGJuUXZaWFpsYm5RdGRHRnlaMlYwSnlrN1hHNWpiMjV6ZENCcWN5QTlJSEpsY1hWcGNtVW9KeTR1TDNCc1lYUm1iM0p0TDJwekp5azdYRzVqYjI1emRDQnlaVzVrWlhKbGNpQTlJSEpsY1hWcGNtVW9KeTR1TDNKbGJtUmxjbVZ5SnlrN1hHNXlaWEYxYVhKbEtDY3VMaTl3YkdGMFptOXliUzlEUTBOc1lYTnpKeWs3WEc1Y2JpOHZJRlJQUkU4NklHMXZkbVVnYVc1MGJ5QmhaR0Z3ZEdWeVhHNWpiMjV6ZENCcGMxaHBZVzl0YVVkaGJXVWdQU0FvWTJNdWMzbHpMbkJzWVhSbWIzSnRJRDA5UFNCall5NXplWE11V0VsQlQwMUpYMGRCVFVVcE8xeHVZMjl1YzNRZ2FYTkNZV2xrZFVkaGJXVWdQU0FvWTJNdWMzbHpMbkJzWVhSbWIzSnRJRDA5UFNCall5NXplWE11UWtGSlJGVmZSMEZOUlNrN1hHNWpiMjV6ZENCcGMwRnNhWEJoZVVkaGJXVWdQU0FvWTJNdWMzbHpMbkJzWVhSbWIzSnRJRDA5UFNCall5NXplWE11UVV4SlVFRlpYMGRCVFVVcE8xeHVYRzUyWVhJZ1gxOUNjbTkzYzJWeVIyVjBkR1Z5SUQwZ2UxeHVJQ0FnSUdsdWFYUTZJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUM4dklFNVBWRVU2SUc1dmRDQnRaWEpuWlNCcGJuUnZJSFl5TGpJdU1Dd2diVzkyWlNCcGJuUnZJRUZzYVhCaGVTQmhaR0Z3ZEdWeVhHNGdJQ0FnSUNBZ0lHbG1JQ2doUTBOZlYwVkRTRUZVUjBGTlJTQW1KaUFoUTBOZlVWRlFURUZaSUNZbUlDRnBjMEpoYVdSMVIyRnRaU0FtSmlBaGFYTllhV0Z2YldsSFlXMWxJQ1ltSUNGcGMwRnNhWEJoZVVkaGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YUhSdGJDQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJ6UW5sVVlXZE9ZVzFsS0Z3aWFIUnRiRndpS1Zzd1hUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzRnSUNBZ1lYWmhhV3hYYVdSMGFEb2dablZ1WTNScGIyNG9abkpoYldVcGUxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdaeVlXMWxJSHg4SUdaeVlXMWxJRDA5UFNCMGFHbHpMbWgwYld3cFhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkMmx1Wkc5M0xtbHVibVZ5VjJsa2RHZzdYRzRnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1jbUZ0WlM1amJHbGxiblJYYVdSMGFEdGNiaUFnSUNCOUxGeHVJQ0FnSUdGMllXbHNTR1ZwWjJoME9pQm1kVzVqZEdsdmJpaG1jbUZ0WlNsN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWm5KaGJXVWdmSHdnWm5KaGJXVWdQVDA5SUhSb2FYTXVhSFJ0YkNsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjNhVzVrYjNjdWFXNXVaWEpJWldsbmFIUTdYRzRnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1jbUZ0WlM1amJHbGxiblJJWldsbmFIUTdYRzRnSUNBZ2ZTeGNiaUFnSUNCdFpYUmhPaUI3WEc0Z0lDQWdJQ0FnSUZ3aWQybGtkR2hjSWpvZ1hDSmtaWFpwWTJVdGQybGtkR2hjSWx4dUlDQWdJSDBzWEc0Z0lDQWdZV1JoY0hSaGRHbHZibFI1Y0dVNklHTmpMbk41Y3k1aWNtOTNjMlZ5Vkhsd1pWeHVmVHRjYmx4dWFXWWdLR05qTG5ONWN5NXZjeUE5UFQwZ1kyTXVjM2x6TGs5VFgwbFBVeWtnTHk4Z1FXeHNJR0p5YjNkelpYSnpJR0Z5WlNCWFpXSldhV1YzWEc0Z0lDQWdYMTlDY205M2MyVnlSMlYwZEdWeUxtRmtZWEIwWVhScGIyNVVlWEJsSUQwZ1kyTXVjM2x6TGtKU1QxZFRSVkpmVkZsUVJWOVRRVVpCVWtrN1hHNWNibWxtSUNocGMwSmhhV1IxUjJGdFpTa2dlMXh1SUNBZ0lHbG1JQ2hqWXk1emVYTXVZbkp2ZDNObGNsUjVjR1VnUFQwOUlHTmpMbk41Y3k1Q1VrOVhVMFZTWDFSWlVFVmZRa0ZKUkZWZlIwRk5SVjlUVlVJcElIdGNiaUFnSUNBZ0lDQWdYMTlDY205M2MyVnlSMlYwZEdWeUxtRmtZWEIwWVhScGIyNVVlWEJsSUQwZ1kyTXVjM2x6TGtKU1QxZFRSVkpmVkZsUVJWOUNRVWxFVlY5SFFVMUZYMU5WUWp0Y2JpQWdJQ0I5WEc0Z0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lGOWZRbkp2ZDNObGNrZGxkSFJsY2k1aFpHRndkR0YwYVc5dVZIbHdaU0E5SUdOakxuTjVjeTVDVWs5WFUwVlNYMVJaVUVWZlFrRkpSRlZmUjBGTlJUdGNiaUFnSUNCOVhHNTlYRzVjYm1sbUlDaHBjMWhwWVc5dGFVZGhiV1VwSUh0Y2JpQWdJQ0JmWDBKeWIzZHpaWEpIWlhSMFpYSXVZV1JoY0hSaGRHbHZibFI1Y0dVZ1BTQmpZeTV6ZVhNdVFsSlBWMU5GVWw5VVdWQkZYMWhKUVU5TlNWOUhRVTFGTzF4dWZWeHVYRzR2THlCT1QxUkZPaUJ1YjNRZ2JXVnlaMlVnYVc1MGJ5QjJNaTR5TGpBc0lHMXZkbVVnYVc1MGJ5QkJiR2x3WVhrZ1lXUmhjSFJsY2x4dWFXWWdLR2x6UVd4cGNHRjVSMkZ0WlNrZ2UxeHVJQ0FnSUY5ZlFuSnZkM05sY2tkbGRIUmxjaTVoWkdGd2RHRjBhVzl1Vkhsd1pTQTlJR05qTG5ONWN5NUNVazlYVTBWU1gxUlpVRVZmUVV4SlVFRlpYMGRCVFVVN1hHNTlYRzVjYm1sbUlDaERRMTlYUlVOSVFWUkhRVTFGS1NCN1hHNGdJQ0FnYVdZZ0tHTmpMbk41Y3k1aWNtOTNjMlZ5Vkhsd1pTQTlQVDBnWTJNdWMzbHpMa0pTVDFkVFJWSmZWRmxRUlY5WFJVTklRVlJmUjBGTlJWOVRWVUlwSUh0Y2JpQWdJQ0FnSUNBZ1gxOUNjbTkzYzJWeVIyVjBkR1Z5TG1Ga1lYQjBZWFJwYjI1VWVYQmxJRDBnWTJNdWMzbHpMa0pTVDFkVFJWSmZWRmxRUlY5WFJVTklRVlJmUjBGTlJWOVRWVUk3WEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCZlgwSnliM2R6WlhKSFpYUjBaWEl1WVdSaGNIUmhkR2x2YmxSNWNHVWdQU0JqWXk1emVYTXVRbEpQVjFORlVsOVVXVkJGWDFkRlEwaEJWRjlIUVUxRk8xeHVJQ0FnSUgxY2JuMWNibHh1YVdZZ0tFTkRYMUZSVUV4QldTa2dlMXh1SUNBZ0lGOWZRbkp2ZDNObGNrZGxkSFJsY2k1aFpHRndkR0YwYVc5dVZIbHdaU0E5SUdOakxuTjVjeTVDVWs5WFUwVlNYMVJaVUVWZlVWRmZVRXhCV1R0Y2JuMWNibHh1YzNkcGRHTm9JQ2hmWDBKeWIzZHpaWEpIWlhSMFpYSXVZV1JoY0hSaGRHbHZibFI1Y0dVcElIdGNiaUFnSUNCallYTmxJR05qTG5ONWN5NUNVazlYVTBWU1gxUlpVRVZmVTBGR1FWSkpPbHh1SUNBZ0lDQWdJQ0JmWDBKeWIzZHpaWEpIWlhSMFpYSXViV1YwWVZ0Y0ltMXBibWx0WVd3dGRXbGNJbDBnUFNCY0luUnlkV1ZjSWp0Y2JpQWdJQ0JqWVhObElHTmpMbk41Y3k1Q1VrOVhVMFZTWDFSWlVFVmZVMDlWUjA5Vk9seHVJQ0FnSUdOaGMyVWdZMk11YzNsekxrSlNUMWRUUlZKZlZGbFFSVjlWUXpwY2JpQWdJQ0FnSUNBZ1gxOUNjbTkzYzJWeVIyVjBkR1Z5TG1GMllXbHNWMmxrZEdnZ1BTQm1kVzVqZEdsdmJpaG1jbUZ0WlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabkpoYldVdVkyeHBaVzUwVjJsa2RHZzdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUY5ZlFuSnZkM05sY2tkbGRIUmxjaTVoZG1GcGJFaGxhV2RvZENBOUlHWjFibU4wYVc5dUtHWnlZVzFsS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1jbUZ0WlM1amJHbGxiblJJWldsbmFIUTdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHTmhjMlVnWTJNdWMzbHpMa0pTVDFkVFJWSmZWRmxRUlY5WFJVTklRVlJmUjBGTlJUcGNiaUFnSUNBZ0lDQWdYMTlDY205M2MyVnlSMlYwZEdWeUxtRjJZV2xzVjJsa2RHZ2dQU0JtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIZHBibVJ2ZHk1cGJtNWxjbGRwWkhSb08xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0JmWDBKeWIzZHpaWEpIWlhSMFpYSXVZWFpoYVd4SVpXbG5hSFFnUFNCbWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSGRwYm1SdmR5NXBibTVsY2tobGFXZG9kRHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdZMkZ6WlNCall5NXplWE11UWxKUFYxTkZVbDlVV1ZCRlgxZEZRMGhCVkY5SFFVMUZYMU5WUWpwY2JpQWdJQ0FnSUNBZ2RtRnlJSE5vWVhKbFpFTmhiblpoY3lBOUlIZHBibVJ2ZHk1emFHRnlaV1JEWVc1MllYTWdmSHdnZDNndVoyVjBVMmhoY21Wa1EyRnVkbUZ6S0NrN1hHNGdJQ0FnSUNBZ0lGOWZRbkp2ZDNObGNrZGxkSFJsY2k1aGRtRnBiRmRwWkhSb0lEMGdablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemFHRnlaV1JEWVc1MllYTXVkMmxrZEdnN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJRjlmUW5KdmQzTmxja2RsZEhSbGNpNWhkbUZwYkVobGFXZG9kQ0E5SUdaMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMmhoY21Wa1EyRnVkbUZ6TG1obGFXZG9kRHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc1OVhHNWNiblpoY2lCZmMyTnBjM052Y2xKbFkzUWdQU0J1ZFd4c08xeHVYRzR2S2lwY2JpQXFJR05qTG5acFpYY2dhWE1nZEdobElITnBibWRzWlhSdmJpQnZZbXBsWTNRZ2QyaHBZMmdnY21Wd2NtVnpaVzUwY3lCMGFHVWdaMkZ0WlNCM2FXNWtiM2N1UEdKeUx6NWNiaUFxSUVsMEozTWdiV0ZwYmlCMFlYTnJJR2x1WTJ4MVpHVTZJRHhpY2k4K1hHNGdLaUFnTFNCQmNIQnNlU0IwYUdVZ1pHVnphV2R1SUhKbGMyOXNkWFJwYjI0Z2NHOXNhV041UEdKeUx6NWNiaUFxSUNBdElGQnliM1pwWkdVZ2FXNTBaWEpoWTNScGIyNGdkMmwwYUNCMGFHVWdkMmx1Wkc5M0xDQnNhV3RsSUhKbGMybDZaU0JsZG1WdWRDQnZiaUIzWldJc0lISmxkR2x1WVNCa2FYTndiR0Y1SUhOMWNIQnZjblFzSUdWMFl5NHVManhpY2k4K1hHNGdLaUFnTFNCTllXNWhaMlVnZEdobElHZGhiV1VnZG1sbGR5QndiM0owSUhkb2FXTm9JR05oYmlCaVpTQmthV1ptWlhKbGJuUWdkMmwwYUNCMGFHVWdkMmx1Wkc5M1BHSnlMejVjYmlBcUlDQXRJRTFoYm1GblpTQjBhR1VnWTI5dWRHVnVkQ0J6WTJGc1pTQmhibVFnZEhKaGJuTnNZWFJwYjI0OFluSXZQbHh1SUNvZ1BHSnlMejVjYmlBcUlGTnBibU5sSUhSb1pTQmpZeTUyYVdWM0lHbHpJR0VnYzJsdVoyeGxkRzl1TENCNWIzVWdaRzl1SjNRZ2JtVmxaQ0IwYnlCallXeHNJR0Z1ZVNCamIyNXpkSEoxWTNSdmNpQnZjaUJqY21WaGRHVWdablZ1WTNScGIyNXpMRHhpY2k4K1hHNGdLaUIwYUdVZ2MzUmhibVJoY21RZ2QyRjVJSFJ2SUhWelpTQnBkQ0JwY3lCaWVTQmpZV3hzYVc1bk9qeGljaTgrWEc0Z0tpQWdMU0JqWXk1MmFXVjNMbTFsZEdodlpFNWhiV1VvS1RzZ1BHSnlMejVjYmlBcVhHNGdLaUJBWTJ4aGMzTWdWbWxsZDF4dUlDb2dRR1Y0ZEdWdVpITWdSWFpsYm5SVVlYSm5aWFJjYmlBcUwxeHVkbUZ5SUZacFpYY2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnUlhabGJuUlVZWEpuWlhRdVkyRnNiQ2gwYUdsektUdGNibHh1SUNBZ0lIWmhjaUJmZENBOUlIUm9hWE1zSUY5emRISmhkR1ZuZVdWeUlEMGdZMk11UTI5dWRHRnBibVZ5VTNSeVlYUmxaM2tzSUY5emRISmhkR1ZuZVNBOUlHTmpMa052Ym5SbGJuUlRkSEpoZEdWbmVUdGNibHh1SUNBZ0lGOWZRbkp2ZDNObGNrZGxkSFJsY2k1cGJtbDBLSFJvYVhNcE8xeHVYRzRnSUNBZ0x5OGdVMmw2WlNCdlppQndZWEpsYm5RZ2JtOWtaU0IwYUdGMElHTnZiblJoYVc1eklHTmpMbWRoYldVdVkyOXVkR0ZwYm1WeUlHRnVaQ0JqWXk1bllXMWxMbU5oYm5aaGMxeHVJQ0FnSUY5MExsOW1jbUZ0WlZOcGVtVWdQU0JqWXk1emFYcGxLREFzSURBcE8xeHVYRzRnSUNBZ0x5OGdjbVZ6YjJ4MWRHbHZiaUJ6YVhwbExDQnBkQ0JwY3lCMGFHVWdjMmw2WlNCaGNIQnliM0J5YVdGMFpTQm1iM0lnZEdobElHRndjQ0J5WlhOdmRYSmpaWE11WEc0Z0lDQWdYM1F1WDJSbGMybG5ibEpsYzI5c2RYUnBiMjVUYVhwbElEMGdZMk11YzJsNlpTZ3dMQ0F3S1R0Y2JpQWdJQ0JmZEM1ZmIzSnBaMmx1WVd4RVpYTnBaMjVTWlhOdmJIVjBhVzl1VTJsNlpTQTlJR05qTG5OcGVtVW9NQ3dnTUNrN1hHNGdJQ0FnWDNRdVgzTmpZV3hsV0NBOUlERTdYRzRnSUNBZ1gzUXVYM05qWVd4bFdTQTlJREU3WEc0Z0lDQWdMeThnVm1sbGQzQnZjblFnYVhNZ2RHaGxJR052Ym5SaGFXNWxjaWR6SUhKbFkzUWdjbVZzWVhSbFpDQjBieUJqYjI1MFpXNTBKM01nWTI5dmNtUnBibUYwWlhNZ2FXNGdjR2w0Wld4Y2JpQWdJQ0JmZEM1ZmRtbGxkM0J2Y25SU1pXTjBJRDBnWTJNdWNtVmpkQ2d3TENBd0xDQXdMQ0F3S1R0Y2JpQWdJQ0F2THlCVWFHVWdkbWx6YVdKc1pTQnlaV04wSUdsdUlHTnZiblJsYm5RbmN5QmpiMjl5WkdsdVlYUmxJR2x1SUhCdmFXNTBYRzRnSUNBZ1gzUXVYM1pwYzJsaWJHVlNaV04wSUQwZ1kyTXVjbVZqZENnd0xDQXdMQ0F3TENBd0tUdGNiaUFnSUNBdkx5QkJkWFJ2SUdaMWJHd2djMk55WldWdUlHUnBjMkZpYkdWa0lHSjVJR1JsWm1GMWJIUmNiaUFnSUNCZmRDNWZZWFYwYjBaMWJHeFRZM0psWlc0Z1BTQm1ZV3h6WlR0Y2JpQWdJQ0F2THlCVWFHVWdaR1YyYVdObEozTWdjR2w0Wld3Z2NtRjBhVzhnS0dadmNpQnlaWFJwYm1FZ1pHbHpjR3hoZVhNcFhHNGdJQ0FnWDNRdVgyUmxkbWxqWlZCcGVHVnNVbUYwYVc4Z1BTQXhPMXh1SUNBZ0lGOTBMbDl0WVhoUWFYaGxiRkpoZEdsdklEMGdNanRjYmlBZ0lDQXZMeUJTWlhScGJtRWdaR2x6WVdKc1pXUWdZbmtnWkdWbVlYVnNkRnh1SUNBZ0lGOTBMbDl5WlhScGJtRkZibUZpYkdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnTHk4Z1EzVnpkRzl0SUdOaGJHeGlZV05ySUdadmNpQnlaWE5wZW1VZ1pYWmxiblJjYmlBZ0lDQmZkQzVmY21WemFYcGxRMkZzYkdKaFkyc2dQU0J1ZFd4c08xeHVJQ0FnSUY5MExsOXlaWE5wZW1sdVp5QTlJR1poYkhObE8xeHVJQ0FnSUY5MExsOXlaWE5wZW1WWGFYUm9Rbkp2ZDNObGNsTnBlbVVnUFNCbVlXeHpaVHRjYmlBZ0lDQmZkQzVmYjNKcFpXNTBZWFJwYjI1RGFHRnVaMmx1WnlBOUlIUnlkV1U3WEc0Z0lDQWdYM1F1WDJselVtOTBZWFJsWkNBOUlHWmhiSE5sTzF4dUlDQWdJRjkwTGw5dmNtbGxiblJoZEdsdmJpQTlJR05qTG0xaFkzSnZMazlTU1VWT1ZFRlVTVTlPWDBGVlZFODdYRzRnSUNBZ1gzUXVYMmx6UVdScWRYTjBWbWxsZDNCdmNuUWdQU0IwY25WbE8xeHVJQ0FnSUY5MExsOWhiblJwUVd4cFlYTkZibUZpYkdWa0lEMGdabUZzYzJVN1hHNWNiaUFnSUNBdkx5QlRaWFIxY0NCemVYTjBaVzBnWkdWbVlYVnNkQ0J5WlhOdmJIVjBhVzl1SUhCdmJHbGphV1Z6WEc0Z0lDQWdYM1F1WDNKbGMyOXNkWFJwYjI1UWIyeHBZM2tnUFNCdWRXeHNPMXh1SUNBZ0lGOTBMbDl5Y0VWNFlXTjBSbWwwSUQwZ2JtVjNJR05qTGxKbGMyOXNkWFJwYjI1UWIyeHBZM2tvWDNOMGNtRjBaV2Q1WlhJdVJWRlZRVXhmVkU5ZlJsSkJUVVVzSUY5emRISmhkR1ZuZVM1RldFRkRWRjlHU1ZRcE8xeHVJQ0FnSUY5MExsOXljRk5vYjNkQmJHd2dQU0J1WlhjZ1kyTXVVbVZ6YjJ4MWRHbHZibEJ2YkdsamVTaGZjM1J5WVhSbFozbGxjaTVGVVZWQlRGOVVUMTlHVWtGTlJTd2dYM04wY21GMFpXZDVMbE5JVDFkZlFVeE1LVHRjYmlBZ0lDQmZkQzVmY25CT2IwSnZjbVJsY2lBOUlHNWxkeUJqWXk1U1pYTnZiSFYwYVc5dVVHOXNhV041S0Y5emRISmhkR1ZuZVdWeUxrVlJWVUZNWDFSUFgwWlNRVTFGTENCZmMzUnlZWFJsWjNrdVRrOWZRazlTUkVWU0tUdGNiaUFnSUNCZmRDNWZjbkJHYVhobFpFaGxhV2RvZENBOUlHNWxkeUJqWXk1U1pYTnZiSFYwYVc5dVVHOXNhV041S0Y5emRISmhkR1ZuZVdWeUxrVlJWVUZNWDFSUFgwWlNRVTFGTENCZmMzUnlZWFJsWjNrdVJrbFlSVVJmU0VWSlIwaFVLVHRjYmlBZ0lDQmZkQzVmY25CR2FYaGxaRmRwWkhSb0lEMGdibVYzSUdOakxsSmxjMjlzZFhScGIyNVFiMnhwWTNrb1gzTjBjbUYwWldkNVpYSXVSVkZWUVV4ZlZFOWZSbEpCVFVVc0lGOXpkSEpoZEdWbmVTNUdTVmhGUkY5WFNVUlVTQ2s3WEc1Y2JpQWdJQ0JqWXk1bllXMWxMbTl1WTJVb1kyTXVaMkZ0WlM1RlZrVk9WRjlGVGtkSlRrVmZTVTVKVkVWRUxDQjBhR2x6TG1sdWFYUXNJSFJvYVhNcE8xeHVmVHRjYmx4dVkyTXVhbk11WlhoMFpXNWtLRlpwWlhjc0lFVjJaVzUwVkdGeVoyVjBLVHRjYmx4dVhHNWpZeTVxY3k1dGFYaHBiaWhXYVdWM0xuQnliM1J2ZEhsd1pTd2dlMXh1SUNBZ0lHbHVhWFFnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cGJtbDBSbkpoYldWVGFYcGxLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaVzVoWW14bFFXNTBhVUZzYVdGektIUnlkV1VwTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUIzSUQwZ1kyTXVaMkZ0WlM1allXNTJZWE11ZDJsa2RHZ3NJR2dnUFNCall5NW5ZVzFsTG1OaGJuWmhjeTVvWldsbmFIUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUmxjMmxuYmxKbGMyOXNkWFJwYjI1VGFYcGxMbmRwWkhSb0lEMGdkenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaR1Z6YVdkdVVtVnpiMngxZEdsdmJsTnBlbVV1YUdWcFoyaDBJRDBnYUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYjNKcFoybHVZV3hFWlhOcFoyNVNaWE52YkhWMGFXOXVVMmw2WlM1M2FXUjBhQ0E5SUhjN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDI5eWFXZHBibUZzUkdWemFXZHVVbVZ6YjJ4MWRHbHZibE5wZW1VdWFHVnBaMmgwSUQwZ2FEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRtbGxkM0J2Y25SU1pXTjBMbmRwWkhSb0lEMGdkenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkbWxsZDNCdmNuUlNaV04wTG1obGFXZG9kQ0E5SUdnN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNacGMybGliR1ZTWldOMExuZHBaSFJvSUQwZ2R6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRtbHphV0pzWlZKbFkzUXVhR1ZwWjJoMElEMGdhRHRjYmx4dUlDQWdJQ0FnSUNCall5NTNhVzVUYVhwbExuZHBaSFJvSUQwZ2RHaHBjeTVmZG1semFXSnNaVkpsWTNRdWQybGtkR2c3WEc0Z0lDQWdJQ0FnSUdOakxuZHBibE5wZW1VdWFHVnBaMmgwSUQwZ2RHaHBjeTVmZG1semFXSnNaVkpsWTNRdWFHVnBaMmgwTzF4dUlDQWdJQ0FnSUNCall5NTJhWE5wWW14bFVtVmpkQ0FtSmlCall5NTJhWE5wWW14bFVtVmpkQzVwYm1sMEtIUm9hWE11WDNacGMybGliR1ZTWldOMEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5OGdVbVZ6YVhwbElHaGxiSEJsY2lCbWRXNWpkR2x2Ym5OY2JpQWdJQ0JmY21WemFYcGxSWFpsYm5RNklHWjFibU4wYVc5dUlDaG1iM0pqWlU5eVJYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpwWlhjN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuTmxkRVJsYzJsbmJsSmxjMjlzZFhScGIyNVRhWHBsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyYVdWM0lEMGdkR2hwY3p0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpwWlhjZ1BTQmpZeTUyYVdWM08xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1EyaGxZMnNnWm5KaGJXVWdjMmw2WlNCamFHRnVaMlZrSUc5eUlHNXZkRnh1SUNBZ0lDQWdJQ0IyWVhJZ2NISmxka1p5WVcxbFZ5QTlJSFpwWlhjdVgyWnlZVzFsVTJsNlpTNTNhV1IwYUN3Z2NISmxka1p5WVcxbFNDQTlJSFpwWlhjdVgyWnlZVzFsVTJsNlpTNW9aV2xuYUhRc0lIQnlaWFpTYjNSaGRHVmtJRDBnZG1sbGR5NWZhWE5TYjNSaGRHVmtPMXh1SUNBZ0lDQWdJQ0JwWmlBb1kyTXVjM2x6TG1selRXOWlhV3hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyOXVkR0ZwYm1WeVUzUjViR1VnUFNCall5NW5ZVzFsTG1OdmJuUmhhVzVsY2k1emRIbHNaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhKbmFXNGdQU0JqYjI1MFlXbHVaWEpUZEhsc1pTNXRZWEpuYVc0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEpUZEhsc1pTNXRZWEpuYVc0Z1BTQW5NQ2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwWVdsdVpYSlRkSGxzWlM1a2FYTndiR0Y1SUQwZ0oyNXZibVVuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbWxsZHk1ZmFXNXBkRVp5WVcxbFUybDZaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdGcGJtVnlVM1I1YkdVdWJXRnlaMmx1SUQwZ2JXRnlaMmx1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdGcGJtVnlVM1I1YkdVdVpHbHpjR3hoZVNBOUlDZGliRzlqYXljN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyYVdWM0xsOXBibWwwUm5KaGJXVlRhWHBsS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0dadmNtTmxUM0pGZG1WdWRDQWhQVDBnZEhKMVpTQW1KaUIyYVdWM0xsOXBjMUp2ZEdGMFpXUWdQVDA5SUhCeVpYWlNiM1JoZEdWa0lDWW1JSFpwWlhjdVgyWnlZVzFsVTJsNlpTNTNhV1IwYUNBOVBUMGdjSEpsZGtaeVlXMWxWeUFtSmlCMmFXVjNMbDltY21GdFpWTnBlbVV1YUdWcFoyaDBJRDA5UFNCd2NtVjJSbkpoYldWSUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFWnlZVzFsSUhOcGVtVWdZMmhoYm1kbFpDd2daRzhnY21WemFYcGxJSGR2Y210elhHNGdJQ0FnSUNBZ0lIWmhjaUIzYVdSMGFDQTlJSFpwWlhjdVgyOXlhV2RwYm1Gc1JHVnphV2R1VW1WemIyeDFkR2x2YmxOcGVtVXVkMmxrZEdnN1hHNGdJQ0FnSUNBZ0lIWmhjaUJvWldsbmFIUWdQU0IyYVdWM0xsOXZjbWxuYVc1aGJFUmxjMmxuYmxKbGMyOXNkWFJwYjI1VGFYcGxMbWhsYVdkb2REdGNiaUFnSUNBZ0lDQWdkbWxsZHk1ZmNtVnphWHBwYm1jZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCcFppQW9kMmxrZEdnZ1BpQXdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtbGxkeTV6WlhSRVpYTnBaMjVTWlhOdmJIVjBhVzl1VTJsNlpTaDNhV1IwYUN3Z2FHVnBaMmgwTENCMmFXVjNMbDl5WlhOdmJIVjBhVzl1VUc5c2FXTjVLVHRjYmlBZ0lDQWdJQ0FnZG1sbGR5NWZjbVZ6YVhwcGJtY2dQU0JtWVd4elpUdGNibHh1SUNBZ0lDQWdJQ0IyYVdWM0xtVnRhWFFvSjJOaGJuWmhjeTF5WlhOcGVtVW5LVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIWnBaWGN1WDNKbGMybDZaVU5oYkd4aVlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJhV1YzTGw5eVpYTnBlbVZEWVd4c1ltRmpheTVqWVd4c0tDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMjl5YVdWdWRHRjBhVzl1UTJoaGJtZGxPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lHTmpMblpwWlhjdVgyOXlhV1Z1ZEdGMGFXOXVRMmhoYm1kcGJtY2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQmpZeTUyYVdWM0xsOXlaWE5wZW1WRmRtVnVkQ2dwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVYRzRnSUNBZ0lDb2dVMlYwY3lCMmFXVjNKM01nZEdGeVoyVjBMV1JsYm5OcGRIbGtjR2tnWm05eUlHRnVaSEp2YVdRZ2JXOWlhV3hsSUdKeWIzZHpaWEl1SUdsMElHTmhiaUJpWlNCelpYUWdkRzg2SUNBZ0lDQWdJQ0FnSUNBOFluSXZQbHh1SUNBZ0lDQXFJQ0FnTVM0Z1kyTXViV0ZqY204dVJFVk9VMGxVV1VSUVNWOUVSVlpKUTBVc0lIWmhiSFZsSUdseklGd2laR1YyYVdObExXUndhVndpSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFluSXZQbHh1SUNBZ0lDQXFJQ0FnTWk0Z1kyTXViV0ZqY204dVJFVk9VMGxVV1VSUVNWOUlTVWRJTENCMllXeDFaU0JwY3lCY0ltaHBaMmd0WkhCcFhDSWdJQ2hrWldaaGRXeDBJSFpoYkhWbEtTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFluSXZQbHh1SUNBZ0lDQXFJQ0FnTXk0Z1kyTXViV0ZqY204dVJFVk9VMGxVV1VSUVNWOU5SVVJKVlUwc0lIWmhiSFZsSUdseklGd2liV1ZrYVhWdExXUndhVndpSUNoaWNtOTNjMlZ5SjNNZ1pHVm1ZWFZzZENCMllXeDFaU2tnSUNBZ0lDQWdJQ0FnSUNBOFluSXZQbHh1SUNBZ0lDQXFJQ0FnTkM0Z1kyTXViV0ZqY204dVJFVk9VMGxVV1VSUVNWOU1UMWNzSUhaaGJIVmxJR2x6SUZ3aWJHOTNMV1J3YVZ3aUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFluSXZQbHh1SUNBZ0lDQXFJQ0FnTlM0Z1EzVnpkRzl0SUhaaGJIVmxMQ0JsTG1jNklGd2lORGd3WENJZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThZbkl2UGx4dUlDQWdJQ0FxSUNFamVtZ2c2SzYrNTcydTU1dXU1cUNINVlhRjVhNjU1NXFFNXErUDZJdXg1YSs0NVlPUDU3U2c1NEs1NWErRzVicW00NENDWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBYldWMGFHOWtJSE5sZEZSaGNtZGxkRVJsYm5OcGRIbEVVRWxjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdaR1Z1YzJsMGVVUlFTVnh1SUNBZ0lDQXFJRUJrWlhCeVpXTmhkR1ZrSUhOcGJtTmxJSFl5TGpCY2JpQWdJQ0FnS2k5Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJSFJvWlNCamRYSnlaVzUwSUhSaGNtZGxkQzFrWlc1emFYUjVaSEJwSUhaaGJIVmxJRzltSUdOakxuWnBaWGN1WEc0Z0lDQWdJQ29nSVNONmFDRG9qcmZsajVibm02N21vSWZsaG9YbHJybm5tb1RtcjQvb2k3SGxyN2psZzQvbnRLRG5ncm5scjRibHVxYmpnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEZSaGNtZGxkRVJsYm5OcGRIbEVVRWxjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUI3VTNSeWFXNW5mVnh1SUNBZ0lDQXFJRUJrWlhCeVpXTmhkR1ZrSUhOcGJtTmxJSFl5TGpCY2JpQWdJQ0FnS2k5Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdLaUJUWlhSeklIZG9aWFJvWlhJZ2NtVnphWHBsSUdOaGJuWmhjeUJoZFhSdmJXRjBhV05oYkd4NUlIZG9aVzRnWW5KdmQzTmxjaWR6SUhOcGVtVWdZMmhoYm1kbFpDNDhZbkl2UGx4dUlDQWdJQ0FxSUZWelpXWjFiQ0J2Ym14NUlHOXVJSGRsWWk1Y2JpQWdJQ0FnS2lBaEkzcG9JT2l1dnVlOXJ1VzlrK1dQa2VlT3NPYTFqK2luaU9XWnFPZWFoT1d3dXVXdnVPYVV1ZVdQbU9hWHR1KzhqT2FZcitXUXB1aUhxdVdLcU9pd2crYVZ0Q0JqWVc1MllYTWc1YkM2NWErNDVhU241YkNQNDRDQ1hHNGdJQ0FnSUNvZzVMdUY1WnlvSUZkbFlpRG1xS0hsdkkva3VJdm1uSW5tbFlqamdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lISmxjMmw2WlZkcGRHaENjbTkzYzJWeVUybDZaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdRbTl2YkdWaGJuMGdaVzVoWW14bFpDQXRJRmRvWlhSb1pYSWdaVzVoWW14bElHRjFkRzl0WVhScFl5QnlaWE5wZW1VZ2QybDBhQ0JpY205M2MyVnlKM01nY21WemFYcGxJR1YyWlc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WemFYcGxWMmwwYUVKeWIzZHpaWEpUYVhwbE9pQm1kVzVqZEdsdmJpQW9aVzVoWW14bFpDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pXNWhZbXhsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5bGJtRmliR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZjbVZ6YVhwbFYybDBhRUp5YjNkelpYSlRhWHBsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY21WemFYcGxWMmwwYUVKeWIzZHpaWEpUYVhwbElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduY21WemFYcGxKeXdnZEdocGN5NWZjbVZ6YVhwbFJYWmxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R2Y21sbGJuUmhkR2x2Ym1Ob1lXNW5aU2NzSUhSb2FYTXVYMjl5YVdWdWRHRjBhVzl1UTJoaGJtZGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dlpHbHpZV0pzWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM0psYzJsNlpWZHBkR2hDY205M2MyVnlVMmw2WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNKbGMybDZaVmRwZEdoQ2NtOTNjMlZ5VTJsNlpTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZHlaWE5wZW1VbkxDQjBhR2x6TGw5eVpYTnBlbVZGZG1WdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmx1Wkc5M0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KMjl5YVdWdWRHRjBhVzl1WTJoaGJtZGxKeXdnZEdocGN5NWZiM0pwWlc1MFlYUnBiMjVEYUdGdVoyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCallXeHNZbUZqYXlCbWRXNWpkR2x2YmlCbWIzSWdZMk11ZG1sbGR5ZHpJSEpsYzJsNlpTQmhZM1JwYjI0c1BHSnlMejVjYmlBZ0lDQWdLaUIwYUdseklHTmhiR3hpWVdOcklIZHBiR3dnWW1VZ2FXNTJiMnRsWkNCaVpXWnZjbVVnWVhCd2JIbHBibWNnY21WemIyeDFkR2x2YmlCd2IyeHBZM2tzSUR4aWNpOCtYRzRnSUNBZ0lDb2djMjhnZVc5MUlHTmhiaUJrYnlCaGJua2dZV1JrYVhScGIyNWhiQ0J0YjJScFptbGpZWFJwYjI1eklIZHBkR2hwYmlCMGFHVWdZMkZzYkdKaFkyc3VQR0p5THo1Y2JpQWdJQ0FnS2lCVmMyVm1kV3dnYjI1c2VTQnZiaUIzWldJdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RvcnI3bnZhNGdZMk11ZG1sbGR5RG9zSVBtbGJUb3A0Ym5xcGZsc0xybHI3am9vWXprdUxybm1vVGxtNTdvc0lQbGg3M21sYkR2dkl4Y2JpQWdJQ0FnS2lEb3Y1bmt1S3JsbTU3b3NJUGxoNzNtbGJEa3ZKcmxuS2psdXBUbmxLanBnSUxwaFkzbXFLSGx2SS9rdVl2bGlZM29vcXZvc0lQbmxLanZ2SXhjYmlBZ0lDQWdLaURsbTZEbXJhVGt2YURsajYva3U2WGxuS2pvdjVua3VLcmxtNTdvc0lQbGg3M21sYkRsaG9YbXQ3dmxpcURrdTd2bWhJL3BtWVRsaXFEbWxMbmxqNWp2dkl4Y2JpQWdJQ0FnS2lEa3U0WGxuS2dnVjJWaUlPVzVzK1dQc09TNGkrYWNpZWFWaU9PQWdseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2MyVjBVbVZ6YVhwbFEyRnNiR0poWTJ0Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZkU1MWJHeDlJR05oYkd4aVlXTnJJQzBnVkdobElHTmhiR3hpWVdOcklHWjFibU4wYVc5dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMFVtVnphWHBsUTJGc2JHSmhZMnM2SUdaMWJtTjBhVzl1SUNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvUTBOZlJVUkpWRTlTS1NCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kyRnNiR0poWTJzZ1BUMDlJQ2RtZFc1amRHbHZiaWNnZkh3Z1kyRnNiR0poWTJzZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjbVZ6YVhwbFEyRnNiR0poWTJzZ1BTQmpZV3hzWW1GamF6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdVhHNGdJQ0FnSUNvZ1UyVjBjeUIwYUdVZ2IzSnBaVzUwWVhScGIyNGdiMllnZEdobElHZGhiV1VzSUdsMElHTmhiaUJpWlNCc1lXNWtjMk5oY0dVc0lIQnZjblJ5WVdsMElHOXlJR0YxZEc4dVhHNGdJQ0FnSUNvZ1YyaGxiaUJ6WlhRZ2FYUWdkRzhnYkdGdVpITmpZWEJsSUc5eUlIQnZjblJ5WVdsMExDQmhibVFnYzJOeVpXVnVJSGN2YUNCeVlYUnBieUJrYjJWemJpZDBJR1pwZEN3Z1hHNGdJQ0FnSUNvZ1kyTXVkbWxsZHlCM2FXeHNJR0YxZEc5dFlYUnBZMkZzYkhrZ2NtOTBZWFJsSUhSb1pTQm5ZVzFsSUdOaGJuWmhjeUIxYzJsdVp5QkRVMU11WEc0Z0lDQWdJQ29nVG05MFpTQjBhR0YwSUhSb2FYTWdablZ1WTNScGIyNGdaRzlsYzI0bmRDQm9ZWFpsSUdGdWVTQmxabVpsWTNRZ2FXNGdibUYwYVhabExDQmNiaUFnSUNBZ0tpQnBiaUJ1WVhScGRtVXNJSGx2ZFNCdVpXVmtJSFJ2SUhObGRDQjBhR1VnWVhCd2JHbGpZWFJwYjI0Z2IzSnBaVzUwWVhScGIyNGdhVzRnYm1GMGFYWmxJSEJ5YjJwbFkzUWdjMlYwZEdsdVozTmNiaUFnSUNBZ0tpQWhJM3BvSU9pdXZ1ZTlydWE0dU9hSWorV3hqK1c1bGVhY25lV1FrZSs4ak9XdWcraUR2ZVdrbithWXIrYW9xdWVKaU8rOGpPZXJsdWVKaU9hSWx1aUhxdVdLcU9PQWdseHVJQ0FnSUNBcUlPVzlrK2l1dnVlOXJ1UzR1dWFvcXVlSmlPYUlsdWVybHVlSmlPKzhqT1c1dHVTNGxPV3hqK1c1bGVlYWhPV3V2ZW1ybU9hdmxPUytpK1M0amVXTXVlbUZqZWFYdHUrOGpGeHVJQ0FnSUNBcUlHTmpMblpwWlhjZzVMeWE2SWVxNVlxbzU1U29JRU5UVXlEbWw0dm92YXptdUxqbWlJL2xuTHJtbWEvbm1vUWdZMkZ1ZG1Gejc3eU1YRzRnSUNBZ0lDb2c2TCtaNUxpcTVwYTU1ck9WNUxpTjVMeWE1YSs1SUc1aGRHbDJaU0RwZzZqbGlJYmt1cWZubEova3U3dmt2WlhsdmJIbGs0M3Z2SXpscjdua3VvNGdibUYwYVhabElPaUFqT2lvZ08rOGpPUzlvT21jZ09pbWdlV2NxT1c2bE9lVXFPaXV2dWU5cnVTNHJlZWFoT2l1dnVlOXJ1YU9rdWVKaU9PQWdseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2MyVjBUM0pwWlc1MFlYUnBiMjVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdiM0pwWlc1MFlYUnBiMjRnTFNCUWIzTnphV0pzWlNCMllXeDFaWE02SUdOakxtMWhZM0p2TGs5U1NVVk9WRUZVU1U5T1gweEJUa1JUUTBGUVJTQjhJR05qTG0xaFkzSnZMazlTU1VWT1ZFRlVTVTlPWDFCUFVsUlNRVWxVSUh3Z1kyTXViV0ZqY204dVQxSkpSVTVVUVZSSlQwNWZRVlZVVDF4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEU5eWFXVnVkR0YwYVc5dU9pQm1kVzVqZEdsdmJpQW9iM0pwWlc1MFlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ2IzSnBaVzUwWVhScGIyNGdQU0J2Y21sbGJuUmhkR2x2YmlBbUlHTmpMbTFoWTNKdkxrOVNTVVZPVkVGVVNVOU9YMEZWVkU4N1hHNGdJQ0FnSUNBZ0lHbG1JQ2h2Y21sbGJuUmhkR2x2YmlBbUppQjBhR2x6TGw5dmNtbGxiblJoZEdsdmJpQWhQVDBnYjNKcFpXNTBZWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjl5YVdWdWRHRjBhVzl1SUQwZ2IzSnBaVzUwWVhScGIyNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR1Z6YVdkdVYybGtkR2dnUFNCMGFHbHpMbDl2Y21sbmFXNWhiRVJsYzJsbmJsSmxjMjlzZFhScGIyNVRhWHBsTG5kcFpIUm9PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JsYzJsbmJraGxhV2RvZENBOUlIUm9hWE11WDI5eWFXZHBibUZzUkdWemFXZHVVbVZ6YjJ4MWRHbHZibE5wZW1VdWFHVnBaMmgwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUkVaWE5wWjI1U1pYTnZiSFYwYVc5dVUybDZaU2hrWlhOcFoyNVhhV1IwYUN3Z1pHVnphV2R1U0dWcFoyaDBMQ0IwYUdsekxsOXlaWE52YkhWMGFXOXVVRzlzYVdONUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmZhVzVwZEVaeVlXMWxVMmw2WlRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JHOWpSbkpoYldWVGFYcGxJRDBnZEdocGN5NWZabkpoYldWVGFYcGxPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2R5QTlJRjlmUW5KdmQzTmxja2RsZEhSbGNpNWhkbUZwYkZkcFpIUm9LR05qTG1kaGJXVXVabkpoYldVcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYUNBOUlGOWZRbkp2ZDNObGNrZGxkSFJsY2k1aGRtRnBiRWhsYVdkb2RDaGpZeTVuWVcxbExtWnlZVzFsS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2x6VEdGdVpITmpZWEJsSUQwZ2R5QStQU0JvTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hEUTE5RlJFbFVUMUlnZkh3Z0lXTmpMbk41Y3k1cGMwMXZZbWxzWlNCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0dselRHRnVaSE5qWVhCbElDWW1JSFJvYVhNdVgyOXlhV1Z1ZEdGMGFXOXVJQ1lnWTJNdWJXRmpjbTh1VDFKSlJVNVVRVlJKVDA1ZlRFRk9SRk5EUVZCRktTQjhmQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ2hhWE5NWVc1a2MyTmhjR1VnSmlZZ2RHaHBjeTVmYjNKcFpXNTBZWFJwYjI0Z0ppQmpZeTV0WVdOeWJ5NVBVa2xGVGxSQlZFbFBUbDlRVDFKVVVrRkpWQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WTBaeVlXMWxVMmw2WlM1M2FXUjBhQ0E5SUhjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjJOR2NtRnRaVk5wZW1VdWFHVnBaMmgwSUQwZ2FEdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxtZGhiV1V1WTI5dWRHRnBibVZ5TG5OMGVXeGxXeWN0ZDJWaWEybDBMWFJ5WVc1elptOXliU2RkSUQwZ0ozSnZkR0YwWlNnd1pHVm5LU2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZeTVuWVcxbExtTnZiblJoYVc1bGNpNXpkSGxzWlM1MGNtRnVjMlp2Y20wZ1BTQW5jbTkwWVhSbEtEQmtaV2NwSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgybHpVbTkwWVhSbFpDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkc5alJuSmhiV1ZUYVhwbExuZHBaSFJvSUQwZ2FEdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4dlkwWnlZVzFsVTJsNlpTNW9aV2xuYUhRZ1BTQjNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyTXVaMkZ0WlM1amIyNTBZV2x1WlhJdWMzUjViR1ZiSnkxM1pXSnJhWFF0ZEhKaGJuTm1iM0p0SjEwZ1BTQW5jbTkwWVhSbEtEa3daR1ZuS1NjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1bllXMWxMbU52Ym5SaGFXNWxjaTV6ZEhsc1pTNTBjbUZ1YzJadmNtMGdQU0FuY205MFlYUmxLRGt3WkdWbktTYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCall5NW5ZVzFsTG1OdmJuUmhhVzVsY2k1emRIbHNaVnNuTFhkbFltdHBkQzEwY21GdWMyWnZjbTB0YjNKcFoybHVKMTBnUFNBbk1IQjRJREJ3ZUNBd2NIZ25PMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyTXVaMkZ0WlM1amIyNTBZV2x1WlhJdWMzUjViR1V1ZEhKaGJuTm1iM0p0VDNKcFoybHVJRDBnSnpCd2VDQXdjSGdnTUhCNEp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmx6VW05MFlYUmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDI5eWFXVnVkR0YwYVc5dVEyaGhibWRwYm1jcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG5acFpYY3VYMjl5YVdWdWRHRjBhVzl1UTJoaGJtZHBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJREV3TURBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHZJR2hoWTJ0Y2JpQWdJQ0JmWVdScWRYTjBVMmw2WlV0bFpYQkRZVzUyWVhOVGFYcGxPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrWlhOcFoyNVhhV1IwYUNBOUlIUm9hWE11WDI5eWFXZHBibUZzUkdWemFXZHVVbVZ6YjJ4MWRHbHZibE5wZW1VdWQybGtkR2c3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtaWE5wWjI1SVpXbG5hSFFnUFNCMGFHbHpMbDl2Y21sbmFXNWhiRVJsYzJsbmJsSmxjMjlzZFhScGIyNVRhWHBsTG1obGFXZG9kRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHUmxjMmxuYmxkcFpIUm9JRDRnTUNsY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBSR1Z6YVdkdVVtVnpiMngxZEdsdmJsTnBlbVVvWkdWemFXZHVWMmxrZEdnc0lHUmxjMmxuYmtobGFXZG9kQ3dnZEdocGN5NWZjbVZ6YjJ4MWRHbHZibEJ2YkdsamVTazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOXpaWFJXYVdWM2NHOXlkRTFsZEdFNklHWjFibU4wYVc5dUlDaHRaWFJoY3l3Z2IzWmxjbmR5YVhSbEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCMmNDQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tGd2lZMjlqYjNOTlpYUmhSV3hsYldWdWRGd2lLVHRjYmlBZ0lDQWdJQ0FnYVdZb2RuQWdKaVlnYjNabGNuZHlhWFJsS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbWhsWVdRdWNtVnRiM1psUTJocGJHUW9kbkFwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUdWc1pXMXpJRDBnWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEhOQ2VVNWhiV1VvWENKMmFXVjNjRzl5ZEZ3aUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJXVUNBOUlHVnNaVzF6SUQ4Z1pXeGxiWE5iTUYwZ09pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdWdWRDd2dhMlY1TENCd1lYUjBaWEp1TzF4dVhHNGdJQ0FnSUNBZ0lHTnZiblJsYm5RZ1BTQmpkWEp5Wlc1MFZsQWdQeUJqZFhKeVpXNTBWbEF1WTI5dWRHVnVkQ0E2SUZ3aVhDSTdYRzRnSUNBZ0lDQWdJSFp3SUQwZ2RuQWdmSHdnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaGNJbTFsZEdGY0lpazdYRzRnSUNBZ0lDQWdJSFp3TG1sa0lEMGdYQ0pqYjJOdmMwMWxkR0ZGYkdWdFpXNTBYQ0k3WEc0Z0lDQWdJQ0FnSUhad0xtNWhiV1VnUFNCY0luWnBaWGR3YjNKMFhDSTdYRzRnSUNBZ0lDQWdJSFp3TG1OdmJuUmxiblFnUFNCY0lsd2lPMXh1WEc0Z0lDQWdJQ0FnSUdadmNpQW9hMlY1SUdsdUlHMWxkR0Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyOXVkR1Z1ZEM1cGJtUmxlRTltS0d0bGVTa2dQVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwWlc1MElDczlJRndpTEZ3aUlDc2dhMlY1SUNzZ1hDSTlYQ0lnS3lCdFpYUmhjMXRyWlhsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9iM1psY25keWFYUmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGRHVnliaUE5SUc1bGR5QlNaV2RGZUhBb2EyVjVLMXdpWEZ4ektqMWNYSE1xVzE0c1hTdGNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHVnVkQzV5WlhCc1lXTmxLSEJoZEhSbGNtNHNJR3RsZVNBcklGd2lQVndpSUNzZ2JXVjBZWE5iYTJWNVhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lvTDE0c0x5NTBaWE4wS0dOdmJuUmxiblFwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdWdWRDQTlJR052Ym5SbGJuUXVjM1ZpYzNSeUtERXBPMXh1WEc0Z0lDQWdJQ0FnSUhad0xtTnZiblJsYm5RZ1BTQmpiMjUwWlc1ME8xeHVJQ0FnSUNBZ0lDQXZMeUJHYjNJZ1lXUnZjSFJwYm1jZ1kyVnlkR0ZwYmlCaGJtUnliMmxrSUdSbGRtbGpaWE1nZDJocFkyZ2daRzl1SjNRZ2MzVndjRzl5ZENCelpXTnZibVFnZG1sbGQzQnZjblJjYmlBZ0lDQWdJQ0FnYVdZZ0tHTjFjbkpsYm5SV1VDbGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWNuSmxiblJXVUM1amIyNTBaVzUwSUQwZ1kyOXVkR1Z1ZER0Y2JseHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNW9aV0ZrTG1Gd2NHVnVaRU5vYVd4a0tIWndLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMkZrYW5WemRGWnBaWGR3YjNKMFRXVjBZVG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJPVDFSRk9pQnViM1FnYldWeVoyVWdhVzUwYnlCMk1pNHlMakFzSUcxdmRtVWdhVzUwYnlCQmJHbHdZWGtnWVdSaGNIUmxjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYVhOQlpHcDFjM1JXYVdWM2NHOXlkQ0FtSmlBaFEwTmZTbE5DSUNZbUlDRkRRMTlTVlU1VVNVMUZJQ1ltSUNGRFExOVhSVU5JUVZSSFFVMUZJQ1ltSUNGRFExOVJVVkJNUVZrZ0ppWWdJV2x6UW1GcFpIVkhZVzFsSUNZbUlDRnBjMWhwWVc5dGFVZGhiV1VnSmlZZ0lXbHpRV3hwY0dGNVIyRnRaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMyVjBWbWxsZDNCdmNuUk5aWFJoS0Y5ZlFuSnZkM05sY2tkbGRIUmxjaTV0WlhSaExDQm1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXBjMEZrYW5WemRGWnBaWGR3YjNKMElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FxSUZObGRITWdkMmhsZEdobGNpQjBhR1VnWlc1bmFXNWxJRzF2WkdsbWVTQjBhR1VnWENKMmFXVjNjRzl5ZEZ3aUlHMWxkR0VnYVc0Z2VXOTFjaUIzWldJZ2NHRm5aUzQ4WW5JdlBseHVJQ0FnSUNBcUlFbDBKM01nWlc1aFlteGxaQ0JpZVNCa1pXWmhkV3gwTENCM1pTQnpkSEp2Ym1kc2VTQnpkV2RuWlhOMElIbHZkU0J1YjNRZ2RHOGdaR2x6WVdKc1pTQnBkQzQ4WW5JdlBseHVJQ0FnSUNBcUlFRnVaQ0JsZG1WdUlIZG9aVzRnYVhRbmN5QmxibUZpYkdWa0xDQjViM1VnWTJGdUlITjBhV3hzSUhObGRDQjViM1Z5SUc5M2JpQmNJblpwWlhkd2IzSjBYQ0lnYldWMFlTd2dhWFFnZDI5dUozUWdZbVVnYjNabGNuSnBaR1JsYmp4aWNpOCtYRzRnSUNBZ0lDb2dUMjVzZVNCMWMyVm1kV3dnYjI0Z2QyVmlYRzRnSUNBZ0lDb2dJU042YUNEb3JyN252YTdsdkpYbWs0N21tSy9sa0tib3NJUG1sYlFnZG1sbGQzQnZjblFnYldWMFlTRG1uYVhwaFkzbGtJamxzWS9sdVpYcGdJTHBoWTNqZ0lKY2JpQWdJQ0FnS2lEcHU1am9ycVRvcnI3bnZhN2t1THJsa0svbGlxanZ2SXptaUpIa3U2emx2THJuZzRqbHU3cm9ycTdrdmFEa3VJM29wb0hsc0libHJvUG9ycjdudmE3a3VMcmxoYlBwbDYzamdJSmNiaUFnSUNBZ0tpRGxqYlBrdmIvbHZaUGxyb1Bsa0svbGlxam1sN2J2dkl6a3ZhRGt1NDNuaExib2c3M2xwSi9vcnI3bnZhN2t2YURubW9RZ2RtbGxkM0J2Y25RZ2JXVjBZZSs4ak9XdWcrUzRqZVM4bXVpaXEraW1odWVibHVPQWdseHVJQ0FnSUNBcUlPUzdoZVdjcUNCWFpXSWc1cWloNWJ5UDVMaUw1cHlKNXBXSVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCaFpHcDFjM1JXYVdWM2NHOXlkRTFsZEdGY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBKdmIyeGxZVzU5SUdWdVlXSnNaV1FnTFNCRmJtRmliR1VnWVhWMGIyMWhkR2xqSUcxdlpHbG1hV05oZEdsdmJpQjBieUJjSW5acFpYZHdiM0owWENJZ2JXVjBZVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHRmthblZ6ZEZacFpYZHdiM0owVFdWMFlUb2dablZ1WTNScGIyNGdLR1Z1WVdKc1pXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZhWE5CWkdwMWMzUldhV1YzY0c5eWRDQTlJR1Z1WVdKc1pXUTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnS2lCU1pYUnBibUVnYzNWd2NHOXlkQ0JwY3lCbGJtRmliR1ZrSUdKNUlHUmxabUYxYkhRZ1ptOXlJRUZ3Y0d4bElHUmxkbWxqWlNCaWRYUWdaR2x6WVdKc1pXUWdabTl5SUc5MGFHVnlJR1JsZG1salpYTXNQR0p5THo1Y2JpQWdJQ0FnS2lCcGRDQjBZV3RsY3lCbFptWmxZM1FnYjI1c2VTQjNhR1Z1SUhsdmRTQmpZV3hzWldRZ2MyVjBSR1Z6YVdkdVVtVnpiMngxZEdsdmJsQnZiR2xqZVR4aWNpOCtYRzRnSUNBZ0lDb2dUMjVzZVNCMWMyVm1kV3dnYjI0Z2QyVmlYRzRnSUNBZ0lDb2dJU042YUNEbHI3bmt1bzRnUVhCd2JHVWc2TCtaNTZlTjVwU3Y1b3lCSUZKbGRHbHVZU0RtbUw3bnBMcm5tb1RvcnI3bHBJZmt1SXJwdTVqb3JxVG92NXZvb1l6a3ZKamxqSmJvZ0l6bGhiYmt1NWJuc2J2bG5vdm9ycjdscElmcHU1am9ycVRrdUkzb3Y1dm9vWXprdkpqbGpKYnZ2SXhjYmlBZ0lDQWdLaURscm9Qa3U0WGt2SnJsbktqa3ZhRG9zSVBubEtnZ2MyVjBSR1Z6YVdkdVVtVnpiMngxZEdsdmJsQnZiR2xqZVNEbWxybm1zNVhtbDdibW5Jbmx2YkhsazQzamdJSmNiaUFnSUNBZ0tpRGt1NFhsbktnZ1YyVmlJT2Fvb2VXOGorUzRpK2FjaWVhVmlPT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdaVzVoWW14bFVtVjBhVzVoWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRDYjI5c1pXRnVmU0JsYm1GaWJHVmtJQzBnUlc1aFlteGxJRzl5SUdScGMyRmliR1VnY21WMGFXNWhJR1JwYzNCc1lYbGNiaUFnSUNBZ0tpOWNiaUFnSUNCbGJtRmliR1ZTWlhScGJtRTZJR1oxYm1OMGFXOXVLR1Z1WVdKc1pXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVYwYVc1aFJXNWhZbXhsWkNBOUlDRWhaVzVoWW14bFpEdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FxSUVOb1pXTnJJSGRvWlhSb1pYSWdjbVYwYVc1aElHUnBjM0JzWVhrZ2FYTWdaVzVoWW14bFpDNDhZbkl2UGx4dUlDQWdJQ0FxSUU5dWJIa2dkWE5sWm5Wc0lHOXVJSGRsWWx4dUlDQWdJQ0FxSUNFamVtZ2c1cU9BNXArbDVwaXY1WkNtNWErNUlGSmxkR2x1WVNEbW1MN25wTHJvcnI3bHBJZm92NXZvb1l6a3ZKamxqSmJqZ0lKY2JpQWdJQ0FnS2lEa3U0WGxuS2dnVjJWaUlPYW9vZVc4aitTNGkrYWNpZWFWaU9PQWdseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2FYTlNaWFJwYm1GRmJtRmliR1ZrWEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3UW05dmJHVmhibjFjYmlBZ0lDQWdLaTljYmlBZ0lDQnBjMUpsZEdsdVlVVnVZV0pzWldRNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVjBhVzVoUlc1aFlteGxaRHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlhhR1YwYUdWeUlIUnZJRVZ1WVdKc1pTQnZiaUJoYm5ScExXRnNhV0Z6WEc0Z0lDQWdJQ29nSVNONmFDRG1qcWZsaUxibWlwZnBsSy9wdmIvbW1LL2xrS2JsdklEbGtLOWNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHVnVZV0pzWlVGdWRHbEJiR2xoYzF4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3UW05dmJHVmhibjBnWlc1aFlteGxaQ0F0SUVWdVlXSnNaU0J2Y2lCdWIzUWdZVzUwYVMxaGJHbGhjMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHVnVZV0pzWlVGdWRHbEJiR2xoY3pvZ1puVnVZM1JwYjI0Z0tHVnVZV0pzWldRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMkZ1ZEdsQmJHbGhjMFZ1WVdKc1pXUWdQVDA5SUdWdVlXSnNaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhiblJwUVd4cFlYTkZibUZpYkdWa0lEMGdaVzVoWW14bFpEdGNiaUFnSUNBZ0lDQWdhV1lvWTJNdVoyRnRaUzV5Wlc1a1pYSlVlWEJsSUQwOVBTQmpZeTVuWVcxbExsSkZUa1JGVWw5VVdWQkZYMWRGUWtkTUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZMkZqYUdVZ1BTQmpZeTVzYjJGa1pYSXVYMk5oWTJobE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJR05oWTJobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdsMFpXMGdQU0JqWVdOb1pWdHJaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjBaWGdnUFNCcGRHVnRJQ1ltSUdsMFpXMHVZMjl1ZEdWdWRDQnBibk4wWVc1alpXOW1JR05qTGxSbGVIUjFjbVV5UkNBL0lHbDBaVzB1WTI5dWRHVnVkQ0E2SUc1MWJHdzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSbGVDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdSbWxzZEdWeUlEMGdZMk11VkdWNGRIVnlaVEpFTGtacGJIUmxjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z1WVdKc1pXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsZUM1elpYUkdhV3gwWlhKektFWnBiSFJsY2k1TVNVNUZRVklzSUVacGJIUmxjaTVNU1U1RlFWSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRMbk5sZEVacGJIUmxjbk1vUm1sc2RHVnlMazVGUVZKRlUxUXNJRVpwYkhSbGNpNU9SVUZTUlZOVUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJR2xtS0dOakxtZGhiV1V1Y21WdVpHVnlWSGx3WlNBOVBUMGdZMk11WjJGdFpTNVNSVTVFUlZKZlZGbFFSVjlEUVU1V1FWTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqZEhnZ1BTQmpZeTVuWVcxbExtTmhiblpoY3k1blpYUkRiMjUwWlhoMEtDY3laQ2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZM1I0TG1sdFlXZGxVMjF2YjNSb2FXNW5SVzVoWW14bFpDQTlJR1Z1WVdKc1pXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCamRIZ3ViVzk2U1cxaFoyVlRiVzl2ZEdocGJtZEZibUZpYkdWa0lEMGdaVzVoWW14bFpEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlGSmxkSFZ5Ym5NZ2QyaGxkR2hsY2lCMGFHVWdZM1Z5Y21WdWRDQmxibUZpYkdVZ2IyNGdZVzUwYVMxaGJHbGhjMXh1SUNBZ0lDQXFJQ0VqZW1nZzZMK1U1WnVlNWIyVDVZbU41cGl2NVpDbTVvcVg2WlN2NmIyL1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCcGMwRnVkR2xCYkdsaGMwVnVZV0pzWldSY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2x6UVc1MGFVRnNhV0Z6Ulc1aFlteGxaRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWVc1MGFVRnNhV0Z6Ulc1aFlteGxaRHRjYmlBZ0lDQjlMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnS2lCSlppQmxibUZpYkdWa0xDQjBhR1VnWVhCd2JHbGpZWFJwYjI0Z2QybHNiQ0IwY25rZ1lYVjBiMjFoZEdsallXeHNlU0IwYnlCbGJuUmxjaUJtZFd4c0lITmpjbVZsYmlCdGIyUmxJRzl1SUcxdlltbHNaU0JrWlhacFkyVnpQR0p5THo1Y2JpQWdJQ0FnS2lCWmIzVWdZMkZ1SUhCaGMzTWdkSEoxWlNCaGN5QndZWEpoYldWMFpYSWdkRzhnWlc1aFlteGxJR2wwSUdGdVpDQmthWE5oWW14bElHbDBJR0o1SUhCaGMzTnBibWNnWm1Gc2MyVXVQR0p5THo1Y2JpQWdJQ0FnS2lCUGJteDVJSFZ6WldaMWJDQnZiaUIzWldKY2JpQWdJQ0FnS2lBaEkzcG9JT1dRcitXS3FPYVh0dSs4ak9lbnUrV0txT2VycithNHVPYUlqK1M4bXVXY3FPZW51K1dLcU9lcnIraUhxdVdLcU9Xd25laXZsZWkvbStXRnBlV0ZxT1d4aithb29lVzhqK09BZ2x4dUlDQWdJQ0FxSU9TOW9PaUR2ZVdrbitTOG9PV0ZwU0IwY25WbElPUzR1dVdQZ3VhVnNPV091K1dRcitXS3FPV3VnKys4ak9lVXFDQm1ZV3h6WlNEbGo0TG1sYkRtbmFYbGhiUHBsNjNscm9QamdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHVnVZV0pzWlVGMWRHOUdkV3hzVTJOeVpXVnVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQmxibUZpYkdWa0lDMGdSVzVoWW14bElHOXlJR1JwYzJGaWJHVWdZWFYwYnlCbWRXeHNJSE5qY21WbGJpQnZiaUJ0YjJKcGJHVWdaR1YyYVdObGMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdWdVlXSnNaVUYxZEc5R2RXeHNVMk55WldWdU9pQm1kVzVqZEdsdmJpaGxibUZpYkdWa0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNobGJtRmliR1ZrSUNZbUlGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1aFlteGxaQ0FoUFQwZ2RHaHBjeTVmWVhWMGIwWjFiR3hUWTNKbFpXNGdKaVlnWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZeTV6ZVhNdWFYTk5iMkpwYkdVZ0ppWWdYRzRnSUNBZ0lDQWdJQ0FnSUNCall5NXplWE11WW5KdmQzTmxjbFI1Y0dVZ0lUMDlJR05qTG5ONWN5NUNVazlYVTBWU1gxUlpVRVZmVjBWRFNFRlVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJCZFhSdmJXRjBhV05oYkd4NUlHWjFiR3dnYzJOeVpXVnVJSGRvWlc0Z2RYTmxjaUIwYjNWamFHVnpJRzl1SUcxdlltbHNaU0IyWlhKemFXOXVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDloZFhSdlJuVnNiRk5qY21WbGJpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1elkzSmxaVzR1WVhWMGIwWjFiR3hUWTNKbFpXNG9ZMk11WjJGdFpTNW1jbUZ0WlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWhkWFJ2Um5Wc2JGTmpjbVZsYmlBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMk11YzJOeVpXVnVMbVJwYzJGaWJHVkJkWFJ2Um5Wc2JGTmpjbVZsYmloall5NW5ZVzFsTG1aeVlXMWxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVYRzRnSUNBZ0lDb2dRMmhsWTJzZ2QyaGxkR2hsY2lCaGRYUnZJR1oxYkd3Z2MyTnlaV1Z1SUdseklHVnVZV0pzWldRdVBHSnlMejVjYmlBZ0lDQWdLaUJQYm14NUlIVnpaV1oxYkNCdmJpQjNaV0pjYmlBZ0lDQWdLaUFoSTNwb0lPYWpnT2FmcGVpSHF1V0txT2kvbStXRnBlV0ZxT1d4aithb29lVzhqK2FZcitXUXB1V1FyK1dLcU9PQWdseHVJQ0FnSUNBcUlPUzdoZVdjcUNCWFpXSWc1cWloNWJ5UDVMaUw1cHlKNXBXSTQ0Q0NYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnBjMEYxZEc5R2RXeHNVMk55WldWdVJXNWhZbXhsWkZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBKdmIyeGxZVzU5SUVGMWRHOGdablZzYkNCelkzSmxaVzRnWlc1aFlteGxaQ0J2Y2lCdWIzUmNiaUFnSUNBZ0tpOWNiaUFnSUNCcGMwRjFkRzlHZFd4c1UyTnlaV1Z1Ulc1aFlteGxaRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDloZFhSdlJuVnNiRk5qY21WbGJqdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0tpQk9iM1FnYzNWd2NHOXlkQ0J2YmlCdVlYUnBkbVV1UEdKeUx6NWNiaUFnSUNBZ0tpQlBiaUIzWldJc0lHbDBJSE5sZEhNZ2RHaGxJSE5wZW1VZ2IyWWdkR2hsSUdOaGJuWmhjeTVjYmlBZ0lDQWdLaUFoSTNwb0lPaS9tZVM0cXVhV3VlYXpsZVc1dHVTNGplYVVyK2FNZ1NCdVlYUnBkbVVnNWJtejVZK3c3N3lNNVp5b0lGZGxZaURsdWJQbGo3RGt1SXZ2dkl6bGo2L2t1NlhubEtqbW5hWG9ycjdudmE0Z1kyRnVkbUZ6SU9Xd3V1V3Z1T09BZ2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnYzJWMFEyRnVkbUZ6VTJsNlpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCM2FXUjBhRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQm9aV2xuYUhSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6WlhSRFlXNTJZWE5UYVhwbE9pQm1kVzVqZEdsdmJpQW9kMmxrZEdnc0lHaGxhV2RvZENrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWTJGdWRtRnpJRDBnWTJNdVoyRnRaUzVqWVc1MllYTTdYRzRnSUNBZ0lDQWdJSFpoY2lCamIyNTBZV2x1WlhJZ1BTQmpZeTVuWVcxbExtTnZiblJoYVc1bGNqdGNibHh1SUNBZ0lDQWdJQ0JqWVc1MllYTXVkMmxrZEdnZ1BTQjNhV1IwYUNBcUlIUm9hWE11WDJSbGRtbGpaVkJwZUdWc1VtRjBhVzg3WEc0Z0lDQWdJQ0FnSUdOaGJuWmhjeTVvWldsbmFIUWdQU0JvWldsbmFIUWdLaUIwYUdsekxsOWtaWFpwWTJWUWFYaGxiRkpoZEdsdk8xeHVYRzRnSUNBZ0lDQWdJR05oYm5aaGN5NXpkSGxzWlM1M2FXUjBhQ0E5SUhkcFpIUm9JQ3NnSjNCNEp6dGNiaUFnSUNBZ0lDQWdZMkZ1ZG1GekxuTjBlV3hsTG1obGFXZG9kQ0E5SUdobGFXZG9kQ0FySUNkd2VDYzdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWRHRnBibVZ5TG5OMGVXeGxMbmRwWkhSb0lEMGdkMmxrZEdnZ0t5QW5jSGduTzF4dUlDQWdJQ0FnSUNCamIyNTBZV2x1WlhJdWMzUjViR1V1YUdWcFoyaDBJRDBnYUdWcFoyaDBJQ3NnSjNCNEp6dGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaWE5wZW1WRmRtVnVkQ2dwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVYRzRnSUNBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnWTJGdWRtRnpJSE5wZW1VZ2IyWWdkR2hsSUhacFpYY3VQR0p5THo1Y2JpQWdJQ0FnS2lCUGJpQnVZWFJwZG1VZ2NHeGhkR1p2Y20xekxDQnBkQ0J5WlhSMWNtNXpJSFJvWlNCelkzSmxaVzRnYzJsNlpTQnphVzVqWlNCMGFHVWdkbWxsZHlCcGN5QmhJR1oxYkd4elkzSmxaVzRnZG1sbGR5NDhZbkl2UGx4dUlDQWdJQ0FxSUU5dUlIZGxZaXdnYVhRZ2NtVjBkWEp1Y3lCMGFHVWdjMmw2WlNCdlppQjBhR1VnWTJGdWRtRnpJR1ZzWlcxbGJuUXVYRzRnSUNBZ0lDb2dJU042YUNEb3Y1VGxtNTdvcDRibG03N2t1SzBnWTJGdWRtRnpJT2VhaE9Xd3V1V3Z1T09BZ2x4dUlDQWdJQ0FxSU9XY3FDQnVZWFJwZG1VZzVibXo1WSt3NUxpTDc3eU01YTZENkwrVTVadWU1WVdvNWJHUDZLZUc1WnUrNUxpTDViR1A1Ym1WNTVxRTViQzY1YSs0NDRDQ1hHNGdJQ0FnSUNvZzVaeW9JRmRsWWlEbHViUGxqN0RrdUl2dnZJemxyb1BvdjVUbG01NGdZMkZ1ZG1GeklPV0ZnK2Uwb09Xd3V1V3Z1T09BZ2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWjJWMFEyRnVkbUZ6VTJsNlpWeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxTnBlbVY5WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwUTJGdWRtRnpVMmw2WlRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMk11YzJsNlpTaGpZeTVuWVcxbExtTmhiblpoY3k1M2FXUjBhQ3dnWTJNdVoyRnRaUzVqWVc1MllYTXVhR1ZwWjJoMEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FxSUZKbGRIVnlibk1nZEdobElHWnlZVzFsSUhOcGVtVWdiMllnZEdobElIWnBaWGN1UEdKeUx6NWNiaUFnSUNBZ0tpQlBiaUJ1WVhScGRtVWdjR3hoZEdadmNtMXpMQ0JwZENCeVpYUjFjbTV6SUhSb1pTQnpZM0psWlc0Z2MybDZaU0J6YVc1alpTQjBhR1VnZG1sbGR5QnBjeUJoSUdaMWJHeHpZM0psWlc0Z2RtbGxkeTQ4WW5JdlBseHVJQ0FnSUNBcUlFOXVJSGRsWWl3Z2FYUWdjbVYwZFhKdWN5QjBhR1VnYzJsNlpTQnZaaUIwYUdVZ1kyRnVkbUZ6SjNNZ2IzVjBaWElnUkU5TklHVnNaVzFsYm5RdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RvdjVUbG01N29wNGJsbTc3a3VLM292cm5tb1libHNMcmxyN2pqZ0lKY2JpQWdJQ0FnS2lEbG5LZ2dibUYwYVhabElPVzVzK1dQc09TNGkrKzhqT1d1ZytpL2xPV2JudVdGcU9XeGoraW5odVdidnVTNGkrV3hqK1c1bGVlYWhPV3d1dVd2dU9PQWdseHVJQ0FnSUNBcUlPV2NxQ0IzWldJZzVibXo1WSt3NUxpTDc3eU01YTZENkwrVTVadWVJR05oYm5aaGN5RGxoWVBudEtEbm1vVGxwSmJsc1lJZ1JFOU5JT1dGZytlMG9PV3d1dVd2dU9PQWdseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ1oyVjBSbkpoYldWVGFYcGxYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdVMmw2WlgxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSR2NtRnRaVk5wZW1VNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05qTG5OcGVtVW9kR2hwY3k1ZlpuSmhiV1ZUYVhwbExuZHBaSFJvTENCMGFHbHpMbDltY21GdFpWTnBlbVV1YUdWcFoyaDBLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJseHVJQ0FnSUNBcUlFOXVJRzVoZEdsMlpTd2dhWFFnYzJWMGN5QjBhR1VnWm5KaGJXVWdjMmw2WlNCdlppQjJhV1YzTGp4aWNpOCtYRzRnSUNBZ0lDb2dUMjRnZDJWaUxDQnBkQ0J6WlhSeklIUm9aU0J6YVhwbElHOW1JSFJvWlNCallXNTJZWE1uY3lCdmRYUmxjaUJFVDAwZ1pXeGxiV1Z1ZEM1Y2JpQWdJQ0FnS2lBaEkzcG9JT1djcUNCdVlYUnBkbVVnNWJtejVZK3c1TGlMNzd5TTZLNis1NzJ1NktlRzVadSs1cUdHNXA2MjViQzY1YSs0NDRDQ1hHNGdJQ0FnSUNvZzVaeW9JSGRsWWlEbHViUGxqN0RrdUl2dnZJem9ycjdudmE0Z1kyRnVkbUZ6SU9Xa2x1V3hnaUJFVDAwZzVZV0Q1N1NnNWJDNjVhKzQ0NENDWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J6WlhSR2NtRnRaVk5wZW1WY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZDJsa2RHaGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2FHVnBaMmgwWEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwUm5KaGJXVlRhWHBsT2lCbWRXNWpkR2x2YmlBb2QybGtkR2dzSUdobGFXZG9kQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDltY21GdFpWTnBlbVV1ZDJsa2RHZ2dQU0IzYVdSMGFEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpuSmhiV1ZUYVhwbExtaGxhV2RvZENBOUlHaGxhV2RvZER0Y2JpQWdJQ0FnSUNBZ1kyTXVaMkZ0WlM1bWNtRnRaUzV6ZEhsc1pTNTNhV1IwYUNBOUlIZHBaSFJvSUNzZ1hDSndlRndpTzF4dUlDQWdJQ0FnSUNCall5NW5ZVzFsTG1aeVlXMWxMbk4wZVd4bExtaGxhV2RvZENBOUlHaGxhV2RvZENBcklGd2ljSGhjSWp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WemFYcGxSWFpsYm5Rb2RISjFaU2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0tpQlNaWFIxY201eklIUm9aU0IyYVhOcFlteGxJR0Z5WldFZ2MybDZaU0J2WmlCMGFHVWdkbWxsZHlCd2IzSjBMbHh1SUNBZ0lDQXFJQ0VqZW1nZzZMK1U1WnVlNktlRzVadSs1NnFYNVkrajVZK3Y2S2VCNVl5NjVaK2Y1YkM2NWErNDQ0Q0NYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQm5aWFJXYVhOcFlteGxVMmw2WlZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTFOcGVtVjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBWbWx6YVdKc1pWTnBlbVU2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmpMbk5wZW1Vb2RHaHBjeTVmZG1semFXSnNaVkpsWTNRdWQybGtkR2dzZEdocGN5NWZkbWx6YVdKc1pWSmxZM1F1YUdWcFoyaDBLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJseHVJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ2RHaGxJSFpwYzJsaWJHVWdZWEpsWVNCemFYcGxJRzltSUhSb1pTQjJhV1YzSUhCdmNuUXVYRzRnSUNBZ0lDb2dJU042YUNEb3Y1VGxtNTdvcDRibG03N25xcGZsajZQbGo2L29wNEhsakxybG41L2xnNC9udEtEbHNMcmxyN2pqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdkbGRGWnBjMmxpYkdWVGFYcGxTVzVRYVhobGJGeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxTnBlbVY5WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwVm1semFXSnNaVk5wZW1WSmJsQnBlR1ZzT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZeTV6YVhwbEtDQjBhR2x6TGw5MmFYTnBZbXhsVW1WamRDNTNhV1IwYUNBcUlIUm9hWE11WDNOallXeGxXQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzWnBjMmxpYkdWU1pXTjBMbWhsYVdkb2RDQXFJSFJvYVhNdVgzTmpZV3hsV1NBcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ2RtbHphV0pzWlNCdmNtbG5hVzRnYjJZZ2RHaGxJSFpwWlhjZ2NHOXlkQzVjYmlBZ0lDQWdLaUFoSTNwb0lPaS9sT1dibnVpbmh1V2J2dWVxbCtXUG8rV1ByK2luZ2VXTXV1V2ZuK1dPbitlQ3VlT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdaMlYwVm1semFXSnNaVTl5YVdkcGJseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxWmxZeko5WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwVm1semFXSnNaVTl5YVdkcGJqb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJNdWRqSW9kR2hwY3k1ZmRtbHphV0pzWlZKbFkzUXVlQ3gwYUdsekxsOTJhWE5wWW14bFVtVmpkQzU1S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQXFJRkpsZEhWeWJuTWdkR2hsSUhacGMybGliR1VnYjNKcFoybHVJRzltSUhSb1pTQjJhV1YzSUhCdmNuUXVYRzRnSUNBZ0lDb2dJU042YUNEb3Y1VGxtNTdvcDRibG03N25xcGZsajZQbGo2L29wNEhsakxybG41L2xnNC9udEtEbGpwL25ncm5qZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdkbGRGWnBjMmxpYkdWUGNtbG5hVzVKYmxCcGVHVnNYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdWbVZqTW4xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSV2FYTnBZbXhsVDNKcFoybHVTVzVRYVhobGJEb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJNdWRqSW9kR2hwY3k1ZmRtbHphV0pzWlZKbFkzUXVlQ0FxSUhSb2FYTXVYM05qWVd4bFdDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkbWx6YVdKc1pWSmxZM1F1ZVNBcUlIUm9hWE11WDNOallXeGxXU2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0tpQlNaWFIxY201eklIUm9aU0JqZFhKeVpXNTBJSEpsYzI5c2RYUnBiMjRnY0c5c2FXTjVYRzRnSUNBZ0lDb2dJU042YUNEb3Y1VGxtNTdsdlpQbGlZM2xpSWJvdnFqbmpvZm1scm5tb1loY2JpQWdJQ0FnS2lCQWMyVmxJR05qTGxKbGMyOXNkWFJwYjI1UWIyeHBZM2xjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEZKbGMyOXNkWFJwYjI1UWIyeHBZM2xjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRTWlhOdmJIVjBhVzl1VUc5c2FXTjVmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRkpsYzI5c2RYUnBiMjVRYjJ4cFkzazZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psYzI5c2RYUnBiMjVRYjJ4cFkzazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCamRYSnlaVzUwSUhKbGMyOXNkWFJwYjI0Z2NHOXNhV041WEc0Z0lDQWdJQ29nSVNONmFDRG9ycjdudmE3bHZaUGxpWTNsaUlib3Zxam5qb2ZtcUtIbHZJOWNiaUFnSUNBZ0tpQkFjMlZsSUdOakxsSmxjMjlzZFhScGIyNVFiMnhwWTNsY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhObGRGSmxjMjlzZFhScGIyNVFiMnhwWTNsY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFKbGMyOXNkWFJwYjI1UWIyeHBZM2w4VG5WdFltVnlmU0J5WlhOdmJIVjBhVzl1VUc5c2FXTjVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVjBVbVZ6YjJ4MWRHbHZibEJ2YkdsamVUb2dablZ1WTNScGIyNGdLSEpsYzI5c2RYUnBiMjVRYjJ4cFkza3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBJRDBnZEdocGN6dGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMyOXNkWFJwYjI1UWIyeHBZM2tnYVc1emRHRnVZMlZ2WmlCall5NVNaWE52YkhWMGFXOXVVRzlzYVdONUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRDNWZjbVZ6YjJ4MWRHbHZibEJ2YkdsamVTQTlJSEpsYzI5c2RYUnBiMjVRYjJ4cFkzazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1JXNXpkWEpsSUdOdmJYQmhkR2xpYVd4cGRIa2dkMmwwYUNCS1UwSmNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1gyeHZZMUJ2YkdsamVTQTlJR05qTGxKbGMyOXNkWFJwYjI1UWIyeHBZM2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWh5WlhOdmJIVjBhVzl1VUc5c2FXTjVJRDA5UFNCZmJHOWpVRzlzYVdONUxrVllRVU5VWDBaSlZDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkQzVmY21WemIyeDFkR2x2YmxCdmJHbGplU0E5SUY5MExsOXljRVY0WVdOMFJtbDBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9jbVZ6YjJ4MWRHbHZibEJ2YkdsamVTQTlQVDBnWDJ4dlkxQnZiR2xqZVM1VFNFOVhYMEZNVENsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRDNWZjbVZ6YjJ4MWRHbHZibEJ2YkdsamVTQTlJRjkwTGw5eWNGTm9iM2RCYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmloeVpYTnZiSFYwYVc5dVVHOXNhV041SUQwOVBTQmZiRzlqVUc5c2FXTjVMazVQWDBKUFVrUkZVaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEM1ZmNtVnpiMngxZEdsdmJsQnZiR2xqZVNBOUlGOTBMbDl5Y0U1dlFtOXlaR1Z5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvY21WemIyeDFkR2x2YmxCdmJHbGplU0E5UFQwZ1gyeHZZMUJ2YkdsamVTNUdTVmhGUkY5SVJVbEhTRlFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNRdVgzSmxjMjlzZFhScGIyNVFiMnhwWTNrZ1BTQmZkQzVmY25CR2FYaGxaRWhsYVdkb2REdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUtISmxjMjlzZFhScGIyNVFiMnhwWTNrZ1BUMDlJRjlzYjJOUWIyeHBZM2t1UmtsWVJVUmZWMGxFVkVncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUXVYM0psYzI5c2RYUnBiMjVRYjJ4cFkza2dQU0JmZEM1ZmNuQkdhWGhsWkZkcFpIUm9PMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0tpQlRaWFJ6SUhSb1pTQnlaWE52YkhWMGFXOXVJSEJ2YkdsamVTQjNhWFJvSUdSbGMybG5ibVZrSUhacFpYY2djMmw2WlNCcGJpQndiMmx1ZEhNdVBHSnlMejVjYmlBZ0lDQWdLaUJVYUdVZ2NtVnpiMngxZEdsdmJpQndiMnhwWTNrZ2FXNWpiSFZrWlRvZ1BHSnlMejVjYmlBZ0lDQWdLaUJiTVYwZ1VtVnpiMngxZEdsdmJrVjRZV04wUm1sMElDQWdJQ0FnSUVacGJHd2djMk55WldWdUlHSjVJSE4wY21WMFkyZ3RkRzh0Wm1sME9pQnBaaUIwYUdVZ1pHVnphV2R1SUhKbGMyOXNkWFJwYjI0Z2NtRjBhVzhnYjJZZ2QybGtkR2dnZEc4Z2FHVnBaMmgwSUdseklHUnBabVpsY21WdWRDQm1jbTl0SUhSb1pTQnpZM0psWlc0Z2NtVnpiMngxZEdsdmJpQnlZWFJwYnl3Z2VXOTFjaUJuWVcxbElIWnBaWGNnZDJsc2JDQmlaU0J6ZEhKbGRHTm9aV1F1UEdKeUx6NWNiaUFnSUNBZ0tpQmJNbDBnVW1WemIyeDFkR2x2Yms1dlFtOXlaR1Z5SUNBZ0lDQWdJRVoxYkd3Z2MyTnlaV1Z1SUhkcGRHaHZkWFFnWW14aFkyc2dZbTl5WkdWeU9pQnBaaUIwYUdVZ1pHVnphV2R1SUhKbGMyOXNkWFJwYjI0Z2NtRjBhVzhnYjJZZ2QybGtkR2dnZEc4Z2FHVnBaMmgwSUdseklHUnBabVpsY21WdWRDQm1jbTl0SUhSb1pTQnpZM0psWlc0Z2NtVnpiMngxZEdsdmJpQnlZWFJwYnl3Z2RIZHZJR0Z5WldGeklHOW1JSGx2ZFhJZ1oyRnRaU0IyYVdWM0lIZHBiR3dnWW1VZ1kzVjBManhpY2k4K1hHNGdJQ0FnSUNvZ1d6TmRJRkpsYzI5c2RYUnBiMjVUYUc5M1FXeHNJQ0FnSUNBZ0lDQkdkV3hzSUhOamNtVmxiaUIzYVhSb0lHSnNZV05ySUdKdmNtUmxjam9nYVdZZ2RHaGxJR1JsYzJsbmJpQnlaWE52YkhWMGFXOXVJSEpoZEdsdklHOW1JSGRwWkhSb0lIUnZJR2hsYVdkb2RDQnBjeUJrYVdabVpYSmxiblFnWm5KdmJTQjBhR1VnYzJOeVpXVnVJSEpsYzI5c2RYUnBiMjRnY21GMGFXOHNJSFIzYnlCaWJHRmpheUJpYjNKa1pYSnpJSGRwYkd3Z1ltVWdjMmh2ZDI0dVBHSnlMejVjYmlBZ0lDQWdLaUJiTkYwZ1VtVnpiMngxZEdsdmJrWnBlR1ZrU0dWcFoyaDBJQ0FnSUZOallXeGxJSFJvWlNCamIyNTBaVzUwSjNNZ2FHVnBaMmgwSUhSdklITmpjbVZsYmlkeklHaGxhV2RvZENCaGJtUWdjSEp2Y0c5eWRHbHZibUZzYkhrZ2MyTmhiR1VnYVhSeklIZHBaSFJvUEdKeUx6NWNiaUFnSUNBZ0tpQmJOVjBnVW1WemIyeDFkR2x2YmtacGVHVmtWMmxrZEdnZ0lDQWdJRk5qWVd4bElIUm9aU0JqYjI1MFpXNTBKM01nZDJsa2RHZ2dkRzhnYzJOeVpXVnVKM01nZDJsa2RHZ2dZVzVrSUhCeWIzQnZjblJwYjI1aGJHeDVJSE5qWVd4bElHbDBjeUJvWldsbmFIUThZbkl2UGx4dUlDQWdJQ0FxSUZ0all5NVNaWE52YkhWMGFXOXVVRzlzYVdONVhTQWdJQ0FnSUNBZ1cxZGxZaUJ2Ym14NUlHWmxZWFIxY21WZElFTjFjM1J2YlNCeVpYTnZiSFYwYVc5dUlIQnZiR2xqZVN3Z1kyOXVjM1J5ZFdOMFpXUWdZbmtnWTJNdVVtVnpiMngxZEdsdmJsQnZiR2xqZVR4aWNpOCtYRzRnSUNBZ0lDb2dJU042YUNEcGdKcm92NGZvcnI3bnZhN29ycjdvcnFIbGlJYm92cWpuam9mbGtvemxqTG5waFkzbXFLSGx2SS9tbmFYb3Y1dm9vWXptdUxqbWlJL25sTHZwbmFMbm1vVGxzWS9sdVpYcGdJTHBoWTNqZ0lKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhObGRFUmxjMmxuYmxKbGMyOXNkWFJwYjI1VGFYcGxYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlIZHBaSFJvSUVSbGMybG5iaUJ5WlhOdmJIVjBhVzl1SUhkcFpIUm9MbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQm9aV2xuYUhRZ1JHVnphV2R1SUhKbGMyOXNkWFJwYjI0Z2FHVnBaMmgwTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VW1WemIyeDFkR2x2YmxCdmJHbGplWHhPZFcxaVpYSjlJSEpsYzI5c2RYUnBiMjVRYjJ4cFkza2dWR2hsSUhKbGMyOXNkWFJwYjI0Z2NHOXNhV041SUdSbGMybHlaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJFWlhOcFoyNVNaWE52YkhWMGFXOXVVMmw2WlRvZ1puVnVZM1JwYjI0Z0tIZHBaSFJvTENCb1pXbG5hSFFzSUhKbGMyOXNkWFJwYjI1UWIyeHBZM2twSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSR1ZtWlc1emFYWmxJR052WkdWY2JpQWdJQ0FnSUNBZ2FXWW9JQ0VvZDJsa2RHZ2dQaUF3SUh4OElHaGxhV2RvZENBK0lEQXBJQ2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZeTVzYjJkSlJDZ3lNakF3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVW1WemIyeDFkR2x2YmxCdmJHbGplU2h5WlhOdmJIVjBhVzl1VUc5c2FXTjVLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQnZiR2xqZVNBOUlIUm9hWE11WDNKbGMyOXNkWFJwYjI1UWIyeHBZM2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHdiMnhwWTNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmJHbGplUzV3Y21WQmNIQnNlU2gwYUdsektUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklGSmxhVzVwZENCbWNtRnRaU0J6YVhwbFhHNGdJQ0FnSUNBZ0lHbG1JQ2hqWXk1emVYTXVhWE5OYjJKcGJHVXBYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDloWkdwMWMzUldhV1YzY0c5eWRFMWxkR0VvS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJRWlhKdGFYUWdkRzhnY21VdFpHVjBaV04wSUhSb1pTQnZjbWxsYm5SaGRHbHZiaUJ2WmlCa1pYWnBZMlV1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjl5YVdWdWRHRjBhVzl1UTJoaGJtZHBibWNnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0F2THlCSlppQnlaWE5wZW1sdVp5d2dkR2hsYmlCbWNtRnRaU0J6YVhwbElHbHpJR0ZzY21WaFpIa2dhVzVwZEdsaGJHbDZaV1FzSUhSb2FYTWdiRzluYVdNZ2MyaHZkV3hrSUdKbElHbHRjSEp2ZG1Wa1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZjbVZ6YVhwcGJtY3BYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlwYm1sMFJuSmhiV1ZUYVhwbEtDazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRndiMnhwWTNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxteHZaMGxFS0RJeU1ERXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmIzSnBaMmx1WVd4RVpYTnBaMjVTWlhOdmJIVjBhVzl1VTJsNlpTNTNhV1IwYUNBOUlIUm9hWE11WDJSbGMybG5ibEpsYzI5c2RYUnBiMjVUYVhwbExuZHBaSFJvSUQwZ2QybGtkR2c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjl5YVdkcGJtRnNSR1Z6YVdkdVVtVnpiMngxZEdsdmJsTnBlbVV1YUdWcFoyaDBJRDBnZEdocGN5NWZaR1Z6YVdkdVVtVnpiMngxZEdsdmJsTnBlbVV1YUdWcFoyaDBJRDBnYUdWcFoyaDBPMXh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQndiMnhwWTNrdVlYQndiSGtvZEdocGN5d2dkR2hwY3k1ZlpHVnphV2R1VW1WemIyeDFkR2x2YmxOcGVtVXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUtISmxjM1ZzZEM1elkyRnNaU0FtSmlCeVpYTjFiSFF1YzJOaGJHVXViR1Z1WjNSb0lEMDlQU0F5S1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTmpZV3hsV0NBOUlISmxjM1ZzZEM1elkyRnNaVnN3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTmpZV3hsV1NBOUlISmxjM1ZzZEM1elkyRnNaVnN4WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtS0hKbGMzVnNkQzUyYVdWM2NHOXlkQ2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZG5BZ1BTQjBhR2x6TGw5MmFXVjNjRzl5ZEZKbFkzUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUlnUFNCMGFHbHpMbDkyYVhOcFlteGxVbVZqZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWRpQTlJSEpsYzNWc2RDNTJhV1YzY0c5eWREdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RuQXVlQ0E5SUhKMkxuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMmNDNTVJRDBnY25ZdWVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhad0xuZHBaSFJvSUQwZ2NuWXVkMmxrZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyY0M1b1pXbG5hSFFnUFNCeWRpNW9aV2xuYUhRN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhaaUxuZ2dQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUl1ZVNBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllpNTNhV1IwYUNBOUlISjJMbmRwWkhSb0lDOGdkR2hwY3k1ZmMyTmhiR1ZZTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUl1YUdWcFoyaDBJRDBnY25ZdWFHVnBaMmgwSUM4Z2RHaHBjeTVmYzJOaGJHVlpPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NHOXNhV041TG5CdmMzUkJjSEJzZVNoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnWTJNdWQybHVVMmw2WlM1M2FXUjBhQ0E5SUhSb2FYTXVYM1pwYzJsaWJHVlNaV04wTG5kcFpIUm9PMXh1SUNBZ0lDQWdJQ0JqWXk1M2FXNVRhWHBsTG1obGFXZG9kQ0E5SUhSb2FYTXVYM1pwYzJsaWJHVlNaV04wTG1obGFXZG9kRHRjYmx4dUlDQWdJQ0FnSUNCall5NTJhWE5wWW14bFVtVmpkQ0FtSmlCall5NTJhWE5wWW14bFVtVmpkQzVwYm1sMEtIUm9hWE11WDNacGMybGliR1ZTWldOMEtUdGNibHh1SUNBZ0lDQWdJQ0J5Wlc1a1pYSmxjaTUxY0dSaGRHVkRZVzFsY21GV2FXVjNjRzl5ZENncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUW9KMlJsYzJsbmJpMXlaWE52YkhWMGFXOXVMV05vWVc1blpXUW5LVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJseHVJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ2RHaGxJR1JsYzJsbmJtVmtJSE5wZW1VZ1ptOXlJSFJvWlNCMmFXVjNMbHh1SUNBZ0lDQXFJRVJsWm1GMWJIUWdjbVZ6YjJ4MWRHbHZiaUJ6YVhwbElHbHpJSFJvWlNCellXMWxJR0Z6SUNkblpYUkdjbUZ0WlZOcGVtVW5MbHh1SUNBZ0lDQXFJQ0VqZW1nZzZMK1U1WnVlNktlRzVadSs1NXFFNks2KzZLNmg1WWlHNkw2bzU0Nkg0NENDWEc0Z0lDQWdJQ29nNmJ1WTZLNms1TGlMNVlpRzZMNm81NDZINWJDNjVhKzQ1WkNNSUdCblpYUkdjbUZ0WlZOcGVtVmdJT2FXdWVhemxlZWJ1T1dRakZ4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWjJWMFJHVnphV2R1VW1WemIyeDFkR2x2YmxOcGVtVmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFRhWHBsZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEVSbGMybG5ibEpsYzI5c2RYUnBiMjVUYVhwbE9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqWXk1emFYcGxLSFJvYVhNdVgyUmxjMmxuYmxKbGMyOXNkWFJwYjI1VGFYcGxMbmRwWkhSb0xDQjBhR2x6TGw5a1pYTnBaMjVTWlhOdmJIVjBhVzl1VTJsNlpTNW9aV2xuYUhRcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nVTJWMGN5QjBhR1VnWTI5dWRHRnBibVZ5SUhSdklHUmxjMmx5WldRZ2NHbDRaV3dnY21WemIyeDFkR2x2YmlCaGJtUWdabWwwSUhSb1pTQm5ZVzFsSUdOdmJuUmxiblFnZEc4Z2FYUXVYRzRnSUNBZ0lDb2dWR2hwY3lCbWRXNWpkR2x2YmlCcGN5QjJaWEo1SUhWelpXWjFiQ0JtYjNJZ1lXUmhjSFJoZEdsdmJpQnBiaUJ0YjJKcGJHVWdZbkp2ZDNObGNuTXVYRzRnSUNBZ0lDb2dTVzRnYzI5dFpTQklSQ0JoYm1SeWIybGtJR1JsZG1salpYTXNJSFJvWlNCeVpYTnZiSFYwYVc5dUlHbHpJSFpsY25rZ2FHbG5hQ3dnWW5WMElHbDBjeUJpY205M2MyVnlJSEJsY21admNtMWhibU5sSUcxaGVTQnViM1FnWW1VZ2RtVnllU0JuYjI5a0xseHVJQ0FnSUNBcUlFbHVJSFJvYVhNZ1kyRnpaU3dnWlc1aFlteHBibWNnY21WMGFXNWhJR1JwYzNCc1lYa2dhWE1nZG1WeWVTQmpiM04wZVNCaGJtUWdibTkwSUhOMVoyZGxjM1JsWkN3Z1lXNWtJR2xtSUhKbGRHbHVZU0JwY3lCa2FYTmhZbXhsWkN3Z2RHaGxJR2x0WVdkbElHMWhlU0JpWlNCaWJIVnljbmt1WEc0Z0lDQWdJQ29nUW5WMElIUm9hWE1nUVZCSklHTmhiaUJpWlNCb1pXeHdablZzSUhSdklITmxkQ0JoSUdSbGMybHlaV1FnY0dsNFpXd2djbVZ6YjJ4MWRHbHZiaUIzYUdsamFDQnBjeUJwYmlCaVpYUjNaV1Z1TGx4dUlDQWdJQ0FxSUZSb2FYTWdRVkJKSUhkcGJHd2daRzhnZEdobElHWnZiR3h2ZDJsdVp6cGNiaUFnSUNBZ0tpQWdJQ0FnTVM0Z1UyVjBJSFpwWlhkd2IzSjBKM01nZDJsa2RHZ2dkRzhnZEdobElHUmxjMmx5WldRZ2QybGtkR2dnYVc0Z2NHbDRaV3hjYmlBZ0lDQWdLaUFnSUNBZ01pNGdVMlYwSUdKdlpIa2dkMmxrZEdnZ2RHOGdkR2hsSUdWNFlXTjBJSEJwZUdWc0lISmxjMjlzZFhScGIyNWNiaUFnSUNBZ0tpQWdJQ0FnTXk0Z1ZHaGxJSEpsYzI5c2RYUnBiMjRnY0c5c2FXTjVJSGRwYkd3Z1ltVWdjbVZ6WlhRZ2QybDBhQ0JrWlhOcFoyNWxaQ0IyYVdWM0lITnBlbVVnYVc0Z2NHOXBiblJ6TGx4dUlDQWdJQ0FxSUNFamVtZ2c2SzYrNTcydTVhNjU1Wm1vNzd5SVkyOXVkR0ZwYm1WeTc3eUo2WnlBNkthQjU1cUU1WU9QNTdTZzVZaUc2TDZvNTQ2SDVibTI1TGlVNllDQzZZV041NXU0NWJxVTVZaUc2TDZvNTQ2SDU1cUU1cmk0NW9pUDVZYUY1YTY1NDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCelpYUlNaV0ZzVUdsNFpXeFNaWE52YkhWMGFXOXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlIZHBaSFJvSUVSbGMybG5iaUJ5WlhOdmJIVjBhVzl1SUhkcFpIUm9MbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQm9aV2xuYUhRZ1JHVnphV2R1SUhKbGMyOXNkWFJwYjI0Z2FHVnBaMmgwTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VW1WemIyeDFkR2x2YmxCdmJHbGplWHhPZFcxaVpYSjlJSEpsYzI5c2RYUnBiMjVRYjJ4cFkza2dWR2hsSUhKbGMyOXNkWFJwYjI0Z2NHOXNhV041SUdSbGMybHlaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJTWldGc1VHbDRaV3hTWlhOdmJIVjBhVzl1T2lCbWRXNWpkR2x2YmlBb2QybGtkR2dzSUdobGFXZG9kQ3dnY21WemIyeDFkR2x2YmxCdmJHbGplU2tnZTF4dUlDQWdJQ0FnSUNBdkx5Qk9UMVJGT2lCdWIzUWdiV1Z5WjJVZ2FXNTBieUIyTWk0eUxqQXNJRzF2ZG1VZ2FXNTBieUJCYkdsd1lYa2dZV1JoY0hSbGNseHVJQ0FnSUNBZ0lDQnBaaUFvSVVORFgwcFRRaUFtSmlBaFEwTmZVbFZPVkVsTlJTQW1KaUFoUTBOZlYwVkRTRUZVUjBGTlJTQW1KaUFoUTBOZlVWRlFURUZaSUNZbUlDRnBjMEpoYVdSMVIyRnRaU0FtSmlBaGFYTllhV0Z2YldsSFlXMWxJQ1ltSUNGcGMwRnNhWEJoZVVkaGJXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk5sZENCMmFXVjNjRzl5ZENkeklIZHBaSFJvWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5elpYUldhV1YzY0c5eWRFMWxkR0VvZTF3aWQybGtkR2hjSWpvZ2QybGtkR2g5TENCMGNuVmxLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVTJWMElHSnZaSGtnZDJsa2RHZ2dkRzhnZEdobElHVjRZV04wSUhCcGVHVnNJSEpsYzI5c2RYUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZEM1emRIbHNaUzUzYVdSMGFDQTlJSGRwWkhSb0lDc2dYQ0p3ZUZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WW05a2VTNXpkSGxzWlM1M2FXUjBhQ0E5SUhkcFpIUm9JQ3NnWENKd2VGd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVltOWtlUzV6ZEhsc1pTNXNaV1owSUQwZ1hDSXdjSGhjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUp2WkhrdWMzUjViR1V1ZEc5d0lEMGdYQ0l3Y0hoY0lqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklGSmxjMlYwSUhSb1pTQnlaWE52YkhWMGFXOXVJSE5wZW1VZ1lXNWtJSEJ2YkdsamVWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFUmxjMmxuYmxKbGMyOXNkWFJwYjI1VGFYcGxLSGRwWkhSb0xDQm9aV2xuYUhRc0lISmxjMjlzZFhScGIyNVFiMnhwWTNrcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nVTJWMGN5QjJhV1YzSUhCdmNuUWdjbVZqZEdGdVoyeGxJSGRwZEdnZ2NHOXBiblJ6TGx4dUlDQWdJQ0FxSUNFamVtZ2c1NVNvNks2KzZLNmg1WWlHNkw2bzU0Nkg1TGlMNTVxRTU0SzU1YkM2NWErNDVwMmw2SzYrNTcydTZLZUc1NnFYNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCelpYUldhV1YzY0c5eWRFbHVVRzlwYm5SelhHNGdJQ0FnSUNvZ1FHUmxjSEpsWTJGMFpXUWdjMmx1WTJVZ2RqSXVNRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQjRYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlIbGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2R5QjNhV1IwYUZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JvSUdobGFXZG9kRnh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxkRlpwWlhkd2IzSjBTVzVRYjJsdWRITTZJR1oxYm1OMGFXOXVJQ2g0TENCNUxDQjNMQ0JvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJzYjJOVFkyRnNaVmdnUFNCMGFHbHpMbDl6WTJGc1pWZ3NJR3h2WTFOallXeGxXU0E5SUhSb2FYTXVYM05qWVd4bFdUdGNiaUFnSUNBZ0lDQWdZMk11WjJGdFpTNWZjbVZ1WkdWeVEyOXVkR1Y0ZEM1MmFXVjNjRzl5ZENnb2VDQXFJR3h2WTFOallXeGxXQ0FySUhSb2FYTXVYM1pwWlhkd2IzSjBVbVZqZEM1NEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNoNUlDb2diRzlqVTJOaGJHVlpJQ3NnZEdocGN5NWZkbWxsZDNCdmNuUlNaV04wTG5rcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0hjZ0tpQnNiMk5UWTJGc1pWZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHZ2dLaUJzYjJOVFkyRnNaVmtwS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQXFJRk5sZEhNZ1UyTnBjM052Y2lCeVpXTjBZVzVuYkdVZ2QybDBhQ0J3YjJsdWRITXVYRzRnSUNBZ0lDb2dJU042YUNEbmxLam9ycjdvcnFIbGlJYm92cWpuam9ma3VJdm5tb1RuZ3Jubm1vVGxzTHJscjdqbW5hWG9ycjdudmE0Z2MyTnBjM052Y2lEbGlhcm9vNEhsakxybG41L2pnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJSE5sZEZOamFYTnpiM0pKYmxCdmFXNTBjMXh1SUNBZ0lDQXFJRUJrWlhCeVpXTmhkR1ZrSUhOcGJtTmxJSFl5TGpCY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZUZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0I1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJSGRjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdhRnh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxkRk5qYVhOemIzSkpibEJ2YVc1MGN6b2dablZ1WTNScGIyNGdLSGdzSUhrc0lIY3NJR2dwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJSE5qWVd4bFdDQTlJSFJvYVhNdVgzTmpZV3hsV0N3Z2MyTmhiR1ZaSUQwZ2RHaHBjeTVmYzJOaGJHVlpPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2MzZ2dQU0JOWVhSb0xtTmxhV3dvZUNBcUlITmpZV3hsV0NBcklIUm9hWE11WDNacFpYZHdiM0owVW1WamRDNTRLVHRjYmlBZ0lDQWdJQ0FnYkdWMElITjVJRDBnVFdGMGFDNWpaV2xzS0hrZ0tpQnpZMkZzWlZrZ0t5QjBhR2x6TGw5MmFXVjNjRzl5ZEZKbFkzUXVlU2s3WEc0Z0lDQWdJQ0FnSUd4bGRDQnpkeUE5SUUxaGRHZ3VZMlZwYkNoM0lDb2djMk5oYkdWWUtUdGNiaUFnSUNBZ0lDQWdiR1YwSUhOb0lEMGdUV0YwYUM1alpXbHNLR2dnS2lCelkyRnNaVmtwTzF4dUlDQWdJQ0FnSUNCc1pYUWdaMndnUFNCall5NW5ZVzFsTGw5eVpXNWtaWEpEYjI1MFpYaDBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hYM05qYVhOemIzSlNaV04wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1ltOTRRWEp5SUQwZ1oyd3VaMlYwVUdGeVlXMWxkR1Z5S0dkc0xsTkRTVk5UVDFKZlFrOVlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOXpZMmx6YzI5eVVtVmpkQ0E5SUdOakxuSmxZM1FvWW05NFFYSnlXekJkTENCaWIzaEJjbkpiTVYwc0lHSnZlRUZ5Y2xzeVhTd2dZbTk0UVhKeVd6TmRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hmYzJOcGMzTnZjbEpsWTNRdWVDQWhQVDBnYzNnZ2ZId2dYM05qYVhOemIzSlNaV04wTG5rZ0lUMDlJSE41SUh4OElGOXpZMmx6YzI5eVVtVmpkQzUzYVdSMGFDQWhQVDBnYzNjZ2ZId2dYM05qYVhOemIzSlNaV04wTG1obGFXZG9kQ0FoUFQwZ2MyZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOXpZMmx6YzI5eVVtVmpkQzU0SUQwZ2MzZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmMyTnBjM052Y2xKbFkzUXVlU0E5SUhONU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNOamFYTnpiM0pTWldOMExuZHBaSFJvSUQwZ2MzYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmMyTnBjM052Y2xKbFkzUXVhR1ZwWjJoMElEMGdjMmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5iQzV6WTJsemMyOXlLSE40TENCemVTd2djM2NzSUhOb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdVhHNGdJQ0FnSUNvZ1VtVjBkWEp1Y3lCM2FHVjBhR1Z5SUVkTVgxTkRTVk5UVDFKZlZFVlRWQ0JwY3lCbGJtRmliR1ZjYmlBZ0lDQWdLaUFoSTNwb0lPYWpnT2FmcFNCelkybHpjMjl5SU9hWXIrV1FwdWVVbithVmlPT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdhWE5UWTJsemMyOXlSVzVoWW14bFpGeHVJQ0FnSUNBcUlFQmtaWEJ5WldOaGRHVmtJSE5wYm1ObElIWXlMakJjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRDYjI5c1pXRnVmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHbHpVMk5wYzNOdmNrVnVZV0pzWldRNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05qTG1kaGJXVXVYM0psYm1SbGNrTnZiblJsZUhRdWFYTkZibUZpYkdWa0tHZHNMbE5EU1ZOVFQxSmZWRVZUVkNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJSFJvWlNCamRYSnlaVzUwSUhOamFYTnpiM0lnY21WamRHRnVaMnhsWEc0Z0lDQWdJQ29nSVNONmFDRG92NVRsbTU3bHZaUGxpWTNubW9RZ2MyTnBjM052Y2lEbGlhcm9vNEhsakxybG41L2pnSUpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEZOamFYTnpiM0pTWldOMFhHNGdJQ0FnSUNvZ1FHUmxjSEpsWTJGMFpXUWdjMmx1WTJVZ2RqSXVNRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMUpsWTNSOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMFUyTnBjM052Y2xKbFkzUTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZmYzJOcGMzTnZjbEpsWTNRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmliM2hCY25JZ1BTQm5iQzVuWlhSUVlYSmhiV1YwWlhJb1oyd3VVME5KVTFOUFVsOUNUMWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdYM05qYVhOemIzSlNaV04wSUQwZ1kyTXVjbVZqZENoaWIzaEJjbkpiTUYwc0lHSnZlRUZ5Y2xzeFhTd2dZbTk0UVhKeVd6SmRMQ0JpYjNoQmNuSmJNMTBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUJ6WTJGc1pWaEdZV04wYjNJZ1BTQXhJQzhnZEdocGN5NWZjMk5oYkdWWU8xeHVJQ0FnSUNBZ0lDQjJZWElnYzJOaGJHVlpSbUZqZEc5eUlEMGdNU0F2SUhSb2FYTXVYM05qWVd4bFdUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmpMbkpsWTNRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWDNOamFYTnpiM0pTWldOMExuZ2dMU0IwYUdsekxsOTJhV1YzY0c5eWRGSmxZM1F1ZUNrZ0tpQnpZMkZzWlZoR1lXTjBiM0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9YM05qYVhOemIzSlNaV04wTG5rZ0xTQjBhR2x6TGw5MmFXVjNjRzl5ZEZKbFkzUXVlU2tnS2lCelkyRnNaVmxHWVdOMGIzSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCZmMyTnBjM052Y2xKbFkzUXVkMmxrZEdnZ0tpQnpZMkZzWlZoR1lXTjBiM0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmZjMk5wYzNOdmNsSmxZM1F1YUdWcFoyaDBJQ29nYzJOaGJHVlpSbUZqZEc5eVhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUhSb1pTQjJhV1YzSUhCdmNuUWdjbVZqZEdGdVoyeGxMbHh1SUNBZ0lDQXFJQ0VqZW1nZzZMK1U1WnVlNktlRzU2cVg1WW1xNktPQjVZeTY1WitmNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCblpYUldhV1YzY0c5eWRGSmxZM1JjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRTWldOMGZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRGWnBaWGR3YjNKMFVtVmpkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZG1sbGQzQnZjblJTWldOME8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nVW1WMGRYSnVjeUJ6WTJGc1pTQm1ZV04wYjNJZ2IyWWdkR2hsSUdodmNtbDZiMjUwWVd3Z1pHbHlaV04wYVc5dUlDaFlJR0Y0YVhNcExseHVJQ0FnSUNBcUlDRWplbWdnNkwrVTVadWU1cWlxNkwyMDU1cUU1N3lwNXBTKzVxK1U3N3lNNkwrWjVMaXE1N3lwNXBTKzVxK1U1cGl2NWJDRzU1Uzc1YmlENVlPUDU3U2c1WWlHNkw2bzU0Nkg1cFMrNVlpdzZLNis2SzZoNVlpRzZMNm81NDZINTVxRTVxK1U1TDZMNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCblpYUlRZMkZzWlZoY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0T2RXMWlaWEo5WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwVTJOaGJHVllPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6WTJGc1pWZzdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUhOallXeGxJR1poWTNSdmNpQnZaaUIwYUdVZ2RtVnlkR2xqWVd3Z1pHbHlaV04wYVc5dUlDaFpJR0Y0YVhNcExseHVJQ0FnSUNBcUlDRWplbWdnNkwrVTVadWU1N3ExNkwyMDU1cUU1N3lwNXBTKzVxK1U3N3lNNkwrWjVMaXE1N3lwNXBTKzVxK1U1cGl2NWJDRzU1Uzc1YmlENVlPUDU3U2c1WWlHNkw2bzU0Nkg1N3lwNXBTKzVZaXc2SzYrNks2aDVZaUc2TDZvNTQ2SDU1cUU1cStVNUw2TDQ0Q0NYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQm5aWFJUWTJGc1pWbGNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMFUyTmhiR1ZaT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5elkyRnNaVms3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0tpQlNaWFIxY201eklHUmxkbWxqWlNCd2FYaGxiQ0J5WVhScGJ5Qm1iM0lnY21WMGFXNWhJR1JwYzNCc1lYa3VYRzRnSUNBZ0lDb2dJU042YUNEb3Y1VGxtNTdvcnI3bHBJZm1pSmJtdFkvb3A0amxtYWpsZzQvbnRLRG1yNVRrdm92amdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHZGxkRVJsZG1salpWQnBlR1ZzVW1GMGFXOWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdE9kVzFpWlhKOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMFJHVjJhV05sVUdsNFpXeFNZWFJwYnpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5a1pYWnBZMlZRYVhobGJGSmhkR2x2TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVYRzRnSUNBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnY21WaGJDQnNiMk5oZEdsdmJpQnBiaUIyYVdWM0lHWnZjaUJoSUhSeVlXNXpiR0YwYVc5dUlHSmhjMlZrSUc5dUlHRWdjbVZzWVhSbFpDQndiM05wZEdsdmJseHVJQ0FnSUNBcUlDRWplbWdnNWJDRzViR1A1Ym1WNVoyUTVxQ0g2TDJzNW8yaTVMaTY1cmk0NW9pUDZLZUc1WnUrNUxpTDU1cUU1WjJRNXFDSDQ0Q0NYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQmpiMjUyWlhKMFZHOU1iMk5oZEdsdmJrbHVWbWxsZDF4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0IwZUNBdElGUm9aU0JZSUdGNGFYTWdkSEpoYm5Oc1lYUnBiMjVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdkSGtnTFNCVWFHVWdXU0JoZUdseklIUnlZVzV6YkdGMGFXOXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlISmxiR0YwWldSUWIzTWdMU0JVYUdVZ2NtVnNZWFJsWkNCd2IzTnBkR2x2YmlCdlltcGxZM1FnYVc1amJIVmthVzVuSUZ3aWJHVm1kRndpTENCY0luUnZjRndpTENCY0luZHBaSFJvWENJc0lGd2lhR1ZwWjJoMFhDSWdhVzVtYjNKdFlYUnBiMjV6WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3Vm1Wak1uMWNiaUFnSUNBZ0tpOWNiaUFnSUNCamIyNTJaWEowVkc5TWIyTmhkR2x2YmtsdVZtbGxkem9nWm5WdVkzUnBiMjRnS0hSNExDQjBlU3dnY21Wc1lYUmxaRkJ2Y3l3Z2IzVjBLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQnZkWFFnZkh3Z1kyTXVkaklvS1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJSGdnUFNCMGFHbHpMbDlrWlhacFkyVlFhWGhsYkZKaGRHbHZJQ29nS0hSNElDMGdjbVZzWVhSbFpGQnZjeTVzWldaMEtUdGNiaUFnSUNBZ0lDQWdiR1YwSUhrZ1BTQjBhR2x6TGw5a1pYWnBZMlZRYVhobGJGSmhkR2x2SUNvZ0tISmxiR0YwWldSUWIzTXVkRzl3SUNzZ2NtVnNZWFJsWkZCdmN5NW9aV2xuYUhRZ0xTQjBlU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5cGMxSnZkR0YwWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQzU0SUQwZ1kyTXVaMkZ0WlM1allXNTJZWE11ZDJsa2RHZ2dMU0I1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MExua2dQU0I0TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MExuZ2dQU0I0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MExua2dQU0I1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjlqYjI1MlpYSjBUVzkxYzJWVWIweHZZMkYwYVc5dVNXNVdhV1YzT2lCbWRXNWpkR2x2YmlBb2FXNWZiM1YwWDNCdmFXNTBMQ0J5Wld4aGRHVmtVRzl6S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUIyYVdWM2NHOXlkQ0E5SUhSb2FYTXVYM1pwWlhkd2IzSjBVbVZqZEN3Z1gzUWdQU0IwYUdsek8xeHVJQ0FnSUNBZ0lDQnBibDl2ZFhSZmNHOXBiblF1ZUNBOUlDZ29YM1F1WDJSbGRtbGpaVkJwZUdWc1VtRjBhVzhnS2lBb2FXNWZiM1YwWDNCdmFXNTBMbmdnTFNCeVpXeGhkR1ZrVUc5ekxteGxablFwS1NBdElIWnBaWGR3YjNKMExuZ3BJQzhnWDNRdVgzTmpZV3hsV0R0Y2JpQWdJQ0FnSUNBZ2FXNWZiM1YwWDNCdmFXNTBMbmtnUFNBb1gzUXVYMlJsZG1salpWQnBlR1ZzVW1GMGFXOGdLaUFvY21Wc1lYUmxaRkJ2Y3k1MGIzQWdLeUJ5Wld4aGRHVmtVRzl6TG1obGFXZG9kQ0F0SUdsdVgyOTFkRjl3YjJsdWRDNTVLU0F0SUhacFpYZHdiM0owTG5rcElDOGdYM1F1WDNOallXeGxXVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMk52Ym5abGNuUlFiMmx1ZEZkcGRHaFRZMkZzWlRvZ1puVnVZM1JwYjI0Z0tIQnZhVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUIyYVdWM2NHOXlkQ0E5SUhSb2FYTXVYM1pwWlhkd2IzSjBVbVZqZER0Y2JpQWdJQ0FnSUNBZ2NHOXBiblF1ZUNBOUlDaHdiMmx1ZEM1NElDMGdkbWxsZDNCdmNuUXVlQ2tnTHlCMGFHbHpMbDl6WTJGc1pWZzdYRzRnSUNBZ0lDQWdJSEJ2YVc1MExua2dQU0FvY0c5cGJuUXVlU0F0SUhacFpYZHdiM0owTG5rcElDOGdkR2hwY3k1ZmMyTmhiR1ZaTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmWTI5dWRtVnlkRlJ2ZFdOb1pYTlhhWFJvVTJOaGJHVTZJR1oxYm1OMGFXOXVJQ2gwYjNWamFHVnpLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjJhV1YzY0c5eWRDQTlJSFJvYVhNdVgzWnBaWGR3YjNKMFVtVmpkQ3dnYzJOaGJHVllJRDBnZEdocGN5NWZjMk5oYkdWWUxDQnpZMkZzWlZrZ1BTQjBhR2x6TGw5elkyRnNaVmtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaV3hVYjNWamFDd2djMlZzVUc5cGJuUXNJSE5sYkZCeVpWQnZhVzUwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUnZkV05vWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiRlJ2ZFdOb0lEMGdkRzkxWTJobGMxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiRkJ2YVc1MElEMGdjMlZzVkc5MVkyZ3VYM0J2YVc1ME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1VISmxVRzlwYm5RZ1BTQnpaV3hVYjNWamFDNWZjSEpsZGxCdmFXNTBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaV3hRYjJsdWRDNTRJRDBnS0hObGJGQnZhVzUwTG5nZ0xTQjJhV1YzY0c5eWRDNTRLU0F2SUhOallXeGxXRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiRkJ2YVc1MExua2dQU0FvYzJWc1VHOXBiblF1ZVNBdElIWnBaWGR3YjNKMExua3BJQzhnYzJOaGJHVlpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNVSEpsVUc5cGJuUXVlQ0E5SUNoelpXeFFjbVZRYjJsdWRDNTRJQzBnZG1sbGQzQnZjblF1ZUNrZ0x5QnpZMkZzWlZnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Wld4UWNtVlFiMmx1ZEM1NUlEMGdLSE5sYkZCeVpWQnZhVzUwTG5rZ0xTQjJhV1YzY0c5eWRDNTVLU0F2SUhOallXeGxXVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4wcE8xeHVYRzR2S2lwY2JpQXFJQ0ZsYmx4dUlDb2dSVzFwZENCM2FHVnVJR1JsYzJsbmJpQnlaWE52YkhWMGFXOXVJR05vWVc1blpXUXVYRzRnS2lBaGVtaGNiaUFxSU9XOWsraXV2dWl1b2VXSWh1aStxT2VPaCthVXVlV1BtT2FYdHVXUGtlbUFnZU9BZ2x4dUlDb2dRR1YyWlc1MElHUmxjMmxuYmkxeVpYTnZiSFYwYVc5dUxXTm9ZVzVuWldSY2JpQXFMMXh1SUM4cUtseHVJQ29nSVdWdVhHNGdLaUJGYldsMElIZG9aVzRnWTJGdWRtRnpJSEpsYzJsNlpTNWNiaUFxSUNGNmFGeHVJQ29nNWIyVDU1Uzc1YmlENWFTbjViQ1A1cFM1NVkrWTVwZTI1WStSNllDQjQ0Q0NYRzRnS2lCQVpYWmxiblFnWTJGdWRtRnpMWEpsYzJsNlpWeHVJQ292WEc1Y2JseHVMeW9xWEc0Z0tpQThjRDVqWXk1bllXMWxMbU52Ym5SaGFXNWxjbE4wY21GMFpXZDVJR05zWVhOeklHbHpJSFJvWlNCeWIyOTBJSE4wY21GMFpXZDVJR05zWVhOeklHOW1JR052Ym5SaGFXNWxjaWR6SUhOallXeGxJSE4wY21GMFpXZDVMRnh1SUNvZ2FYUWdZMjl1ZEhKdmJITWdkR2hsSUdKbGFHRjJhVzl5SUc5bUlHaHZkeUIwYnlCelkyRnNaU0IwYUdVZ1kyTXVaMkZ0WlM1amIyNTBZV2x1WlhJZ1lXNWtJR05qTG1kaGJXVXVZMkZ1ZG1GeklHOWlhbVZqZER3dmNENWNiaUFxWEc0Z0tpQkFZMnhoYzNNZ1EyOXVkR0ZwYm1WeVUzUnlZWFJsWjNsY2JpQXFMMXh1WTJNdVEyOXVkR0ZwYm1WeVUzUnlZWFJsWjNrZ1BTQmpZeTVEYkdGemN5aDdYRzRnSUNBZ2JtRnRaVG9nWENKRGIyNTBZV2x1WlhKVGRISmhkR1ZuZVZ3aUxGeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdLaUJOWVc1cGNIVnNZWFJwYjI0Z1ltVm1iM0psSUdGd2NHeHBibWNnZEdobElITjBjbUYwWldkNVhHNGdJQ0FnSUNvZ0lTTjZhQ0RsbktqbHVwVG5sS2puclpibmxhWGt1WXZsaVkzbm1vVG1rNDNrdlp4Y2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhCeVpVRndjR3g1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRXYVdWM2ZTQjJhV1YzSUMwZ1ZHaGxJSFJoY21kbGRDQjJhV1YzWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSEpsUVhCd2JIazZJR1oxYm1OMGFXOXVJQ2gyYVdWM0tTQjdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnS2lCR2RXNWpkR2x2YmlCMGJ5QmhjSEJzZVNCMGFHbHpJSE4wY21GMFpXZDVYRzRnSUNBZ0lDb2dJU042YUNEbnJaYm5sYVhsdXBUbmxLam1scm5tczVWY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdGd2NHeDVYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFdhV1YzZlNCMmFXVjNYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRhWHBsZlNCa1pYTnBaMjVsWkZKbGMyOXNkWFJwYjI1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JoY0hCc2VUb2dablZ1WTNScGIyNGdLSFpwWlhjc0lHUmxjMmxuYm1Wa1VtVnpiMngxZEdsdmJpa2dlMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdVhHNGdJQ0FnSUNvZ1RXRnVhWEIxYkdGMGFXOXVJR0ZtZEdWeUlHRndjR3g1YVc1bklIUm9aU0J6ZEhKaGRHVm5lVnh1SUNBZ0lDQXFJQ0VqZW1nZzU2Mlc1NVdsNkxDRDU1U281TG1MNVpDTzU1cUU1cE9ONUwyY1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCd2IzTjBRWEJ3YkhsY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFacFpYZDlJSFpwWlhjZ0lGUm9aU0IwWVhKblpYUWdkbWxsZDF4dUlDQWdJQ0FxTDF4dUlDQWdJSEJ2YzNSQmNIQnNlVG9nWm5WdVkzUnBiMjRnS0hacFpYY3BJSHRjYmx4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmYzJWMGRYQkRiMjUwWVdsdVpYSTZJR1oxYm1OMGFXOXVJQ2gyYVdWM0xDQjNMQ0JvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJzYjJORFlXNTJZWE1nUFNCall5NW5ZVzFsTG1OaGJuWmhjeXdnYkc5alEyOXVkR0ZwYm1WeUlEMGdZMk11WjJGdFpTNWpiMjUwWVdsdVpYSTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1RrOVVSVG9nYm05MElHMWxjbWRsSUdsdWRHOGdkakl1TWk0d0xDQnRiM1psSUdsdWRHOGdRV3hwY0dGNUlHRmtZWEIwWlhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZEUTE5WFJVTklRVlJIUVUxRklDWW1JQ0ZwYzBKaGFXUjFSMkZ0WlNBbUppQWhhWE5ZYVdGdmJXbEhZVzFsSUNZbUlDRnBjMEZzYVhCaGVVZGhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoall5NXplWE11YjNNZ1BUMDlJR05qTG5ONWN5NVBVMTlCVGtSU1QwbEVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WW05a2VTNXpkSGxzWlM1M2FXUjBhQ0E5SUNoMmFXVjNMbDlwYzFKdmRHRjBaV1FnUHlCb0lEb2dkeWtnS3lBbmNIZ25PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUp2WkhrdWMzUjViR1V1YUdWcFoyaDBJRDBnS0hacFpYY3VYMmx6VW05MFlYUmxaQ0EvSUhjZ09pQm9LU0FySUNkd2VDYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVFpYUjFjQ0J6ZEhsc1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnYkc5alEyOXVkR0ZwYm1WeUxuTjBlV3hsTG5kcFpIUm9JRDBnYkc5alEyRnVkbUZ6TG5OMGVXeGxMbmRwWkhSb0lEMGdkeUFySUNkd2VDYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCc2IyTkRiMjUwWVdsdVpYSXVjM1I1YkdVdWFHVnBaMmgwSUQwZ2JHOWpRMkZ1ZG1GekxuTjBlV3hsTG1obGFXZG9kQ0E5SUdnZ0t5QW5jSGduTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJRk5sZEhWd0lIQnBlR1ZzSUhKaGRHbHZJR1p2Y2lCeVpYUnBibUVnWkdsemNHeGhlVnh1SUNBZ0lDQWdJQ0IyWVhJZ1pHVjJhV05sVUdsNFpXeFNZWFJwYnlBOUlIWnBaWGN1WDJSbGRtbGpaVkJwZUdWc1VtRjBhVzhnUFNBeE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZG1sbGR5NXBjMUpsZEdsdVlVVnVZV0pzWldRb0tTbGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGRtbGpaVkJwZUdWc1VtRjBhVzhnUFNCMmFXVjNMbDlrWlhacFkyVlFhWGhsYkZKaGRHbHZJRDBnVFdGMGFDNXRhVzRvZG1sbGR5NWZiV0Y0VUdsNFpXeFNZWFJwYnl3Z2QybHVaRzkzTG1SbGRtbGpaVkJwZUdWc1VtRjBhVzhnZkh3Z01TazdYRzRnSUNBZ0lDQWdJQzh2SUZObGRIVndJR05oYm5aaGMxeHVJQ0FnSUNBZ0lDQnNiMk5EWVc1MllYTXVkMmxrZEdnZ1BTQjNJQ29nWkdWMmFXTmxVR2w0Wld4U1lYUnBienRjYmlBZ0lDQWdJQ0FnYkc5alEyRnVkbUZ6TG1obGFXZG9kQ0E5SUdnZ0tpQmtaWFpwWTJWUWFYaGxiRkpoZEdsdk8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCZlptbDRRMjl1ZEdGcGJtVnlPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRUZrWkNCamIyNTBZV2x1WlhJZ2RHOGdaRzlqZFcxbGJuUWdZbTlrZVZ4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1aWIyUjVMbWx1YzJWeWRFSmxabTl5WlNoall5NW5ZVzFsTG1OdmJuUmhhVzVsY2l3Z1pHOWpkVzFsYm5RdVltOWtlUzVtYVhKemRFTm9hV3hrS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdVMlYwSUdKdlpIa25jeUIzYVdSMGFDQm9aV2xuYUhRZ2RHOGdkMmx1Wkc5M0ozTWdjMmw2WlN3Z1lXNWtJR1p2Y21KcFpDQnZkbVZ5Wm14dmR5d2djMjhnZEdoaGRDQm5ZVzFsSUhkcGJHd2dZbVVnWTJWdWRHVnlaV1JjYmlBZ0lDQWdJQ0FnZG1GeUlHSnpJRDBnWkc5amRXMWxiblF1WW05a2VTNXpkSGxzWlR0Y2JpQWdJQ0FnSUNBZ1luTXVkMmxrZEdnZ1BTQjNhVzVrYjNjdWFXNXVaWEpYYVdSMGFDQXJJRndpY0hoY0lqdGNiaUFnSUNBZ0lDQWdZbk11YUdWcFoyaDBJRDBnZDJsdVpHOTNMbWx1Ym1WeVNHVnBaMmgwSUNzZ1hDSndlRndpTzF4dUlDQWdJQ0FnSUNCaWN5NXZkbVZ5Wm14dmR5QTlJRndpYUdsa1pHVnVYQ0k3WEc0Z0lDQWdJQ0FnSUM4dklFSnZaSGtnYzJsNlpTQnpiMngxZEdsdmJpQmtiMlZ6YmlkMElIZHZjbXNnYjI0Z1lXeHNJRzF2WW1sc1pTQmljbTkzYzJWeUlITnZJSFJvYVhNZ2FYTWdkR2hsSUdGc1pYUmxjbTVoZEdsMlpUb2dabWw0WldRZ1kyOXVkR0ZwYm1WeVhHNGdJQ0FnSUNBZ0lIWmhjaUJqYjI1MFUzUjViR1VnUFNCall5NW5ZVzFsTG1OdmJuUmhhVzVsY2k1emRIbHNaVHRjYmlBZ0lDQWdJQ0FnWTI5dWRGTjBlV3hsTG5CdmMybDBhVzl1SUQwZ1hDSm1hWGhsWkZ3aU8xeHVJQ0FnSUNBZ0lDQmpiMjUwVTNSNWJHVXViR1ZtZENBOUlHTnZiblJUZEhsc1pTNTBiM0FnUFNCY0lqQndlRndpTzF4dUlDQWdJQ0FnSUNBdkx5QlNaWEJ2YzJsMGFXOXVJR0p2WkhsY2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVltOWtlUzV6WTNKdmJHeFViM0FnUFNBd08xeHVJQ0FnSUgxY2JuMHBPMXh1WEc0dktpcGNiaUFxSUR4d1BtTmpMa052Ym5SbGJuUlRkSEpoZEdWbmVTQmpiR0Z6Y3lCcGN5QjBhR1VnY205dmRDQnpkSEpoZEdWbmVTQmpiR0Z6Y3lCdlppQmpiMjUwWlc1MEozTWdjMk5oYkdVZ2MzUnlZWFJsWjNrc1hHNGdLaUJwZENCamIyNTBjbTlzY3lCMGFHVWdZbVZvWVhacGIzSWdiMllnYUc5M0lIUnZJSE5qWVd4bElIUm9aU0J6WTJWdVpTQmhibVFnYzJWMGRYQWdkR2hsSUhacFpYZHdiM0owSUdadmNpQjBhR1VnWjJGdFpUd3ZjRDVjYmlBcVhHNGdLaUJBWTJ4aGMzTWdRMjl1ZEdWdWRGTjBjbUYwWldkNVhHNGdLaTljYm1OakxrTnZiblJsYm5SVGRISmhkR1ZuZVNBOUlHTmpMa05zWVhOektIdGNiaUFnSUNCdVlXMWxPaUJjSWtOdmJuUmxiblJUZEhKaGRHVm5lVndpTEZ4dVhHNGdJQ0FnWTNSdmNqb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5WlhOMWJIUWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpZMkZzWlRvZ1d6RXNJREZkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbWxsZDNCdmNuUTZJRzUxYkd4Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gySjFhV3hrVW1WemRXeDBPaUJtZFc1amRHbHZiaUFvWTI5dWRHRnBibVZ5Vnl3Z1kyOXVkR0ZwYm1WeVNDd2dZMjl1ZEdWdWRGY3NJR052Ym5SbGJuUklMQ0J6WTJGc1pWZ3NJSE5qWVd4bFdTa2dlMXh1SUNBZ0lDQWdJQ0F2THlCTllXdGxjeUJqYjI1MFpXNTBJR1pwZENCaVpYUjBaWElnZEdobElHTmhiblpoYzF4dUlDQWdJQ0FnSUNCTllYUm9MbUZpY3loamIyNTBZV2x1WlhKWElDMGdZMjl1ZEdWdWRGY3BJRHdnTWlBbUppQW9ZMjl1ZEdWdWRGY2dQU0JqYjI1MFlXbHVaWEpYS1R0Y2JpQWdJQ0FnSUNBZ1RXRjBhQzVoWW5Nb1kyOXVkR0ZwYm1WeVNDQXRJR052Ym5SbGJuUklLU0E4SURJZ0ppWWdLR052Ym5SbGJuUklJRDBnWTI5dWRHRnBibVZ5U0NrN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhacFpYZHdiM0owSUQwZ1kyTXVjbVZqZENnb1kyOXVkR0ZwYm1WeVZ5QXRJR052Ym5SbGJuUlhLU0F2SURJc0lDaGpiMjUwWVdsdVpYSklJQzBnWTI5dWRHVnVkRWdwSUM4Z01pd2dZMjl1ZEdWdWRGY3NJR052Ym5SbGJuUklLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlVjbUZ1YzJ4aGRHVWdkR2hsSUdOdmJuUmxiblJjYmlBZ0lDQWdJQ0FnYVdZZ0tHTmpMbWRoYldVdWNtVnVaR1Z5Vkhsd1pTQTlQVDBnWTJNdVoyRnRaUzVTUlU1RVJWSmZWRmxRUlY5RFFVNVdRVk1wZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeTlVVDBSUE9pQnRiMlJwWm5rZ2MyOXRaWFJvYVc1bklHWnZjaUJ6WlhSVWNtRnVjMlp2Y20xY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2WTJNdVoyRnRaUzVmY21WdVpHVnlRMjl1ZEdWNGRDNTBjbUZ1YzJ4aGRHVW9kbWxsZDNCdmNuUXVlQ3dnZG1sbGQzQnZjblF1ZVNBcklHTnZiblJsYm5SSUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0psYzNWc2RDNXpZMkZzWlNBOUlGdHpZMkZzWlZnc0lITmpZV3hsV1YwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGMzVnNkQzUyYVdWM2NHOXlkQ0E5SUhacFpYZHdiM0owTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ6ZFd4ME8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nVFdGdWFYQjFiR0YwYVc5dUlHSmxabTl5WlNCaGNIQnNlV2x1WnlCMGFHVWdjM1J5WVhSbFozbGNiaUFnSUNBZ0tpQWhJM3BvSU9ldGx1ZVZwZVc2bE9lVXFPV0pqZWVhaE9hVGplUzluRnh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdjSEpsUVhCd2JIbGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UxWnBaWGQ5SUhacFpYY2dMU0JVYUdVZ2RHRnlaMlYwSUhacFpYZGNiaUFnSUNBZ0tpOWNiaUFnSUNCd2NtVkJjSEJzZVRvZ1puVnVZM1JwYjI0Z0tIWnBaWGNwSUh0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJHZFc1amRHbHZiaUIwYnlCaGNIQnNlU0IwYUdseklITjBjbUYwWldkNVhHNGdJQ0FnSUNvZ1ZHaGxJSEpsZEhWeWJpQjJZV3gxWlNCcGN5QjdjMk5oYkdVNklGdHpZMkZzWlZnc0lITmpZV3hsV1Ywc0lIWnBaWGR3YjNKME9pQjdZMk11VW1WamRIMTlMRnh1SUNBZ0lDQXFJRlJvWlNCMFlYSm5aWFFnZG1sbGR5QmpZVzRnZEdobGJpQmhjSEJzZVNCMGFHVnpaU0IyWVd4MVpTQjBieUJwZEhObGJHWXNJR2wwSjNNZ2NISmxabVZ5Y21Wa0lHNXZkQ0IwYnlCdGIyUnBabmtnWkdseVpXTjBiSGtnYVhSeklIQnlhWFpoZEdVZ2RtRnlhV0ZpYkdWelhHNGdJQ0FnSUNvZ0lTTjZhQ0Rvc0lQbmxLam5yWmJubGFYbWxybm1zNVZjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR0Z3Y0d4NVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0V2FXVjNmU0IyYVdWM1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGFYcGxmU0JrWlhOcFoyNWxaRkpsYzI5c2RYUnBiMjVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRQWW1wbFkzUjlJSE5qWVd4bFFXNWtWbWxsZDNCdmNuUlNaV04wWEc0Z0lDQWdJQ292WEc0Z0lDQWdZWEJ3YkhrNklHWjFibU4wYVc5dUlDaDJhV1YzTENCa1pYTnBaMjVsWkZKbGMyOXNkWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIdGNJbk5qWVd4bFhDSTZJRnN4TENBeFhYMDdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnS2lCTllXNXBjSFZzWVhScGIyNGdZV1owWlhJZ1lYQndiSGxwYm1jZ2RHaGxJSE4wY21GMFpXZDVYRzRnSUNBZ0lDb2dJU042YUNEbnJaYm5sYVhvc0lQbmxLamt1WXZsa0k3bm1vVG1rNDNrdlp4Y2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhCdmMzUkJjSEJzZVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Vm1sbGQzMGdkbWxsZHlBdElGUm9aU0IwWVhKblpYUWdkbWxsZDF4dUlDQWdJQ0FxTDF4dUlDQWdJSEJ2YzNSQmNIQnNlVG9nWm5WdVkzUnBiMjRnS0hacFpYY3BJSHRjYmlBZ0lDQjlYRzU5S1R0Y2JseHVLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JseHVMeThnUTI5dWRHRnBibVZ5SUhOallXeGxJSE4wY21GMFpXZDVjMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJqYkdGemN5QkZjWFZoYkZSdlJuSmhiV1ZjYmlBZ0lDQWdLaUJBWlhoMFpXNWtjeUJEYjI1MFlXbHVaWEpUZEhKaGRHVm5lVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIWmhjaUJGY1hWaGJGUnZSbkpoYldVZ1BTQmpZeTVEYkdGemN5aDdYRzRnSUNBZ0lDQWdJRzVoYldVNklGd2lSWEYxWVd4VWIwWnlZVzFsWENJc1hHNGdJQ0FnSUNBZ0lHVjRkR1Z1WkhNNklHTmpMa052Ym5SaGFXNWxjbE4wY21GMFpXZDVMRnh1SUNBZ0lDQWdJQ0JoY0hCc2VUb2dablZ1WTNScGIyNGdLSFpwWlhjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1jbUZ0WlVnZ1BTQjJhV1YzTGw5bWNtRnRaVk5wZW1VdWFHVnBaMmgwTENCamIyNTBZV2x1WlhKVGRIbHNaU0E5SUdOakxtZGhiV1V1WTI5dWRHRnBibVZ5TG5OMGVXeGxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzJWMGRYQkRiMjUwWVdsdVpYSW9kbWxsZHl3Z2RtbGxkeTVmWm5KaGJXVlRhWHBsTG5kcFpIUm9MQ0IyYVdWM0xsOW1jbUZ0WlZOcGVtVXVhR1ZwWjJoMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGTmxkSFZ3SUdOdmJuUmhhVzVsY2lkeklHMWhjbWRwYmlCaGJtUWdjR0ZrWkdsdVoxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIWnBaWGN1WDJselVtOTBZWFJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJoYVc1bGNsTjBlV3hsTG0xaGNtZHBiaUE5SUNjd0lEQWdNQ0FuSUNzZ1puSmhiV1ZJSUNzZ0ozQjRKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5SaGFXNWxjbE4wZVd4bExtMWhjbWRwYmlBOUlDY3djSGduTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeVUzUjViR1V1Y0dGa1pHbHVaeUE5SUZ3aU1IQjRYQ0k3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQmpiR0Z6Y3lCUWNtOXdiM0owYVc5dVlXeFViMFp5WVcxbFhHNGdJQ0FnSUNvZ1FHVjRkR1Z1WkhNZ1EyOXVkR0ZwYm1WeVUzUnlZWFJsWjNsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IyWVhJZ1VISnZjRzl5ZEdsdmJtRnNWRzlHY21GdFpTQTlJR05qTGtOc1lYTnpLSHRjYmlBZ0lDQWdJQ0FnYm1GdFpUb2dYQ0pRY205d2IzSjBhVzl1WVd4VWIwWnlZVzFsWENJc1hHNGdJQ0FnSUNBZ0lHVjRkR1Z1WkhNNklHTmpMa052Ym5SaGFXNWxjbE4wY21GMFpXZDVMRnh1SUNBZ0lDQWdJQ0JoY0hCc2VUb2dablZ1WTNScGIyNGdLSFpwWlhjc0lHUmxjMmxuYm1Wa1VtVnpiMngxZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1p5WVcxbFZ5QTlJSFpwWlhjdVgyWnlZVzFsVTJsNlpTNTNhV1IwYUN3Z1puSmhiV1ZJSUQwZ2RtbGxkeTVmWm5KaGJXVlRhWHBsTG1obGFXZG9kQ3dnWTI5dWRHRnBibVZ5VTNSNWJHVWdQU0JqWXk1bllXMWxMbU52Ym5SaGFXNWxjaTV6ZEhsc1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaWE5wWjI1WElEMGdaR1Z6YVdkdVpXUlNaWE52YkhWMGFXOXVMbmRwWkhSb0xDQmtaWE5wWjI1SUlEMGdaR1Z6YVdkdVpXUlNaWE52YkhWMGFXOXVMbWhsYVdkb2RDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMkZzWlZnZ1BTQm1jbUZ0WlZjZ0x5QmtaWE5wWjI1WExDQnpZMkZzWlZrZ1BTQm1jbUZ0WlVnZ0x5QmtaWE5wWjI1SUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJoYVc1bGNsY3NJR052Ym5SaGFXNWxja2c3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5qWVd4bFdDQThJSE5qWVd4bFdTQS9JQ2hqYjI1MFlXbHVaWEpYSUQwZ1puSmhiV1ZYTENCamIyNTBZV2x1WlhKSUlEMGdaR1Z6YVdkdVNDQXFJSE5qWVd4bFdDa2dPaUFvWTI5dWRHRnBibVZ5VnlBOUlHUmxjMmxuYmxjZ0tpQnpZMkZzWlZrc0lHTnZiblJoYVc1bGNrZ2dQU0JtY21GdFpVZ3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJCWkdwMWMzUWdZMjl1ZEdGcGJtVnlJSE5wZW1VZ2QybDBhQ0JwYm5SbFoyVnlJSFpoYkhWbFhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2IyWm1lQ0E5SUUxaGRHZ3VjbTkxYm1Rb0tHWnlZVzFsVnlBdElHTnZiblJoYVc1bGNsY3BJQzhnTWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2IyWm1lU0E5SUUxaGRHZ3VjbTkxYm1Rb0tHWnlZVzFsU0NBdElHTnZiblJoYVc1bGNrZ3BJQzhnTWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEpYSUQwZ1puSmhiV1ZYSUMwZ01pQXFJRzltWm5nN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEpJSUQwZ1puSmhiV1ZJSUMwZ01pQXFJRzltWm5rN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM05sZEhWd1EyOXVkR0ZwYm1WeUtIWnBaWGNzSUdOdmJuUmhhVzVsY2xjc0lHTnZiblJoYVc1bGNrZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZEUTE5RlJFbFVUMUlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRaWFIxY0NCamIyNTBZV2x1WlhJbmN5QnRZWEpuYVc0Z1lXNWtJSEJoWkdScGJtZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZG1sbGR5NWZhWE5TYjNSaGRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJoYVc1bGNsTjBlV3hsTG0xaGNtZHBiaUE5SUNjd0lEQWdNQ0FuSUNzZ1puSmhiV1ZJSUNzZ0ozQjRKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUmhhVzVsY2xOMGVXeGxMbTFoY21kcGJpQTlJQ2N3Y0hnbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwWVdsdVpYSlRkSGxzWlM1d1lXUmthVzVuVEdWbWRDQTlJRzltWm5nZ0t5QmNJbkI0WENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeVUzUjViR1V1Y0dGa1pHbHVaMUpwWjJoMElEMGdiMlptZUNBcklGd2ljSGhjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBZV2x1WlhKVGRIbHNaUzV3WVdSa2FXNW5WRzl3SUQwZ2IyWm1lU0FySUZ3aWNIaGNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEpUZEhsc1pTNXdZV1JrYVc1blFtOTBkRzl0SUQwZ2IyWm1lU0FySUZ3aWNIaGNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUdOc1lYTnpJRVZ4ZFdGc1ZHOVhhVzVrYjNkY2JpQWdJQ0FnS2lCQVpYaDBaVzVrY3lCRmNYVmhiRlJ2Um5KaGJXVmNiaUFnSUNBZ0tpOWNiaUFnSUNCMllYSWdSWEYxWVd4VWIxZHBibVJ2ZHlBOUlHTmpMa05zWVhOektIdGNiaUFnSUNBZ0lDQWdibUZ0WlRvZ1hDSkZjWFZoYkZSdlYybHVaRzkzWENJc1hHNGdJQ0FnSUNBZ0lHVjRkR1Z1WkhNNklFVnhkV0ZzVkc5R2NtRnRaU3hjYmlBZ0lDQWdJQ0FnY0hKbFFYQndiSGs2SUdaMWJtTjBhVzl1SUNoMmFXVjNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emRYQmxjaWgyYVdWM0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxtZGhiV1V1Wm5KaGJXVWdQU0JrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUTdYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ1lYQndiSGs2SUdaMWJtTjBhVzl1SUNoMmFXVjNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emRYQmxjaWgyYVdWM0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlpwZUVOdmJuUmhhVzVsY2lncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBWTJ4aGMzTWdVSEp2Y0c5eWRHbHZibUZzVkc5WGFXNWtiM2RjYmlBZ0lDQWdLaUJBWlhoMFpXNWtjeUJRY205d2IzSjBhVzl1WVd4VWIwWnlZVzFsWEc0Z0lDQWdJQ292WEc0Z0lDQWdkbUZ5SUZCeWIzQnZjblJwYjI1aGJGUnZWMmx1Wkc5M0lEMGdZMk11UTJ4aGMzTW9lMXh1SUNBZ0lDQWdJQ0J1WVcxbE9pQmNJbEJ5YjNCdmNuUnBiMjVoYkZSdlYybHVaRzkzWENJc1hHNGdJQ0FnSUNBZ0lHVjRkR1Z1WkhNNklGQnliM0J2Y25ScGIyNWhiRlJ2Um5KaGJXVXNYRzRnSUNBZ0lDQWdJSEJ5WlVGd2NHeDVPaUJtZFc1amRHbHZiaUFvZG1sbGR5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzNWd1pYSW9kbWxsZHlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1bllXMWxMbVp5WVcxbElEMGdaRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1ME8xeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUdGd2NHeDVPaUJtZFc1amRHbHZiaUFvZG1sbGR5d2daR1Z6YVdkdVpXUlNaWE52YkhWMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emRYQmxjaWgyYVdWM0xDQmtaWE5wWjI1bFpGSmxjMjlzZFhScGIyNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWm1sNFEyOXVkR0ZwYm1WeUtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCamJHRnpjeUJQY21sbmFXNWhiRU52Ym5SaGFXNWxjbHh1SUNBZ0lDQXFJRUJsZUhSbGJtUnpJRU52Ym5SaGFXNWxjbE4wY21GMFpXZDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RtRnlJRTl5YVdkcGJtRnNRMjl1ZEdGcGJtVnlJRDBnWTJNdVEyeGhjM01vZTF4dUlDQWdJQ0FnSUNCdVlXMWxPaUJjSWs5eWFXZHBibUZzUTI5dWRHRnBibVZ5WENJc1hHNGdJQ0FnSUNBZ0lHVjRkR1Z1WkhNNklHTmpMa052Ym5SaGFXNWxjbE4wY21GMFpXZDVMRnh1SUNBZ0lDQWdJQ0JoY0hCc2VUb2dablZ1WTNScGIyNGdLSFpwWlhjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM05sZEhWd1EyOXVkR0ZwYm1WeUtIWnBaWGNzSUdOakxtZGhiV1V1WTJGdWRtRnpMbmRwWkhSb0xDQmpZeTVuWVcxbExtTmhiblpoY3k1b1pXbG5hSFFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNWNiaTh2SUNOT1QxUWdVMVJCUWt4RklHOXVJRUZ1WkhKdmFXUWpJRUZzYVdGek9pQlRkSEpoZEdWbmVTQjBhR0YwSUcxaGEyVnpJSFJvWlNCamIyNTBZV2x1WlhJbmN5QnphWHBsSUdWeGRXRnNjeUIwYnlCMGFHVWdkMmx1Wkc5M0ozTWdjMmw2WlZ4dUx5OGdJQ0FnWTJNdVEyOXVkR0ZwYm1WeVUzUnlZWFJsWjNrdVJWRlZRVXhmVkU5ZlYwbE9SRTlYSUQwZ2JtVjNJRVZ4ZFdGc1ZHOVhhVzVrYjNjb0tUdGNiaTh2SUNOT1QxUWdVMVJCUWt4RklHOXVJRUZ1WkhKdmFXUWpJRUZzYVdGek9pQlRkSEpoZEdWbmVTQjBhR0YwSUhOallXeGxJSEJ5YjNCdmNuUnBiMjVoYkd4NUlIUm9aU0JqYjI1MFlXbHVaWEluY3lCemFYcGxJSFJ2SUhkcGJtUnZkeWR6SUhOcGVtVmNiaTh2SUNBZ0lHTmpMa052Ym5SaGFXNWxjbE4wY21GMFpXZDVMbEJTVDFCUFVsUkpUMDVmVkU5ZlYwbE9SRTlYSUQwZ2JtVjNJRkJ5YjNCdmNuUnBiMjVoYkZSdlYybHVaRzkzS0NrN1hHNHZMeUJCYkdsaGN6b2dVM1J5WVhSbFoza2dkR2hoZENCdFlXdGxjeUIwYUdVZ1kyOXVkR0ZwYm1WeUozTWdjMmw2WlNCbGNYVmhiSE1nZEc4Z2RHaGxJR1p5WVcxbEozTWdjMmw2WlZ4dUlDQWdJR05qTGtOdmJuUmhhVzVsY2xOMGNtRjBaV2Q1TGtWUlZVRk1YMVJQWDBaU1FVMUZJRDBnYm1WM0lFVnhkV0ZzVkc5R2NtRnRaU2dwTzF4dUx5OGdRV3hwWVhNNklGTjBjbUYwWldkNUlIUm9ZWFFnYzJOaGJHVWdjSEp2Y0c5eWRHbHZibUZzYkhrZ2RHaGxJR052Ym5SaGFXNWxjaWR6SUhOcGVtVWdkRzhnWm5KaGJXVW5jeUJ6YVhwbFhHNGdJQ0FnWTJNdVEyOXVkR0ZwYm1WeVUzUnlZWFJsWjNrdVVGSlBVRTlTVkVsUFRsOVVUMTlHVWtGTlJTQTlJRzVsZHlCUWNtOXdiM0owYVc5dVlXeFViMFp5WVcxbEtDazdYRzR2THlCQmJHbGhjem9nVTNSeVlYUmxaM2tnZEdoaGRDQnJaV1Z3Y3lCMGFHVWdiM0pwWjJsdVlXd2dZMjl1ZEdGcGJtVnlKM01nYzJsNlpWeHVJQ0FnSUdOakxrTnZiblJoYVc1bGNsTjBjbUYwWldkNUxrOVNTVWRKVGtGTVgwTlBUbFJCU1U1RlVpQTlJRzVsZHlCUGNtbG5hVzVoYkVOdmJuUmhhVzVsY2lncE8xeHVYRzR2THlCRGIyNTBaVzUwSUhOallXeGxJSE4wY21GMFpXZDVjMXh1SUNBZ0lIWmhjaUJGZUdGamRFWnBkQ0E5SUdOakxrTnNZWE56S0h0Y2JpQWdJQ0FnSUNBZ2JtRnRaVG9nWENKRmVHRmpkRVpwZEZ3aUxGeHVJQ0FnSUNBZ0lDQmxlSFJsYm1Sek9pQmpZeTVEYjI1MFpXNTBVM1J5WVhSbFoza3NYRzRnSUNBZ0lDQWdJR0Z3Y0d4NU9pQm1kVzVqZEdsdmJpQW9kbWxsZHl3Z1pHVnphV2R1WldSU1pYTnZiSFYwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZMjl1ZEdGcGJtVnlWeUE5SUdOakxtZGhiV1V1WTJGdWRtRnpMbmRwWkhSb0xDQmpiMjUwWVdsdVpYSklJRDBnWTJNdVoyRnRaUzVqWVc1MllYTXVhR1ZwWjJoMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpZV3hsV0NBOUlHTnZiblJoYVc1bGNsY2dMeUJrWlhOcFoyNWxaRkpsYzI5c2RYUnBiMjR1ZDJsa2RHZ3NJSE5qWVd4bFdTQTlJR052Ym5SaGFXNWxja2dnTHlCa1pYTnBaMjVsWkZKbGMyOXNkWFJwYjI0dWFHVnBaMmgwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlluVnBiR1JTWlhOMWJIUW9ZMjl1ZEdGcGJtVnlWeXdnWTI5dWRHRnBibVZ5U0N3Z1kyOXVkR0ZwYm1WeVZ5d2dZMjl1ZEdGcGJtVnlTQ3dnYzJOaGJHVllMQ0J6WTJGc1pWa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0IyWVhJZ1UyaHZkMEZzYkNBOUlHTmpMa05zWVhOektIdGNiaUFnSUNBZ0lDQWdibUZ0WlRvZ1hDSlRhRzkzUVd4c1hDSXNYRzRnSUNBZ0lDQWdJR1Y0ZEdWdVpITTZJR05qTGtOdmJuUmxiblJUZEhKaGRHVm5lU3hjYmlBZ0lDQWdJQ0FnWVhCd2JIazZJR1oxYm1OMGFXOXVJQ2gyYVdWM0xDQmtaWE5wWjI1bFpGSmxjMjlzZFhScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYjI1MFlXbHVaWEpYSUQwZ1kyTXVaMkZ0WlM1allXNTJZWE11ZDJsa2RHZ3NJR052Ym5SaGFXNWxja2dnUFNCall5NW5ZVzFsTG1OaGJuWmhjeTVvWldsbmFIUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1Z6YVdkdVZ5QTlJR1JsYzJsbmJtVmtVbVZ6YjJ4MWRHbHZiaTUzYVdSMGFDd2daR1Z6YVdkdVNDQTlJR1JsYzJsbmJtVmtVbVZ6YjJ4MWRHbHZiaTVvWldsbmFIUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk5oYkdWWUlEMGdZMjl1ZEdGcGJtVnlWeUF2SUdSbGMybG5ibGNzSUhOallXeGxXU0E5SUdOdmJuUmhhVzVsY2tnZ0x5QmtaWE5wWjI1SUxDQnpZMkZzWlNBOUlEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdWdWRGY3NJR052Ym5SbGJuUklPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpZMkZzWlZnZ1BDQnpZMkZzWlZrZ1B5QW9jMk5oYkdVZ1BTQnpZMkZzWlZnc0lHTnZiblJsYm5SWElEMGdZMjl1ZEdGcGJtVnlWeXdnWTI5dWRHVnVkRWdnUFNCa1pYTnBaMjVJSUNvZ2MyTmhiR1VwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lBb2MyTmhiR1VnUFNCelkyRnNaVmtzSUdOdmJuUmxiblJYSUQwZ1pHVnphV2R1VnlBcUlITmpZV3hsTENCamIyNTBaVzUwU0NBOUlHTnZiblJoYVc1bGNrZ3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWW5WcGJHUlNaWE4xYkhRb1kyOXVkR0ZwYm1WeVZ5d2dZMjl1ZEdGcGJtVnlTQ3dnWTI5dWRHVnVkRmNzSUdOdmJuUmxiblJJTENCelkyRnNaU3dnYzJOaGJHVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0IyWVhJZ1RtOUNiM0prWlhJZ1BTQmpZeTVEYkdGemN5aDdYRzRnSUNBZ0lDQWdJRzVoYldVNklGd2lUbTlDYjNKa1pYSmNJaXhjYmlBZ0lDQWdJQ0FnWlhoMFpXNWtjem9nWTJNdVEyOXVkR1Z1ZEZOMGNtRjBaV2Q1TEZ4dUlDQWdJQ0FnSUNCaGNIQnNlVG9nWm5WdVkzUnBiMjRnS0hacFpYY3NJR1JsYzJsbmJtVmtVbVZ6YjJ4MWRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOdmJuUmhhVzVsY2xjZ1BTQmpZeTVuWVcxbExtTmhiblpoY3k1M2FXUjBhQ3dnWTI5dWRHRnBibVZ5U0NBOUlHTmpMbWRoYldVdVkyRnVkbUZ6TG1obGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWlhOcFoyNVhJRDBnWkdWemFXZHVaV1JTWlhOdmJIVjBhVzl1TG5kcFpIUm9MQ0JrWlhOcFoyNUlJRDBnWkdWemFXZHVaV1JTWlhOdmJIVjBhVzl1TG1obGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WTJGc1pWZ2dQU0JqYjI1MFlXbHVaWEpYSUM4Z1pHVnphV2R1Vnl3Z2MyTmhiR1ZaSUQwZ1kyOXVkR0ZwYm1WeVNDQXZJR1JsYzJsbmJrZ3NJSE5qWVd4bExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJsYm5SWExDQmpiMjUwWlc1MFNEdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyTmhiR1ZZSUR3Z2MyTmhiR1ZaSUQ4Z0tITmpZV3hsSUQwZ2MyTmhiR1ZaTENCamIyNTBaVzUwVnlBOUlHUmxjMmxuYmxjZ0tpQnpZMkZzWlN3Z1kyOXVkR1Z1ZEVnZ1BTQmpiMjUwWVdsdVpYSklLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nS0hOallXeGxJRDBnYzJOaGJHVllMQ0JqYjI1MFpXNTBWeUE5SUdOdmJuUmhhVzVsY2xjc0lHTnZiblJsYm5SSUlEMGdaR1Z6YVdkdVNDQXFJSE5qWVd4bEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMkoxYVd4a1VtVnpkV3gwS0dOdmJuUmhhVzVsY2xjc0lHTnZiblJoYVc1bGNrZ3NJR052Ym5SbGJuUlhMQ0JqYjI1MFpXNTBTQ3dnYzJOaGJHVXNJSE5qWVd4bEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdkbUZ5SUVacGVHVmtTR1ZwWjJoMElEMGdZMk11UTJ4aGMzTW9lMXh1SUNBZ0lDQWdJQ0J1WVcxbE9pQmNJa1pwZUdWa1NHVnBaMmgwWENJc1hHNGdJQ0FnSUNBZ0lHVjRkR1Z1WkhNNklHTmpMa052Ym5SbGJuUlRkSEpoZEdWbmVTeGNiaUFnSUNBZ0lDQWdZWEJ3YkhrNklHWjFibU4wYVc5dUlDaDJhV1YzTENCa1pYTnBaMjVsWkZKbGMyOXNkWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiMjUwWVdsdVpYSlhJRDBnWTJNdVoyRnRaUzVqWVc1MllYTXVkMmxrZEdnc0lHTnZiblJoYVc1bGNrZ2dQU0JqWXk1bllXMWxMbU5oYm5aaGN5NW9aV2xuYUhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVnphV2R1U0NBOUlHUmxjMmxuYm1Wa1VtVnpiMngxZEdsdmJpNW9aV2xuYUhRc0lITmpZV3hsSUQwZ1kyOXVkR0ZwYm1WeVNDQXZJR1JsYzJsbmJrZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdWdWRGY2dQU0JqYjI1MFlXbHVaWEpYTENCamIyNTBaVzUwU0NBOUlHTnZiblJoYVc1bGNrZzdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlpZFdsc1pGSmxjM1ZzZENoamIyNTBZV2x1WlhKWExDQmpiMjUwWVdsdVpYSklMQ0JqYjI1MFpXNTBWeXdnWTI5dWRHVnVkRWdzSUhOallXeGxMQ0J6WTJGc1pTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSFpoY2lCR2FYaGxaRmRwWkhSb0lEMGdZMk11UTJ4aGMzTW9lMXh1SUNBZ0lDQWdJQ0J1WVcxbE9pQmNJa1pwZUdWa1YybGtkR2hjSWl4Y2JpQWdJQ0FnSUNBZ1pYaDBaVzVrY3pvZ1kyTXVRMjl1ZEdWdWRGTjBjbUYwWldkNUxGeHVJQ0FnSUNBZ0lDQmhjSEJzZVRvZ1puVnVZM1JwYjI0Z0tIWnBaWGNzSUdSbGMybG5ibVZrVW1WemIyeDFkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTnZiblJoYVc1bGNsY2dQU0JqWXk1bllXMWxMbU5oYm5aaGN5NTNhV1IwYUN3Z1kyOXVkR0ZwYm1WeVNDQTlJR05qTG1kaGJXVXVZMkZ1ZG1GekxtaGxhV2RvZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pYTnBaMjVYSUQwZ1pHVnphV2R1WldSU1pYTnZiSFYwYVc5dUxuZHBaSFJvTENCelkyRnNaU0E5SUdOdmJuUmhhVzVsY2xjZ0x5QmtaWE5wWjI1WExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJsYm5SWElEMGdZMjl1ZEdGcGJtVnlWeXdnWTI5dWRHVnVkRWdnUFNCamIyNTBZV2x1WlhKSU8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZblZwYkdSU1pYTjFiSFFvWTI5dWRHRnBibVZ5Vnl3Z1kyOXVkR0ZwYm1WeVNDd2dZMjl1ZEdWdWRGY3NJR052Ym5SbGJuUklMQ0J6WTJGc1pTd2djMk5oYkdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzVjYmk4dklFRnNhV0Z6T2lCVGRISmhkR1ZuZVNCMGJ5QnpZMkZzWlNCMGFHVWdZMjl1ZEdWdWRDZHpJSE5wZW1VZ2RHOGdZMjl1ZEdGcGJtVnlKM01nYzJsNlpTd2dibTl1SUhCeWIzQnZjblJwYjI1aGJGeHVJQ0FnSUdOakxrTnZiblJsYm5SVGRISmhkR1ZuZVM1RldFRkRWRjlHU1ZRZ1BTQnVaWGNnUlhoaFkzUkdhWFFvS1R0Y2JpOHZJRUZzYVdGek9pQlRkSEpoZEdWbmVTQjBieUJ6WTJGc1pTQjBhR1VnWTI5dWRHVnVkQ2R6SUhOcGVtVWdjSEp2Y0c5eWRHbHZibUZzYkhrZ2RHOGdiV0Y0YVcxMWJTQnphWHBsSUdGdVpDQnJaV1Z3Y3lCMGFHVWdkMmh2YkdVZ1kyOXVkR1Z1ZENCaGNtVmhJSFJ2SUdKbElIWnBjMmxpYkdWY2JpQWdJQ0JqWXk1RGIyNTBaVzUwVTNSeVlYUmxaM2t1VTBoUFYxOUJURXdnUFNCdVpYY2dVMmh2ZDBGc2JDZ3BPMXh1THk4Z1FXeHBZWE02SUZOMGNtRjBaV2Q1SUhSdklITmpZV3hsSUhSb1pTQmpiMjUwWlc1MEozTWdjMmw2WlNCd2NtOXdiM0owYVc5dVlXeHNlU0IwYnlCbWFXeHNJSFJvWlNCM2FHOXNaU0JqYjI1MFlXbHVaWElnWVhKbFlWeHVJQ0FnSUdOakxrTnZiblJsYm5SVGRISmhkR1ZuZVM1T1QxOUNUMUpFUlZJZ1BTQnVaWGNnVG05Q2IzSmtaWElvS1R0Y2JpOHZJRUZzYVdGek9pQlRkSEpoZEdWbmVTQjBieUJ6WTJGc1pTQjBhR1VnWTI5dWRHVnVkQ2R6SUdobGFXZG9kQ0IwYnlCamIyNTBZV2x1WlhJbmN5Qm9aV2xuYUhRZ1lXNWtJSEJ5YjNCdmNuUnBiMjVoYkd4NUlITmpZV3hsSUdsMGN5QjNhV1IwYUZ4dUlDQWdJR05qTGtOdmJuUmxiblJUZEhKaGRHVm5lUzVHU1ZoRlJGOUlSVWxIU0ZRZ1BTQnVaWGNnUm1sNFpXUklaV2xuYUhRb0tUdGNiaTh2SUVGc2FXRnpPaUJUZEhKaGRHVm5lU0IwYnlCelkyRnNaU0IwYUdVZ1kyOXVkR1Z1ZENkeklIZHBaSFJvSUhSdklHTnZiblJoYVc1bGNpZHpJSGRwWkhSb0lHRnVaQ0J3Y205d2IzSjBhVzl1WVd4c2VTQnpZMkZzWlNCcGRITWdhR1ZwWjJoMFhHNGdJQ0FnWTJNdVEyOXVkR1Z1ZEZOMGNtRjBaV2Q1TGtaSldFVkVYMWRKUkZSSUlEMGdibVYzSUVacGVHVmtWMmxrZEdnb0tUdGNibHh1ZlNrb0tUdGNibHh1THlvcVhHNGdLaUE4Y0Q1all5NVNaWE52YkhWMGFXOXVVRzlzYVdONUlHTnNZWE56SUdseklIUm9aU0J5YjI5MElITjBjbUYwWldkNUlHTnNZWE56SUc5bUlITmpZV3hsSUhOMGNtRjBaV2Q1TEZ4dUlDb2dhWFJ6SUcxaGFXNGdkR0Z6YXlCcGN5QjBieUJ0WVdsdWRHRnBiaUIwYUdVZ1kyOXRjR0YwYVdKcGJHbDBlU0IzYVhSb0lFTnZZMjl6TW1RdGVEd3ZjRDVjYmlBcVhHNGdLaUJBWTJ4aGMzTWdVbVZ6YjJ4MWRHbHZibEJ2YkdsamVWeHVJQ292WEc0dktpcGNiaUFxSUVCdFpYUm9iMlFnWTI5dWMzUnlkV04wYjNKY2JpQXFJRUJ3WVhKaGJTQjdRMjl1ZEdGcGJtVnlVM1J5WVhSbFozbDlJR052Ym5SaGFXNWxjbE4wWnlCVWFHVWdZMjl1ZEdGcGJtVnlJSE4wY21GMFpXZDVYRzRnS2lCQWNHRnlZVzBnZTBOdmJuUmxiblJUZEhKaGRHVm5lWDBnWTI5dWRHVnVkRk4wWnlCVWFHVWdZMjl1ZEdWdWRDQnpkSEpoZEdWbmVWeHVJQ292WEc1all5NVNaWE52YkhWMGFXOXVVRzlzYVdONUlEMGdZMk11UTJ4aGMzTW9lMXh1SUNBZ0lHNWhiV1U2SUZ3aVkyTXVVbVZ6YjJ4MWRHbHZibEJ2YkdsamVWd2lMRnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU52Ym5OMGNuVmpkRzl5SUc5bUlHTmpMbEpsYzI5c2RYUnBiMjVRYjJ4cFkzbGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwTnZiblJoYVc1bGNsTjBjbUYwWldkNWZTQmpiMjUwWVdsdVpYSlRkR2RjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlME52Ym5SbGJuUlRkSEpoZEdWbmVYMGdZMjl1ZEdWdWRGTjBaMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHTjBiM0k2SUdaMWJtTjBhVzl1SUNoamIyNTBZV2x1WlhKVGRHY3NJR052Ym5SbGJuUlRkR2NwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTI5dWRHRnBibVZ5VTNSeVlYUmxaM2tnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpiMjUwWlc1MFUzUnlZWFJsWjNrZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEVOdmJuUmhhVzVsY2xOMGNtRjBaV2Q1S0dOdmJuUmhhVzVsY2xOMFp5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBRMjl1ZEdWdWRGTjBjbUYwWldkNUtHTnZiblJsYm5SVGRHY3BPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlFMWhibWx3ZFd4aGRHbHZiaUJpWldadmNtVWdZWEJ3YkhscGJtY2dkR2hsSUhKbGMyOXNkWFJwYjI0Z2NHOXNhV041WEc0Z0lDQWdJQ29nSVNONmFDRG5yWmJubGFYbHVwVG5sS2psaVkzbm1vVG1rNDNrdlp4Y2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhCeVpVRndjR3g1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRXYVdWM2ZTQjJhV1YzSUZSb1pTQjBZWEpuWlhRZ2RtbGxkMXh1SUNBZ0lDQXFMMXh1SUNBZ0lIQnlaVUZ3Y0d4NU9pQm1kVzVqZEdsdmJpQW9kbWxsZHlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amIyNTBZV2x1WlhKVGRISmhkR1ZuZVM1d2NtVkJjSEJzZVNoMmFXVjNLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMjl1ZEdWdWRGTjBjbUYwWldkNUxuQnlaVUZ3Y0d4NUtIWnBaWGNwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRVoxYm1OMGFXOXVJSFJ2SUdGd2NHeDVJSFJvYVhNZ2NtVnpiMngxZEdsdmJpQndiMnhwWTNsY2JpQWdJQ0FnS2lCVWFHVWdjbVYwZFhKdUlIWmhiSFZsSUdseklIdHpZMkZzWlRvZ1czTmpZV3hsV0N3Z2MyTmhiR1ZaWFN3Z2RtbGxkM0J2Y25RNklIdGpZeTVTWldOMGZYMHNYRzRnSUNBZ0lDb2dWR2hsSUhSaGNtZGxkQ0IyYVdWM0lHTmhiaUIwYUdWdUlHRndjR3g1SUhSb1pYTmxJSFpoYkhWbElIUnZJR2wwYzJWc1ppd2dhWFFuY3lCd2NtVm1aWEp5WldRZ2JtOTBJSFJ2SUcxdlpHbG1lU0JrYVhKbFkzUnNlU0JwZEhNZ2NISnBkbUYwWlNCMllYSnBZV0pzWlhOY2JpQWdJQ0FnS2lBaEkzcG9JT2l3ZytlVXFPZXRsdWVWcGVhV3VlYXpsVnh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdZWEJ3YkhsY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFacFpYZDlJSFpwWlhjZ0xTQlVhR1VnZEdGeVoyVjBJSFpwWlhkY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOcGVtVjlJR1JsYzJsbmJtVmtVbVZ6YjJ4MWRHbHZiaUF0SUZSb1pTQjFjMlZ5SUdSbFptbHVaV1FnWkdWemFXZHVJSEpsYzI5c2RYUnBiMjVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRQWW1wbFkzUjlJRUZ1SUc5aWFtVmpkQ0JqYjI1MFlXbHVjeUIwYUdVZ2MyTmhiR1VnV0M5WklIWmhiSFZsY3lCaGJtUWdkR2hsSUhacFpYZHdiM0owSUhKbFkzUmNiaUFnSUNBZ0tpOWNiaUFnSUNCaGNIQnNlVG9nWm5WdVkzUnBiMjRnS0hacFpYY3NJR1JsYzJsbmJtVmtVbVZ6YjJ4MWRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYjI1MFlXbHVaWEpUZEhKaGRHVm5lUzVoY0hCc2VTaDJhV1YzTENCa1pYTnBaMjVsWkZKbGMyOXNkWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWTI5dWRHVnVkRk4wY21GMFpXZDVMbUZ3Y0d4NUtIWnBaWGNzSUdSbGMybG5ibVZrVW1WemIyeDFkR2x2YmlrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVFdGdWFYQjFiR0YwYVc5dUlHRm1kR1Z5SUdGd2NIbHNhVzVuSUhSb1pTQnpkSEpoZEdWbmVWeHVJQ0FnSUNBcUlDRWplbWdnNTYyVzU1V2w1YnFVNTVTbzVMbUw1WkNPNTVxRTVwT041TDJjWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J3YjNOMFFYQndiSGxjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMVpwWlhkOUlIWnBaWGNnTFNCVWFHVWdkR0Z5WjJWMElIWnBaWGRjYmlBZ0lDQWdLaTljYmlBZ0lDQndiM04wUVhCd2JIazZJR1oxYm1OMGFXOXVJQ2gyYVdWM0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTnZiblJoYVc1bGNsTjBjbUYwWldkNUxuQnZjM1JCY0hCc2VTaDJhV1YzS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTI5dWRHVnVkRk4wY21GMFpXZDVMbkJ2YzNSQmNIQnNlU2gyYVdWM0tUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FxSUZObGRIVndJSFJvWlNCamIyNTBZV2x1WlhJbmN5QnpZMkZzWlNCemRISmhkR1ZuZVZ4dUlDQWdJQ0FxSUNFamVtZ2c2SzYrNTcydTVhNjU1Wm1vNTVxRTZZQ0M2WVdONTYyVzU1V2xYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnpaWFJEYjI1MFlXbHVaWEpUZEhKaGRHVm5lVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdRMjl1ZEdGcGJtVnlVM1J5WVhSbFozbDlJR052Ym5SaGFXNWxjbE4wWjF4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEVOdmJuUmhhVzVsY2xOMGNtRjBaV2Q1T2lCbWRXNWpkR2x2YmlBb1kyOXVkR0ZwYm1WeVUzUm5LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpiMjUwWVdsdVpYSlRkR2NnYVc1emRHRnVZMlZ2WmlCall5NURiMjUwWVdsdVpYSlRkSEpoZEdWbmVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk52Ym5SaGFXNWxjbE4wY21GMFpXZDVJRDBnWTI5dWRHRnBibVZ5VTNSbk8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nVTJWMGRYQWdkR2hsSUdOdmJuUmxiblFuY3lCelkyRnNaU0J6ZEhKaGRHVm5lVnh1SUNBZ0lDQXFJQ0VqZW1nZzZLNis1NzJ1NVlhRjVhNjU1NXFFNllDQzZZV041NjJXNTVXbFhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCelpYUkRiMjUwWlc1MFUzUnlZWFJsWjNsY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBOdmJuUmxiblJUZEhKaGRHVm5lWDBnWTI5dWRHVnVkRk4wWjF4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEVOdmJuUmxiblJUZEhKaGRHVm5lVG9nWm5WdVkzUnBiMjRnS0dOdmJuUmxiblJUZEdjcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dOdmJuUmxiblJUZEdjZ2FXNXpkR0Z1WTJWdlppQmpZeTVEYjI1MFpXNTBVM1J5WVhSbFoza3BYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlqYjI1MFpXNTBVM1J5WVhSbFoza2dQU0JqYjI1MFpXNTBVM1JuTzF4dUlDQWdJSDFjYm4wcE8xeHVYRzVxY3k1blpYUW9ZMk11VW1WemIyeDFkR2x2YmxCdmJHbGplUzV3Y205MGIzUjVjR1VzSUZ3aVkyRnVkbUZ6VTJsNlpWd2lMQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJR05qTG5ZeUtHTmpMbWRoYldVdVkyRnVkbUZ6TG5kcFpIUm9MQ0JqWXk1bllXMWxMbU5oYm5aaGN5NW9aV2xuYUhRcE8xeHVmU2s3WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJR1Z1ZEdseVpTQmhjSEJzYVdOaGRHbHZiaUJwY3lCMmFYTnBZbXhsSUdsdUlIUm9aU0J6Y0dWamFXWnBaV1FnWVhKbFlTQjNhWFJvYjNWMElIUnllV2x1WnlCMGJ5QndjbVZ6WlhKMlpTQjBhR1VnYjNKcFoybHVZV3dnWVhOd1pXTjBJSEpoZEdsdkxqeGljaTgrWEc0Z0tpQkVhWE4wYjNKMGFXOXVJR05oYmlCdlkyTjFjaXdnWVc1a0lIUm9aU0JoY0hCc2FXTmhkR2x2YmlCdFlYa2dZWEJ3WldGeUlITjBjbVYwWTJobFpDQnZjaUJqYjIxd2NtVnpjMlZrTGx4dUlDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRVZZUVVOVVgwWkpWRnh1SUNvZ1FISmxZV1J2Ym14NVhHNGdLaUJBYzNSaGRHbGpYRzRnS2k5Y2JtTmpMbEpsYzI5c2RYUnBiMjVRYjJ4cFkza3VSVmhCUTFSZlJrbFVJRDBnTUR0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnWlc1MGFYSmxJR0Z3Y0d4cFkyRjBhVzl1SUdacGJHeHpJSFJvWlNCemNHVmphV1pwWldRZ1lYSmxZU3dnZDJsMGFHOTFkQ0JrYVhOMGIzSjBhVzl1SUdKMWRDQndiM056YVdKc2VTQjNhWFJvSUhOdmJXVWdZM0p2Y0hCcGJtY3NQR0p5THo1Y2JpQXFJSGRvYVd4bElHMWhhVzUwWVdsdWFXNW5JSFJvWlNCdmNtbG5hVzVoYkNCaGMzQmxZM1FnY21GMGFXOGdiMllnZEdobElHRndjR3hwWTJGMGFXOXVMbHh1SUNvZ1FIQnliM0JsY25SNUlIdE9kVzFpWlhKOUlFNVBYMEpQVWtSRlVseHVJQ29nUUhKbFlXUnZibXg1WEc0Z0tpQkFjM1JoZEdsalhHNGdLaTljYm1OakxsSmxjMjlzZFhScGIyNVFiMnhwWTNrdVRrOWZRazlTUkVWU0lEMGdNVHRjYmx4dUx5b3FYRzRnS2lCVWFHVWdaVzUwYVhKbElHRndjR3hwWTJGMGFXOXVJR2x6SUhacGMybGliR1VnYVc0Z2RHaGxJSE53WldOcFptbGxaQ0JoY21WaElIZHBkR2h2ZFhRZ1pHbHpkRzl5ZEdsdmJpQjNhR2xzWlNCdFlXbHVkR0ZwYm1sdVp5QjBhR1VnYjNKcFoybHVZV3c4WW5JdlBseHVJQ29nWVhOd1pXTjBJSEpoZEdsdklHOW1JSFJvWlNCaGNIQnNhV05oZEdsdmJpNGdRbTl5WkdWeWN5QmpZVzRnWVhCd1pXRnlJRzl1SUhSM2J5QnphV1JsY3lCdlppQjBhR1VnWVhCd2JHbGpZWFJwYjI0dVhHNGdLaUJBY0hKdmNHVnlkSGtnZTA1MWJXSmxjbjBnVTBoUFYxOUJURXhjYmlBcUlFQnlaV0ZrYjI1c2VWeHVJQ29nUUhOMFlYUnBZMXh1SUNvdlhHNWpZeTVTWlhOdmJIVjBhVzl1VUc5c2FXTjVMbE5JVDFkZlFVeE1JRDBnTWp0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnWVhCd2JHbGpZWFJwYjI0Z2RHRnJaWE1nZEdobElHaGxhV2RvZENCdlppQjBhR1VnWkdWemFXZHVJSEpsYzI5c2RYUnBiMjRnYzJsNlpTQmhibVFnYlc5a2FXWnBaWE1nZEdobElIZHBaSFJvSUc5bUlIUm9aU0JwYm5SbGNtNWhiRHhpY2k4K1hHNGdLaUJqWVc1MllYTWdjMjhnZEdoaGRDQnBkQ0JtYVhSeklIUm9aU0JoYzNCbFkzUWdjbUYwYVc4Z2IyWWdkR2hsSUdSbGRtbGpaVHhpY2k4K1hHNGdLaUJ1YnlCa2FYTjBiM0owYVc5dUlIZHBiR3dnYjJOamRYSWdhRzkzWlhabGNpQjViM1VnYlhWemRDQnRZV3RsSUhOMWNtVWdlVzkxY2lCaGNIQnNhV05oZEdsdmJpQjNiM0pyY3lCdmJpQmthV1ptWlhKbGJuUThZbkl2UGx4dUlDb2dZWE53WldOMElISmhkR2x2YzF4dUlDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRVpKV0VWRVgwaEZTVWRJVkZ4dUlDb2dRSEpsWVdSdmJteDVYRzRnS2lCQWMzUmhkR2xqWEc0Z0tpOWNibU5qTGxKbGMyOXNkWFJwYjI1UWIyeHBZM2t1UmtsWVJVUmZTRVZKUjBoVUlEMGdNenRjYmx4dUx5b3FYRzRnS2lCVWFHVWdZWEJ3YkdsallYUnBiMjRnZEdGclpYTWdkR2hsSUhkcFpIUm9JRzltSUhSb1pTQmtaWE5wWjI0Z2NtVnpiMngxZEdsdmJpQnphWHBsSUdGdVpDQnRiMlJwWm1sbGN5QjBhR1VnYUdWcFoyaDBJRzltSUhSb1pTQnBiblJsY201aGJEeGljaTgrWEc0Z0tpQmpZVzUyWVhNZ2MyOGdkR2hoZENCcGRDQm1hWFJ6SUhSb1pTQmhjM0JsWTNRZ2NtRjBhVzhnYjJZZ2RHaGxJR1JsZG1salpUeGljaTgrWEc0Z0tpQnVieUJrYVhOMGIzSjBhVzl1SUhkcGJHd2diMk5qZFhJZ2FHOTNaWFpsY2lCNWIzVWdiWFZ6ZENCdFlXdGxJSE4xY21VZ2VXOTFjaUJoY0hCc2FXTmhkR2x2YmlCM2IzSnJjeUJ2YmlCa2FXWm1aWEpsYm5ROFluSXZQbHh1SUNvZ1lYTndaV04wSUhKaGRHbHZjMXh1SUNvZ1FIQnliM0JsY25SNUlIdE9kVzFpWlhKOUlFWkpXRVZFWDFkSlJGUklYRzRnS2lCQWNtVmhaRzl1YkhsY2JpQXFJRUJ6ZEdGMGFXTmNiaUFxTDF4dVkyTXVVbVZ6YjJ4MWRHbHZibEJ2YkdsamVTNUdTVmhGUkY5WFNVUlVTQ0E5SURRN1hHNWNiaThxS2x4dUlDb2dWVzVyYm05M0lIQnZiR2xqZVZ4dUlDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRlZPUzA1UFYwNWNiaUFxSUVCeVpXRmtiMjVzZVZ4dUlDb2dRSE4wWVhScFkxeHVJQ292WEc1all5NVNaWE52YkhWMGFXOXVVRzlzYVdONUxsVk9TMDVQVjA0Z1BTQTFPMXh1WEc0dktpcGNiaUFxSUVCdGIyUjFiR1VnWTJOY2JpQXFMMXh1WEc0dktpcGNiaUFxSUNFalpXNGdZMk11ZG1sbGR5QnBjeUIwYUdVZ2MyaGhjbVZrSUhacFpYY2diMkpxWldOMExseHVJQ29nSVNONmFDQmpZeTUyYVdWM0lPYVlyK1dGcU9XeGdPZWFoT2luaHVXYnZ1V3Z1ZWl4b2VPQWdseHVJQ29nUUhCeWIzQmxjblI1SUhacFpYZGNiaUFxSUVCemRHRjBhV05jYmlBcUlFQjBlWEJsSUh0V2FXVjNmVnh1SUNvdlhHNWpZeTUyYVdWM0lEMGdibVYzSUZacFpYY29LVHRjYmx4dUx5b3FYRzRnS2lBaEkyVnVJR05qTG5kcGJsTnBlbVVnYVhNZ2RHaGxJR0ZzYVdGeklHOWlhbVZqZENCbWIzSWdkR2hsSUhOcGVtVWdiMllnZEdobElHTjFjbkpsYm5RZ1oyRnRaU0IzYVc1a2IzY3VYRzRnS2lBaEkzcG9JR05qTG5kcGJsTnBlbVVnNUxpNjViMlQ1WW1ONTVxRTVyaTQ1b2lQNTZxWDVZK2o1NXFFNWFTbjViQ1A0NENDWEc0Z0tpQkFjSEp2Y0dWeWRIa2dkMmx1VTJsNlpWeHVJQ29nUUhSNWNHVWdVMmw2WlZ4dUlDb3ZYRzVqWXk1M2FXNVRhWHBsSUQwZ1kyTXVkaklvS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmpZeTUyYVdWM08xeHVJbDE5Il19