(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCSys.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var settingPlatform = void 0;
        if (!CC_EDITOR) {
            settingPlatform = window._CCSettings ? _CCSettings.platform : undefined;
        }
        var isBaiduGame = settingPlatform === 'baidugame' || settingPlatform === 'baidugame-subcontext';
        var isVivoGame = settingPlatform === 'qgame';
        var isOppoGame = settingPlatform === 'quickgame';
        var isHuaweiGame = settingPlatform === 'huawei';
        var isJKWGame = settingPlatform === 'jkw-game';
        var _global = typeof window === 'undefined' ? global : window;
        function initSys() {
            cc.sys = {};
            var sys = cc.sys;
            sys.LANGUAGE_ENGLISH = 'en';
            sys.LANGUAGE_CHINESE = 'zh';
            sys.LANGUAGE_FRENCH = 'fr';
            sys.LANGUAGE_ITALIAN = 'it';
            sys.LANGUAGE_GERMAN = 'de';
            sys.LANGUAGE_SPANISH = 'es';
            sys.LANGUAGE_DUTCH = 'du';
            sys.LANGUAGE_RUSSIAN = 'ru';
            sys.LANGUAGE_KOREAN = 'ko';
            sys.LANGUAGE_JAPANESE = 'ja';
            sys.LANGUAGE_HUNGARIAN = 'hu';
            sys.LANGUAGE_PORTUGUESE = 'pt';
            sys.LANGUAGE_ARABIC = 'ar';
            sys.LANGUAGE_NORWEGIAN = 'no';
            sys.LANGUAGE_POLISH = 'pl';
            sys.LANGUAGE_TURKISH = 'tr';
            sys.LANGUAGE_UKRAINIAN = 'uk';
            sys.LANGUAGE_ROMANIAN = 'ro';
            sys.LANGUAGE_BULGARIAN = 'bg';
            sys.LANGUAGE_UNKNOWN = 'unknown';
            sys.OS_IOS = 'iOS';
            sys.OS_ANDROID = 'Android';
            sys.OS_WINDOWS = 'Windows';
            sys.OS_MARMALADE = 'Marmalade';
            sys.OS_LINUX = 'Linux';
            sys.OS_BADA = 'Bada';
            sys.OS_BLACKBERRY = 'Blackberry';
            sys.OS_OSX = 'OS X';
            sys.OS_WP8 = 'WP8';
            sys.OS_WINRT = 'WINRT';
            sys.OS_UNKNOWN = 'Unknown';
            sys.UNKNOWN = -1;
            sys.WIN32 = 0;
            sys.LINUX = 1;
            sys.MACOS = 2;
            sys.ANDROID = 3;
            sys.IPHONE = 4;
            sys.IPAD = 5;
            sys.BLACKBERRY = 6;
            sys.NACL = 7;
            sys.EMSCRIPTEN = 8;
            sys.TIZEN = 9;
            sys.WINRT = 10;
            sys.WP8 = 11;
            sys.MOBILE_BROWSER = 100;
            sys.DESKTOP_BROWSER = 101;
            sys.EDITOR_PAGE = 102;
            sys.EDITOR_CORE = 103;
            sys.WECHAT_GAME = 104;
            sys.QQ_PLAY = 105;
            sys.FB_PLAYABLE_ADS = 106;
            sys.BAIDU_GAME = 107;
            sys.VIVO_GAME = 108;
            sys.OPPO_GAME = 109;
            sys.HUAWEI_GAME = 110;
            sys.XIAOMI_GAME = 111;
            sys.JKW_GAME = 112;
            sys.ALIPAY_GAME = 113;
            sys.BROWSER_TYPE_WECHAT = 'wechat';
            sys.BROWSER_TYPE_WECHAT_GAME = 'wechatgame';
            sys.BROWSER_TYPE_WECHAT_GAME_SUB = 'wechatgamesub';
            sys.BROWSER_TYPE_BAIDU_GAME = 'baidugame';
            sys.BROWSER_TYPE_BAIDU_GAME_SUB = 'baidugamesub';
            sys.BROWSER_TYPE_XIAOMI_GAME = 'xiaomigame';
            sys.BROWSER_TYPE_ALIPAY_GAME = 'alipaygame';
            sys.BROWSER_TYPE_QQ_PLAY = 'qqplay';
            sys.BROWSER_TYPE_ANDROID = 'androidbrowser';
            sys.BROWSER_TYPE_IE = 'ie';
            sys.BROWSER_TYPE_EDGE = 'edge';
            sys.BROWSER_TYPE_QQ = 'qqbrowser';
            sys.BROWSER_TYPE_MOBILE_QQ = 'mqqbrowser';
            sys.BROWSER_TYPE_UC = 'ucbrowser';
            sys.BROWSER_TYPE_UCBS = 'ucbs';
            sys.BROWSER_TYPE_360 = '360browser';
            sys.BROWSER_TYPE_BAIDU_APP = 'baiduboxapp';
            sys.BROWSER_TYPE_BAIDU = 'baidubrowser';
            sys.BROWSER_TYPE_MAXTHON = 'maxthon';
            sys.BROWSER_TYPE_OPERA = 'opera';
            sys.BROWSER_TYPE_OUPENG = 'oupeng';
            sys.BROWSER_TYPE_MIUI = 'miuibrowser';
            sys.BROWSER_TYPE_FIREFOX = 'firefox';
            sys.BROWSER_TYPE_SAFARI = 'safari';
            sys.BROWSER_TYPE_CHROME = 'chrome';
            sys.BROWSER_TYPE_LIEBAO = 'liebao';
            sys.BROWSER_TYPE_QZONE = 'qzone';
            sys.BROWSER_TYPE_SOUGOU = 'sogou';
            sys.BROWSER_TYPE_UNKNOWN = 'unknown';
            sys.isNative = CC_JSB || CC_RUNTIME;
            sys.isBrowser = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && (typeof document === 'undefined' ? 'undefined' : _typeof(document)) === 'object' && !CC_WECHATGAME && !CC_QQPLAY && !CC_JSB && !CC_RUNTIME && !isBaiduGame;
            sys.glExtension = function (name) {
                if ((CC_WECHATGAME || isBaiduGame) && name === 'OES_texture_float') {
                    return false;
                }
                return !!cc.renderer.device.ext(name);
            };
            sys.getMaxJointMatrixSize = function () {
                if (!sys._maxJointMatrixSize) {
                    var JOINT_MATRICES_SIZE = 50;
                    var LEFT_UNIFORM_SIZE = 10;
                    var gl = cc.game._renderContext;
                    var maxUniforms = Math.floor(gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS) / 4) - LEFT_UNIFORM_SIZE;
                    if (maxUniforms < JOINT_MATRICES_SIZE) {
                        sys._maxJointMatrixSize = 0;
                    } else {
                        sys._maxJointMatrixSize = JOINT_MATRICES_SIZE;
                    }
                }
                return sys._maxJointMatrixSize;
            };
            if (_global.__platform && _global.__platform.getSystemInfo) {
                var _env = _global.__platform.getSystemInfo();
                sys.isNative = _env.isNative;
                sys.isBrowser = _env.isBrowser;
                sys.platform = _env.platform;
                sys.browserType = _env.browserType;
                sys.isMobile = _env.isMobile;
                sys.language = _env.language;
                sys.languageCode = _env.language.toLowerCase();
                sys.os = _env.os;
                sys.osVersion = _env.osVersion;
                sys.osMainVersion = _env.osMainVersion;
                sys.browserVersion = _env.browserVersion;
                sys.windowPixelResolution = _env.windowPixelResolution;
                sys.localStorage = _env.localStorage;
                sys.capabilities = _env.capabilities;
                sys.__audioSupport = _env.audioSupport;
                _global.__platform = undefined;
            } else if (CC_EDITOR && Editor.isMainProcess) {
                sys.isMobile = false;
                sys.platform = sys.EDITOR_CORE;
                sys.language = sys.LANGUAGE_UNKNOWN;
                sys.languageCode = undefined;
                sys.os = {
                    darwin: sys.OS_OSX,
                    win32: sys.OS_WINDOWS,
                    linux: sys.OS_LINUX
                }[process.platform] || sys.OS_UNKNOWN;
                sys.browserType = null;
                sys.browserVersion = null;
                sys.windowPixelResolution = {
                    width: 0,
                    height: 0
                };
                sys.__audioSupport = {};
            } else if (CC_JSB || CC_RUNTIME) {
                var platform = void 0;
                if (isVivoGame) {
                    platform = sys.VIVO_GAME;
                } else if (isOppoGame) {
                    platform = sys.OPPO_GAME;
                } else if (isHuaweiGame) {
                    platform = sys.HUAWEI_GAME;
                } else if (isJKWGame) {
                    platform = sys.JKW_GAME;
                } else {
                    platform = __getPlatform();
                }
                sys.platform = platform;
                sys.isMobile = platform === sys.ANDROID || platform === sys.IPAD || platform === sys.IPHONE || platform === sys.WP8 || platform === sys.TIZEN || platform === sys.BLACKBERRY || platform === sys.XIAOMI_GAME || isVivoGame || isOppoGame || isHuaweiGame || isJKWGame;
                sys.os = __getOS();
                sys.language = __getCurrentLanguage();
                var languageCode;
                if (CC_JSB) {
                    languageCode = __getCurrentLanguageCode();
                }
                sys.languageCode = languageCode ? languageCode.toLowerCase() : undefined;
                sys.osVersion = __getOSVersion();
                sys.osMainVersion = parseInt(sys.osVersion);
                sys.browserType = null;
                sys.browserVersion = null;
                var w = window.innerWidth;
                var h = window.innerHeight;
                var ratio = window.devicePixelRatio || 1;
                sys.windowPixelResolution = {
                    width: ratio * w,
                    height: ratio * h
                };
                sys.localStorage = window.localStorage;
                var capabilities;
                capabilities = sys.capabilities = {
                    'canvas': false,
                    'opengl': true,
                    'webp': true
                };
                if (sys.isMobile) {
                    capabilities['accelerometer'] = true;
                    capabilities['touches'] = true;
                } else {
                    capabilities['keyboard'] = true;
                    capabilities['mouse'] = true;
                    capabilities['touches'] = false;
                }
                sys.__audioSupport = {
                    ONLY_ONE: false,
                    WEB_AUDIO: false,
                    DELAY_CREATE_CTX: false,
                    format: ['.mp3']
                };
            } else if (CC_WECHATGAME) {
                var env = wx.getSystemInfoSync();
                sys.isMobile = true;
                sys.platform = sys.WECHAT_GAME;
                sys.language = env.language.substr(0, 2);
                sys.languageCode = env.language.toLowerCase();
                var system = env.system.toLowerCase();
                if (env.platform === 'android') {
                    sys.os = sys.OS_ANDROID;
                } else if (env.platform === 'ios') {
                    sys.os = sys.OS_IOS;
                } else if (env.platform === 'devtools') {
                    sys.isMobile = false;
                    if (system.indexOf('android') > -1) {
                        sys.os = sys.OS_ANDROID;
                    } else if (system.indexOf('ios') > -1) {
                        sys.os = sys.OS_IOS;
                    }
                }
                if (system === 'android p') {
                    system = 'android p 9.0';
                }
                var version = /[\d\.]+/.exec(system);
                sys.osVersion = version ? version[0] : system;
                sys.osMainVersion = parseInt(sys.osVersion);
                if (CC_WECHATGAMESUB) {
                    sys.browserType = sys.BROWSER_TYPE_WECHAT_GAME_SUB;
                } else {
                    sys.browserType = sys.BROWSER_TYPE_WECHAT_GAME;
                }
                sys.browserVersion = env.version;
                var w = env.windowWidth;
                var h = env.windowHeight;
                var ratio = env.pixelRatio || 1;
                sys.windowPixelResolution = {
                    width: ratio * w,
                    height: ratio * h
                };
                sys.localStorage = window.localStorage;
                var _supportWebGL = _supportWebp = false;
                try {
                    var _canvas = document.createElement('canvas');
                    _supportWebGL = _canvas.getContext('webgl');
                    _supportWebp = _canvas.toDataURL('image/webp').startsWith('data:image/webp');
                } catch (err) {
                }
                sys.capabilities = {
                    'canvas': true,
                    'opengl': !!_supportWebGL,
                    'webp': _supportWebp
                };
                sys.__audioSupport = {
                    ONLY_ONE: false,
                    WEB_AUDIO: false,
                    DELAY_CREATE_CTX: false,
                    format: ['.mp3']
                };
            } else if (CC_QQPLAY) {
                var env = window['BK']['Director']['queryDeviceInfo']();
                sys.isMobile = true;
                sys.platform = sys.QQ_PLAY;
                sys.language = sys.LANGUAGE_UNKNOWN;
                sys.languageCode = undefined;
                if (env.platform === 'android') {
                    sys.os = sys.OS_ANDROID;
                } else if (env.platform === 'ios') {
                    sys.os = sys.OS_IOS;
                } else {
                    sys.os = sys.OS_UNKNOWN;
                }
                sys.osVersion = env.version;
                sys.osMainVersion = parseInt(sys.osVersion.split('.')[0]);
                sys.browserType = sys.BROWSER_TYPE_QQ_PLAY;
                sys.browserVersion = 0;
                var w = env.screenWidth;
                var h = env.screenHeight;
                var ratio = env.pixelRatio || 1;
                sys.windowPixelResolution = {
                    width: ratio * w,
                    height: ratio * h
                };
                sys.localStorage = window.localStorage;
                sys.capabilities = {
                    'canvas': false,
                    'opengl': true,
                    'webp': false
                };
                sys.__audioSupport = {
                    ONLY_ONE: false,
                    WEB_AUDIO: false,
                    DELAY_CREATE_CTX: false,
                    format: ['.mp3']
                };
            } else if (isBaiduGame) {
                var _env2 = __device.getSystemInfo();
                sys.platform = _env2.platform;
                sys.browserType = _env2.browserType;
                sys.isMobile = _env2.isMobile;
                sys.language = _env2.language;
                sys.languageCode = _env2.language.toLowerCase();
                sys.os = _env2.os;
                sys.osVersion = _env2.osVersion;
                sys.osMainVersion = _env2.osMainVersion;
                sys.browserVersion = _env2.browserVersion;
                sys.windowPixelResolution = _env2.windowPixelResolution;
                sys.localStorage = _env2.localStorage;
                sys.capabilities = _env2.capabilities;
                sys.__audioSupport = _env2.audioSupport;
            } else {
                var win = window, nav = win.navigator, doc = document, docEle = doc.documentElement;
                var ua = nav.userAgent.toLowerCase();
                if (CC_EDITOR) {
                    sys.isMobile = false;
                    sys.platform = sys.EDITOR_PAGE;
                } else {
                    sys.isMobile = /mobile|android|iphone|ipad/.test(ua);
                    if (typeof FbPlayableAd !== 'undefined') {
                        sys.platform = sys.FB_PLAYABLE_ADS;
                    } else {
                        sys.platform = sys.isMobile ? sys.MOBILE_BROWSER : sys.DESKTOP_BROWSER;
                    }
                }
                var currLanguage = nav.language;
                currLanguage = currLanguage ? currLanguage : nav.browserLanguage;
                sys.languageCode = currLanguage.toLowerCase();
                currLanguage = currLanguage ? currLanguage.split('-')[0] : sys.LANGUAGE_ENGLISH;
                sys.language = currLanguage;
                var isAndroid = false, iOS = false, osVersion = '', osMainVersion = 0;
                var uaResult = /android (\d+(?:\.\d+)*)/i.exec(ua) || /android (\d+(?:\.\d+)*)/i.exec(nav.platform);
                if (uaResult) {
                    isAndroid = true;
                    osVersion = uaResult[1] || '';
                    osMainVersion = parseInt(osVersion) || 0;
                }
                uaResult = /(iPad|iPhone|iPod).*OS ((\d+_?){2,3})/i.exec(ua);
                if (uaResult) {
                    iOS = true;
                    osVersion = uaResult[2] || '';
                    osMainVersion = parseInt(osVersion) || 0;
                } else if (/(iPhone|iPad|iPod)/.exec(nav.platform)) {
                    iOS = true;
                    osVersion = '';
                    osMainVersion = 0;
                }
                var osName = sys.OS_UNKNOWN;
                if (nav.appVersion.indexOf('Win') !== -1)
                    osName = sys.OS_WINDOWS;
                else if (iOS)
                    osName = sys.OS_IOS;
                else if (nav.appVersion.indexOf('Mac') !== -1)
                    osName = sys.OS_OSX;
                else if (nav.appVersion.indexOf('X11') !== -1 && nav.appVersion.indexOf('Linux') === -1)
                    osName = sys.OS_UNIX;
                else if (isAndroid)
                    osName = sys.OS_ANDROID;
                else if (nav.appVersion.indexOf('Linux') !== -1 || ua.indexOf('ubuntu') !== -1)
                    osName = sys.OS_LINUX;
                sys.os = osName;
                sys.osVersion = osVersion;
                sys.osMainVersion = osMainVersion;
                sys.browserType = sys.BROWSER_TYPE_UNKNOWN;
                (function () {
                    var typeReg1 = /mqqbrowser|micromessenger|qq|sogou|qzone|liebao|maxthon|ucbs|360 aphone|360browser|baiduboxapp|baidubrowser|maxthon|mxbrowser|miuibrowser/i;
                    var typeReg2 = /qqbrowser|ucbrowser|ubrowser|edge/i;
                    var typeReg3 = /chrome|safari|firefox|trident|opera|opr\/|oupeng/i;
                    var browserTypes = typeReg1.exec(ua) || typeReg2.exec(ua) || typeReg3.exec(ua);
                    var browserType = browserTypes ? browserTypes[0].toLowerCase() : sys.BROWSER_TYPE_UNKNOWN;
                    if (CC_WECHATGAME)
                        browserType = sys.BROWSER_TYPE_WECHAT_GAME;
                    else if (CC_QQPLAY)
                        browserType = sys.BROWSER_TYPE_QQ_PLAY;
                    else if (browserType === 'safari' && isAndroid)
                        browserType = sys.BROWSER_TYPE_ANDROID;
                    else if (browserType === 'qq' && ua.match(/android.*applewebkit/i))
                        browserType = sys.BROWSER_TYPE_ANDROID;
                    var typeMap = {
                        'micromessenger': sys.BROWSER_TYPE_WECHAT,
                        'trident': sys.BROWSER_TYPE_IE,
                        'edge': sys.BROWSER_TYPE_EDGE,
                        '360 aphone': sys.BROWSER_TYPE_360,
                        'mxbrowser': sys.BROWSER_TYPE_MAXTHON,
                        'opr/': sys.BROWSER_TYPE_OPERA,
                        'ubrowser': sys.BROWSER_TYPE_UC
                    };
                    sys.browserType = typeMap[browserType] || browserType;
                }());
                sys.browserVersion = '';
                (function () {
                    var versionReg1 = /(mqqbrowser|micromessenger|qq|sogou|qzone|liebao|maxthon|uc|ucbs|360 aphone|360|baiduboxapp|baidu|maxthon|mxbrowser|miui(?:.hybrid)?)(mobile)?(browser)?\/?([\d.]+)/i;
                    var versionReg2 = /(qqbrowser|chrome|safari|firefox|trident|opera|opr\/|oupeng)(mobile)?(browser)?\/?([\d.]+)/i;
                    var tmp = ua.match(versionReg1);
                    if (!tmp)
                        tmp = ua.match(versionReg2);
                    sys.browserVersion = tmp ? tmp[4] : '';
                }());
                var w = window.innerWidth || document.documentElement.clientWidth;
                var h = window.innerHeight || document.documentElement.clientHeight;
                var ratio = window.devicePixelRatio || 1;
                sys.windowPixelResolution = {
                    width: ratio * w,
                    height: ratio * h
                };
                sys._checkWebGLRenderMode = function () {
                    if (cc.game.renderType !== cc.game.RENDER_TYPE_WEBGL)
                        throw new Error('This feature supports WebGL render mode only.');
                };
                var _tmpCanvas1 = document.createElement('canvas');
                var create3DContext = function create3DContext(canvas, opt_attribs, opt_contextType) {
                    if (opt_contextType) {
                        try {
                            return canvas.getContext(opt_contextType, opt_attribs);
                        } catch (e) {
                            return null;
                        }
                    } else {
                        return create3DContext(canvas, opt_attribs, 'webgl') || create3DContext(canvas, opt_attribs, 'experimental-webgl') || create3DContext(canvas, opt_attribs, 'webkit-3d') || create3DContext(canvas, opt_attribs, 'moz-webgl') || null;
                    }
                };
                try {
                    var localStorage = sys.localStorage = win.localStorage;
                    localStorage.setItem('storage', '');
                    localStorage.removeItem('storage');
                    localStorage = null;
                } catch (e) {
                    var warn = function warn() {
                        cc.warnID(5200);
                    };
                    sys.localStorage = {
                        getItem: warn,
                        setItem: warn,
                        removeItem: warn,
                        clear: warn
                    };
                }
                var _supportWebp = _tmpCanvas1.toDataURL('image/webp').startsWith('data:image/webp');
                var _supportCanvas = !!_tmpCanvas1.getContext('2d');
                var _supportWebGL = false;
                if (CC_TEST) {
                    _supportWebGL = false;
                } else if (sys.browserType === sys.BROWSER_TYPE_WECHAT_GAME) {
                    _supportWebGL = true;
                } else if (win.WebGLRenderingContext) {
                    _supportWebGL = true;
                }
                var capabilities = sys.capabilities = {
                    'canvas': _supportCanvas,
                    'opengl': _supportWebGL,
                    'webp': _supportWebp
                };
                if (docEle['ontouchstart'] !== undefined || doc['ontouchstart'] !== undefined || nav.msPointerEnabled)
                    capabilities['touches'] = true;
                if (docEle['onmouseup'] !== undefined)
                    capabilities['mouse'] = true;
                if (docEle['onkeyup'] !== undefined)
                    capabilities['keyboard'] = true;
                if (win.DeviceMotionEvent || win.DeviceOrientationEvent)
                    capabilities['accelerometer'] = true;
                var __audioSupport;
                (function () {
                    var DEBUG = false;
                    var version = sys.browserVersion;
                    var supportWebAudio = sys.browserType !== sys.BROWSER_TYPE_WECHAT_GAME && !!(window.AudioContext || window.webkitAudioContext || window.mozAudioContext);
                    __audioSupport = {
                        ONLY_ONE: false,
                        WEB_AUDIO: supportWebAudio,
                        DELAY_CREATE_CTX: false
                    };
                    if (sys.os === sys.OS_IOS) {
                        __audioSupport.USE_LOADER_EVENT = 'loadedmetadata';
                    }
                    if (sys.browserType === sys.BROWSER_TYPE_FIREFOX) {
                        __audioSupport.DELAY_CREATE_CTX = true;
                        __audioSupport.USE_LOADER_EVENT = 'canplay';
                    }
                    if (sys.os === sys.OS_ANDROID) {
                        if (sys.browserType === sys.BROWSER_TYPE_UC) {
                            __audioSupport.ONE_SOURCE = true;
                        }
                    }
                    if (DEBUG) {
                        setTimeout(function () {
                            cc.log('browse type: ' + sys.browserType);
                            cc.log('browse version: ' + version);
                            cc.log('MULTI_CHANNEL: ' + __audioSupport.MULTI_CHANNEL);
                            cc.log('WEB_AUDIO: ' + __audioSupport.WEB_AUDIO);
                            cc.log('AUTOPLAY: ' + __audioSupport.AUTOPLAY);
                        }, 0);
                    }
                }());
                try {
                    if (__audioSupport.WEB_AUDIO) {
                        __audioSupport.context = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();
                        if (__audioSupport.DELAY_CREATE_CTX) {
                            setTimeout(function () {
                                __audioSupport.context = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();
                            }, 0);
                        }
                    }
                } catch (error) {
                    __audioSupport.WEB_AUDIO = false;
                    cc.logID(5201);
                }
                var formatSupport = [];
                (function () {
                    var audio = document.createElement('audio');
                    if (audio.canPlayType) {
                        var ogg = audio.canPlayType('audio/ogg; codecs="vorbis"');
                        if (ogg)
                            formatSupport.push('.ogg');
                        var mp3 = audio.canPlayType('audio/mpeg');
                        if (mp3)
                            formatSupport.push('.mp3');
                        var wav = audio.canPlayType('audio/wav; codecs="1"');
                        if (wav)
                            formatSupport.push('.wav');
                        var mp4 = audio.canPlayType('audio/mp4');
                        if (mp4)
                            formatSupport.push('.mp4');
                        var m4a = audio.canPlayType('audio/x-m4a');
                        if (m4a)
                            formatSupport.push('.m4a');
                    }
                }());
                __audioSupport.format = formatSupport;
                sys.__audioSupport = __audioSupport;
            }
            sys.NetworkType = {
                NONE: 0,
                LAN: 1,
                WWAN: 2
            };
            sys.getNetworkType = function () {
                return sys.NetworkType.LAN;
            };
            sys.getBatteryLevel = function () {
                return 1;
            };
            sys.garbageCollect = function () {
            };
            sys.restartVM = function () {
            };
            sys.getSafeAreaRect = function () {
                var visibleSize = cc.view.getVisibleSize();
                return cc.rect(0, 0, visibleSize.width, visibleSize.height);
            };
            sys.isObjectValid = function (obj) {
                if (obj) {
                    return true;
                }
                return false;
            };
            sys.dump = function () {
                var self = this;
                var str = '';
                str += 'isMobile : ' + self.isMobile + '\r\n';
                str += 'language : ' + self.language + '\r\n';
                str += 'browserType : ' + self.browserType + '\r\n';
                str += 'browserVersion : ' + self.browserVersion + '\r\n';
                str += 'capabilities : ' + JSON.stringify(self.capabilities) + '\r\n';
                str += 'os : ' + self.os + '\r\n';
                str += 'osVersion : ' + self.osVersion + '\r\n';
                str += 'platform : ' + self.platform + '\r\n';
                str += 'Using ' + (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? 'WEBGL' : 'CANVAS') + ' renderer.' + '\r\n';
                cc.log(str);
            };
            sys.openURL = function (url) {
                if (CC_JSB || CC_RUNTIME) {
                    jsb.openURL(url);
                } else {
                    window.open(url);
                }
            };
            sys.now = function () {
                if (Date.now) {
                    return Date.now();
                } else {
                    return +new Date();
                }
            };
            return sys;
        }
        var sys = cc && cc.sys ? cc.sys : initSys();
        module.exports = sys;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDU3lzLmpzIiwiL1VzZXJzL3p6ZjIwMTkvRGVza3RvcC9kZXZlbG9wbWVudC9zdXBwb3J0X2FzdGMvZW5naW5lL2NvY29zMmQvY29yZS9wbGF0Zm9ybS9DQ1N5cy5qcyJdLCJuYW1lcyI6WyJzZXR0aW5nUGxhdGZvcm0iLCJDQ19FRElUT1IiLCJ3aW5kb3ciLCJfQ0NTZXR0aW5ncyIsInBsYXRmb3JtIiwidW5kZWZpbmVkIiwiaXNCYWlkdUdhbWUiLCJpc1Zpdm9HYW1lIiwiaXNPcHBvR2FtZSIsImlzSHVhd2VpR2FtZSIsImlzSktXR2FtZSIsIl9nbG9iYWwiLCJnbG9iYWwiLCJpbml0U3lzIiwiY2MiLCJzeXMiLCJMQU5HVUFHRV9FTkdMSVNIIiwiTEFOR1VBR0VfQ0hJTkVTRSIsIkxBTkdVQUdFX0ZSRU5DSCIsIkxBTkdVQUdFX0lUQUxJQU4iLCJMQU5HVUFHRV9HRVJNQU4iLCJMQU5HVUFHRV9TUEFOSVNIIiwiTEFOR1VBR0VfRFVUQ0giLCJMQU5HVUFHRV9SVVNTSUFOIiwiTEFOR1VBR0VfS09SRUFOIiwiTEFOR1VBR0VfSkFQQU5FU0UiLCJMQU5HVUFHRV9IVU5HQVJJQU4iLCJMQU5HVUFHRV9QT1JUVUdVRVNFIiwiTEFOR1VBR0VfQVJBQklDIiwiTEFOR1VBR0VfTk9SV0VHSUFOIiwiTEFOR1VBR0VfUE9MSVNIIiwiTEFOR1VBR0VfVFVSS0lTSCIsIkxBTkdVQUdFX1VLUkFJTklBTiIsIkxBTkdVQUdFX1JPTUFOSUFOIiwiTEFOR1VBR0VfQlVMR0FSSUFOIiwiTEFOR1VBR0VfVU5LTk9XTiIsIk9TX0lPUyIsIk9TX0FORFJPSUQiLCJPU19XSU5ET1dTIiwiT1NfTUFSTUFMQURFIiwiT1NfTElOVVgiLCJPU19CQURBIiwiT1NfQkxBQ0tCRVJSWSIsIk9TX09TWCIsIk9TX1dQOCIsIk9TX1dJTlJUIiwiT1NfVU5LTk9XTiIsIlVOS05PV04iLCJXSU4zMiIsIkxJTlVYIiwiTUFDT1MiLCJBTkRST0lEIiwiSVBIT05FIiwiSVBBRCIsIkJMQUNLQkVSUlkiLCJOQUNMIiwiRU1TQ1JJUFRFTiIsIlRJWkVOIiwiV0lOUlQiLCJXUDgiLCJNT0JJTEVfQlJPV1NFUiIsIkRFU0tUT1BfQlJPV1NFUiIsIkVESVRPUl9QQUdFIiwiRURJVE9SX0NPUkUiLCJXRUNIQVRfR0FNRSIsIlFRX1BMQVkiLCJGQl9QTEFZQUJMRV9BRFMiLCJCQUlEVV9HQU1FIiwiVklWT19HQU1FIiwiT1BQT19HQU1FIiwiSFVBV0VJX0dBTUUiLCJYSUFPTUlfR0FNRSIsIkpLV19HQU1FIiwiQUxJUEFZX0dBTUUiLCJCUk9XU0VSX1RZUEVfV0VDSEFUIiwiQlJPV1NFUl9UWVBFX1dFQ0hBVF9HQU1FIiwiQlJPV1NFUl9UWVBFX1dFQ0hBVF9HQU1FX1NVQiIsIkJST1dTRVJfVFlQRV9CQUlEVV9HQU1FIiwiQlJPV1NFUl9UWVBFX0JBSURVX0dBTUVfU1VCIiwiQlJPV1NFUl9UWVBFX1hJQU9NSV9HQU1FIiwiQlJPV1NFUl9UWVBFX0FMSVBBWV9HQU1FIiwiQlJPV1NFUl9UWVBFX1FRX1BMQVkiLCJCUk9XU0VSX1RZUEVfQU5EUk9JRCIsIkJST1dTRVJfVFlQRV9JRSIsIkJST1dTRVJfVFlQRV9FREdFIiwiQlJPV1NFUl9UWVBFX1FRIiwiQlJPV1NFUl9UWVBFX01PQklMRV9RUSIsIkJST1dTRVJfVFlQRV9VQyIsIkJST1dTRVJfVFlQRV9VQ0JTIiwiQlJPV1NFUl9UWVBFXzM2MCIsIkJST1dTRVJfVFlQRV9CQUlEVV9BUFAiLCJCUk9XU0VSX1RZUEVfQkFJRFUiLCJCUk9XU0VSX1RZUEVfTUFYVEhPTiIsIkJST1dTRVJfVFlQRV9PUEVSQSIsIkJST1dTRVJfVFlQRV9PVVBFTkciLCJCUk9XU0VSX1RZUEVfTUlVSSIsIkJST1dTRVJfVFlQRV9GSVJFRk9YIiwiQlJPV1NFUl9UWVBFX1NBRkFSSSIsIkJST1dTRVJfVFlQRV9DSFJPTUUiLCJCUk9XU0VSX1RZUEVfTElFQkFPIiwiQlJPV1NFUl9UWVBFX1FaT05FIiwiQlJPV1NFUl9UWVBFX1NPVUdPVSIsIkJST1dTRVJfVFlQRV9VTktOT1dOIiwiaXNOYXRpdmUiLCJDQ19KU0IiLCJDQ19SVU5USU1FIiwiaXNCcm93c2VyIiwiZG9jdW1lbnQiLCJDQ19XRUNIQVRHQU1FIiwiQ0NfUVFQTEFZIiwiZ2xFeHRlbnNpb24iLCJuYW1lIiwicmVuZGVyZXIiLCJkZXZpY2UiLCJleHQiLCJnZXRNYXhKb2ludE1hdHJpeFNpemUiLCJfbWF4Sm9pbnRNYXRyaXhTaXplIiwiSk9JTlRfTUFUUklDRVNfU0laRSIsIkxFRlRfVU5JRk9STV9TSVpFIiwiZ2wiLCJnYW1lIiwiX3JlbmRlckNvbnRleHQiLCJtYXhVbmlmb3JtcyIsIk1hdGgiLCJmbG9vciIsImdldFBhcmFtZXRlciIsIk1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTIiwiX19wbGF0Zm9ybSIsImdldFN5c3RlbUluZm8iLCJlbnYiLCJicm93c2VyVHlwZSIsImlzTW9iaWxlIiwibGFuZ3VhZ2UiLCJsYW5ndWFnZUNvZGUiLCJ0b0xvd2VyQ2FzZSIsIm9zIiwib3NWZXJzaW9uIiwib3NNYWluVmVyc2lvbiIsImJyb3dzZXJWZXJzaW9uIiwid2luZG93UGl4ZWxSZXNvbHV0aW9uIiwibG9jYWxTdG9yYWdlIiwiY2FwYWJpbGl0aWVzIiwiX19hdWRpb1N1cHBvcnQiLCJhdWRpb1N1cHBvcnQiLCJFZGl0b3IiLCJpc01haW5Qcm9jZXNzIiwiZGFyd2luIiwid2luMzIiLCJsaW51eCIsInByb2Nlc3MiLCJ3aWR0aCIsImhlaWdodCIsIl9fZ2V0UGxhdGZvcm0iLCJfX2dldE9TIiwiX19nZXRDdXJyZW50TGFuZ3VhZ2UiLCJfX2dldEN1cnJlbnRMYW5ndWFnZUNvZGUiLCJfX2dldE9TVmVyc2lvbiIsInBhcnNlSW50IiwidyIsImlubmVyV2lkdGgiLCJoIiwiaW5uZXJIZWlnaHQiLCJyYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJPTkxZX09ORSIsIldFQl9BVURJTyIsIkRFTEFZX0NSRUFURV9DVFgiLCJmb3JtYXQiLCJ3eCIsImdldFN5c3RlbUluZm9TeW5jIiwic3Vic3RyIiwic3lzdGVtIiwiaW5kZXhPZiIsInZlcnNpb24iLCJleGVjIiwiQ0NfV0VDSEFUR0FNRVNVQiIsIndpbmRvd1dpZHRoIiwid2luZG93SGVpZ2h0IiwicGl4ZWxSYXRpbyIsIl9zdXBwb3J0V2ViR0wiLCJfc3VwcG9ydFdlYnAiLCJfY2FudmFzIiwiY3JlYXRlRWxlbWVudCIsImdldENvbnRleHQiLCJ0b0RhdGFVUkwiLCJzdGFydHNXaXRoIiwiZXJyIiwic3BsaXQiLCJzY3JlZW5XaWR0aCIsInNjcmVlbkhlaWdodCIsIl9fZGV2aWNlIiwid2luIiwibmF2IiwibmF2aWdhdG9yIiwiZG9jIiwiZG9jRWxlIiwiZG9jdW1lbnRFbGVtZW50IiwidWEiLCJ1c2VyQWdlbnQiLCJ0ZXN0IiwiRmJQbGF5YWJsZUFkIiwiY3Vyckxhbmd1YWdlIiwiYnJvd3Nlckxhbmd1YWdlIiwiaXNBbmRyb2lkIiwiaU9TIiwidWFSZXN1bHQiLCJvc05hbWUiLCJhcHBWZXJzaW9uIiwiT1NfVU5JWCIsInR5cGVSZWcxIiwidHlwZVJlZzIiLCJ0eXBlUmVnMyIsImJyb3dzZXJUeXBlcyIsIm1hdGNoIiwidHlwZU1hcCIsInZlcnNpb25SZWcxIiwidmVyc2lvblJlZzIiLCJ0bXAiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIl9jaGVja1dlYkdMUmVuZGVyTW9kZSIsInJlbmRlclR5cGUiLCJSRU5ERVJfVFlQRV9XRUJHTCIsIkVycm9yIiwiX3RtcENhbnZhczEiLCJjcmVhdGUzRENvbnRleHQiLCJjYW52YXMiLCJvcHRfYXR0cmlicyIsIm9wdF9jb250ZXh0VHlwZSIsImUiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsIndhcm4iLCJ3YXJuSUQiLCJnZXRJdGVtIiwiY2xlYXIiLCJfc3VwcG9ydENhbnZhcyIsIkNDX1RFU1QiLCJXZWJHTFJlbmRlcmluZ0NvbnRleHQiLCJtc1BvaW50ZXJFbmFibGVkIiwiRGV2aWNlTW90aW9uRXZlbnQiLCJEZXZpY2VPcmllbnRhdGlvbkV2ZW50IiwiREVCVUciLCJzdXBwb3J0V2ViQXVkaW8iLCJBdWRpb0NvbnRleHQiLCJ3ZWJraXRBdWRpb0NvbnRleHQiLCJtb3pBdWRpb0NvbnRleHQiLCJVU0VfTE9BREVSX0VWRU5UIiwiT05FX1NPVVJDRSIsInNldFRpbWVvdXQiLCJsb2ciLCJNVUxUSV9DSEFOTkVMIiwiQVVUT1BMQVkiLCJjb250ZXh0IiwiZXJyb3IiLCJsb2dJRCIsImZvcm1hdFN1cHBvcnQiLCJhdWRpbyIsImNhblBsYXlUeXBlIiwib2dnIiwicHVzaCIsIm1wMyIsIndhdiIsIm1wNCIsIm00YSIsIk5ldHdvcmtUeXBlIiwiTk9ORSIsIkxBTiIsIldXQU4iLCJnZXROZXR3b3JrVHlwZSIsImdldEJhdHRlcnlMZXZlbCIsImdhcmJhZ2VDb2xsZWN0IiwicmVzdGFydFZNIiwiZ2V0U2FmZUFyZWFSZWN0IiwidmlzaWJsZVNpemUiLCJ2aWV3IiwiZ2V0VmlzaWJsZVNpemUiLCJyZWN0IiwiaXNPYmplY3RWYWxpZCIsIm9iaiIsImR1bXAiLCJzZWxmIiwic3RyIiwiSlNPTiIsInN0cmluZ2lmeSIsIm9wZW5VUkwiLCJ1cmwiLCJqc2IiLCJvcGVuIiwibm93IiwiRGF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7OztJQUFBLElBQUEsVUFBQSxHQUFBLDJDQUFBOzs7Ozs7Ozs7Ozs7Ozs7O1FBMEJBLElBQUlBLGVBQUFBLEdBQUFBLEtBQUFBLENBQUo7UUFDQyxJQUFJLENBQUNDLFNBQUwsRUFBZ0I7QUFBQSxZQUNiRCxlQUFBQSxHQUFrQkUsTUFBQUEsQ0FBT0MsV0FBUEQsR0FBcUJDLFdBQUFBLENBQVlDLFFBQWpDRixHQUEyQ0csU0FBN0RMLENBRGE7QUFBQTtRQUdqQixJQUFNTSxXQUFBQSxHQUFlTixlQUFBQSxLQUFvQixXQUFwQkEsSUFBbUNBLGVBQUFBLEtBQW9CLHNCQUE1RTtRQUNBLElBQU1PLFVBQUFBLEdBQWNQLGVBQUFBLEtBQW9CLE9BQXhDO1FBQ0EsSUFBTVEsVUFBQUEsR0FBY1IsZUFBQUEsS0FBb0IsV0FBeEM7UUFDQSxJQUFNUyxZQUFBQSxHQUFnQlQsZUFBQUEs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SUFBSUEsR0FBQUEsR0FBTUQsRUFBQUEsSUFBTUEsRUFBQUEsQ0FBR0MsR0FBVEQsR0FBZUEsRUFBQUEsQ0FBR0MsR0FBbEJELEdBQXdCRCxPQUFBQSxFQUFsQztRQUVBc1IsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJwUixHQUFqQm9SIiwiZmlsZSI6IkNDU3lzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5sZXQgc2V0dGluZ1BsYXRmb3JtO1xuIGlmICghQ0NfRURJVE9SKSB7XG4gICAgc2V0dGluZ1BsYXRmb3JtID0gd2luZG93Ll9DQ1NldHRpbmdzID8gX0NDU2V0dGluZ3MucGxhdGZvcm06IHVuZGVmaW5lZDtcbiB9XG5jb25zdCBpc0JhaWR1R2FtZSA9IChzZXR0aW5nUGxhdGZvcm0gPT09ICdiYWlkdWdhbWUnIHx8IHNldHRpbmdQbGF0Zm9ybSA9PT0gJ2JhaWR1Z2FtZS1zdWJjb250ZXh0Jyk7XG5jb25zdCBpc1Zpdm9HYW1lID0gKHNldHRpbmdQbGF0Zm9ybSA9PT0gJ3FnYW1lJyk7XG5jb25zdCBpc09wcG9HYW1lID0gKHNldHRpbmdQbGF0Zm9ybSA9PT0gJ3F1aWNrZ2FtZScpO1xuY29uc3QgaXNIdWF3ZWlHYW1lID0gKHNldHRpbmdQbGF0Zm9ybSA9PT0gJ2h1YXdlaScpO1xuY29uc3QgaXNKS1dHYW1lID0gKHNldHRpbmdQbGF0Zm9ybSA9PT0gJ2prdy1nYW1lJyk7XG5cbnZhciBfZ2xvYmFsID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3c7XG4gXG5mdW5jdGlvbiBpbml0U3lzICgpIHtcbiAgICAvKipcbiAgICAgKiBTeXN0ZW0gdmFyaWFibGVzXG4gICAgICogQGNsYXNzIHN5c1xuICAgICAqIEBtYWluXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIGNjLnN5cyA9IHt9O1xuICAgIHZhciBzeXMgPSBjYy5zeXM7XG5cbiAgICAvKipcbiAgICAgKiBFbmdsaXNoIGxhbmd1YWdlIGNvZGVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfRU5HTElTSFxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIHN5cy5MQU5HVUFHRV9FTkdMSVNIID0gXCJlblwiO1xuXG4gICAgLyoqXG4gICAgICogQ2hpbmVzZSBsYW5ndWFnZSBjb2RlXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX0NISU5FU0VcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICBzeXMuTEFOR1VBR0VfQ0hJTkVTRSA9IFwiemhcIjtcblxuICAgIC8qKlxuICAgICAqIEZyZW5jaCBsYW5ndWFnZSBjb2RlXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX0ZSRU5DSFxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIHN5cy5MQU5HVUFHRV9GUkVOQ0ggPSBcImZyXCI7XG5cbiAgICAvKipcbiAgICAgKiBJdGFsaWFuIGxhbmd1YWdlIGNvZGVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfSVRBTElBTlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIHN5cy5MQU5HVUFHRV9JVEFMSUFOID0gXCJpdFwiO1xuXG4gICAgLyoqXG4gICAgICogR2VybWFuIGxhbmd1YWdlIGNvZGVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfR0VSTUFOXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLkxBTkdVQUdFX0dFUk1BTiA9IFwiZGVcIjtcblxuICAgIC8qKlxuICAgICAqIFNwYW5pc2ggbGFuZ3VhZ2UgY29kZVxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBMQU5HVUFHRV9TUEFOSVNIXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLkxBTkdVQUdFX1NQQU5JU0ggPSBcImVzXCI7XG5cbiAgICAvKipcbiAgICAgKiBTcGFuaXNoIGxhbmd1YWdlIGNvZGVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfRFVUQ0hcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICBzeXMuTEFOR1VBR0VfRFVUQ0ggPSBcImR1XCI7XG5cbiAgICAvKipcbiAgICAgKiBSdXNzaWFuIGxhbmd1YWdlIGNvZGVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfUlVTU0lBTlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIHN5cy5MQU5HVUFHRV9SVVNTSUFOID0gXCJydVwiO1xuXG4gICAgLyoqXG4gICAgICogS29yZWFuIGxhbmd1YWdlIGNvZGVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfS09SRUFOXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLkxBTkdVQUdFX0tPUkVBTiA9IFwia29cIjtcblxuICAgIC8qKlxuICAgICAqIEphcGFuZXNlIGxhbmd1YWdlIGNvZGVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfSkFQQU5FU0VcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICBzeXMuTEFOR1VBR0VfSkFQQU5FU0UgPSBcImphXCI7XG5cbiAgICAvKipcbiAgICAgKiBIdW5nYXJpYW4gbGFuZ3VhZ2UgY29kZVxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBMQU5HVUFHRV9IVU5HQVJJQU5cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBzeXMuTEFOR1VBR0VfSFVOR0FSSUFOID0gXCJodVwiO1xuXG4gICAgLyoqXG4gICAgICogUG9ydHVndWVzZSBsYW5ndWFnZSBjb2RlXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX1BPUlRVR1VFU0VcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICBzeXMuTEFOR1VBR0VfUE9SVFVHVUVTRSA9IFwicHRcIjtcblxuICAgIC8qKlxuICAgICAqIEFyYWJpYyBsYW5ndWFnZSBjb2RlXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX0FSQUJJQ1xuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIHN5cy5MQU5HVUFHRV9BUkFCSUMgPSBcImFyXCI7XG5cbiAgICAvKipcbiAgICAgKiBOb3J3ZWdpYW4gbGFuZ3VhZ2UgY29kZVxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBMQU5HVUFHRV9OT1JXRUdJQU5cbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICBzeXMuTEFOR1VBR0VfTk9SV0VHSUFOID0gXCJub1wiO1xuXG4gICAgLyoqXG4gICAgICogUG9saXNoIGxhbmd1YWdlIGNvZGVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfUE9MSVNIXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLkxBTkdVQUdFX1BPTElTSCA9IFwicGxcIjtcblxuICAgIC8qKlxuICAgICAqIFR1cmtpc2ggbGFuZ3VhZ2UgY29kZVxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBMQU5HVUFHRV9UVVJLSVNIXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLkxBTkdVQUdFX1RVUktJU0ggPSBcInRyXCI7XG5cbiAgICAvKipcbiAgICAgKiBVa3JhaW5pYW4gbGFuZ3VhZ2UgY29kZVxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBMQU5HVUFHRV9VS1JBSU5JQU5cbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICBzeXMuTEFOR1VBR0VfVUtSQUlOSUFOID0gXCJ1a1wiO1xuXG4gICAgLyoqXG4gICAgICogUm9tYW5pYW4gbGFuZ3VhZ2UgY29kZVxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBMQU5HVUFHRV9ST01BTklBTlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIHN5cy5MQU5HVUFHRV9ST01BTklBTiA9IFwicm9cIjtcblxuICAgIC8qKlxuICAgICAqIEJ1bGdhcmlhbiBsYW5ndWFnZSBjb2RlXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX0JVTEdBUklBTlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIHN5cy5MQU5HVUFHRV9CVUxHQVJJQU4gPSBcImJnXCI7XG5cbiAgICAvKipcbiAgICAgKiBVbmtub3duIGxhbmd1YWdlIGNvZGVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfVU5LTk9XTlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIHN5cy5MQU5HVUFHRV9VTktOT1dOID0gXCJ1bmtub3duXCI7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gT1NfSU9TXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLk9TX0lPUyA9IFwiaU9TXCI7XG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IE9TX0FORFJPSURcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cbiAgICBzeXMuT1NfQU5EUk9JRCA9IFwiQW5kcm9pZFwiO1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBPU19XSU5ET1dTXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLk9TX1dJTkRPV1MgPSBcIldpbmRvd3NcIjtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gT1NfTUFSTUFMQURFXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLk9TX01BUk1BTEFERSA9IFwiTWFybWFsYWRlXCI7XG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IE9TX0xJTlVYXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLk9TX0xJTlVYID0gXCJMaW51eFwiO1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBPU19CQURBXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLk9TX0JBREEgPSBcIkJhZGFcIjtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gT1NfQkxBQ0tCRVJSWVxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIHN5cy5PU19CTEFDS0JFUlJZID0gXCJCbGFja2JlcnJ5XCI7XG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IE9TX09TWFxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuICAgIHN5cy5PU19PU1ggPSBcIk9TIFhcIjtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gT1NfV1A4XG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLk9TX1dQOCA9IFwiV1A4XCI7XG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IE9TX1dJTlJUXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLk9TX1dJTlJUID0gXCJXSU5SVFwiO1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBPU19VTktOT1dOXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG4gICAgc3lzLk9TX1VOS05PV04gPSBcIlVua25vd25cIjtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBVTktOT1dOXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgLTFcbiAgICAgKi9cbiAgICBzeXMuVU5LTk9XTiA9IC0xO1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBXSU4zMlxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICBzeXMuV0lOMzIgPSAwO1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBMSU5VWFxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICBzeXMuTElOVVggPSAxO1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBNQUNPU1xuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IDJcbiAgICAgKi9cbiAgICBzeXMuTUFDT1MgPSAyO1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBBTkRST0lEXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgM1xuICAgICAqL1xuICAgIHN5cy5BTkRST0lEID0gMztcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gSVBIT05FXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgNFxuICAgICAqL1xuICAgIHN5cy5JUEhPTkUgPSA0O1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBJUEFEXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgNVxuICAgICAqL1xuICAgIHN5cy5JUEFEID0gNTtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gQkxBQ0tCRVJSWVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IDZcbiAgICAgKi9cbiAgICBzeXMuQkxBQ0tCRVJSWSA9IDY7XG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IE5BQ0xcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCA3XG4gICAgICovXG4gICAgc3lzLk5BQ0wgPSA3O1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBFTVNDUklQVEVOXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgOFxuICAgICAqL1xuICAgIHN5cy5FTVNDUklQVEVOID0gODtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gVElaRU5cbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCA5XG4gICAgICovXG4gICAgc3lzLlRJWkVOID0gOTtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gV0lOUlRcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCAxMFxuICAgICAqL1xuICAgIHN5cy5XSU5SVCA9IDEwO1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBXUDhcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCAxMVxuICAgICAqL1xuICAgIHN5cy5XUDggPSAxMTtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gTU9CSUxFX0JST1dTRVJcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCAxMDBcbiAgICAgKi9cbiAgICBzeXMuTU9CSUxFX0JST1dTRVIgPSAxMDA7XG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IERFU0tUT1BfQlJPV1NFUlxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IDEwMVxuICAgICAqL1xuICAgIHN5cy5ERVNLVE9QX0JST1dTRVIgPSAxMDE7XG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciBleGVjdXRlcyBpbiBlZGl0b3IncyB3aW5kb3cgcHJvY2VzcyAoRWxlY3Ryb24ncyByZW5kZXJlciBjb250ZXh0KVxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBFRElUT1JfUEFHRVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IDEwMlxuICAgICAqL1xuICAgIHN5cy5FRElUT1JfUEFHRSA9IDEwMjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciBleGVjdXRlcyBpbiBlZGl0b3IncyBtYWluIHByb2Nlc3MgKEVsZWN0cm9uJ3MgYnJvd3NlciBjb250ZXh0KVxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBFRElUT1JfQ09SRVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IDEwM1xuICAgICAqL1xuICAgIHN5cy5FRElUT1JfQ09SRSA9IDEwMztcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gV0VDSEFUX0dBTUVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCAxMDRcbiAgICAgKi9cbiAgICBzeXMuV0VDSEFUX0dBTUUgPSAxMDQ7XG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFFRX1BMQVlcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCAxMDVcbiAgICAgKi9cbiAgICBzeXMuUVFfUExBWSA9IDEwNTtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gRkJfUExBWUFCTEVfQURTXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgMTA2XG4gICAgICovXG4gICAgc3lzLkZCX1BMQVlBQkxFX0FEUyA9IDEwNjtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gQkFJRFVfR0FNRVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IDEwN1xuICAgICAqL1xuICAgIHN5cy5CQUlEVV9HQU1FID0gMTA3O1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBWSVZPX0dBTUVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCAxMDhcbiAgICAgKi9cbiAgICBzeXMuVklWT19HQU1FID0gMTA4O1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBPUFBPX0dBTUVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCAxMDlcbiAgICAgKi9cbiAgICBzeXMuT1BQT19HQU1FID0gMTA5O1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBIVUFXRUlfR0FNRVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IDExMFxuICAgICAqL1xuICAgIHN5cy5IVUFXRUlfR0FNRSA9IDExMDtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gWElBT01JX0dBTUVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCAxMTFcbiAgICAgKi9cbiAgICBzeXMuWElBT01JX0dBTUUgPSAxMTE7XG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IEpLV19HQU1FXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgMTEyXG4gICAgICovXG4gICAgc3lzLkpLV19HQU1FID0gMTEyO1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBBTElQQVlfR0FNRVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IDExM1xuICAgICAqL1xuICAgIHN5cy5BTElQQVlfR0FNRSA9IDExMztcbiAgICAvKipcbiAgICAgKiBCUk9XU0VSX1RZUEVfV0VDSEFUXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9XRUNIQVRcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcIndlY2hhdFwiXG4gICAgICovXG4gICAgc3lzLkJST1dTRVJfVFlQRV9XRUNIQVQgPSBcIndlY2hhdFwiO1xuICAgIC8qKlxuICAgICAqIEJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRVxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcIndlY2hhdGdhbWVcIlxuICAgICAqL1xuICAgIHN5cy5CUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUUgPSBcIndlY2hhdGdhbWVcIjtcbiAgICAvKipcbiAgICAgKiBCUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUVfU1VCXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRV9TVUJcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcIndlY2hhdGdhbWVzdWJcIlxuICAgICAqL1xuICAgIHN5cy5CUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUVfU1VCID0gXCJ3ZWNoYXRnYW1lc3ViXCI7XG4gICAgLyoqXG4gICAgICogQlJPV1NFUl9UWVBFX0JBSURVX0dBTUVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX0JBSURVX0dBTUVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcImJhaWR1Z2FtZVwiXG4gICAgICovXG4gICAgc3lzLkJST1dTRVJfVFlQRV9CQUlEVV9HQU1FID0gXCJiYWlkdWdhbWVcIjtcbiAgICAvKipcbiAgICAgKiBCUk9XU0VSX1RZUEVfQkFJRFVfR0FNRV9TVUJcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX0JBSURVX0dBTUVfU1VCXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgXCJiYWlkdWdhbWVzdWJcIlxuICAgICAqL1xuICAgIHN5cy5CUk9XU0VSX1RZUEVfQkFJRFVfR0FNRV9TVUIgPSBcImJhaWR1Z2FtZXN1YlwiO1xuICAgIC8qKlxuICAgICAqIEJST1dTRVJfVFlQRV9YSUFPTUlfR0FNRVxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfWElBT01JX0dBTUVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcInhpYW9taWdhbWVcIlxuICAgICAqL1xuICAgIHN5cy5CUk9XU0VSX1RZUEVfWElBT01JX0dBTUUgPSBcInhpYW9taWdhbWVcIjtcbiAgICAvKipcbiAgICAgKiBCUk9XU0VSX1RZUEVfQUxJUEFZX0dBTUVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX0FMSVBBWV9HQU1FXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgXCJhbGlwYXlnYW1lXCJcbiAgICAgKi9cbiAgICBzeXMuQlJPV1NFUl9UWVBFX0FMSVBBWV9HQU1FID0gXCJhbGlwYXlnYW1lXCI7XG4gICAgLyoqXG4gICAgICogQlJPV1NFUl9UWVBFX1FRX1BMQVlcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX1FRX1BMQVlcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcInFxcGxheVwiXG4gICAgICovXG4gICAgc3lzLkJST1dTRVJfVFlQRV9RUV9QTEFZID0gXCJxcXBsYXlcIjtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfQU5EUk9JRFxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IFwiYW5kcm9pZGJyb3dzZXJcIlxuICAgICAqL1xuICAgIHN5cy5CUk9XU0VSX1RZUEVfQU5EUk9JRCA9IFwiYW5kcm9pZGJyb3dzZXJcIjtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfSUVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcImllXCJcbiAgICAgKi9cbiAgICBzeXMuQlJPV1NFUl9UWVBFX0lFID0gXCJpZVwiO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9FREdFXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgXCJlZGdlXCJcbiAgICAgKi9cbiAgICBzeXMuQlJPV1NFUl9UWVBFX0VER0UgPSBcImVkZ2VcIjtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfUVFcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcInFxYnJvd3NlclwiXG4gICAgICovXG4gICAgc3lzLkJST1dTRVJfVFlQRV9RUSA9IFwicXFicm93c2VyXCI7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX01PQklMRV9RUVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IFwibXFxYnJvd3NlclwiXG4gICAgICovXG4gICAgc3lzLkJST1dTRVJfVFlQRV9NT0JJTEVfUVEgPSBcIm1xcWJyb3dzZXJcIjtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfVUNcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcInVjYnJvd3NlclwiXG4gICAgICovXG4gICAgc3lzLkJST1dTRVJfVFlQRV9VQyA9IFwidWNicm93c2VyXCI7XG4gICAgLyoqXG4gICAgICogdWMgdGhpcmQgcGFydHkgaW50ZWdyYXRpb24uXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9VQ0JTXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgXCJ1Y2JzXCJcbiAgICAgKi9cbiAgICBzeXMuQlJPV1NFUl9UWVBFX1VDQlMgPSBcInVjYnNcIjtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfMzYwXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgXCIzNjBicm93c2VyXCJcbiAgICAgKi9cbiAgICBzeXMuQlJPV1NFUl9UWVBFXzM2MCA9IFwiMzYwYnJvd3NlclwiO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9CQUlEVV9BUFBcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcImJhaWR1Ym94YXBwXCJcbiAgICAgKi9cbiAgICBzeXMuQlJPV1NFUl9UWVBFX0JBSURVX0FQUCA9IFwiYmFpZHVib3hhcHBcIjtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfQkFJRFVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcImJhaWR1YnJvd3NlclwiXG4gICAgICovXG4gICAgc3lzLkJST1dTRVJfVFlQRV9CQUlEVSA9IFwiYmFpZHVicm93c2VyXCI7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX01BWFRIT05cbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcIm1heHRob25cIlxuICAgICAqL1xuICAgIHN5cy5CUk9XU0VSX1RZUEVfTUFYVEhPTiA9IFwibWF4dGhvblwiO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9PUEVSQVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IFwib3BlcmFcIlxuICAgICAqL1xuICAgIHN5cy5CUk9XU0VSX1RZUEVfT1BFUkEgPSBcIm9wZXJhXCI7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX09VUEVOR1xuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IFwib3VwZW5nXCJcbiAgICAgKi9cbiAgICBzeXMuQlJPV1NFUl9UWVBFX09VUEVORyA9IFwib3VwZW5nXCI7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX01JVUlcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcIm1pdWlicm93c2VyXCJcbiAgICAgKi9cbiAgICBzeXMuQlJPV1NFUl9UWVBFX01JVUkgPSBcIm1pdWlicm93c2VyXCI7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX0ZJUkVGT1hcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcImZpcmVmb3hcIlxuICAgICAqL1xuICAgIHN5cy5CUk9XU0VSX1RZUEVfRklSRUZPWCA9IFwiZmlyZWZveFwiO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9TQUZBUklcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcInNhZmFyaVwiXG4gICAgICovXG4gICAgc3lzLkJST1dTRVJfVFlQRV9TQUZBUkkgPSBcInNhZmFyaVwiO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9DSFJPTUVcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcImNocm9tZVwiXG4gICAgICovXG4gICAgc3lzLkJST1dTRVJfVFlQRV9DSFJPTUUgPSBcImNocm9tZVwiO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9MSUVCQU9cbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAZGVmYXVsdCBcImxpZWJhb1wiXG4gICAgICovXG4gICAgc3lzLkJST1dTRVJfVFlQRV9MSUVCQU8gPSBcImxpZWJhb1wiO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9RWk9ORVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IFwicXpvbmVcIlxuICAgICAqL1xuICAgIHN5cy5CUk9XU0VSX1RZUEVfUVpPTkUgPSBcInF6b25lXCI7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX1NPVUdPVVxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBkZWZhdWx0IFwic29nb3VcIlxuICAgICAqL1xuICAgIHN5cy5CUk9XU0VSX1RZUEVfU09VR09VID0gXCJzb2dvdVwiO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9VTktOT1dOXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQGRlZmF1bHQgXCJ1bmtub3duXCJcbiAgICAgKi9cbiAgICBzeXMuQlJPV1NFUl9UWVBFX1VOS05PV04gPSBcInVua25vd25cIjtcblxuICAgIC8qKlxuICAgICAqIElzIG5hdGl2ZSA/IFRoaXMgaXMgc2V0IHRvIGJlIHRydWUgaW4ganNiIGF1dG8uXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc05hdGl2ZVxuICAgICAqL1xuICAgIHN5cy5pc05hdGl2ZSA9IENDX0pTQiB8fCBDQ19SVU5USU1FO1xuXG5cbiAgICAvKipcbiAgICAgKiBJcyB3ZWIgYnJvd3NlciA/XG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc0Jyb3dzZXJcbiAgICAgKi9cbiAgICBzeXMuaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGRvY3VtZW50ID09PSAnb2JqZWN0JyAmJiAhQ0NfV0VDSEFUR0FNRSAmJiAhQ0NfUVFQTEFZICYmICFDQ19KU0IgJiYgIUNDX1JVTlRJTUUgJiYgIWlzQmFpZHVHYW1lO1xuXG4gICAgLyoqXG4gICAgICogSXMgd2ViZ2wgZXh0ZW5zaW9uIHN1cHBvcnQ/XG4gICAgICogQG1ldGhvZCBnbEV4dGVuc2lvblxuICAgICAqIEBwYXJhbSBuYW1lXG4gICAgICovXG4gICAgc3lzLmdsRXh0ZW5zaW9uID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgaWYgKChDQ19XRUNIQVRHQU1FIHx8IGlzQmFpZHVHYW1lKSAmJiBuYW1lID09PSAnT0VTX3RleHR1cmVfZmxvYXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhY2MucmVuZGVyZXIuZGV2aWNlLmV4dChuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgbWF4IGpvaW50IG1hdHJpeCBzaXplIGZvciBza2lubmVkIG1lc2ggcmVuZGVyZXIuXG4gICAgICogQG1ldGhvZCBnZXRNYXhKb2ludE1hdHJpeFNpemVcbiAgICAgKi9cbiAgICBzeXMuZ2V0TWF4Sm9pbnRNYXRyaXhTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXN5cy5fbWF4Sm9pbnRNYXRyaXhTaXplKSB7XG4gICAgICAgICAgICBjb25zdCBKT0lOVF9NQVRSSUNFU19TSVpFID0gNTA7XG4gICAgICAgICAgICBjb25zdCBMRUZUX1VOSUZPUk1fU0laRSA9IDEwO1xuXG4gICAgICAgICAgICBsZXQgZ2wgPSBjYy5nYW1lLl9yZW5kZXJDb250ZXh0O1xuICAgICAgICAgICAgbGV0IG1heFVuaWZvcm1zID0gTWF0aC5mbG9vcihnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1ZFUlRFWF9VTklGT1JNX1ZFQ1RPUlMpIC8gNCkgLSBMRUZUX1VOSUZPUk1fU0laRTtcbiAgICAgICAgICAgIGlmIChtYXhVbmlmb3JtcyA8IEpPSU5UX01BVFJJQ0VTX1NJWkUpIHtcbiAgICAgICAgICAgICAgICBzeXMuX21heEpvaW50TWF0cml4U2l6ZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzeXMuX21heEpvaW50TWF0cml4U2l6ZSA9IEpPSU5UX01BVFJJQ0VTX1NJWkU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN5cy5fbWF4Sm9pbnRNYXRyaXhTaXplO1xuICAgIH1cbiAgICBcbiAgICBpZiAoX2dsb2JhbC5fX3BsYXRmb3JtICYmIF9nbG9iYWwuX19wbGF0Zm9ybS5nZXRTeXN0ZW1JbmZvKSB7XG4gICAgICAgIGxldCBlbnYgPSBfZ2xvYmFsLl9fcGxhdGZvcm0uZ2V0U3lzdGVtSW5mbygpO1xuICAgICAgICBzeXMuaXNOYXRpdmUgPSBlbnYuaXNOYXRpdmU7XG4gICAgICAgIHN5cy5pc0Jyb3dzZXIgPSBlbnYuaXNCcm93c2VyO1xuICAgICAgICBzeXMucGxhdGZvcm0gPSBlbnYucGxhdGZvcm07XG4gICAgICAgIHN5cy5icm93c2VyVHlwZSA9IGVudi5icm93c2VyVHlwZTtcbiAgICAgICAgc3lzLmlzTW9iaWxlID0gZW52LmlzTW9iaWxlO1xuICAgICAgICBzeXMubGFuZ3VhZ2UgPSBlbnYubGFuZ3VhZ2U7XG4gICAgICAgIHN5cy5sYW5ndWFnZUNvZGUgPSBlbnYubGFuZ3VhZ2UudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgc3lzLm9zID0gZW52Lm9zO1xuICAgICAgICBzeXMub3NWZXJzaW9uID0gZW52Lm9zVmVyc2lvbjtcbiAgICAgICAgc3lzLm9zTWFpblZlcnNpb24gPSBlbnYub3NNYWluVmVyc2lvbjtcbiAgICAgICAgc3lzLmJyb3dzZXJWZXJzaW9uID0gZW52LmJyb3dzZXJWZXJzaW9uO1xuICAgICAgICBzeXMud2luZG93UGl4ZWxSZXNvbHV0aW9uID0gZW52LndpbmRvd1BpeGVsUmVzb2x1dGlvbjtcbiAgICAgICAgc3lzLmxvY2FsU3RvcmFnZSA9IGVudi5sb2NhbFN0b3JhZ2U7XG4gICAgICAgIHN5cy5jYXBhYmlsaXRpZXMgPSBlbnYuY2FwYWJpbGl0aWVzO1xuICAgICAgICBzeXMuX19hdWRpb1N1cHBvcnQgPSBlbnYuYXVkaW9TdXBwb3J0O1xuXG4gICAgICAgIF9nbG9iYWwuX19wbGF0Zm9ybSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSBpZiAoQ0NfRURJVE9SICYmIEVkaXRvci5pc01haW5Qcm9jZXNzKSB7XG4gICAgICAgIHN5cy5pc01vYmlsZSA9IGZhbHNlO1xuICAgICAgICBzeXMucGxhdGZvcm0gPSBzeXMuRURJVE9SX0NPUkU7XG4gICAgICAgIHN5cy5sYW5ndWFnZSA9IHN5cy5MQU5HVUFHRV9VTktOT1dOO1xuICAgICAgICBzeXMubGFuZ3VhZ2VDb2RlID0gdW5kZWZpbmVkO1xuICAgICAgICBzeXMub3MgPSAoe1xuICAgICAgICAgICAgZGFyd2luOiBzeXMuT1NfT1NYLFxuICAgICAgICAgICAgd2luMzI6IHN5cy5PU19XSU5ET1dTLFxuICAgICAgICAgICAgbGludXg6IHN5cy5PU19MSU5VWFxuICAgICAgICB9KVtwcm9jZXNzLnBsYXRmb3JtXSB8fCBzeXMuT1NfVU5LTk9XTjtcbiAgICAgICAgc3lzLmJyb3dzZXJUeXBlID0gbnVsbDtcbiAgICAgICAgc3lzLmJyb3dzZXJWZXJzaW9uID0gbnVsbDtcbiAgICAgICAgc3lzLndpbmRvd1BpeGVsUmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwXG4gICAgICAgIH07XG4gICAgICAgIHN5cy5fX2F1ZGlvU3VwcG9ydCA9IHt9O1xuICAgIH1cbiAgICBlbHNlIGlmIChDQ19KU0IgfHwgQ0NfUlVOVElNRSkge1xuICAgICAgICBsZXQgcGxhdGZvcm07XG4gICAgICAgIGlmIChpc1Zpdm9HYW1lKSB7XG4gICAgICAgICAgICBwbGF0Zm9ybSA9IHN5cy5WSVZPX0dBTUU7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNPcHBvR2FtZSkge1xuICAgICAgICAgICAgcGxhdGZvcm0gPSBzeXMuT1BQT19HQU1FO1xuICAgICAgICB9IGVsc2UgaWYgKGlzSHVhd2VpR2FtZSkge1xuICAgICAgICAgICAgcGxhdGZvcm0gPSBzeXMuSFVBV0VJX0dBTUU7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNKS1dHYW1lKSB7XG4gICAgICAgICAgICBwbGF0Zm9ybSA9IHN5cy5KS1dfR0FNRTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBsYXRmb3JtID0gX19nZXRQbGF0Zm9ybSgpO1xuICAgICAgICB9XG4gICAgICAgIHN5cy5wbGF0Zm9ybSA9IHBsYXRmb3JtO1xuICAgICAgICBzeXMuaXNNb2JpbGUgPSAocGxhdGZvcm0gPT09IHN5cy5BTkRST0lEIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybSA9PT0gc3lzLklQQUQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXRmb3JtID09PSBzeXMuSVBIT05FIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybSA9PT0gc3lzLldQOCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm0gPT09IHN5cy5USVpFTiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm0gPT09IHN5cy5CTEFDS0JFUlJZIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybSA9PT0gc3lzLlhJQU9NSV9HQU1FIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1Zpdm9HYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBpc09wcG9HYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0h1YXdlaUdhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzSktXR2FtZSk7XG5cbiAgICAgICAgc3lzLm9zID0gX19nZXRPUygpO1xuICAgICAgICBzeXMubGFuZ3VhZ2UgPSBfX2dldEN1cnJlbnRMYW5ndWFnZSgpO1xuICAgICAgICB2YXIgbGFuZ3VhZ2VDb2RlOyBcbiAgICAgICAgaWYgKENDX0pTQikge1xuICAgICAgICAgICAgbGFuZ3VhZ2VDb2RlID0gX19nZXRDdXJyZW50TGFuZ3VhZ2VDb2RlKCk7XG4gICAgICAgIH1cbiAgICAgICAgc3lzLmxhbmd1YWdlQ29kZSA9IGxhbmd1YWdlQ29kZSA/IGxhbmd1YWdlQ29kZS50b0xvd2VyQ2FzZSgpIDogdW5kZWZpbmVkO1xuICAgICAgICBzeXMub3NWZXJzaW9uID0gX19nZXRPU1ZlcnNpb24oKTtcbiAgICAgICAgc3lzLm9zTWFpblZlcnNpb24gPSBwYXJzZUludChzeXMub3NWZXJzaW9uKTtcbiAgICAgICAgc3lzLmJyb3dzZXJUeXBlID0gbnVsbDtcbiAgICAgICAgc3lzLmJyb3dzZXJWZXJzaW9uID0gbnVsbDtcblxuICAgICAgICB2YXIgdyA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICB2YXIgaCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgdmFyIHJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgICAgICAgc3lzLndpbmRvd1BpeGVsUmVzb2x1dGlvbiA9IHtcbiAgICAgICAgICAgIHdpZHRoOiByYXRpbyAqIHcsXG4gICAgICAgICAgICBoZWlnaHQ6IHJhdGlvICogaFxuICAgICAgICB9O1xuXG4gICAgICAgIHN5cy5sb2NhbFN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuXG4gICAgICAgIHZhciBjYXBhYmlsaXRpZXM7XG4gICAgICAgIGNhcGFiaWxpdGllcyA9IHN5cy5jYXBhYmlsaXRpZXMgPSB7XG4gICAgICAgICAgICBcImNhbnZhc1wiOiBmYWxzZSxcbiAgICAgICAgICAgIFwib3BlbmdsXCI6IHRydWUsXG4gICAgICAgICAgICBcIndlYnBcIjogdHJ1ZSxcbiAgICAgICAgfTtcblxuICAgICAgIGlmIChzeXMuaXNNb2JpbGUpIHtcbiAgICAgICAgICAgIGNhcGFiaWxpdGllc1tcImFjY2VsZXJvbWV0ZXJcIl0gPSB0cnVlO1xuICAgICAgICAgICAgY2FwYWJpbGl0aWVzW1widG91Y2hlc1wiXSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBkZXNrdG9wXG4gICAgICAgICAgICBjYXBhYmlsaXRpZXNbXCJrZXlib2FyZFwiXSA9IHRydWU7XG4gICAgICAgICAgICBjYXBhYmlsaXRpZXNbXCJtb3VzZVwiXSA9IHRydWU7XG4gICAgICAgICAgICBjYXBhYmlsaXRpZXNbXCJ0b3VjaGVzXCJdID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBzeXMuX19hdWRpb1N1cHBvcnQgPSB7XG4gICAgICAgICAgICBPTkxZX09ORTogZmFsc2UsXG4gICAgICAgICAgICBXRUJfQVVESU86IGZhbHNlLFxuICAgICAgICAgICAgREVMQVlfQ1JFQVRFX0NUWDogZmFsc2UsXG4gICAgICAgICAgICBmb3JtYXQ6IFsnLm1wMyddXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKENDX1dFQ0hBVEdBTUUpIHtcbiAgICAgICAgdmFyIGVudiA9IHd4LmdldFN5c3RlbUluZm9TeW5jKCk7XG4gICAgICAgIHN5cy5pc01vYmlsZSA9IHRydWU7XG4gICAgICAgIHN5cy5wbGF0Zm9ybSA9IHN5cy5XRUNIQVRfR0FNRTtcbiAgICAgICAgc3lzLmxhbmd1YWdlID0gZW52Lmxhbmd1YWdlLnN1YnN0cigwLCAyKTtcbiAgICAgICAgc3lzLmxhbmd1YWdlQ29kZSA9IGVudi5sYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YXIgc3lzdGVtID0gZW52LnN5c3RlbS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoZW52LnBsYXRmb3JtID09PSBcImFuZHJvaWRcIikge1xuICAgICAgICAgICAgc3lzLm9zID0gc3lzLk9TX0FORFJPSUQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZW52LnBsYXRmb3JtID09PSBcImlvc1wiKSB7XG4gICAgICAgICAgICBzeXMub3MgPSBzeXMuT1NfSU9TO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVudi5wbGF0Zm9ybSA9PT0gJ2RldnRvb2xzJykge1xuICAgICAgICAgICAgc3lzLmlzTW9iaWxlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoc3lzdGVtLmluZGV4T2YoJ2FuZHJvaWQnKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgc3lzLm9zID0gc3lzLk9TX0FORFJPSUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzeXN0ZW0uaW5kZXhPZignaW9zJykgPiAtMSkge1xuICAgICAgICAgICAgICAgIHN5cy5vcyA9IHN5cy5PU19JT1M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRhcHRhdGlvbiB0byBBbmRyb2lkIFBcbiAgICAgICAgaWYgKHN5c3RlbSA9PT0gJ2FuZHJvaWQgcCcpIHtcbiAgICAgICAgICAgIHN5c3RlbSA9ICdhbmRyb2lkIHAgOS4wJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2ZXJzaW9uID0gL1tcXGRcXC5dKy8uZXhlYyhzeXN0ZW0pO1xuICAgICAgICBzeXMub3NWZXJzaW9uID0gdmVyc2lvbiA/IHZlcnNpb25bMF0gOiBzeXN0ZW07XG4gICAgICAgIHN5cy5vc01haW5WZXJzaW9uID0gcGFyc2VJbnQoc3lzLm9zVmVyc2lvbik7XG4gICAgICAgIC8vIHdlY2hhZ2FtZSBzdWJkb21haW5cbiAgICAgICAgaWYgKENDX1dFQ0hBVEdBTUVTVUIpIHtcbiAgICAgICAgICAgIHN5cy5icm93c2VyVHlwZSA9IHN5cy5CUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUVfU1VCO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3lzLmJyb3dzZXJUeXBlID0gc3lzLkJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRTtcbiAgICAgICAgfVxuICAgICAgICBzeXMuYnJvd3NlclZlcnNpb24gPSBlbnYudmVyc2lvbjtcblxuICAgICAgICB2YXIgdyA9IGVudi53aW5kb3dXaWR0aDtcbiAgICAgICAgdmFyIGggPSBlbnYud2luZG93SGVpZ2h0O1xuICAgICAgICB2YXIgcmF0aW8gPSBlbnYucGl4ZWxSYXRpbyB8fCAxO1xuICAgICAgICBzeXMud2luZG93UGl4ZWxSZXNvbHV0aW9uID0ge1xuICAgICAgICAgICAgd2lkdGg6IHJhdGlvICogdyxcbiAgICAgICAgICAgIGhlaWdodDogcmF0aW8gKiBoXG4gICAgICAgIH07XG5cbiAgICAgICAgc3lzLmxvY2FsU3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG5cbiAgICAgICAgdmFyIF9zdXBwb3J0V2ViR0wgPSBfc3VwcG9ydFdlYnAgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBfY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgIF9zdXBwb3J0V2ViR0wgPSBfY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiKTtcbiAgICAgICAgICAgIF9zdXBwb3J0V2VicCA9IF9jYW52YXMudG9EYXRhVVJMKCdpbWFnZS93ZWJwJykuc3RhcnRzV2l0aCgnZGF0YTppbWFnZS93ZWJwJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikgeyB9XG5cbiAgICAgICAgc3lzLmNhcGFiaWxpdGllcyA9IHtcbiAgICAgICAgICAgIFwiY2FudmFzXCI6IHRydWUsXG4gICAgICAgICAgICBcIm9wZW5nbFwiOiAhIV9zdXBwb3J0V2ViR0wsXG4gICAgICAgICAgICBcIndlYnBcIjogX3N1cHBvcnRXZWJwXG4gICAgICAgIH07XG4gICAgICAgIHN5cy5fX2F1ZGlvU3VwcG9ydCA9IHtcbiAgICAgICAgICAgIE9OTFlfT05FOiBmYWxzZSxcbiAgICAgICAgICAgIFdFQl9BVURJTzogZmFsc2UsXG4gICAgICAgICAgICBERUxBWV9DUkVBVEVfQ1RYOiBmYWxzZSxcbiAgICAgICAgICAgIGZvcm1hdDogWycubXAzJ11cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQ0NfUVFQTEFZKSB7XG4gICAgICAgIHZhciBlbnYgPSB3aW5kb3dbXCJCS1wiXVtcIkRpcmVjdG9yXCJdW1wicXVlcnlEZXZpY2VJbmZvXCJdKCk7XG4gICAgICAgIHN5cy5pc01vYmlsZSA9IHRydWU7XG4gICAgICAgIHN5cy5wbGF0Zm9ybSA9IHN5cy5RUV9QTEFZO1xuICAgICAgICBzeXMubGFuZ3VhZ2UgPSBzeXMuTEFOR1VBR0VfVU5LTk9XTjtcbiAgICAgICAgc3lzLmxhbmd1YWdlQ29kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGVudi5wbGF0Zm9ybSA9PT0gXCJhbmRyb2lkXCIpIHtcbiAgICAgICAgICAgIHN5cy5vcyA9IHN5cy5PU19BTkRST0lEO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVudi5wbGF0Zm9ybSA9PT0gXCJpb3NcIikge1xuICAgICAgICAgICAgc3lzLm9zID0gc3lzLk9TX0lPUztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN5cy5vcyA9IHN5cy5PU19VTktOT1dOO1xuICAgICAgICB9XG4gICAgICAgIHN5cy5vc1ZlcnNpb24gPSBlbnYudmVyc2lvbjtcbiAgICAgICAgc3lzLm9zTWFpblZlcnNpb24gPSBwYXJzZUludChzeXMub3NWZXJzaW9uLnNwbGl0KCcuJylbMF0pO1xuICAgICAgICBzeXMuYnJvd3NlclR5cGUgPSBzeXMuQlJPV1NFUl9UWVBFX1FRX1BMQVk7XG4gICAgICAgIHN5cy5icm93c2VyVmVyc2lvbiA9IDA7XG5cbiAgICAgICAgdmFyIHcgPSBlbnYuc2NyZWVuV2lkdGg7XG4gICAgICAgIHZhciBoID0gZW52LnNjcmVlbkhlaWdodDtcbiAgICAgICAgdmFyIHJhdGlvID0gZW52LnBpeGVsUmF0aW8gfHwgMTtcblxuICAgICAgICBzeXMud2luZG93UGl4ZWxSZXNvbHV0aW9uID0ge1xuICAgICAgICAgICAgd2lkdGg6IHJhdGlvICogdyxcbiAgICAgICAgICAgIGhlaWdodDogcmF0aW8gKiBoXG4gICAgICAgIH07XG5cbiAgICAgICAgc3lzLmxvY2FsU3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG5cbiAgICAgICAgc3lzLmNhcGFiaWxpdGllcyA9IHtcbiAgICAgICAgICAgIFwiY2FudmFzXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJvcGVuZ2xcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwid2VicFwiOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBzeXMuX19hdWRpb1N1cHBvcnQgPSB7XG4gICAgICAgICAgICBPTkxZX09ORTogZmFsc2UsXG4gICAgICAgICAgICBXRUJfQVVESU86IGZhbHNlLFxuICAgICAgICAgICAgREVMQVlfQ1JFQVRFX0NUWDogZmFsc2UsXG4gICAgICAgICAgICBmb3JtYXQ6IFsnLm1wMyddXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQmFpZHVHYW1lKSB7XG4gICAgICAgIGxldCBlbnYgPSBfX2RldmljZS5nZXRTeXN0ZW1JbmZvKCk7XG4gICAgICAgIHN5cy5wbGF0Zm9ybSA9IGVudi5wbGF0Zm9ybTtcbiAgICAgICAgc3lzLmJyb3dzZXJUeXBlID0gZW52LmJyb3dzZXJUeXBlO1xuICAgICAgICBzeXMuaXNNb2JpbGUgPSBlbnYuaXNNb2JpbGU7XG4gICAgICAgIHN5cy5sYW5ndWFnZSA9IGVudi5sYW5ndWFnZTtcbiAgICAgICAgc3lzLmxhbmd1YWdlQ29kZSA9IGVudi5sYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBzeXMub3MgPSBlbnYub3M7XG4gICAgICAgIHN5cy5vc1ZlcnNpb24gPSBlbnYub3NWZXJzaW9uO1xuICAgICAgICBzeXMub3NNYWluVmVyc2lvbiA9IGVudi5vc01haW5WZXJzaW9uO1xuICAgICAgICBzeXMuYnJvd3NlclZlcnNpb24gPSBlbnYuYnJvd3NlclZlcnNpb247XG4gICAgICAgIHN5cy53aW5kb3dQaXhlbFJlc29sdXRpb24gPSBlbnYud2luZG93UGl4ZWxSZXNvbHV0aW9uO1xuICAgICAgICBzeXMubG9jYWxTdG9yYWdlID0gZW52LmxvY2FsU3RvcmFnZTtcbiAgICAgICAgc3lzLmNhcGFiaWxpdGllcyA9IGVudi5jYXBhYmlsaXRpZXM7XG4gICAgICAgIHN5cy5fX2F1ZGlvU3VwcG9ydCA9IGVudi5hdWRpb1N1cHBvcnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBicm93c2VyIG9yIHJ1bnRpbWVcbiAgICAgICAgdmFyIHdpbiA9IHdpbmRvdywgbmF2ID0gd2luLm5hdmlnYXRvciwgZG9jID0gZG9jdW1lbnQsIGRvY0VsZSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciB1YSA9IG5hdi51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICBzeXMuaXNNb2JpbGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHN5cy5wbGF0Zm9ybSA9IHN5cy5FRElUT1JfUEFHRTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSW5kaWNhdGUgd2hldGhlciBzeXN0ZW0gaXMgbW9iaWxlIHN5c3RlbVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc01vYmlsZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzeXMuaXNNb2JpbGUgPSAvbW9iaWxlfGFuZHJvaWR8aXBob25lfGlwYWQvLnRlc3QodWEpO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEluZGljYXRlIHRoZSBydW5uaW5nIHBsYXRmb3JtXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gcGxhdGZvcm1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBGYlBsYXlhYmxlQWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBzeXMucGxhdGZvcm0gPSBzeXMuRkJfUExBWUFCTEVfQURTO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3lzLnBsYXRmb3JtID0gc3lzLmlzTW9iaWxlID8gc3lzLk1PQklMRV9CUk9XU0VSIDogc3lzLkRFU0tUT1BfQlJPV1NFUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjdXJyTGFuZ3VhZ2UgPSBuYXYubGFuZ3VhZ2U7XG4gICAgICAgIGN1cnJMYW5ndWFnZSA9IGN1cnJMYW5ndWFnZSA/IGN1cnJMYW5ndWFnZSA6IG5hdi5icm93c2VyTGFuZ3VhZ2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBjdXJyZW50IGxhbmd1YWdlIGlzbyA2MzktMSBjb2RlLlxuICAgICAgICAgKiBFeGFtcGxlcyBvZiB2YWxpZCBsYW5ndWFnZSBjb2RlcyBpbmNsdWRlIFwiemgtdHdcIiwgXCJlblwiLCBcImVuLXVzXCIsIFwiZnJcIiwgXCJmci1mclwiLCBcImVzLWVzXCIsIGV0Yy5cbiAgICAgICAgICogVGhlIGFjdHVhbCB2YWx1ZSB0b3RhbGx5IGRlcGVuZHMgb24gcmVzdWx0cyBwcm92aWRlZCBieSBkZXN0aW5hdGlvbiBwbGF0Zm9ybS5cbiAgICAgICAgICogQHByb3BlcnR5IHtTdHJpbmd9IGxhbmd1YWdlQ29kZVxuICAgICAgICAgKi9cbiAgICAgICAgc3lzLmxhbmd1YWdlQ29kZSA9IGN1cnJMYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGN1cnJMYW5ndWFnZSA9IGN1cnJMYW5ndWFnZSA/IGN1cnJMYW5ndWFnZS5zcGxpdChcIi1cIilbMF0gOiBzeXMuTEFOR1VBR0VfRU5HTElTSDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5kaWNhdGUgdGhlIGN1cnJlbnQgbGFuZ3VhZ2Ugb2YgdGhlIHJ1bm5pbmcgc3lzdGVtXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBsYW5ndWFnZVxuICAgICAgICAgKi9cbiAgICAgICAgc3lzLmxhbmd1YWdlID0gY3Vyckxhbmd1YWdlO1xuXG4gICAgICAgIC8vIEdldCB0aGUgb3Mgb2Ygc3lzdGVtXG4gICAgICAgIHZhciBpc0FuZHJvaWQgPSBmYWxzZSwgaU9TID0gZmFsc2UsIG9zVmVyc2lvbiA9ICcnLCBvc01haW5WZXJzaW9uID0gMDtcbiAgICAgICAgdmFyIHVhUmVzdWx0ID0gL2FuZHJvaWQgKFxcZCsoPzpcXC5cXGQrKSopL2kuZXhlYyh1YSkgfHwgL2FuZHJvaWQgKFxcZCsoPzpcXC5cXGQrKSopL2kuZXhlYyhuYXYucGxhdGZvcm0pO1xuICAgICAgICBpZiAodWFSZXN1bHQpIHtcbiAgICAgICAgICAgIGlzQW5kcm9pZCA9IHRydWU7XG4gICAgICAgICAgICBvc1ZlcnNpb24gPSB1YVJlc3VsdFsxXSB8fCAnJztcbiAgICAgICAgICAgIG9zTWFpblZlcnNpb24gPSBwYXJzZUludChvc1ZlcnNpb24pIHx8IDA7XG4gICAgICAgIH1cbiAgICAgICAgdWFSZXN1bHQgPSAvKGlQYWR8aVBob25lfGlQb2QpLipPUyAoKFxcZCtfPyl7MiwzfSkvaS5leGVjKHVhKTtcbiAgICAgICAgaWYgKHVhUmVzdWx0KSB7XG4gICAgICAgICAgICBpT1MgPSB0cnVlO1xuICAgICAgICAgICAgb3NWZXJzaW9uID0gdWFSZXN1bHRbMl0gfHwgJyc7XG4gICAgICAgICAgICBvc01haW5WZXJzaW9uID0gcGFyc2VJbnQob3NWZXJzaW9uKSB8fCAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKC8oaVBob25lfGlQYWR8aVBvZCkvLmV4ZWMobmF2LnBsYXRmb3JtKSkge1xuICAgICAgICAgICAgaU9TID0gdHJ1ZTtcbiAgICAgICAgICAgIG9zVmVyc2lvbiA9ICcnO1xuICAgICAgICAgICAgb3NNYWluVmVyc2lvbiA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3NOYW1lID0gc3lzLk9TX1VOS05PV047XG4gICAgICAgIGlmIChuYXYuYXBwVmVyc2lvbi5pbmRleE9mKFwiV2luXCIpICE9PSAtMSkgb3NOYW1lID0gc3lzLk9TX1dJTkRPV1M7XG4gICAgICAgIGVsc2UgaWYgKGlPUykgb3NOYW1lID0gc3lzLk9TX0lPUztcbiAgICAgICAgZWxzZSBpZiAobmF2LmFwcFZlcnNpb24uaW5kZXhPZihcIk1hY1wiKSAhPT0gLTEpIG9zTmFtZSA9IHN5cy5PU19PU1g7XG4gICAgICAgIGVsc2UgaWYgKG5hdi5hcHBWZXJzaW9uLmluZGV4T2YoXCJYMTFcIikgIT09IC0xICYmIG5hdi5hcHBWZXJzaW9uLmluZGV4T2YoXCJMaW51eFwiKSA9PT0gLTEpIG9zTmFtZSA9IHN5cy5PU19VTklYO1xuICAgICAgICBlbHNlIGlmIChpc0FuZHJvaWQpIG9zTmFtZSA9IHN5cy5PU19BTkRST0lEO1xuICAgICAgICBlbHNlIGlmIChuYXYuYXBwVmVyc2lvbi5pbmRleE9mKFwiTGludXhcIikgIT09IC0xIHx8IHVhLmluZGV4T2YoXCJ1YnVudHVcIikgIT09IC0xKSBvc05hbWUgPSBzeXMuT1NfTElOVVg7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluZGljYXRlIHRoZSBydW5uaW5nIG9zIG5hbWVcbiAgICAgICAgICogQHByb3BlcnR5IHtTdHJpbmd9IG9zXG4gICAgICAgICAqL1xuICAgICAgICBzeXMub3MgPSBvc05hbWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZSB0aGUgcnVubmluZyBvcyB2ZXJzaW9uXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBvc1ZlcnNpb25cbiAgICAgICAgICovXG4gICAgICAgIHN5cy5vc1ZlcnNpb24gPSBvc1ZlcnNpb247XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZSB0aGUgcnVubmluZyBvcyBtYWluIHZlcnNpb25cbiAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IG9zTWFpblZlcnNpb25cbiAgICAgICAgICovXG4gICAgICAgIHN5cy5vc01haW5WZXJzaW9uID0gb3NNYWluVmVyc2lvbjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5kaWNhdGUgdGhlIHJ1bm5pbmcgYnJvd3NlciB0eXBlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBicm93c2VyVHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgc3lzLmJyb3dzZXJUeXBlID0gc3lzLkJST1dTRVJfVFlQRV9VTktOT1dOO1xuICAgICAgICAvKiBEZXRlcm1pbmUgdGhlIGJyb3dzZXIgdHlwZSAqL1xuICAgICAgICAoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHZhciB0eXBlUmVnMSA9IC9tcXFicm93c2VyfG1pY3JvbWVzc2VuZ2VyfHFxfHNvZ291fHF6b25lfGxpZWJhb3xtYXh0aG9ufHVjYnN8MzYwIGFwaG9uZXwzNjBicm93c2VyfGJhaWR1Ym94YXBwfGJhaWR1YnJvd3NlcnxtYXh0aG9ufG14YnJvd3NlcnxtaXVpYnJvd3Nlci9pO1xuICAgICAgICAgICAgdmFyIHR5cGVSZWcyID0gL3FxYnJvd3Nlcnx1Y2Jyb3dzZXJ8dWJyb3dzZXJ8ZWRnZS9pO1xuICAgICAgICAgICAgdmFyIHR5cGVSZWczID0gL2Nocm9tZXxzYWZhcml8ZmlyZWZveHx0cmlkZW50fG9wZXJhfG9wclxcL3xvdXBlbmcvaTtcbiAgICAgICAgICAgIHZhciBicm93c2VyVHlwZXMgPSB0eXBlUmVnMS5leGVjKHVhKSB8fCB0eXBlUmVnMi5leGVjKHVhKSB8fCB0eXBlUmVnMy5leGVjKHVhKTtcblxuICAgICAgICAgICAgdmFyIGJyb3dzZXJUeXBlID0gYnJvd3NlclR5cGVzID8gYnJvd3NlclR5cGVzWzBdLnRvTG93ZXJDYXNlKCkgOiBzeXMuQlJPV1NFUl9UWVBFX1VOS05PV047XG4gICAgICAgICAgICBpZiAoQ0NfV0VDSEFUR0FNRSlcbiAgICAgICAgICAgICAgICBicm93c2VyVHlwZSA9IHN5cy5CUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUU7XG4gICAgICAgICAgICBlbHNlIGlmIChDQ19RUVBMQVkpXG4gICAgICAgICAgICAgICAgYnJvd3NlclR5cGUgPSBzeXMuQlJPV1NFUl9UWVBFX1FRX1BMQVk7XG4gICAgICAgICAgICBlbHNlIGlmIChicm93c2VyVHlwZSA9PT0gXCJzYWZhcmlcIiAmJiBpc0FuZHJvaWQpXG4gICAgICAgICAgICAgICAgYnJvd3NlclR5cGUgPSBzeXMuQlJPV1NFUl9UWVBFX0FORFJPSUQ7XG4gICAgICAgICAgICBlbHNlIGlmIChicm93c2VyVHlwZSA9PT0gXCJxcVwiICYmIHVhLm1hdGNoKC9hbmRyb2lkLiphcHBsZXdlYmtpdC9pKSlcbiAgICAgICAgICAgICAgICBicm93c2VyVHlwZSA9IHN5cy5CUk9XU0VSX1RZUEVfQU5EUk9JRDtcbiAgICAgICAgICAgIGxldCB0eXBlTWFwID0ge1xuICAgICAgICAgICAgICAgICdtaWNyb21lc3Nlbmdlcic6IHN5cy5CUk9XU0VSX1RZUEVfV0VDSEFULFxuICAgICAgICAgICAgICAgICd0cmlkZW50Jzogc3lzLkJST1dTRVJfVFlQRV9JRSxcbiAgICAgICAgICAgICAgICAnZWRnZSc6IHN5cy5CUk9XU0VSX1RZUEVfRURHRSxcbiAgICAgICAgICAgICAgICAnMzYwIGFwaG9uZSc6IHN5cy5CUk9XU0VSX1RZUEVfMzYwLFxuICAgICAgICAgICAgICAgICdteGJyb3dzZXInOiBzeXMuQlJPV1NFUl9UWVBFX01BWFRIT04sXG4gICAgICAgICAgICAgICAgJ29wci8nOiBzeXMuQlJPV1NFUl9UWVBFX09QRVJBLFxuICAgICAgICAgICAgICAgICd1YnJvd3Nlcic6IHN5cy5CUk9XU0VSX1RZUEVfVUNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHN5cy5icm93c2VyVHlwZSA9IHR5cGVNYXBbYnJvd3NlclR5cGVdIHx8IGJyb3dzZXJUeXBlO1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZSB0aGUgcnVubmluZyBicm93c2VyIHZlcnNpb25cbiAgICAgICAgICogQHByb3BlcnR5IHtTdHJpbmd9IGJyb3dzZXJWZXJzaW9uXG4gICAgICAgICAqL1xuICAgICAgICBzeXMuYnJvd3NlclZlcnNpb24gPSBcIlwiO1xuICAgICAgICAvKiBEZXRlcm1pbmUgdGhlIGJyb3dzZXIgdmVyc2lvbiBudW1iZXIgKi9cbiAgICAgICAgKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgdmVyc2lvblJlZzEgPSAvKG1xcWJyb3dzZXJ8bWljcm9tZXNzZW5nZXJ8cXF8c29nb3V8cXpvbmV8bGllYmFvfG1heHRob258dWN8dWNic3wzNjAgYXBob25lfDM2MHxiYWlkdWJveGFwcHxiYWlkdXxtYXh0aG9ufG14YnJvd3NlcnxtaXVpKD86Lmh5YnJpZCk/KShtb2JpbGUpPyhicm93c2VyKT9cXC8/KFtcXGQuXSspL2k7XG4gICAgICAgICAgICB2YXIgdmVyc2lvblJlZzIgPSAvKHFxYnJvd3NlcnxjaHJvbWV8c2FmYXJpfGZpcmVmb3h8dHJpZGVudHxvcGVyYXxvcHJcXC98b3VwZW5nKShtb2JpbGUpPyhicm93c2VyKT9cXC8/KFtcXGQuXSspL2k7XG4gICAgICAgICAgICB2YXIgdG1wID0gdWEubWF0Y2godmVyc2lvblJlZzEpO1xuICAgICAgICAgICAgaWYoIXRtcCkgdG1wID0gdWEubWF0Y2godmVyc2lvblJlZzIpO1xuICAgICAgICAgICAgc3lzLmJyb3dzZXJWZXJzaW9uID0gdG1wID8gdG1wWzRdIDogXCJcIjtcbiAgICAgICAgfSkoKTtcblxuICAgICAgICB2YXIgdyA9IHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgdmFyIGggPSB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgdmFyIHJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5kaWNhdGUgdGhlIHJlYWwgcGl4ZWwgcmVzb2x1dGlvbiBvZiB0aGUgd2hvbGUgZ2FtZSB3aW5kb3dcbiAgICAgICAgICogQHByb3BlcnR5IHtTaXplfSB3aW5kb3dQaXhlbFJlc29sdXRpb25cbiAgICAgICAgICovXG4gICAgICAgIHN5cy53aW5kb3dQaXhlbFJlc29sdXRpb24gPSB7XG4gICAgICAgICAgICB3aWR0aDogcmF0aW8gKiB3LFxuICAgICAgICAgICAgaGVpZ2h0OiByYXRpbyAqIGhcbiAgICAgICAgfTtcblxuICAgICAgICBzeXMuX2NoZWNrV2ViR0xSZW5kZXJNb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGNjLmdhbWUucmVuZGVyVHlwZSAhPT0gY2MuZ2FtZS5SRU5ERVJfVFlQRV9XRUJHTClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGZlYXR1cmUgc3VwcG9ydHMgV2ViR0wgcmVuZGVyIG1vZGUgb25seS5cIik7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIF90bXBDYW52YXMxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcblxuICAgICAgICB2YXIgY3JlYXRlM0RDb250ZXh0ID0gZnVuY3Rpb24gKGNhbnZhcywgb3B0X2F0dHJpYnMsIG9wdF9jb250ZXh0VHlwZSkge1xuICAgICAgICAgICAgaWYgKG9wdF9jb250ZXh0VHlwZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYW52YXMuZ2V0Q29udGV4dChvcHRfY29udGV4dFR5cGUsIG9wdF9hdHRyaWJzKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGUzRENvbnRleHQoY2FudmFzLCBvcHRfYXR0cmlicywgXCJ3ZWJnbFwiKSB8fFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGUzRENvbnRleHQoY2FudmFzLCBvcHRfYXR0cmlicywgXCJleHBlcmltZW50YWwtd2ViZ2xcIikgfHxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlM0RDb250ZXh0KGNhbnZhcywgb3B0X2F0dHJpYnMsIFwid2Via2l0LTNkXCIpIHx8XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZTNEQ29udGV4dChjYW52YXMsIG9wdF9hdHRyaWJzLCBcIm1vei13ZWJnbFwiKSB8fFxuICAgICAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjYy5zeXMubG9jYWxTdG9yYWdlIGlzIGEgbG9jYWwgc3RvcmFnZSBjb21wb25lbnQuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBsb2NhbFN0b3JhZ2VcbiAgICAgICAgICovXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxTdG9yYWdlID0gc3lzLmxvY2FsU3RvcmFnZSA9IHdpbi5sb2NhbFN0b3JhZ2U7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInN0b3JhZ2VcIiwgXCJcIik7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInN0b3JhZ2VcIik7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UgPSBudWxsO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB2YXIgd2FybiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjYy53YXJuSUQoNTIwMCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3lzLmxvY2FsU3RvcmFnZSA9IHtcbiAgICAgICAgICAgICAgICBnZXRJdGVtIDogd2FybixcbiAgICAgICAgICAgICAgICBzZXRJdGVtIDogd2FybixcbiAgICAgICAgICAgICAgICByZW1vdmVJdGVtIDogd2FybixcbiAgICAgICAgICAgICAgICBjbGVhciA6IHdhcm5cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3N1cHBvcnRXZWJwID0gX3RtcENhbnZhczEudG9EYXRhVVJMKCdpbWFnZS93ZWJwJykuc3RhcnRzV2l0aCgnZGF0YTppbWFnZS93ZWJwJyk7XG4gICAgICAgIHZhciBfc3VwcG9ydENhbnZhcyA9ICEhX3RtcENhbnZhczEuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICB2YXIgX3N1cHBvcnRXZWJHTCA9IGZhbHNlO1xuICAgICAgICBpZiAoQ0NfVEVTVCkge1xuICAgICAgICAgICAgX3N1cHBvcnRXZWJHTCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN5cy5icm93c2VyVHlwZSA9PT0gc3lzLkJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRSkge1xuICAgICAgICAgICAgX3N1cHBvcnRXZWJHTCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod2luLldlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xuICAgICAgICAgICAgX3N1cHBvcnRXZWJHTCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNhcGFiaWxpdGllcyBvZiB0aGUgY3VycmVudCBwbGF0Zm9ybVxuICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdH0gY2FwYWJpbGl0aWVzXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgY2FwYWJpbGl0aWVzID0gc3lzLmNhcGFiaWxpdGllcyA9IHtcbiAgICAgICAgICAgIFwiY2FudmFzXCI6IF9zdXBwb3J0Q2FudmFzLFxuICAgICAgICAgICAgXCJvcGVuZ2xcIjogX3N1cHBvcnRXZWJHTCxcbiAgICAgICAgICAgIFwid2VicFwiOiBfc3VwcG9ydFdlYnAsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChkb2NFbGVbJ29udG91Y2hzdGFydCddICE9PSB1bmRlZmluZWQgfHwgZG9jWydvbnRvdWNoc3RhcnQnXSAhPT0gdW5kZWZpbmVkIHx8IG5hdi5tc1BvaW50ZXJFbmFibGVkKVxuICAgICAgICAgICAgY2FwYWJpbGl0aWVzW1widG91Y2hlc1wiXSA9IHRydWU7XG4gICAgICAgIGlmIChkb2NFbGVbJ29ubW91c2V1cCddICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBjYXBhYmlsaXRpZXNbXCJtb3VzZVwiXSA9IHRydWU7XG4gICAgICAgIGlmIChkb2NFbGVbJ29ua2V5dXAnXSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgY2FwYWJpbGl0aWVzW1wia2V5Ym9hcmRcIl0gPSB0cnVlO1xuICAgICAgICBpZiAod2luLkRldmljZU1vdGlvbkV2ZW50IHx8IHdpbi5EZXZpY2VPcmllbnRhdGlvbkV2ZW50KVxuICAgICAgICAgICAgY2FwYWJpbGl0aWVzW1wiYWNjZWxlcm9tZXRlclwiXSA9IHRydWU7XG5cbiAgICAgICAgdmFyIF9fYXVkaW9TdXBwb3J0O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBdWRpbyBzdXBwb3J0IGluIHRoZSBicm93c2VyXG4gICAgICAgICAqXG4gICAgICAgICAqIE1VTFRJX0NIQU5ORUwgICAgICAgIDogTXVsdGlwbGUgYXVkaW8gd2hpbGUgcGxheWluZyAtIElmIGl0IGRvZXNuJ3QsIHlvdSBjYW4gb25seSBwbGF5IGJhY2tncm91bmQgbXVzaWNcbiAgICAgICAgICogV0VCX0FVRElPICAgICAgICAgICAgOiBTdXBwb3J0IGZvciBXZWJBdWRpbyAtIFN1cHBvcnQgVzNDIFdlYkF1ZGlvIHN0YW5kYXJkcywgYWxsIG9mIHRoZSBhdWRpbyBjYW4gYmUgcGxheWVkXG4gICAgICAgICAqIEFVVE9QTEFZICAgICAgICAgICAgIDogU3VwcG9ydHMgYXV0by1wbGF5IGF1ZGlvIC0gaWYgRG9u4oCYdCBzdXBwb3J0IGl0LCBPbiBhIHRvdWNoIGRldGVjdGluZyBiYWNrZ3JvdW5kIG11c2ljIGNhbnZhcywgYW5kIHRoZW4gcmVwbGF5XG4gICAgICAgICAqIFJFUExBWV9BRlRFUl9UT1VDSCAgIDogVGhlIGZpcnN0IG11c2ljIHdpbGwgZmFpbCwgbXVzdCBiZSByZXBsYXkgYWZ0ZXIgdG91Y2hzdGFydFxuICAgICAgICAgKiBVU0VfRU1QVElFRF9FVkVOVCAgICA6IFdoZXRoZXIgdG8gdXNlIHRoZSBlbXB0aWVkIGV2ZW50IHRvIHJlcGxhY2UgbG9hZCBjYWxsYmFja1xuICAgICAgICAgKiBERUxBWV9DUkVBVEVfQ1RYICAgICA6IGRlbGF5IGNyZWF0ZWQgdGhlIGNvbnRleHQgb2JqZWN0IC0gb25seSB3ZWJBdWRpb1xuICAgICAgICAgKiBORUVEX01BTlVBTF9MT09QICAgICA6IGxvb3AgYXR0cmlidXRlIGZhaWx1cmUsIG5lZWQgdG8gcGVyZm9ybSBsb29wIG1hbnVhbGx5XG4gICAgICAgICAqXG4gICAgICAgICAqIE1heSBiZSBtb2RpZmljYXRpb25zIGZvciBhIGZldyBicm93c2VyIHZlcnNpb25cbiAgICAgICAgICovXG4gICAgICAgIChmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICB2YXIgREVCVUcgPSBmYWxzZTtcblxuICAgICAgICAgICAgdmFyIHZlcnNpb24gPSBzeXMuYnJvd3NlclZlcnNpb247XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIGJyb3dzZXIgc3VwcG9ydHMgV2ViIEF1ZGlvXG4gICAgICAgICAgICAvLyBjaGVjayBXZWIgQXVkaW8ncyBjb250ZXh0XG4gICAgICAgICAgICB2YXIgc3VwcG9ydFdlYkF1ZGlvID0gc3lzLmJyb3dzZXJUeXBlICE9PSBzeXMuQlJPV1NFUl9UWVBFX1dFQ0hBVF9HQU1FICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEhKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCB8fCB3aW5kb3cubW96QXVkaW9Db250ZXh0KTtcblxuICAgICAgICAgICAgX19hdWRpb1N1cHBvcnQgPSB7IE9OTFlfT05FOiBmYWxzZSwgV0VCX0FVRElPOiBzdXBwb3J0V2ViQXVkaW8sIERFTEFZX0NSRUFURV9DVFg6IGZhbHNlIH07XG5cbiAgICAgICAgICAgIGlmIChzeXMub3MgPT09IHN5cy5PU19JT1MpIHtcbiAgICAgICAgICAgICAgICAvLyBJT1Mgbm8gZXZlbnQgdGhhdCB1c2VkIHRvIHBhcnNlIGNvbXBsZXRlZCBjYWxsYmFja1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgdGltZSBpcyBub3QgY29tcGxldGUsIGNhbiBub3QgcGxheVxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgX19hdWRpb1N1cHBvcnQuVVNFX0xPQURFUl9FVkVOVCA9ICdsb2FkZWRtZXRhZGF0YSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzeXMuYnJvd3NlclR5cGUgPT09IHN5cy5CUk9XU0VSX1RZUEVfRklSRUZPWCkge1xuICAgICAgICAgICAgICAgIF9fYXVkaW9TdXBwb3J0LkRFTEFZX0NSRUFURV9DVFggPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9fYXVkaW9TdXBwb3J0LlVTRV9MT0FERVJfRVZFTlQgPSAnY2FucGxheSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzeXMub3MgPT09IHN5cy5PU19BTkRST0lEKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN5cy5icm93c2VyVHlwZSA9PT0gc3lzLkJST1dTRVJfVFlQRV9VQykge1xuICAgICAgICAgICAgICAgICAgICBfX2F1ZGlvU3VwcG9ydC5PTkVfU09VUkNFID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKERFQlVHKXtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZygnYnJvd3NlIHR5cGU6ICcgKyBzeXMuYnJvd3NlclR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBjYy5sb2coJ2Jyb3dzZSB2ZXJzaW9uOiAnICsgdmVyc2lvbik7XG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZygnTVVMVElfQ0hBTk5FTDogJyArIF9fYXVkaW9TdXBwb3J0Lk1VTFRJX0NIQU5ORUwpO1xuICAgICAgICAgICAgICAgICAgICBjYy5sb2coJ1dFQl9BVURJTzogJyArIF9fYXVkaW9TdXBwb3J0LldFQl9BVURJTyk7XG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZygnQVVUT1BMQVk6ICcgKyBfX2F1ZGlvU3VwcG9ydC5BVVRPUExBWSk7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChfX2F1ZGlvU3VwcG9ydC5XRUJfQVVESU8pIHtcbiAgICAgICAgICAgICAgICBfX2F1ZGlvU3VwcG9ydC5jb250ZXh0ID0gbmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQgfHwgd2luZG93Lm1vekF1ZGlvQ29udGV4dCkoKTtcbiAgICAgICAgICAgICAgICBpZihfX2F1ZGlvU3VwcG9ydC5ERUxBWV9DUkVBVEVfQ1RYKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgX19hdWRpb1N1cHBvcnQuY29udGV4dCA9IG5ldyAod2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0IHx8IHdpbmRvdy5tb3pBdWRpb0NvbnRleHQpKCk7IH0sIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICAgICAgX19hdWRpb1N1cHBvcnQuV0VCX0FVRElPID0gZmFsc2U7XG4gICAgICAgICAgICBjYy5sb2dJRCg1MjAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmb3JtYXRTdXBwb3J0ID0gW107XG5cbiAgICAgICAgKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgYXVkaW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xuICAgICAgICAgICAgaWYoYXVkaW8uY2FuUGxheVR5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2dnID0gYXVkaW8uY2FuUGxheVR5cGUoJ2F1ZGlvL29nZzsgY29kZWNzPVwidm9yYmlzXCInKTtcbiAgICAgICAgICAgICAgICBpZiAob2dnKSBmb3JtYXRTdXBwb3J0LnB1c2goJy5vZ2cnKTtcbiAgICAgICAgICAgICAgICB2YXIgbXAzID0gYXVkaW8uY2FuUGxheVR5cGUoJ2F1ZGlvL21wZWcnKTtcbiAgICAgICAgICAgICAgICBpZiAobXAzKSBmb3JtYXRTdXBwb3J0LnB1c2goJy5tcDMnKTtcbiAgICAgICAgICAgICAgICB2YXIgd2F2ID0gYXVkaW8uY2FuUGxheVR5cGUoJ2F1ZGlvL3dhdjsgY29kZWNzPVwiMVwiJyk7XG4gICAgICAgICAgICAgICAgaWYgKHdhdikgZm9ybWF0U3VwcG9ydC5wdXNoKCcud2F2Jyk7XG4gICAgICAgICAgICAgICAgdmFyIG1wNCA9IGF1ZGlvLmNhblBsYXlUeXBlKCdhdWRpby9tcDQnKTtcbiAgICAgICAgICAgICAgICBpZiAobXA0KSBmb3JtYXRTdXBwb3J0LnB1c2goJy5tcDQnKTtcbiAgICAgICAgICAgICAgICB2YXIgbTRhID0gYXVkaW8uY2FuUGxheVR5cGUoJ2F1ZGlvL3gtbTRhJyk7XG4gICAgICAgICAgICAgICAgaWYgKG00YSkgZm9ybWF0U3VwcG9ydC5wdXNoKCcubTRhJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgICAgIF9fYXVkaW9TdXBwb3J0LmZvcm1hdCA9IGZvcm1hdFN1cHBvcnQ7XG5cbiAgICAgICAgc3lzLl9fYXVkaW9TdXBwb3J0ID0gX19hdWRpb1N1cHBvcnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIE5ldHdvcmsgdHlwZSBlbnVtZXJhdGlvblxuICAgICAqICEjemhcbiAgICAgKiDnvZHnu5znsbvlnovmnprkuL5cbiAgICAgKlxuICAgICAqIEBlbnVtIHN5cy5OZXR3b3JrVHlwZVxuICAgICAqL1xuICAgIHN5cy5OZXR3b3JrVHlwZSA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW5cbiAgICAgICAgICogTmV0d29yayBpcyB1bnJlYWNoYWJsZS5cbiAgICAgICAgICogISN6aFxuICAgICAgICAgKiDnvZHnu5zkuI3pgJpcbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IE5PTkVcbiAgICAgICAgICovXG4gICAgICAgIE5PTkU6IDAsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIE5ldHdvcmsgaXMgcmVhY2hhYmxlIHZpYSBXaUZpIG9yIGNhYmxlLlxuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOmAmui/h+aXoOe6v+aIluiAheaciee6v+acrOWcsOe9kee7nOi/nuaOpeWboOeJuee9kVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gTEFOXG4gICAgICAgICAqL1xuICAgICAgICBMQU46IDEsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuXG4gICAgICAgICAqIE5ldHdvcmsgaXMgcmVhY2hhYmxlIHZpYSBXaXJlbGVzcyBXaWRlIEFyZWEgTmV0d29ya1xuICAgICAgICAgKiAhI3poXG4gICAgICAgICAqIOmAmui/h+icgueqneenu+WKqOe9kee7nOi/nuaOpeWboOeJuee9kVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvcGVydHkge051bWJlcn0gV1dBTlxuICAgICAgICAgKi9cbiAgICAgICAgV1dBTjogMlxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3Mgc3lzXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogR2V0IHRoZSBuZXR3b3JrIHR5cGUgb2YgY3VycmVudCBkZXZpY2UsIHJldHVybiBjYy5zeXMuTmV0d29ya1R5cGUuTEFOIGlmIGZhaWx1cmUuXG4gICAgICogISN6aFxuICAgICAqIOiOt+WPluW9k+WJjeiuvuWkh+eahOe9kee7nOexu+Weiywg5aaC5p6c572R57uc57G75Z6L5peg5rOV6I635Y+W77yM6buY6K6k5bCG6L+U5ZueIGNjLnN5cy5OZXR3b3JrVHlwZS5MQU5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0TmV0d29ya1R5cGVcbiAgICAgKiBAcmV0dXJuIHtOZXR3b3JrVHlwZX1cbiAgICAgKi9cbiAgICBzeXMuZ2V0TmV0d29ya1R5cGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVE9ETzogbmVlZCB0byBpbXBsZW1lbnQgdGhpcyBmb3IgbW9iaWxlIHBob25lcy5cbiAgICAgICAgcmV0dXJuIHN5cy5OZXR3b3JrVHlwZS5MQU47XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBHZXQgdGhlIGJhdHRlcnkgbGV2ZWwgb2YgY3VycmVudCBkZXZpY2UsIHJldHVybiAxLjAgaWYgZmFpbHVyZS5cbiAgICAgKiAhI3poXG4gICAgICog6I635Y+W5b2T5YmN6K6+5aSH55qE55S15rGg55S16YeP77yM5aaC5p6c55S16YeP5peg5rOV6I635Y+W77yM6buY6K6k5bCG6L+U5ZueIDFcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0QmF0dGVyeUxldmVsXG4gICAgICogQHJldHVybiB7TnVtYmVyfSAtIDAuMCB+IDEuMFxuICAgICAqL1xuICAgIHN5cy5nZXRCYXR0ZXJ5TGV2ZWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVE9ETzogbmVlZCB0byBpbXBsZW1lbnQgdGhpcyBmb3IgbW9iaWxlIHBob25lcy5cbiAgICAgICAgcmV0dXJuIDEuMDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRm9yY2VzIHRoZSBnYXJiYWdlIGNvbGxlY3Rpb24sIG9ubHkgYXZhaWxhYmxlIGluIEpTQlxuICAgICAqIEBtZXRob2QgZ2FyYmFnZUNvbGxlY3RcbiAgICAgKi9cbiAgICBzeXMuZ2FyYmFnZUNvbGxlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIE4vQSBpbiB3ZWJcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzdGFydCB0aGUgSlMgVk0sIG9ubHkgYXZhaWxhYmxlIGluIEpTQlxuICAgICAqIEBtZXRob2QgcmVzdGFydFZNXG4gICAgICovXG4gICAgc3lzLnJlc3RhcnRWTSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gTi9BIGluIHdlYlxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJuIHRoZSBzYWZlIGFyZWEgcmVjdC4gPGJyLz5cbiAgICAgKiBvbmx5IGF2YWlsYWJsZSBvbiB0aGUgaU9TIG5hdGl2ZSBwbGF0Zm9ybSwgb3RoZXJ3aXNlIGl0IHdpbGwgcmV0dXJuIGEgcmVjdCB3aXRoIGRlc2lnbiByZXNvbHV0aW9uIHNpemUuXG4gICAgICogISN6aFxuICAgICAqIOi/lOWbnuaJi+acuuWxj+W5leWuieWFqOWMuuWfn++8jOebruWJjeS7heWcqCBpT1Mg5Y6f55Sf5bmz5Y+w5pyJ5pWI44CC5YW25a6D5bmz5Y+w5bCG6buY6K6k6L+U5Zue6K6+6K6h5YiG6L6o546H5bC65a+444CCXG4gICAgICogQG1ldGhvZCBnZXRTYWZlQXJlYVJlY3RcbiAgICAgKiBAcmV0dXJuIHtSZWN0fVxuICAgICovXG4gICAgc3lzLmdldFNhZmVBcmVhUmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHZpc2libGVTaXplID0gY2Mudmlldy5nZXRWaXNpYmxlU2l6ZSgpO1xuICAgICAgICByZXR1cm4gY2MucmVjdCgwLCAwLCB2aXNpYmxlU2l6ZS53aWR0aCwgdmlzaWJsZVNpemUuaGVpZ2h0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaXMgdmFsaWQsXG4gICAgICogSW4gd2ViIGVuZ2luZSwgaXQgd2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGUgb2JqZWN0IGV4aXN0XG4gICAgICogSW4gbmF0aXZlIGVuZ2luZSwgaXQgd2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGUgSlMgb2JqZWN0IGFuZCB0aGUgY29ycmVzcG9uZCBuYXRpdmUgb2JqZWN0IGFyZSBib3RoIHZhbGlkXG4gICAgICogQG1ldGhvZCBpc09iamVjdFZhbGlkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFZhbGlkaXR5IG9mIHRoZSBvYmplY3RcbiAgICAgKi9cbiAgICBzeXMuaXNPYmplY3RWYWxpZCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEdW1wIHN5c3RlbSBpbmZvcm1hdGlvbnNcbiAgICAgKiBAbWV0aG9kIGR1bXBcbiAgICAgKi9cbiAgICBzeXMuZHVtcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgc3RyID0gXCJcIjtcbiAgICAgICAgc3RyICs9IFwiaXNNb2JpbGUgOiBcIiArIHNlbGYuaXNNb2JpbGUgKyBcIlxcclxcblwiO1xuICAgICAgICBzdHIgKz0gXCJsYW5ndWFnZSA6IFwiICsgc2VsZi5sYW5ndWFnZSArIFwiXFxyXFxuXCI7XG4gICAgICAgIHN0ciArPSBcImJyb3dzZXJUeXBlIDogXCIgKyBzZWxmLmJyb3dzZXJUeXBlICsgXCJcXHJcXG5cIjtcbiAgICAgICAgc3RyICs9IFwiYnJvd3NlclZlcnNpb24gOiBcIiArIHNlbGYuYnJvd3NlclZlcnNpb24gKyBcIlxcclxcblwiO1xuICAgICAgICBzdHIgKz0gXCJjYXBhYmlsaXRpZXMgOiBcIiArIEpTT04uc3RyaW5naWZ5KHNlbGYuY2FwYWJpbGl0aWVzKSArIFwiXFxyXFxuXCI7XG4gICAgICAgIHN0ciArPSBcIm9zIDogXCIgKyBzZWxmLm9zICsgXCJcXHJcXG5cIjtcbiAgICAgICAgc3RyICs9IFwib3NWZXJzaW9uIDogXCIgKyBzZWxmLm9zVmVyc2lvbiArIFwiXFxyXFxuXCI7XG4gICAgICAgIHN0ciArPSBcInBsYXRmb3JtIDogXCIgKyBzZWxmLnBsYXRmb3JtICsgXCJcXHJcXG5cIjtcbiAgICAgICAgc3RyICs9IFwiVXNpbmcgXCIgKyAoY2MuZ2FtZS5yZW5kZXJUeXBlID09PSBjYy5nYW1lLlJFTkRFUl9UWVBFX1dFQkdMID8gXCJXRUJHTFwiIDogXCJDQU5WQVNcIikgKyBcIiByZW5kZXJlci5cIiArIFwiXFxyXFxuXCI7XG4gICAgICAgIGNjLmxvZyhzdHIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBPcGVuIGEgdXJsIGluIGJyb3dzZXJcbiAgICAgKiBAbWV0aG9kIG9wZW5VUkxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAgICovXG4gICAgc3lzLm9wZW5VUkwgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIGlmIChDQ19KU0IgfHwgQ0NfUlVOVElNRSkge1xuICAgICAgICAgICAganNiLm9wZW5VUkwodXJsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGVsYXBzZWQgc2luY2UgMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDLlxuICAgICAqIEBtZXRob2Qgbm93XG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIHN5cy5ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChEYXRlLm5vdykge1xuICAgICAgICAgICAgcmV0dXJuIERhdGUubm93KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKyhuZXcgRGF0ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHN5cztcbn1cblxudmFyIHN5cyA9IGNjICYmIGNjLnN5cyA/IGNjLnN5cyA6IGluaXRTeXMoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzeXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgc2V0dGluZ1BsYXRmb3JtID0gdm9pZCAwO1xuaWYgKCFDQ19FRElUT1IpIHtcbiAgc2V0dGluZ1BsYXRmb3JtID0gd2luZG93Ll9DQ1NldHRpbmdzID8gX0NDU2V0dGluZ3MucGxhdGZvcm0gOiB1bmRlZmluZWQ7XG59XG52YXIgaXNCYWlkdUdhbWUgPSBzZXR0aW5nUGxhdGZvcm0gPT09ICdiYWlkdWdhbWUnIHx8IHNldHRpbmdQbGF0Zm9ybSA9PT0gJ2JhaWR1Z2FtZS1zdWJjb250ZXh0JztcbnZhciBpc1Zpdm9HYW1lID0gc2V0dGluZ1BsYXRmb3JtID09PSAncWdhbWUnO1xudmFyIGlzT3Bwb0dhbWUgPSBzZXR0aW5nUGxhdGZvcm0gPT09ICdxdWlja2dhbWUnO1xudmFyIGlzSHVhd2VpR2FtZSA9IHNldHRpbmdQbGF0Zm9ybSA9PT0gJ2h1YXdlaSc7XG52YXIgaXNKS1dHYW1lID0gc2V0dGluZ1BsYXRmb3JtID09PSAnamt3LWdhbWUnO1xuXG52YXIgX2dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93O1xuXG5mdW5jdGlvbiBpbml0U3lzKCkge1xuICAvKipcbiAgICogU3lzdGVtIHZhcmlhYmxlc1xuICAgKiBAY2xhc3Mgc3lzXG4gICAqIEBtYWluXG4gICAqIEBzdGF0aWNcbiAgICovXG4gIGNjLnN5cyA9IHt9O1xuICB2YXIgc3lzID0gY2Muc3lzO1xuXG4gIC8qKlxuICAgKiBFbmdsaXNoIGxhbmd1YWdlIGNvZGVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX0VOR0xJU0hcbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBzeXMuTEFOR1VBR0VfRU5HTElTSCA9IFwiZW5cIjtcblxuICAvKipcbiAgICogQ2hpbmVzZSBsYW5ndWFnZSBjb2RlXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBMQU5HVUFHRV9DSElORVNFXG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgc3lzLkxBTkdVQUdFX0NISU5FU0UgPSBcInpoXCI7XG5cbiAgLyoqXG4gICAqIEZyZW5jaCBsYW5ndWFnZSBjb2RlXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBMQU5HVUFHRV9GUkVOQ0hcbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBzeXMuTEFOR1VBR0VfRlJFTkNIID0gXCJmclwiO1xuXG4gIC8qKlxuICAgKiBJdGFsaWFuIGxhbmd1YWdlIGNvZGVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX0lUQUxJQU5cbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBzeXMuTEFOR1VBR0VfSVRBTElBTiA9IFwiaXRcIjtcblxuICAvKipcbiAgICogR2VybWFuIGxhbmd1YWdlIGNvZGVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX0dFUk1BTlxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHN5cy5MQU5HVUFHRV9HRVJNQU4gPSBcImRlXCI7XG5cbiAgLyoqXG4gICAqIFNwYW5pc2ggbGFuZ3VhZ2UgY29kZVxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfU1BBTklTSFxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHN5cy5MQU5HVUFHRV9TUEFOSVNIID0gXCJlc1wiO1xuXG4gIC8qKlxuICAgKiBTcGFuaXNoIGxhbmd1YWdlIGNvZGVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX0RVVENIXG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgc3lzLkxBTkdVQUdFX0RVVENIID0gXCJkdVwiO1xuXG4gIC8qKlxuICAgKiBSdXNzaWFuIGxhbmd1YWdlIGNvZGVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX1JVU1NJQU5cbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBzeXMuTEFOR1VBR0VfUlVTU0lBTiA9IFwicnVcIjtcblxuICAvKipcbiAgICogS29yZWFuIGxhbmd1YWdlIGNvZGVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX0tPUkVBTlxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHN5cy5MQU5HVUFHRV9LT1JFQU4gPSBcImtvXCI7XG5cbiAgLyoqXG4gICAqIEphcGFuZXNlIGxhbmd1YWdlIGNvZGVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX0pBUEFORVNFXG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgc3lzLkxBTkdVQUdFX0pBUEFORVNFID0gXCJqYVwiO1xuXG4gIC8qKlxuICAgKiBIdW5nYXJpYW4gbGFuZ3VhZ2UgY29kZVxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfSFVOR0FSSUFOXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgc3lzLkxBTkdVQUdFX0hVTkdBUklBTiA9IFwiaHVcIjtcblxuICAvKipcbiAgICogUG9ydHVndWVzZSBsYW5ndWFnZSBjb2RlXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBMQU5HVUFHRV9QT1JUVUdVRVNFXG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgc3lzLkxBTkdVQUdFX1BPUlRVR1VFU0UgPSBcInB0XCI7XG5cbiAgLyoqXG4gICAqIEFyYWJpYyBsYW5ndWFnZSBjb2RlXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBMQU5HVUFHRV9BUkFCSUNcbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBzeXMuTEFOR1VBR0VfQVJBQklDID0gXCJhclwiO1xuXG4gIC8qKlxuICAgKiBOb3J3ZWdpYW4gbGFuZ3VhZ2UgY29kZVxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfTk9SV0VHSUFOXG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgc3lzLkxBTkdVQUdFX05PUldFR0lBTiA9IFwibm9cIjtcblxuICAvKipcbiAgICogUG9saXNoIGxhbmd1YWdlIGNvZGVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX1BPTElTSFxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHN5cy5MQU5HVUFHRV9QT0xJU0ggPSBcInBsXCI7XG5cbiAgLyoqXG4gICAqIFR1cmtpc2ggbGFuZ3VhZ2UgY29kZVxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfVFVSS0lTSFxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHN5cy5MQU5HVUFHRV9UVVJLSVNIID0gXCJ0clwiO1xuXG4gIC8qKlxuICAgKiBVa3JhaW5pYW4gbGFuZ3VhZ2UgY29kZVxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfVUtSQUlOSUFOXG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgc3lzLkxBTkdVQUdFX1VLUkFJTklBTiA9IFwidWtcIjtcblxuICAvKipcbiAgICogUm9tYW5pYW4gbGFuZ3VhZ2UgY29kZVxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gTEFOR1VBR0VfUk9NQU5JQU5cbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBzeXMuTEFOR1VBR0VfUk9NQU5JQU4gPSBcInJvXCI7XG5cbiAgLyoqXG4gICAqIEJ1bGdhcmlhbiBsYW5ndWFnZSBjb2RlXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBMQU5HVUFHRV9CVUxHQVJJQU5cbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBzeXMuTEFOR1VBR0VfQlVMR0FSSUFOID0gXCJiZ1wiO1xuXG4gIC8qKlxuICAgKiBVbmtub3duIGxhbmd1YWdlIGNvZGVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IExBTkdVQUdFX1VOS05PV05cbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBzeXMuTEFOR1VBR0VfVU5LTk9XTiA9IFwidW5rbm93blwiO1xuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gT1NfSU9TXG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgc3lzLk9TX0lPUyA9IFwiaU9TXCI7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gT1NfQU5EUk9JRFxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHN5cy5PU19BTkRST0lEID0gXCJBbmRyb2lkXCI7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gT1NfV0lORE9XU1xuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHN5cy5PU19XSU5ET1dTID0gXCJXaW5kb3dzXCI7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gT1NfTUFSTUFMQURFXG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgc3lzLk9TX01BUk1BTEFERSA9IFwiTWFybWFsYWRlXCI7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gT1NfTElOVVhcbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBzeXMuT1NfTElOVVggPSBcIkxpbnV4XCI7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gT1NfQkFEQVxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHN5cy5PU19CQURBID0gXCJCYWRhXCI7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gT1NfQkxBQ0tCRVJSWVxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHN5cy5PU19CTEFDS0JFUlJZID0gXCJCbGFja2JlcnJ5XCI7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gT1NfT1NYXG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgc3lzLk9TX09TWCA9IFwiT1MgWFwiO1xuICAvKipcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IE9TX1dQOFxuICAgKiBAcmVhZE9ubHlcbiAgICovXG4gIHN5cy5PU19XUDggPSBcIldQOFwiO1xuICAvKipcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IE9TX1dJTlJUXG4gICAqIEByZWFkT25seVxuICAgKi9cbiAgc3lzLk9TX1dJTlJUID0gXCJXSU5SVFwiO1xuICAvKipcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IE9TX1VOS05PV05cbiAgICogQHJlYWRPbmx5XG4gICAqL1xuICBzeXMuT1NfVU5LTk9XTiA9IFwiVW5rbm93blwiO1xuXG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gVU5LTk9XTlxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgLTFcbiAgICovXG4gIHN5cy5VTktOT1dOID0gLTE7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gV0lOMzJcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHN5cy5XSU4zMiA9IDA7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gTElOVVhcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIHN5cy5MSU5VWCA9IDE7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gTUFDT1NcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IDJcbiAgICovXG4gIHN5cy5NQUNPUyA9IDI7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gQU5EUk9JRFxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgM1xuICAgKi9cbiAgc3lzLkFORFJPSUQgPSAzO1xuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IElQSE9ORVxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgNFxuICAgKi9cbiAgc3lzLklQSE9ORSA9IDQ7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gSVBBRFxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgNVxuICAgKi9cbiAgc3lzLklQQUQgPSA1O1xuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IEJMQUNLQkVSUllcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IDZcbiAgICovXG4gIHN5cy5CTEFDS0JFUlJZID0gNjtcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBOQUNMXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCA3XG4gICAqL1xuICBzeXMuTkFDTCA9IDc7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gRU1TQ1JJUFRFTlxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgOFxuICAgKi9cbiAgc3lzLkVNU0NSSVBURU4gPSA4O1xuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFRJWkVOXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCA5XG4gICAqL1xuICBzeXMuVElaRU4gPSA5O1xuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFdJTlJUXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCAxMFxuICAgKi9cbiAgc3lzLldJTlJUID0gMTA7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gV1A4XG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCAxMVxuICAgKi9cbiAgc3lzLldQOCA9IDExO1xuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IE1PQklMRV9CUk9XU0VSXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCAxMDBcbiAgICovXG4gIHN5cy5NT0JJTEVfQlJPV1NFUiA9IDEwMDtcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBERVNLVE9QX0JST1dTRVJcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IDEwMVxuICAgKi9cbiAgc3lzLkRFU0tUT1BfQlJPV1NFUiA9IDEwMTtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgZXhlY3V0ZXMgaW4gZWRpdG9yJ3Mgd2luZG93IHByb2Nlc3MgKEVsZWN0cm9uJ3MgcmVuZGVyZXIgY29udGV4dClcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IEVESVRPUl9QQUdFXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCAxMDJcbiAgICovXG4gIHN5cy5FRElUT1JfUEFHRSA9IDEwMjtcbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIGV4ZWN1dGVzIGluIGVkaXRvcidzIG1haW4gcHJvY2VzcyAoRWxlY3Ryb24ncyBicm93c2VyIGNvbnRleHQpXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBFRElUT1JfQ09SRVxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgMTAzXG4gICAqL1xuICBzeXMuRURJVE9SX0NPUkUgPSAxMDM7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gV0VDSEFUX0dBTUVcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IDEwNFxuICAgKi9cbiAgc3lzLldFQ0hBVF9HQU1FID0gMTA0O1xuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IFFRX1BMQVlcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IDEwNVxuICAgKi9cbiAgc3lzLlFRX1BMQVkgPSAxMDU7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gRkJfUExBWUFCTEVfQURTXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCAxMDZcbiAgICovXG4gIHN5cy5GQl9QTEFZQUJMRV9BRFMgPSAxMDY7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gQkFJRFVfR0FNRVxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgMTA3XG4gICAqL1xuICBzeXMuQkFJRFVfR0FNRSA9IDEwNztcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBWSVZPX0dBTUVcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IDEwOFxuICAgKi9cbiAgc3lzLlZJVk9fR0FNRSA9IDEwODtcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBPUFBPX0dBTUVcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IDEwOVxuICAgKi9cbiAgc3lzLk9QUE9fR0FNRSA9IDEwOTtcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBIVUFXRUlfR0FNRVxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgMTEwXG4gICAqL1xuICBzeXMuSFVBV0VJX0dBTUUgPSAxMTA7XG4gIC8qKlxuICAgKiBAcHJvcGVydHkge051bWJlcn0gWElBT01JX0dBTUVcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IDExMVxuICAgKi9cbiAgc3lzLlhJQU9NSV9HQU1FID0gMTExO1xuICAvKipcbiAgICogQHByb3BlcnR5IHtOdW1iZXJ9IEpLV19HQU1FXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCAxMTJcbiAgICovXG4gIHN5cy5KS1dfR0FNRSA9IDExMjtcbiAgLyoqXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBBTElQQVlfR0FNRVxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgMTEzXG4gICAqL1xuICBzeXMuQUxJUEFZX0dBTUUgPSAxMTM7XG4gIC8qKlxuICAgKiBCUk9XU0VSX1RZUEVfV0VDSEFUXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfV0VDSEFUXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCBcIndlY2hhdFwiXG4gICAqL1xuICBzeXMuQlJPV1NFUl9UWVBFX1dFQ0hBVCA9IFwid2VjaGF0XCI7XG4gIC8qKlxuICAgKiBCUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRVxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgXCJ3ZWNoYXRnYW1lXCJcbiAgICovXG4gIHN5cy5CUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUUgPSBcIndlY2hhdGdhbWVcIjtcbiAgLyoqXG4gICAqIEJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRV9TVUJcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRV9TVUJcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IFwid2VjaGF0Z2FtZXN1YlwiXG4gICAqL1xuICBzeXMuQlJPV1NFUl9UWVBFX1dFQ0hBVF9HQU1FX1NVQiA9IFwid2VjaGF0Z2FtZXN1YlwiO1xuICAvKipcbiAgICogQlJPV1NFUl9UWVBFX0JBSURVX0dBTUVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9CQUlEVV9HQU1FXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCBcImJhaWR1Z2FtZVwiXG4gICAqL1xuICBzeXMuQlJPV1NFUl9UWVBFX0JBSURVX0dBTUUgPSBcImJhaWR1Z2FtZVwiO1xuICAvKipcbiAgICogQlJPV1NFUl9UWVBFX0JBSURVX0dBTUVfU1VCXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfQkFJRFVfR0FNRV9TVUJcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IFwiYmFpZHVnYW1lc3ViXCJcbiAgICovXG4gIHN5cy5CUk9XU0VSX1RZUEVfQkFJRFVfR0FNRV9TVUIgPSBcImJhaWR1Z2FtZXN1YlwiO1xuICAvKipcbiAgICogQlJPV1NFUl9UWVBFX1hJQU9NSV9HQU1FXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfWElBT01JX0dBTUVcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IFwieGlhb21pZ2FtZVwiXG4gICAqL1xuICBzeXMuQlJPV1NFUl9UWVBFX1hJQU9NSV9HQU1FID0gXCJ4aWFvbWlnYW1lXCI7XG4gIC8qKlxuICAgKiBCUk9XU0VSX1RZUEVfQUxJUEFZX0dBTUVcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9BTElQQVlfR0FNRVxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgXCJhbGlwYXlnYW1lXCJcbiAgICovXG4gIHN5cy5CUk9XU0VSX1RZUEVfQUxJUEFZX0dBTUUgPSBcImFsaXBheWdhbWVcIjtcbiAgLyoqXG4gICAqIEJST1dTRVJfVFlQRV9RUV9QTEFZXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfUVFfUExBWVxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgXCJxcXBsYXlcIlxuICAgKi9cbiAgc3lzLkJST1dTRVJfVFlQRV9RUV9QTEFZID0gXCJxcXBsYXlcIjtcbiAgLyoqXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfQU5EUk9JRFxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgXCJhbmRyb2lkYnJvd3NlclwiXG4gICAqL1xuICBzeXMuQlJPV1NFUl9UWVBFX0FORFJPSUQgPSBcImFuZHJvaWRicm93c2VyXCI7XG4gIC8qKlxuICAgKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX0lFXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCBcImllXCJcbiAgICovXG4gIHN5cy5CUk9XU0VSX1RZUEVfSUUgPSBcImllXCI7XG4gIC8qKlxuICAgKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX0VER0VcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IFwiZWRnZVwiXG4gICAqL1xuICBzeXMuQlJPV1NFUl9UWVBFX0VER0UgPSBcImVkZ2VcIjtcbiAgLyoqXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfUVFcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IFwicXFicm93c2VyXCJcbiAgICovXG4gIHN5cy5CUk9XU0VSX1RZUEVfUVEgPSBcInFxYnJvd3NlclwiO1xuICAvKipcbiAgICpcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9NT0JJTEVfUVFcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IFwibXFxYnJvd3NlclwiXG4gICAqL1xuICBzeXMuQlJPV1NFUl9UWVBFX01PQklMRV9RUSA9IFwibXFxYnJvd3NlclwiO1xuICAvKipcbiAgICpcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9VQ1xuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgXCJ1Y2Jyb3dzZXJcIlxuICAgKi9cbiAgc3lzLkJST1dTRVJfVFlQRV9VQyA9IFwidWNicm93c2VyXCI7XG4gIC8qKlxuICAgKiB1YyB0aGlyZCBwYXJ0eSBpbnRlZ3JhdGlvbi5cbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9VQ0JTXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCBcInVjYnNcIlxuICAgKi9cbiAgc3lzLkJST1dTRVJfVFlQRV9VQ0JTID0gXCJ1Y2JzXCI7XG4gIC8qKlxuICAgKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFXzM2MFxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgXCIzNjBicm93c2VyXCJcbiAgICovXG4gIHN5cy5CUk9XU0VSX1RZUEVfMzYwID0gXCIzNjBicm93c2VyXCI7XG4gIC8qKlxuICAgKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX0JBSURVX0FQUFxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgXCJiYWlkdWJveGFwcFwiXG4gICAqL1xuICBzeXMuQlJPV1NFUl9UWVBFX0JBSURVX0FQUCA9IFwiYmFpZHVib3hhcHBcIjtcbiAgLyoqXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfQkFJRFVcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IFwiYmFpZHVicm93c2VyXCJcbiAgICovXG4gIHN5cy5CUk9XU0VSX1RZUEVfQkFJRFUgPSBcImJhaWR1YnJvd3NlclwiO1xuICAvKipcbiAgICpcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9NQVhUSE9OXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCBcIm1heHRob25cIlxuICAgKi9cbiAgc3lzLkJST1dTRVJfVFlQRV9NQVhUSE9OID0gXCJtYXh0aG9uXCI7XG4gIC8qKlxuICAgKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX09QRVJBXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCBcIm9wZXJhXCJcbiAgICovXG4gIHN5cy5CUk9XU0VSX1RZUEVfT1BFUkEgPSBcIm9wZXJhXCI7XG4gIC8qKlxuICAgKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX09VUEVOR1xuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgXCJvdXBlbmdcIlxuICAgKi9cbiAgc3lzLkJST1dTRVJfVFlQRV9PVVBFTkcgPSBcIm91cGVuZ1wiO1xuICAvKipcbiAgICpcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9NSVVJXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCBcIm1pdWlicm93c2VyXCJcbiAgICovXG4gIHN5cy5CUk9XU0VSX1RZUEVfTUlVSSA9IFwibWl1aWJyb3dzZXJcIjtcbiAgLyoqXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfRklSRUZPWFxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgXCJmaXJlZm94XCJcbiAgICovXG4gIHN5cy5CUk9XU0VSX1RZUEVfRklSRUZPWCA9IFwiZmlyZWZveFwiO1xuICAvKipcbiAgICpcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9TQUZBUklcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IFwic2FmYXJpXCJcbiAgICovXG4gIHN5cy5CUk9XU0VSX1RZUEVfU0FGQVJJID0gXCJzYWZhcmlcIjtcbiAgLyoqXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBCUk9XU0VSX1RZUEVfQ0hST01FXG4gICAqIEByZWFkT25seVxuICAgKiBAZGVmYXVsdCBcImNocm9tZVwiXG4gICAqL1xuICBzeXMuQlJPV1NFUl9UWVBFX0NIUk9NRSA9IFwiY2hyb21lXCI7XG4gIC8qKlxuICAgKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX0xJRUJBT1xuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgXCJsaWViYW9cIlxuICAgKi9cbiAgc3lzLkJST1dTRVJfVFlQRV9MSUVCQU8gPSBcImxpZWJhb1wiO1xuICAvKipcbiAgICpcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9RWk9ORVxuICAgKiBAcmVhZE9ubHlcbiAgICogQGRlZmF1bHQgXCJxem9uZVwiXG4gICAqL1xuICBzeXMuQlJPV1NFUl9UWVBFX1FaT05FID0gXCJxem9uZVwiO1xuICAvKipcbiAgICpcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IEJST1dTRVJfVFlQRV9TT1VHT1VcbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IFwic29nb3VcIlxuICAgKi9cbiAgc3lzLkJST1dTRVJfVFlQRV9TT1VHT1UgPSBcInNvZ291XCI7XG4gIC8qKlxuICAgKlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gQlJPV1NFUl9UWVBFX1VOS05PV05cbiAgICogQHJlYWRPbmx5XG4gICAqIEBkZWZhdWx0IFwidW5rbm93blwiXG4gICAqL1xuICBzeXMuQlJPV1NFUl9UWVBFX1VOS05PV04gPSBcInVua25vd25cIjtcblxuICAvKipcbiAgICogSXMgbmF0aXZlID8gVGhpcyBpcyBzZXQgdG8gYmUgdHJ1ZSBpbiBqc2IgYXV0by5cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc05hdGl2ZVxuICAgKi9cbiAgc3lzLmlzTmF0aXZlID0gQ0NfSlNCIHx8IENDX1JVTlRJTUU7XG5cbiAgLyoqXG4gICAqIElzIHdlYiBicm93c2VyID9cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc0Jyb3dzZXJcbiAgICovXG4gIHN5cy5pc0Jyb3dzZXIgPSAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yod2luZG93KSkgPT09ICdvYmplY3QnICYmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGRvY3VtZW50KSkgPT09ICdvYmplY3QnICYmICFDQ19XRUNIQVRHQU1FICYmICFDQ19RUVBMQVkgJiYgIUNDX0pTQiAmJiAhQ0NfUlVOVElNRSAmJiAhaXNCYWlkdUdhbWU7XG5cbiAgLyoqXG4gICAqIElzIHdlYmdsIGV4dGVuc2lvbiBzdXBwb3J0P1xuICAgKiBAbWV0aG9kIGdsRXh0ZW5zaW9uXG4gICAqIEBwYXJhbSBuYW1lXG4gICAqL1xuICBzeXMuZ2xFeHRlbnNpb24gPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmICgoQ0NfV0VDSEFUR0FNRSB8fCBpc0JhaWR1R2FtZSkgJiYgbmFtZSA9PT0gJ09FU190ZXh0dXJlX2Zsb2F0Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gISFjYy5yZW5kZXJlci5kZXZpY2UuZXh0KG5hbWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgbWF4IGpvaW50IG1hdHJpeCBzaXplIGZvciBza2lubmVkIG1lc2ggcmVuZGVyZXIuXG4gICAqIEBtZXRob2QgZ2V0TWF4Sm9pbnRNYXRyaXhTaXplXG4gICAqL1xuICBzeXMuZ2V0TWF4Sm9pbnRNYXRyaXhTaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc3lzLl9tYXhKb2ludE1hdHJpeFNpemUpIHtcbiAgICAgIHZhciBKT0lOVF9NQVRSSUNFU19TSVpFID0gNTA7XG4gICAgICB2YXIgTEVGVF9VTklGT1JNX1NJWkUgPSAxMDtcblxuICAgICAgdmFyIGdsID0gY2MuZ2FtZS5fcmVuZGVyQ29udGV4dDtcbiAgICAgIHZhciBtYXhVbmlmb3JtcyA9IE1hdGguZmxvb3IoZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTKSAvIDQpIC0gTEVGVF9VTklGT1JNX1NJWkU7XG4gICAgICBpZiAobWF4VW5pZm9ybXMgPCBKT0lOVF9NQVRSSUNFU19TSVpFKSB7XG4gICAgICAgIHN5cy5fbWF4Sm9pbnRNYXRyaXhTaXplID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN5cy5fbWF4Sm9pbnRNYXRyaXhTaXplID0gSk9JTlRfTUFUUklDRVNfU0laRTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN5cy5fbWF4Sm9pbnRNYXRyaXhTaXplO1xuICB9O1xuXG4gIGlmIChfZ2xvYmFsLl9fcGxhdGZvcm0gJiYgX2dsb2JhbC5fX3BsYXRmb3JtLmdldFN5c3RlbUluZm8pIHtcbiAgICB2YXIgX2VudiA9IF9nbG9iYWwuX19wbGF0Zm9ybS5nZXRTeXN0ZW1JbmZvKCk7XG4gICAgc3lzLmlzTmF0aXZlID0gX2Vudi5pc05hdGl2ZTtcbiAgICBzeXMuaXNCcm93c2VyID0gX2Vudi5pc0Jyb3dzZXI7XG4gICAgc3lzLnBsYXRmb3JtID0gX2Vudi5wbGF0Zm9ybTtcbiAgICBzeXMuYnJvd3NlclR5cGUgPSBfZW52LmJyb3dzZXJUeXBlO1xuICAgIHN5cy5pc01vYmlsZSA9IF9lbnYuaXNNb2JpbGU7XG4gICAgc3lzLmxhbmd1YWdlID0gX2Vudi5sYW5ndWFnZTtcbiAgICBzeXMubGFuZ3VhZ2VDb2RlID0gX2Vudi5sYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xuICAgIHN5cy5vcyA9IF9lbnYub3M7XG4gICAgc3lzLm9zVmVyc2lvbiA9IF9lbnYub3NWZXJzaW9uO1xuICAgIHN5cy5vc01haW5WZXJzaW9uID0gX2Vudi5vc01haW5WZXJzaW9uO1xuICAgIHN5cy5icm93c2VyVmVyc2lvbiA9IF9lbnYuYnJvd3NlclZlcnNpb247XG4gICAgc3lzLndpbmRvd1BpeGVsUmVzb2x1dGlvbiA9IF9lbnYud2luZG93UGl4ZWxSZXNvbHV0aW9uO1xuICAgIHN5cy5sb2NhbFN0b3JhZ2UgPSBfZW52LmxvY2FsU3RvcmFnZTtcbiAgICBzeXMuY2FwYWJpbGl0aWVzID0gX2Vudi5jYXBhYmlsaXRpZXM7XG4gICAgc3lzLl9fYXVkaW9TdXBwb3J0ID0gX2Vudi5hdWRpb1N1cHBvcnQ7XG5cbiAgICBfZ2xvYmFsLl9fcGxhdGZvcm0gPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoQ0NfRURJVE9SICYmIEVkaXRvci5pc01haW5Qcm9jZXNzKSB7XG4gICAgc3lzLmlzTW9iaWxlID0gZmFsc2U7XG4gICAgc3lzLnBsYXRmb3JtID0gc3lzLkVESVRPUl9DT1JFO1xuICAgIHN5cy5sYW5ndWFnZSA9IHN5cy5MQU5HVUFHRV9VTktOT1dOO1xuICAgIHN5cy5sYW5ndWFnZUNvZGUgPSB1bmRlZmluZWQ7XG4gICAgc3lzLm9zID0ge1xuICAgICAgZGFyd2luOiBzeXMuT1NfT1NYLFxuICAgICAgd2luMzI6IHN5cy5PU19XSU5ET1dTLFxuICAgICAgbGludXg6IHN5cy5PU19MSU5VWFxuICAgIH1bcHJvY2Vzcy5wbGF0Zm9ybV0gfHwgc3lzLk9TX1VOS05PV047XG4gICAgc3lzLmJyb3dzZXJUeXBlID0gbnVsbDtcbiAgICBzeXMuYnJvd3NlclZlcnNpb24gPSBudWxsO1xuICAgIHN5cy53aW5kb3dQaXhlbFJlc29sdXRpb24gPSB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgc3lzLl9fYXVkaW9TdXBwb3J0ID0ge307XG4gIH0gZWxzZSBpZiAoQ0NfSlNCIHx8IENDX1JVTlRJTUUpIHtcbiAgICB2YXIgcGxhdGZvcm0gPSB2b2lkIDA7XG4gICAgaWYgKGlzVml2b0dhbWUpIHtcbiAgICAgIHBsYXRmb3JtID0gc3lzLlZJVk9fR0FNRTtcbiAgICB9IGVsc2UgaWYgKGlzT3Bwb0dhbWUpIHtcbiAgICAgIHBsYXRmb3JtID0gc3lzLk9QUE9fR0FNRTtcbiAgICB9IGVsc2UgaWYgKGlzSHVhd2VpR2FtZSkge1xuICAgICAgcGxhdGZvcm0gPSBzeXMuSFVBV0VJX0dBTUU7XG4gICAgfSBlbHNlIGlmIChpc0pLV0dhbWUpIHtcbiAgICAgIHBsYXRmb3JtID0gc3lzLkpLV19HQU1FO1xuICAgIH0gZWxzZSB7XG4gICAgICBwbGF0Zm9ybSA9IF9fZ2V0UGxhdGZvcm0oKTtcbiAgICB9XG4gICAgc3lzLnBsYXRmb3JtID0gcGxhdGZvcm07XG4gICAgc3lzLmlzTW9iaWxlID0gcGxhdGZvcm0gPT09IHN5cy5BTkRST0lEIHx8IHBsYXRmb3JtID09PSBzeXMuSVBBRCB8fCBwbGF0Zm9ybSA9PT0gc3lzLklQSE9ORSB8fCBwbGF0Zm9ybSA9PT0gc3lzLldQOCB8fCBwbGF0Zm9ybSA9PT0gc3lzLlRJWkVOIHx8IHBsYXRmb3JtID09PSBzeXMuQkxBQ0tCRVJSWSB8fCBwbGF0Zm9ybSA9PT0gc3lzLlhJQU9NSV9HQU1FIHx8IGlzVml2b0dhbWUgfHwgaXNPcHBvR2FtZSB8fCBpc0h1YXdlaUdhbWUgfHwgaXNKS1dHYW1lO1xuXG4gICAgc3lzLm9zID0gX19nZXRPUygpO1xuICAgIHN5cy5sYW5ndWFnZSA9IF9fZ2V0Q3VycmVudExhbmd1YWdlKCk7XG4gICAgdmFyIGxhbmd1YWdlQ29kZTtcbiAgICBpZiAoQ0NfSlNCKSB7XG4gICAgICBsYW5ndWFnZUNvZGUgPSBfX2dldEN1cnJlbnRMYW5ndWFnZUNvZGUoKTtcbiAgICB9XG4gICAgc3lzLmxhbmd1YWdlQ29kZSA9IGxhbmd1YWdlQ29kZSA/IGxhbmd1YWdlQ29kZS50b0xvd2VyQ2FzZSgpIDogdW5kZWZpbmVkO1xuICAgIHN5cy5vc1ZlcnNpb24gPSBfX2dldE9TVmVyc2lvbigpO1xuICAgIHN5cy5vc01haW5WZXJzaW9uID0gcGFyc2VJbnQoc3lzLm9zVmVyc2lvbik7XG4gICAgc3lzLmJyb3dzZXJUeXBlID0gbnVsbDtcbiAgICBzeXMuYnJvd3NlclZlcnNpb24gPSBudWxsO1xuXG4gICAgdmFyIHcgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICB2YXIgaCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB2YXIgcmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICAgIHN5cy53aW5kb3dQaXhlbFJlc29sdXRpb24gPSB7XG4gICAgICB3aWR0aDogcmF0aW8gKiB3LFxuICAgICAgaGVpZ2h0OiByYXRpbyAqIGhcbiAgICB9O1xuXG4gICAgc3lzLmxvY2FsU3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG5cbiAgICB2YXIgY2FwYWJpbGl0aWVzO1xuICAgIGNhcGFiaWxpdGllcyA9IHN5cy5jYXBhYmlsaXRpZXMgPSB7XG4gICAgICBcImNhbnZhc1wiOiBmYWxzZSxcbiAgICAgIFwib3BlbmdsXCI6IHRydWUsXG4gICAgICBcIndlYnBcIjogdHJ1ZVxuICAgIH07XG5cbiAgICBpZiAoc3lzLmlzTW9iaWxlKSB7XG4gICAgICBjYXBhYmlsaXRpZXNbXCJhY2NlbGVyb21ldGVyXCJdID0gdHJ1ZTtcbiAgICAgIGNhcGFiaWxpdGllc1tcInRvdWNoZXNcIl0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBkZXNrdG9wXG4gICAgICBjYXBhYmlsaXRpZXNbXCJrZXlib2FyZFwiXSA9IHRydWU7XG4gICAgICBjYXBhYmlsaXRpZXNbXCJtb3VzZVwiXSA9IHRydWU7XG4gICAgICBjYXBhYmlsaXRpZXNbXCJ0b3VjaGVzXCJdID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc3lzLl9fYXVkaW9TdXBwb3J0ID0ge1xuICAgICAgT05MWV9PTkU6IGZhbHNlLFxuICAgICAgV0VCX0FVRElPOiBmYWxzZSxcbiAgICAgIERFTEFZX0NSRUFURV9DVFg6IGZhbHNlLFxuICAgICAgZm9ybWF0OiBbJy5tcDMnXVxuICAgIH07XG4gIH0gZWxzZSBpZiAoQ0NfV0VDSEFUR0FNRSkge1xuICAgIHZhciBlbnYgPSB3eC5nZXRTeXN0ZW1JbmZvU3luYygpO1xuICAgIHN5cy5pc01vYmlsZSA9IHRydWU7XG4gICAgc3lzLnBsYXRmb3JtID0gc3lzLldFQ0hBVF9HQU1FO1xuICAgIHN5cy5sYW5ndWFnZSA9IGVudi5sYW5ndWFnZS5zdWJzdHIoMCwgMik7XG4gICAgc3lzLmxhbmd1YWdlQ29kZSA9IGVudi5sYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBzeXN0ZW0gPSBlbnYuc3lzdGVtLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGVudi5wbGF0Zm9ybSA9PT0gXCJhbmRyb2lkXCIpIHtcbiAgICAgIHN5cy5vcyA9IHN5cy5PU19BTkRST0lEO1xuICAgIH0gZWxzZSBpZiAoZW52LnBsYXRmb3JtID09PSBcImlvc1wiKSB7XG4gICAgICBzeXMub3MgPSBzeXMuT1NfSU9TO1xuICAgIH0gZWxzZSBpZiAoZW52LnBsYXRmb3JtID09PSAnZGV2dG9vbHMnKSB7XG4gICAgICBzeXMuaXNNb2JpbGUgPSBmYWxzZTtcbiAgICAgIGlmIChzeXN0ZW0uaW5kZXhPZignYW5kcm9pZCcpID4gLTEpIHtcbiAgICAgICAgc3lzLm9zID0gc3lzLk9TX0FORFJPSUQ7XG4gICAgICB9IGVsc2UgaWYgKHN5c3RlbS5pbmRleE9mKCdpb3MnKSA+IC0xKSB7XG4gICAgICAgIHN5cy5vcyA9IHN5cy5PU19JT1M7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEFkYXB0YXRpb24gdG8gQW5kcm9pZCBQXG4gICAgaWYgKHN5c3RlbSA9PT0gJ2FuZHJvaWQgcCcpIHtcbiAgICAgIHN5c3RlbSA9ICdhbmRyb2lkIHAgOS4wJztcbiAgICB9XG5cbiAgICB2YXIgdmVyc2lvbiA9IC9bXFxkXFwuXSsvLmV4ZWMoc3lzdGVtKTtcbiAgICBzeXMub3NWZXJzaW9uID0gdmVyc2lvbiA/IHZlcnNpb25bMF0gOiBzeXN0ZW07XG4gICAgc3lzLm9zTWFpblZlcnNpb24gPSBwYXJzZUludChzeXMub3NWZXJzaW9uKTtcbiAgICAvLyB3ZWNoYWdhbWUgc3ViZG9tYWluXG4gICAgaWYgKENDX1dFQ0hBVEdBTUVTVUIpIHtcbiAgICAgIHN5cy5icm93c2VyVHlwZSA9IHN5cy5CUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUVfU1VCO1xuICAgIH0gZWxzZSB7XG4gICAgICBzeXMuYnJvd3NlclR5cGUgPSBzeXMuQlJPV1NFUl9UWVBFX1dFQ0hBVF9HQU1FO1xuICAgIH1cbiAgICBzeXMuYnJvd3NlclZlcnNpb24gPSBlbnYudmVyc2lvbjtcblxuICAgIHZhciB3ID0gZW52LndpbmRvd1dpZHRoO1xuICAgIHZhciBoID0gZW52LndpbmRvd0hlaWdodDtcbiAgICB2YXIgcmF0aW8gPSBlbnYucGl4ZWxSYXRpbyB8fCAxO1xuICAgIHN5cy53aW5kb3dQaXhlbFJlc29sdXRpb24gPSB7XG4gICAgICB3aWR0aDogcmF0aW8gKiB3LFxuICAgICAgaGVpZ2h0OiByYXRpbyAqIGhcbiAgICB9O1xuXG4gICAgc3lzLmxvY2FsU3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG5cbiAgICB2YXIgX3N1cHBvcnRXZWJHTCA9IF9zdXBwb3J0V2VicCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICB2YXIgX2NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICBfc3VwcG9ydFdlYkdMID0gX2NhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIik7XG4gICAgICBfc3VwcG9ydFdlYnAgPSBfY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2Uvd2VicCcpLnN0YXJ0c1dpdGgoJ2RhdGE6aW1hZ2Uvd2VicCcpO1xuICAgIH0gY2F0Y2ggKGVycikge31cblxuICAgIHN5cy5jYXBhYmlsaXRpZXMgPSB7XG4gICAgICBcImNhbnZhc1wiOiB0cnVlLFxuICAgICAgXCJvcGVuZ2xcIjogISFfc3VwcG9ydFdlYkdMLFxuICAgICAgXCJ3ZWJwXCI6IF9zdXBwb3J0V2VicFxuICAgIH07XG4gICAgc3lzLl9fYXVkaW9TdXBwb3J0ID0ge1xuICAgICAgT05MWV9PTkU6IGZhbHNlLFxuICAgICAgV0VCX0FVRElPOiBmYWxzZSxcbiAgICAgIERFTEFZX0NSRUFURV9DVFg6IGZhbHNlLFxuICAgICAgZm9ybWF0OiBbJy5tcDMnXVxuICAgIH07XG4gIH0gZWxzZSBpZiAoQ0NfUVFQTEFZKSB7XG4gICAgdmFyIGVudiA9IHdpbmRvd1tcIkJLXCJdW1wiRGlyZWN0b3JcIl1bXCJxdWVyeURldmljZUluZm9cIl0oKTtcbiAgICBzeXMuaXNNb2JpbGUgPSB0cnVlO1xuICAgIHN5cy5wbGF0Zm9ybSA9IHN5cy5RUV9QTEFZO1xuICAgIHN5cy5sYW5ndWFnZSA9IHN5cy5MQU5HVUFHRV9VTktOT1dOO1xuICAgIHN5cy5sYW5ndWFnZUNvZGUgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGVudi5wbGF0Zm9ybSA9PT0gXCJhbmRyb2lkXCIpIHtcbiAgICAgIHN5cy5vcyA9IHN5cy5PU19BTkRST0lEO1xuICAgIH0gZWxzZSBpZiAoZW52LnBsYXRmb3JtID09PSBcImlvc1wiKSB7XG4gICAgICBzeXMub3MgPSBzeXMuT1NfSU9TO1xuICAgIH0gZWxzZSB7XG4gICAgICBzeXMub3MgPSBzeXMuT1NfVU5LTk9XTjtcbiAgICB9XG4gICAgc3lzLm9zVmVyc2lvbiA9IGVudi52ZXJzaW9uO1xuICAgIHN5cy5vc01haW5WZXJzaW9uID0gcGFyc2VJbnQoc3lzLm9zVmVyc2lvbi5zcGxpdCgnLicpWzBdKTtcbiAgICBzeXMuYnJvd3NlclR5cGUgPSBzeXMuQlJPV1NFUl9UWVBFX1FRX1BMQVk7XG4gICAgc3lzLmJyb3dzZXJWZXJzaW9uID0gMDtcblxuICAgIHZhciB3ID0gZW52LnNjcmVlbldpZHRoO1xuICAgIHZhciBoID0gZW52LnNjcmVlbkhlaWdodDtcbiAgICB2YXIgcmF0aW8gPSBlbnYucGl4ZWxSYXRpbyB8fCAxO1xuXG4gICAgc3lzLndpbmRvd1BpeGVsUmVzb2x1dGlvbiA9IHtcbiAgICAgIHdpZHRoOiByYXRpbyAqIHcsXG4gICAgICBoZWlnaHQ6IHJhdGlvICogaFxuICAgIH07XG5cbiAgICBzeXMubG9jYWxTdG9yYWdlID0gd2luZG93LmxvY2FsU3RvcmFnZTtcblxuICAgIHN5cy5jYXBhYmlsaXRpZXMgPSB7XG4gICAgICBcImNhbnZhc1wiOiBmYWxzZSxcbiAgICAgIFwib3BlbmdsXCI6IHRydWUsXG4gICAgICBcIndlYnBcIjogZmFsc2VcbiAgICB9O1xuICAgIHN5cy5fX2F1ZGlvU3VwcG9ydCA9IHtcbiAgICAgIE9OTFlfT05FOiBmYWxzZSxcbiAgICAgIFdFQl9BVURJTzogZmFsc2UsXG4gICAgICBERUxBWV9DUkVBVEVfQ1RYOiBmYWxzZSxcbiAgICAgIGZvcm1hdDogWycubXAzJ11cbiAgICB9O1xuICB9IGVsc2UgaWYgKGlzQmFpZHVHYW1lKSB7XG4gICAgdmFyIF9lbnYyID0gX19kZXZpY2UuZ2V0U3lzdGVtSW5mbygpO1xuICAgIHN5cy5wbGF0Zm9ybSA9IF9lbnYyLnBsYXRmb3JtO1xuICAgIHN5cy5icm93c2VyVHlwZSA9IF9lbnYyLmJyb3dzZXJUeXBlO1xuICAgIHN5cy5pc01vYmlsZSA9IF9lbnYyLmlzTW9iaWxlO1xuICAgIHN5cy5sYW5ndWFnZSA9IF9lbnYyLmxhbmd1YWdlO1xuICAgIHN5cy5sYW5ndWFnZUNvZGUgPSBfZW52Mi5sYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xuICAgIHN5cy5vcyA9IF9lbnYyLm9zO1xuICAgIHN5cy5vc1ZlcnNpb24gPSBfZW52Mi5vc1ZlcnNpb247XG4gICAgc3lzLm9zTWFpblZlcnNpb24gPSBfZW52Mi5vc01haW5WZXJzaW9uO1xuICAgIHN5cy5icm93c2VyVmVyc2lvbiA9IF9lbnYyLmJyb3dzZXJWZXJzaW9uO1xuICAgIHN5cy53aW5kb3dQaXhlbFJlc29sdXRpb24gPSBfZW52Mi53aW5kb3dQaXhlbFJlc29sdXRpb247XG4gICAgc3lzLmxvY2FsU3RvcmFnZSA9IF9lbnYyLmxvY2FsU3RvcmFnZTtcbiAgICBzeXMuY2FwYWJpbGl0aWVzID0gX2VudjIuY2FwYWJpbGl0aWVzO1xuICAgIHN5cy5fX2F1ZGlvU3VwcG9ydCA9IF9lbnYyLmF1ZGlvU3VwcG9ydDtcbiAgfSBlbHNlIHtcbiAgICAvLyBicm93c2VyIG9yIHJ1bnRpbWVcbiAgICB2YXIgd2luID0gd2luZG93LFxuICAgICAgICBuYXYgPSB3aW4ubmF2aWdhdG9yLFxuICAgICAgICBkb2MgPSBkb2N1bWVudCxcbiAgICAgICAgZG9jRWxlID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgdWEgPSBuYXYudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICBzeXMuaXNNb2JpbGUgPSBmYWxzZTtcbiAgICAgIHN5cy5wbGF0Zm9ybSA9IHN5cy5FRElUT1JfUEFHRTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBJbmRpY2F0ZSB3aGV0aGVyIHN5c3RlbSBpcyBtb2JpbGUgc3lzdGVtXG4gICAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzTW9iaWxlXG4gICAgICAgKi9cbiAgICAgIHN5cy5pc01vYmlsZSA9IC9tb2JpbGV8YW5kcm9pZHxpcGhvbmV8aXBhZC8udGVzdCh1YSk7XG5cbiAgICAgIC8qKlxuICAgICAgICogSW5kaWNhdGUgdGhlIHJ1bm5pbmcgcGxhdGZvcm1cbiAgICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBwbGF0Zm9ybVxuICAgICAgICovXG4gICAgICBpZiAodHlwZW9mIEZiUGxheWFibGVBZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBzeXMucGxhdGZvcm0gPSBzeXMuRkJfUExBWUFCTEVfQURTO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3lzLnBsYXRmb3JtID0gc3lzLmlzTW9iaWxlID8gc3lzLk1PQklMRV9CUk9XU0VSIDogc3lzLkRFU0tUT1BfQlJPV1NFUjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY3Vyckxhbmd1YWdlID0gbmF2Lmxhbmd1YWdlO1xuICAgIGN1cnJMYW5ndWFnZSA9IGN1cnJMYW5ndWFnZSA/IGN1cnJMYW5ndWFnZSA6IG5hdi5icm93c2VyTGFuZ3VhZ2U7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgY3VycmVudCBsYW5ndWFnZSBpc28gNjM5LTEgY29kZS5cbiAgICAgKiBFeGFtcGxlcyBvZiB2YWxpZCBsYW5ndWFnZSBjb2RlcyBpbmNsdWRlIFwiemgtdHdcIiwgXCJlblwiLCBcImVuLXVzXCIsIFwiZnJcIiwgXCJmci1mclwiLCBcImVzLWVzXCIsIGV0Yy5cbiAgICAgKiBUaGUgYWN0dWFsIHZhbHVlIHRvdGFsbHkgZGVwZW5kcyBvbiByZXN1bHRzIHByb3ZpZGVkIGJ5IGRlc3RpbmF0aW9uIHBsYXRmb3JtLlxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBsYW5ndWFnZUNvZGVcbiAgICAgKi9cbiAgICBzeXMubGFuZ3VhZ2VDb2RlID0gY3Vyckxhbmd1YWdlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBjdXJyTGFuZ3VhZ2UgPSBjdXJyTGFuZ3VhZ2UgPyBjdXJyTGFuZ3VhZ2Uuc3BsaXQoXCItXCIpWzBdIDogc3lzLkxBTkdVQUdFX0VOR0xJU0g7XG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZSB0aGUgY3VycmVudCBsYW5ndWFnZSBvZiB0aGUgcnVubmluZyBzeXN0ZW1cbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gbGFuZ3VhZ2VcbiAgICAgKi9cbiAgICBzeXMubGFuZ3VhZ2UgPSBjdXJyTGFuZ3VhZ2U7XG5cbiAgICAvLyBHZXQgdGhlIG9zIG9mIHN5c3RlbVxuICAgIHZhciBpc0FuZHJvaWQgPSBmYWxzZSxcbiAgICAgICAgaU9TID0gZmFsc2UsXG4gICAgICAgIG9zVmVyc2lvbiA9ICcnLFxuICAgICAgICBvc01haW5WZXJzaW9uID0gMDtcbiAgICB2YXIgdWFSZXN1bHQgPSAvYW5kcm9pZCAoXFxkKyg/OlxcLlxcZCspKikvaS5leGVjKHVhKSB8fCAvYW5kcm9pZCAoXFxkKyg/OlxcLlxcZCspKikvaS5leGVjKG5hdi5wbGF0Zm9ybSk7XG4gICAgaWYgKHVhUmVzdWx0KSB7XG4gICAgICBpc0FuZHJvaWQgPSB0cnVlO1xuICAgICAgb3NWZXJzaW9uID0gdWFSZXN1bHRbMV0gfHwgJyc7XG4gICAgICBvc01haW5WZXJzaW9uID0gcGFyc2VJbnQob3NWZXJzaW9uKSB8fCAwO1xuICAgIH1cbiAgICB1YVJlc3VsdCA9IC8oaVBhZHxpUGhvbmV8aVBvZCkuKk9TICgoXFxkK18/KXsyLDN9KS9pLmV4ZWModWEpO1xuICAgIGlmICh1YVJlc3VsdCkge1xuICAgICAgaU9TID0gdHJ1ZTtcbiAgICAgIG9zVmVyc2lvbiA9IHVhUmVzdWx0WzJdIHx8ICcnO1xuICAgICAgb3NNYWluVmVyc2lvbiA9IHBhcnNlSW50KG9zVmVyc2lvbikgfHwgMDtcbiAgICB9IGVsc2UgaWYgKC8oaVBob25lfGlQYWR8aVBvZCkvLmV4ZWMobmF2LnBsYXRmb3JtKSkge1xuICAgICAgaU9TID0gdHJ1ZTtcbiAgICAgIG9zVmVyc2lvbiA9ICcnO1xuICAgICAgb3NNYWluVmVyc2lvbiA9IDA7XG4gICAgfVxuXG4gICAgdmFyIG9zTmFtZSA9IHN5cy5PU19VTktOT1dOO1xuICAgIGlmIChuYXYuYXBwVmVyc2lvbi5pbmRleE9mKFwiV2luXCIpICE9PSAtMSkgb3NOYW1lID0gc3lzLk9TX1dJTkRPV1M7ZWxzZSBpZiAoaU9TKSBvc05hbWUgPSBzeXMuT1NfSU9TO2Vsc2UgaWYgKG5hdi5hcHBWZXJzaW9uLmluZGV4T2YoXCJNYWNcIikgIT09IC0xKSBvc05hbWUgPSBzeXMuT1NfT1NYO2Vsc2UgaWYgKG5hdi5hcHBWZXJzaW9uLmluZGV4T2YoXCJYMTFcIikgIT09IC0xICYmIG5hdi5hcHBWZXJzaW9uLmluZGV4T2YoXCJMaW51eFwiKSA9PT0gLTEpIG9zTmFtZSA9IHN5cy5PU19VTklYO2Vsc2UgaWYgKGlzQW5kcm9pZCkgb3NOYW1lID0gc3lzLk9TX0FORFJPSUQ7ZWxzZSBpZiAobmF2LmFwcFZlcnNpb24uaW5kZXhPZihcIkxpbnV4XCIpICE9PSAtMSB8fCB1YS5pbmRleE9mKFwidWJ1bnR1XCIpICE9PSAtMSkgb3NOYW1lID0gc3lzLk9TX0xJTlVYO1xuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGUgdGhlIHJ1bm5pbmcgb3MgbmFtZVxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBvc1xuICAgICAqL1xuICAgIHN5cy5vcyA9IG9zTmFtZTtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZSB0aGUgcnVubmluZyBvcyB2ZXJzaW9uXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IG9zVmVyc2lvblxuICAgICAqL1xuICAgIHN5cy5vc1ZlcnNpb24gPSBvc1ZlcnNpb247XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGUgdGhlIHJ1bm5pbmcgb3MgbWFpbiB2ZXJzaW9uXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IG9zTWFpblZlcnNpb25cbiAgICAgKi9cbiAgICBzeXMub3NNYWluVmVyc2lvbiA9IG9zTWFpblZlcnNpb247XG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZSB0aGUgcnVubmluZyBicm93c2VyIHR5cGVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gYnJvd3NlclR5cGVcbiAgICAgKi9cbiAgICBzeXMuYnJvd3NlclR5cGUgPSBzeXMuQlJPV1NFUl9UWVBFX1VOS05PV047XG4gICAgLyogRGV0ZXJtaW5lIHRoZSBicm93c2VyIHR5cGUgKi9cbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHR5cGVSZWcxID0gL21xcWJyb3dzZXJ8bWljcm9tZXNzZW5nZXJ8cXF8c29nb3V8cXpvbmV8bGllYmFvfG1heHRob258dWNic3wzNjAgYXBob25lfDM2MGJyb3dzZXJ8YmFpZHVib3hhcHB8YmFpZHVicm93c2VyfG1heHRob258bXhicm93c2VyfG1pdWlicm93c2VyL2k7XG4gICAgICB2YXIgdHlwZVJlZzIgPSAvcXFicm93c2VyfHVjYnJvd3Nlcnx1YnJvd3NlcnxlZGdlL2k7XG4gICAgICB2YXIgdHlwZVJlZzMgPSAvY2hyb21lfHNhZmFyaXxmaXJlZm94fHRyaWRlbnR8b3BlcmF8b3ByXFwvfG91cGVuZy9pO1xuICAgICAgdmFyIGJyb3dzZXJUeXBlcyA9IHR5cGVSZWcxLmV4ZWModWEpIHx8IHR5cGVSZWcyLmV4ZWModWEpIHx8IHR5cGVSZWczLmV4ZWModWEpO1xuXG4gICAgICB2YXIgYnJvd3NlclR5cGUgPSBicm93c2VyVHlwZXMgPyBicm93c2VyVHlwZXNbMF0udG9Mb3dlckNhc2UoKSA6IHN5cy5CUk9XU0VSX1RZUEVfVU5LTk9XTjtcbiAgICAgIGlmIChDQ19XRUNIQVRHQU1FKSBicm93c2VyVHlwZSA9IHN5cy5CUk9XU0VSX1RZUEVfV0VDSEFUX0dBTUU7ZWxzZSBpZiAoQ0NfUVFQTEFZKSBicm93c2VyVHlwZSA9IHN5cy5CUk9XU0VSX1RZUEVfUVFfUExBWTtlbHNlIGlmIChicm93c2VyVHlwZSA9PT0gXCJzYWZhcmlcIiAmJiBpc0FuZHJvaWQpIGJyb3dzZXJUeXBlID0gc3lzLkJST1dTRVJfVFlQRV9BTkRST0lEO2Vsc2UgaWYgKGJyb3dzZXJUeXBlID09PSBcInFxXCIgJiYgdWEubWF0Y2goL2FuZHJvaWQuKmFwcGxld2Via2l0L2kpKSBicm93c2VyVHlwZSA9IHN5cy5CUk9XU0VSX1RZUEVfQU5EUk9JRDtcbiAgICAgIHZhciB0eXBlTWFwID0ge1xuICAgICAgICAnbWljcm9tZXNzZW5nZXInOiBzeXMuQlJPV1NFUl9UWVBFX1dFQ0hBVCxcbiAgICAgICAgJ3RyaWRlbnQnOiBzeXMuQlJPV1NFUl9UWVBFX0lFLFxuICAgICAgICAnZWRnZSc6IHN5cy5CUk9XU0VSX1RZUEVfRURHRSxcbiAgICAgICAgJzM2MCBhcGhvbmUnOiBzeXMuQlJPV1NFUl9UWVBFXzM2MCxcbiAgICAgICAgJ214YnJvd3Nlcic6IHN5cy5CUk9XU0VSX1RZUEVfTUFYVEhPTixcbiAgICAgICAgJ29wci8nOiBzeXMuQlJPV1NFUl9UWVBFX09QRVJBLFxuICAgICAgICAndWJyb3dzZXInOiBzeXMuQlJPV1NFUl9UWVBFX1VDXG4gICAgICB9O1xuXG4gICAgICBzeXMuYnJvd3NlclR5cGUgPSB0eXBlTWFwW2Jyb3dzZXJUeXBlXSB8fCBicm93c2VyVHlwZTtcbiAgICB9KSgpO1xuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGUgdGhlIHJ1bm5pbmcgYnJvd3NlciB2ZXJzaW9uXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IGJyb3dzZXJWZXJzaW9uXG4gICAgICovXG4gICAgc3lzLmJyb3dzZXJWZXJzaW9uID0gXCJcIjtcbiAgICAvKiBEZXRlcm1pbmUgdGhlIGJyb3dzZXIgdmVyc2lvbiBudW1iZXIgKi9cbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZlcnNpb25SZWcxID0gLyhtcXFicm93c2VyfG1pY3JvbWVzc2VuZ2VyfHFxfHNvZ291fHF6b25lfGxpZWJhb3xtYXh0aG9ufHVjfHVjYnN8MzYwIGFwaG9uZXwzNjB8YmFpZHVib3hhcHB8YmFpZHV8bWF4dGhvbnxteGJyb3dzZXJ8bWl1aSg/Oi5oeWJyaWQpPykobW9iaWxlKT8oYnJvd3Nlcik/XFwvPyhbXFxkLl0rKS9pO1xuICAgICAgdmFyIHZlcnNpb25SZWcyID0gLyhxcWJyb3dzZXJ8Y2hyb21lfHNhZmFyaXxmaXJlZm94fHRyaWRlbnR8b3BlcmF8b3ByXFwvfG91cGVuZykobW9iaWxlKT8oYnJvd3Nlcik/XFwvPyhbXFxkLl0rKS9pO1xuICAgICAgdmFyIHRtcCA9IHVhLm1hdGNoKHZlcnNpb25SZWcxKTtcbiAgICAgIGlmICghdG1wKSB0bXAgPSB1YS5tYXRjaCh2ZXJzaW9uUmVnMik7XG4gICAgICBzeXMuYnJvd3NlclZlcnNpb24gPSB0bXAgPyB0bXBbNF0gOiBcIlwiO1xuICAgIH0pKCk7XG5cbiAgICB2YXIgdyA9IHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICB2YXIgaCA9IHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgIHZhciByYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZSB0aGUgcmVhbCBwaXhlbCByZXNvbHV0aW9uIG9mIHRoZSB3aG9sZSBnYW1lIHdpbmRvd1xuICAgICAqIEBwcm9wZXJ0eSB7U2l6ZX0gd2luZG93UGl4ZWxSZXNvbHV0aW9uXG4gICAgICovXG4gICAgc3lzLndpbmRvd1BpeGVsUmVzb2x1dGlvbiA9IHtcbiAgICAgIHdpZHRoOiByYXRpbyAqIHcsXG4gICAgICBoZWlnaHQ6IHJhdGlvICogaFxuICAgIH07XG5cbiAgICBzeXMuX2NoZWNrV2ViR0xSZW5kZXJNb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGNjLmdhbWUucmVuZGVyVHlwZSAhPT0gY2MuZ2FtZS5SRU5ERVJfVFlQRV9XRUJHTCkgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBmZWF0dXJlIHN1cHBvcnRzIFdlYkdMIHJlbmRlciBtb2RlIG9ubHkuXCIpO1xuICAgIH07XG5cbiAgICB2YXIgX3RtcENhbnZhczEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuXG4gICAgdmFyIGNyZWF0ZTNEQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZTNEQ29udGV4dChjYW52YXMsIG9wdF9hdHRyaWJzLCBvcHRfY29udGV4dFR5cGUpIHtcbiAgICAgIGlmIChvcHRfY29udGV4dFR5cGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gY2FudmFzLmdldENvbnRleHQob3B0X2NvbnRleHRUeXBlLCBvcHRfYXR0cmlicyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZTNEQ29udGV4dChjYW52YXMsIG9wdF9hdHRyaWJzLCBcIndlYmdsXCIpIHx8IGNyZWF0ZTNEQ29udGV4dChjYW52YXMsIG9wdF9hdHRyaWJzLCBcImV4cGVyaW1lbnRhbC13ZWJnbFwiKSB8fCBjcmVhdGUzRENvbnRleHQoY2FudmFzLCBvcHRfYXR0cmlicywgXCJ3ZWJraXQtM2RcIikgfHwgY3JlYXRlM0RDb250ZXh0KGNhbnZhcywgb3B0X2F0dHJpYnMsIFwibW96LXdlYmdsXCIpIHx8IG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIGNjLnN5cy5sb2NhbFN0b3JhZ2UgaXMgYSBsb2NhbCBzdG9yYWdlIGNvbXBvbmVudC5cbiAgICAgKiBAcHJvcGVydHkge09iamVjdH0gbG9jYWxTdG9yYWdlXG4gICAgICovXG4gICAgdHJ5IHtcbiAgICAgIHZhciBsb2NhbFN0b3JhZ2UgPSBzeXMubG9jYWxTdG9yYWdlID0gd2luLmxvY2FsU3RvcmFnZTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwic3RvcmFnZVwiLCBcIlwiKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwic3RvcmFnZVwiKTtcbiAgICAgIGxvY2FsU3RvcmFnZSA9IG51bGw7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdmFyIHdhcm4gPSBmdW5jdGlvbiB3YXJuKCkge1xuICAgICAgICBjYy53YXJuSUQoNTIwMCk7XG4gICAgICB9O1xuICAgICAgc3lzLmxvY2FsU3RvcmFnZSA9IHtcbiAgICAgICAgZ2V0SXRlbTogd2FybixcbiAgICAgICAgc2V0SXRlbTogd2FybixcbiAgICAgICAgcmVtb3ZlSXRlbTogd2FybixcbiAgICAgICAgY2xlYXI6IHdhcm5cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIF9zdXBwb3J0V2VicCA9IF90bXBDYW52YXMxLnRvRGF0YVVSTCgnaW1hZ2Uvd2VicCcpLnN0YXJ0c1dpdGgoJ2RhdGE6aW1hZ2Uvd2VicCcpO1xuICAgIHZhciBfc3VwcG9ydENhbnZhcyA9ICEhX3RtcENhbnZhczEuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIHZhciBfc3VwcG9ydFdlYkdMID0gZmFsc2U7XG4gICAgaWYgKENDX1RFU1QpIHtcbiAgICAgIF9zdXBwb3J0V2ViR0wgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHN5cy5icm93c2VyVHlwZSA9PT0gc3lzLkJST1dTRVJfVFlQRV9XRUNIQVRfR0FNRSkge1xuICAgICAgX3N1cHBvcnRXZWJHTCA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh3aW4uV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XG4gICAgICBfc3VwcG9ydFdlYkdMID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2FwYWJpbGl0aWVzIG9mIHRoZSBjdXJyZW50IHBsYXRmb3JtXG4gICAgICogQHByb3BlcnR5IHtPYmplY3R9IGNhcGFiaWxpdGllc1xuICAgICAqL1xuICAgIHZhciBjYXBhYmlsaXRpZXMgPSBzeXMuY2FwYWJpbGl0aWVzID0ge1xuICAgICAgXCJjYW52YXNcIjogX3N1cHBvcnRDYW52YXMsXG4gICAgICBcIm9wZW5nbFwiOiBfc3VwcG9ydFdlYkdMLFxuICAgICAgXCJ3ZWJwXCI6IF9zdXBwb3J0V2VicFxuICAgIH07XG4gICAgaWYgKGRvY0VsZVsnb250b3VjaHN0YXJ0J10gIT09IHVuZGVmaW5lZCB8fCBkb2NbJ29udG91Y2hzdGFydCddICE9PSB1bmRlZmluZWQgfHwgbmF2Lm1zUG9pbnRlckVuYWJsZWQpIGNhcGFiaWxpdGllc1tcInRvdWNoZXNcIl0gPSB0cnVlO1xuICAgIGlmIChkb2NFbGVbJ29ubW91c2V1cCddICE9PSB1bmRlZmluZWQpIGNhcGFiaWxpdGllc1tcIm1vdXNlXCJdID0gdHJ1ZTtcbiAgICBpZiAoZG9jRWxlWydvbmtleXVwJ10gIT09IHVuZGVmaW5lZCkgY2FwYWJpbGl0aWVzW1wia2V5Ym9hcmRcIl0gPSB0cnVlO1xuICAgIGlmICh3aW4uRGV2aWNlTW90aW9uRXZlbnQgfHwgd2luLkRldmljZU9yaWVudGF0aW9uRXZlbnQpIGNhcGFiaWxpdGllc1tcImFjY2VsZXJvbWV0ZXJcIl0gPSB0cnVlO1xuXG4gICAgdmFyIF9fYXVkaW9TdXBwb3J0O1xuXG4gICAgLyoqXG4gICAgICogQXVkaW8gc3VwcG9ydCBpbiB0aGUgYnJvd3NlclxuICAgICAqXG4gICAgICogTVVMVElfQ0hBTk5FTCAgICAgICAgOiBNdWx0aXBsZSBhdWRpbyB3aGlsZSBwbGF5aW5nIC0gSWYgaXQgZG9lc24ndCwgeW91IGNhbiBvbmx5IHBsYXkgYmFja2dyb3VuZCBtdXNpY1xuICAgICAqIFdFQl9BVURJTyAgICAgICAgICAgIDogU3VwcG9ydCBmb3IgV2ViQXVkaW8gLSBTdXBwb3J0IFczQyBXZWJBdWRpbyBzdGFuZGFyZHMsIGFsbCBvZiB0aGUgYXVkaW8gY2FuIGJlIHBsYXllZFxuICAgICAqIEFVVE9QTEFZICAgICAgICAgICAgIDogU3VwcG9ydHMgYXV0by1wbGF5IGF1ZGlvIC0gaWYgRG9u4oCYdCBzdXBwb3J0IGl0LCBPbiBhIHRvdWNoIGRldGVjdGluZyBiYWNrZ3JvdW5kIG11c2ljIGNhbnZhcywgYW5kIHRoZW4gcmVwbGF5XG4gICAgICogUkVQTEFZX0FGVEVSX1RPVUNIICAgOiBUaGUgZmlyc3QgbXVzaWMgd2lsbCBmYWlsLCBtdXN0IGJlIHJlcGxheSBhZnRlciB0b3VjaHN0YXJ0XG4gICAgICogVVNFX0VNUFRJRURfRVZFTlQgICAgOiBXaGV0aGVyIHRvIHVzZSB0aGUgZW1wdGllZCBldmVudCB0byByZXBsYWNlIGxvYWQgY2FsbGJhY2tcbiAgICAgKiBERUxBWV9DUkVBVEVfQ1RYICAgICA6IGRlbGF5IGNyZWF0ZWQgdGhlIGNvbnRleHQgb2JqZWN0IC0gb25seSB3ZWJBdWRpb1xuICAgICAqIE5FRURfTUFOVUFMX0xPT1AgICAgIDogbG9vcCBhdHRyaWJ1dGUgZmFpbHVyZSwgbmVlZCB0byBwZXJmb3JtIGxvb3AgbWFudWFsbHlcbiAgICAgKlxuICAgICAqIE1heSBiZSBtb2RpZmljYXRpb25zIGZvciBhIGZldyBicm93c2VyIHZlcnNpb25cbiAgICAgKi9cbiAgICAoZnVuY3Rpb24gKCkge1xuXG4gICAgICB2YXIgREVCVUcgPSBmYWxzZTtcblxuICAgICAgdmFyIHZlcnNpb24gPSBzeXMuYnJvd3NlclZlcnNpb247XG5cbiAgICAgIC8vIGNoZWNrIGlmIGJyb3dzZXIgc3VwcG9ydHMgV2ViIEF1ZGlvXG4gICAgICAvLyBjaGVjayBXZWIgQXVkaW8ncyBjb250ZXh0XG4gICAgICB2YXIgc3VwcG9ydFdlYkF1ZGlvID0gc3lzLmJyb3dzZXJUeXBlICE9PSBzeXMuQlJPV1NFUl9UWVBFX1dFQ0hBVF9HQU1FICYmICEhKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCB8fCB3aW5kb3cubW96QXVkaW9Db250ZXh0KTtcblxuICAgICAgX19hdWRpb1N1cHBvcnQgPSB7IE9OTFlfT05FOiBmYWxzZSwgV0VCX0FVRElPOiBzdXBwb3J0V2ViQXVkaW8sIERFTEFZX0NSRUFURV9DVFg6IGZhbHNlIH07XG5cbiAgICAgIGlmIChzeXMub3MgPT09IHN5cy5PU19JT1MpIHtcbiAgICAgICAgLy8gSU9TIG5vIGV2ZW50IHRoYXQgdXNlZCB0byBwYXJzZSBjb21wbGV0ZWQgY2FsbGJhY2tcbiAgICAgICAgLy8gdGhpcyB0aW1lIGlzIG5vdCBjb21wbGV0ZSwgY2FuIG5vdCBwbGF5XG4gICAgICAgIC8vXG4gICAgICAgIF9fYXVkaW9TdXBwb3J0LlVTRV9MT0FERVJfRVZFTlQgPSAnbG9hZGVkbWV0YWRhdGEnO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3lzLmJyb3dzZXJUeXBlID09PSBzeXMuQlJPV1NFUl9UWVBFX0ZJUkVGT1gpIHtcbiAgICAgICAgX19hdWRpb1N1cHBvcnQuREVMQVlfQ1JFQVRFX0NUWCA9IHRydWU7XG4gICAgICAgIF9fYXVkaW9TdXBwb3J0LlVTRV9MT0FERVJfRVZFTlQgPSAnY2FucGxheSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChzeXMub3MgPT09IHN5cy5PU19BTkRST0lEKSB7XG4gICAgICAgIGlmIChzeXMuYnJvd3NlclR5cGUgPT09IHN5cy5CUk9XU0VSX1RZUEVfVUMpIHtcbiAgICAgICAgICBfX2F1ZGlvU3VwcG9ydC5PTkVfU09VUkNFID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2MubG9nKCdicm93c2UgdHlwZTogJyArIHN5cy5icm93c2VyVHlwZSk7XG4gICAgICAgICAgY2MubG9nKCdicm93c2UgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICAgICAgICAgIGNjLmxvZygnTVVMVElfQ0hBTk5FTDogJyArIF9fYXVkaW9TdXBwb3J0Lk1VTFRJX0NIQU5ORUwpO1xuICAgICAgICAgIGNjLmxvZygnV0VCX0FVRElPOiAnICsgX19hdWRpb1N1cHBvcnQuV0VCX0FVRElPKTtcbiAgICAgICAgICBjYy5sb2coJ0FVVE9QTEFZOiAnICsgX19hdWRpb1N1cHBvcnQuQVVUT1BMQVkpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH1cbiAgICB9KSgpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChfX2F1ZGlvU3VwcG9ydC5XRUJfQVVESU8pIHtcbiAgICAgICAgX19hdWRpb1N1cHBvcnQuY29udGV4dCA9IG5ldyAod2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0IHx8IHdpbmRvdy5tb3pBdWRpb0NvbnRleHQpKCk7XG4gICAgICAgIGlmIChfX2F1ZGlvU3VwcG9ydC5ERUxBWV9DUkVBVEVfQ1RYKSB7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfX2F1ZGlvU3VwcG9ydC5jb250ZXh0ID0gbmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQgfHwgd2luZG93Lm1vekF1ZGlvQ29udGV4dCkoKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBfX2F1ZGlvU3VwcG9ydC5XRUJfQVVESU8gPSBmYWxzZTtcbiAgICAgIGNjLmxvZ0lEKDUyMDEpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXRTdXBwb3J0ID0gW107XG5cbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGF1ZGlvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICAgIGlmIChhdWRpby5jYW5QbGF5VHlwZSkge1xuICAgICAgICB2YXIgb2dnID0gYXVkaW8uY2FuUGxheVR5cGUoJ2F1ZGlvL29nZzsgY29kZWNzPVwidm9yYmlzXCInKTtcbiAgICAgICAgaWYgKG9nZykgZm9ybWF0U3VwcG9ydC5wdXNoKCcub2dnJyk7XG4gICAgICAgIHZhciBtcDMgPSBhdWRpby5jYW5QbGF5VHlwZSgnYXVkaW8vbXBlZycpO1xuICAgICAgICBpZiAobXAzKSBmb3JtYXRTdXBwb3J0LnB1c2goJy5tcDMnKTtcbiAgICAgICAgdmFyIHdhdiA9IGF1ZGlvLmNhblBsYXlUeXBlKCdhdWRpby93YXY7IGNvZGVjcz1cIjFcIicpO1xuICAgICAgICBpZiAod2F2KSBmb3JtYXRTdXBwb3J0LnB1c2goJy53YXYnKTtcbiAgICAgICAgdmFyIG1wNCA9IGF1ZGlvLmNhblBsYXlUeXBlKCdhdWRpby9tcDQnKTtcbiAgICAgICAgaWYgKG1wNCkgZm9ybWF0U3VwcG9ydC5wdXNoKCcubXA0Jyk7XG4gICAgICAgIHZhciBtNGEgPSBhdWRpby5jYW5QbGF5VHlwZSgnYXVkaW8veC1tNGEnKTtcbiAgICAgICAgaWYgKG00YSkgZm9ybWF0U3VwcG9ydC5wdXNoKCcubTRhJyk7XG4gICAgICB9XG4gICAgfSkoKTtcbiAgICBfX2F1ZGlvU3VwcG9ydC5mb3JtYXQgPSBmb3JtYXRTdXBwb3J0O1xuXG4gICAgc3lzLl9fYXVkaW9TdXBwb3J0ID0gX19hdWRpb1N1cHBvcnQ7XG4gIH1cblxuICAvKipcbiAgICogISNlblxuICAgKiBOZXR3b3JrIHR5cGUgZW51bWVyYXRpb25cbiAgICogISN6aFxuICAgKiDnvZHnu5znsbvlnovmnprkuL5cbiAgICpcbiAgICogQGVudW0gc3lzLk5ldHdvcmtUeXBlXG4gICAqL1xuICBzeXMuTmV0d29ya1R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIE5ldHdvcmsgaXMgdW5yZWFjaGFibGUuXG4gICAgICogISN6aFxuICAgICAqIOe9kee7nOS4jemAmlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IE5PTkVcbiAgICAgKi9cbiAgICBOT05FOiAwLFxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBOZXR3b3JrIGlzIHJlYWNoYWJsZSB2aWEgV2lGaSBvciBjYWJsZS5cbiAgICAgKiAhI3poXG4gICAgICog6YCa6L+H5peg57q/5oiW6ICF5pyJ57q/5pys5Zyw572R57uc6L+e5o6l5Zug54m5572RXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gTEFOXG4gICAgICovXG4gICAgTEFOOiAxLFxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBOZXR3b3JrIGlzIHJlYWNoYWJsZSB2aWEgV2lyZWxlc3MgV2lkZSBBcmVhIE5ldHdvcmtcbiAgICAgKiAhI3poXG4gICAgICog6YCa6L+H6JyC56qd56e75Yqo572R57uc6L+e5o6l5Zug54m5572RXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gV1dBTlxuICAgICAqL1xuICAgIFdXQU46IDJcbiAgfTtcblxuICAvKipcbiAgICogQGNsYXNzIHN5c1xuICAgKi9cblxuICAvKipcbiAgICogISNlblxuICAgKiBHZXQgdGhlIG5ldHdvcmsgdHlwZSBvZiBjdXJyZW50IGRldmljZSwgcmV0dXJuIGNjLnN5cy5OZXR3b3JrVHlwZS5MQU4gaWYgZmFpbHVyZS5cbiAgICogISN6aFxuICAgKiDojrflj5blvZPliY3orr7lpIfnmoTnvZHnu5znsbvlnossIOWmguaenOe9kee7nOexu+Wei+aXoOazleiOt+WPlu+8jOm7mOiupOWwhui/lOWbniBjYy5zeXMuTmV0d29ya1R5cGUuTEFOXG4gICAqXG4gICAqIEBtZXRob2QgZ2V0TmV0d29ya1R5cGVcbiAgICogQHJldHVybiB7TmV0d29ya1R5cGV9XG4gICAqL1xuICBzeXMuZ2V0TmV0d29ya1R5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gVE9ETzogbmVlZCB0byBpbXBsZW1lbnQgdGhpcyBmb3IgbW9iaWxlIHBob25lcy5cbiAgICByZXR1cm4gc3lzLk5ldHdvcmtUeXBlLkxBTjtcbiAgfTtcblxuICAvKipcbiAgICogISNlblxuICAgKiBHZXQgdGhlIGJhdHRlcnkgbGV2ZWwgb2YgY3VycmVudCBkZXZpY2UsIHJldHVybiAxLjAgaWYgZmFpbHVyZS5cbiAgICogISN6aFxuICAgKiDojrflj5blvZPliY3orr7lpIfnmoTnlLXmsaDnlLXph4/vvIzlpoLmnpznlLXph4/ml6Dms5Xojrflj5bvvIzpu5jorqTlsIbov5Tlm54gMVxuICAgKlxuICAgKiBAbWV0aG9kIGdldEJhdHRlcnlMZXZlbFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gMC4wIH4gMS4wXG4gICAqL1xuICBzeXMuZ2V0QmF0dGVyeUxldmVsID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFRPRE86IG5lZWQgdG8gaW1wbGVtZW50IHRoaXMgZm9yIG1vYmlsZSBwaG9uZXMuXG4gICAgcmV0dXJuIDEuMDtcbiAgfTtcblxuICAvKipcbiAgICogRm9yY2VzIHRoZSBnYXJiYWdlIGNvbGxlY3Rpb24sIG9ubHkgYXZhaWxhYmxlIGluIEpTQlxuICAgKiBAbWV0aG9kIGdhcmJhZ2VDb2xsZWN0XG4gICAqL1xuICBzeXMuZ2FyYmFnZUNvbGxlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gTi9BIGluIHdlYlxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXN0YXJ0IHRoZSBKUyBWTSwgb25seSBhdmFpbGFibGUgaW4gSlNCXG4gICAqIEBtZXRob2QgcmVzdGFydFZNXG4gICAqL1xuICBzeXMucmVzdGFydFZNID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIE4vQSBpbiB3ZWJcbiAgfTtcblxuICAvKipcbiAgICogISNlblxuICAgKiBSZXR1cm4gdGhlIHNhZmUgYXJlYSByZWN0LiA8YnIvPlxuICAgKiBvbmx5IGF2YWlsYWJsZSBvbiB0aGUgaU9TIG5hdGl2ZSBwbGF0Zm9ybSwgb3RoZXJ3aXNlIGl0IHdpbGwgcmV0dXJuIGEgcmVjdCB3aXRoIGRlc2lnbiByZXNvbHV0aW9uIHNpemUuXG4gICAqICEjemhcbiAgICog6L+U5Zue5omL5py65bGP5bmV5a6J5YWo5Yy65Z+f77yM55uu5YmN5LuF5ZyoIGlPUyDljp/nlJ/lubPlj7DmnInmlYjjgILlhbblroPlubPlj7DlsIbpu5jorqTov5Tlm57orr7orqHliIbovqjnjoflsLrlr7jjgIJcbiAgICogQG1ldGhvZCBnZXRTYWZlQXJlYVJlY3RcbiAgICogQHJldHVybiB7UmVjdH1cbiAgKi9cbiAgc3lzLmdldFNhZmVBcmVhUmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmlzaWJsZVNpemUgPSBjYy52aWV3LmdldFZpc2libGVTaXplKCk7XG4gICAgcmV0dXJuIGNjLnJlY3QoMCwgMCwgdmlzaWJsZVNpemUud2lkdGgsIHZpc2libGVTaXplLmhlaWdodCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGlzIHZhbGlkLFxuICAgKiBJbiB3ZWIgZW5naW5lLCBpdCB3aWxsIHJldHVybiB0cnVlIGlmIHRoZSBvYmplY3QgZXhpc3RcbiAgICogSW4gbmF0aXZlIGVuZ2luZSwgaXQgd2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGUgSlMgb2JqZWN0IGFuZCB0aGUgY29ycmVzcG9uZCBuYXRpdmUgb2JqZWN0IGFyZSBib3RoIHZhbGlkXG4gICAqIEBtZXRob2QgaXNPYmplY3RWYWxpZFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IFZhbGlkaXR5IG9mIHRoZSBvYmplY3RcbiAgICovXG4gIHN5cy5pc09iamVjdFZhbGlkID0gZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChvYmopIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIER1bXAgc3lzdGVtIGluZm9ybWF0aW9uc1xuICAgKiBAbWV0aG9kIGR1bXBcbiAgICovXG4gIHN5cy5kdW1wID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgc3RyID0gXCJcIjtcbiAgICBzdHIgKz0gXCJpc01vYmlsZSA6IFwiICsgc2VsZi5pc01vYmlsZSArIFwiXFxyXFxuXCI7XG4gICAgc3RyICs9IFwibGFuZ3VhZ2UgOiBcIiArIHNlbGYubGFuZ3VhZ2UgKyBcIlxcclxcblwiO1xuICAgIHN0ciArPSBcImJyb3dzZXJUeXBlIDogXCIgKyBzZWxmLmJyb3dzZXJUeXBlICsgXCJcXHJcXG5cIjtcbiAgICBzdHIgKz0gXCJicm93c2VyVmVyc2lvbiA6IFwiICsgc2VsZi5icm93c2VyVmVyc2lvbiArIFwiXFxyXFxuXCI7XG4gICAgc3RyICs9IFwiY2FwYWJpbGl0aWVzIDogXCIgKyBKU09OLnN0cmluZ2lmeShzZWxmLmNhcGFiaWxpdGllcykgKyBcIlxcclxcblwiO1xuICAgIHN0ciArPSBcIm9zIDogXCIgKyBzZWxmLm9zICsgXCJcXHJcXG5cIjtcbiAgICBzdHIgKz0gXCJvc1ZlcnNpb24gOiBcIiArIHNlbGYub3NWZXJzaW9uICsgXCJcXHJcXG5cIjtcbiAgICBzdHIgKz0gXCJwbGF0Zm9ybSA6IFwiICsgc2VsZi5wbGF0Zm9ybSArIFwiXFxyXFxuXCI7XG4gICAgc3RyICs9IFwiVXNpbmcgXCIgKyAoY2MuZ2FtZS5yZW5kZXJUeXBlID09PSBjYy5nYW1lLlJFTkRFUl9UWVBFX1dFQkdMID8gXCJXRUJHTFwiIDogXCJDQU5WQVNcIikgKyBcIiByZW5kZXJlci5cIiArIFwiXFxyXFxuXCI7XG4gICAgY2MubG9nKHN0cik7XG4gIH07XG5cbiAgLyoqXG4gICAqIE9wZW4gYSB1cmwgaW4gYnJvd3NlclxuICAgKiBAbWV0aG9kIG9wZW5VUkxcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICAgKi9cbiAgc3lzLm9wZW5VUkwgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgaWYgKENDX0pTQiB8fCBDQ19SVU5USU1FKSB7XG4gICAgICBqc2Iub3BlblVSTCh1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cub3Blbih1cmwpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogR2V0IHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGVsYXBzZWQgc2luY2UgMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDLlxuICAgKiBAbWV0aG9kIG5vd1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICBzeXMubm93ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChEYXRlLm5vdykge1xuICAgICAgcmV0dXJuIERhdGUubm93KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiArbmV3IERhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHN5cztcbn1cblxudmFyIHN5cyA9IGNjICYmIGNjLnN5cyA/IGNjLnN5cyA6IGluaXRTeXMoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzeXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EVTNsekxtcHpJbDBzSW01aGJXVnpJanBiSW5ObGRIUnBibWRRYkdGMFptOXliU0lzSWtORFgwVkVTVlJQVWlJc0luZHBibVJ2ZHlJc0lsOURRMU5sZEhScGJtZHpJaXdpY0d4aGRHWnZjbTBpTENKMWJtUmxabWx1WldRaUxDSnBjMEpoYVdSMVIyRnRaU0lzSW1selZtbDJiMGRoYldVaUxDSnBjMDl3Y0c5SFlXMWxJaXdpYVhOSWRXRjNaV2xIWVcxbElpd2lhWE5LUzFkSFlXMWxJaXdpWDJkc2IySmhiQ0lzSW1kc2IySmhiQ0lzSW1sdWFYUlRlWE1pTENKall5SXNJbk41Y3lJc0lreEJUa2RWUVVkRlgwVk9SMHhKVTBnaUxDSk1RVTVIVlVGSFJWOURTRWxPUlZORklpd2lURUZPUjFWQlIwVmZSbEpGVGtOSUlpd2lURUZPUjFWQlIwVmZTVlJCVEVsQlRpSXNJa3hCVGtkVlFVZEZYMGRGVWsxQlRpSXNJa3hCVGtkVlFVZEZYMU5RUVU1SlUwZ2lMQ0pNUVU1SFZVRkhSVjlFVlZSRFNDSXNJa3hCVGtkVlFVZEZYMUpWVTFOSlFVNGlMQ0pNUVU1SFZVRkhSVjlMVDFKRlFVNGlMQ0pNUVU1SFZVRkhSVjlLUVZCQlRrVlRSU0lzSWt4QlRrZFZRVWRGWDBoVlRrZEJVa2xCVGlJc0lreEJUa2RWUVVkRlgxQlBVbFJWUjFWRlUwVWlMQ0pNUVU1SFZVRkhSVjlCVWtGQ1NVTWlMQ0pNUVU1SFZVRkhSVjlPVDFKWFJVZEpRVTRpTENKTVFVNUhWVUZIUlY5UVQweEpVMGdpTENKTVFVNUhWVUZIUlY5VVZWSkxTVk5JSWl3aVRFRk9SMVZCUjBWZlZVdFNRVWxPU1VGT0lpd2lURUZPUjFWQlIwVmZVazlOUVU1SlFVNGlMQ0pNUVU1SFZVRkhSVjlDVlV4SFFWSkpRVTRpTENKTVFVNUhWVUZIUlY5VlRrdE9UMWRPSWl3aVQxTmZTVTlUSWl3aVQxTmZRVTVFVWs5SlJDSXNJazlUWDFkSlRrUlBWMU1pTENKUFUxOU5RVkpOUVV4QlJFVWlMQ0pQVTE5TVNVNVZXQ0lzSWs5VFgwSkJSRUVpTENKUFUxOUNURUZEUzBKRlVsSlpJaXdpVDFOZlQxTllJaXdpVDFOZlYxQTRJaXdpVDFOZlYwbE9VbFFpTENKUFUxOVZUa3RPVDFkT0lpd2lWVTVMVGs5WFRpSXNJbGRKVGpNeUlpd2lURWxPVlZnaUxDSk5RVU5QVXlJc0lrRk9SRkpQU1VRaUxDSkpVRWhQVGtVaUxDSkpVRUZFSWl3aVFreEJRMHRDUlZKU1dTSXNJazVCUTB3aUxDSkZUVk5EVWtsUVZFVk9JaXdpVkVsYVJVNGlMQ0pYU1U1U1ZDSXNJbGRRT0NJc0lrMVBRa2xNUlY5Q1VrOVhVMFZTSWl3aVJFVlRTMVJQVUY5Q1VrOVhVMFZTSWl3aVJVUkpWRTlTWDFCQlIwVWlMQ0pGUkVsVVQxSmZRMDlTUlNJc0lsZEZRMGhCVkY5SFFVMUZJaXdpVVZGZlVFeEJXU0lzSWtaQ1gxQk1RVmxCUWt4RlgwRkVVeUlzSWtKQlNVUlZYMGRCVFVVaUxDSldTVlpQWDBkQlRVVWlMQ0pQVUZCUFgwZEJUVVVpTENKSVZVRlhSVWxmUjBGTlJTSXNJbGhKUVU5TlNWOUhRVTFGSWl3aVNrdFhYMGRCVFVVaUxDSkJURWxRUVZsZlIwRk5SU0lzSWtKU1QxZFRSVkpmVkZsUVJWOVhSVU5JUVZRaUxDSkNVazlYVTBWU1gxUlpVRVZmVjBWRFNFRlVYMGRCVFVVaUxDSkNVazlYVTBWU1gxUlpVRVZmVjBWRFNFRlVYMGRCVFVWZlUxVkNJaXdpUWxKUFYxTkZVbDlVV1ZCRlgwSkJTVVJWWDBkQlRVVWlMQ0pDVWs5WFUwVlNYMVJaVUVWZlFrRkpSRlZmUjBGTlJWOVRWVUlpTENKQ1VrOVhVMFZTWDFSWlVFVmZXRWxCVDAxSlgwZEJUVVVpTENKQ1VrOVhVMFZTWDFSWlVFVmZRVXhKVUVGWlgwZEJUVVVpTENKQ1VrOVhVMFZTWDFSWlVFVmZVVkZmVUV4QldTSXNJa0pTVDFkVFJWSmZWRmxRUlY5QlRrUlNUMGxFSWl3aVFsSlBWMU5GVWw5VVdWQkZYMGxGSWl3aVFsSlBWMU5GVWw5VVdWQkZYMFZFUjBVaUxDSkNVazlYVTBWU1gxUlpVRVZmVVZFaUxDSkNVazlYVTBWU1gxUlpVRVZmVFU5Q1NVeEZYMUZSSWl3aVFsSlBWMU5GVWw5VVdWQkZYMVZESWl3aVFsSlBWMU5GVWw5VVdWQkZYMVZEUWxNaUxDSkNVazlYVTBWU1gxUlpVRVZmTXpZd0lpd2lRbEpQVjFORlVsOVVXVkJGWDBKQlNVUlZYMEZRVUNJc0lrSlNUMWRUUlZKZlZGbFFSVjlDUVVsRVZTSXNJa0pTVDFkVFJWSmZWRmxRUlY5TlFWaFVTRTlPSWl3aVFsSlBWMU5GVWw5VVdWQkZYMDlRUlZKQklpd2lRbEpQVjFORlVsOVVXVkJGWDA5VlVFVk9SeUlzSWtKU1QxZFRSVkpmVkZsUVJWOU5TVlZKSWl3aVFsSlBWMU5GVWw5VVdWQkZYMFpKVWtWR1QxZ2lMQ0pDVWs5WFUwVlNYMVJaVUVWZlUwRkdRVkpKSWl3aVFsSlBWMU5GVWw5VVdWQkZYME5JVWs5TlJTSXNJa0pTVDFkVFJWSmZWRmxRUlY5TVNVVkNRVThpTENKQ1VrOVhVMFZTWDFSWlVFVmZVVnBQVGtVaUxDSkNVazlYVTBWU1gxUlpVRVZmVTA5VlIwOVZJaXdpUWxKUFYxTkZVbDlVV1ZCRlgxVk9TMDVQVjA0aUxDSnBjMDVoZEdsMlpTSXNJa05EWDBwVFFpSXNJa05EWDFKVlRsUkpUVVVpTENKcGMwSnliM2R6WlhJaUxDSmtiMk4xYldWdWRDSXNJa05EWDFkRlEwaEJWRWRCVFVVaUxDSkRRMTlSVVZCTVFWa2lMQ0puYkVWNGRHVnVjMmx2YmlJc0ltNWhiV1VpTENKeVpXNWtaWEpsY2lJc0ltUmxkbWxqWlNJc0ltVjRkQ0lzSW1kbGRFMWhlRXB2YVc1MFRXRjBjbWw0VTJsNlpTSXNJbDl0WVhoS2IybHVkRTFoZEhKcGVGTnBlbVVpTENKS1QwbE9WRjlOUVZSU1NVTkZVMTlUU1ZwRklpd2lURVZHVkY5VlRrbEdUMUpOWDFOSldrVWlMQ0puYkNJc0ltZGhiV1VpTENKZmNtVnVaR1Z5UTI5dWRHVjRkQ0lzSW0xaGVGVnVhV1p2Y20xeklpd2lUV0YwYUNJc0ltWnNiMjl5SWl3aVoyVjBVR0Z5WVcxbGRHVnlJaXdpVFVGWVgxWkZVbFJGV0Y5VlRrbEdUMUpOWDFaRlExUlBVbE1pTENKZlgzQnNZWFJtYjNKdElpd2laMlYwVTNsemRHVnRTVzVtYnlJc0ltVnVkaUlzSW1KeWIzZHpaWEpVZVhCbElpd2lhWE5OYjJKcGJHVWlMQ0pzWVc1bmRXRm5aU0lzSW14aGJtZDFZV2RsUTI5a1pTSXNJblJ2VEc5M1pYSkRZWE5sSWl3aWIzTWlMQ0p2YzFabGNuTnBiMjRpTENKdmMwMWhhVzVXWlhKemFXOXVJaXdpWW5KdmQzTmxjbFpsY25OcGIyNGlMQ0ozYVc1a2IzZFFhWGhsYkZKbGMyOXNkWFJwYjI0aUxDSnNiMk5oYkZOMGIzSmhaMlVpTENKallYQmhZbWxzYVhScFpYTWlMQ0pmWDJGMVpHbHZVM1Z3Y0c5eWRDSXNJbUYxWkdsdlUzVndjRzl5ZENJc0lrVmthWFJ2Y2lJc0ltbHpUV0ZwYmxCeWIyTmxjM01pTENKa1lYSjNhVzRpTENKM2FXNHpNaUlzSW14cGJuVjRJaXdpY0hKdlkyVnpjeUlzSW5kcFpIUm9JaXdpYUdWcFoyaDBJaXdpWDE5blpYUlFiR0YwWm05eWJTSXNJbDlmWjJWMFQxTWlMQ0pmWDJkbGRFTjFjbkpsYm5STVlXNW5kV0ZuWlNJc0lsOWZaMlYwUTNWeWNtVnVkRXhoYm1kMVlXZGxRMjlrWlNJc0lsOWZaMlYwVDFOV1pYSnphVzl1SWl3aWNHRnljMlZKYm5RaUxDSjNJaXdpYVc1dVpYSlhhV1IwYUNJc0ltZ2lMQ0pwYm01bGNraGxhV2RvZENJc0luSmhkR2x2SWl3aVpHVjJhV05sVUdsNFpXeFNZWFJwYnlJc0lrOU9URmxmVDA1Rklpd2lWMFZDWDBGVlJFbFBJaXdpUkVWTVFWbGZRMUpGUVZSRlgwTlVXQ0lzSW1admNtMWhkQ0lzSW5kNElpd2laMlYwVTNsemRHVnRTVzVtYjFONWJtTWlMQ0p6ZFdKemRISWlMQ0p6ZVhOMFpXMGlMQ0pwYm1SbGVFOW1JaXdpZG1WeWMybHZiaUlzSW1WNFpXTWlMQ0pEUTE5WFJVTklRVlJIUVUxRlUxVkNJaXdpZDJsdVpHOTNWMmxrZEdnaUxDSjNhVzVrYjNkSVpXbG5hSFFpTENKd2FYaGxiRkpoZEdsdklpd2lYM04xY0hCdmNuUlhaV0pIVENJc0lsOXpkWEJ3YjNKMFYyVmljQ0lzSWw5allXNTJZWE1pTENKamNtVmhkR1ZGYkdWdFpXNTBJaXdpWjJWMFEyOXVkR1Y0ZENJc0luUnZSR0YwWVZWU1RDSXNJbk4wWVhKMGMxZHBkR2dpTENKbGNuSWlMQ0p6Y0d4cGRDSXNJbk5qY21WbGJsZHBaSFJvSWl3aWMyTnlaV1Z1U0dWcFoyaDBJaXdpWDE5a1pYWnBZMlVpTENKM2FXNGlMQ0p1WVhZaUxDSnVZWFpwWjJGMGIzSWlMQ0prYjJNaUxDSmtiMk5GYkdVaUxDSmtiMk4xYldWdWRFVnNaVzFsYm5RaUxDSjFZU0lzSW5WelpYSkJaMlZ1ZENJc0luUmxjM1FpTENKR1lsQnNZWGxoWW14bFFXUWlMQ0pqZFhKeVRHRnVaM1ZoWjJVaUxDSmljbTkzYzJWeVRHRnVaM1ZoWjJVaUxDSnBjMEZ1WkhKdmFXUWlMQ0pwVDFNaUxDSjFZVkpsYzNWc2RDSXNJbTl6VG1GdFpTSXNJbUZ3Y0ZabGNuTnBiMjRpTENKUFUxOVZUa2xZSWl3aWRIbHdaVkpsWnpFaUxDSjBlWEJsVW1Wbk1pSXNJblI1Y0dWU1pXY3pJaXdpWW5KdmQzTmxjbFI1Y0dWeklpd2liV0YwWTJnaUxDSjBlWEJsVFdGd0lpd2lkbVZ5YzJsdmJsSmxaekVpTENKMlpYSnphVzl1VW1Wbk1pSXNJblJ0Y0NJc0ltTnNhV1Z1ZEZkcFpIUm9JaXdpWTJ4cFpXNTBTR1ZwWjJoMElpd2lYMk5vWldOclYyVmlSMHhTWlc1a1pYSk5iMlJsSWl3aWNtVnVaR1Z5Vkhsd1pTSXNJbEpGVGtSRlVsOVVXVkJGWDFkRlFrZE1JaXdpUlhKeWIzSWlMQ0pmZEcxd1EyRnVkbUZ6TVNJc0ltTnlaV0YwWlRORVEyOXVkR1Y0ZENJc0ltTmhiblpoY3lJc0ltOXdkRjloZEhSeWFXSnpJaXdpYjNCMFgyTnZiblJsZUhSVWVYQmxJaXdpWlNJc0luTmxkRWwwWlcwaUxDSnlaVzF2ZG1WSmRHVnRJaXdpZDJGeWJpSXNJbmRoY201SlJDSXNJbWRsZEVsMFpXMGlMQ0pqYkdWaGNpSXNJbDl6ZFhCd2IzSjBRMkZ1ZG1Geklpd2lRME5mVkVWVFZDSXNJbGRsWWtkTVVtVnVaR1Z5YVc1blEyOXVkR1Y0ZENJc0ltMXpVRzlwYm5SbGNrVnVZV0pzWldRaUxDSkVaWFpwWTJWTmIzUnBiMjVGZG1WdWRDSXNJa1JsZG1salpVOXlhV1Z1ZEdGMGFXOXVSWFpsYm5RaUxDSkVSVUpWUnlJc0luTjFjSEJ2Y25SWFpXSkJkV1JwYnlJc0lrRjFaR2x2UTI5dWRHVjRkQ0lzSW5kbFltdHBkRUYxWkdsdlEyOXVkR1Y0ZENJc0ltMXZla0YxWkdsdlEyOXVkR1Y0ZENJc0lsVlRSVjlNVDBGRVJWSmZSVlpGVGxRaUxDSlBUa1ZmVTA5VlVrTkZJaXdpYzJWMFZHbHRaVzkxZENJc0lteHZaeUlzSWsxVlRGUkpYME5JUVU1T1JVd2lMQ0pCVlZSUFVFeEJXU0lzSW1OdmJuUmxlSFFpTENKbGNuSnZjaUlzSW14dlowbEVJaXdpWm05eWJXRjBVM1Z3Y0c5eWRDSXNJbUYxWkdsdklpd2lZMkZ1VUd4aGVWUjVjR1VpTENKdloyY2lMQ0p3ZFhOb0lpd2liWEF6SWl3aWQyRjJJaXdpYlhBMElpd2liVFJoSWl3aVRtVjBkMjl5YTFSNWNHVWlMQ0pPVDA1Rklpd2lURUZPSWl3aVYxZEJUaUlzSW1kbGRFNWxkSGR2Y210VWVYQmxJaXdpWjJWMFFtRjBkR1Z5ZVV4bGRtVnNJaXdpWjJGeVltRm5aVU52Ykd4bFkzUWlMQ0p5WlhOMFlYSjBWazBpTENKblpYUlRZV1psUVhKbFlWSmxZM1FpTENKMmFYTnBZbXhsVTJsNlpTSXNJblpwWlhjaUxDSm5aWFJXYVhOcFlteGxVMmw2WlNJc0luSmxZM1FpTENKcGMwOWlhbVZqZEZaaGJHbGtJaXdpYjJKcUlpd2laSFZ0Y0NJc0luTmxiR1lpTENKemRISWlMQ0pLVTA5T0lpd2ljM1J5YVc1bmFXWjVJaXdpYjNCbGJsVlNUQ0lzSW5WeWJDSXNJbXB6WWlJc0ltOXdaVzRpTENKdWIzY2lMQ0pFWVhSbElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096dEJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVRCQ1FTeEpRVUZKUVN4M1FrRkJTanRCUVVORExFbEJRVWtzUTBGQlEwTXNVMEZCVEN4RlFVRm5RanRCUVVOaVJDeHZRa0ZCYTBKRkxFOUJRVTlETEZkQlFWQXNSMEZCY1VKQkxGbEJRVmxETEZGQlFXcERMRWRCUVRKRFF5eFRRVUUzUkR0QlFVTkdPMEZCUTBZc1NVRkJUVU1zWTBGQlpVNHNiMEpCUVc5Q0xGZEJRWEJDTEVsQlFXMURRU3h2UWtGQmIwSXNjMEpCUVRWRk8wRkJRMEVzU1VGQlRVOHNZVUZCWTFBc2IwSkJRVzlDTEU5QlFYaERPMEZCUTBFc1NVRkJUVkVzWVVGQlkxSXNiMEpCUVc5Q0xGZEJRWGhETzBGQlEwRXNTVUZCVFZNc1pVRkJaMEpVTEc5Q1FVRnZRaXhSUVVFeFF6dEJRVU5CTEVsQlFVMVZMRmxCUVdGV0xHOUNRVUZ2UWl4VlFVRjJRenM3UVVGRlFTeEpRVUZKVnl4VlFVRlZMRTlCUVU5VUxFMUJRVkFzUzBGQmEwSXNWMEZCYkVJc1IwRkJaME5WTEUxQlFXaERMRWRCUVhsRFZpeE5RVUYyUkRzN1FVRkZRU3hUUVVGVFZ5eFBRVUZVTEVkQlFXOUNPMEZCUTJoQ096czdPenM3UVVGTlFVTXNTMEZCUjBNc1IwRkJTQ3hIUVVGVExFVkJRVlE3UVVGRFFTeE5RVUZKUVN4TlFVRk5SQ3hIUVVGSFF5eEhRVUZpT3p0QlFVVkJPenM3T3p0QlFVdEJRU3hOUVVGSlF5eG5Ra0ZCU2l4SFFVRjFRaXhKUVVGMlFqczdRVUZGUVRzN096czdRVUZMUVVRc1RVRkJTVVVzWjBKQlFVb3NSMEZCZFVJc1NVRkJka0k3TzBGQlJVRTdPenM3TzBGQlMwRkdMRTFCUVVsSExHVkJRVW9zUjBGQmMwSXNTVUZCZEVJN08wRkJSVUU3T3pzN08wRkJTMEZJTEUxQlFVbEpMR2RDUVVGS0xFZEJRWFZDTEVsQlFYWkNPenRCUVVWQk96czdPenRCUVV0QlNpeE5RVUZKU3l4bFFVRktMRWRCUVhOQ0xFbEJRWFJDT3p0QlFVVkJPenM3T3p0QlFVdEJUQ3hOUVVGSlRTeG5Ra0ZCU2l4SFFVRjFRaXhKUVVGMlFqczdRVUZGUVRzN096czdRVUZMUVU0c1RVRkJTVThzWTBGQlNpeEhRVUZ4UWl4SlFVRnlRanM3UVVGRlFUczdPenM3UVVGTFFWQXNUVUZCU1ZFc1owSkJRVW9zUjBGQmRVSXNTVUZCZGtJN08wRkJSVUU3T3pzN08wRkJTMEZTTEUxQlFVbFRMR1ZCUVVvc1IwRkJjMElzU1VGQmRFSTdPMEZCUlVFN096czdPMEZCUzBGVUxFMUJRVWxWTEdsQ1FVRktMRWRCUVhkQ0xFbEJRWGhDT3p0QlFVVkJPenM3T3p0QlFVdEJWaXhOUVVGSlZ5eHJRa0ZCU2l4SFFVRjVRaXhKUVVGNlFqczdRVUZGUVRzN096czdRVUZMUVZnc1RVRkJTVmtzYlVKQlFVb3NSMEZCTUVJc1NVRkJNVUk3TzBGQlJVRTdPenM3TzBGQlMwRmFMRTFCUVVsaExHVkJRVW9zUjBGQmMwSXNTVUZCZEVJN08wRkJSVUU3T3pzN08wRkJTMEZpTEUxQlFVbGpMR3RDUVVGS0xFZEJRWGxDTEVsQlFYcENPenRCUVVWQk96czdPenRCUVV0QlpDeE5RVUZKWlN4bFFVRktMRWRCUVhOQ0xFbEJRWFJDT3p0QlFVVkJPenM3T3p0QlFVdEJaaXhOUVVGSlowSXNaMEpCUVVvc1IwRkJkVUlzU1VGQmRrSTdPMEZCUlVFN096czdPMEZCUzBGb1FpeE5RVUZKYVVJc2EwSkJRVW9zUjBGQmVVSXNTVUZCZWtJN08wRkJSVUU3T3pzN08wRkJTMEZxUWl4TlFVRkphMElzYVVKQlFVb3NSMEZCZDBJc1NVRkJlRUk3TzBGQlJVRTdPenM3TzBGQlMwRnNRaXhOUVVGSmJVSXNhMEpCUVVvc1IwRkJlVUlzU1VGQmVrSTdPMEZCUlVFN096czdPMEZCUzBGdVFpeE5RVUZKYjBJc1owSkJRVW9zUjBGQmRVSXNVMEZCZGtJN08wRkJSVUU3T3pzN1FVRkpRWEJDTEUxQlFVbHhRaXhOUVVGS0xFZEJRV0VzUzBGQllqdEJRVU5CT3pzN08wRkJTVUZ5UWl4TlFVRkpjMElzVlVGQlNpeEhRVUZwUWl4VFFVRnFRanRCUVVOQk96czdPMEZCU1VGMFFpeE5RVUZKZFVJc1ZVRkJTaXhIUVVGcFFpeFRRVUZxUWp0QlFVTkJPenM3TzBGQlNVRjJRaXhOUVVGSmQwSXNXVUZCU2l4SFFVRnRRaXhYUVVGdVFqdEJRVU5CT3pzN08wRkJTVUY0UWl4TlFVRkplVUlzVVVGQlNpeEhRVUZsTEU5QlFXWTdRVUZEUVRzN096dEJRVWxCZWtJc1RVRkJTVEJDTEU5QlFVb3NSMEZCWXl4TlFVRmtPMEZCUTBFN096czdRVUZKUVRGQ0xFMUJRVWt5UWl4aFFVRktMRWRCUVc5Q0xGbEJRWEJDTzBGQlEwRTdPenM3UVVGSlFUTkNMRTFCUVVrMFFpeE5RVUZLTEVkQlFXRXNUVUZCWWp0QlFVTkJPenM3TzBGQlNVRTFRaXhOUVVGSk5rSXNUVUZCU2l4SFFVRmhMRXRCUVdJN1FVRkRRVHM3T3p0QlFVbEJOMElzVFVGQlNUaENMRkZCUVVvc1IwRkJaU3hQUVVGbU8wRkJRMEU3T3pzN1FVRkpRVGxDTEUxQlFVa3JRaXhWUVVGS0xFZEJRV2xDTEZOQlFXcENPenRCUVVWQk96czdPenRCUVV0QkwwSXNUVUZCU1dkRExFOUJRVW9zUjBGQll5eERRVUZETEVOQlFXWTdRVUZEUVRzN096czdRVUZMUVdoRExFMUJRVWxwUXl4TFFVRktMRWRCUVZrc1EwRkJXanRCUVVOQk96czdPenRCUVV0QmFrTXNUVUZCU1d0RExFdEJRVW9zUjBGQldTeERRVUZhTzBGQlEwRTdPenM3TzBGQlMwRnNReXhOUVVGSmJVTXNTMEZCU2l4SFFVRlpMRU5CUVZvN1FVRkRRVHM3T3pzN1FVRkxRVzVETEUxQlFVbHZReXhQUVVGS0xFZEJRV01zUTBGQlpEdEJRVU5CT3pzN096dEJRVXRCY0VNc1RVRkJTWEZETEUxQlFVb3NSMEZCWVN4RFFVRmlPMEZCUTBFN096czdPMEZCUzBGeVF5eE5RVUZKYzBNc1NVRkJTaXhIUVVGWExFTkJRVmc3UVVGRFFUczdPenM3UVVGTFFYUkRMRTFCUVVsMVF5eFZRVUZLTEVkQlFXbENMRU5CUVdwQ08wRkJRMEU3T3pzN08wRkJTMEYyUXl4TlFVRkpkME1zU1VGQlNpeEhRVUZYTEVOQlFWZzdRVUZEUVRzN096czdRVUZMUVhoRExFMUJRVWw1UXl4VlFVRktMRWRCUVdsQ0xFTkJRV3BDTzBGQlEwRTdPenM3TzBGQlMwRjZReXhOUVVGSk1FTXNTMEZCU2l4SFFVRlpMRU5CUVZvN1FVRkRRVHM3T3pzN1FVRkxRVEZETEUxQlFVa3lReXhMUVVGS0xFZEJRVmtzUlVGQldqdEJRVU5CT3pzN096dEJRVXRCTTBNc1RVRkJTVFJETEVkQlFVb3NSMEZCVlN4RlFVRldPMEZCUTBFN096czdPMEZCUzBFMVF5eE5RVUZKTmtNc1kwRkJTaXhIUVVGeFFpeEhRVUZ5UWp0QlFVTkJPenM3T3p0QlFVdEJOME1zVFVGQlNUaERMR1ZCUVVvc1IwRkJjMElzUjBGQmRFSTdPMEZCUlVFN096czdPenRCUVUxQk9VTXNUVUZCU1N0RExGZEJRVW9zUjBGQmEwSXNSMEZCYkVJN1FVRkRRVHM3T3pzN08wRkJUVUV2UXl4TlFVRkpaMFFzVjBGQlNpeEhRVUZyUWl4SFFVRnNRanRCUVVOQk96czdPenRCUVV0QmFFUXNUVUZCU1dsRUxGZEJRVW9zUjBGQmEwSXNSMEZCYkVJN1FVRkRRVHM3T3pzN1FVRkxRV3BFTEUxQlFVbHJSQ3hQUVVGS0xFZEJRV01zUjBGQlpEdEJRVU5CT3pzN096dEJRVXRCYkVRc1RVRkJTVzFFTEdWQlFVb3NSMEZCYzBJc1IwRkJkRUk3UVVGRFFUczdPenM3UVVGTFFXNUVMRTFCUVVsdlJDeFZRVUZLTEVkQlFXbENMRWRCUVdwQ08wRkJRMEU3T3pzN08wRkJTMEZ3UkN4TlFVRkpjVVFzVTBGQlNpeEhRVUZuUWl4SFFVRm9RanRCUVVOQk96czdPenRCUVV0QmNrUXNUVUZCU1hORUxGTkJRVW9zUjBGQlowSXNSMEZCYUVJN1FVRkRRVHM3T3pzN1FVRkxRWFJFTEUxQlFVbDFSQ3hYUVVGS0xFZEJRV3RDTEVkQlFXeENPMEZCUTBFN096czdPMEZCUzBGMlJDeE5RVUZKZDBRc1YwRkJTaXhIUVVGclFpeEhRVUZzUWp0QlFVTkJPenM3T3p0QlFVdEJlRVFzVFVGQlNYbEVMRkZCUVVvc1IwRkJaU3hIUVVGbU8wRkJRMEU3T3pzN08wRkJTMEY2UkN4TlFVRkpNRVFzVjBGQlNpeEhRVUZyUWl4SFFVRnNRanRCUVVOQk96czdPenM3UVVGTlFURkVMRTFCUVVreVJDeHRRa0ZCU2l4SFFVRXdRaXhSUVVFeFFqdEJRVU5CT3pzN096czdRVUZOUVRORUxFMUJRVWswUkN4M1FrRkJTaXhIUVVFclFpeFpRVUV2UWp0QlFVTkJPenM3T3pzN1FVRk5RVFZFTEUxQlFVazJSQ3cwUWtGQlNpeEhRVUZ0UXl4bFFVRnVRenRCUVVOQk96czdPenM3UVVGTlFUZEVMRTFCUVVrNFJDeDFRa0ZCU2l4SFFVRTRRaXhYUVVFNVFqdEJRVU5CT3pzN096czdRVUZOUVRsRUxFMUJRVWtyUkN3eVFrRkJTaXhIUVVGclF5eGpRVUZzUXp0QlFVTkJPenM3T3pzN1FVRk5RUzlFTEUxQlFVbG5SU3gzUWtGQlNpeEhRVUVyUWl4WlFVRXZRanRCUVVOQk96czdPenM3UVVGTlFXaEZMRTFCUVVscFJTeDNRa0ZCU2l4SFFVRXJRaXhaUVVFdlFqdEJRVU5CT3pzN096czdRVUZOUVdwRkxFMUJRVWxyUlN4dlFrRkJTaXhIUVVFeVFpeFJRVUV6UWp0QlFVTkJPenM3T3pzN1FVRk5RV3hGTEUxQlFVbHRSU3h2UWtGQlNpeEhRVUV5UWl4blFrRkJNMEk3UVVGRFFUczdPenM3TzBGQlRVRnVSU3hOUVVGSmIwVXNaVUZCU2l4SFFVRnpRaXhKUVVGMFFqdEJRVU5CT3pzN096czdRVUZOUVhCRkxFMUJRVWx4UlN4cFFrRkJTaXhIUVVGM1FpeE5RVUY0UWp0QlFVTkJPenM3T3pzN1FVRk5RWEpGTEUxQlFVbHpSU3hsUVVGS0xFZEJRWE5DTEZkQlFYUkNPMEZCUTBFN096czdPenRCUVUxQmRFVXNUVUZCU1hWRkxITkNRVUZLTEVkQlFUWkNMRmxCUVRkQ08wRkJRMEU3T3pzN096dEJRVTFCZGtVc1RVRkJTWGRGTEdWQlFVb3NSMEZCYzBJc1YwRkJkRUk3UVVGRFFUczdPenM3TzBGQlRVRjRSU3hOUVVGSmVVVXNhVUpCUVVvc1IwRkJkMElzVFVGQmVFSTdRVUZEUVRzN096czdPMEZCVFVGNlJTeE5RVUZKTUVVc1owSkJRVW9zUjBGQmRVSXNXVUZCZGtJN1FVRkRRVHM3T3pzN08wRkJUVUV4UlN4TlFVRkpNa1VzYzBKQlFVb3NSMEZCTmtJc1lVRkJOMEk3UVVGRFFUczdPenM3TzBGQlRVRXpSU3hOUVVGSk5FVXNhMEpCUVVvc1IwRkJlVUlzWTBGQmVrSTdRVUZEUVRzN096czdPMEZCVFVFMVJTeE5RVUZKTmtVc2IwSkJRVW9zUjBGQk1rSXNVMEZCTTBJN1FVRkRRVHM3T3pzN08wRkJUVUUzUlN4TlFVRkpPRVVzYTBKQlFVb3NSMEZCZVVJc1QwRkJla0k3UVVGRFFUczdPenM3TzBGQlRVRTVSU3hOUVVGSkswVXNiVUpCUVVvc1IwRkJNRUlzVVVGQk1VSTdRVUZEUVRzN096czdPMEZCVFVFdlJTeE5RVUZKWjBZc2FVSkJRVW9zUjBGQmQwSXNZVUZCZUVJN1FVRkRRVHM3T3pzN08wRkJUVUZvUml4TlFVRkphVVlzYjBKQlFVb3NSMEZCTWtJc1UwRkJNMEk3UVVGRFFUczdPenM3TzBGQlRVRnFSaXhOUVVGSmEwWXNiVUpCUVVvc1IwRkJNRUlzVVVGQk1VSTdRVUZEUVRzN096czdPMEZCVFVGc1JpeE5RVUZKYlVZc2JVSkJRVW9zUjBGQk1FSXNVVUZCTVVJN1FVRkRRVHM3T3pzN08wRkJUVUZ1Uml4TlFVRkpiMFlzYlVKQlFVb3NSMEZCTUVJc1VVRkJNVUk3UVVGRFFUczdPenM3TzBGQlRVRndSaXhOUVVGSmNVWXNhMEpCUVVvc1IwRkJlVUlzVDBGQmVrSTdRVUZEUVRzN096czdPMEZCVFVGeVJpeE5RVUZKYzBZc2JVSkJRVW9zUjBGQk1FSXNUMEZCTVVJN1FVRkRRVHM3T3pzN08wRkJUVUYwUml4TlFVRkpkVVlzYjBKQlFVb3NSMEZCTWtJc1UwRkJNMEk3TzBGQlJVRTdPenM3UVVGSlFYWkdMRTFCUVVsM1JpeFJRVUZLTEVkQlFXVkRMRlZCUVZWRExGVkJRWHBDT3p0QlFVZEJPenM3TzBGQlNVRXhSaXhOUVVGSk1rWXNVMEZCU2l4SFFVRm5RaXhSUVVGUGVFY3NUVUZCVUN4NVEwRkJUMEVzVFVGQlVDeFBRVUZyUWl4UlFVRnNRaXhKUVVFNFFpeFJRVUZQZVVjc1VVRkJVQ3g1UTBGQlQwRXNVVUZCVUN4UFFVRnZRaXhSUVVGc1JDeEpRVUU0UkN4RFFVRkRReXhoUVVFdlJDeEpRVUZuUml4RFFVRkRReXhUUVVGcVJpeEpRVUU0Uml4RFFVRkRUQ3hOUVVFdlJpeEpRVUY1Unl4RFFVRkRReXhWUVVFeFJ5eEpRVUYzU0N4RFFVRkRia2NzVjBGQmVrazdPMEZCUlVFN096czdPMEZCUzBGVExFMUJRVWtyUml4WFFVRktMRWRCUVd0Q0xGVkJRVlZETEVsQlFWWXNSVUZCWjBJN1FVRkRPVUlzVVVGQlNTeERRVUZEU0N4cFFrRkJhVUowUnl4WFFVRnNRaXhMUVVGclEzbEhMRk5CUVZNc2JVSkJRUzlETEVWQlFXOUZPMEZCUTJoRkxHRkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwUXNWMEZCVHl4RFFVRkRMRU5CUVVOcVJ5eEhRVUZIYTBjc1VVRkJTQ3hEUVVGWlF5eE5RVUZhTEVOQlFXMUNReXhIUVVGdVFpeERRVUYxUWtnc1NVRkJka0lzUTBGQlZEdEJRVU5JTEVkQlRFUTdPMEZCVDBFN096czdRVUZKUVdoSExFMUJRVWx2Unl4eFFrRkJTaXhIUVVFMFFpeFpRVUZaTzBGQlEzQkRMRkZCUVVrc1EwRkJRM0JITEVsQlFVbHhSeXh0UWtGQlZDeEZRVUU0UWp0QlFVTXhRaXhWUVVGTlF5eHpRa0ZCYzBJc1JVRkJOVUk3UVVGRFFTeFZRVUZOUXl4dlFrRkJiMElzUlVGQk1VSTdPMEZCUlVFc1ZVRkJTVU1zUzBGQlMzcEhMRWRCUVVjd1J5eEpRVUZJTEVOQlFWRkRMR05CUVdwQ08wRkJRMEVzVlVGQlNVTXNZMEZCWTBNc1MwRkJTME1zUzBGQlRDeERRVUZYVEN4SFFVRkhUU3haUVVGSUxFTkJRV2RDVGl4SFFVRkhUeXd3UWtGQmJrSXNTVUZCYVVRc1EwRkJOVVFzU1VGQmFVVlNMR2xDUVVGdVJqdEJRVU5CTEZWQlFVbEpMR05CUVdOTUxHMUNRVUZzUWl4RlFVRjFRenRCUVVOdVEzUkhMRmxCUVVseFJ5eHRRa0ZCU2l4SFFVRXdRaXhEUVVFeFFqdEJRVU5JTEU5QlJrUXNUVUZIU3p0QlFVTkVja2NzV1VGQlNYRkhMRzFDUVVGS0xFZEJRVEJDUXl4dFFrRkJNVUk3UVVGRFNEdEJRVU5LTzBGQlEwUXNWMEZCVDNSSExFbEJRVWx4Unl4dFFrRkJXRHRCUVVOSUxFZEJaa1E3TzBGQmFVSkJMRTFCUVVsNlJ5eFJRVUZSYjBnc1ZVRkJVaXhKUVVGelFuQklMRkZCUVZGdlNDeFZRVUZTTEVOQlFXMUNReXhoUVVFM1F5eEZRVUUwUkR0QlFVTjRSQ3hSUVVGSlF5eFBRVUZOZEVnc1VVRkJVVzlJTEZWQlFWSXNRMEZCYlVKRExHRkJRVzVDTEVWQlFWWTdRVUZEUVdwSUxGRkJRVWwzUml4UlFVRktMRWRCUVdVd1FpeExRVUZKTVVJc1VVRkJia0k3UVVGRFFYaEdMRkZCUVVreVJpeFRRVUZLTEVkQlFXZENkVUlzUzBGQlNYWkNMRk5CUVhCQ08wRkJRMEV6Uml4UlFVRkpXQ3hSUVVGS0xFZEJRV1UyU0N4TFFVRkpOMGdzVVVGQmJrSTdRVUZEUVZjc1VVRkJTVzFJTEZkQlFVb3NSMEZCYTBKRUxFdEJRVWxETEZkQlFYUkNPMEZCUTBGdVNDeFJRVUZKYjBnc1VVRkJTaXhIUVVGbFJpeExRVUZKUlN4UlFVRnVRanRCUVVOQmNFZ3NVVUZCU1hGSUxGRkJRVW9zUjBGQlpVZ3NTMEZCU1Vjc1VVRkJia0k3UVVGRFFYSklMRkZCUVVselNDeFpRVUZLTEVkQlFXMUNTaXhMUVVGSlJ5eFJRVUZLTEVOQlFXRkZMRmRCUVdJc1JVRkJia0k3UVVGRFFYWklMRkZCUVVsM1NDeEZRVUZLTEVkQlFWTk9MRXRCUVVsTkxFVkJRV0k3UVVGRFFYaElMRkZCUVVsNVNDeFRRVUZLTEVkQlFXZENVQ3hMUVVGSlR5eFRRVUZ3UWp0QlFVTkJla2dzVVVGQlNUQklMR0ZCUVVvc1IwRkJiMEpTTEV0QlFVbFJMR0ZCUVhoQ08wRkJRMEV4U0N4UlFVRkpNa2dzWTBGQlNpeEhRVUZ4UWxRc1MwRkJTVk1zWTBGQmVrSTdRVUZEUVROSUxGRkJRVWswU0N4eFFrRkJTaXhIUVVFMFFsWXNTMEZCU1ZVc2NVSkJRV2hETzBGQlEwRTFTQ3hSUVVGSk5rZ3NXVUZCU2l4SFFVRnRRbGdzUzBGQlNWY3NXVUZCZGtJN1FVRkRRVGRJTEZGQlFVazRTQ3haUVVGS0xFZEJRVzFDV2l4TFFVRkpXU3haUVVGMlFqdEJRVU5CT1Vnc1VVRkJTU3RJTEdOQlFVb3NSMEZCY1VKaUxFdEJRVWxqTEZsQlFYcENPenRCUVVWQmNFa3NXVUZCVVc5SUxGVkJRVklzUjBGQmNVSXhTQ3hUUVVGeVFqdEJRVU5JTEVkQmJrSkVMRTFCYjBKTExFbEJRVWxLTEdGQlFXRXJTU3hQUVVGUFF5eGhRVUY0UWl4RlFVRjFRenRCUVVONFEyeEpMRkZCUVVsdlNDeFJRVUZLTEVkQlFXVXNTMEZCWmp0QlFVTkJjRWdzVVVGQlNWZ3NVVUZCU2l4SFFVRmxWeXhKUVVGSlowUXNWMEZCYmtJN1FVRkRRV2hFTEZGQlFVbHhTQ3hSUVVGS0xFZEJRV1Z5U0N4SlFVRkpiMElzWjBKQlFXNUNPMEZCUTBGd1FpeFJRVUZKYzBnc1dVRkJTaXhIUVVGdFFtaEpMRk5CUVc1Q08wRkJRMEZWTEZGQlFVbDNTQ3hGUVVGS0xFZEJRVlU3UVVGRFRsY3NZMEZCVVc1SkxFbEJRVWswUWl4TlFVUk9PMEZCUlU1M1J5eGhRVUZQY0Vrc1NVRkJTWFZDTEZWQlJrdzdRVUZIVGpoSExHRkJRVTl5U1N4SlFVRkplVUk3UVVGSVRDeExRVUZFTEVOQlNVNDJSeXhSUVVGUmFrb3NVVUZLUml4TFFVbGxWeXhKUVVGSkswSXNWVUZLTlVJN1FVRkxRUzlDTEZGQlFVbHRTQ3hYUVVGS0xFZEJRV3RDTEVsQlFXeENPMEZCUTBGdVNDeFJRVUZKTWtnc1kwRkJTaXhIUVVGeFFpeEpRVUZ5UWp0QlFVTkJNMGdzVVVGQlNUUklMSEZDUVVGS0xFZEJRVFJDTzBGQlEzaENWeXhoUVVGUExFTkJSR2xDTzBGQlJYaENReXhqUVVGUk8wRkJSbWRDTEV0QlFUVkNPMEZCU1VGNFNTeFJRVUZKSzBnc1kwRkJTaXhIUVVGeFFpeEZRVUZ5UWp0QlFVTklMRWRCYWtKSkxFMUJhMEpCTEVsQlFVbDBReXhWUVVGVlF5eFZRVUZrTEVWQlFUQkNPMEZCUXpOQ0xGRkJRVWx5Unl4cFFrRkJTanRCUVVOQkxGRkJRVWxITEZWQlFVb3NSVUZCWjBJN1FVRkRXa2dzYVVKQlFWZFhMRWxCUVVseFJDeFRRVUZtTzBGQlEwZ3NTMEZHUkN4TlFVVlBMRWxCUVVrMVJDeFZRVUZLTEVWQlFXZENPMEZCUTI1Q1NpeHBRa0ZCVjFjc1NVRkJTWE5FTEZOQlFXWTdRVUZEU0N4TFFVWk5MRTFCUlVFc1NVRkJTVFZFTEZsQlFVb3NSVUZCYTBJN1FVRkRja0pNTEdsQ1FVRlhWeXhKUVVGSmRVUXNWMEZCWmp0QlFVTklMRXRCUmswc1RVRkZRU3hKUVVGSk5VUXNVMEZCU2l4RlFVRmxPMEZCUTJ4Q1RpeHBRa0ZCVjFjc1NVRkJTWGxFTEZGQlFXWTdRVUZEU0N4TFFVWk5MRTFCUjBZN1FVRkRSSEJGTEdsQ1FVRlhiMG9zWlVGQldEdEJRVU5JTzBGQlEwUjZTU3hSUVVGSldDeFJRVUZLTEVkQlFXVkJMRkZCUVdZN1FVRkRRVmNzVVVGQlNXOUlMRkZCUVVvc1IwRkJaMEl2U0N4aFFVRmhWeXhKUVVGSmIwTXNUMEZCYWtJc1NVRkRRUzlETEdGQlFXRlhMRWxCUVVselF5eEpRVVJxUWl4SlFVVkJha1FzWVVGQllWY3NTVUZCU1hGRExFMUJSbXBDTEVsQlIwRm9SQ3hoUVVGaFZ5eEpRVUZKTkVNc1IwRklha0lzU1VGSlFYWkVMR0ZCUVdGWExFbEJRVWt3UXl4TFFVcHFRaXhKUVV0QmNrUXNZVUZCWVZjc1NVRkJTWFZETEZWQlRHcENMRWxCVFVGc1JDeGhRVUZoVnl4SlFVRkpkMFFzVjBGT2FrSXNTVUZQUVdoRkxGVkJVRUVzU1VGUlFVTXNWVUZTUVN4SlFWTkJReXhaUVZSQkxFbEJWVUZETEZOQlZtaENPenRCUVZsQlN5eFJRVUZKZDBnc1JVRkJTaXhIUVVGVGEwSXNVMEZCVkR0QlFVTkJNVWtzVVVGQlNYRklMRkZCUVVvc1IwRkJaWE5DTEhOQ1FVRm1PMEZCUTBFc1VVRkJTWEpDTEZsQlFVbzdRVUZEUVN4UlFVRkpOMElzVFVGQlNpeEZRVUZaTzBGQlExSTJRaXh4UWtGQlpYTkNMREJDUVVGbU8wRkJRMGc3UVVGRFJEVkpMRkZCUVVselNDeFpRVUZLTEVkQlFXMUNRU3hsUVVGbFFTeGhRVUZoUXl4WFFVRmlMRVZCUVdZc1IwRkJORU5xU1N4VFFVRXZSRHRCUVVOQlZTeFJRVUZKZVVnc1UwRkJTaXhIUVVGblFtOUNMR2RDUVVGb1FqdEJRVU5CTjBrc1VVRkJTVEJJTEdGQlFVb3NSMEZCYjBKdlFpeFRRVUZUT1Vrc1NVRkJTWGxJTEZOQlFXSXNRMEZCY0VJN1FVRkRRWHBJTEZGQlFVbHRTQ3hYUVVGS0xFZEJRV3RDTEVsQlFXeENPMEZCUTBGdVNDeFJRVUZKTWtnc1kwRkJTaXhIUVVGeFFpeEpRVUZ5UWpzN1FVRkZRU3hSUVVGSmIwSXNTVUZCU1RWS0xFOUJRVTgyU2l4VlFVRm1PMEZCUTBFc1VVRkJTVU1zU1VGQlNUbEtMRTlCUVU4clNpeFhRVUZtTzBGQlEwRXNVVUZCU1VNc1VVRkJVV2hMTEU5QlFVOXBTeXhuUWtGQlVDeEpRVUV5UWl4RFFVRjJRenRCUVVOQmNFb3NVVUZCU1RSSUxIRkNRVUZLTEVkQlFUUkNPMEZCUTNoQ1Z5eGhRVUZQV1N4UlFVRlJTaXhEUVVSVE8wRkJSWGhDVUN4alFVRlJWeXhSUVVGUlJqdEJRVVpSTEV0QlFUVkNPenRCUVV0QmFrb3NVVUZCU1RaSUxGbEJRVW9zUjBGQmJVSXhTU3hQUVVGUE1Fa3NXVUZCTVVJN08wRkJSVUVzVVVGQlNVTXNXVUZCU2p0QlFVTkJRU3h0UWtGQlpUbElMRWxCUVVrNFNDeFpRVUZLTEVkQlFXMUNPMEZCUXpsQ0xHZENRVUZWTEV0QlJHOUNPMEZCUlRsQ0xHZENRVUZWTEVsQlJtOUNPMEZCUnpsQ0xHTkJRVkU3UVVGSWMwSXNTMEZCYkVNN08wRkJUVVFzVVVGQlNUbElMRWxCUVVsdlNDeFJRVUZTTEVWQlFXdENPMEZCUTJKVkxHMUNRVUZoTEdWQlFXSXNTVUZCWjBNc1NVRkJhRU03UVVGRFFVRXNiVUpCUVdFc1UwRkJZaXhKUVVFd1FpeEpRVUV4UWp0QlFVTklMRXRCU0VZc1RVRkhVVHRCUVVOSU8wRkJRMEZCTEcxQ1FVRmhMRlZCUVdJc1NVRkJNa0lzU1VGQk0wSTdRVUZEUVVFc2JVSkJRV0VzVDBGQllpeEpRVUYzUWl4SlFVRjRRanRCUVVOQlFTeHRRa0ZCWVN4VFFVRmlMRWxCUVRCQ0xFdEJRVEZDTzBGQlEwZzdPMEZCUlVRNVNDeFJRVUZKSzBnc1kwRkJTaXhIUVVGeFFqdEJRVU5xUW5OQ0xHZENRVUZWTEV0QlJFODdRVUZGYWtKRExHbENRVUZYTEV0QlJrMDdRVUZIYWtKRExIZENRVUZyUWl4TFFVaEVPMEZCU1dwQ1F5eGpRVUZSTEVOQlFVTXNUVUZCUkR0QlFVcFRMRXRCUVhKQ08wRkJUVWdzUjBGNFJVa3NUVUY1UlVFc1NVRkJTVE5FTEdGQlFVb3NSVUZCYlVJN1FVRkRjRUlzVVVGQlNYRkNMRTFCUVUxMVF5eEhRVUZIUXl4cFFrRkJTQ3hGUVVGV08wRkJRMEV4U2l4UlFVRkpiMGdzVVVGQlNpeEhRVUZsTEVsQlFXWTdRVUZEUVhCSUxGRkJRVWxZTEZGQlFVb3NSMEZCWlZjc1NVRkJTV2xFTEZkQlFXNUNPMEZCUTBGcVJDeFJRVUZKY1Vnc1VVRkJTaXhIUVVGbFNDeEpRVUZKUnl4UlFVRktMRU5CUVdGelF5eE5RVUZpTEVOQlFXOUNMRU5CUVhCQ0xFVkJRWFZDTEVOQlFYWkNMRU5CUVdZN1FVRkRRVE5LTEZGQlFVbHpTQ3haUVVGS0xFZEJRVzFDU2l4SlFVRkpSeXhSUVVGS0xFTkJRV0ZGTEZkQlFXSXNSVUZCYmtJN1FVRkRRU3hSUVVGSmNVTXNVMEZCVXpGRExFbEJRVWt3UXl4TlFVRktMRU5CUVZkeVF5eFhRVUZZTEVWQlFXSTdRVUZEUVN4UlFVRkpUQ3hKUVVGSk4wZ3NVVUZCU2l4TFFVRnBRaXhUUVVGeVFpeEZRVUZuUXp0QlFVTTFRbGNzVlVGQlNYZElMRVZCUVVvc1IwRkJVM2hJTEVsQlFVbHpRaXhWUVVGaU8wRkJRMGdzUzBGR1JDeE5RVWRMTEVsQlFVazBSaXhKUVVGSk4wZ3NVVUZCU2l4TFFVRnBRaXhMUVVGeVFpeEZRVUUwUWp0QlFVTTNRbGNzVlVGQlNYZElMRVZCUVVvc1IwRkJVM2hJTEVsQlFVbHhRaXhOUVVGaU8wRkJRMGdzUzBGR1NTeE5RVWRCTEVsQlFVazJSaXhKUVVGSk4wZ3NVVUZCU2l4TFFVRnBRaXhWUVVGeVFpeEZRVUZwUXp0QlFVTnNRMWNzVlVGQlNXOUlMRkZCUVVvc1IwRkJaU3hMUVVGbU8wRkJRMEVzVlVGQlNYZERMRTlCUVU5RExFOUJRVkFzUTBGQlpTeFRRVUZtTEVsQlFUUkNMRU5CUVVNc1EwRkJha01zUlVGQmIwTTdRVUZEYUVNM1NpeFpRVUZKZDBnc1JVRkJTaXhIUVVGVGVFZ3NTVUZCU1hOQ0xGVkJRV0k3UVVGRFNDeFBRVVpFTEUxQlIwc3NTVUZCU1hOSkxFOUJRVTlETEU5QlFWQXNRMEZCWlN4TFFVRm1MRWxCUVhkQ0xFTkJRVU1zUTBGQk4wSXNSVUZCWjBNN1FVRkRha00zU2l4WlFVRkpkMGdzUlVGQlNpeEhRVUZUZUVnc1NVRkJTWEZDTEUxQlFXSTdRVUZEU0R0QlFVTktPMEZCUTBRN1FVRkRRU3hSUVVGSmRVa3NWMEZCVnl4WFFVRm1MRVZCUVRSQ08wRkJRM2hDUVN4bFFVRlRMR1ZCUVZRN1FVRkRTRHM3UVVGRlJDeFJRVUZKUlN4VlFVRlZMRlZCUVZWRExFbEJRVllzUTBGQlpVZ3NUVUZCWml4RFFVRmtPMEZCUTBFMVNpeFJRVUZKZVVnc1UwRkJTaXhIUVVGblFuRkRMRlZCUVZWQkxGRkJRVkVzUTBGQlVpeERRVUZXTEVkQlFYVkNSaXhOUVVGMlF6dEJRVU5CTlVvc1VVRkJTVEJJTEdGQlFVb3NSMEZCYjBKdlFpeFRRVUZUT1Vrc1NVRkJTWGxJTEZOQlFXSXNRMEZCY0VJN1FVRkRRVHRCUVVOQkxGRkJRVWwxUXl4blFrRkJTaXhGUVVGelFqdEJRVU5zUW1oTExGVkJRVWx0U0N4WFFVRktMRWRCUVd0Q2JrZ3NTVUZCU1RaRUxEUkNRVUYwUWp0QlFVTklMRXRCUmtRc1RVRkhTenRCUVVORU4wUXNWVUZCU1cxSUxGZEJRVW9zUjBGQmEwSnVTQ3hKUVVGSk5FUXNkMEpCUVhSQ08wRkJRMGc3UVVGRFJEVkVMRkZCUVVreVNDeGpRVUZLTEVkQlFYRkNWQ3hKUVVGSk5FTXNUMEZCZWtJN08wRkJSVUVzVVVGQlNXWXNTVUZCU1RkQ0xFbEJRVWtyUXl4WFFVRmFPMEZCUTBFc1VVRkJTV2hDTEVsQlFVa3ZRaXhKUVVGSlowUXNXVUZCV2p0QlFVTkJMRkZCUVVsbUxGRkJRVkZxUXl4SlFVRkphVVFzVlVGQlNpeEpRVUZyUWl4RFFVRTVRanRCUVVOQmJrc3NVVUZCU1RSSUxIRkNRVUZLTEVkQlFUUkNPMEZCUTNoQ1Z5eGhRVUZQV1N4UlFVRlJTaXhEUVVSVE8wRkJSWGhDVUN4alFVRlJWeXhSUVVGUlJqdEJRVVpSTEV0QlFUVkNPenRCUVV0QmFrb3NVVUZCU1RaSUxGbEJRVW9zUjBGQmJVSXhTU3hQUVVGUE1Fa3NXVUZCTVVJN08wRkJSVUVzVVVGQlNYVkRMR2RDUVVGblFrTXNaVUZCWlN4TFFVRnVRenRCUVVOQkxGRkJRVWs3UVVGRFFTeFZRVUZKUXl4VlFVRlZNVVVzVTBGQlV6SkZMR0ZCUVZRc1EwRkJkVUlzVVVGQmRrSXNRMEZCWkR0QlFVTkJTQ3h6UWtGQlowSkZMRkZCUVZGRkxGVkJRVklzUTBGQmJVSXNUMEZCYmtJc1EwRkJhRUk3UVVGRFFVZ3NjVUpCUVdWRExGRkJRVkZITEZOQlFWSXNRMEZCYTBJc1dVRkJiRUlzUlVGQlowTkRMRlZCUVdoRExFTkJRVEpETEdsQ1FVRXpReXhEUVVGbU8wRkJRMGdzUzBGS1JDeERRVXRCTEU5QlFVOURMRWRCUVZBc1JVRkJXU3hEUVVGSE96dEJRVVZtTTBzc1VVRkJTVGhJTEZsQlFVb3NSMEZCYlVJN1FVRkRaaXhuUWtGQlZTeEpRVVJMTzBGQlJXWXNaMEpCUVZVc1EwRkJReXhEUVVGRGMwTXNZVUZHUnp0QlFVZG1MR05CUVZGRE8wRkJTRThzUzBGQmJrSTdRVUZMUVhKTExGRkJRVWtyU0N4alFVRktMRWRCUVhGQ08wRkJRMnBDYzBJc1owSkJRVlVzUzBGRVR6dEJRVVZxUWtNc2FVSkJRVmNzUzBGR1RUdEJRVWRxUWtNc2QwSkJRV3RDTEV0QlNFUTdRVUZKYWtKRExHTkJRVkVzUTBGQlF5eE5RVUZFTzBGQlNsTXNTMEZCY2tJN1FVRk5TQ3hIUVhCRlNTeE5RWEZGUVN4SlFVRkpNVVFzVTBGQlNpeEZRVUZsTzBGQlEyaENMRkZCUVVsdlFpeE5RVUZOTDBnc1QwRkJUeXhKUVVGUUxFVkJRV0VzVlVGQllpeEZRVUY1UWl4cFFrRkJla0lzUjBGQlZqdEJRVU5CWVN4UlFVRkpiMGdzVVVGQlNpeEhRVUZsTEVsQlFXWTdRVUZEUVhCSUxGRkJRVWxZTEZGQlFVb3NSMEZCWlZjc1NVRkJTV3RFTEU5QlFXNUNPMEZCUTBGc1JDeFJRVUZKY1Vnc1VVRkJTaXhIUVVGbGNrZ3NTVUZCU1c5Q0xHZENRVUZ1UWp0QlFVTkJjRUlzVVVGQlNYTklMRmxCUVVvc1IwRkJiVUpvU1N4VFFVRnVRanRCUVVOQkxGRkJRVWswU0N4SlFVRkpOMGdzVVVGQlNpeExRVUZwUWl4VFFVRnlRaXhGUVVGblF6dEJRVU0xUWxjc1ZVRkJTWGRJTEVWQlFVb3NSMEZCVTNoSUxFbEJRVWx6UWl4VlFVRmlPMEZCUTBnc1MwRkdSQ3hOUVVkTExFbEJRVWswUml4SlFVRkpOMGdzVVVGQlNpeExRVUZwUWl4TFFVRnlRaXhGUVVFMFFqdEJRVU0zUWxjc1ZVRkJTWGRJTEVWQlFVb3NSMEZCVTNoSUxFbEJRVWx4UWl4TlFVRmlPMEZCUTBnc1MwRkdTU3hOUVVkQk8wRkJRMFJ5UWl4VlFVRkpkMGdzUlVGQlNpeEhRVUZUZUVnc1NVRkJTU3RDTEZWQlFXSTdRVUZEU0R0QlFVTkVMMElzVVVGQlNYbElMRk5CUVVvc1IwRkJaMEpRTEVsQlFVazBReXhQUVVGd1FqdEJRVU5CT1Vvc1VVRkJTVEJJTEdGQlFVb3NSMEZCYjBKdlFpeFRRVUZUT1Vrc1NVRkJTWGxJTEZOQlFVb3NRMEZCWTIxRUxFdEJRV1FzUTBGQmIwSXNSMEZCY0VJc1JVRkJlVUlzUTBGQmVrSXNRMEZCVkN4RFFVRndRanRCUVVOQk5Vc3NVVUZCU1cxSUxGZEJRVW9zUjBGQmEwSnVTQ3hKUVVGSmEwVXNiMEpCUVhSQ08wRkJRMEZzUlN4UlFVRkpNa2dzWTBGQlNpeEhRVUZ4UWl4RFFVRnlRanM3UVVGRlFTeFJRVUZKYjBJc1NVRkJTVGRDTEVsQlFVa3lSQ3hYUVVGYU8wRkJRMEVzVVVGQlNUVkNMRWxCUVVrdlFpeEpRVUZKTkVRc1dVRkJXanRCUVVOQkxGRkJRVWt6UWl4UlFVRlJha01zU1VGQlNXbEVMRlZCUVVvc1NVRkJhMElzUTBGQk9VSTdPMEZCUlVGdVN5eFJRVUZKTkVnc2NVSkJRVW9zUjBGQk5FSTdRVUZEZUVKWExHRkJRVTlaTEZGQlFWRktMRU5CUkZNN1FVRkZlRUpRTEdOQlFWRlhMRkZCUVZGR08wRkJSbEVzUzBGQk5VSTdPMEZCUzBGcVNpeFJRVUZKTmtnc1dVRkJTaXhIUVVGdFFqRkpMRTlCUVU4d1NTeFpRVUV4UWpzN1FVRkZRVGRJTEZGQlFVazRTQ3haUVVGS0xFZEJRVzFDTzBGQlEyWXNaMEpCUVZVc1MwRkVTenRCUVVWbUxHZENRVUZWTEVsQlJrczdRVUZIWml4alFVRlJPMEZCU0U4c1MwRkJia0k3UVVGTFFUbElMRkZCUVVrclNDeGpRVUZLTEVkQlFYRkNPMEZCUTJwQ2MwSXNaMEpCUVZVc1MwRkVUenRCUVVWcVFrTXNhVUpCUVZjc1MwRkdUVHRCUVVkcVFrTXNkMEpCUVd0Q0xFdEJTRVE3UVVGSmFrSkRMR05CUVZFc1EwRkJReXhOUVVGRU8wRkJTbE1zUzBGQmNrSTdRVUZOU0N4SFFURkRTU3hOUVRKRFFTeEpRVUZKYWtzc1YwRkJTaXhGUVVGcFFqdEJRVU5zUWl4UlFVRkpNa2dzVVVGQlRUWkVMRk5CUVZNNVJDeGhRVUZVTEVWQlFWWTdRVUZEUVdwSUxGRkJRVWxZTEZGQlFVb3NSMEZCWlRaSUxFMUJRVWszU0N4UlFVRnVRanRCUVVOQlZ5eFJRVUZKYlVnc1YwRkJTaXhIUVVGclFrUXNUVUZCU1VNc1YwRkJkRUk3UVVGRFFXNUlMRkZCUVVsdlNDeFJRVUZLTEVkQlFXVkdMRTFCUVVsRkxGRkJRVzVDTzBGQlEwRndTQ3hSUVVGSmNVZ3NVVUZCU2l4SFFVRmxTQ3hOUVVGSlJ5eFJRVUZ1UWp0QlFVTkJja2dzVVVGQlNYTklMRmxCUVVvc1IwRkJiVUpLTEUxQlFVbEhMRkZCUVVvc1EwRkJZVVVzVjBGQllpeEZRVUZ1UWp0QlFVTkJka2dzVVVGQlNYZElMRVZCUVVvc1IwRkJVMDRzVFVGQlNVMHNSVUZCWWp0QlFVTkJlRWdzVVVGQlNYbElMRk5CUVVvc1IwRkJaMEpRTEUxQlFVbFBMRk5CUVhCQ08wRkJRMEY2U0N4UlFVRkpNRWdzWVVGQlNpeEhRVUZ2UWxJc1RVRkJTVkVzWVVGQmVFSTdRVUZEUVRGSUxGRkJRVWt5U0N4alFVRktMRWRCUVhGQ1ZDeE5RVUZKVXl4alFVRjZRanRCUVVOQk0wZ3NVVUZCU1RSSUxIRkNRVUZLTEVkQlFUUkNWaXhOUVVGSlZTeHhRa0ZCYUVNN1FVRkRRVFZJTEZGQlFVazJTQ3haUVVGS0xFZEJRVzFDV0N4TlFVRkpWeXhaUVVGMlFqdEJRVU5CTjBnc1VVRkJTVGhJTEZsQlFVb3NSMEZCYlVKYUxFMUJRVWxaTEZsQlFYWkNPMEZCUTBFNVNDeFJRVUZKSzBnc1kwRkJTaXhIUVVGeFFtSXNUVUZCU1dNc1dVRkJla0k3UVVGRFNDeEhRV1pKTEUxQlowSkJPMEZCUTBRN1FVRkRRU3hSUVVGSlowUXNUVUZCVFRkTUxFMUJRVlk3UVVGQlFTeFJRVUZyUWpoTUxFMUJRVTFFTEVsQlFVbEZMRk5CUVRWQ08wRkJRVUVzVVVGQmRVTkRMRTFCUVUxMlJpeFJRVUUzUXp0QlFVRkJMRkZCUVhWRWQwWXNVMEZCVTBRc1NVRkJTVVVzWlVGQmNFVTdRVUZEUVN4UlFVRkpReXhMUVVGTFRDeEpRVUZKVFN4VFFVRktMRU5CUVdOb1JTeFhRVUZrTEVWQlFWUTdPMEZCUlVFc1VVRkJTWEpKTEZOQlFVb3NSVUZCWlR0QlFVTllZeXhWUVVGSmIwZ3NVVUZCU2l4SFFVRmxMRXRCUVdZN1FVRkRRWEJJTEZWQlFVbFlMRkZCUVVvc1IwRkJaVmNzU1VGQlNTdERMRmRCUVc1Q08wRkJRMGdzUzBGSVJDeE5RVWxMTzBGQlEwUTdPenM3UVVGSlFTOURMRlZCUVVsdlNDeFJRVUZLTEVkQlFXVXNOa0pCUVRaQ2IwVXNTVUZCTjBJc1EwRkJhME5HTEVWQlFXeERMRU5CUVdZN08wRkJSVUU3T3pzN1FVRkpRU3hWUVVGSkxFOUJRVTlITEZsQlFWQXNTMEZCZDBJc1YwRkJOVUlzUlVGQmVVTTdRVUZEY2tONlRDeFpRVUZKV0N4UlFVRktMRWRCUVdWWExFbEJRVWx0UkN4bFFVRnVRanRCUVVOSUxFOUJSa1FzVFVGSFN6dEJRVU5FYmtRc1dVRkJTVmdzVVVGQlNpeEhRVUZsVnl4SlFVRkpiMGdzVVVGQlNpeEhRVUZsY0Vnc1NVRkJTVFpETEdOQlFXNUNMRWRCUVc5RE4wTXNTVUZCU1RoRExHVkJRWFpFTzBGQlEwZzdRVUZEU2pzN1FVRkZSQ3hSUVVGSk5Fa3NaVUZCWlZRc1NVRkJTVFZFTEZGQlFYWkNPMEZCUTBGeFJTeHRRa0ZCWlVFc1pVRkJaVUVzV1VGQlppeEhRVUU0UWxRc1NVRkJTVlVzWlVGQmFrUTdPMEZCUlVFN096czdPenRCUVUxQk0wd3NVVUZCU1hOSUxGbEJRVW9zUjBGQmJVSnZSU3hoUVVGaGJrVXNWMEZCWWl4RlFVRnVRanM3UVVGRlFXMUZMRzFDUVVGbFFTeGxRVUZsUVN4aFFVRmhaQ3hMUVVGaUxFTkJRVzFDTEVkQlFXNUNMRVZCUVhkQ0xFTkJRWGhDTEVOQlFXWXNSMEZCTkVNMVN5eEpRVUZKUXl4blFrRkJMMFE3TzBGQlJVRTdPenM3UVVGSlFVUXNVVUZCU1hGSUxGRkJRVW9zUjBGQlpYRkZMRmxCUVdZN08wRkJSVUU3UVVGRFFTeFJRVUZKUlN4WlFVRlpMRXRCUVdoQ08wRkJRVUVzVVVGQmRVSkRMRTFCUVUwc1MwRkJOMEk3UVVGQlFTeFJRVUZ2UTNCRkxGbEJRVmtzUlVGQmFFUTdRVUZCUVN4UlFVRnZSRU1zWjBKQlFXZENMRU5CUVhCRk8wRkJRMEVzVVVGQlNXOUZMRmRCUVZjc01rSkJRVEpDTDBJc1NVRkJNMElzUTBGQlowTjFRaXhGUVVGb1F5eExRVUYxUXl3eVFrRkJNa0oyUWl4SlFVRXpRaXhEUVVGblEydENMRWxCUVVrMVRDeFJRVUZ3UXl4RFFVRjBSRHRCUVVOQkxGRkJRVWw1VFN4UlFVRktMRVZCUVdNN1FVRkRWa1lzYTBKQlFWa3NTVUZCV2p0QlFVTkJia1VzYTBKQlFWbHhSU3hUUVVGVExFTkJRVlFzUzBGQlpTeEZRVUV6UWp0QlFVTkJjRVVzYzBKQlFXZENiMElzVTBGQlUzSkNMRk5CUVZRc1MwRkJkVUlzUTBGQmRrTTdRVUZEU0R0QlFVTkVjVVVzWlVGQlZ5eDVRMEZCZVVNdlFpeEpRVUY2UXl4RFFVRTRRM1ZDTEVWQlFUbERMRU5CUVZnN1FVRkRRU3hSUVVGSlVTeFJRVUZLTEVWQlFXTTdRVUZEVmtRc1dVRkJUU3hKUVVGT08wRkJRMEZ3UlN4clFrRkJXWEZGTEZOQlFWTXNRMEZCVkN4TFFVRmxMRVZCUVROQ08wRkJRMEZ3UlN4elFrRkJaMEp2UWl4VFFVRlRja0lzVTBGQlZDeExRVUYxUWl4RFFVRjJRenRCUVVOSUxFdEJTa1FzVFVGTFN5eEpRVUZKTEhGQ1FVRnhRbk5ETEVsQlFYSkNMRU5CUVRCQ2EwSXNTVUZCU1RWTUxGRkJRVGxDTEVOQlFVb3NSVUZCTmtNN1FVRkRPVU4zVFN4WlFVRk5MRWxCUVU0N1FVRkRRWEJGTEd0Q1FVRlpMRVZCUVZvN1FVRkRRVU1zYzBKQlFXZENMRU5CUVdoQ08wRkJRMGc3TzBGQlJVUXNVVUZCU1hGRkxGTkJRVk12VEN4SlFVRkpLMElzVlVGQmFrSTdRVUZEUVN4UlFVRkphMG9zU1VGQlNXVXNWVUZCU2l4RFFVRmxia01zVDBGQlppeERRVUYxUWl4TFFVRjJRaXhOUVVGclF5eERRVUZETEVOQlFYWkRMRVZCUVRCRGEwTXNVMEZCVXk5TUxFbEJRVWwxUWl4VlFVRmlMRU5CUVRGRExFdEJRMHNzU1VGQlNYTkxMRWRCUVVvc1JVRkJVMFVzVTBGQlV5OU1MRWxCUVVseFFpeE5RVUZpTEVOQlFWUXNTMEZEUVN4SlFVRkpORW9zU1VGQlNXVXNWVUZCU2l4RFFVRmxia01zVDBGQlppeERRVUYxUWl4TFFVRjJRaXhOUVVGclF5eERRVUZETEVOQlFYWkRMRVZCUVRCRGEwTXNVMEZCVXk5TUxFbEJRVWswUWl4TlFVRmlMRU5CUVRGRExFdEJRMEVzU1VGQlNYRktMRWxCUVVsbExGVkJRVW9zUTBGQlpXNURMRTlCUVdZc1EwRkJkVUlzUzBGQmRrSXNUVUZCYTBNc1EwRkJReXhEUVVGdVF5eEpRVUYzUTI5Q0xFbEJRVWxsTEZWQlFVb3NRMEZCWlc1RExFOUJRV1lzUTBGQmRVSXNUMEZCZGtJc1RVRkJiME1zUTBGQlF5eERRVUZxUml4RlFVRnZSbXRETEZOQlFWTXZUQ3hKUVVGSmFVMHNUMEZCWWl4RFFVRndSaXhMUVVOQkxFbEJRVWxNTEZOQlFVb3NSVUZCWlVjc1UwRkJVeTlNTEVsQlFVbHpRaXhWUVVGaUxFTkJRV1lzUzBGRFFTeEpRVUZKTWtvc1NVRkJTV1VzVlVGQlNpeERRVUZsYmtNc1QwRkJaaXhEUVVGMVFpeFBRVUYyUWl4TlFVRnZReXhEUVVGRExFTkJRWEpETEVsQlFUQkRlVUlzUjBGQlIzcENMRTlCUVVnc1EwRkJWeXhSUVVGWUxFMUJRWGxDTEVOQlFVTXNRMEZCZUVVc1JVRkJNa1ZyUXl4VFFVRlRMMHdzU1VGQlNYbENMRkZCUVdJN08wRkJSV2hHT3pzN08wRkJTVUY2UWl4UlFVRkpkMGdzUlVGQlNpeEhRVUZUZFVVc1RVRkJWRHRCUVVOQk96czdPMEZCU1VFdlRDeFJRVUZKZVVnc1UwRkJTaXhIUVVGblFrRXNVMEZCYUVJN1FVRkRRVHM3T3p0QlFVbEJla2dzVVVGQlNUQklMR0ZCUVVvc1IwRkJiMEpCTEdGQlFYQkNPenRCUVVWQk96czdPMEZCU1VFeFNDeFJRVUZKYlVnc1YwRkJTaXhIUVVGclFtNUlMRWxCUVVsMVJpeHZRa0ZCZEVJN1FVRkRRVHRCUVVOQkxFdEJRVU1zV1VGQlZUdEJRVU5RTEZWQlFVa3lSeXhYUVVGWExEUkpRVUZtTzBGQlEwRXNWVUZCU1VNc1YwRkJWeXh2UTBGQlpqdEJRVU5CTEZWQlFVbERMRmRCUVZjc2JVUkJRV1k3UVVGRFFTeFZRVUZKUXl4bFFVRmxTQ3hUUVVGVGJrTXNTVUZCVkN4RFFVRmpkVUlzUlVGQlpDeExRVUZ4UW1Fc1UwRkJVM0JETEVsQlFWUXNRMEZCWTNWQ0xFVkJRV1FzUTBGQmNrSXNTVUZCTUVOakxGTkJRVk55UXl4SlFVRlVMRU5CUVdOMVFpeEZRVUZrTEVOQlFUZEVPenRCUVVWQkxGVkJRVWx1UlN4alFVRmphMFlzWlVGQlpVRXNZVUZCWVN4RFFVRmlMRVZCUVdkQ09VVXNWMEZCYUVJc1JVRkJaaXhIUVVFclEzWklMRWxCUVVsMVJpeHZRa0ZCY2tVN1FVRkRRU3hWUVVGSlRTeGhRVUZLTEVWQlEwbHpRaXhqUVVGamJrZ3NTVUZCU1RSRUxIZENRVUZzUWl4RFFVUktMRXRCUlVzc1NVRkJTV3RETEZOQlFVb3NSVUZEUkhGQ0xHTkJRV051U0N4SlFVRkphMFVzYjBKQlFXeENMRU5CUkVNc1MwRkZRU3hKUVVGSmFVUXNaMEpCUVdkQ0xGRkJRV2hDTEVsQlFUUkNlVVVzVTBGQmFFTXNSVUZEUkhwRkxHTkJRV051U0N4SlFVRkpiVVVzYjBKQlFXeENMRU5CUkVNc1MwRkZRU3hKUVVGSlowUXNaMEpCUVdkQ0xFbEJRV2hDTEVsQlFYZENiVVVzUjBGQlIyZENMRXRCUVVnc1EwRkJVeXgxUWtGQlZDeERRVUUxUWl4RlFVTkVia1lzWTBGQlkyNUlMRWxCUVVsdFJTeHZRa0ZCYkVJN1FVRkRTaXhWUVVGSmIwa3NWVUZCVlR0QlFVTldMREJDUVVGclFuWk5MRWxCUVVreVJDeHRRa0ZFV2p0QlFVVldMRzFDUVVGWE0wUXNTVUZCU1c5RkxHVkJSa3c3UVVGSFZpeG5Ra0ZCVVhCRkxFbEJRVWx4UlN4cFFrRklSanRCUVVsV0xITkNRVUZqY2tVc1NVRkJTVEJGTEdkQ1FVcFNPMEZCUzFZc2NVSkJRV0V4UlN4SlFVRkpOa1VzYjBKQlRGQTdRVUZOVml4blFrRkJVVGRGTEVsQlFVazRSU3hyUWtGT1JqdEJRVTlXTEc5Q1FVRlpPVVVzU1VGQlNYZEZPMEZCVUU0c1QwRkJaRHM3UVVGVlFYaEZMRlZCUVVsdFNDeFhRVUZLTEVkQlFXdENiMFlzVVVGQlVYQkdMRmRCUVZJc1MwRkJkMEpCTEZkQlFURkRPMEZCUTBnc1MwRXhRa1E3TzBGQk5FSkJPenM3TzBGQlNVRnVTQ3hSUVVGSk1rZ3NZMEZCU2l4SFFVRnhRaXhGUVVGeVFqdEJRVU5CTzBGQlEwRXNTMEZCUXl4WlFVRlZPMEZCUTFBc1ZVRkJTVFpGTEdOQlFXTXNjMHRCUVd4Q08wRkJRMEVzVlVGQlNVTXNZMEZCWXl3MlJrRkJiRUk3UVVGRFFTeFZRVUZKUXl4TlFVRk5jRUlzUjBGQlIyZENMRXRCUVVnc1EwRkJVMFVzVjBGQlZDeERRVUZXTzBGQlEwRXNWVUZCUnl4RFFVRkRSU3hIUVVGS0xFVkJRVk5CTEUxQlFVMXdRaXhIUVVGSFowSXNTMEZCU0N4RFFVRlRSeXhYUVVGVUxFTkJRVTQ3UVVGRFZIcE5MRlZCUVVreVNDeGpRVUZLTEVkQlFYRkNLMFVzVFVGQlRVRXNTVUZCU1N4RFFVRktMRU5CUVU0c1IwRkJaU3hGUVVGd1F6dEJRVU5JTEV0QlRrUTdPMEZCVVVFc1VVRkJTVE5FTEVsQlFVazFTaXhQUVVGUE5rb3NWVUZCVUN4SlFVRnhRbkJFTEZOQlFWTjVSaXhsUVVGVUxFTkJRWGxDYzBJc1YwRkJkRVE3UVVGRFFTeFJRVUZKTVVRc1NVRkJTVGxLTEU5QlFVOHJTaXhYUVVGUUxFbEJRWE5DZEVRc1UwRkJVM2xHTEdWQlFWUXNRMEZCZVVKMVFpeFpRVUYyUkR0QlFVTkJMRkZCUVVsNlJDeFJRVUZSYUVzc1QwRkJUMmxMTEdkQ1FVRlFMRWxCUVRKQ0xFTkJRWFpET3p0QlFVVkJPenM3TzBGQlNVRndTaXhSUVVGSk5FZ3NjVUpCUVVvc1IwRkJORUk3UVVGRGVFSlhMR0ZCUVU5WkxGRkJRVkZLTEVOQlJGTTdRVUZGZUVKUUxHTkJRVkZYTEZGQlFWRkdPMEZCUmxFc1MwRkJOVUk3TzBGQlMwRnFTaXhSUVVGSk5rMHNjVUpCUVVvc1IwRkJORUlzV1VGQldUdEJRVU53UXl4VlFVRkpPVTBzUjBGQlJ6QkhMRWxCUVVnc1EwRkJVWEZITEZWQlFWSXNTMEZCZFVJdlRTeEhRVUZITUVjc1NVRkJTQ3hEUVVGUmMwY3NhVUpCUVc1RExFVkJRMGtzVFVGQlRTeEpRVUZKUXl4TFFVRktMRU5CUVZVc0swTkJRVllzUTBGQlRqdEJRVU5RTEV0QlNFUTdPMEZCUzBFc1VVRkJTVU1zWTBGQlkzSklMRk5CUVZNeVJTeGhRVUZVTEVOQlFYVkNMRkZCUVhaQ0xFTkJRV3hDT3p0QlFVVkJMRkZCUVVreVF5eHJRa0ZCYTBJc1UwRkJiRUpCTEdWQlFXdENMRU5CUVZWRExFMUJRVllzUlVGQmEwSkRMRmRCUVd4Q0xFVkJRU3RDUXl4bFFVRXZRaXhGUVVGblJEdEJRVU5zUlN4VlFVRkpRU3hsUVVGS0xFVkJRWEZDTzBGQlEycENMRmxCUVVrN1FVRkRRU3hwUWtGQlQwWXNUMEZCVHpORExGVkJRVkFzUTBGQmEwSTJReXhsUVVGc1FpeEZRVUZ0UTBRc1YwRkJia01zUTBGQlVEdEJRVU5JTEZOQlJrUXNRMEZGUlN4UFFVRlBSU3hEUVVGUUxFVkJRVlU3UVVGRFVpeHBRa0ZCVHl4SlFVRlFPMEZCUTBnN1FVRkRTaXhQUVU1RUxFMUJUMHM3UVVGRFJDeGxRVUZQU2l4blFrRkJaMEpETEUxQlFXaENMRVZCUVhkQ1F5eFhRVUY0UWl4RlFVRnhReXhQUVVGeVF5eExRVU5JUml4blFrRkJaMEpETEUxQlFXaENMRVZCUVhkQ1F5eFhRVUY0UWl4RlFVRnhReXh2UWtGQmNrTXNRMEZFUnl4SlFVVklSaXhuUWtGQlowSkRMRTFCUVdoQ0xFVkJRWGRDUXl4WFFVRjRRaXhGUVVGeFF5eFhRVUZ5UXl4RFFVWkhMRWxCUjBoR0xHZENRVUZuUWtNc1RVRkJhRUlzUlVGQmQwSkRMRmRCUVhoQ0xFVkJRWEZETEZkQlFYSkRMRU5CU0Vjc1NVRkpTQ3hKUVVwS08wRkJTMGc3UVVGRFNpeExRV1pFT3p0QlFXbENRVHM3T3p0QlFVbEJMRkZCUVVrN1FVRkRRU3hWUVVGSmRrWXNaVUZCWlRkSUxFbEJRVWsyU0N4WlFVRktMRWRCUVcxQ2JVUXNTVUZCU1c1RUxGbEJRVEZETzBGQlEwRkJMRzFDUVVGaE1FWXNUMEZCWWl4RFFVRnhRaXhUUVVGeVFpeEZRVUZuUXl4RlFVRm9RenRCUVVOQk1VWXNiVUpCUVdFeVJpeFZRVUZpTEVOQlFYZENMRk5CUVhoQ08wRkJRMEV6Uml4eFFrRkJaU3hKUVVGbU8wRkJRMGdzUzBGTVJDeERRVXRGTEU5QlFVOTVSaXhEUVVGUUxFVkJRVlU3UVVGRFVpeFZRVUZKUnl4UFFVRlBMRk5CUVZCQkxFbEJRVThzUjBGQldUdEJRVU51UWpGT0xGZEJRVWN5VGl4TlFVRklMRU5CUVZVc1NVRkJWanRCUVVOSUxFOUJSa1E3UVVGSFFURk9MRlZCUVVrMlNDeFpRVUZLTEVkQlFXMUNPMEZCUTJZNFJpeHBRa0ZCVlVZc1NVRkVTenRCUVVWbVJpeHBRa0ZCVlVVc1NVRkdTenRCUVVkbVJDeHZRa0ZCWVVNc1NVRklSVHRCUVVsbVJ5eGxRVUZSU0R0QlFVcFBMRTlCUVc1Q08wRkJUVWc3TzBGQlJVUXNVVUZCU1hCRUxHVkJRV1UwUXl4WlFVRlplRU1zVTBGQldpeERRVUZ6UWl4WlFVRjBRaXhGUVVGdlEwTXNWVUZCY0VNc1EwRkJLME1zYVVKQlFTOURMRU5CUVc1Q08wRkJRMEVzVVVGQlNXMUVMR2xDUVVGcFFpeERRVUZETEVOQlFVTmFMRmxCUVZsNlF5eFZRVUZhTEVOQlFYVkNMRWxCUVhaQ0xFTkJRWFpDTzBGQlEwRXNVVUZCU1Vvc1owSkJRV2RDTEV0QlFYQkNPMEZCUTBFc1VVRkJTVEJFTEU5QlFVb3NSVUZCWVR0QlFVTlVNVVFzYzBKQlFXZENMRXRCUVdoQ08wRkJRMGdzUzBGR1JDeE5RVWRMTEVsQlFVbHdTeXhKUVVGSmJVZ3NWMEZCU2l4TFFVRnZRbTVJTEVsQlFVazBSQ3gzUWtGQk5VSXNSVUZCYzBRN1FVRkRka1IzUnl4elFrRkJaMElzU1VGQmFFSTdRVUZEU0N4TFFVWkpMRTFCUjBFc1NVRkJTVmtzU1VGQlNTdERMSEZDUVVGU0xFVkJRU3RDTzBGQlEyaERNMFFzYzBKQlFXZENMRWxCUVdoQ08wRkJRMGc3TzBGQlJVUTdPenM3UVVGSlFTeFJRVUZKZEVNc1pVRkJaVGxJTEVsQlFVazRTQ3haUVVGS0xFZEJRVzFDTzBGQlEyeERMR2RDUVVGVkswWXNZMEZFZDBJN1FVRkZiRU1zWjBKQlFWVjZSQ3hoUVVaM1FqdEJRVWRzUXl4alFVRlJRenRCUVVnd1FpeExRVUYwUXp0QlFVdEJMRkZCUVVsbExFOUJRVThzWTBGQlVDeE5RVUV5UWpsTUxGTkJRVE5DTEVsQlFYZEROa3dzU1VGQlNTeGpRVUZLTEUxQlFYZENOMHdzVTBGQmFFVXNTVUZCTmtVeVRDeEpRVUZKSzBNc1owSkJRWEpHTEVWQlEwbHNSeXhoUVVGaExGTkJRV0lzU1VGQk1FSXNTVUZCTVVJN1FVRkRTaXhSUVVGSmMwUXNUMEZCVHl4WFFVRlFMRTFCUVhkQ09Vd3NVMEZCTlVJc1JVRkRTWGRKTEdGQlFXRXNUMEZCWWl4SlFVRjNRaXhKUVVGNFFqdEJRVU5LTEZGQlFVbHpSQ3hQUVVGUExGTkJRVkFzVFVGQmMwSTVUQ3hUUVVFeFFpeEZRVU5KZDBrc1lVRkJZU3hWUVVGaUxFbEJRVEpDTEVsQlFUTkNPMEZCUTBvc1VVRkJTV3RFTEVsQlFVbHBSQ3hwUWtGQlNpeEpRVUY1UW1wRUxFbEJRVWxyUkN4elFrRkJha01zUlVGRFNYQkhMR0ZCUVdFc1pVRkJZaXhKUVVGblF5eEpRVUZvUXpzN1FVRkZTaXhSUVVGSlF5eGpRVUZLT3p0QlFVVkJPenM3T3pzN096czdPenM3TzBGQllVRXNTMEZCUXl4WlFVRlZPenRCUVVWUUxGVkJRVWx2Unl4UlFVRlJMRXRCUVZvN08wRkJSVUVzVlVGQlNYSkZMRlZCUVZVNVNpeEpRVUZKTWtnc1kwRkJiRUk3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRlZCUVVsNVJ5eHJRa0ZCYTBKd1R5eEpRVUZKYlVnc1YwRkJTaXhMUVVGdlFtNUlMRWxCUVVrMFJDeDNRa0ZCZUVJc1NVRkRSaXhEUVVGRExFVkJRVVY2UlN4UFFVRlBhMUFzV1VGQlVDeEpRVUYxUW14UUxFOUJRVTl0VUN4clFrRkJPVUlzU1VGQmIwUnVVQ3hQUVVGUGIxQXNaVUZCTjBRc1EwRkVja0k3TzBGQlIwRjRSeXgxUWtGQmFVSXNSVUZCUlhOQ0xGVkJRVlVzUzBGQldpeEZRVUZ0UWtNc1YwRkJWemhGTEdWQlFUbENMRVZCUVN0RE4wVXNhMEpCUVd0Q0xFdEJRV3BGTEVWQlFXcENPenRCUVVWQkxGVkJRVWwyU2l4SlFVRkpkMGdzUlVGQlNpeExRVUZYZUVnc1NVRkJTWEZDTEUxQlFXNUNMRVZCUVRKQ08wRkJRM1pDTzBGQlEwRTdRVUZEUVR0QlFVTkJNRWNzZFVKQlFXVjVSeXhuUWtGQlppeEhRVUZyUXl4blFrRkJiRU03UVVGRFNEczdRVUZGUkN4VlFVRkplRThzU1VGQlNXMUlMRmRCUVVvc1MwRkJiMEp1U0N4SlFVRkphVVlzYjBKQlFUVkNMRVZCUVd0RU8wRkJRemxET0VNc2RVSkJRV1YzUWl4blFrRkJaaXhIUVVGclF5eEpRVUZzUXp0QlFVTkJlRUlzZFVKQlFXVjVSeXhuUWtGQlppeEhRVUZyUXl4VFFVRnNRenRCUVVOSU96dEJRVVZFTEZWQlFVbDRUeXhKUVVGSmQwZ3NSVUZCU2l4TFFVRlhlRWdzU1VGQlNYTkNMRlZCUVc1Q0xFVkJRU3RDTzBGQlF6TkNMRmxCUVVsMFFpeEpRVUZKYlVnc1YwRkJTaXhMUVVGdlFtNUlMRWxCUVVsM1JTeGxRVUUxUWl4RlFVRTJRenRCUVVONlEzVkVMSGxDUVVGbE1FY3NWVUZCWml4SFFVRTBRaXhKUVVFMVFqdEJRVU5JTzBGQlEwbzdPMEZCUlVRc1ZVRkJSMDRzUzBGQlNDeEZRVUZUTzBGQlEweFBMRzFDUVVGWExGbEJRVlU3UVVGRGFrSXpUeXhoUVVGSE5FOHNSMEZCU0N4RFFVRlBMR3RDUVVGclFqTlBMRWxCUVVsdFNDeFhRVUUzUWp0QlFVTkJjRWdzWVVGQlJ6UlBMRWRCUVVnc1EwRkJUeXh4UWtGQmNVSTNSU3hQUVVFMVFqdEJRVU5CTDBvc1lVRkJSelJQTEVkQlFVZ3NRMEZCVHl4dlFrRkJiMEkxUnl4bFFVRmxOa2NzWVVGQk1VTTdRVUZEUVRkUExHRkJRVWMwVHl4SFFVRklMRU5CUVU4c1owSkJRV2RDTlVjc1pVRkJaWFZDTEZOQlFYUkRPMEZCUTBGMlNpeGhRVUZITkU4c1IwRkJTQ3hEUVVGUExHVkJRV1UxUnl4bFFVRmxPRWNzVVVGQmNrTTdRVUZEU0N4VFFVNUVMRVZCVFVjc1EwRk9TRHRCUVU5SU8wRkJRMG9zUzBGNFEwUTdPMEZCTUVOQkxGRkJRVWs3UVVGRFFTeFZRVUZKT1Vjc1pVRkJaWFZDTEZOQlFXNUNMRVZCUVRoQ08wRkJRekZDZGtJc2RVSkJRV1VyUnl4UFFVRm1MRWRCUVhsQ0xFdEJRVXN6VUN4UFFVRlBhMUFzV1VGQlVDeEpRVUYxUW14UUxFOUJRVTl0VUN4clFrRkJPVUlzU1VGQmIwUnVVQ3hQUVVGUGIxQXNaVUZCYUVVc1IwRkJla0k3UVVGRFFTeFpRVUZIZUVjc1pVRkJaWGRDTEdkQ1FVRnNRaXhGUVVGdlF6dEJRVU5vUTIxR0xIRkNRVUZYTEZsQlFWVTdRVUZCUlROSExESkNRVUZsSzBjc1QwRkJaaXhIUVVGNVFpeExRVUZMTTFBc1QwRkJUMnRRTEZsQlFWQXNTVUZCZFVKc1VDeFBRVUZQYlZBc2EwSkJRVGxDTEVsQlFXOUVibEFzVDBGQlQyOVFMR1ZCUVdoRkxFZEJRWHBDTzBGQlFUaEhMRmRCUVhKSkxFVkJRWFZKTEVOQlFYWkpPMEZCUTBnN1FVRkRTanRCUVVOS0xFdEJVRVFzUTBGUFJTeFBRVUZOVVN4TFFVRk9MRVZCUVdFN1FVRkRXR2hJTEhGQ1FVRmxkVUlzVTBGQlppeEhRVUV5UWl4TFFVRXpRanRCUVVOQmRrb3NVMEZCUjJsUUxFdEJRVWdzUTBGQlV5eEpRVUZVTzBGQlEwZzdPMEZCUlVRc1VVRkJTVU1zWjBKQlFXZENMRVZCUVhCQ096dEJRVVZCTEV0QlFVTXNXVUZCVlR0QlFVTlFMRlZCUVVsRExGRkJRVkYwU2l4VFFVRlRNa1VzWVVGQlZDeERRVUYxUWl4UFFVRjJRaXhEUVVGYU8wRkJRMEVzVlVGQlJ6SkZMRTFCUVUxRExGZEJRVlFzUlVGQmMwSTdRVUZEYkVJc1dVRkJTVU1zVFVGQlRVWXNUVUZCVFVNc1YwRkJUaXhEUVVGclFpdzBRa0ZCYkVJc1EwRkJWanRCUVVOQkxGbEJRVWxETEVkQlFVb3NSVUZCVTBnc1kwRkJZMGtzU1VGQlpDeERRVUZ0UWl4TlFVRnVRanRCUVVOVUxGbEJRVWxETEUxQlFVMUtMRTFCUVUxRExGZEJRVTRzUTBGQmEwSXNXVUZCYkVJc1EwRkJWanRCUVVOQkxGbEJRVWxITEVkQlFVb3NSVUZCVTB3c1kwRkJZMGtzU1VGQlpDeERRVUZ0UWl4TlFVRnVRanRCUVVOVUxGbEJRVWxGTEUxQlFVMU1MRTFCUVUxRExGZEJRVTRzUTBGQmEwSXNkVUpCUVd4Q0xFTkJRVlk3UVVGRFFTeFpRVUZKU1N4SFFVRktMRVZCUVZOT0xHTkJRV05KTEVsQlFXUXNRMEZCYlVJc1RVRkJia0k3UVVGRFZDeFpRVUZKUnl4TlFVRk5UaXhOUVVGTlF5eFhRVUZPTEVOQlFXdENMRmRCUVd4Q0xFTkJRVlk3UVVGRFFTeFpRVUZKU3l4SFFVRktMRVZCUVZOUUxHTkJRV05KTEVsQlFXUXNRMEZCYlVJc1RVRkJia0k3UVVGRFZDeFpRVUZKU1N4TlFVRk5VQ3hOUVVGTlF5eFhRVUZPTEVOQlFXdENMR0ZCUVd4Q0xFTkJRVlk3UVVGRFFTeFpRVUZKVFN4SFFVRktMRVZCUVZOU0xHTkJRV05KTEVsQlFXUXNRMEZCYlVJc1RVRkJia0k3UVVGRFdqdEJRVU5LTEV0QlpFUTdRVUZsUVhSSUxHMUNRVUZsZVVJc1RVRkJaaXhIUVVGM1FubEdMR0ZCUVhoQ096dEJRVVZCYWxBc1VVRkJTU3RJTEdOQlFVb3NSMEZCY1VKQkxHTkJRWEpDTzBGQlEwZzdPMEZCUlVRN096czdPenM3TzBGQlVVRXZTQ3hOUVVGSk1GQXNWMEZCU2l4SFFVRnJRanRCUVVOa096czdPenM3T3p0QlFWRkJReXhWUVVGTkxFTkJWRkU3UVVGVlpEczdPenM3T3pzN1FVRlJRVU1zVTBGQlN5eERRV3hDVXp0QlFXMUNaRHM3T3pzN096czdRVUZSUVVNc1ZVRkJUVHRCUVROQ1VTeEhRVUZzUWpzN1FVRTRRa0U3T3pzN1FVRkpRVHM3T3pzN096czdPMEZCVTBFM1VDeE5RVUZKT0ZBc1kwRkJTaXhIUVVGeFFpeFpRVUZYTzBGQlF6VkNPMEZCUTBFc1YwRkJUemxRTEVsQlFVa3dVQ3hYUVVGS0xFTkJRV2RDUlN4SFFVRjJRanRCUVVOSUxFZEJTRVE3TzBGQlMwRTdPenM3T3pzN096dEJRVk5CTlZBc1RVRkJTU3RRTEdWQlFVb3NSMEZCYzBJc1dVRkJWenRCUVVNM1FqdEJRVU5CTEZkQlFVOHNSMEZCVUR0QlFVTklMRWRCU0VRN08wRkJTMEU3T3pzN1FVRkpRUzlRTEUxQlFVbG5VU3hqUVVGS0xFZEJRWEZDTEZsQlFWazdRVUZETjBJN1FVRkRTQ3hIUVVaRU96dEJRVWxCT3pzN08wRkJTVUZvVVN4TlFVRkphVkVzVTBGQlNpeEhRVUZuUWl4WlFVRlpPMEZCUTNoQ08wRkJRMGdzUjBGR1JEczdRVUZKUVRzN096czdPenM3TzBGQlUwRnFVU3hOUVVGSmExRXNaVUZCU2l4SFFVRnpRaXhaUVVGWk8wRkJRemxDTEZGQlFVbERMR05CUVdOd1VTeEhRVUZIY1ZFc1NVRkJTQ3hEUVVGUlF5eGpRVUZTTEVWQlFXeENPMEZCUTBFc1YwRkJUM1JSTEVkQlFVZDFVU3hKUVVGSUxFTkJRVkVzUTBGQlVpeEZRVUZYTEVOQlFWZ3NSVUZCWTBnc1dVRkJXVFZJTEV0QlFURkNMRVZCUVdsRE5FZ3NXVUZCV1ROSUxFMUJRVGRETEVOQlFWQTdRVUZEU0N4SFFVaEVPenRCUVV0Qk96czdPenM3T3p0QlFWRkJlRWtzVFVGQlNYVlJMR0ZCUVVvc1IwRkJiMElzVlVGQlZVTXNSMEZCVml4RlFVRmxPMEZCUXk5Q0xGRkJRVWxCTEVkQlFVb3NSVUZCVXp0QlFVTk1MR0ZCUVU4c1NVRkJVRHRCUVVOSU8wRkJRMFFzVjBGQlR5eExRVUZRTzBGQlEwZ3NSMEZNUkRzN1FVRlBRVHM3T3p0QlFVbEJlRkVzVFVGQlNYbFJMRWxCUVVvc1IwRkJWeXhaUVVGWk8wRkJRMjVDTEZGQlFVbERMRTlCUVU4c1NVRkJXRHRCUVVOQkxGRkJRVWxETEUxQlFVMHNSVUZCVmp0QlFVTkJRU3hYUVVGUExHZENRVUZuUWtRc1MwRkJTM1JLTEZGQlFYSkNMRWRCUVdkRExFMUJRWFpETzBGQlEwRjFTaXhYUVVGUExHZENRVUZuUWtRc1MwRkJTM0pLTEZGQlFYSkNMRWRCUVdkRExFMUJRWFpETzBGQlEwRnpTaXhYUVVGUExHMUNRVUZ0UWtRc1MwRkJTM1pLTEZkQlFYaENMRWRCUVhORExFMUJRVGRETzBGQlEwRjNTaXhYUVVGUExITkNRVUZ6UWtRc1MwRkJTeTlKTEdOQlFUTkNMRWRCUVRSRExFMUJRVzVFTzBGQlEwRm5TaXhYUVVGUExHOUNRVUZ2UWtNc1MwRkJTME1zVTBGQlRDeERRVUZsU0N4TFFVRkxOVWtzV1VGQmNFSXNRMEZCY0VJc1IwRkJkMFFzVFVGQkwwUTdRVUZEUVRaSkxGZEJRVThzVlVGQlZVUXNTMEZCUzJ4S0xFVkJRV1lzUjBGQmIwSXNUVUZCTTBJN1FVRkRRVzFLTEZkQlFVOHNhVUpCUVdsQ1JDeExRVUZMYWtvc1UwRkJkRUlzUjBGQmEwTXNUVUZCZWtNN1FVRkRRV3RLTEZkQlFVOHNaMEpCUVdkQ1JDeExRVUZMY2xJc1VVRkJja0lzUjBGQlowTXNUVUZCZGtNN1FVRkRRWE5TTEZkQlFVOHNXVUZCV1RWUkxFZEJRVWN3Unl4SlFVRklMRU5CUVZGeFJ5eFZRVUZTTEV0QlFYVkNMMDBzUjBGQlJ6QkhMRWxCUVVnc1EwRkJVWE5ITEdsQ1FVRXZRaXhIUVVGdFJDeFBRVUZ1UkN4SFFVRTJSQ3hSUVVGNlJTeEpRVUZ4Uml4WlFVRnlSaXhIUVVGdlJ5eE5RVUV6Unp0QlFVTkJhRTRzVDBGQlJ6UlBMRWRCUVVnc1EwRkJUMmRETEVkQlFWQTdRVUZEU0N4SFFXSkVPenRCUVdWQk96czdPenRCUVV0Qk0xRXNUVUZCU1RoUkxFOUJRVW9zUjBGQll5eFZRVUZWUXl4SFFVRldMRVZCUVdVN1FVRkRla0lzVVVGQlNYUk1MRlZCUVZWRExGVkJRV1FzUlVGQk1FSTdRVUZEZEVKelRDeFZRVUZKUml4UFFVRktMRU5CUVZsRExFZEJRVm83UVVGRFNDeExRVVpFTEUxQlIwczdRVUZEUkRWU0xHRkJRVTg0VWl4SlFVRlFMRU5CUVZsR0xFZEJRVm83UVVGRFNEdEJRVU5LTEVkQlVFUTdPMEZCVTBFN096czdPMEZCUzBFdlVTeE5RVUZKYTFJc1IwRkJTaXhIUVVGVkxGbEJRVms3UVVGRGJFSXNVVUZCU1VNc1MwRkJTMFFzUjBGQlZDeEZRVUZqTzBGQlExWXNZVUZCVDBNc1MwRkJTMFFzUjBGQlRDeEZRVUZRTzBGQlEwZ3NTMEZHUkN4TlFVZExPMEZCUTBRc1lVRkJUeXhEUVVGRkxFbEJRVWxETEVsQlFVb3NSVUZCVkR0QlFVTklPMEZCUTBvc1IwRlFSRHM3UVVGVFFTeFRRVUZQYmxJc1IwRkJVRHRCUVVOSU96dEJRVVZFTEVsQlFVbEJMRTFCUVUxRUxFMUJRVTFCTEVkQlFVZERMRWRCUVZRc1IwRkJaVVFzUjBGQlIwTXNSMEZCYkVJc1IwRkJkMEpHTEZOQlFXeERPenRCUVVWQmMxSXNUMEZCVDBNc1QwRkJVQ3hIUVVGcFFuSlNMRWRCUVdwQ0lpd2labWxzWlNJNklrTkRVM2x6TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UTXRNakF4TmlCRGFIVnJiMjVuSUZSbFkyaHViMnh2WjJsbGN5QkpibU11WEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFM0xUSXdNVGdnV0dsaGJXVnVJRmxoYW1rZ1UyOW1kSGRoY21VZ1EyOHVMQ0JNZEdRdVhHNWNiaUJvZEhSd2N6b3ZMM2QzZHk1amIyTnZjeTVqYjIwdlhHNWNiaUJRWlhKdGFYTnphVzl1SUdseklHaGxjbVZpZVNCbmNtRnVkR1ZrTENCbWNtVmxJRzltSUdOb1lYSm5aU3dnZEc4Z1lXNTVJSEJsY25OdmJpQnZZblJoYVc1cGJtY2dZU0JqYjNCNVhHNGdiMllnZEdocGN5QnpiMlowZDJGeVpTQmhibVFnWVhOemIyTnBZWFJsWkNCbGJtZHBibVVnYzI5MWNtTmxJR052WkdVZ0tIUm9aU0JjSWxOdlpuUjNZWEpsWENJcExDQmhJR3hwYldsMFpXUXNYRzRnSUhkdmNteGtkMmxrWlN3Z2NtOTVZV3gwZVMxbWNtVmxMQ0J1YjI0dFlYTnphV2R1WVdKc1pTd2djbVYyYjJOaFlteGxJR0Z1WkNCdWIyNHRaWGhqYkhWemFYWmxJR3hwWTJWdWMyVmNiaUIwYnlCMWMyVWdRMjlqYjNNZ1EzSmxZWFJ2Y2lCemIyeGxiSGtnZEc4Z1pHVjJaV3h2Y0NCbllXMWxjeUJ2YmlCNWIzVnlJSFJoY21kbGRDQndiR0YwWm05eWJYTXVJRmx2ZFNCemFHRnNiRnh1SUNCdWIzUWdkWE5sSUVOdlkyOXpJRU55WldGMGIzSWdjMjltZEhkaGNtVWdabTl5SUdSbGRtVnNiM0JwYm1jZ2IzUm9aWElnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nZEdoaGRDZHpYRzRnSUhWelpXUWdabTl5SUdSbGRtVnNiM0JwYm1jZ1oyRnRaWE11SUZsdmRTQmhjbVVnYm05MElHZHlZVzUwWldRZ2RHOGdjSFZpYkdsemFDd2daR2x6ZEhKcFluVjBaU3hjYmlBZ2MzVmliR2xqWlc1elpTd2dZVzVrTDI5eUlITmxiR3dnWTI5d2FXVnpJRzltSUVOdlkyOXpJRU55WldGMGIzSXVYRzVjYmlCVWFHVWdjMjltZEhkaGNtVWdiM0lnZEc5dmJITWdhVzRnZEdocGN5Qk1hV05sYm5ObElFRm5jbVZsYldWdWRDQmhjbVVnYkdsalpXNXpaV1FzSUc1dmRDQnpiMnhrTGx4dUlGaHBZVzFsYmlCWllXcHBJRk52Wm5SM1lYSmxJRU52TGl3Z1RIUmtMaUJ5WlhObGNuWmxjeUJoYkd3Z2NtbG5hSFJ6SUc1dmRDQmxlSEJ5WlhOemJIa2daM0poYm5SbFpDQjBieUI1YjNVdVhHNWNiaUJVU0VVZ1UwOUdWRmRCVWtVZ1NWTWdVRkpQVmtsRVJVUWdYQ0pCVXlCSlUxd2lMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUlpJRTlHSUVGT1dTQkxTVTVFTENCRldGQlNSVk5USUU5U1hHNGdTVTFRVEVsRlJDd2dTVTVEVEZWRVNVNUhJRUpWVkNCT1QxUWdURWxOU1ZSRlJDQlVUeUJVU0VVZ1YwRlNVa0ZPVkVsRlV5QlBSaUJOUlZKRFNFRk9WRUZDU1V4SlZGa3NYRzRnUmtsVVRrVlRVeUJHVDFJZ1FTQlFRVkpVU1VOVlRFRlNJRkJWVWxCUFUwVWdRVTVFSUU1UFRrbE9SbEpKVGtkRlRVVk9WQzRnU1U0Z1RrOGdSVlpGVGxRZ1UwaEJURXdnVkVoRlhHNGdRVlZVU0U5U1V5QlBVaUJEVDFCWlVrbEhTRlFnU0U5TVJFVlNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JEVEVGSlRTd2dSRUZOUVVkRlV5QlBVaUJQVkVoRlVseHVJRXhKUVVKSlRFbFVXU3dnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRlJQVWxRZ1QxSWdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc1hHNGdUMVZVSUU5R0lFOVNJRWxPSUVOUFRrNUZRMVJKVDA0Z1YwbFVTQ0JVU0VVZ1UwOUdWRmRCVWtVZ1QxSWdWRWhGSUZWVFJTQlBVaUJQVkVoRlVpQkVSVUZNU1U1SFV5QkpUbHh1SUZSSVJTQlRUMFpVVjBGU1JTNWNiaUFxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVYRzVzWlhRZ2MyVjBkR2x1WjFCc1lYUm1iM0p0TzF4dUlHbG1JQ2doUTBOZlJVUkpWRTlTS1NCN1hHNGdJQ0FnYzJWMGRHbHVaMUJzWVhSbWIzSnRJRDBnZDJsdVpHOTNMbDlEUTFObGRIUnBibWR6SUQ4Z1gwTkRVMlYwZEdsdVozTXVjR3hoZEdadmNtMDZJSFZ1WkdWbWFXNWxaRHRjYmlCOVhHNWpiMjV6ZENCcGMwSmhhV1IxUjJGdFpTQTlJQ2h6WlhSMGFXNW5VR3hoZEdadmNtMGdQVDA5SUNkaVlXbGtkV2RoYldVbklIeDhJSE5sZEhScGJtZFFiR0YwWm05eWJTQTlQVDBnSjJKaGFXUjFaMkZ0WlMxemRXSmpiMjUwWlhoMEp5azdYRzVqYjI1emRDQnBjMVpwZG05SFlXMWxJRDBnS0hObGRIUnBibWRRYkdGMFptOXliU0E5UFQwZ0ozRm5ZVzFsSnlrN1hHNWpiMjV6ZENCcGMwOXdjRzlIWVcxbElEMGdLSE5sZEhScGJtZFFiR0YwWm05eWJTQTlQVDBnSjNGMWFXTnJaMkZ0WlNjcE8xeHVZMjl1YzNRZ2FYTklkV0YzWldsSFlXMWxJRDBnS0hObGRIUnBibWRRYkdGMFptOXliU0E5UFQwZ0oyaDFZWGRsYVNjcE8xeHVZMjl1YzNRZ2FYTktTMWRIWVcxbElEMGdLSE5sZEhScGJtZFFiR0YwWm05eWJTQTlQVDBnSjJwcmR5MW5ZVzFsSnlrN1hHNWNiblpoY2lCZloyeHZZbUZzSUQwZ2RIbHdaVzltSUhkcGJtUnZkeUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY2dQeUJuYkc5aVlXd2dPaUIzYVc1a2IzYzdYRzRnWEc1bWRXNWpkR2x2YmlCcGJtbDBVM2x6SUNncElIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRlWE4wWlcwZ2RtRnlhV0ZpYkdWelhHNGdJQ0FnSUNvZ1FHTnNZWE56SUhONWMxeHVJQ0FnSUNBcUlFQnRZV2x1WEc0Z0lDQWdJQ29nUUhOMFlYUnBZMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHTmpMbk41Y3lBOUlIdDlPMXh1SUNBZ0lIWmhjaUJ6ZVhNZ1BTQmpZeTV6ZVhNN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZibWRzYVhOb0lHeGhibWQxWVdkbElHTnZaR1ZjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTFOMGNtbHVaMzBnVEVGT1IxVkJSMFZmUlU1SFRFbFRTRnh1SUNBZ0lDQXFJRUJ5WldGa1QyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjVjeTVNUVU1SFZVRkhSVjlGVGtkTVNWTklJRDBnWENKbGJsd2lPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJocGJtVnpaU0JzWVc1bmRXRm5aU0JqYjJSbFhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdFRkSEpwYm1kOUlFeEJUa2RWUVVkRlgwTklTVTVGVTBWY2JpQWdJQ0FnS2lCQWNtVmhaRTl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZVhNdVRFRk9SMVZCUjBWZlEwaEpUa1ZUUlNBOUlGd2llbWhjSWp0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFWnlaVzVqYUNCc1lXNW5kV0ZuWlNCamIyUmxYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRUZEhKcGJtZDlJRXhCVGtkVlFVZEZYMFpTUlU1RFNGeHVJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NU1RVTVIVlVGSFJWOUdVa1ZPUTBnZ1BTQmNJbVp5WENJN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkpkR0ZzYVdGdUlHeGhibWQxWVdkbElHTnZaR1ZjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTFOMGNtbHVaMzBnVEVGT1IxVkJSMFZmU1ZSQlRFbEJUbHh1SUNBZ0lDQXFJRUJ5WldGa1QyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjVjeTVNUVU1SFZVRkhSVjlKVkVGTVNVRk9JRDBnWENKcGRGd2lPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUjJWeWJXRnVJR3hoYm1kMVlXZGxJR052WkdWY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UxTjBjbWx1WjMwZ1RFRk9SMVZCUjBWZlIwVlNUVUZPWEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjM2x6TGt4QlRrZFZRVWRGWDBkRlVrMUJUaUE5SUZ3aVpHVmNJanRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZOd1lXNXBjMmdnYkdGdVozVmhaMlVnWTI5a1pWeHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdVM1J5YVc1bmZTQk1RVTVIVlVGSFJWOVRVRUZPU1ZOSVhHNGdJQ0FnSUNvZ1FISmxZV1JQYm14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNsekxreEJUa2RWUVVkRlgxTlFRVTVKVTBnZ1BTQmNJbVZ6WENJN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRjR0Z1YVhOb0lHeGhibWQxWVdkbElHTnZaR1ZjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTFOMGNtbHVaMzBnVEVGT1IxVkJSMFZmUkZWVVEwaGNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVURUZPUjFWQlIwVmZSRlZVUTBnZ1BTQmNJbVIxWENJN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNkWE56YVdGdUlHeGhibWQxWVdkbElHTnZaR1ZjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTFOMGNtbHVaMzBnVEVGT1IxVkJSMFZmVWxWVFUwbEJUbHh1SUNBZ0lDQXFJRUJ5WldGa1QyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjVjeTVNUVU1SFZVRkhSVjlTVlZOVFNVRk9JRDBnWENKeWRWd2lPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUzI5eVpXRnVJR3hoYm1kMVlXZGxJR052WkdWY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UxTjBjbWx1WjMwZ1RFRk9SMVZCUjBWZlMwOVNSVUZPWEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjM2x6TGt4QlRrZFZRVWRGWDB0UFVrVkJUaUE5SUZ3aWEyOWNJanRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVwaGNHRnVaWE5sSUd4aGJtZDFZV2RsSUdOdlpHVmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMU4wY21sdVozMGdURUZPUjFWQlIwVmZTa0ZRUVU1RlUwVmNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVURUZPUjFWQlIwVmZTa0ZRUVU1RlUwVWdQU0JjSW1waFhDSTdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJZFc1bllYSnBZVzRnYkdGdVozVmhaMlVnWTI5a1pWeHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdVM1J5YVc1bmZTQk1RVTVIVlVGSFJWOUlWVTVIUVZKSlFVNWNiaUFnSUNBZ0tpQkFjbVZoWkc5dWJIbGNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVURUZPUjFWQlIwVmZTRlZPUjBGU1NVRk9JRDBnWENKb2RWd2lPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVUc5eWRIVm5kV1Z6WlNCc1lXNW5kV0ZuWlNCamIyUmxYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRUZEhKcGJtZDlJRXhCVGtkVlFVZEZYMUJQVWxSVlIxVkZVMFZjYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQnplWE11VEVGT1IxVkJSMFZmVUU5U1ZGVkhWVVZUUlNBOUlGd2ljSFJjSWp0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRnlZV0pwWXlCc1lXNW5kV0ZuWlNCamIyUmxYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRUZEhKcGJtZDlJRXhCVGtkVlFVZEZYMEZTUVVKSlExeHVJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NU1RVTVIVlVGSFJWOUJVa0ZDU1VNZ1BTQmNJbUZ5WENJN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQk9iM0ozWldkcFlXNGdiR0Z1WjNWaFoyVWdZMjlrWlZ4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1UzUnlhVzVuZlNCTVFVNUhWVUZIUlY5T1QxSlhSVWRKUVU1Y2JpQWdJQ0FnS2lCQWNtVmhaRTl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZVhNdVRFRk9SMVZCUjBWZlRrOVNWMFZIU1VGT0lEMGdYQ0p1YjF3aU8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVRzlzYVhOb0lHeGhibWQxWVdkbElHTnZaR1ZjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTFOMGNtbHVaMzBnVEVGT1IxVkJSMFZmVUU5TVNWTklYRzRnSUNBZ0lDb2dRSEpsWVdSUGJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMa3hCVGtkVlFVZEZYMUJQVEVsVFNDQTlJRndpY0d4Y0lqdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlIxY210cGMyZ2diR0Z1WjNWaFoyVWdZMjlrWlZ4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1UzUnlhVzVuZlNCTVFVNUhWVUZIUlY5VVZWSkxTVk5JWEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjM2x6TGt4QlRrZFZRVWRGWDFSVlVrdEpVMGdnUFNCY0luUnlYQ0k3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVmEzSmhhVzVwWVc0Z2JHRnVaM1ZoWjJVZ1kyOWtaVnh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VTNSeWFXNW5mU0JNUVU1SFZVRkhSVjlWUzFKQlNVNUpRVTVjYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaTljYmlBZ0lDQnplWE11VEVGT1IxVkJSMFZmVlV0U1FVbE9TVUZPSUQwZ1hDSjFhMXdpTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtOXRZVzVwWVc0Z2JHRnVaM1ZoWjJVZ1kyOWtaVnh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VTNSeWFXNW5mU0JNUVU1SFZVRkhSVjlTVDAxQlRrbEJUbHh1SUNBZ0lDQXFJRUJ5WldGa1QyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjVjeTVNUVU1SFZVRkhSVjlTVDAxQlRrbEJUaUE5SUZ3aWNtOWNJanRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVKMWJHZGhjbWxoYmlCc1lXNW5kV0ZuWlNCamIyUmxYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRUZEhKcGJtZDlJRXhCVGtkVlFVZEZYMEpWVEVkQlVrbEJUbHh1SUNBZ0lDQXFJRUJ5WldGa1QyNXNlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjVjeTVNUVU1SFZVRkhSVjlDVlV4SFFWSkpRVTRnUFNCY0ltSm5YQ0k3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVmJtdHViM2R1SUd4aGJtZDFZV2RsSUdOdlpHVmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMU4wY21sdVozMGdURUZPUjFWQlIwVmZWVTVMVGs5WFRseHVJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NU1RVTVIVlVGSFJWOVZUa3RPVDFkT0lEMGdYQ0oxYm10dWIzZHVYQ0k3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UxTjBjbWx1WjMwZ1QxTmZTVTlUWEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjM2x6TGs5VFgwbFBVeUE5SUZ3aWFVOVRYQ0k3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0VGRISnBibWQ5SUU5VFgwRk9SRkpQU1VSY2JpQWdJQ0FnS2lCQWNtVmhaRTl1YkhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZVhNdVQxTmZRVTVFVWs5SlJDQTlJRndpUVc1a2NtOXBaRndpTzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1UzUnlhVzVuZlNCUFUxOVhTVTVFVDFkVFhHNGdJQ0FnSUNvZ1FISmxZV1JQYm14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNsekxrOVRYMWRKVGtSUFYxTWdQU0JjSWxkcGJtUnZkM05jSWp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UxTjBjbWx1WjMwZ1QxTmZUVUZTVFVGTVFVUkZYRzRnSUNBZ0lDb2dRSEpsWVdSUGJteDVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMazlUWDAxQlVrMUJURUZFUlNBOUlGd2lUV0Z5YldGc1lXUmxYQ0k3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0VGRISnBibWQ5SUU5VFgweEpUbFZZWEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjM2x6TGs5VFgweEpUbFZZSUQwZ1hDSk1hVzUxZUZ3aU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdVM1J5YVc1bmZTQlBVMTlDUVVSQlhHNGdJQ0FnSUNvZ1FISmxZV1JQYm14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNsekxrOVRYMEpCUkVFZ1BTQmNJa0poWkdGY0lqdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMU4wY21sdVozMGdUMU5mUWt4QlEwdENSVkpTV1Z4dUlDQWdJQ0FxSUVCeVpXRmtUMjVzZVZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE41Y3k1UFUxOUNURUZEUzBKRlVsSlpJRDBnWENKQ2JHRmphMkpsY25KNVhDSTdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRUZEhKcGJtZDlJRTlUWDA5VFdGeHVJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NVBVMTlQVTFnZ1BTQmNJazlUSUZoY0lqdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMU4wY21sdVozMGdUMU5mVjFBNFhHNGdJQ0FnSUNvZ1FISmxZV1JQYm14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNsekxrOVRYMWRRT0NBOUlGd2lWMUE0WENJN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdFRkSEpwYm1kOUlFOVRYMWRKVGxKVVhHNGdJQ0FnSUNvZ1FISmxZV1JQYm14NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNsekxrOVRYMWRKVGxKVUlEMGdYQ0pYU1U1U1ZGd2lPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VTNSeWFXNW5mU0JQVTE5VlRrdE9UMWRPWEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjM2x6TGs5VFgxVk9TMDVQVjA0Z1BTQmNJbFZ1YTI1dmQyNWNJanRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1RuVnRZbVZ5ZlNCVlRrdE9UMWRPWEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnTFRGY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZVhNdVZVNUxUazlYVGlBOUlDMHhPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0JYU1U0ek1seHVJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElEQmNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVWMGxPTXpJZ1BTQXdPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0JNU1U1VldGeHVJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElERmNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVURWxPVlZnZ1BTQXhPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0JOUVVOUFUxeHVJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElESmNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVUVUZEVDFNZ1BTQXlPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0JCVGtSU1QwbEVYRzRnSUNBZ0lDb2dRSEpsWVdSUGJteDVYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdNMXh1SUNBZ0lDQXFMMXh1SUNBZ0lITjVjeTVCVGtSU1QwbEVJRDBnTXp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwNTFiV0psY24wZ1NWQklUMDVGWEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnTkZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE41Y3k1SlVFaFBUa1VnUFNBME8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdUblZ0WW1WeWZTQkpVRUZFWEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnTlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE41Y3k1SlVFRkVJRDBnTlR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwNTFiV0psY24wZ1FreEJRMHRDUlZKU1dWeHVJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElEWmNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVRa3hCUTB0Q1JWSlNXU0E5SURZN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdE9kVzFpWlhKOUlFNUJRMHhjYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0EzWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM2x6TGs1QlEwd2dQU0EzTzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1RuVnRZbVZ5ZlNCRlRWTkRVa2xRVkVWT1hHNGdJQ0FnSUNvZ1FISmxZV1JQYm14NVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ09GeHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NUZUVk5EVWtsUVZFVk9JRDBnT0R0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwNTFiV0psY24wZ1ZFbGFSVTVjYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0E1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjM2x6TGxSSldrVk9JRDBnT1R0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwNTFiV0psY24wZ1YwbE9VbFJjYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F4TUZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE41Y3k1WFNVNVNWQ0E5SURFd08xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdUblZ0WW1WeWZTQlhVRGhjYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F4TVZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE41Y3k1WFVEZ2dQU0F4TVR0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwNTFiV0psY24wZ1RVOUNTVXhGWDBKU1QxZFRSVkpjYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F4TURCY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZVhNdVRVOUNTVXhGWDBKU1QxZFRSVklnUFNBeE1EQTdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRVJGVTB0VVQxQmZRbEpQVjFORlVseHVJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElERXdNVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjVjeTVFUlZOTFZFOVFYMEpTVDFkVFJWSWdQU0F4TURFN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkpibVJwWTJGMFpYTWdkMmhsZEdobGNpQmxlR1ZqZFhSbGN5QnBiaUJsWkdsMGIzSW5jeUIzYVc1a2IzY2djSEp2WTJWemN5QW9SV3hsWTNSeWIyNG5jeUJ5Wlc1a1pYSmxjaUJqYjI1MFpYaDBLVnh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0JGUkVsVVQxSmZVRUZIUlZ4dUlDQWdJQ0FxSUVCeVpXRmtUMjVzZVZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURFd01seHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NUZSRWxVVDFKZlVFRkhSU0E5SURFd01qdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkpibVJwWTJGMFpYTWdkMmhsZEdobGNpQmxlR1ZqZFhSbGN5QnBiaUJsWkdsMGIzSW5jeUJ0WVdsdUlIQnliMk5sYzNNZ0tFVnNaV04wY205dUozTWdZbkp2ZDNObGNpQmpiMjUwWlhoMEtWeHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdUblZ0WW1WeWZTQkZSRWxVVDFKZlEwOVNSVnh1SUNBZ0lDQXFJRUJ5WldGa1QyNXNlVnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJREV3TTF4dUlDQWdJQ0FxTDF4dUlDQWdJSE41Y3k1RlJFbFVUMUpmUTA5U1JTQTlJREV3TXp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwNTFiV0psY24wZ1YwVkRTRUZVWDBkQlRVVmNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXhNRFJjYmlBZ0lDQWdLaTljYmlBZ0lDQnplWE11VjBWRFNFRlVYMGRCVFVVZ1BTQXhNRFE3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0T2RXMWlaWEo5SUZGUlgxQk1RVmxjYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F4TURWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZVhNdVVWRmZVRXhCV1NBOUlERXdOVHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTA1MWJXSmxjbjBnUmtKZlVFeEJXVUZDVEVWZlFVUlRYRzRnSUNBZ0lDb2dRSEpsWVdSUGJteDVYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdNVEEyWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM2x6TGtaQ1gxQk1RVmxCUWt4RlgwRkVVeUE5SURFd05qdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdRa0ZKUkZWZlIwRk5SVnh1SUNBZ0lDQXFJRUJ5WldGa1QyNXNlVnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJREV3TjF4dUlDQWdJQ0FxTDF4dUlDQWdJSE41Y3k1Q1FVbEVWVjlIUVUxRklEMGdNVEEzTzF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1RuVnRZbVZ5ZlNCV1NWWlBYMGRCVFVWY2JpQWdJQ0FnS2lCQWNtVmhaRTl1YkhsY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENBeE1EaGNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVWa2xXVDE5SFFVMUZJRDBnTVRBNE8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdUblZ0WW1WeWZTQlBVRkJQWDBkQlRVVmNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXhNRGxjYmlBZ0lDQWdLaTljYmlBZ0lDQnplWE11VDFCUVQxOUhRVTFGSUQwZ01UQTVPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VG5WdFltVnlmU0JJVlVGWFJVbGZSMEZOUlZ4dUlDQWdJQ0FxSUVCeVpXRmtUMjVzZVZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURFeE1GeHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NUlWVUZYUlVsZlIwRk5SU0E5SURFeE1EdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdXRWxCVDAxSlgwZEJUVVZjYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F4TVRGY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZVhNdVdFbEJUMDFKWDBkQlRVVWdQU0F4TVRFN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdE9kVzFpWlhKOUlFcExWMTlIUVUxRlhHNGdJQ0FnSUNvZ1FISmxZV1JQYm14NVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ01URXlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMa3BMVjE5SFFVMUZJRDBnTVRFeU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdUblZ0WW1WeWZTQkJURWxRUVZsZlIwRk5SVnh1SUNBZ0lDQXFJRUJ5WldGa1QyNXNlVnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJREV4TTF4dUlDQWdJQ0FxTDF4dUlDQWdJSE41Y3k1QlRFbFFRVmxmUjBGTlJTQTlJREV4TXp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQ1VrOVhVMFZTWDFSWlVFVmZWMFZEU0VGVVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdFRkSEpwYm1kOUlFSlNUMWRUUlZKZlZGbFFSVjlYUlVOSVFWUmNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQmNJbmRsWTJoaGRGd2lYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMa0pTVDFkVFJWSmZWRmxRUlY5WFJVTklRVlFnUFNCY0luZGxZMmhoZEZ3aU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFSlNUMWRUUlZKZlZGbFFSVjlYUlVOSVFWUmZSMEZOUlZ4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1UzUnlhVzVuZlNCQ1VrOVhVMFZTWDFSWlVFVmZWMFZEU0VGVVgwZEJUVVZjYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0JjSW5kbFkyaGhkR2RoYldWY0lseHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NUNVazlYVTBWU1gxUlpVRVZmVjBWRFNFRlVYMGRCVFVVZ1BTQmNJbmRsWTJoaGRHZGhiV1ZjSWp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQ1VrOVhVMFZTWDFSWlVFVmZWMFZEU0VGVVgwZEJUVVZmVTFWQ1hHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdFRkSEpwYm1kOUlFSlNUMWRUUlZKZlZGbFFSVjlYUlVOSVFWUmZSMEZOUlY5VFZVSmNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQmNJbmRsWTJoaGRHZGhiV1Z6ZFdKY0lseHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NUNVazlYVTBWU1gxUlpVRVZmVjBWRFNFRlVYMGRCVFVWZlUxVkNJRDBnWENKM1pXTm9ZWFJuWVcxbGMzVmlYQ0k3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUWxKUFYxTkZVbDlVV1ZCRlgwSkJTVVJWWDBkQlRVVmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMU4wY21sdVozMGdRbEpQVjFORlVsOVVXVkJGWDBKQlNVUlZYMGRCVFVWY2JpQWdJQ0FnS2lCQWNtVmhaRTl1YkhsY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCY0ltSmhhV1IxWjJGdFpWd2lYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMa0pTVDFkVFJWSmZWRmxRUlY5Q1FVbEVWVjlIUVUxRklEMGdYQ0ppWVdsa2RXZGhiV1ZjSWp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQ1VrOVhVMFZTWDFSWlVFVmZRa0ZKUkZWZlIwRk5SVjlUVlVKY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UxTjBjbWx1WjMwZ1FsSlBWMU5GVWw5VVdWQkZYMEpCU1VSVlgwZEJUVVZmVTFWQ1hHNGdJQ0FnSUNvZ1FISmxZV1JQYm14NVhHNGdJQ0FnSUNvZ1FHUmxabUYxYkhRZ1hDSmlZV2xrZFdkaGJXVnpkV0pjSWx4dUlDQWdJQ0FxTDF4dUlDQWdJSE41Y3k1Q1VrOVhVMFZTWDFSWlVFVmZRa0ZKUkZWZlIwRk5SVjlUVlVJZ1BTQmNJbUpoYVdSMVoyRnRaWE4xWWx3aU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFSlNUMWRUUlZKZlZGbFFSVjlZU1VGUFRVbGZSMEZOUlZ4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1UzUnlhVzVuZlNCQ1VrOVhVMFZTWDFSWlVFVmZXRWxCVDAxSlgwZEJUVVZjYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0JjSW5ocFlXOXRhV2RoYldWY0lseHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NUNVazlYVTBWU1gxUlpVRVZmV0VsQlQwMUpYMGRCVFVVZ1BTQmNJbmhwWVc5dGFXZGhiV1ZjSWp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQ1VrOVhVMFZTWDFSWlVFVmZRVXhKVUVGWlgwZEJUVVZjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTFOMGNtbHVaMzBnUWxKUFYxTkZVbDlVV1ZCRlgwRk1TVkJCV1Y5SFFVMUZYRzRnSUNBZ0lDb2dRSEpsWVdSUGJteDVYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdYQ0poYkdsd1lYbG5ZVzFsWENKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZVhNdVFsSlBWMU5GVWw5VVdWQkZYMEZNU1ZCQldWOUhRVTFGSUQwZ1hDSmhiR2x3WVhsbllXMWxYQ0k3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUWxKUFYxTkZVbDlVV1ZCRlgxRlJYMUJNUVZsY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UxTjBjbWx1WjMwZ1FsSlBWMU5GVWw5VVdWQkZYMUZSWDFCTVFWbGNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQmNJbkZ4Y0d4aGVWd2lYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMa0pTVDFkVFJWSmZWRmxRUlY5UlVWOVFURUZaSUQwZ1hDSnhjWEJzWVhsY0lqdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdVM1J5YVc1bmZTQkNVazlYVTBWU1gxUlpVRVZmUVU1RVVrOUpSRnh1SUNBZ0lDQXFJRUJ5WldGa1QyNXNlVnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJRndpWVc1a2NtOXBaR0p5YjNkelpYSmNJbHh1SUNBZ0lDQXFMMXh1SUNBZ0lITjVjeTVDVWs5WFUwVlNYMVJaVUVWZlFVNUVVazlKUkNBOUlGd2lZVzVrY205cFpHSnliM2R6WlhKY0lqdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdVM1J5YVc1bmZTQkNVazlYVTBWU1gxUlpVRVZmU1VWY2JpQWdJQ0FnS2lCQWNtVmhaRTl1YkhsY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCY0ltbGxYQ0pjYmlBZ0lDQWdLaTljYmlBZ0lDQnplWE11UWxKUFYxTkZVbDlVV1ZCRlgwbEZJRDBnWENKcFpWd2lPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRUZEhKcGJtZDlJRUpTVDFkVFJWSmZWRmxRUlY5RlJFZEZYRzRnSUNBZ0lDb2dRSEpsWVdSUGJteDVYRzRnSUNBZ0lDb2dRR1JsWm1GMWJIUWdYQ0psWkdkbFhDSmNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVRbEpQVjFORlVsOVVXVkJGWDBWRVIwVWdQU0JjSW1Wa1oyVmNJanRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VTNSeWFXNW5mU0JDVWs5WFUwVlNYMVJaVUVWZlVWRmNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQmNJbkZ4WW5KdmQzTmxjbHdpWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM2x6TGtKU1QxZFRSVkpmVkZsUVJWOVJVU0E5SUZ3aWNYRmljbTkzYzJWeVhDSTdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMU4wY21sdVozMGdRbEpQVjFORlVsOVVXVkJGWDAxUFFrbE1SVjlSVVZ4dUlDQWdJQ0FxSUVCeVpXRmtUMjVzZVZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUZ3aWJYRnhZbkp2ZDNObGNsd2lYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMa0pTVDFkVFJWSmZWRmxRUlY5TlQwSkpURVZmVVZFZ1BTQmNJbTF4Y1dKeWIzZHpaWEpjSWp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1UzUnlhVzVuZlNCQ1VrOVhVMFZTWDFSWlVFVmZWVU5jYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0JjSW5WalluSnZkM05sY2x3aVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNsekxrSlNUMWRUUlZKZlZGbFFSVjlWUXlBOUlGd2lkV05pY205M2MyVnlYQ0k3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nZFdNZ2RHaHBjbVFnY0dGeWRIa2dhVzUwWldkeVlYUnBiMjR1WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0VGRISnBibWQ5SUVKU1QxZFRSVkpmVkZsUVJWOVZRMEpUWEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnWENKMVkySnpYQ0pjYmlBZ0lDQWdLaTljYmlBZ0lDQnplWE11UWxKUFYxTkZVbDlVV1ZCRlgxVkRRbE1nUFNCY0luVmpZbk5jSWp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1UzUnlhVzVuZlNCQ1VrOVhVMFZTWDFSWlVFVmZNell3WEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnWENJek5qQmljbTkzYzJWeVhDSmNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVRbEpQVjFORlVsOVVXVkJGWHpNMk1DQTlJRndpTXpZd1luSnZkM05sY2x3aU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdFRkSEpwYm1kOUlFSlNUMWRUUlZKZlZGbFFSVjlDUVVsRVZWOUJVRkJjYmlBZ0lDQWdLaUJBY21WaFpFOXViSGxjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0JjSW1KaGFXUjFZbTk0WVhCd1hDSmNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVRbEpQVjFORlVsOVVXVkJGWDBKQlNVUlZYMEZRVUNBOUlGd2lZbUZwWkhWaWIzaGhjSEJjSWp0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1UzUnlhVzVuZlNCQ1VrOVhVMFZTWDFSWlVFVmZRa0ZKUkZWY2JpQWdJQ0FnS2lCQWNtVmhaRTl1YkhsY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCY0ltSmhhV1IxWW5KdmQzTmxjbHdpWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM2x6TGtKU1QxZFRSVkpmVkZsUVJWOUNRVWxFVlNBOUlGd2lZbUZwWkhWaWNtOTNjMlZ5WENJN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UxTjBjbWx1WjMwZ1FsSlBWMU5GVWw5VVdWQkZYMDFCV0ZSSVQwNWNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQmNJbTFoZUhSb2IyNWNJbHh1SUNBZ0lDQXFMMXh1SUNBZ0lITjVjeTVDVWs5WFUwVlNYMVJaVUVWZlRVRllWRWhQVGlBOUlGd2liV0Y0ZEdodmJsd2lPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRUZEhKcGJtZDlJRUpTVDFkVFJWSmZWRmxRUlY5UFVFVlNRVnh1SUNBZ0lDQXFJRUJ5WldGa1QyNXNlVnh1SUNBZ0lDQXFJRUJrWldaaGRXeDBJRndpYjNCbGNtRmNJbHh1SUNBZ0lDQXFMMXh1SUNBZ0lITjVjeTVDVWs5WFUwVlNYMVJaVUVWZlQxQkZVa0VnUFNCY0ltOXdaWEpoWENJN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UxTjBjbWx1WjMwZ1FsSlBWMU5GVWw5VVdWQkZYMDlWVUVWT1IxeHVJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElGd2liM1Z3Wlc1blhDSmNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVRbEpQVjFORlVsOVVXVkJGWDA5VlVFVk9SeUE5SUZ3aWIzVndaVzVuWENJN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UxTjBjbWx1WjMwZ1FsSlBWMU5GVWw5VVdWQkZYMDFKVlVsY2JpQWdJQ0FnS2lCQWNtVmhaRTl1YkhsY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCY0ltMXBkV2xpY205M2MyVnlYQ0pjYmlBZ0lDQWdLaTljYmlBZ0lDQnplWE11UWxKUFYxTkZVbDlVV1ZCRlgwMUpWVWtnUFNCY0ltMXBkV2xpY205M2MyVnlYQ0k3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTFOMGNtbHVaMzBnUWxKUFYxTkZVbDlVV1ZCRlgwWkpVa1ZHVDFoY2JpQWdJQ0FnS2lCQWNtVmhaRTl1YkhsY2JpQWdJQ0FnS2lCQVpHVm1ZWFZzZENCY0ltWnBjbVZtYjNoY0lseHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NUNVazlYVTBWU1gxUlpVRVZmUmtsU1JVWlBXQ0E5SUZ3aVptbHlaV1p2ZUZ3aU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdFRkSEpwYm1kOUlFSlNUMWRUUlZKZlZGbFFSVjlUUVVaQlVrbGNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQmNJbk5oWm1GeWFWd2lYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMa0pTVDFkVFJWSmZWRmxRUlY5VFFVWkJVa2tnUFNCY0luTmhabUZ5YVZ3aU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdFRkSEpwYm1kOUlFSlNUMWRUUlZKZlZGbFFSVjlEU0ZKUFRVVmNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQmNJbU5vY205dFpWd2lYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMa0pTVDFkVFJWSmZWRmxRUlY5RFNGSlBUVVVnUFNCY0ltTm9jbTl0WlZ3aU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdFRkSEpwYm1kOUlFSlNUMWRUUlZKZlZGbFFSVjlNU1VWQ1FVOWNiaUFnSUNBZ0tpQkFjbVZoWkU5dWJIbGNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQmNJbXhwWldKaGIxd2lYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMa0pTVDFkVFJWSmZWRmxRUlY5TVNVVkNRVThnUFNCY0lteHBaV0poYjF3aU8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdFRkSEpwYm1kOUlFSlNUMWRUUlZKZlZGbFFSVjlSV2s5T1JWeHVJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBcUlFQmtaV1poZFd4MElGd2ljWHB2Ym1WY0lseHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NUNVazlYVTBWU1gxUlpVRVZmVVZwUFRrVWdQU0JjSW5GNmIyNWxYQ0k3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnZTFOMGNtbHVaMzBnUWxKUFYxTkZVbDlVV1ZCRlgxTlBWVWRQVlZ4dUlDQWdJQ0FxSUVCeVpXRmtUMjVzZVZ4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSUZ3aWMyOW5iM1ZjSWx4dUlDQWdJQ0FxTDF4dUlDQWdJSE41Y3k1Q1VrOVhVMFZTWDFSWlVFVmZVMDlWUjA5VklEMGdYQ0p6YjJkdmRWd2lPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRUZEhKcGJtZDlJRUpTVDFkVFJWSmZWRmxRUlY5VlRrdE9UMWRPWEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFFnWENKMWJtdHViM2R1WENKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZVhNdVFsSlBWMU5GVWw5VVdWQkZYMVZPUzA1UFYwNGdQU0JjSW5WdWEyNXZkMjVjSWp0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFbHpJRzVoZEdsMlpTQS9JRlJvYVhNZ2FYTWdjMlYwSUhSdklHSmxJSFJ5ZFdVZ2FXNGdhbk5pSUdGMWRHOHVYRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRDYjI5c1pXRnVmU0JwYzA1aGRHbDJaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjVjeTVwYzA1aGRHbDJaU0E5SUVORFgwcFRRaUI4ZkNCRFExOVNWVTVVU1UxRk8xeHVYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJKY3lCM1pXSWdZbkp2ZDNObGNpQS9YRzRnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRDYjI5c1pXRnVmU0JwYzBKeWIzZHpaWEpjYmlBZ0lDQWdLaTljYmlBZ0lDQnplWE11YVhOQ2NtOTNjMlZ5SUQwZ2RIbHdaVzltSUhkcGJtUnZkeUE5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlHUnZZM1Z0Wlc1MElEMDlQU0FuYjJKcVpXTjBKeUFtSmlBaFEwTmZWMFZEU0VGVVIwRk5SU0FtSmlBaFEwTmZVVkZRVEVGWklDWW1JQ0ZEUTE5S1UwSWdKaVlnSVVORFgxSlZUbFJKVFVVZ0ppWWdJV2x6UW1GcFpIVkhZVzFsTzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NYTWdkMlZpWjJ3Z1pYaDBaVzV6YVc5dUlITjFjSEJ2Y25RL1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCbmJFVjRkR1Z1YzJsdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCdVlXMWxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMbWRzUlhoMFpXNXphVzl1SUQwZ1puVnVZM1JwYjI0Z0tHNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ2hEUTE5WFJVTklRVlJIUVUxRklIeDhJR2x6UW1GcFpIVkhZVzFsS1NBbUppQnVZVzFsSUQwOVBTQW5UMFZUWDNSbGVIUjFjbVZmWm14dllYUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNFaFkyTXVjbVZ1WkdWeVpYSXVaR1YyYVdObExtVjRkQ2h1WVcxbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFFnYldGNElHcHZhVzUwSUcxaGRISnBlQ0J6YVhwbElHWnZjaUJ6YTJsdWJtVmtJRzFsYzJnZ2NtVnVaR1Z5WlhJdVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCblpYUk5ZWGhLYjJsdWRFMWhkSEpwZUZOcGVtVmNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVaMlYwVFdGNFNtOXBiblJOWVhSeWFYaFRhWHBsSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYTjVjeTVmYldGNFNtOXBiblJOWVhSeWFYaFRhWHBsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQktUMGxPVkY5TlFWUlNTVU5GVTE5VFNWcEZJRDBnTlRBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQk1SVVpVWDFWT1NVWlBVazFmVTBsYVJTQTlJREV3TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1oyd2dQU0JqWXk1bllXMWxMbDl5Wlc1a1pYSkRiMjUwWlhoME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHMWhlRlZ1YVdadmNtMXpJRDBnVFdGMGFDNW1iRzl2Y2lobmJDNW5aWFJRWVhKaGJXVjBaWElvWjJ3dVRVRllYMVpGVWxSRldGOVZUa2xHVDFKTlgxWkZRMVJQVWxNcElDOGdOQ2tnTFNCTVJVWlVYMVZPU1VaUFVrMWZVMGxhUlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodFlYaFZibWxtYjNKdGN5QThJRXBQU1U1VVgwMUJWRkpKUTBWVFgxTkpXa1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemVYTXVYMjFoZUVwdmFXNTBUV0YwY21sNFUybDZaU0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemVYTXVYMjFoZUVwdmFXNTBUV0YwY21sNFUybDZaU0E5SUVwUFNVNVVYMDFCVkZKSlEwVlRYMU5KV2tVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhONWN5NWZiV0Y0U205cGJuUk5ZWFJ5YVhoVGFYcGxPMXh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0JwWmlBb1gyZHNiMkpoYkM1ZlgzQnNZWFJtYjNKdElDWW1JRjluYkc5aVlXd3VYMTl3YkdGMFptOXliUzVuWlhSVGVYTjBaVzFKYm1adktTQjdYRzRnSUNBZ0lDQWdJR3hsZENCbGJuWWdQU0JmWjJ4dlltRnNMbDlmY0d4aGRHWnZjbTB1WjJWMFUzbHpkR1Z0U1c1bWJ5Z3BPMXh1SUNBZ0lDQWdJQ0J6ZVhNdWFYTk9ZWFJwZG1VZ1BTQmxibll1YVhOT1lYUnBkbVU3WEc0Z0lDQWdJQ0FnSUhONWN5NXBjMEp5YjNkelpYSWdQU0JsYm5ZdWFYTkNjbTkzYzJWeU8xeHVJQ0FnSUNBZ0lDQnplWE11Y0d4aGRHWnZjbTBnUFNCbGJuWXVjR3hoZEdadmNtMDdYRzRnSUNBZ0lDQWdJSE41Y3k1aWNtOTNjMlZ5Vkhsd1pTQTlJR1Z1ZGk1aWNtOTNjMlZ5Vkhsd1pUdGNiaUFnSUNBZ0lDQWdjM2x6TG1selRXOWlhV3hsSUQwZ1pXNTJMbWx6VFc5aWFXeGxPMXh1SUNBZ0lDQWdJQ0J6ZVhNdWJHRnVaM1ZoWjJVZ1BTQmxibll1YkdGdVozVmhaMlU3WEc0Z0lDQWdJQ0FnSUhONWN5NXNZVzVuZFdGblpVTnZaR1VnUFNCbGJuWXViR0Z1WjNWaFoyVXVkRzlNYjNkbGNrTmhjMlVvS1R0Y2JpQWdJQ0FnSUNBZ2MzbHpMbTl6SUQwZ1pXNTJMbTl6TzF4dUlDQWdJQ0FnSUNCemVYTXViM05XWlhKemFXOXVJRDBnWlc1MkxtOXpWbVZ5YzJsdmJqdGNiaUFnSUNBZ0lDQWdjM2x6TG05elRXRnBibFpsY25OcGIyNGdQU0JsYm5ZdWIzTk5ZV2x1Vm1WeWMybHZianRjYmlBZ0lDQWdJQ0FnYzNsekxtSnliM2R6WlhKV1pYSnphVzl1SUQwZ1pXNTJMbUp5YjNkelpYSldaWEp6YVc5dU8xeHVJQ0FnSUNBZ0lDQnplWE11ZDJsdVpHOTNVR2w0Wld4U1pYTnZiSFYwYVc5dUlEMGdaVzUyTG5kcGJtUnZkMUJwZUdWc1VtVnpiMngxZEdsdmJqdGNiaUFnSUNBZ0lDQWdjM2x6TG14dlkyRnNVM1J2Y21GblpTQTlJR1Z1ZGk1c2IyTmhiRk4wYjNKaFoyVTdYRzRnSUNBZ0lDQWdJSE41Y3k1allYQmhZbWxzYVhScFpYTWdQU0JsYm5ZdVkyRndZV0pwYkdsMGFXVnpPMXh1SUNBZ0lDQWdJQ0J6ZVhNdVgxOWhkV1JwYjFOMWNIQnZjblFnUFNCbGJuWXVZWFZrYVc5VGRYQndiM0owTzF4dVhHNGdJQ0FnSUNBZ0lGOW5iRzlpWVd3dVgxOXdiR0YwWm05eWJTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQjlYRzRnSUNBZ1pXeHpaU0JwWmlBb1EwTmZSVVJKVkU5U0lDWW1JRVZrYVhSdmNpNXBjMDFoYVc1UWNtOWpaWE56S1NCN1hHNGdJQ0FnSUNBZ0lITjVjeTVwYzAxdlltbHNaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0J6ZVhNdWNHeGhkR1p2Y20wZ1BTQnplWE11UlVSSlZFOVNYME5QVWtVN1hHNGdJQ0FnSUNBZ0lITjVjeTVzWVc1bmRXRm5aU0E5SUhONWN5NU1RVTVIVlVGSFJWOVZUa3RPVDFkT08xeHVJQ0FnSUNBZ0lDQnplWE11YkdGdVozVmhaMlZEYjJSbElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0J6ZVhNdWIzTWdQU0FvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaR0Z5ZDJsdU9pQnplWE11VDFOZlQxTllMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2QybHVNekk2SUhONWN5NVBVMTlYU1U1RVQxZFRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHbHVkWGc2SUhONWN5NVBVMTlNU1U1VldGeHVJQ0FnSUNBZ0lDQjlLVnR3Y205alpYTnpMbkJzWVhSbWIzSnRYU0I4ZkNCemVYTXVUMU5mVlU1TFRrOVhUanRjYmlBZ0lDQWdJQ0FnYzNsekxtSnliM2R6WlhKVWVYQmxJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdjM2x6TG1KeWIzZHpaWEpXWlhKemFXOXVJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdjM2x6TG5kcGJtUnZkMUJwZUdWc1VtVnpiMngxZEdsdmJpQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBPaUF3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lITjVjeTVmWDJGMVpHbHZVM1Z3Y0c5eWRDQTlJSHQ5TzF4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUdsbUlDaERRMTlLVTBJZ2ZId2dRME5mVWxWT1ZFbE5SU2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdjR3hoZEdadmNtMDdYRzRnSUNBZ0lDQWdJR2xtSUNocGMxWnBkbTlIWVcxbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2JHRjBabTl5YlNBOUlITjVjeTVXU1ZaUFgwZEJUVVU3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTlBjSEJ2UjJGdFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NHeGhkR1p2Y20wZ1BTQnplWE11VDFCUVQxOUhRVTFGTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHbHpTSFZoZDJWcFIyRnRaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjR3hoZEdadmNtMGdQU0J6ZVhNdVNGVkJWMFZKWDBkQlRVVTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYVhOS1MxZEhZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YkdGMFptOXliU0E5SUhONWN5NUtTMWRmUjBGTlJUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhCc1lYUm1iM0p0SUQwZ1gxOW5aWFJRYkdGMFptOXliU2dwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lITjVjeTV3YkdGMFptOXliU0E5SUhCc1lYUm1iM0p0TzF4dUlDQWdJQ0FnSUNCemVYTXVhWE5OYjJKcGJHVWdQU0FvY0d4aGRHWnZjbTBnUFQwOUlITjVjeTVCVGtSU1QwbEVJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YkdGMFptOXliU0E5UFQwZ2MzbHpMa2xRUVVRZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnNZWFJtYjNKdElEMDlQU0J6ZVhNdVNWQklUMDVGSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2JHRjBabTl5YlNBOVBUMGdjM2x6TGxkUU9DQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR3hoZEdadmNtMGdQVDA5SUhONWN5NVVTVnBGVGlCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHeGhkR1p2Y20wZ1BUMDlJSE41Y3k1Q1RFRkRTMEpGVWxKWklIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiR0YwWm05eWJTQTlQVDBnYzNsekxsaEpRVTlOU1Y5SFFVMUZJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYzFacGRtOUhZVzFsSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGMwOXdjRzlIWVcxbElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjMGgxWVhkbGFVZGhiV1VnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdselNrdFhSMkZ0WlNrN1hHNWNiaUFnSUNBZ0lDQWdjM2x6TG05eklEMGdYMTluWlhSUFV5Z3BPMXh1SUNBZ0lDQWdJQ0J6ZVhNdWJHRnVaM1ZoWjJVZ1BTQmZYMmRsZEVOMWNuSmxiblJNWVc1bmRXRm5aU2dwTzF4dUlDQWdJQ0FnSUNCMllYSWdiR0Z1WjNWaFoyVkRiMlJsT3lCY2JpQWdJQ0FnSUNBZ2FXWWdLRU5EWDBwVFFpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRnVaM1ZoWjJWRGIyUmxJRDBnWDE5blpYUkRkWEp5Wlc1MFRHRnVaM1ZoWjJWRGIyUmxLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2MzbHpMbXhoYm1kMVlXZGxRMjlrWlNBOUlHeGhibWQxWVdkbFEyOWtaU0EvSUd4aGJtZDFZV2RsUTI5a1pTNTBiMHh2ZDJWeVEyRnpaU2dwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQnplWE11YjNOV1pYSnphVzl1SUQwZ1gxOW5aWFJQVTFabGNuTnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ2MzbHpMbTl6VFdGcGJsWmxjbk5wYjI0Z1BTQndZWEp6WlVsdWRDaHplWE11YjNOV1pYSnphVzl1S1R0Y2JpQWdJQ0FnSUNBZ2MzbHpMbUp5YjNkelpYSlVlWEJsSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnYzNsekxtSnliM2R6WlhKV1pYSnphVzl1SUQwZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdkeUE5SUhkcGJtUnZkeTVwYm01bGNsZHBaSFJvTzF4dUlDQWdJQ0FnSUNCMllYSWdhQ0E5SUhkcGJtUnZkeTVwYm01bGNraGxhV2RvZER0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEpoZEdsdklEMGdkMmx1Wkc5M0xtUmxkbWxqWlZCcGVHVnNVbUYwYVc4Z2ZId2dNVHRjYmlBZ0lDQWdJQ0FnYzNsekxuZHBibVJ2ZDFCcGVHVnNVbVZ6YjJ4MWRHbHZiaUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQnlZWFJwYnlBcUlIY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUhKaGRHbHZJQ29nYUZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSE41Y3k1c2IyTmhiRk4wYjNKaFoyVWdQU0IzYVc1a2IzY3ViRzlqWVd4VGRHOXlZV2RsTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJqWVhCaFltbHNhWFJwWlhNN1hHNGdJQ0FnSUNBZ0lHTmhjR0ZpYVd4cGRHbGxjeUE5SUhONWN5NWpZWEJoWW1sc2FYUnBaWE1nUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW1OaGJuWmhjMXdpT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2liM0JsYm1kc1hDSTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW5kbFluQmNJam9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUdsbUlDaHplWE11YVhOTmIySnBiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oY0dGaWFXeHBkR2xsYzF0Y0ltRmpZMlZzWlhKdmJXVjBaWEpjSWwwZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ3WVdKcGJHbDBhV1Z6VzF3aWRHOTFZMmhsYzF3aVhTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCa1pYTnJkRzl3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWEJoWW1sc2FYUnBaWE5iWENKclpYbGliMkZ5WkZ3aVhTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhCaFltbHNhWFJwWlhOYlhDSnRiM1Z6WlZ3aVhTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhCaFltbHNhWFJwWlhOYlhDSjBiM1ZqYUdWelhDSmRJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCemVYTXVYMTloZFdScGIxTjFjSEJ2Y25RZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCUFRreFpYMDlPUlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQlhSVUpmUVZWRVNVODZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnUkVWTVFWbGZRMUpGUVZSRlgwTlVXRG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSnRZWFE2SUZzbkxtMXdNeWRkWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dUlDQWdJR1ZzYzJVZ2FXWWdLRU5EWDFkRlEwaEJWRWRCVFVVcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdWdWRpQTlJSGQ0TG1kbGRGTjVjM1JsYlVsdVptOVRlVzVqS0NrN1hHNGdJQ0FnSUNBZ0lITjVjeTVwYzAxdlltbHNaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSE41Y3k1d2JHRjBabTl5YlNBOUlITjVjeTVYUlVOSVFWUmZSMEZOUlR0Y2JpQWdJQ0FnSUNBZ2MzbHpMbXhoYm1kMVlXZGxJRDBnWlc1MkxteGhibWQxWVdkbExuTjFZbk4wY2lnd0xDQXlLVHRjYmlBZ0lDQWdJQ0FnYzNsekxteGhibWQxWVdkbFEyOWtaU0E5SUdWdWRpNXNZVzVuZFdGblpTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dUlDQWdJQ0FnSUNCMllYSWdjM2x6ZEdWdElEMGdaVzUyTG5ONWMzUmxiUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWlc1MkxuQnNZWFJtYjNKdElEMDlQU0JjSW1GdVpISnZhV1JjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNsekxtOXpJRDBnYzNsekxrOVRYMEZPUkZKUFNVUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpTQnBaaUFvWlc1MkxuQnNZWFJtYjNKdElEMDlQU0JjSW1sdmMxd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnplWE11YjNNZ1BTQnplWE11VDFOZlNVOVRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0dWdWRpNXdiR0YwWm05eWJTQTlQVDBnSjJSbGRuUnZiMnh6SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNsekxtbHpUVzlpYVd4bElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MzbHpkR1Z0TG1sdVpHVjRUMllvSjJGdVpISnZhV1FuS1NBK0lDMHhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNsekxtOXpJRDBnYzNsekxrOVRYMEZPUkZKUFNVUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2h6ZVhOMFpXMHVhVzVrWlhoUFppZ25hVzl6SnlrZ1BpQXRNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhONWN5NXZjeUE5SUhONWN5NVBVMTlKVDFNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdRV1JoY0hSaGRHbHZiaUIwYnlCQmJtUnliMmxrSUZCY2JpQWdJQ0FnSUNBZ2FXWWdLSE41YzNSbGJTQTlQVDBnSjJGdVpISnZhV1FnY0NjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhONWMzUmxiU0E5SUNkaGJtUnliMmxrSUhBZ09TNHdKenRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIWmhjaUIyWlhKemFXOXVJRDBnTDF0Y1hHUmNYQzVkS3k4dVpYaGxZeWh6ZVhOMFpXMHBPMXh1SUNBZ0lDQWdJQ0J6ZVhNdWIzTldaWEp6YVc5dUlEMGdkbVZ5YzJsdmJpQS9JSFpsY25OcGIyNWJNRjBnT2lCemVYTjBaVzA3WEc0Z0lDQWdJQ0FnSUhONWN5NXZjMDFoYVc1V1pYSnphVzl1SUQwZ2NHRnljMlZKYm5Rb2MzbHpMbTl6Vm1WeWMybHZiaWs3WEc0Z0lDQWdJQ0FnSUM4dklIZGxZMmhoWjJGdFpTQnpkV0prYjIxaGFXNWNiaUFnSUNBZ0lDQWdhV1lnS0VORFgxZEZRMGhCVkVkQlRVVlRWVUlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE41Y3k1aWNtOTNjMlZ5Vkhsd1pTQTlJSE41Y3k1Q1VrOVhVMFZTWDFSWlVFVmZWMFZEU0VGVVgwZEJUVVZmVTFWQ08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNsekxtSnliM2R6WlhKVWVYQmxJRDBnYzNsekxrSlNUMWRUUlZKZlZGbFFSVjlYUlVOSVFWUmZSMEZOUlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnplWE11WW5KdmQzTmxjbFpsY25OcGIyNGdQU0JsYm5ZdWRtVnljMmx2Ymp0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnZHlBOUlHVnVkaTUzYVc1a2IzZFhhV1IwYUR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2dnUFNCbGJuWXVkMmx1Wkc5M1NHVnBaMmgwTzF4dUlDQWdJQ0FnSUNCMllYSWdjbUYwYVc4Z1BTQmxibll1Y0dsNFpXeFNZWFJwYnlCOGZDQXhPMXh1SUNBZ0lDQWdJQ0J6ZVhNdWQybHVaRzkzVUdsNFpXeFNaWE52YkhWMGFXOXVJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkMmxrZEdnNklISmhkR2x2SUNvZ2R5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdobGFXZG9kRG9nY21GMGFXOGdLaUJvWEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdjM2x6TG14dlkyRnNVM1J2Y21GblpTQTlJSGRwYm1SdmR5NXNiMk5oYkZOMGIzSmhaMlU3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJRjl6ZFhCd2IzSjBWMlZpUjB3Z1BTQmZjM1Z3Y0c5eWRGZGxZbkFnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmZZMkZ1ZG1GeklEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENoY0ltTmhiblpoYzF3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5emRYQndiM0owVjJWaVIwd2dQU0JmWTJGdWRtRnpMbWRsZEVOdmJuUmxlSFFvWENKM1pXSm5iRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjl6ZFhCd2IzSjBWMlZpY0NBOUlGOWpZVzUyWVhNdWRHOUVZWFJoVlZKTUtDZHBiV0ZuWlM5M1pXSndKeWt1YzNSaGNuUnpWMmwwYUNnblpHRjBZVHBwYldGblpTOTNaV0p3SnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMkYwWTJnZ0tHVnljaWtnZXlCOVhHNWNiaUFnSUNBZ0lDQWdjM2x6TG1OaGNHRmlhV3hwZEdsbGN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lZMkZ1ZG1GelhDSTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW05d1pXNW5iRndpT2lBaElWOXpkWEJ3YjNKMFYyVmlSMHdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbmRsWW5CY0lqb2dYM04xY0hCdmNuUlhaV0p3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lITjVjeTVmWDJGMVpHbHZVM1Z3Y0c5eWRDQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFOU9URmxmVDA1Rk9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRmRGUWw5QlZVUkpUem9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCRVJVeEJXVjlEVWtWQlZFVmZRMVJZT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjbTFoZERvZ1d5Y3ViWEF6SjExY2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQnBaaUFvUTBOZlVWRlFURUZaS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsYm5ZZ1BTQjNhVzVrYjNkYlhDSkNTMXdpWFZ0Y0lrUnBjbVZqZEc5eVhDSmRXMXdpY1hWbGNubEVaWFpwWTJWSmJtWnZYQ0pkS0NrN1hHNGdJQ0FnSUNBZ0lITjVjeTVwYzAxdlltbHNaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSE41Y3k1d2JHRjBabTl5YlNBOUlITjVjeTVSVVY5UVRFRlpPMXh1SUNBZ0lDQWdJQ0J6ZVhNdWJHRnVaM1ZoWjJVZ1BTQnplWE11VEVGT1IxVkJSMFZmVlU1TFRrOVhUanRjYmlBZ0lDQWdJQ0FnYzNsekxteGhibWQxWVdkbFEyOWtaU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1Z1ZGk1d2JHRjBabTl5YlNBOVBUMGdYQ0poYm1SeWIybGtYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE41Y3k1dmN5QTlJSE41Y3k1UFUxOUJUa1JTVDBsRU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR1Z1ZGk1d2JHRjBabTl5YlNBOVBUMGdYQ0pwYjNOY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzbHpMbTl6SUQwZ2MzbHpMazlUWDBsUFV6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhONWN5NXZjeUE5SUhONWN5NVBVMTlWVGt0T1QxZE9PMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhONWN5NXZjMVpsY25OcGIyNGdQU0JsYm5ZdWRtVnljMmx2Ymp0Y2JpQWdJQ0FnSUNBZ2MzbHpMbTl6VFdGcGJsWmxjbk5wYjI0Z1BTQndZWEp6WlVsdWRDaHplWE11YjNOV1pYSnphVzl1TG5Od2JHbDBLQ2N1SnlsYk1GMHBPMXh1SUNBZ0lDQWdJQ0J6ZVhNdVluSnZkM05sY2xSNWNHVWdQU0J6ZVhNdVFsSlBWMU5GVWw5VVdWQkZYMUZSWDFCTVFWazdYRzRnSUNBZ0lDQWdJSE41Y3k1aWNtOTNjMlZ5Vm1WeWMybHZiaUE5SURBN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhjZ1BTQmxibll1YzJOeVpXVnVWMmxrZEdnN1hHNGdJQ0FnSUNBZ0lIWmhjaUJvSUQwZ1pXNTJMbk5qY21WbGJraGxhV2RvZER0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEpoZEdsdklEMGdaVzUyTG5CcGVHVnNVbUYwYVc4Z2ZId2dNVHRjYmx4dUlDQWdJQ0FnSUNCemVYTXVkMmx1Wkc5M1VHbDRaV3hTWlhOdmJIVjBhVzl1SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJSEpoZEdsdklDb2dkeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2NtRjBhVzhnS2lCb1hHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnYzNsekxteHZZMkZzVTNSdmNtRm5aU0E5SUhkcGJtUnZkeTVzYjJOaGJGTjBiM0poWjJVN1hHNWNiaUFnSUNBZ0lDQWdjM2x6TG1OaGNHRmlhV3hwZEdsbGN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lZMkZ1ZG1GelhDSTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKdmNHVnVaMnhjSWpvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lkMlZpY0Z3aU9pQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQnplWE11WDE5aGRXUnBiMU4xY0hCdmNuUWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQlBUa3haWDA5T1JUb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JYUlVKZlFWVkVTVTg2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1JFVk1RVmxmUTFKRlFWUkZYME5VV0RvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0p0WVhRNklGc25MbTF3TXlkZFhHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdhV1lnS0dselFtRnBaSFZIWVcxbEtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCbGJuWWdQU0JmWDJSbGRtbGpaUzVuWlhSVGVYTjBaVzFKYm1adktDazdYRzRnSUNBZ0lDQWdJSE41Y3k1d2JHRjBabTl5YlNBOUlHVnVkaTV3YkdGMFptOXliVHRjYmlBZ0lDQWdJQ0FnYzNsekxtSnliM2R6WlhKVWVYQmxJRDBnWlc1MkxtSnliM2R6WlhKVWVYQmxPMXh1SUNBZ0lDQWdJQ0J6ZVhNdWFYTk5iMkpwYkdVZ1BTQmxibll1YVhOTmIySnBiR1U3WEc0Z0lDQWdJQ0FnSUhONWN5NXNZVzVuZFdGblpTQTlJR1Z1ZGk1c1lXNW5kV0ZuWlR0Y2JpQWdJQ0FnSUNBZ2MzbHpMbXhoYm1kMVlXZGxRMjlrWlNBOUlHVnVkaTVzWVc1bmRXRm5aUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVJQ0FnSUNBZ0lDQnplWE11YjNNZ1BTQmxibll1YjNNN1hHNGdJQ0FnSUNBZ0lITjVjeTV2YzFabGNuTnBiMjRnUFNCbGJuWXViM05XWlhKemFXOXVPMXh1SUNBZ0lDQWdJQ0J6ZVhNdWIzTk5ZV2x1Vm1WeWMybHZiaUE5SUdWdWRpNXZjMDFoYVc1V1pYSnphVzl1TzF4dUlDQWdJQ0FnSUNCemVYTXVZbkp2ZDNObGNsWmxjbk5wYjI0Z1BTQmxibll1WW5KdmQzTmxjbFpsY25OcGIyNDdYRzRnSUNBZ0lDQWdJSE41Y3k1M2FXNWtiM2RRYVhobGJGSmxjMjlzZFhScGIyNGdQU0JsYm5ZdWQybHVaRzkzVUdsNFpXeFNaWE52YkhWMGFXOXVPMXh1SUNBZ0lDQWdJQ0J6ZVhNdWJHOWpZV3hUZEc5eVlXZGxJRDBnWlc1MkxteHZZMkZzVTNSdmNtRm5aVHRjYmlBZ0lDQWdJQ0FnYzNsekxtTmhjR0ZpYVd4cGRHbGxjeUE5SUdWdWRpNWpZWEJoWW1sc2FYUnBaWE03WEc0Z0lDQWdJQ0FnSUhONWN5NWZYMkYxWkdsdlUzVndjRzl5ZENBOUlHVnVkaTVoZFdScGIxTjFjSEJ2Y25RN1hHNGdJQ0FnZlZ4dUlDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJpY205M2MyVnlJRzl5SUhKMWJuUnBiV1ZjYmlBZ0lDQWdJQ0FnZG1GeUlIZHBiaUE5SUhkcGJtUnZkeXdnYm1GMklEMGdkMmx1TG01aGRtbG5ZWFJ2Y2l3Z1pHOWpJRDBnWkc5amRXMWxiblFzSUdSdlkwVnNaU0E5SUdSdll5NWtiMk4xYldWdWRFVnNaVzFsYm5RN1hHNGdJQ0FnSUNBZ0lIWmhjaUIxWVNBOUlHNWhkaTUxYzJWeVFXZGxiblF1ZEc5TWIzZGxja05oYzJVb0tUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1EwTmZSVVJKVkU5U0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemVYTXVhWE5OYjJKcGJHVWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhONWN5NXdiR0YwWm05eWJTQTlJSE41Y3k1RlJFbFVUMUpmVUVGSFJUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNvZ1NXNWthV05oZEdVZ2QyaGxkR2hsY2lCemVYTjBaVzBnYVhNZ2JXOWlhV3hsSUhONWMzUmxiVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRDYjI5c1pXRnVmU0JwYzAxdlltbHNaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJQ0FnSUNCemVYTXVhWE5OYjJKcGJHVWdQU0F2Ylc5aWFXeGxmR0Z1WkhKdmFXUjhhWEJvYjI1bGZHbHdZV1F2TG5SbGMzUW9kV0VwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FxSUVsdVpHbGpZWFJsSUhSb1pTQnlkVzV1YVc1bklIQnNZWFJtYjNKdFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwNTFiV0psY24wZ2NHeGhkR1p2Y20xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJHWWxCc1lYbGhZbXhsUVdRZ0lUMDlJRndpZFc1a1pXWnBibVZrWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnplWE11Y0d4aGRHWnZjbTBnUFNCemVYTXVSa0pmVUV4QldVRkNURVZmUVVSVE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzbHpMbkJzWVhSbWIzSnRJRDBnYzNsekxtbHpUVzlpYVd4bElEOGdjM2x6TGsxUFFrbE1SVjlDVWs5WFUwVlNJRG9nYzNsekxrUkZVMHRVVDFCZlFsSlBWMU5GVWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJqZFhKeVRHRnVaM1ZoWjJVZ1BTQnVZWFl1YkdGdVozVmhaMlU3WEc0Z0lDQWdJQ0FnSUdOMWNuSk1ZVzVuZFdGblpTQTlJR04xY25KTVlXNW5kV0ZuWlNBL0lHTjFjbkpNWVc1bmRXRm5aU0E2SUc1aGRpNWljbTkzYzJWeVRHRnVaM1ZoWjJVN1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlFZGxkQ0JqZFhKeVpXNTBJR3hoYm1kMVlXZGxJR2x6YnlBMk16a3RNU0JqYjJSbExseHVJQ0FnSUNBZ0lDQWdLaUJGZUdGdGNHeGxjeUJ2WmlCMllXeHBaQ0JzWVc1bmRXRm5aU0JqYjJSbGN5QnBibU5zZFdSbElGd2llbWd0ZEhkY0lpd2dYQ0psYmx3aUxDQmNJbVZ1TFhWelhDSXNJRndpWm5KY0lpd2dYQ0ptY2kxbWNsd2lMQ0JjSW1WekxXVnpYQ0lzSUdWMFl5NWNiaUFnSUNBZ0lDQWdJQ29nVkdobElHRmpkSFZoYkNCMllXeDFaU0IwYjNSaGJHeDVJR1JsY0dWdVpITWdiMjRnY21WemRXeDBjeUJ3Y205MmFXUmxaQ0JpZVNCa1pYTjBhVzVoZEdsdmJpQndiR0YwWm05eWJTNWNiaUFnSUNBZ0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0VGRISnBibWQ5SUd4aGJtZDFZV2RsUTI5a1pWeHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnYzNsekxteGhibWQxWVdkbFEyOWtaU0E5SUdOMWNuSk1ZVzVuZFdGblpTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dVhHNGdJQ0FnSUNBZ0lHTjFjbkpNWVc1bmRXRm5aU0E5SUdOMWNuSk1ZVzVuZFdGblpTQS9JR04xY25KTVlXNW5kV0ZuWlM1emNHeHBkQ2hjSWkxY0lpbGJNRjBnT2lCemVYTXVURUZPUjFWQlIwVmZSVTVIVEVsVFNEdGNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dTVzVrYVdOaGRHVWdkR2hsSUdOMWNuSmxiblFnYkdGdVozVmhaMlVnYjJZZ2RHaGxJSEoxYm01cGJtY2djM2x6ZEdWdFhHNGdJQ0FnSUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VTNSeWFXNW5mU0JzWVc1bmRXRm5aVnh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2MzbHpMbXhoYm1kMVlXZGxJRDBnWTNWeWNreGhibWQxWVdkbE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUVkbGRDQjBhR1VnYjNNZ2IyWWdjM2x6ZEdWdFhHNGdJQ0FnSUNBZ0lIWmhjaUJwYzBGdVpISnZhV1FnUFNCbVlXeHpaU3dnYVU5VElEMGdabUZzYzJVc0lHOXpWbVZ5YzJsdmJpQTlJQ2NuTENCdmMwMWhhVzVXWlhKemFXOXVJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFZoVW1WemRXeDBJRDBnTDJGdVpISnZhV1FnS0Z4Y1pDc29QenBjWEM1Y1hHUXJLU29wTDJrdVpYaGxZeWgxWVNrZ2ZId2dMMkZ1WkhKdmFXUWdLRnhjWkNzb1B6cGNYQzVjWEdRcktTb3BMMmt1WlhobFl5aHVZWFl1Y0d4aGRHWnZjbTBwTzF4dUlDQWdJQ0FnSUNCcFppQW9kV0ZTWlhOMWJIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpRVzVrY205cFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2YzFabGNuTnBiMjRnUFNCMVlWSmxjM1ZzZEZzeFhTQjhmQ0FuSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl6VFdGcGJsWmxjbk5wYjI0Z1BTQndZWEp6WlVsdWRDaHZjMVpsY25OcGIyNHBJSHg4SURBN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkV0ZTWlhOMWJIUWdQU0F2S0dsUVlXUjhhVkJvYjI1bGZHbFFiMlFwTGlwUFV5QW9LRnhjWkN0ZlB5bDdNaXd6ZlNrdmFTNWxlR1ZqS0hWaEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hWaFVtVnpkV3gwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwVDFNZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiM05XWlhKemFXOXVJRDBnZFdGU1pYTjFiSFJiTWwwZ2ZId2dKeWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZjMDFoYVc1V1pYSnphVzl1SUQwZ2NHRnljMlZKYm5Rb2IzTldaWEp6YVc5dUtTQjhmQ0F3TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tDOG9hVkJvYjI1bGZHbFFZV1I4YVZCdlpDa3ZMbVY0WldNb2JtRjJMbkJzWVhSbWIzSnRLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVTlUSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXpWbVZ5YzJsdmJpQTlJQ2NuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiM05OWVdsdVZtVnljMmx2YmlBOUlEQTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMllYSWdiM05PWVcxbElEMGdjM2x6TGs5VFgxVk9TMDVQVjA0N1hHNGdJQ0FnSUNBZ0lHbG1JQ2h1WVhZdVlYQndWbVZ5YzJsdmJpNXBibVJsZUU5bUtGd2lWMmx1WENJcElDRTlQU0F0TVNrZ2IzTk9ZVzFsSUQwZ2MzbHpMazlUWDFkSlRrUlBWMU03WEc0Z0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0dsUFV5a2diM05PWVcxbElEMGdjM2x6TGs5VFgwbFBVenRjYmlBZ0lDQWdJQ0FnWld4elpTQnBaaUFvYm1GMkxtRndjRlpsY25OcGIyNHVhVzVrWlhoUFppaGNJazFoWTF3aUtTQWhQVDBnTFRFcElHOXpUbUZ0WlNBOUlITjVjeTVQVTE5UFUxZzdYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLRzVoZGk1aGNIQldaWEp6YVc5dUxtbHVaR1Y0VDJZb1hDSllNVEZjSWlrZ0lUMDlJQzB4SUNZbUlHNWhkaTVoY0hCV1pYSnphVzl1TG1sdVpHVjRUMllvWENKTWFXNTFlRndpS1NBOVBUMGdMVEVwSUc5elRtRnRaU0E5SUhONWN5NVBVMTlWVGtsWU8xeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaHBjMEZ1WkhKdmFXUXBJRzl6VG1GdFpTQTlJSE41Y3k1UFUxOUJUa1JTVDBsRU8xeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaHVZWFl1WVhCd1ZtVnljMmx2Ymk1cGJtUmxlRTltS0Z3aVRHbHVkWGhjSWlrZ0lUMDlJQzB4SUh4OElIVmhMbWx1WkdWNFQyWW9YQ0oxWW5WdWRIVmNJaWtnSVQwOUlDMHhLU0J2YzA1aGJXVWdQU0J6ZVhNdVQxTmZURWxPVlZnN1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlFbHVaR2xqWVhSbElIUm9aU0J5ZFc1dWFXNW5JRzl6SUc1aGJXVmNiaUFnSUNBZ0lDQWdJQ29nUUhCeWIzQmxjblI1SUh0VGRISnBibWQ5SUc5elhHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0J6ZVhNdWIzTWdQU0J2YzA1aGJXVTdYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQkpibVJwWTJGMFpTQjBhR1VnY25WdWJtbHVaeUJ2Y3lCMlpYSnphVzl1WEc0Z0lDQWdJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdVM1J5YVc1bmZTQnZjMVpsY25OcGIyNWNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUhONWN5NXZjMVpsY25OcGIyNGdQU0J2YzFabGNuTnBiMjQ3WEc0Z0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdLaUJKYm1ScFkyRjBaU0IwYUdVZ2NuVnVibWx1WnlCdmN5QnRZV2x1SUhabGNuTnBiMjVjYmlBZ0lDQWdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdE9kVzFpWlhKOUlHOXpUV0ZwYmxabGNuTnBiMjVjYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lITjVjeTV2YzAxaGFXNVdaWEp6YVc5dUlEMGdiM05OWVdsdVZtVnljMmx2Ymp0Y2JseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ1NXNWthV05oZEdVZ2RHaGxJSEoxYm01cGJtY2dZbkp2ZDNObGNpQjBlWEJsWEc0Z0lDQWdJQ0FnSUNBcUlFQndjbTl3WlhKMGVTQjdVM1J5YVc1bmZTQmljbTkzYzJWeVZIbHdaVnh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2MzbHpMbUp5YjNkelpYSlVlWEJsSUQwZ2MzbHpMa0pTVDFkVFJWSmZWRmxRUlY5VlRrdE9UMWRPTzF4dUlDQWdJQ0FnSUNBdktpQkVaWFJsY20xcGJtVWdkR2hsSUdKeWIzZHpaWElnZEhsd1pTQXFMMXh1SUNBZ0lDQWdJQ0FvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMGVYQmxVbVZuTVNBOUlDOXRjWEZpY205M2MyVnlmRzFwWTNKdmJXVnpjMlZ1WjJWeWZIRnhmSE52WjI5MWZIRjZiMjVsZkd4cFpXSmhiM3h0WVhoMGFHOXVmSFZqWW5OOE16WXdJR0Z3YUc5dVpYd3pOakJpY205M2MyVnlmR0poYVdSMVltOTRZWEJ3ZkdKaGFXUjFZbkp2ZDNObGNueHRZWGgwYUc5dWZHMTRZbkp2ZDNObGNueHRhWFZwWW5KdmQzTmxjaTlwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSNWNHVlNaV2N5SUQwZ0wzRnhZbkp2ZDNObGNueDFZMkp5YjNkelpYSjhkV0p5YjNkelpYSjhaV1JuWlM5cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUjVjR1ZTWldjeklEMGdMMk5vY205dFpYeHpZV1poY21sOFptbHlaV1p2ZUh4MGNtbGtaVzUwZkc5d1pYSmhmRzl3Y2x4Y0wzeHZkWEJsYm1jdmFUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmljbTkzYzJWeVZIbHdaWE1nUFNCMGVYQmxVbVZuTVM1bGVHVmpLSFZoS1NCOGZDQjBlWEJsVW1Wbk1pNWxlR1ZqS0hWaEtTQjhmQ0IwZVhCbFVtVm5NeTVsZUdWaktIVmhLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdKeWIzZHpaWEpVZVhCbElEMGdZbkp2ZDNObGNsUjVjR1Z6SUQ4Z1luSnZkM05sY2xSNWNHVnpXekJkTG5SdlRHOTNaWEpEWVhObEtDa2dPaUJ6ZVhNdVFsSlBWMU5GVWw5VVdWQkZYMVZPUzA1UFYwNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RME5mVjBWRFNFRlVSMEZOUlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtOTNjMlZ5Vkhsd1pTQTlJSE41Y3k1Q1VrOVhVMFZTWDFSWlVFVmZWMFZEU0VGVVgwZEJUVVU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaERRMTlSVVZCTVFWa3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkp2ZDNObGNsUjVjR1VnUFNCemVYTXVRbEpQVjFORlVsOVVXVkJGWDFGUlgxQk1RVms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaGljbTkzYzJWeVZIbHdaU0E5UFQwZ1hDSnpZV1poY21sY0lpQW1KaUJwYzBGdVpISnZhV1FwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KdmQzTmxjbFI1Y0dVZ1BTQnplWE11UWxKUFYxTkZVbDlVV1ZCRlgwRk9SRkpQU1VRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hpY205M2MyVnlWSGx3WlNBOVBUMGdYQ0p4Y1Z3aUlDWW1JSFZoTG0xaGRHTm9LQzloYm1SeWIybGtMaXBoY0hCc1pYZGxZbXRwZEM5cEtTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbTkzYzJWeVZIbHdaU0E5SUhONWN5NUNVazlYVTBWU1gxUlpVRVZmUVU1RVVrOUpSRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwZVhCbFRXRndJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkdGFXTnliMjFsYzNObGJtZGxjaWM2SUhONWN5NUNVazlYVTBWU1gxUlpVRVZmVjBWRFNFRlVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2QwY21sa1pXNTBKem9nYzNsekxrSlNUMWRUUlZKZlZGbFFSVjlKUlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblpXUm5aU2M2SUhONWN5NUNVazlYVTBWU1gxUlpVRVZmUlVSSFJTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5Nell3SUdGd2FHOXVaU2M2SUhONWN5NUNVazlYVTBWU1gxUlpVRVZmTXpZd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHRlR0p5YjNkelpYSW5PaUJ6ZVhNdVFsSlBWMU5GVWw5VVdWQkZYMDFCV0ZSSVQwNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMjl3Y2k4bk9pQnplWE11UWxKUFYxTkZVbDlVV1ZCRlgwOVFSVkpCTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkMVluSnZkM05sY2ljNklITjVjeTVDVWs5WFUwVlNYMVJaVUVWZlZVTmNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lITjVjeTVpY205M2MyVnlWSGx3WlNBOUlIUjVjR1ZOWVhCYlluSnZkM05sY2xSNWNHVmRJSHg4SUdKeWIzZHpaWEpVZVhCbE8xeHVJQ0FnSUNBZ0lDQjlLU2dwTzF4dVhHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCSmJtUnBZMkYwWlNCMGFHVWdjblZ1Ym1sdVp5QmljbTkzYzJWeUlIWmxjbk5wYjI1Y2JpQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRUZEhKcGJtZDlJR0p5YjNkelpYSldaWEp6YVc5dVhHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0J6ZVhNdVluSnZkM05sY2xabGNuTnBiMjRnUFNCY0lsd2lPMXh1SUNBZ0lDQWdJQ0F2S2lCRVpYUmxjbTFwYm1VZ2RHaGxJR0p5YjNkelpYSWdkbVZ5YzJsdmJpQnVkVzFpWlhJZ0tpOWNiaUFnSUNBZ0lDQWdLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZG1WeWMybHZibEpsWnpFZ1BTQXZLRzF4Y1dKeWIzZHpaWEo4YldsamNtOXRaWE56Wlc1blpYSjhjWEY4YzI5bmIzVjhjWHB2Ym1WOGJHbGxZbUZ2ZkcxaGVIUm9iMjU4ZFdOOGRXTmljM3d6TmpBZ1lYQm9iMjVsZkRNMk1IeGlZV2xrZFdKdmVHRndjSHhpWVdsa2RYeHRZWGgwYUc5dWZHMTRZbkp2ZDNObGNueHRhWFZwS0Q4NkxtaDVZbkpwWkNrL0tTaHRiMkpwYkdVcFB5aGljbTkzYzJWeUtUOWNYQzgvS0Z0Y1hHUXVYU3NwTDJrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RtVnljMmx2YmxKbFp6SWdQU0F2S0hGeFluSnZkM05sY254amFISnZiV1Y4YzJGbVlYSnBmR1pwY21WbWIzaDhkSEpwWkdWdWRIeHZjR1Z5WVh4dmNISmNYQzk4YjNWd1pXNW5LU2h0YjJKcGJHVXBQeWhpY205M2MyVnlLVDljWEM4L0tGdGNYR1F1WFNzcEwyazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkRzF3SUQwZ2RXRXViV0YwWTJnb2RtVnljMmx2YmxKbFp6RXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9JWFJ0Y0NrZ2RHMXdJRDBnZFdFdWJXRjBZMmdvZG1WeWMybHZibEpsWnpJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNsekxtSnliM2R6WlhKV1pYSnphVzl1SUQwZ2RHMXdJRDhnZEcxd1d6UmRJRG9nWENKY0lqdGNiaUFnSUNBZ0lDQWdmU2tvS1R0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnZHlBOUlIZHBibVJ2ZHk1cGJtNWxjbGRwWkhSb0lIeDhJR1J2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWRDNWpiR2xsYm5SWGFXUjBhRHRjYmlBZ0lDQWdJQ0FnZG1GeUlHZ2dQU0IzYVc1a2IzY3VhVzV1WlhKSVpXbG5hSFFnZkh3Z1pHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwTG1Oc2FXVnVkRWhsYVdkb2REdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKaGRHbHZJRDBnZDJsdVpHOTNMbVJsZG1salpWQnBlR1ZzVW1GMGFXOGdmSHdnTVR0Y2JseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ1NXNWthV05oZEdVZ2RHaGxJSEpsWVd3Z2NHbDRaV3dnY21WemIyeDFkR2x2YmlCdlppQjBhR1VnZDJodmJHVWdaMkZ0WlNCM2FXNWtiM2RjYmlBZ0lDQWdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdFRhWHBsZlNCM2FXNWtiM2RRYVhobGJGSmxjMjlzZFhScGIyNWNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUhONWN5NTNhVzVrYjNkUWFYaGxiRkpsYzI5c2RYUnBiMjRnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IzYVdSMGFEb2djbUYwYVc4Z0tpQjNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHVnBaMmgwT2lCeVlYUnBieUFxSUdoY2JpQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0J6ZVhNdVgyTm9aV05yVjJWaVIweFNaVzVrWlhKTmIyUmxJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTmpMbWRoYldVdWNtVnVaR1Z5Vkhsd1pTQWhQVDBnWTJNdVoyRnRaUzVTUlU1RVJWSmZWRmxRUlY5WFJVSkhUQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pVYUdseklHWmxZWFIxY21VZ2MzVndjRzl5ZEhNZ1YyVmlSMHdnY21WdVpHVnlJRzF2WkdVZ2IyNXNlUzVjSWlrN1hHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBiWEJEWVc1MllYTXhJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaGNJbU5oYm5aaGMxd2lLVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdZM0psWVhSbE0wUkRiMjUwWlhoMElEMGdablZ1WTNScGIyNGdLR05oYm5aaGN5d2diM0IwWDJGMGRISnBZbk1zSUc5d2RGOWpiMjUwWlhoMFZIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c5d2RGOWpiMjUwWlhoMFZIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqWVc1MllYTXVaMlYwUTI5dWRHVjRkQ2h2Y0hSZlkyOXVkR1Y0ZEZSNWNHVXNJRzl3ZEY5aGRIUnlhV0p6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamNtVmhkR1V6UkVOdmJuUmxlSFFvWTJGdWRtRnpMQ0J2Y0hSZllYUjBjbWxpY3l3Z1hDSjNaV0puYkZ3aUtTQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamNtVmhkR1V6UkVOdmJuUmxlSFFvWTJGdWRtRnpMQ0J2Y0hSZllYUjBjbWxpY3l3Z1hDSmxlSEJsY21sdFpXNTBZV3d0ZDJWaVoyeGNJaWtnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM0psWVhSbE0wUkRiMjUwWlhoMEtHTmhiblpoY3l3Z2IzQjBYMkYwZEhKcFluTXNJRndpZDJWaWEybDBMVE5rWENJcElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOeVpXRjBaVE5FUTI5dWRHVjRkQ2hqWVc1MllYTXNJRzl3ZEY5aGRIUnlhV0p6TENCY0ltMXZlaTEzWldKbmJGd2lLU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCall5NXplWE11Ykc5allXeFRkRzl5WVdkbElHbHpJR0VnYkc5allXd2djM1J2Y21GblpTQmpiMjF3YjI1bGJuUXVYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCN1QySnFaV04wZlNCc2IyTmhiRk4wYjNKaFoyVmNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiRzlqWVd4VGRHOXlZV2RsSUQwZ2MzbHpMbXh2WTJGc1UzUnZjbUZuWlNBOUlIZHBiaTVzYjJOaGJGTjBiM0poWjJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjJOaGJGTjBiM0poWjJVdWMyVjBTWFJsYlNoY0luTjBiM0poWjJWY0lpd2dYQ0pjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjJOaGJGTjBiM0poWjJVdWNtVnRiM1psU1hSbGJTaGNJbk4wYjNKaFoyVmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNiMk5oYkZOMGIzSmhaMlVnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2QyRnliaUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZeTUzWVhKdVNVUW9OVEl3TUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjM2x6TG14dlkyRnNVM1J2Y21GblpTQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuWlhSSmRHVnRJRG9nZDJGeWJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFJKZEdWdElEb2dkMkZ5Yml4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXMXZkbVZKZEdWdElEb2dkMkZ5Yml4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHVmhjaUE2SUhkaGNtNWNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IyWVhJZ1gzTjFjSEJ2Y25SWFpXSndJRDBnWDNSdGNFTmhiblpoY3pFdWRHOUVZWFJoVlZKTUtDZHBiV0ZuWlM5M1pXSndKeWt1YzNSaGNuUnpWMmwwYUNnblpHRjBZVHBwYldGblpTOTNaV0p3SnlrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmYzNWd2NHOXlkRU5oYm5aaGN5QTlJQ0VoWDNSdGNFTmhiblpoY3pFdVoyVjBRMjl1ZEdWNGRDaGNJakprWENJcE8xeHVJQ0FnSUNBZ0lDQjJZWElnWDNOMWNIQnZjblJYWldKSFRDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQnBaaUFvUTBOZlZFVlRWQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM04xY0hCdmNuUlhaV0pIVENBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tITjVjeTVpY205M2MyVnlWSGx3WlNBOVBUMGdjM2x6TGtKU1QxZFRSVkpmVkZsUVJWOVhSVU5JUVZSZlIwRk5SU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM04xY0hCdmNuUlhaV0pIVENBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2QybHVMbGRsWWtkTVVtVnVaR1Z5YVc1blEyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNOMWNIQnZjblJYWldKSFRDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dWR2hsSUdOaGNHRmlhV3hwZEdsbGN5QnZaaUIwYUdVZ1kzVnljbVZ1ZENCd2JHRjBabTl5YlZ4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDlpYW1WamRIMGdZMkZ3WVdKcGJHbDBhV1Z6WEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQjJZWElnWTJGd1lXSnBiR2wwYVdWeklEMGdjM2x6TG1OaGNHRmlhV3hwZEdsbGN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lZMkZ1ZG1GelhDSTZJRjl6ZFhCd2IzSjBRMkZ1ZG1GekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKdmNHVnVaMnhjSWpvZ1gzTjFjSEJ2Y25SWFpXSkhUQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lkMlZpY0Z3aU9pQmZjM1Z3Y0c5eWRGZGxZbkFzWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hrYjJORmJHVmJKMjl1ZEc5MVkyaHpkR0Z5ZENkZElDRTlQU0IxYm1SbFptbHVaV1FnZkh3Z1pHOWpXeWR2Ym5SdmRXTm9jM1JoY25RblhTQWhQVDBnZFc1a1pXWnBibVZrSUh4OElHNWhkaTV0YzFCdmFXNTBaWEpGYm1GaWJHVmtLVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRndZV0pwYkdsMGFXVnpXMXdpZEc5MVkyaGxjMXdpWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtiMk5GYkdWYkoyOXViVzkxYzJWMWNDZGRJQ0U5UFNCMWJtUmxabWx1WldRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhCaFltbHNhWFJwWlhOYlhDSnRiM1Z6WlZ3aVhTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hrYjJORmJHVmJKMjl1YTJWNWRYQW5YU0FoUFQwZ2RXNWtaV1pwYm1Wa0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGd1lXSnBiR2wwYVdWelcxd2lhMlY1WW05aGNtUmNJbDBnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb2QybHVMa1JsZG1salpVMXZkR2x2YmtWMlpXNTBJSHg4SUhkcGJpNUVaWFpwWTJWUGNtbGxiblJoZEdsdmJrVjJaVzUwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ3WVdKcGJHbDBhV1Z6VzF3aVlXTmpaV3hsY205dFpYUmxjbHdpWFNBOUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJRjlmWVhWa2FXOVRkWEJ3YjNKME8xeHVYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQkJkV1JwYnlCemRYQndiM0owSUdsdUlIUm9aU0JpY205M2MyVnlYRzRnSUNBZ0lDQWdJQ0FxWEc0Z0lDQWdJQ0FnSUNBcUlFMVZURlJKWDBOSVFVNU9SVXdnSUNBZ0lDQWdJRG9nVFhWc2RHbHdiR1VnWVhWa2FXOGdkMmhwYkdVZ2NHeGhlV2x1WnlBdElFbG1JR2wwSUdSdlpYTnVKM1FzSUhsdmRTQmpZVzRnYjI1c2VTQndiR0Y1SUdKaFkydG5jbTkxYm1RZ2JYVnphV05jYmlBZ0lDQWdJQ0FnSUNvZ1YwVkNYMEZWUkVsUElDQWdJQ0FnSUNBZ0lDQWdPaUJUZFhCd2IzSjBJR1p2Y2lCWFpXSkJkV1JwYnlBdElGTjFjSEJ2Y25RZ1Z6TkRJRmRsWWtGMVpHbHZJSE4wWVc1a1lYSmtjeXdnWVd4c0lHOW1JSFJvWlNCaGRXUnBieUJqWVc0Z1ltVWdjR3hoZVdWa1hHNGdJQ0FnSUNBZ0lDQXFJRUZWVkU5UVRFRlpJQ0FnSUNBZ0lDQWdJQ0FnSURvZ1UzVndjRzl5ZEhNZ1lYVjBieTF3YkdGNUlHRjFaR2x2SUMwZ2FXWWdSRzl1NG9DWWRDQnpkWEJ3YjNKMElHbDBMQ0JQYmlCaElIUnZkV05vSUdSbGRHVmpkR2x1WnlCaVlXTnJaM0p2ZFc1a0lHMTFjMmxqSUdOaGJuWmhjeXdnWVc1a0lIUm9aVzRnY21Wd2JHRjVYRzRnSUNBZ0lDQWdJQ0FxSUZKRlVFeEJXVjlCUmxSRlVsOVVUMVZEU0NBZ0lEb2dWR2hsSUdacGNuTjBJRzExYzJsaklIZHBiR3dnWm1GcGJDd2diWFZ6ZENCaVpTQnlaWEJzWVhrZ1lXWjBaWElnZEc5MVkyaHpkR0Z5ZEZ4dUlDQWdJQ0FnSUNBZ0tpQlZVMFZmUlUxUVZFbEZSRjlGVmtWT1ZDQWdJQ0E2SUZkb1pYUm9aWElnZEc4Z2RYTmxJSFJvWlNCbGJYQjBhV1ZrSUdWMlpXNTBJSFJ2SUhKbGNHeGhZMlVnYkc5aFpDQmpZV3hzWW1GamExeHVJQ0FnSUNBZ0lDQWdLaUJFUlV4QldWOURVa1ZCVkVWZlExUllJQ0FnSUNBNklHUmxiR0Y1SUdOeVpXRjBaV1FnZEdobElHTnZiblJsZUhRZ2IySnFaV04wSUMwZ2IyNXNlU0IzWldKQmRXUnBiMXh1SUNBZ0lDQWdJQ0FnS2lCT1JVVkVYMDFCVGxWQlRGOU1UMDlRSUNBZ0lDQTZJR3h2YjNBZ1lYUjBjbWxpZFhSbElHWmhhV3gxY21Vc0lHNWxaV1FnZEc4Z2NHVnlabTl5YlNCc2IyOXdJRzFoYm5WaGJHeDVYRzRnSUNBZ0lDQWdJQ0FxWEc0Z0lDQWdJQ0FnSUNBcUlFMWhlU0JpWlNCdGIyUnBabWxqWVhScGIyNXpJR1p2Y2lCaElHWmxkeUJpY205M2MyVnlJSFpsY25OcGIyNWNiaUFnSUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0FnSUNobWRXNWpkR2x2YmlncGUxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdSRVZDVlVjZ1BTQm1ZV3h6WlR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIWmxjbk5wYjI0Z1BTQnplWE11WW5KdmQzTmxjbFpsY25OcGIyNDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR05vWldOcklHbG1JR0p5YjNkelpYSWdjM1Z3Y0c5eWRITWdWMlZpSUVGMVpHbHZYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmphR1ZqYXlCWFpXSWdRWFZrYVc4bmN5QmpiMjUwWlhoMFhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2MzVndjRzl5ZEZkbFlrRjFaR2x2SUQwZ2MzbHpMbUp5YjNkelpYSlVlWEJsSUNFOVBTQnplWE11UWxKUFYxTkZVbDlVV1ZCRlgxZEZRMGhCVkY5SFFVMUZJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0VoS0hkcGJtUnZkeTVCZFdScGIwTnZiblJsZUhRZ2ZId2dkMmx1Wkc5M0xuZGxZbXRwZEVGMVpHbHZRMjl1ZEdWNGRDQjhmQ0IzYVc1a2IzY3ViVzk2UVhWa2FXOURiMjUwWlhoMEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1gxOWhkV1JwYjFOMWNIQnZjblFnUFNCN0lFOU9URmxmVDA1Rk9pQm1ZV3h6WlN3Z1YwVkNYMEZWUkVsUE9pQnpkWEJ3YjNKMFYyVmlRWFZrYVc4c0lFUkZURUZaWDBOU1JVRlVSVjlEVkZnNklHWmhiSE5sSUgwN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHplWE11YjNNZ1BUMDlJSE41Y3k1UFUxOUpUMU1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpUMU1nYm04Z1pYWmxiblFnZEdoaGRDQjFjMlZrSUhSdklIQmhjbk5sSUdOdmJYQnNaWFJsWkNCallXeHNZbUZqYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIUm9hWE1nZEdsdFpTQnBjeUJ1YjNRZ1kyOXRjR3hsZEdVc0lHTmhiaUJ1YjNRZ2NHeGhlVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDE5aGRXUnBiMU4xY0hCdmNuUXVWVk5GWDB4UFFVUkZVbDlGVmtWT1ZDQTlJQ2RzYjJGa1pXUnRaWFJoWkdGMFlTYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHplWE11WW5KdmQzTmxjbFI1Y0dVZ1BUMDlJSE41Y3k1Q1VrOVhVMFZTWDFSWlVFVmZSa2xTUlVaUFdDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjlmWVhWa2FXOVRkWEJ3YjNKMExrUkZURUZaWDBOU1JVRlVSVjlEVkZnZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5ZllYVmthVzlUZFhCd2IzSjBMbFZUUlY5TVQwRkVSVkpmUlZaRlRsUWdQU0FuWTJGdWNHeGhlU2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZVhNdWIzTWdQVDA5SUhONWN5NVBVMTlCVGtSU1QwbEVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITjVjeTVpY205M2MyVnlWSGx3WlNBOVBUMGdjM2x6TGtKU1QxZFRSVkpmVkZsUVJWOVZReWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZYMkYxWkdsdlUzVndjRzl5ZEM1UFRrVmZVMDlWVWtORklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0VSRlFsVkhLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG14dlp5Z25Zbkp2ZDNObElIUjVjR1U2SUNjZ0t5QnplWE11WW5KdmQzTmxjbFI1Y0dVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWXk1c2IyY29KMkp5YjNkelpTQjJaWEp6YVc5dU9pQW5JQ3NnZG1WeWMybHZiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbXh2WnlnblRWVk1WRWxmUTBoQlRrNUZURG9nSnlBcklGOWZZWFZrYVc5VGRYQndiM0owTGsxVlRGUkpYME5JUVU1T1JVd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCall5NXNiMmNvSjFkRlFsOUJWVVJKVHpvZ0p5QXJJRjlmWVhWa2FXOVRkWEJ3YjNKMExsZEZRbDlCVlVSSlR5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOakxteHZaeWduUVZWVVQxQk1RVms2SUNjZ0t5QmZYMkYxWkdsdlUzVndjRzl5ZEM1QlZWUlBVRXhCV1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dNQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwS0NrN1hHNWNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoZlgyRjFaR2x2VTNWd2NHOXlkQzVYUlVKZlFWVkVTVThwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZlgyRjFaR2x2VTNWd2NHOXlkQzVqYjI1MFpYaDBJRDBnYm1WM0lDaDNhVzVrYjNjdVFYVmthVzlEYjI1MFpYaDBJSHg4SUhkcGJtUnZkeTUzWldKcmFYUkJkV1JwYjBOdmJuUmxlSFFnZkh3Z2QybHVaRzkzTG0xdmVrRjFaR2x2UTI5dWRHVjRkQ2tvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppaGZYMkYxWkdsdlUzVndjRzl5ZEM1RVJVeEJXVjlEVWtWQlZFVmZRMVJZS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1hzZ1gxOWhkV1JwYjFOMWNIQnZjblF1WTI5dWRHVjRkQ0E5SUc1bGR5QW9kMmx1Wkc5M0xrRjFaR2x2UTI5dWRHVjRkQ0I4ZkNCM2FXNWtiM2N1ZDJWaWEybDBRWFZrYVc5RGIyNTBaWGgwSUh4OElIZHBibVJ2ZHk1dGIzcEJkV1JwYjBOdmJuUmxlSFFwS0NrN0lIMHNJREFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNCallYUmphQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gxOWhkV1JwYjFOMWNIQnZjblF1VjBWQ1gwRlZSRWxQSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZeTVzYjJkSlJDZzFNakF4S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCbWIzSnRZWFJUZFhCd2IzSjBJRDBnVzEwN1hHNWNiaUFnSUNBZ0lDQWdLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVhWa2FXOGdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZGhkV1JwYnljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1lYVmthVzh1WTJGdVVHeGhlVlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYjJkbklEMGdZWFZrYVc4dVkyRnVVR3hoZVZSNWNHVW9KMkYxWkdsdkwyOW5aenNnWTI5a1pXTnpQVndpZG05eVltbHpYQ0luS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iMmRuS1NCbWIzSnRZWFJUZFhCd2IzSjBMbkIxYzJnb0p5NXZaMmNuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiWEF6SUQwZ1lYVmthVzh1WTJGdVVHeGhlVlI1Y0dVb0oyRjFaR2x2TDIxd1pXY25LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JYQXpLU0JtYjNKdFlYUlRkWEJ3YjNKMExuQjFjMmdvSnk1dGNETW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2QyRjJJRDBnWVhWa2FXOHVZMkZ1VUd4aGVWUjVjR1VvSjJGMVpHbHZMM2RoZGpzZ1kyOWtaV056UFZ3aU1Wd2lKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGhkaWtnWm05eWJXRjBVM1Z3Y0c5eWRDNXdkWE5vS0NjdWQyRjJKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHMXdOQ0E5SUdGMVpHbHZMbU5oYmxCc1lYbFVlWEJsS0NkaGRXUnBieTl0Y0RRbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYlhBMEtTQm1iM0p0WVhSVGRYQndiM0owTG5CMWMyZ29KeTV0Y0RRbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYlRSaElEMGdZWFZrYVc4dVkyRnVVR3hoZVZSNWNHVW9KMkYxWkdsdkwzZ3RiVFJoSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzAwWVNrZ1ptOXliV0YwVTNWd2NHOXlkQzV3ZFhOb0tDY3ViVFJoSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcEtDazdYRzRnSUNBZ0lDQWdJRjlmWVhWa2FXOVRkWEJ3YjNKMExtWnZjbTFoZENBOUlHWnZjbTFoZEZOMWNIQnZjblE3WEc1Y2JpQWdJQ0FnSUNBZ2MzbHpMbDlmWVhWa2FXOVRkWEJ3YjNKMElEMGdYMTloZFdScGIxTjFjSEJ2Y25RN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQXFJRTVsZEhkdmNtc2dkSGx3WlNCbGJuVnRaWEpoZEdsdmJseHVJQ0FnSUNBcUlDRWplbWhjYmlBZ0lDQWdLaURudlpIbnU1em5zYnZsbm92bW5wcmt1TDVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJsYm5WdElITjVjeTVPWlhSM2IzSnJWSGx3WlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE41Y3k1T1pYUjNiM0pyVkhsd1pTQTlJSHRjYmlBZ0lDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0lDQXFJQ0VqWlc1Y2JpQWdJQ0FnSUNBZ0lDb2dUbVYwZDI5eWF5QnBjeUIxYm5KbFlXTm9ZV0pzWlM1Y2JpQWdJQ0FnSUNBZ0lDb2dJU042YUZ4dUlDQWdJQ0FnSUNBZ0tpRG52WkhudTV6a3VJM3BnSnBjYmlBZ0lDQWdJQ0FnSUNwY2JpQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJSHRPZFcxaVpYSjlJRTVQVGtWY2JpQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJRTVQVGtVNklEQXNYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ0FnSUNBcUlFNWxkSGR2Y21zZ2FYTWdjbVZoWTJoaFlteGxJSFpwWVNCWGFVWnBJRzl5SUdOaFlteGxMbHh1SUNBZ0lDQWdJQ0FnS2lBaEkzcG9YRzRnSUNBZ0lDQWdJQ0FxSU9tQW11aS9oK2FYb09lNnYrYUlsdWlBaGVhY2llZTZ2K2Fjck9XY3NPZTlrZWU3bk9pL251YU9wZVdib09lSnVlZTlrVnh1SUNBZ0lDQWdJQ0FnS2x4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMDUxYldKbGNuMGdURUZPWEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQk1RVTQ2SURFc1hHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lBaEkyVnVYRzRnSUNBZ0lDQWdJQ0FxSUU1bGRIZHZjbXNnYVhNZ2NtVmhZMmhoWW14bElIWnBZU0JYYVhKbGJHVnpjeUJYYVdSbElFRnlaV0VnVG1WMGQyOXlhMXh1SUNBZ0lDQWdJQ0FnS2lBaEkzcG9YRzRnSUNBZ0lDQWdJQ0FxSU9tQW11aS9oK2ljZ3VlcW5lZW51K1dLcU9lOWtlZTduT2kvbnVhT3BlV2JvT2VKdWVlOWtWeHVJQ0FnSUNBZ0lDQWdLbHh1SUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwNTFiV0psY24wZ1YxZEJUbHh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ1YxZEJUam9nTWx4dUlDQWdJSDA3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQVkyeGhjM01nYzNselhHNGdJQ0FnSUNvdlhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nUjJWMElIUm9aU0J1WlhSM2IzSnJJSFI1Y0dVZ2IyWWdZM1Z5Y21WdWRDQmtaWFpwWTJVc0lISmxkSFZ5YmlCall5NXplWE11VG1WMGQyOXlhMVI1Y0dVdVRFRk9JR2xtSUdaaGFXeDFjbVV1WEc0Z0lDQWdJQ29nSVNONmFGeHVJQ0FnSUNBcUlPaU90K1dQbHVXOWsrV0pqZWl1dnVXa2grZWFoT2U5a2VlN25PZXh1K1dlaXl3ZzVhYUM1cDZjNTcyUjU3dWM1N0c3NVo2TDVwZWc1ck9WNkk2MzVZK1c3N3lNNmJ1WTZLNms1YkNHNkwrVTVadWVJR05qTG5ONWN5NU9aWFIzYjNKclZIbHdaUzVNUVU1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWjJWMFRtVjBkMjl5YTFSNWNHVmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdE9aWFIzYjNKclZIbHdaWDFjYmlBZ0lDQWdLaTljYmlBZ0lDQnplWE11WjJWMFRtVjBkMjl5YTFSNWNHVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdWRTlFVHpvZ2JtVmxaQ0IwYnlCcGJYQnNaVzFsYm5RZ2RHaHBjeUJtYjNJZ2JXOWlhV3hsSUhCb2IyNWxjeTVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE41Y3k1T1pYUjNiM0pyVkhsd1pTNU1RVTQ3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0tpQkhaWFFnZEdobElHSmhkSFJsY25rZ2JHVjJaV3dnYjJZZ1kzVnljbVZ1ZENCa1pYWnBZMlVzSUhKbGRIVnliaUF4TGpBZ2FXWWdabUZwYkhWeVpTNWNiaUFnSUNBZ0tpQWhJM3BvWEc0Z0lDQWdJQ29nNkk2MzVZK1c1YjJUNVltTjZLNis1YVNINTVxRTU1UzE1ckdnNTVTMTZZZVA3N3lNNWFhQzVwNmM1NVMxNlllUDVwZWc1ck9WNkk2MzVZK1c3N3lNNmJ1WTZLNms1YkNHNkwrVTVadWVJREZjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdaMlYwUW1GMGRHVnllVXhsZG1Wc1hHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1RuVnRZbVZ5ZlNBdElEQXVNQ0IrSURFdU1GeHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NW5aWFJDWVhSMFpYSjVUR1YyWld3Z1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1ZFOUVUem9nYm1WbFpDQjBieUJwYlhCc1pXMWxiblFnZEdocGN5Qm1iM0lnYlc5aWFXeGxJSEJvYjI1bGN5NWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlERXVNRHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUm05eVkyVnpJSFJvWlNCbllYSmlZV2RsSUdOdmJHeGxZM1JwYjI0c0lHOXViSGtnWVhaaGFXeGhZbXhsSUdsdUlFcFRRbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdaMkZ5WW1GblpVTnZiR3hsWTNSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZVhNdVoyRnlZbUZuWlVOdmJHeGxZM1FnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUU0dlFTQnBiaUIzWldKY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVnpkR0Z5ZENCMGFHVWdTbE1nVmswc0lHOXViSGtnWVhaaGFXeGhZbXhsSUdsdUlFcFRRbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdjbVZ6ZEdGeWRGWk5YRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMbkpsYzNSaGNuUldUU0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdMeThnVGk5QklHbHVJSGRsWWx4dUlDQWdJSDA3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVYRzRnSUNBZ0lDb2dVbVYwZFhKdUlIUm9aU0J6WVdabElHRnlaV0VnY21WamRDNGdQR0p5THo1Y2JpQWdJQ0FnS2lCdmJteDVJR0YyWVdsc1lXSnNaU0J2YmlCMGFHVWdhVTlUSUc1aGRHbDJaU0J3YkdGMFptOXliU3dnYjNSb1pYSjNhWE5sSUdsMElIZHBiR3dnY21WMGRYSnVJR0VnY21WamRDQjNhWFJvSUdSbGMybG5iaUJ5WlhOdmJIVjBhVzl1SUhOcGVtVXVYRzRnSUNBZ0lDb2dJU042YUZ4dUlDQWdJQ0FxSU9pL2xPV2JudWFKaSthY3V1V3hqK1c1bGVXdWllV0ZxT1dNdXVXZm4rKzhqT2VicnVXSmplUzdoZVdjcUNCcFQxTWc1WTZmNTVTZjVibXo1WSt3NXB5SjVwV0k0NENDNVlXMjVhNkQ1Ym16NVkrdzViQ0c2YnVZNks2azZMK1U1WnVlNks2KzZLNmg1WWlHNkw2bzU0Nkg1YkM2NWErNDQ0Q0NYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQm5aWFJUWVdabFFYSmxZVkpsWTNSY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0U1pXTjBmVnh1SUNBZ0lDb3ZYRzRnSUNBZ2MzbHpMbWRsZEZOaFptVkJjbVZoVW1WamRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJSFpwYzJsaWJHVlRhWHBsSUQwZ1kyTXVkbWxsZHk1blpYUldhWE5wWW14bFUybDZaU2dwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJNdWNtVmpkQ2d3TENBd0xDQjJhWE5wWW14bFUybDZaUzUzYVdSMGFDd2dkbWx6YVdKc1pWTnBlbVV1YUdWcFoyaDBLVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTJobFkyc2dkMmhsZEdobGNpQmhiaUJ2WW1wbFkzUWdhWE1nZG1Gc2FXUXNYRzRnSUNBZ0lDb2dTVzRnZDJWaUlHVnVaMmx1WlN3Z2FYUWdkMmxzYkNCeVpYUjFjbTRnZEhKMVpTQnBaaUIwYUdVZ2IySnFaV04wSUdWNGFYTjBYRzRnSUNBZ0lDb2dTVzRnYm1GMGFYWmxJR1Z1WjJsdVpTd2dhWFFnZDJsc2JDQnlaWFIxY200Z2RISjFaU0JwWmlCMGFHVWdTbE1nYjJKcVpXTjBJR0Z1WkNCMGFHVWdZMjl5Y21WemNHOXVaQ0J1WVhScGRtVWdiMkpxWldOMElHRnlaU0JpYjNSb0lIWmhiR2xrWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JwYzA5aWFtVmpkRlpoYkdsa1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5aWFseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OUlGWmhiR2xrYVhSNUlHOW1JSFJvWlNCdlltcGxZM1JjYmlBZ0lDQWdLaTljYmlBZ0lDQnplWE11YVhOUFltcGxZM1JXWVd4cFpDQTlJR1oxYm1OMGFXOXVJQ2h2WW1vcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0c5aWFpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkVkVzF3SUhONWMzUmxiU0JwYm1admNtMWhkR2x2Ym5OY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdSMWJYQmNiaUFnSUNBZ0tpOWNiaUFnSUNCemVYTXVaSFZ0Y0NBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MzUnlJRDBnWENKY0lqdGNiaUFnSUNBZ0lDQWdjM1J5SUNzOUlGd2lhWE5OYjJKcGJHVWdPaUJjSWlBcklITmxiR1l1YVhOTmIySnBiR1VnS3lCY0lseGNjbHhjYmx3aU8xeHVJQ0FnSUNBZ0lDQnpkSElnS3owZ1hDSnNZVzVuZFdGblpTQTZJRndpSUNzZ2MyVnNaaTVzWVc1bmRXRm5aU0FySUZ3aVhGeHlYRnh1WENJN1hHNGdJQ0FnSUNBZ0lITjBjaUFyUFNCY0ltSnliM2R6WlhKVWVYQmxJRG9nWENJZ0t5QnpaV3htTG1KeWIzZHpaWEpVZVhCbElDc2dYQ0pjWEhKY1hHNWNJanRjYmlBZ0lDQWdJQ0FnYzNSeUlDczlJRndpWW5KdmQzTmxjbFpsY25OcGIyNGdPaUJjSWlBcklITmxiR1l1WW5KdmQzTmxjbFpsY25OcGIyNGdLeUJjSWx4Y2NseGNibHdpTzF4dUlDQWdJQ0FnSUNCemRISWdLejBnWENKallYQmhZbWxzYVhScFpYTWdPaUJjSWlBcklFcFRUMDR1YzNSeWFXNW5hV1o1S0hObGJHWXVZMkZ3WVdKcGJHbDBhV1Z6S1NBcklGd2lYRnh5WEZ4dVhDSTdYRzRnSUNBZ0lDQWdJSE4wY2lBclBTQmNJbTl6SURvZ1hDSWdLeUJ6Wld4bUxtOXpJQ3NnWENKY1hISmNYRzVjSWp0Y2JpQWdJQ0FnSUNBZ2MzUnlJQ3M5SUZ3aWIzTldaWEp6YVc5dUlEb2dYQ0lnS3lCelpXeG1MbTl6Vm1WeWMybHZiaUFySUZ3aVhGeHlYRnh1WENJN1hHNGdJQ0FnSUNBZ0lITjBjaUFyUFNCY0luQnNZWFJtYjNKdElEb2dYQ0lnS3lCelpXeG1MbkJzWVhSbWIzSnRJQ3NnWENKY1hISmNYRzVjSWp0Y2JpQWdJQ0FnSUNBZ2MzUnlJQ3M5SUZ3aVZYTnBibWNnWENJZ0t5QW9ZMk11WjJGdFpTNXlaVzVrWlhKVWVYQmxJRDA5UFNCall5NW5ZVzFsTGxKRlRrUkZVbDlVV1ZCRlgxZEZRa2RNSUQ4Z1hDSlhSVUpIVEZ3aUlEb2dYQ0pEUVU1V1FWTmNJaWtnS3lCY0lpQnlaVzVrWlhKbGNpNWNJaUFySUZ3aVhGeHlYRnh1WENJN1hHNGdJQ0FnSUNBZ0lHTmpMbXh2WnloemRISXBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJQY0dWdUlHRWdkWEpzSUdsdUlHSnliM2R6WlhKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUc5d1pXNVZVa3hjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdkWEpzWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM2x6TG05d1pXNVZVa3dnUFNCbWRXNWpkR2x2YmlBb2RYSnNLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaERRMTlLVTBJZ2ZId2dRME5mVWxWT1ZFbE5SU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhbk5pTG05d1pXNVZVa3dvZFhKc0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTV2Y0dWdUtIVnliQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBJSFJvWlNCdWRXMWlaWElnYjJZZ2JXbHNiR2x6WldOdmJtUnpJR1ZzWVhCelpXUWdjMmx1WTJVZ01TQktZVzUxWVhKNUlERTVOekFnTURBNk1EQTZNREFnVlZSRExseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2JtOTNYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdUblZ0WW1WeWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhONWN5NXViM2NnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoRVlYUmxMbTV2ZHlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRVJoZEdVdWJtOTNLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0t5aHVaWGNnUkdGMFpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdjbVYwZFhKdUlITjVjenRjYm4xY2JseHVkbUZ5SUhONWN5QTlJR05qSUNZbUlHTmpMbk41Y3lBL0lHTmpMbk41Y3lBNklHbHVhWFJUZVhNb0tUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J6ZVhNN1hHNGlYWDA9Il19