(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCClassDecorator.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        require('./CCClass');
        var Preprocess = require('./preprocess-class');
        var js = require('./js');
        var isPlainEmptyObj_DEV = CC_DEV && require('./utils').isPlainEmptyObj_DEV;
        var CACHE_KEY = '__ccclassCache__';
        function fNOP(ctor) {
            return ctor;
        }
        function getSubDict(obj, key) {
            return obj[key] || (obj[key] = {});
        }
        function checkCtorArgument(decorate) {
            return function (target) {
                if (typeof target === 'function') {
                    return decorate(target);
                }
                return function (ctor) {
                    return decorate(ctor, target);
                };
            };
        }
        function _checkNormalArgument(validator_DEV, decorate, decoratorName) {
            return function (target) {
                if (CC_DEV && validator_DEV(target, decoratorName) === false) {
                    return function () {
                        return fNOP;
                    };
                }
                return function (ctor) {
                    return decorate(ctor, target);
                };
            };
        }
        var checkCompArgument = _checkNormalArgument.bind(null, CC_DEV && function (arg, decoratorName) {
            if (!cc.Class._isCCClass(arg)) {
                cc.error('The parameter for %s is missing.', decoratorName);
                return false;
            }
        });
        function _argumentChecker(type) {
            return _checkNormalArgument.bind(null, CC_DEV && function (arg, decoratorName) {
                if (arg instanceof cc.Component || arg === undefined) {
                    cc.error('The parameter for %s is missing.', decoratorName);
                    return false;
                } else if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) !== type) {
                    cc.error('The parameter for %s must be type %s.', decoratorName, type);
                    return false;
                }
            });
        }
        var checkStringArgument = _argumentChecker('string');
        var checkNumberArgument = _argumentChecker('number');
        function getClassCache(ctor, decoratorName) {
            if (CC_DEV && cc.Class._isCCClass(ctor)) {
                cc.error('`@%s` should be used after @ccclass for class "%s"', decoratorName, js.getClassName(ctor));
                return null;
            }
            return getSubDict(ctor, CACHE_KEY);
        }
        function getDefaultFromInitializer(initializer) {
            var value;
            try {
                value = initializer();
            } catch (e) {
                return initializer;
            }
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null) {
                return value;
            } else {
                return initializer;
            }
        }
        function extractActualDefaultValues(ctor) {
            var dummyObj;
            try {
                dummyObj = new ctor();
            } catch (e) {
                if (CC_DEV) {
                    cc.warnID(3652, js.getClassName(ctor), e);
                }
                return {};
            }
            return dummyObj;
        }
        function genProperty(ctor, properties, propName, options, desc, cache) {
            var fullOptions;
            if (options) {
                fullOptions = CC_DEV ? Preprocess.getFullFormOfProperty(options, propName, js.getClassName(ctor)) : Preprocess.getFullFormOfProperty(options);
                fullOptions = fullOptions || options;
            }
            var existsProperty = properties[propName];
            var prop = js.mixin(existsProperty || {}, fullOptions || {});
            var isGetset = desc && (desc.get || desc.set);
            if (isGetset) {
                if (CC_DEV && options && (options.get || options.set)) {
                    var errorProps = getSubDict(cache, 'errorProps');
                    if (!errorProps[propName]) {
                        errorProps[propName] = true;
                        cc.warnID(3655, propName, js.getClassName(ctor), propName, propName);
                    }
                }
                if (desc.get) {
                    prop.get = desc.get;
                }
                if (desc.set) {
                    prop.set = desc.set;
                }
            } else {
                if (CC_DEV && (prop.get || prop.set)) {
                    cc.errorID(3655, propName, js.getClassName(ctor), propName, propName);
                    return;
                }
                var defaultValue = undefined;
                var isDefaultValueSpecified = false;
                if (desc) {
                    if (desc.initializer) {
                        defaultValue = getDefaultFromInitializer(desc.initializer);
                        isDefaultValueSpecified = true;
                    } else {
                    }
                } else {
                    var actualDefaultValues = cache.default || (cache.default = extractActualDefaultValues(ctor));
                    if (actualDefaultValues.hasOwnProperty(propName)) {
                        defaultValue = actualDefaultValues[propName];
                        isDefaultValueSpecified = true;
                    } else {
                    }
                }
                if (CC_DEV) {
                    if (options && options.hasOwnProperty('default')) {
                        cc.warnID(3653, propName, js.getClassName(ctor));
                    } else if (!isDefaultValueSpecified) {
                        cc.warnID(3654, js.getClassName(ctor), propName);
                    }
                    if (cc.RawAsset.wasRawAssetType(prop.url) && prop._short && isDefaultValueSpecified && defaultValue == null) {
                        if (typeof options !== 'function' || cc.RawAsset.isRawAssetType(options)) {
                            cc.warnID(3656, js.getClassName(ctor), propName);
                        }
                    }
                }
                prop.default = defaultValue;
            }
            properties[propName] = prop;
        }
        var ccclass = checkCtorArgument(function (ctor, name) {
            var base = js.getSuper(ctor);
            if (base === Object) {
                base = null;
            }
            var proto = {
                name: name,
                extends: base,
                ctor: ctor,
                __ES6__: true
            };
            var cache = ctor[CACHE_KEY];
            if (cache) {
                var decoratedProto = cache.proto;
                if (decoratedProto) {
                    js.mixin(proto, decoratedProto);
                }
                ctor[CACHE_KEY] = undefined;
            }
            var res = cc.Class(proto);
            if (CC_DEV) {
                var propNames = Object.getOwnPropertyNames(ctor.prototype);
                for (var i = 0; i < propNames.length; ++i) {
                    var prop = propNames[i];
                    if (prop !== 'constructor') {
                        var desc = Object.getOwnPropertyDescriptor(ctor.prototype, prop);
                        var func = desc && desc.value;
                        if (typeof func === 'function') {
                            Preprocess.doValidateMethodWithProps_DEV(func, prop, js.getClassName(ctor), ctor, base);
                        }
                    }
                }
            }
            return res;
        });
        function property(ctorProtoOrOptions, propName, desc) {
            var options = null;
            function normalized(ctorProto, propName, desc) {
                var cache = getClassCache(ctorProto.constructor);
                if (cache) {
                    var ccclassProto = getSubDict(cache, 'proto');
                    var properties = getSubDict(ccclassProto, 'properties');
                    genProperty(ctorProto.constructor, properties, propName, options, desc, cache);
                }
            }
            if (typeof propName === 'undefined') {
                options = ctorProtoOrOptions;
                return normalized;
            } else {
                normalized(ctorProtoOrOptions, propName, desc);
            }
        }
        function createEditorDecorator(argCheckFunc, editorPropName, staticValue) {
            return argCheckFunc(function (ctor, decoratedValue) {
                var cache = getClassCache(ctor, editorPropName);
                if (cache) {
                    var value = staticValue !== undefined ? staticValue : decoratedValue;
                    var proto = getSubDict(cache, 'proto');
                    getSubDict(proto, 'editor')[editorPropName] = value;
                }
            }, editorPropName);
        }
        function createDummyDecorator(argCheckFunc) {
            return argCheckFunc(fNOP);
        }
        var executeInEditMode = (CC_DEV ? createEditorDecorator : createDummyDecorator)(checkCtorArgument, 'executeInEditMode', true);
        var requireComponent = createEditorDecorator(checkCompArgument, 'requireComponent');
        var menu = (CC_DEV ? createEditorDecorator : createDummyDecorator)(checkStringArgument, 'menu');
        var executionOrder = createEditorDecorator(checkNumberArgument, 'executionOrder');
        var disallowMultiple = (CC_DEV ? createEditorDecorator : createDummyDecorator)(checkCtorArgument, 'disallowMultiple');
        var playOnFocus = (CC_DEV ? createEditorDecorator : createDummyDecorator)(checkCtorArgument, 'playOnFocus', true);
        var inspector = (CC_DEV ? createEditorDecorator : createDummyDecorator)(checkStringArgument, 'inspector');
        var icon = (CC_DEV ? createEditorDecorator : createDummyDecorator)(checkStringArgument, 'icon');
        var help = (CC_DEV ? createEditorDecorator : createDummyDecorator)(checkStringArgument, 'help');
        function mixins() {
            var mixins = [];
            for (var i = 0; i < arguments.length; i++) {
                mixins[i] = arguments[i];
            }
            return function (ctor) {
                var cache = getClassCache(ctor, 'mixins');
                if (cache) {
                    getSubDict(cache, 'proto').mixins = mixins;
                }
            };
        }
        cc._decorator = module.exports = {
            ccclass: ccclass,
            property: property,
            executeInEditMode: executeInEditMode,
            requireComponent: requireComponent,
            menu: menu,
            executionOrder: executionOrder,
            disallowMultiple: disallowMultiple,
            playOnFocus: playOnFocus,
            inspector: inspector,
            icon: icon,
            help: help,
            mixins: mixins
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,