(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/skeleton/skinned-mesh-renderer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var SkinnedMeshRenderer = require('./CCSkinnedMeshRenderer');
        var MeshRendererAssembler = require('../../mesh/mesh-renderer');
        var assembler = cc.js.addon({
            fillBuffers: function fillBuffers(comp, renderer) {
                comp.calcJointMatrix();
                MeshRendererAssembler.fillBuffers(comp, renderer);
            }
        }, MeshRendererAssembler);
        module.exports = SkinnedMeshRenderer._assembler = assembler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,