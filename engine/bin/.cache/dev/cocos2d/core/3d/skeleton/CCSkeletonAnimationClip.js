(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/skeleton/CCSkeletonAnimationClip.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _mat = require('../../vmath/mat4');
        var _mat2 = _interopRequireDefault(_mat);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var AnimationClip = require('../../../animation/animation-clip');
        var JointMatrixCurve = require('./CCJointMatrixCurve');
        function maxtrixToArray(matrix) {
            var data = new Float32Array(16);
            data[0] = matrix.m00;
            data[1] = matrix.m01;
            data[2] = matrix.m02;
            data[3] = matrix.m03;
            data[4] = matrix.m04;
            data[5] = matrix.m05;
            data[6] = matrix.m06;
            data[7] = matrix.m07;
            data[8] = matrix.m08;
            data[9] = matrix.m09;
            data[10] = matrix.m10;
            data[11] = matrix.m11;
            data[12] = matrix.m12;
            data[13] = matrix.m13;
            data[14] = matrix.m14;
            data[15] = matrix.m15;
            return data;
        }
        var SkeletonAnimationClip = cc.Class({
            name: 'cc.SkeletonAnimationClip',
            extends: AnimationClip,
            properties: {
                _nativeAsset: {
                    override: true,
                    get: function get() {
                        return this._buffer;
                    },
                    set: function set(bin) {
                        var buffer = ArrayBuffer.isView(bin) ? bin.buffer : bin;
                        this._buffer = new Float32Array(buffer || bin, 0, buffer.byteLength / 4);
                    }
                },
                description: {
                    default: null,
                    type: Object
                },
                curveData: {
                    visible: false,
                    override: true,
                    get: function get() {
                        return this._curveData || {};
                    },
                    set: function set() {
                    }
                }
            },
            _init: function _init() {
                if (this._curveData) {
                    return this._curveData;
                }
                this._curveData = {};
                this._generateCommonCurve();
                if (this._model.precomputeJointMatrix) {
                    this._generateJointMatrixCurve();
                }
                return this._curveData;
            },
            _generateCommonCurve: function _generateCommonCurve() {
                var buffer = this._buffer;
                var description = this.description;
                var offset = 0;
                function getValue() {
                    return buffer[offset++];
                }
                if (!this._curveData.paths) {
                    this._curveData.paths = {};
                }
                var paths = this._curveData.paths;
                for (var path in description) {
                    var des = description[path];
                    var curves = {};
                    paths[path] = { props: curves };
                    for (var property in des) {
                        var frames = [];
                        var frameCount = des[property].frameCount;
                        offset = des[property].offset;
                        for (var i = 0; i < frameCount; i++) {
                            var frame = getValue();
                            var value = void 0;
                            if (property === 'position' || property === 'scale') {
                                value = cc.v3(getValue(), getValue(), getValue());
                            } else if (property === 'quat') {
                                value = cc.quat(getValue(), getValue(), getValue(), getValue());
                            }
                            frames.push({
                                frame: frame,
                                value: value
                            });
                        }
                        curves[property] = frames;
                    }
                }
            },
            _generateJointMatrixCurve: function _generateJointMatrixCurve() {
                var rootNode = this._model.rootNode;
                var curveData = this._curveData;
                var paths = curveData.paths;
                var newCurveData = {
                    ratios: [],
                    jointMatrixMap: {}
                };
                var jointMatrixMap = newCurveData.jointMatrixMap;
                function walk(node, time, pm) {
                    var matrix = void 0;
                    var EPSILON = 0.0001;
                    var path = paths[node.path];
                    if (node !== rootNode && path) {
                        var props = path.props;
                        for (var prop in props) {
                            var frames = props[prop];
                            for (var i = 0; i < frames.length; i++) {
                                var end = frames[i];
                                if (Math.abs(end.frame - time) < EPSILON) {
                                    node[prop].set(end.value);
                                    break;
                                } else if (end.frame > time) {
                                    var start = frames[i - 1];
                                    var ratio = (time - start.frame) / (end.frame - start.frame);
                                    start.value.lerp(end.value, ratio, node[prop]);
                                    break;
                                }
                            }
                        }
                        matrix = _mat2.default.create();
                        _mat2.default.fromRTS(matrix, node.quat, node.position, node.scale);
                        if (pm) {
                            _mat2.default.mul(matrix, pm, matrix);
                        }
                        if (!props._jointMatrix) {
                            props._jointMatrix = [];
                        }
                        var bindWorldMatrix = void 0;
                        if (node.uniqueBindPose) {
                            bindWorldMatrix = _mat2.default.create();
                            _mat2.default.mul(bindWorldMatrix, matrix, node.uniqueBindPose);
                        }
                        if (!jointMatrixMap[node.path]) {
                            jointMatrixMap[node.path] = [];
                        }
                        if (bindWorldMatrix) {
                            jointMatrixMap[node.path].push(maxtrixToArray(bindWorldMatrix));
                        } else {
                            jointMatrixMap[node.path].push(matrix);
                        }
                    }
                    var children = node.children;
                    for (var name in children) {
                        var child = children[name];
                        walk(child, time, matrix);
                    }
                }
                var time = 0;
                var duration = this.duration;
                var step = 1 / this.sample;
                while (time < duration) {
                    newCurveData.ratios.push(time / duration);
                    walk(rootNode, time);
                    time += step;
                }
                this._curveData = newCurveData;
            },
            _createJointMatrixCurve: function _createJointMatrixCurve(state, root) {
                var curve = new JointMatrixCurve();
                curve.ratios = this.curveData.ratios;
                curve.pairs = [];
                var jointMatrixMap = this.curveData.jointMatrixMap;
                for (var path in jointMatrixMap) {
                    var target = cc.find(path, root);
                    if (!target)
                        continue;
                    curve.pairs.push({
                        target: target,
                        values: jointMatrixMap[path]
                    });
                }
                return [curve];
            },
            createCurves: function createCurves(state, root) {
                if (!this._model) {
                    cc.warn('Skeleton Animation Clip [' + this.name + '] Can not find model');
                    return [];
                }
                this._init();
                if (this._model.precomputeJointMatrix) {
                    return this._createJointMatrixCurve(state, root);
                } else {
                    return AnimationClip.prototype.createCurves.call(this, state, root);
                }
            }
        });
        cc.SkeletonAnimationClip = module.exports = SkeletonAnimationClip;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,