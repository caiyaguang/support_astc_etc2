(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/polyfill-3d.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('../vmath');
        var Node = require('../CCNode');
        var EventType = Node.EventType;
        var DirtyFlag = Node._LocalDirtyFlag;
        var RenderFlow = require('../renderer/render-flow');
        var ONE_DEGREE = Math.PI / 180;
        var POSITION_ON = 1 << 0;
        var SCALE_ON = 1 << 1;
        var ERR_INVALID_NUMBER = CC_EDITOR && 'The %s is invalid';
        function _updateLocalMatrix3d() {
            if (this._localMatDirty) {
                var t = this._matrix;
                _vmath.mat4.fromRTS(t, this._quat, this._position, this._scale);
                if (this._skewX || this._skewY) {
                    var a = t.m00, b = t.m01, c = t.m04, d = t.m05;
                    var skx = Math.tan(this._skewX * ONE_DEGREE);
                    var sky = Math.tan(this._skewY * ONE_DEGREE);
                    if (skx === Infinity)
                        skx = 99999999;
                    if (sky === Infinity)
                        sky = 99999999;
                    t.m00 = a + c * sky;
                    t.m01 = b + d * sky;
                    t.m04 = c + a * skx;
                    t.m05 = d + b * skx;
                }
                this._localMatDirty = 0;
                this._worldMatDirty = true;
            }
        }
        function _calculWorldMatrix3d() {
            if (this._localMatDirty) {
                this._updateLocalMatrix();
            }
            if (this._parent) {
                var parentMat = this._parent._worldMatrix;
                _vmath.mat4.mul(this._worldMatrix, parentMat, this._matrix);
            } else {
                _vmath.mat4.copy(this._worldMatrix, this._matrix);
            }
            this._worldMatDirty = false;
        }
        function setPosition(newPosOrX, y, z) {
            var x = void 0;
            if (y === undefined) {
                x = newPosOrX.x;
                y = newPosOrX.y;
                z = newPosOrX.z || 0;
            } else {
                x = newPosOrX;
                z = z || 0;
            }
            var pos = this._position;
            if (pos.x === x && pos.y === y && pos.z === z) {
                return;
            }
            if (CC_EDITOR) {
                var oldPosition = new cc.Vec3(pos);
            }
            pos.x = x;
            pos.y = y;
            pos.z = z;
            this.setLocalDirty(DirtyFlag.POSITION);
            this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
            if (this._eventMask & POSITION_ON) {
                if (CC_EDITOR) {
                    this.emit(EventType.POSITION_CHANGED, oldPosition);
                } else {
                    this.emit(EventType.POSITION_CHANGED);
                }
            }
        }
        function setScale(x, y, z) {
            if (x && typeof x !== 'number') {
                y = x.y;
                z = x.z || 1;
                x = x.x;
            } else if (x !== undefined && y === undefined) {
                y = x;
                z = x;
            } else if (z === undefined) {
                z = 1;
            }
            if (this._scale.x !== x || this._scale.y !== y || this._scale.z !== z) {
                this._scale.x = x;
                this._scale.y = y;
                this._scale.z = z;
                this.setLocalDirty(DirtyFlag.SCALE);
                this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                if (this._eventMask & SCALE_ON) {
                    this.emit(EventType.SCALE_CHANGED);
                }
            }
        }
        function _update3DFunction() {
            if (this._is3DNode) {
                this._updateLocalMatrix = _updateLocalMatrix3d;
                this._calculWorldMatrix = _calculWorldMatrix3d;
                this._mulMat = _vmath.mat4.mul;
            } else {
                this._updateLocalMatrix = _updateLocalMatrix2d;
                this._calculWorldMatrix = _calculWorldMatrix2d;
                this._mulMat = _mulMat2d;
            }
            if (this._renderComponent && this._renderComponent._on3DNodeChanged) {
                this._renderComponent._on3DNodeChanged();
            }
            this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
            this._localMatDirty = DirtyFlag.ALL;
        }
        function _upgrade_1x_to_2x() {
            if (this._is3DNode) {
                this._update3DFunction();
            }
            _upgrade_1x_to_2x_2d.call(this);
        }
        var proto = cc.Node.prototype;
        var _updateLocalMatrix2d = proto._updateLocalMatrix;
        var _calculWorldMatrix2d = proto._calculWorldMatrix;
        var _upgrade_1x_to_2x_2d = proto._upgrade_1x_to_2x;
        var _mulMat2d = proto._mulMat;
        proto.setPosition = setPosition;
        proto.setScale = setScale;
        proto._upgrade_1x_to_2x = _upgrade_1x_to_2x;
        proto._update3DFunction = _update3DFunction;
        cc.js.getset(proto, 'position', proto.getPosition, setPosition, false, true);
        cc.js.getset(proto, 'is3DNode', function () {
            return this._is3DNode;
        }, function (v) {
            if (this._is3DNode === v)
                return;
            this._is3DNode = v;
            this._update3DFunction();
        });
        cc.js.getset(proto, 'scaleZ', function () {
            return this._scale.z;
        }, function (v) {
            if (this._scale.z !== v) {
                this._scale.z = v;
                this.setLocalDirty(DirtyFlag.SCALE);
                this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                if (this._eventMask & SCALE_ON) {
                    this.emit(EventType.SCALE_CHANGED);
                }
            }
        });
        cc.js.getset(proto, 'z', function () {
            return this._position.z;
        }, function (value) {
            var localPosition = this._position;
            if (value !== localPosition.z) {
                if (!CC_EDITOR || isFinite(value)) {
                    localPosition.z = value;
                    this.setLocalDirty(DirtyFlag.POSITION);
                    this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
                    if (this._eventMask & POSITION_ON) {
                        this.emit(EventType.POSITION_CHANGED);
                    }
                } else {
                    cc.error(ERR_INVALID_NUMBER, 'new z');
                }
            }
        });
        cc.js.getset(proto, 'eulerAngles', function () {
            if (CC_EDITOR) {
                return this._eulerAngles;
            } else {
                return this._quat.toEuler(this._eulerAngles);
            }
        }, function (v) {
            if (CC_EDITOR) {
                this._eulerAngles.set(v);
            }
            this._quat.fromEuler(v);
            this.setLocalDirty(DirtyFlag.ROTATION);
            this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
        });
        cc.js.getset(proto, 'quat', function () {
            return this._quat;
        }, proto.setRotation);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,