(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/affine-transform.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var AffineTransform = function AffineTransform(a, b, c, d, tx, ty) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.tx = tx;
            this.ty = ty;
        };
        AffineTransform.create = function (a, b, c, d, tx, ty) {
            return {
                a: a,
                b: b,
                c: c,
                d: d,
                tx: tx,
                ty: ty
            };
        };
        AffineTransform.identity = function () {
            return {
                a: 1,
                b: 0,
                c: 0,
                d: 1,
                tx: 0,
                ty: 0
            };
        };
        AffineTransform.clone = function (t) {
            return {
                a: t.a,
                b: t.b,
                c: t.c,
                d: t.d,
                tx: t.tx,
                ty: t.ty
            };
        };
        AffineTransform.concat = function (out, t1, t2) {
            var a = t1.a, b = t1.b, c = t1.c, d = t1.d, tx = t1.tx, ty = t1.ty;
            out.a = a * t2.a + b * t2.c;
            out.b = a * t2.b + b * t2.d;
            out.c = c * t2.a + d * t2.c;
            out.d = c * t2.b + d * t2.d;
            out.tx = tx * t2.a + ty * t2.c + t2.tx;
            out.ty = tx * t2.b + ty * t2.d + t2.ty;
            return out;
        };
        AffineTransform.invert = function (out, t) {
            var a = t.a, b = t.b, c = t.c, d = t.d;
            var determinant = 1 / (a * d - b * c);
            var tx = t.tx, ty = t.ty;
            out.a = determinant * d;
            out.b = -determinant * b;
            out.c = -determinant * c;
            out.d = determinant * a;
            out.tx = determinant * (c * ty - d * tx);
            out.ty = determinant * (b * tx - a * ty);
            return out;
        };
        AffineTransform.fromMat4 = function (out, mat) {
            out.a = mat.m00;
            out.b = mat.m01;
            out.c = mat.m04;
            out.d = mat.m05;
            out.tx = mat.m12;
            out.ty = mat.m13;
            return out;
        };
        AffineTransform.transformVec2 = function (out, point, transOrY, t) {
            var x, y;
            if (t === undefined) {
                t = transOrY;
                x = point.x;
                y = point.y;
            } else {
                x = point;
                y = transOrY;
            }
            out.x = t.a * x + t.c * y + t.tx;
            out.y = t.b * x + t.d * y + t.ty;
            return out;
        };
        AffineTransform.transformSize = function (out, size, t) {
            out.width = t.a * size.width + t.c * size.height;
            out.height = t.b * size.width + t.d * size.height;
            return out;
        };
        AffineTransform.transformRect = function (out, rect, t) {
            var ol = rect.x;
            var ob = rect.y;
            var or = ol + rect.width;
            var ot = ob + rect.height;
            var lbx = t.a * ol + t.c * ob + t.tx;
            var lby = t.b * ol + t.d * ob + t.ty;
            var rbx = t.a * or + t.c * ob + t.tx;
            var rby = t.b * or + t.d * ob + t.ty;
            var ltx = t.a * ol + t.c * ot + t.tx;
            var lty = t.b * ol + t.d * ot + t.ty;
            var rtx = t.a * or + t.c * ot + t.tx;
            var rty = t.b * or + t.d * ot + t.ty;
            var minX = Math.min(lbx, rbx, ltx, rtx);
            var maxX = Math.max(lbx, rbx, ltx, rtx);
            var minY = Math.min(lby, rby, lty, rty);
            var maxY = Math.max(lby, rby, lty, rty);
            out.x = minX;
            out.y = minY;
            out.width = maxX - minX;
            out.height = maxY - minY;
            return out;
        };
        AffineTransform.transformObb = function (out_bl, out_tl, out_tr, out_br, rect, anAffineTransform) {
            var x = rect.x;
            var y = rect.y;
            var width = rect.width;
            var height = rect.height;
            var tx = anAffineTransform.a * x + anAffineTransform.c * y + anAffineTransform.tx;
            var ty = anAffineTransform.b * x + anAffineTransform.d * y + anAffineTransform.ty;
            var xa = anAffineTransform.a * width;
            var xb = anAffineTransform.b * width;
            var yc = anAffineTransform.c * height;
            var yd = anAffineTransform.d * height;
            out_tl.x = tx;
            out_tl.y = ty;
            out_tr.x = xa + tx;
            out_tr.y = xb + ty;
            out_bl.x = yc + tx;
            out_bl.y = yd + ty;
            out_br.x = xa + yc + tx;
            out_br.y = xb + yd + ty;
        };
        cc.AffineTransform = module.exports = AffineTransform;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFmZmluZS10cmFuc2Zvcm0uanMiLCIvVXNlcnMvenpmMjAxOS9EZXNrdG9wL2RldmVsb3BtZW50L3N1cHBvcnRfYXN0Yy9lbmdpbmUvY29jb3MyZC9jb3JlL3V0aWxzL2FmZmluZS10cmFuc2Zvcm0uanMiXSwibmFtZXMiOlsiQWZmaW5lVHJhbnNmb3JtIiwiYSIsImIiLCJjIiwiZCIsInR4IiwidHkiLCJjcmVhdGUiLCJpZGVudGl0eSIsImNsb25lIiwidCIsImNvbmNhdCIsIm91dCIsInQxIiwidDIiLCJpbnZlcnQiLCJkZXRlcm1pbmFudCIsImZyb21NYXQ0IiwibWF0IiwibTAwIiwibTAxIiwibTA0IiwibTA1IiwibTEyIiwibTEzIiwidHJhbnNmb3JtVmVjMiIsInBvaW50IiwidHJhbnNPclkiLCJ4IiwieSIsInVuZGVmaW5lZCIsInRyYW5zZm9ybVNpemUiLCJzaXplIiwid2lkdGgiLCJoZWlnaHQiLCJ0cmFuc2Zvcm1SZWN0IiwicmVjdCIsIm9sIiwib2IiLCJvciIsIm90IiwibGJ4IiwibGJ5IiwicmJ4IiwicmJ5IiwibHR4IiwibHR5IiwicnR4IiwicnR5IiwibWluWCIsIk1hdGgiLCJtaW4iLCJtYXhYIiwibWF4IiwibWluWSIsIm1heFkiLCJ0cmFuc2Zvcm1PYmIiLCJvdXRfYmwiLCJvdXRfdGwiLCJvdXRfdHIiLCJvdXRfYnIiLCJhbkFmZmluZVRyYW5zZm9ybSIsInhhIiwieGIiLCJ5YyIsInlkIiwiY2MiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUEwQ0EsSUFBSUEsZUFBQUEsR0FBa0IsU0FBbEJBLGVBQWtCLENBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQkMsQ0FBaEIsRUFBbUJDLENBQW5CLEVBQXNCQyxFQUF0QixFQUEwQkMsRUFBMUIsRUFBOEI7QUFBQSxZQUNoRCxLQUFL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LEdBQVdRLEVBQUFBLEdBQUszRCxFQUFoQm1ELENBbEI4RjtBQUFBLFlBbUI5RkcsTUFBQUEsQ0FBT2hDLENBQVBnQyxHQUFXRSxFQUFBQSxHQUFLRSxFQUFMRixHQUFVekQsRUFBckJ1RCxDQW5COEY7QUFBQSxZQW9COUZBLE1BQUFBLENBQU8vQixDQUFQK0IsR0FBV0csRUFBQUEsR0FBS0UsRUFBTEYsR0FBVXpELEVBQXJCc0QsQ0FwQjhGO0FBQUEsU0FBbEc1RDtRQXVCQWtFLEVBQUFBLENBQUdsRSxlQUFIa0UsR0FBcUJDLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCbkUsZUFBdENrRSIsImZpbGUiOiJhZmZpbmUtdHJhbnNmb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCBSaWNhcmRvIFF1ZXNhZGFcbiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxMiBjb2NvczJkLXgub3JnXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAqICEjZW5cbiAqIEFmZmluZVRyYW5zZm9ybSBjbGFzcyByZXByZXNlbnQgYW4gYWZmaW5lIHRyYW5zZm9ybSBtYXRyaXguIEl0J3MgY29tcG9zZWQgYmFzaWNhbGx5IGJ5IHRyYW5zbGF0aW9uLCByb3RhdGlvbiwgc2NhbGUgdHJhbnNmb3JtYXRpb25zLjxici8+XG4gKiAhI3poXG4gKiBBZmZpbmVUcmFuc2Zvcm0g57G75Luj6KGo5LiA5Liq5Lu/5bCE5Y+Y5o2i55+p6Zi144CC5a6D5Z+65pys5LiK5piv55Sx5bmz56e75peL6L2s77yM57yp5pS+6L2s5Y+Y5omA57uE5oiQ44CCPGJyLz5cbiAqIEBjbGFzcyBBZmZpbmVUcmFuc2Zvcm1cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IGFcbiAqIEBwYXJhbSB7TnVtYmVyfSBiXG4gKiBAcGFyYW0ge051bWJlcn0gY1xuICogQHBhcmFtIHtOdW1iZXJ9IGRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eFxuICogQHBhcmFtIHtOdW1iZXJ9IHR5XG4gKiBAc2VlIEFmZmluZVRyYW5zZm9ybS5jcmVhdGVcbiAqL1xudmFyIEFmZmluZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB0eCwgdHkpIHtcbiAgICB0aGlzLmEgPSBhO1xuICAgIHRoaXMuYiA9IGI7XG4gICAgdGhpcy5jID0gYztcbiAgICB0aGlzLmQgPSBkO1xuICAgIHRoaXMudHggPSB0eDtcbiAgICB0aGlzLnR5ID0gdHk7XG59O1xuXG4vKipcbiAqICEjZW4gQ3JlYXRlIGEgQWZmaW5lVHJhbnNmb3JtIG9iamVjdCB3aXRoIGFsbCBjb250ZW50cyBpbiB0aGUgbWF0cml4LlxuICogISN6aCDnlKjlnKjnn6npmLXkuK3nmoTmiYDmnInlhoXlrrnliJvlu7rkuIDkuKogQWZmaW5lVHJhbnNmb3JtIOWvueixoeOAglxuICogQG1ldGhvZCBjcmVhdGVcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7TnVtYmVyfSBhXG4gKiBAcGFyYW0ge051bWJlcn0gYlxuICogQHBhcmFtIHtOdW1iZXJ9IGNcbiAqIEBwYXJhbSB7TnVtYmVyfSBkXG4gKiBAcGFyYW0ge051bWJlcn0gdHhcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eVxuICogQHJldHVybiB7QWZmaW5lVHJhbnNmb3JtfVxuICovXG5BZmZpbmVUcmFuc2Zvcm0uY3JlYXRlID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQsIHR4LCB0eSkge1xuICAgIHJldHVybiB7YTogYSwgYjogYiwgYzogYywgZDogZCwgdHg6IHR4LCB0eTogdHl9O1xufTtcblxuLyoqXG4gKiAhI2VuXG4gKiBDcmVhdGUgYSBpZGVudGl0eSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXg6IDxici8+XG4gKiBbIDEsIDAsIDAsIDxici8+XG4gKiAgIDAsIDEsIDAgXVxuICogISN6aFxuICog5Y2V5L2N55+p6Zi177yaPGJyLz5cbiAqIFsgMSwgMCwgMCwgPGJyLz5cbiAqICAgMCwgMSwgMCBdXG4gKlxuICogQG1ldGhvZCBpZGVudGl0eVxuICogQHN0YXRpY1xuICogQHJldHVybiB7QWZmaW5lVHJhbnNmb3JtfVxuICovXG5BZmZpbmVUcmFuc2Zvcm0uaWRlbnRpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHthOiAxLjAsIGI6IDAuMCwgYzogMC4wLCBkOiAxLjAsIHR4OiAwLjAsIHR5OiAwLjB9O1xufTtcblxuLyoqXG4gKiAhI2VuIENsb25lIGEgQWZmaW5lVHJhbnNmb3JtIG9iamVjdCBmcm9tIHRoZSBzcGVjaWZpZWQgdHJhbnNmb3JtLlxuICogISN6aCDlhYvpmobmjIflrprnmoQgQWZmaW5lVHJhbnNmb3JtIOWvueixoeOAglxuICogQG1ldGhvZCBjbG9uZVxuICogQHN0YXRpY1xuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm19IHRcbiAqIEByZXR1cm4ge0FmZmluZVRyYW5zZm9ybX1cbiAqL1xuQWZmaW5lVHJhbnNmb3JtLmNsb25lID0gZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4ge2E6IHQuYSwgYjogdC5iLCBjOiB0LmMsIGQ6IHQuZCwgdHg6IHQudHgsIHR5OiB0LnR5fTtcbn07XG5cbi8qKlxuICogISNlblxuICogQ29uY2F0ZW5hdGUgYSB0cmFuc2Zvcm0gbWF0cml4IHRvIGFub3RoZXJcbiAqIFRoZSByZXN1bHRzIGFyZSByZWZsZWN0ZWQgaW4gdGhlIG91dCBhZmZpbmUgdHJhbnNmb3JtXG4gKiBvdXQgPSB0MSAqIHQyXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG1lbW9yeSBmcmVlLCB5b3Ugc2hvdWxkIGNyZWF0ZSB0aGUgb3V0cHV0IGFmZmluZSB0cmFuc2Zvcm0gYnkgeW91cnNlbGYgYW5kIG1hbmFnZSBpdHMgbWVtb3J5LlxuICogISN6aFxuICog5ou85o6l5Lik5Liq55+p6Zi177yM5bCG57uT5p6c5L+d5a2Y5YiwIG91dCDnn6npmLXjgILov5nkuKrlh73mlbDkuI3liJvlu7rku7vkvZXlhoXlrZjvvIzkvaDpnIDopoHlhYjliJvlu7ogQWZmaW5lVHJhbnNmb3JtIOWvueixoeeUqOadpeWtmOWCqOe7k+aenO+8jOW5tuS9nOS4uuesrOS4gOS4quWPguaVsOS8oOWFpeWHveaVsOOAglxuICogb3V0ID0gdDEgKiB0MlxuICogQG1ldGhvZCBjb25jYXRcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSBvdXQgT3V0IG9iamVjdCB0byBzdG9yZSB0aGUgY29uY2F0IHJlc3VsdFxuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm19IHQxIFRoZSBmaXJzdCB0cmFuc2Zvcm0gb2JqZWN0LlxuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm19IHQyIFRoZSB0cmFuc2Zvcm0gb2JqZWN0IHRvIGNvbmNhdGVuYXRlLlxuICogQHJldHVybiB7QWZmaW5lVHJhbnNmb3JtfSBPdXQgb2JqZWN0IHdpdGggdGhlIHJlc3VsdCBvZiBjb25jYXRlbmF0aW9uLlxuICovXG5BZmZpbmVUcmFuc2Zvcm0uY29uY2F0ID0gZnVuY3Rpb24gKG91dCwgdDEsIHQyKSB7XG4gICAgdmFyIGEgPSB0MS5hLCBiID0gdDEuYiwgYyA9IHQxLmMsIGQgPSB0MS5kLCB0eCA9IHQxLnR4LCB0eSA9IHQxLnR5O1xuICAgIG91dC5hID0gYSAqIHQyLmEgKyBiICogdDIuYztcbiAgICBvdXQuYiA9IGEgKiB0Mi5iICsgYiAqIHQyLmQ7XG4gICAgb3V0LmMgPSBjICogdDIuYSArIGQgKiB0Mi5jO1xuICAgIG91dC5kID0gYyAqIHQyLmIgKyBkICogdDIuZDtcbiAgICBvdXQudHggPSB0eCAqIHQyLmEgKyB0eSAqIHQyLmMgKyB0Mi50eDtcbiAgICBvdXQudHkgPSB0eCAqIHQyLmIgKyB0eSAqIHQyLmQgKyB0Mi50eTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiAhI2VuIEdldCB0aGUgaW52ZXJ0IHRyYW5zZm9ybSBvZiBhbiBBZmZpbmVUcmFuc2Zvcm0gb2JqZWN0LlxuICogVGhpcyBmdW5jdGlvbiBpcyBtZW1vcnkgZnJlZSwgeW91IHNob3VsZCBjcmVhdGUgdGhlIG91dHB1dCBhZmZpbmUgdHJhbnNmb3JtIGJ5IHlvdXJzZWxmIGFuZCBtYW5hZ2UgaXRzIG1lbW9yeS5cbiAqICEjemgg5rGC6YCG55+p6Zi144CC6L+Z5Liq5Ye95pWw5LiN5Yib5bu65Lu75L2V5YaF5a2Y77yM5L2g6ZyA6KaB5YWI5Yib5bu6IEFmZmluZVRyYW5zZm9ybSDlr7nosaHnlKjmnaXlrZjlgqjnu5PmnpzvvIzlubbkvZzkuLrnrKzkuIDkuKrlj4LmlbDkvKDlhaXlh73mlbDjgIJcbiAqIEBtZXRob2QgaW52ZXJ0XG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gb3V0XG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gdFxuICogQHJldHVybiB7QWZmaW5lVHJhbnNmb3JtfSBPdXQgb2JqZWN0IHdpdGggaW52ZXJ0ZWQgcmVzdWx0LlxuICovXG5BZmZpbmVUcmFuc2Zvcm0uaW52ZXJ0ID0gZnVuY3Rpb24gKG91dCwgdCkge1xuICAgIHZhciBhID0gdC5hLCBiID0gdC5iLCBjID0gdC5jLCBkID0gdC5kO1xuICAgIHZhciBkZXRlcm1pbmFudCA9IDEgLyAoYSAqIGQgLSBiICogYyk7XG4gICAgdmFyIHR4ID0gdC50eCwgdHkgPSB0LnR5O1xuICAgIG91dC5hID0gZGV0ZXJtaW5hbnQgKiBkO1xuICAgIG91dC5iID0gLWRldGVybWluYW50ICogYjtcbiAgICBvdXQuYyA9IC1kZXRlcm1pbmFudCAqIGM7XG4gICAgb3V0LmQgPSBkZXRlcm1pbmFudCAqIGE7XG4gICAgb3V0LnR4ID0gZGV0ZXJtaW5hbnQgKiAoYyAqIHR5IC0gZCAqIHR4KTtcbiAgICBvdXQudHkgPSBkZXRlcm1pbmFudCAqIChiICogdHggLSBhICogdHkpO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqICEjZW4gR2V0IGFuIEFmZmluZVRyYW5zZm9ybSBvYmplY3QgZnJvbSBhIGdpdmVuIG1hdHJpeCA0eDQuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG1lbW9yeSBmcmVlLCB5b3Ugc2hvdWxkIGNyZWF0ZSB0aGUgb3V0cHV0IGFmZmluZSB0cmFuc2Zvcm0gYnkgeW91cnNlbGYgYW5kIG1hbmFnZSBpdHMgbWVtb3J5LlxuICogISN6aCDku47kuIDkuKogNHg0IE1hdHJpeCDojrflj5YgQWZmaW5lVHJhbnNmb3JtIOWvueixoeOAgui/meS4quWHveaVsOS4jeWIm+W7uuS7u+S9leWGheWtmO+8jOS9oOmcgOimgeWFiOWIm+W7uiBBZmZpbmVUcmFuc2Zvcm0g5a+56LGh55So5p2l5a2Y5YKo57uT5p6c77yM5bm25L2c5Li656ys5LiA5Liq5Y+C5pWw5Lyg5YWl5Ye95pWw44CCXG4gKiBAbWV0aG9kIGludmVydFxuICogQHN0YXRpY1xuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm19IG91dFxuICogQHBhcmFtIHtNYXQ0fSBtYXRcbiAqIEByZXR1cm4ge0FmZmluZVRyYW5zZm9ybX0gT3V0IG9iamVjdCB3aXRoIGludmVydGVkIHJlc3VsdC5cbiAqL1xuQWZmaW5lVHJhbnNmb3JtLmZyb21NYXQ0ID0gZnVuY3Rpb24gKG91dCwgbWF0KSB7XG4gICAgb3V0LmEgPSBtYXQubTAwO1xuICAgIG91dC5iID0gbWF0Lm0wMTtcbiAgICBvdXQuYyA9IG1hdC5tMDQ7XG4gICAgb3V0LmQgPSBtYXQubTA1O1xuICAgIG91dC50eCA9IG1hdC5tMTI7XG4gICAgb3V0LnR5ID0gbWF0Lm0xMztcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiAhI2VuIEFwcGx5IHRoZSBhZmZpbmUgdHJhbnNmb3JtYXRpb24gb24gYSBwb2ludC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgbWVtb3J5IGZyZWUsIHlvdSBzaG91bGQgY3JlYXRlIHRoZSBvdXRwdXQgVmVjMiBieSB5b3Vyc2VsZiBhbmQgbWFuYWdlIGl0cyBtZW1vcnkuXG4gKiAhI3poIOWvueS4gOS4queCueW6lOeUqOefqemYteWPmOaNouOAgui/meS4quWHveaVsOS4jeWIm+W7uuS7u+S9leWGheWtmO+8jOS9oOmcgOimgeWFiOWIm+W7uuS4gOS4qiBWZWMyIOWvueixoeeUqOadpeWtmOWCqOe7k+aenO+8jOW5tuS9nOS4uuesrOS4gOS4quWPguaVsOS8oOWFpeWHveaVsOOAglxuICogQG1ldGhvZCB0cmFuc2Zvcm1WZWMyXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge1ZlYzJ9IG91dCBUaGUgb3V0cHV0IHBvaW50IHRvIHN0b3JlIHRoZSByZXN1bHRcbiAqIEBwYXJhbSB7VmVjMnxOdW1iZXJ9IHBvaW50IFBvaW50IHRvIGFwcGx5IHRyYW5zZm9ybSBvciB4LlxuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm18TnVtYmVyfSB0cmFuc09yWSB0cmFuc2Zvcm0gbWF0cml4IG9yIHkuXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gW3RdIHRyYW5zZm9ybSBtYXRyaXguXG4gKiBAcmV0dXJuIHtWZWMyfVxuICovXG5BZmZpbmVUcmFuc2Zvcm0udHJhbnNmb3JtVmVjMiA9IGZ1bmN0aW9uIChvdXQsIHBvaW50LCB0cmFuc09yWSwgdCkge1xuICAgIHZhciB4LCB5O1xuICAgIGlmICh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdCA9IHRyYW5zT3JZO1xuICAgICAgICB4ID0gcG9pbnQueDtcbiAgICAgICAgeSA9IHBvaW50Lnk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgeCA9IHBvaW50O1xuICAgICAgICB5ID0gdHJhbnNPclk7XG4gICAgfVxuICAgIG91dC54ID0gdC5hICogeCArIHQuYyAqIHkgKyB0LnR4O1xuICAgIG91dC55ID0gdC5iICogeCArIHQuZCAqIHkgKyB0LnR5O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqICEjZW4gQXBwbHkgdGhlIGFmZmluZSB0cmFuc2Zvcm1hdGlvbiBvbiBhIHNpemUuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG1lbW9yeSBmcmVlLCB5b3Ugc2hvdWxkIGNyZWF0ZSB0aGUgb3V0cHV0IFNpemUgYnkgeW91cnNlbGYgYW5kIG1hbmFnZSBpdHMgbWVtb3J5LlxuICogISN6aCDlupTnlKjku7/lsITlj5jmjaLnn6npmLXliLAgU2l6ZSDkuIrjgILov5nkuKrlh73mlbDkuI3liJvlu7rku7vkvZXlhoXlrZjvvIzkvaDpnIDopoHlhYjliJvlu7rkuIDkuKogU2l6ZSDlr7nosaHnlKjmnaXlrZjlgqjnu5PmnpzvvIzlubbkvZzkuLrnrKzkuIDkuKrlj4LmlbDkvKDlhaXlh73mlbDjgIJcbiAqIEBtZXRob2QgdHJhbnNmb3JtU2l6ZVxuICogQHN0YXRpY1xuICogQHBhcmFtIHtTaXplfSBvdXQgVGhlIG91dHB1dCBwb2ludCB0byBzdG9yZSB0aGUgcmVzdWx0XG4gKiBAcGFyYW0ge1NpemV9IHNpemVcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSB0XG4gKiBAcmV0dXJuIHtTaXplfVxuICovXG5BZmZpbmVUcmFuc2Zvcm0udHJhbnNmb3JtU2l6ZSA9IGZ1bmN0aW9uIChvdXQsIHNpemUsIHQpIHtcbiAgICBvdXQud2lkdGggPSB0LmEgKiBzaXplLndpZHRoICsgdC5jICogc2l6ZS5oZWlnaHQ7XG4gICAgb3V0LmhlaWdodCA9IHQuYiAqIHNpemUud2lkdGggKyB0LmQgKiBzaXplLmhlaWdodDtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiAhI2VuIEFwcGx5IHRoZSBhZmZpbmUgdHJhbnNmb3JtYXRpb24gb24gYSByZWN0LlxuICogVGhpcyBmdW5jdGlvbiBpcyBtZW1vcnkgZnJlZSwgeW91IHNob3VsZCBjcmVhdGUgdGhlIG91dHB1dCBSZWN0IGJ5IHlvdXJzZWxmIGFuZCBtYW5hZ2UgaXRzIG1lbW9yeS5cbiAqICEjemgg5bqU55So5Lu/5bCE5Y+Y5o2i55+p6Zi15YiwIFJlY3Qg5LiK44CC6L+Z5Liq5Ye95pWw5LiN5Yib5bu65Lu75L2V5YaF5a2Y77yM5L2g6ZyA6KaB5YWI5Yib5bu65LiA5LiqIFJlY3Qg5a+56LGh55So5p2l5a2Y5YKo57uT5p6c77yM5bm25L2c5Li656ys5LiA5Liq5Y+C5pWw5Lyg5YWl5Ye95pWw44CCXG4gKiBAbWV0aG9kIHRyYW5zZm9ybVJlY3RcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7UmVjdH0gb3V0XG4gKiBAcGFyYW0ge1JlY3R9IHJlY3RcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSBhbkFmZmluZVRyYW5zZm9ybVxuICogQHJldHVybiB7UmVjdH1cbiAqL1xuQWZmaW5lVHJhbnNmb3JtLnRyYW5zZm9ybVJlY3QgPSBmdW5jdGlvbihvdXQsIHJlY3QsIHQpe1xuICAgIHZhciBvbCA9IHJlY3QueDtcbiAgICB2YXIgb2IgPSByZWN0Lnk7XG4gICAgdmFyIG9yID0gb2wgKyByZWN0LndpZHRoO1xuICAgIHZhciBvdCA9IG9iICsgcmVjdC5oZWlnaHQ7XG4gICAgdmFyIGxieCA9IHQuYSAqIG9sICsgdC5jICogb2IgKyB0LnR4O1xuICAgIHZhciBsYnkgPSB0LmIgKiBvbCArIHQuZCAqIG9iICsgdC50eTtcbiAgICB2YXIgcmJ4ID0gdC5hICogb3IgKyB0LmMgKiBvYiArIHQudHg7XG4gICAgdmFyIHJieSA9IHQuYiAqIG9yICsgdC5kICogb2IgKyB0LnR5O1xuICAgIHZhciBsdHggPSB0LmEgKiBvbCArIHQuYyAqIG90ICsgdC50eDtcbiAgICB2YXIgbHR5ID0gdC5iICogb2wgKyB0LmQgKiBvdCArIHQudHk7XG4gICAgdmFyIHJ0eCA9IHQuYSAqIG9yICsgdC5jICogb3QgKyB0LnR4O1xuICAgIHZhciBydHkgPSB0LmIgKiBvciArIHQuZCAqIG90ICsgdC50eTtcblxuICAgIHZhciBtaW5YID0gTWF0aC5taW4obGJ4LCByYngsIGx0eCwgcnR4KTtcbiAgICB2YXIgbWF4WCA9IE1hdGgubWF4KGxieCwgcmJ4LCBsdHgsIHJ0eCk7XG4gICAgdmFyIG1pblkgPSBNYXRoLm1pbihsYnksIHJieSwgbHR5LCBydHkpO1xuICAgIHZhciBtYXhZID0gTWF0aC5tYXgobGJ5LCByYnksIGx0eSwgcnR5KTtcblxuICAgIG91dC54ID0gbWluWDtcbiAgICBvdXQueSA9IG1pblk7XG4gICAgb3V0LndpZHRoID0gbWF4WCAtIG1pblg7XG4gICAgb3V0LmhlaWdodCA9IG1heFkgLSBtaW5ZO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqICEjZW4gQXBwbHkgdGhlIGFmZmluZSB0cmFuc2Zvcm1hdGlvbiBvbiBhIHJlY3QsIGFuZCB0cnVucyB0byBhbiBPcmllbnRlZCBCb3VuZGluZyBCb3guXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG1lbW9yeSBmcmVlLCB5b3Ugc2hvdWxkIGNyZWF0ZSB0aGUgb3V0cHV0IHZlY3RvcnMgYnkgeW91cnNlbGYgYW5kIG1hbmFnZSB0aGVpciBtZW1vcnkuXG4gKiAhI3poIOW6lOeUqOS7v+WwhOWPmOaNouefqemYteWIsCBSZWN0IOS4iiwg5bm26L2s5o2i5Li65pyJ5ZCR5YyF5Zu055uS44CC6L+Z5Liq5Ye95pWw5LiN5Yib5bu65Lu75L2V5YaF5a2Y77yM5L2g6ZyA6KaB5YWI5Yib5bu65YyF5Zu055uS55qE5Zub5LiqIFZlY3RvciDlr7nosaHnlKjmnaXlrZjlgqjnu5PmnpzvvIzlubbkvZzkuLrliY3lm5vkuKrlj4LmlbDkvKDlhaXlh73mlbDjgIJcbiAqIEBtZXRob2QgdHJhbnNmb3JtT2JiXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge1ZlYzJ9IG91dF9ibFxuICogQHBhcmFtIHtWZWMyfSBvdXRfdGxcbiAqIEBwYXJhbSB7VmVjMn0gb3V0X3RyXG4gKiBAcGFyYW0ge1ZlYzJ9IG91dF9iclxuICogQHBhcmFtIHtSZWN0fSByZWN0XG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gYW5BZmZpbmVUcmFuc2Zvcm1cbiAqL1xuQWZmaW5lVHJhbnNmb3JtLnRyYW5zZm9ybU9iYiA9IGZ1bmN0aW9uIChvdXRfYmwsIG91dF90bCwgb3V0X3RyLCBvdXRfYnIsIHJlY3QsIGFuQWZmaW5lVHJhbnNmb3JtKSB7XG4gICAgdmFyIHggPSByZWN0Lng7XG4gICAgdmFyIHkgPSByZWN0Lnk7XG4gICAgdmFyIHdpZHRoID0gcmVjdC53aWR0aDtcbiAgICB2YXIgaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG5cbiAgICB2YXIgdHggPSBhbkFmZmluZVRyYW5zZm9ybS5hICogeCArIGFuQWZmaW5lVHJhbnNmb3JtLmMgKiB5ICsgYW5BZmZpbmVUcmFuc2Zvcm0udHg7XG4gICAgdmFyIHR5ID0gYW5BZmZpbmVUcmFuc2Zvcm0uYiAqIHggKyBhbkFmZmluZVRyYW5zZm9ybS5kICogeSArIGFuQWZmaW5lVHJhbnNmb3JtLnR5O1xuICAgIHZhciB4YSA9IGFuQWZmaW5lVHJhbnNmb3JtLmEgKiB3aWR0aDtcbiAgICB2YXIgeGIgPSBhbkFmZmluZVRyYW5zZm9ybS5iICogd2lkdGg7XG4gICAgdmFyIHljID0gYW5BZmZpbmVUcmFuc2Zvcm0uYyAqIGhlaWdodDtcbiAgICB2YXIgeWQgPSBhbkFmZmluZVRyYW5zZm9ybS5kICogaGVpZ2h0O1xuXG4gICAgb3V0X3RsLnggPSB0eDtcbiAgICBvdXRfdGwueSA9IHR5O1xuICAgIG91dF90ci54ID0geGEgKyB0eDtcbiAgICBvdXRfdHIueSA9IHhiICsgdHk7XG4gICAgb3V0X2JsLnggPSB5YyArIHR4O1xuICAgIG91dF9ibC55ID0geWQgKyB0eTtcbiAgICBvdXRfYnIueCA9IHhhICsgeWMgKyB0eDtcbiAgICBvdXRfYnIueSA9IHhiICsgeWQgKyB0eTtcbn07XG5cbmNjLkFmZmluZVRyYW5zZm9ybSA9IG1vZHVsZS5leHBvcnRzID0gQWZmaW5lVHJhbnNmb3JtOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAwOC0yMDEwIFJpY2FyZG8gUXVlc2FkYVxuIENvcHlyaWdodCAoYykgMjAxMS0yMDEyIGNvY29zMmQteC5vcmdcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwOi8vd3d3LmNvY29zMmQteC5vcmdcblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICogISNlblxuICogQWZmaW5lVHJhbnNmb3JtIGNsYXNzIHJlcHJlc2VudCBhbiBhZmZpbmUgdHJhbnNmb3JtIG1hdHJpeC4gSXQncyBjb21wb3NlZCBiYXNpY2FsbHkgYnkgdHJhbnNsYXRpb24sIHJvdGF0aW9uLCBzY2FsZSB0cmFuc2Zvcm1hdGlvbnMuPGJyLz5cbiAqICEjemhcbiAqIEFmZmluZVRyYW5zZm9ybSDnsbvku6PooajkuIDkuKrku7/lsITlj5jmjaLnn6npmLXjgILlroPln7rmnKzkuIrmmK/nlLHlubPnp7vml4vovazvvIznvKnmlL7ovazlj5jmiYDnu4TmiJDjgII8YnIvPlxuICogQGNsYXNzIEFmZmluZVRyYW5zZm9ybVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gYVxuICogQHBhcmFtIHtOdW1iZXJ9IGJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjXG4gKiBAcGFyYW0ge051bWJlcn0gZFxuICogQHBhcmFtIHtOdW1iZXJ9IHR4XG4gKiBAcGFyYW0ge051bWJlcn0gdHlcbiAqIEBzZWUgQWZmaW5lVHJhbnNmb3JtLmNyZWF0ZVxuICovXG52YXIgQWZmaW5lVHJhbnNmb3JtID0gZnVuY3Rpb24gQWZmaW5lVHJhbnNmb3JtKGEsIGIsIGMsIGQsIHR4LCB0eSkge1xuICAgIHRoaXMuYSA9IGE7XG4gICAgdGhpcy5iID0gYjtcbiAgICB0aGlzLmMgPSBjO1xuICAgIHRoaXMuZCA9IGQ7XG4gICAgdGhpcy50eCA9IHR4O1xuICAgIHRoaXMudHkgPSB0eTtcbn07XG5cbi8qKlxuICogISNlbiBDcmVhdGUgYSBBZmZpbmVUcmFuc2Zvcm0gb2JqZWN0IHdpdGggYWxsIGNvbnRlbnRzIGluIHRoZSBtYXRyaXguXG4gKiAhI3poIOeUqOWcqOefqemYteS4reeahOaJgOacieWGheWuueWIm+W7uuS4gOS4qiBBZmZpbmVUcmFuc2Zvcm0g5a+56LGh44CCXG4gKiBAbWV0aG9kIGNyZWF0ZVxuICogQHN0YXRpY1xuICogQHBhcmFtIHtOdW1iZXJ9IGFcbiAqIEBwYXJhbSB7TnVtYmVyfSBiXG4gKiBAcGFyYW0ge051bWJlcn0gY1xuICogQHBhcmFtIHtOdW1iZXJ9IGRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eFxuICogQHBhcmFtIHtOdW1iZXJ9IHR5XG4gKiBAcmV0dXJuIHtBZmZpbmVUcmFuc2Zvcm19XG4gKi9cbkFmZmluZVRyYW5zZm9ybS5jcmVhdGUgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCwgdHgsIHR5KSB7XG4gICAgcmV0dXJuIHsgYTogYSwgYjogYiwgYzogYywgZDogZCwgdHg6IHR4LCB0eTogdHkgfTtcbn07XG5cbi8qKlxuICogISNlblxuICogQ3JlYXRlIGEgaWRlbnRpdHkgdHJhbnNmb3JtYXRpb24gbWF0cml4OiA8YnIvPlxuICogWyAxLCAwLCAwLCA8YnIvPlxuICogICAwLCAxLCAwIF1cbiAqICEjemhcbiAqIOWNleS9jeefqemYte+8mjxici8+XG4gKiBbIDEsIDAsIDAsIDxici8+XG4gKiAgIDAsIDEsIDAgXVxuICpcbiAqIEBtZXRob2QgaWRlbnRpdHlcbiAqIEBzdGF0aWNcbiAqIEByZXR1cm4ge0FmZmluZVRyYW5zZm9ybX1cbiAqL1xuQWZmaW5lVHJhbnNmb3JtLmlkZW50aXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7IGE6IDEuMCwgYjogMC4wLCBjOiAwLjAsIGQ6IDEuMCwgdHg6IDAuMCwgdHk6IDAuMCB9O1xufTtcblxuLyoqXG4gKiAhI2VuIENsb25lIGEgQWZmaW5lVHJhbnNmb3JtIG9iamVjdCBmcm9tIHRoZSBzcGVjaWZpZWQgdHJhbnNmb3JtLlxuICogISN6aCDlhYvpmobmjIflrprnmoQgQWZmaW5lVHJhbnNmb3JtIOWvueixoeOAglxuICogQG1ldGhvZCBjbG9uZVxuICogQHN0YXRpY1xuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm19IHRcbiAqIEByZXR1cm4ge0FmZmluZVRyYW5zZm9ybX1cbiAqL1xuQWZmaW5lVHJhbnNmb3JtLmNsb25lID0gZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4geyBhOiB0LmEsIGI6IHQuYiwgYzogdC5jLCBkOiB0LmQsIHR4OiB0LnR4LCB0eTogdC50eSB9O1xufTtcblxuLyoqXG4gKiAhI2VuXG4gKiBDb25jYXRlbmF0ZSBhIHRyYW5zZm9ybSBtYXRyaXggdG8gYW5vdGhlclxuICogVGhlIHJlc3VsdHMgYXJlIHJlZmxlY3RlZCBpbiB0aGUgb3V0IGFmZmluZSB0cmFuc2Zvcm1cbiAqIG91dCA9IHQxICogdDJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbWVtb3J5IGZyZWUsIHlvdSBzaG91bGQgY3JlYXRlIHRoZSBvdXRwdXQgYWZmaW5lIHRyYW5zZm9ybSBieSB5b3Vyc2VsZiBhbmQgbWFuYWdlIGl0cyBtZW1vcnkuXG4gKiAhI3poXG4gKiDmi7zmjqXkuKTkuKrnn6npmLXvvIzlsIbnu5Pmnpzkv53lrZjliLAgb3V0IOefqemYteOAgui/meS4quWHveaVsOS4jeWIm+W7uuS7u+S9leWGheWtmO+8jOS9oOmcgOimgeWFiOWIm+W7uiBBZmZpbmVUcmFuc2Zvcm0g5a+56LGh55So5p2l5a2Y5YKo57uT5p6c77yM5bm25L2c5Li656ys5LiA5Liq5Y+C5pWw5Lyg5YWl5Ye95pWw44CCXG4gKiBvdXQgPSB0MSAqIHQyXG4gKiBAbWV0aG9kIGNvbmNhdFxuICogQHN0YXRpY1xuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm19IG91dCBPdXQgb2JqZWN0IHRvIHN0b3JlIHRoZSBjb25jYXQgcmVzdWx0XG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gdDEgVGhlIGZpcnN0IHRyYW5zZm9ybSBvYmplY3QuXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gdDIgVGhlIHRyYW5zZm9ybSBvYmplY3QgdG8gY29uY2F0ZW5hdGUuXG4gKiBAcmV0dXJuIHtBZmZpbmVUcmFuc2Zvcm19IE91dCBvYmplY3Qgd2l0aCB0aGUgcmVzdWx0IG9mIGNvbmNhdGVuYXRpb24uXG4gKi9cbkFmZmluZVRyYW5zZm9ybS5jb25jYXQgPSBmdW5jdGlvbiAob3V0LCB0MSwgdDIpIHtcbiAgICB2YXIgYSA9IHQxLmEsXG4gICAgICAgIGIgPSB0MS5iLFxuICAgICAgICBjID0gdDEuYyxcbiAgICAgICAgZCA9IHQxLmQsXG4gICAgICAgIHR4ID0gdDEudHgsXG4gICAgICAgIHR5ID0gdDEudHk7XG4gICAgb3V0LmEgPSBhICogdDIuYSArIGIgKiB0Mi5jO1xuICAgIG91dC5iID0gYSAqIHQyLmIgKyBiICogdDIuZDtcbiAgICBvdXQuYyA9IGMgKiB0Mi5hICsgZCAqIHQyLmM7XG4gICAgb3V0LmQgPSBjICogdDIuYiArIGQgKiB0Mi5kO1xuICAgIG91dC50eCA9IHR4ICogdDIuYSArIHR5ICogdDIuYyArIHQyLnR4O1xuICAgIG91dC50eSA9IHR4ICogdDIuYiArIHR5ICogdDIuZCArIHQyLnR5O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqICEjZW4gR2V0IHRoZSBpbnZlcnQgdHJhbnNmb3JtIG9mIGFuIEFmZmluZVRyYW5zZm9ybSBvYmplY3QuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG1lbW9yeSBmcmVlLCB5b3Ugc2hvdWxkIGNyZWF0ZSB0aGUgb3V0cHV0IGFmZmluZSB0cmFuc2Zvcm0gYnkgeW91cnNlbGYgYW5kIG1hbmFnZSBpdHMgbWVtb3J5LlxuICogISN6aCDmsYLpgIbnn6npmLXjgILov5nkuKrlh73mlbDkuI3liJvlu7rku7vkvZXlhoXlrZjvvIzkvaDpnIDopoHlhYjliJvlu7ogQWZmaW5lVHJhbnNmb3JtIOWvueixoeeUqOadpeWtmOWCqOe7k+aenO+8jOW5tuS9nOS4uuesrOS4gOS4quWPguaVsOS8oOWFpeWHveaVsOOAglxuICogQG1ldGhvZCBpbnZlcnRcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSBvdXRcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSB0XG4gKiBAcmV0dXJuIHtBZmZpbmVUcmFuc2Zvcm19IE91dCBvYmplY3Qgd2l0aCBpbnZlcnRlZCByZXN1bHQuXG4gKi9cbkFmZmluZVRyYW5zZm9ybS5pbnZlcnQgPSBmdW5jdGlvbiAob3V0LCB0KSB7XG4gICAgdmFyIGEgPSB0LmEsXG4gICAgICAgIGIgPSB0LmIsXG4gICAgICAgIGMgPSB0LmMsXG4gICAgICAgIGQgPSB0LmQ7XG4gICAgdmFyIGRldGVybWluYW50ID0gMSAvIChhICogZCAtIGIgKiBjKTtcbiAgICB2YXIgdHggPSB0LnR4LFxuICAgICAgICB0eSA9IHQudHk7XG4gICAgb3V0LmEgPSBkZXRlcm1pbmFudCAqIGQ7XG4gICAgb3V0LmIgPSAtZGV0ZXJtaW5hbnQgKiBiO1xuICAgIG91dC5jID0gLWRldGVybWluYW50ICogYztcbiAgICBvdXQuZCA9IGRldGVybWluYW50ICogYTtcbiAgICBvdXQudHggPSBkZXRlcm1pbmFudCAqIChjICogdHkgLSBkICogdHgpO1xuICAgIG91dC50eSA9IGRldGVybWluYW50ICogKGIgKiB0eCAtIGEgKiB0eSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogISNlbiBHZXQgYW4gQWZmaW5lVHJhbnNmb3JtIG9iamVjdCBmcm9tIGEgZ2l2ZW4gbWF0cml4IDR4NC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgbWVtb3J5IGZyZWUsIHlvdSBzaG91bGQgY3JlYXRlIHRoZSBvdXRwdXQgYWZmaW5lIHRyYW5zZm9ybSBieSB5b3Vyc2VsZiBhbmQgbWFuYWdlIGl0cyBtZW1vcnkuXG4gKiAhI3poIOS7juS4gOS4qiA0eDQgTWF0cml4IOiOt+WPliBBZmZpbmVUcmFuc2Zvcm0g5a+56LGh44CC6L+Z5Liq5Ye95pWw5LiN5Yib5bu65Lu75L2V5YaF5a2Y77yM5L2g6ZyA6KaB5YWI5Yib5bu6IEFmZmluZVRyYW5zZm9ybSDlr7nosaHnlKjmnaXlrZjlgqjnu5PmnpzvvIzlubbkvZzkuLrnrKzkuIDkuKrlj4LmlbDkvKDlhaXlh73mlbDjgIJcbiAqIEBtZXRob2QgaW52ZXJ0XG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gb3V0XG4gKiBAcGFyYW0ge01hdDR9IG1hdFxuICogQHJldHVybiB7QWZmaW5lVHJhbnNmb3JtfSBPdXQgb2JqZWN0IHdpdGggaW52ZXJ0ZWQgcmVzdWx0LlxuICovXG5BZmZpbmVUcmFuc2Zvcm0uZnJvbU1hdDQgPSBmdW5jdGlvbiAob3V0LCBtYXQpIHtcbiAgICBvdXQuYSA9IG1hdC5tMDA7XG4gICAgb3V0LmIgPSBtYXQubTAxO1xuICAgIG91dC5jID0gbWF0Lm0wNDtcbiAgICBvdXQuZCA9IG1hdC5tMDU7XG4gICAgb3V0LnR4ID0gbWF0Lm0xMjtcbiAgICBvdXQudHkgPSBtYXQubTEzO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqICEjZW4gQXBwbHkgdGhlIGFmZmluZSB0cmFuc2Zvcm1hdGlvbiBvbiBhIHBvaW50LlxuICogVGhpcyBmdW5jdGlvbiBpcyBtZW1vcnkgZnJlZSwgeW91IHNob3VsZCBjcmVhdGUgdGhlIG91dHB1dCBWZWMyIGJ5IHlvdXJzZWxmIGFuZCBtYW5hZ2UgaXRzIG1lbW9yeS5cbiAqICEjemgg5a+55LiA5Liq54K55bqU55So55+p6Zi15Y+Y5o2i44CC6L+Z5Liq5Ye95pWw5LiN5Yib5bu65Lu75L2V5YaF5a2Y77yM5L2g6ZyA6KaB5YWI5Yib5bu65LiA5LiqIFZlYzIg5a+56LGh55So5p2l5a2Y5YKo57uT5p6c77yM5bm25L2c5Li656ys5LiA5Liq5Y+C5pWw5Lyg5YWl5Ye95pWw44CCXG4gKiBAbWV0aG9kIHRyYW5zZm9ybVZlYzJcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7VmVjMn0gb3V0IFRoZSBvdXRwdXQgcG9pbnQgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICogQHBhcmFtIHtWZWMyfE51bWJlcn0gcG9pbnQgUG9pbnQgdG8gYXBwbHkgdHJhbnNmb3JtIG9yIHguXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybXxOdW1iZXJ9IHRyYW5zT3JZIHRyYW5zZm9ybSBtYXRyaXggb3IgeS5cbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSBbdF0gdHJhbnNmb3JtIG1hdHJpeC5cbiAqIEByZXR1cm4ge1ZlYzJ9XG4gKi9cbkFmZmluZVRyYW5zZm9ybS50cmFuc2Zvcm1WZWMyID0gZnVuY3Rpb24gKG91dCwgcG9pbnQsIHRyYW5zT3JZLCB0KSB7XG4gICAgdmFyIHgsIHk7XG4gICAgaWYgKHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0ID0gdHJhbnNPclk7XG4gICAgICAgIHggPSBwb2ludC54O1xuICAgICAgICB5ID0gcG9pbnQueTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB4ID0gcG9pbnQ7XG4gICAgICAgIHkgPSB0cmFuc09yWTtcbiAgICB9XG4gICAgb3V0LnggPSB0LmEgKiB4ICsgdC5jICogeSArIHQudHg7XG4gICAgb3V0LnkgPSB0LmIgKiB4ICsgdC5kICogeSArIHQudHk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogISNlbiBBcHBseSB0aGUgYWZmaW5lIHRyYW5zZm9ybWF0aW9uIG9uIGEgc2l6ZS5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgbWVtb3J5IGZyZWUsIHlvdSBzaG91bGQgY3JlYXRlIHRoZSBvdXRwdXQgU2l6ZSBieSB5b3Vyc2VsZiBhbmQgbWFuYWdlIGl0cyBtZW1vcnkuXG4gKiAhI3poIOW6lOeUqOS7v+WwhOWPmOaNouefqemYteWIsCBTaXplIOS4iuOAgui/meS4quWHveaVsOS4jeWIm+W7uuS7u+S9leWGheWtmO+8jOS9oOmcgOimgeWFiOWIm+W7uuS4gOS4qiBTaXplIOWvueixoeeUqOadpeWtmOWCqOe7k+aenO+8jOW5tuS9nOS4uuesrOS4gOS4quWPguaVsOS8oOWFpeWHveaVsOOAglxuICogQG1ldGhvZCB0cmFuc2Zvcm1TaXplXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge1NpemV9IG91dCBUaGUgb3V0cHV0IHBvaW50IHRvIHN0b3JlIHRoZSByZXN1bHRcbiAqIEBwYXJhbSB7U2l6ZX0gc2l6ZVxuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm19IHRcbiAqIEByZXR1cm4ge1NpemV9XG4gKi9cbkFmZmluZVRyYW5zZm9ybS50cmFuc2Zvcm1TaXplID0gZnVuY3Rpb24gKG91dCwgc2l6ZSwgdCkge1xuICAgIG91dC53aWR0aCA9IHQuYSAqIHNpemUud2lkdGggKyB0LmMgKiBzaXplLmhlaWdodDtcbiAgICBvdXQuaGVpZ2h0ID0gdC5iICogc2l6ZS53aWR0aCArIHQuZCAqIHNpemUuaGVpZ2h0O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcbiAqICEjZW4gQXBwbHkgdGhlIGFmZmluZSB0cmFuc2Zvcm1hdGlvbiBvbiBhIHJlY3QuXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG1lbW9yeSBmcmVlLCB5b3Ugc2hvdWxkIGNyZWF0ZSB0aGUgb3V0cHV0IFJlY3QgYnkgeW91cnNlbGYgYW5kIG1hbmFnZSBpdHMgbWVtb3J5LlxuICogISN6aCDlupTnlKjku7/lsITlj5jmjaLnn6npmLXliLAgUmVjdCDkuIrjgILov5nkuKrlh73mlbDkuI3liJvlu7rku7vkvZXlhoXlrZjvvIzkvaDpnIDopoHlhYjliJvlu7rkuIDkuKogUmVjdCDlr7nosaHnlKjmnaXlrZjlgqjnu5PmnpzvvIzlubbkvZzkuLrnrKzkuIDkuKrlj4LmlbDkvKDlhaXlh73mlbDjgIJcbiAqIEBtZXRob2QgdHJhbnNmb3JtUmVjdFxuICogQHN0YXRpY1xuICogQHBhcmFtIHtSZWN0fSBvdXRcbiAqIEBwYXJhbSB7UmVjdH0gcmVjdFxuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm19IGFuQWZmaW5lVHJhbnNmb3JtXG4gKiBAcmV0dXJuIHtSZWN0fVxuICovXG5BZmZpbmVUcmFuc2Zvcm0udHJhbnNmb3JtUmVjdCA9IGZ1bmN0aW9uIChvdXQsIHJlY3QsIHQpIHtcbiAgICB2YXIgb2wgPSByZWN0Lng7XG4gICAgdmFyIG9iID0gcmVjdC55O1xuICAgIHZhciBvciA9IG9sICsgcmVjdC53aWR0aDtcbiAgICB2YXIgb3QgPSBvYiArIHJlY3QuaGVpZ2h0O1xuICAgIHZhciBsYnggPSB0LmEgKiBvbCArIHQuYyAqIG9iICsgdC50eDtcbiAgICB2YXIgbGJ5ID0gdC5iICogb2wgKyB0LmQgKiBvYiArIHQudHk7XG4gICAgdmFyIHJieCA9IHQuYSAqIG9yICsgdC5jICogb2IgKyB0LnR4O1xuICAgIHZhciByYnkgPSB0LmIgKiBvciArIHQuZCAqIG9iICsgdC50eTtcbiAgICB2YXIgbHR4ID0gdC5hICogb2wgKyB0LmMgKiBvdCArIHQudHg7XG4gICAgdmFyIGx0eSA9IHQuYiAqIG9sICsgdC5kICogb3QgKyB0LnR5O1xuICAgIHZhciBydHggPSB0LmEgKiBvciArIHQuYyAqIG90ICsgdC50eDtcbiAgICB2YXIgcnR5ID0gdC5iICogb3IgKyB0LmQgKiBvdCArIHQudHk7XG5cbiAgICB2YXIgbWluWCA9IE1hdGgubWluKGxieCwgcmJ4LCBsdHgsIHJ0eCk7XG4gICAgdmFyIG1heFggPSBNYXRoLm1heChsYngsIHJieCwgbHR4LCBydHgpO1xuICAgIHZhciBtaW5ZID0gTWF0aC5taW4obGJ5LCByYnksIGx0eSwgcnR5KTtcbiAgICB2YXIgbWF4WSA9IE1hdGgubWF4KGxieSwgcmJ5LCBsdHksIHJ0eSk7XG5cbiAgICBvdXQueCA9IG1pblg7XG4gICAgb3V0LnkgPSBtaW5ZO1xuICAgIG91dC53aWR0aCA9IG1heFggLSBtaW5YO1xuICAgIG91dC5oZWlnaHQgPSBtYXhZIC0gbWluWTtcbiAgICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiAhI2VuIEFwcGx5IHRoZSBhZmZpbmUgdHJhbnNmb3JtYXRpb24gb24gYSByZWN0LCBhbmQgdHJ1bnMgdG8gYW4gT3JpZW50ZWQgQm91bmRpbmcgQm94LlxuICogVGhpcyBmdW5jdGlvbiBpcyBtZW1vcnkgZnJlZSwgeW91IHNob3VsZCBjcmVhdGUgdGhlIG91dHB1dCB2ZWN0b3JzIGJ5IHlvdXJzZWxmIGFuZCBtYW5hZ2UgdGhlaXIgbWVtb3J5LlxuICogISN6aCDlupTnlKjku7/lsITlj5jmjaLnn6npmLXliLAgUmVjdCDkuIosIOW5tui9rOaNouS4uuacieWQkeWMheWbtOebkuOAgui/meS4quWHveaVsOS4jeWIm+W7uuS7u+S9leWGheWtmO+8jOS9oOmcgOimgeWFiOWIm+W7uuWMheWbtOebkueahOWbm+S4qiBWZWN0b3Ig5a+56LGh55So5p2l5a2Y5YKo57uT5p6c77yM5bm25L2c5Li65YmN5Zub5Liq5Y+C5pWw5Lyg5YWl5Ye95pWw44CCXG4gKiBAbWV0aG9kIHRyYW5zZm9ybU9iYlxuICogQHN0YXRpY1xuICogQHBhcmFtIHtWZWMyfSBvdXRfYmxcbiAqIEBwYXJhbSB7VmVjMn0gb3V0X3RsXG4gKiBAcGFyYW0ge1ZlYzJ9IG91dF90clxuICogQHBhcmFtIHtWZWMyfSBvdXRfYnJcbiAqIEBwYXJhbSB7UmVjdH0gcmVjdFxuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm19IGFuQWZmaW5lVHJhbnNmb3JtXG4gKi9cbkFmZmluZVRyYW5zZm9ybS50cmFuc2Zvcm1PYmIgPSBmdW5jdGlvbiAob3V0X2JsLCBvdXRfdGwsIG91dF90ciwgb3V0X2JyLCByZWN0LCBhbkFmZmluZVRyYW5zZm9ybSkge1xuICAgIHZhciB4ID0gcmVjdC54O1xuICAgIHZhciB5ID0gcmVjdC55O1xuICAgIHZhciB3aWR0aCA9IHJlY3Qud2lkdGg7XG4gICAgdmFyIGhlaWdodCA9IHJlY3QuaGVpZ2h0O1xuXG4gICAgdmFyIHR4ID0gYW5BZmZpbmVUcmFuc2Zvcm0uYSAqIHggKyBhbkFmZmluZVRyYW5zZm9ybS5jICogeSArIGFuQWZmaW5lVHJhbnNmb3JtLnR4O1xuICAgIHZhciB0eSA9IGFuQWZmaW5lVHJhbnNmb3JtLmIgKiB4ICsgYW5BZmZpbmVUcmFuc2Zvcm0uZCAqIHkgKyBhbkFmZmluZVRyYW5zZm9ybS50eTtcbiAgICB2YXIgeGEgPSBhbkFmZmluZVRyYW5zZm9ybS5hICogd2lkdGg7XG4gICAgdmFyIHhiID0gYW5BZmZpbmVUcmFuc2Zvcm0uYiAqIHdpZHRoO1xuICAgIHZhciB5YyA9IGFuQWZmaW5lVHJhbnNmb3JtLmMgKiBoZWlnaHQ7XG4gICAgdmFyIHlkID0gYW5BZmZpbmVUcmFuc2Zvcm0uZCAqIGhlaWdodDtcblxuICAgIG91dF90bC54ID0gdHg7XG4gICAgb3V0X3RsLnkgPSB0eTtcbiAgICBvdXRfdHIueCA9IHhhICsgdHg7XG4gICAgb3V0X3RyLnkgPSB4YiArIHR5O1xuICAgIG91dF9ibC54ID0geWMgKyB0eDtcbiAgICBvdXRfYmwueSA9IHlkICsgdHk7XG4gICAgb3V0X2JyLnggPSB4YSArIHljICsgdHg7XG4gICAgb3V0X2JyLnkgPSB4YiArIHlkICsgdHk7XG59O1xuXG5jYy5BZmZpbmVUcmFuc2Zvcm0gPSBtb2R1bGUuZXhwb3J0cyA9IEFmZmluZVRyYW5zZm9ybTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltRm1abWx1WlMxMGNtRnVjMlp2Y20wdWFuTWlYU3dpYm1GdFpYTWlPbHNpUVdabWFXNWxWSEpoYm5ObWIzSnRJaXdpWVNJc0ltSWlMQ0pqSWl3aVpDSXNJblI0SWl3aWRIa2lMQ0pqY21WaGRHVWlMQ0pwWkdWdWRHbDBlU0lzSW1Oc2IyNWxJaXdpZENJc0ltTnZibU5oZENJc0ltOTFkQ0lzSW5ReElpd2lkRElpTENKcGJuWmxjblFpTENKa1pYUmxjbTFwYm1GdWRDSXNJbVp5YjIxTllYUTBJaXdpYldGMElpd2liVEF3SWl3aWJUQXhJaXdpYlRBMElpd2liVEExSWl3aWJURXlJaXdpYlRFeklpd2lkSEpoYm5ObWIzSnRWbVZqTWlJc0luQnZhVzUwSWl3aWRISmhibk5QY2xraUxDSjRJaXdpZVNJc0luVnVaR1ZtYVc1bFpDSXNJblJ5WVc1elptOXliVk5wZW1VaUxDSnphWHBsSWl3aWQybGtkR2dpTENKb1pXbG5hSFFpTENKMGNtRnVjMlp2Y20xU1pXTjBJaXdpY21WamRDSXNJbTlzSWl3aWIySWlMQ0p2Y2lJc0ltOTBJaXdpYkdKNElpd2liR0o1SWl3aWNtSjRJaXdpY21KNUlpd2liSFI0SWl3aWJIUjVJaXdpY25SNElpd2ljblI1SWl3aWJXbHVXQ0lzSWsxaGRHZ2lMQ0p0YVc0aUxDSnRZWGhZSWl3aWJXRjRJaXdpYldsdVdTSXNJbTFoZUZraUxDSjBjbUZ1YzJadmNtMVBZbUlpTENKdmRYUmZZbXdpTENKdmRYUmZkR3dpTENKdmRYUmZkSElpTENKdmRYUmZZbklpTENKaGJrRm1abWx1WlZSeVlXNXpabTl5YlNJc0luaGhJaXdpZUdJaUxDSjVZeUlzSW5sa0lpd2lZMk1pTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRXlRa0U3T3pzN096czdPenM3T3pzN096dEJRV1ZCTEVsQlFVbEJMR3RDUVVGclFpeFRRVUZzUWtFc1pVRkJhMElzUTBGQlZVTXNRMEZCVml4RlFVRmhReXhEUVVGaUxFVkJRV2RDUXl4RFFVRm9RaXhGUVVGdFFrTXNRMEZCYmtJc1JVRkJjMEpETEVWQlFYUkNMRVZCUVRCQ1F5eEZRVUV4UWl4RlFVRTRRanRCUVVOb1JDeFRRVUZMVEN4RFFVRk1MRWRCUVZOQkxFTkJRVlE3UVVGRFFTeFRRVUZMUXl4RFFVRk1MRWRCUVZOQkxFTkJRVlE3UVVGRFFTeFRRVUZMUXl4RFFVRk1MRWRCUVZOQkxFTkJRVlE3UVVGRFFTeFRRVUZMUXl4RFFVRk1MRWRCUVZOQkxFTkJRVlE3UVVGRFFTeFRRVUZMUXl4RlFVRk1MRWRCUVZWQkxFVkJRVlk3UVVGRFFTeFRRVUZMUXl4RlFVRk1MRWRCUVZWQkxFVkJRVlk3UVVGRFNDeERRVkJFT3p0QlFWTkJPenM3T3pzN096czdPenM3TzBGQllVRk9MR2RDUVVGblFrOHNUVUZCYUVJc1IwRkJlVUlzVlVGQlZVNHNRMEZCVml4RlFVRmhReXhEUVVGaUxFVkJRV2RDUXl4RFFVRm9RaXhGUVVGdFFrTXNRMEZCYmtJc1JVRkJjMEpETEVWQlFYUkNMRVZCUVRCQ1F5eEZRVUV4UWl4RlFVRTRRanRCUVVOdVJDeFhRVUZQTEVWQlFVTk1MRWRCUVVkQkxFTkJRVW9zUlVGQlQwTXNSMEZCUjBFc1EwRkJWaXhGUVVGaFF5eEhRVUZIUVN4RFFVRm9RaXhGUVVGdFFrTXNSMEZCUjBFc1EwRkJkRUlzUlVGQmVVSkRMRWxCUVVsQkxFVkJRVGRDTEVWQlFXbERReXhKUVVGSlFTeEZRVUZ5UXl4RlFVRlFPMEZCUTBnc1EwRkdSRHM3UVVGSlFUczdPenM3T3pzN096czdPenM3UVVGalFVNHNaMEpCUVdkQ1VTeFJRVUZvUWl4SFFVRXlRaXhaUVVGWk8wRkJRMjVETEZkQlFVOHNSVUZCUTFBc1IwRkJSeXhIUVVGS0xFVkJRVk5ETEVkQlFVY3NSMEZCV2l4RlFVRnBRa01zUjBGQlJ5eEhRVUZ3UWl4RlFVRjVRa01zUjBGQlJ5eEhRVUUxUWl4RlFVRnBRME1zU1VGQlNTeEhRVUZ5UXl4RlFVRXdRME1zU1VGQlNTeEhRVUU1UXl4RlFVRlFPMEZCUTBnc1EwRkdSRHM3UVVGSlFUczdPenM3T3pzN1FVRlJRVTRzWjBKQlFXZENVeXhMUVVGb1FpeEhRVUYzUWl4VlFVRlZReXhEUVVGV0xFVkJRV0U3UVVGRGFrTXNWMEZCVHl4RlFVRkRWQ3hIUVVGSFV5eEZRVUZGVkN4RFFVRk9MRVZCUVZORExFZEJRVWRSTEVWQlFVVlNMRU5CUVdRc1JVRkJhVUpETEVkQlFVZFBMRVZCUVVWUUxFTkJRWFJDTEVWQlFYbENReXhIUVVGSFRTeEZRVUZGVGl4RFFVRTVRaXhGUVVGcFEwTXNTVUZCU1Vzc1JVRkJSVXdzUlVGQmRrTXNSVUZCTWtORExFbEJRVWxKTEVWQlFVVktMRVZCUVdwRUxFVkJRVkE3UVVGRFNDeERRVVpFT3p0QlFVbEJPenM3T3pzN096czdPenM3T3pzN08wRkJaMEpCVGl4blFrRkJaMEpYTEUxQlFXaENMRWRCUVhsQ0xGVkJRVlZETEVkQlFWWXNSVUZCWlVNc1JVRkJaaXhGUVVGdFFrTXNSVUZCYmtJc1JVRkJkVUk3UVVGRE5VTXNVVUZCU1dJc1NVRkJTVmtzUjBGQlIxb3NRMEZCV0R0QlFVRkJMRkZCUVdORExFbEJRVWxYTEVkQlFVZFlMRU5CUVhKQ08wRkJRVUVzVVVGQmQwSkRMRWxCUVVsVkxFZEJRVWRXTEVOQlFTOUNPMEZCUVVFc1VVRkJhME5ETEVsQlFVbFRMRWRCUVVkVUxFTkJRWHBETzBGQlFVRXNVVUZCTkVORExFdEJRVXRSTEVkQlFVZFNMRVZCUVhCRU8wRkJRVUVzVVVGQmQwUkRMRXRCUVV0UExFZEJRVWRRTEVWQlFXaEZPMEZCUTBGTkxGRkJRVWxZTEVOQlFVb3NSMEZCVVVFc1NVRkJTV0VzUjBGQlIySXNRMEZCVUN4SFFVRlhReXhKUVVGSldTeEhRVUZIV0N4RFFVRXhRanRCUVVOQlV5eFJRVUZKVml4RFFVRktMRWRCUVZGRUxFbEJRVWxoTEVkQlFVZGFMRU5CUVZBc1IwRkJWMEVzU1VGQlNWa3NSMEZCUjFZc1EwRkJNVUk3UVVGRFFWRXNVVUZCU1ZRc1EwRkJTaXhIUVVGUlFTeEpRVUZKVnl4SFFVRkhZaXhEUVVGUUxFZEJRVmRITEVsQlFVbFZMRWRCUVVkWUxFTkJRVEZDTzBGQlEwRlRMRkZCUVVsU0xFTkJRVW9zUjBGQlVVUXNTVUZCU1Zjc1IwRkJSMW9zUTBGQlVDeEhRVUZYUlN4SlFVRkpWU3hIUVVGSFZpeERRVUV4UWp0QlFVTkJVU3hSUVVGSlVDeEZRVUZLTEVkQlFWTkJMRXRCUVV0VExFZEJRVWRpTEVOQlFWSXNSMEZCV1Vzc1MwRkJTMUVzUjBGQlIxZ3NRMEZCY0VJc1IwRkJkMEpYTEVkQlFVZFVMRVZCUVhCRE8wRkJRMEZQTEZGQlFVbE9MRVZCUVVvc1IwRkJVMFFzUzBGQlMxTXNSMEZCUjFvc1EwRkJVaXhIUVVGWlNTeExRVUZMVVN4SFFVRkhWaXhEUVVGd1FpeEhRVUYzUWxVc1IwRkJSMUlzUlVGQmNFTTdRVUZEUVN4WFFVRlBUU3hIUVVGUU8wRkJRMGdzUTBGVVJEczdRVUZYUVRzN096czdPenM3T3p0QlFWVkJXaXhuUWtGQlowSmxMRTFCUVdoQ0xFZEJRWGxDTEZWQlFWVklMRWRCUVZZc1JVRkJaVVlzUTBGQlppeEZRVUZyUWp0QlFVTjJReXhSUVVGSlZDeEpRVUZKVXl4RlFVRkZWQ3hEUVVGV08wRkJRVUVzVVVGQllVTXNTVUZCU1ZFc1JVRkJSVklzUTBGQmJrSTdRVUZCUVN4UlFVRnpRa01zU1VGQlNVOHNSVUZCUlZBc1EwRkJOVUk3UVVGQlFTeFJRVUVyUWtNc1NVRkJTVTBzUlVGQlJVNHNRMEZCY2tNN1FVRkRRU3hSUVVGSldTeGpRVUZqTEV0QlFVdG1MRWxCUVVsSExFTkJRVW9zUjBGQlVVWXNTVUZCU1VNc1EwRkJha0lzUTBGQmJFSTdRVUZEUVN4UlFVRkpSU3hMUVVGTFN5eEZRVUZGVEN4RlFVRllPMEZCUVVFc1VVRkJaVU1zUzBGQlMwa3NSVUZCUlVvc1JVRkJkRUk3UVVGRFFVMHNVVUZCU1Znc1EwRkJTaXhIUVVGUlpTeGpRVUZqV2l4RFFVRjBRanRCUVVOQlVTeFJRVUZKVml4RFFVRktMRWRCUVZFc1EwRkJRMk1zVjBGQlJDeEhRVUZsWkN4RFFVRjJRanRCUVVOQlZTeFJRVUZKVkN4RFFVRktMRWRCUVZFc1EwRkJRMkVzVjBGQlJDeEhRVUZsWWl4RFFVRjJRanRCUVVOQlV5eFJRVUZKVWl4RFFVRktMRWRCUVZGWkxHTkJRV05tTEVOQlFYUkNPMEZCUTBGWExGRkJRVWxRTEVWQlFVb3NSMEZCVTFjc1pVRkJaV0lzU1VGQlNVY3NSVUZCU2l4SFFVRlRSaXhKUVVGSlF5eEZRVUUxUWl4RFFVRlVPMEZCUTBGUExGRkJRVWxPTEVWQlFVb3NSMEZCVTFVc1pVRkJaV1FzU1VGQlNVY3NSVUZCU2l4SFFVRlRTaXhKUVVGSlN5eEZRVUUxUWl4RFFVRlVPMEZCUTBFc1YwRkJUMDBzUjBGQlVEdEJRVU5JTEVOQldFUTdPMEZCWVVFN096czdPenM3T3pzN1FVRlZRVm9zWjBKQlFXZENhVUlzVVVGQmFFSXNSMEZCTWtJc1ZVRkJWVXdzUjBGQlZpeEZRVUZsVFN4SFFVRm1MRVZCUVc5Q08wRkJRek5EVGl4UlFVRkpXQ3hEUVVGS0xFZEJRVkZwUWl4SlFVRkpReXhIUVVGYU8wRkJRMEZRTEZGQlFVbFdMRU5CUVVvc1IwRkJVV2RDTEVsQlFVbEZMRWRCUVZvN1FVRkRRVklzVVVGQlNWUXNRMEZCU2l4SFFVRlJaU3hKUVVGSlJ5eEhRVUZhTzBGQlEwRlVMRkZCUVVsU0xFTkJRVW9zUjBGQlVXTXNTVUZCU1Vrc1IwRkJXanRCUVVOQlZpeFJRVUZKVUN4RlFVRktMRWRCUVZOaExFbEJRVWxMTEVkQlFXSTdRVUZEUVZnc1VVRkJTVTRzUlVGQlNpeEhRVUZUV1N4SlFVRkpUU3hIUVVGaU8wRkJRMEVzVjBGQlQxb3NSMEZCVUR0QlFVTklMRU5CVWtRN08wRkJWVUU3T3pzN096czdPenM3T3p0QlFWbEJXaXhuUWtGQlowSjVRaXhoUVVGb1FpeEhRVUZuUXl4VlFVRlZZaXhIUVVGV0xFVkJRV1ZqTEV0QlFXWXNSVUZCYzBKRExGRkJRWFJDTEVWQlFXZERha0lzUTBGQmFFTXNSVUZCYlVNN1FVRkRMMFFzVVVGQlNXdENMRU5CUVVvc1JVRkJUME1zUTBGQlVEdEJRVU5CTEZGQlFVbHVRaXhOUVVGTmIwSXNVMEZCVml4RlFVRnhRanRCUVVOcVFuQkNMRmxCUVVscFFpeFJRVUZLTzBGQlEwRkRMRmxCUVVsR0xFMUJRVTFGTEVOQlFWWTdRVUZEUVVNc1dVRkJTVWdzVFVGQlRVY3NRMEZCVmp0QlFVTklMRXRCU2tRc1RVRkpUenRCUVVOSVJDeFpRVUZKUml4TFFVRktPMEZCUTBGSExGbEJRVWxHTEZGQlFVbzdRVUZEU0R0QlFVTkVaaXhSUVVGSlowSXNRMEZCU2l4SFFVRlJiRUlzUlVGQlJWUXNRMEZCUml4SFFVRk5Na0lzUTBGQlRpeEhRVUZWYkVJc1JVRkJSVkFzUTBGQlJpeEhRVUZOTUVJc1EwRkJhRUlzUjBGQmIwSnVRaXhGUVVGRlRDeEZRVUU1UWp0QlFVTkJUeXhSUVVGSmFVSXNRMEZCU2l4SFFVRlJia0lzUlVGQlJWSXNRMEZCUml4SFFVRk5NRUlzUTBGQlRpeEhRVUZWYkVJc1JVRkJSVTRzUTBGQlJpeEhRVUZOZVVJc1EwRkJhRUlzUjBGQmIwSnVRaXhGUVVGRlNpeEZRVUU1UWp0QlFVTkJMRmRCUVU5TkxFZEJRVkE3UVVGRFNDeERRV0pFT3p0QlFXVkJPenM3T3pzN096czdPenRCUVZkQldpeG5Ra0ZCWjBJclFpeGhRVUZvUWl4SFFVRm5ReXhWUVVGVmJrSXNSMEZCVml4RlFVRmxiMElzU1VGQlppeEZRVUZ4UW5SQ0xFTkJRWEpDTEVWQlFYZENPMEZCUTNCRVJTeFJRVUZKY1VJc1MwRkJTaXhIUVVGWmRrSXNSVUZCUlZRc1EwRkJSaXhIUVVGTkswSXNTMEZCUzBNc1MwRkJXQ3hIUVVGdFFuWkNMRVZCUVVWUUxFTkJRVVlzUjBGQlRUWkNMRXRCUVV0RkxFMUJRVEZETzBGQlEwRjBRaXhSUVVGSmMwSXNUVUZCU2l4SFFVRmhlRUlzUlVGQlJWSXNRMEZCUml4SFFVRk5PRUlzUzBGQlMwTXNTMEZCV0N4SFFVRnRRblpDTEVWQlFVVk9MRU5CUVVZc1IwRkJUVFJDTEV0QlFVdEZMRTFCUVRORE8wRkJRMEVzVjBGQlQzUkNMRWRCUVZBN1FVRkRTQ3hEUVVwRU96dEJRVTFCT3pzN096czdPenM3T3p0QlFWZEJXaXhuUWtGQlowSnRReXhoUVVGb1FpeEhRVUZuUXl4VlFVRlRka0lzUjBGQlZDeEZRVUZqZDBJc1NVRkJaQ3hGUVVGdlFqRkNMRU5CUVhCQ0xFVkJRWE5DTzBGQlEyeEVMRkZCUVVreVFpeExRVUZMUkN4TFFVRkxVaXhEUVVGa08wRkJRMEVzVVVGQlNWVXNTMEZCUzBZc1MwRkJTMUFzUTBGQlpEdEJRVU5CTEZGQlFVbFZMRXRCUVV0R0xFdEJRVXRFTEV0QlFVdElMRXRCUVc1Q08wRkJRMEVzVVVGQlNVOHNTMEZCUzBZc1MwRkJTMFlzUzBGQlMwWXNUVUZCYmtJN1FVRkRRU3hSUVVGSlR5eE5RVUZOTDBJc1JVRkJSVlFzUTBGQlJpeEhRVUZOYjBNc1JVRkJUaXhIUVVGWE0wSXNSVUZCUlZBc1EwRkJSaXhIUVVGTmJVTXNSVUZCYWtJc1IwRkJjMEkxUWl4RlFVRkZUQ3hGUVVGc1F6dEJRVU5CTEZGQlFVbHhReXhOUVVGTmFFTXNSVUZCUlZJc1EwRkJSaXhIUVVGTmJVTXNSVUZCVGl4SFFVRlhNMElzUlVGQlJVNHNRMEZCUml4SFFVRk5hME1zUlVGQmFrSXNSMEZCYzBJMVFpeEZRVUZGU2l4RlFVRnNRenRCUVVOQkxGRkJRVWx4UXl4TlFVRk5ha01zUlVGQlJWUXNRMEZCUml4SFFVRk5jME1zUlVGQlRpeEhRVUZYTjBJc1JVRkJSVkFzUTBGQlJpeEhRVUZOYlVNc1JVRkJha0lzUjBGQmMwSTFRaXhGUVVGRlRDeEZRVUZzUXp0QlFVTkJMRkZCUVVsMVF5eE5RVUZOYkVNc1JVRkJSVklzUTBGQlJpeEhRVUZOY1VNc1JVRkJUaXhIUVVGWE4wSXNSVUZCUlU0c1EwRkJSaXhIUVVGTmEwTXNSVUZCYWtJc1IwRkJjMEkxUWl4RlFVRkZTaXhGUVVGc1F6dEJRVU5CTEZGQlFVbDFReXhOUVVGTmJrTXNSVUZCUlZRc1EwRkJSaXhIUVVGTmIwTXNSVUZCVGl4SFFVRlhNMElzUlVGQlJWQXNRMEZCUml4SFFVRk5jVU1zUlVGQmFrSXNSMEZCYzBJNVFpeEZRVUZGVEN4RlFVRnNRenRCUVVOQkxGRkJRVWw1UXl4TlFVRk5jRU1zUlVGQlJWSXNRMEZCUml4SFFVRk5iVU1zUlVGQlRpeEhRVUZYTTBJc1JVRkJSVTRzUTBGQlJpeEhRVUZOYjBNc1JVRkJha0lzUjBGQmMwSTVRaXhGUVVGRlNpeEZRVUZzUXp0QlFVTkJMRkZCUVVsNVF5eE5RVUZOY2tNc1JVRkJSVlFzUTBGQlJpeEhRVUZOYzBNc1JVRkJUaXhIUVVGWE4wSXNSVUZCUlZBc1EwRkJSaXhIUVVGTmNVTXNSVUZCYWtJc1IwRkJjMEk1UWl4RlFVRkZUQ3hGUVVGc1F6dEJRVU5CTEZGQlFVa3lReXhOUVVGTmRFTXNSVUZCUlZJc1EwRkJSaXhIUVVGTmNVTXNSVUZCVGl4SFFVRlhOMElzUlVGQlJVNHNRMEZCUml4SFFVRk5iME1zUlVGQmFrSXNSMEZCYzBJNVFpeEZRVUZGU2l4RlFVRnNRenM3UVVGRlFTeFJRVUZKTWtNc1QwRkJUME1zUzBGQlMwTXNSMEZCVEN4RFFVRlRWaXhIUVVGVUxFVkJRV05GTEVkQlFXUXNSVUZCYlVKRkxFZEJRVzVDTEVWQlFYZENSU3hIUVVGNFFpeERRVUZZTzBGQlEwRXNVVUZCU1Vzc1QwRkJUMFlzUzBGQlMwY3NSMEZCVEN4RFFVRlRXaXhIUVVGVUxFVkJRV05GTEVkQlFXUXNSVUZCYlVKRkxFZEJRVzVDTEVWQlFYZENSU3hIUVVGNFFpeERRVUZZTzBGQlEwRXNVVUZCU1U4c1QwRkJUMG9zUzBGQlMwTXNSMEZCVEN4RFFVRlRWQ3hIUVVGVUxFVkJRV05GTEVkQlFXUXNSVUZCYlVKRkxFZEJRVzVDTEVWQlFYZENSU3hIUVVGNFFpeERRVUZZTzBGQlEwRXNVVUZCU1U4c1QwRkJUMHdzUzBGQlMwY3NSMEZCVEN4RFFVRlRXQ3hIUVVGVUxFVkJRV05GTEVkQlFXUXNSVUZCYlVKRkxFZEJRVzVDTEVWQlFYZENSU3hIUVVGNFFpeERRVUZZT3p0QlFVVkJjRU1zVVVGQlNXZENMRU5CUVVvc1IwRkJVWEZDTEVsQlFWSTdRVUZEUVhKRExGRkJRVWxwUWl4RFFVRktMRWRCUVZGNVFpeEpRVUZTTzBGQlEwRXhReXhSUVVGSmNVSXNTMEZCU2l4SFFVRlpiVUlzVDBGQlQwZ3NTVUZCYmtJN1FVRkRRWEpETEZGQlFVbHpRaXhOUVVGS0xFZEJRV0Z4UWl4UFFVRlBSQ3hKUVVGd1FqdEJRVU5CTEZkQlFVOHhReXhIUVVGUU8wRkJRMGdzUTBGNFFrUTdPMEZCTUVKQk96czdPenM3T3pzN096czdPMEZCWVVGYUxHZENRVUZuUW5kRUxGbEJRV2hDTEVkQlFTdENMRlZCUVZWRExFMUJRVllzUlVGQmEwSkRMRTFCUVd4Q0xFVkJRVEJDUXl4TlFVRXhRaXhGUVVGclEwTXNUVUZCYkVNc1JVRkJNRU40UWl4SlFVRXhReXhGUVVGblJIbENMR2xDUVVGb1JDeEZRVUZ0UlR0QlFVTTVSaXhSUVVGSmFrTXNTVUZCU1ZFc1MwRkJTMUlzUTBGQllqdEJRVU5CTEZGQlFVbERMRWxCUVVsUExFdEJRVXRRTEVOQlFXSTdRVUZEUVN4UlFVRkpTU3hSUVVGUlJ5eExRVUZMU0N4TFFVRnFRanRCUVVOQkxGRkJRVWxETEZOQlFWTkZMRXRCUVV0R0xFMUJRV3hDT3p0QlFVVkJMRkZCUVVrM1FpeExRVUZMZDBRc2EwSkJRV3RDTlVRc1EwRkJiRUlzUjBGQmMwSXlRaXhEUVVGMFFpeEhRVUV3UW1sRExHdENRVUZyUWpGRUxFTkJRV3hDTEVkQlFYTkNNRUlzUTBGQmFFUXNSMEZCYjBSblF5eHJRa0ZCYTBKNFJDeEZRVUV2UlR0QlFVTkJMRkZCUVVsRExFdEJRVXQxUkN4clFrRkJhMEl6UkN4RFFVRnNRaXhIUVVGelFqQkNMRU5CUVhSQ0xFZEJRVEJDYVVNc2EwSkJRV3RDZWtRc1EwRkJiRUlzUjBGQmMwSjVRaXhEUVVGb1JDeEhRVUZ2UkdkRExHdENRVUZyUW5aRUxFVkJRUzlGTzBGQlEwRXNVVUZCU1hkRUxFdEJRVXRFTEd0Q1FVRnJRalZFTEVOQlFXeENMRWRCUVhOQ1owTXNTMEZCTDBJN1FVRkRRU3hSUVVGSk9FSXNTMEZCUzBZc2EwSkJRV3RDTTBRc1EwRkJiRUlzUjBGQmMwSXJRaXhMUVVFdlFqdEJRVU5CTEZGQlFVa3JRaXhMUVVGTFNDeHJRa0ZCYTBJeFJDeERRVUZzUWl4SFFVRnpRaXRDTEUxQlFTOUNPMEZCUTBFc1VVRkJTU3RDTEV0QlFVdEtMR3RDUVVGclFucEVMRU5CUVd4Q0xFZEJRWE5DT0VJc1RVRkJMMEk3TzBGQlJVRjNRaXhYUVVGUE9VSXNRMEZCVUN4SFFVRlhka0lzUlVGQldEdEJRVU5CY1VRc1YwRkJUemRDTEVOQlFWQXNSMEZCVjNaQ0xFVkJRVmc3UVVGRFFYRkVMRmRCUVU4dlFpeERRVUZRTEVkQlFWZHJReXhMUVVGTGVrUXNSVUZCYUVJN1FVRkRRWE5FTEZkQlFVODVRaXhEUVVGUUxFZEJRVmRyUXl4TFFVRkxla1FzUlVGQmFFSTdRVUZEUVcxRUxGZEJRVTgzUWl4RFFVRlFMRWRCUVZkdlF5eExRVUZMTTBRc1JVRkJhRUk3UVVGRFFXOUVMRmRCUVU4MVFpeERRVUZRTEVkQlFWZHZReXhMUVVGTE0wUXNSVUZCYUVJN1FVRkRRWE5FTEZkQlFVOW9ReXhEUVVGUUxFZEJRVmRyUXl4TFFVRkxSU3hGUVVGTUxFZEJRVlV6UkN4RlFVRnlRanRCUVVOQmRVUXNWMEZCVHk5Q0xFTkJRVkFzUjBGQlYydERMRXRCUVV0RkxFVkJRVXdzUjBGQlZUTkVMRVZCUVhKQ08wRkJRMGdzUTBGeVFrUTdPMEZCZFVKQk5FUXNSMEZCUjJ4RkxHVkJRVWdzUjBGQmNVSnRSU3hQUVVGUFF5eFBRVUZRTEVkQlFXbENjRVVzWlVGQmRFTWlMQ0ptYVd4bElqb2lZV1ptYVc1bExYUnlZVzV6Wm05eWJTNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREE0TFRJd01UQWdVbWxqWVhKa2J5QlJkV1Z6WVdSaFhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERXhMVEl3TVRJZ1kyOWpiM015WkMxNExtOXlaMXh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TXkweU1ERTJJRU5vZFd0dmJtY2dWR1ZqYUc1dmJHOW5hV1Z6SUVsdVl5NWNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGN0TWpBeE9DQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzVjYmx4dUlHaDBkSEE2THk5M2QzY3VZMjlqYjNNeVpDMTRMbTl5WjF4dVhHNGdVR1Z5YldsemMybHZiaUJwY3lCb1pYSmxZbmtnWjNKaGJuUmxaQ3dnWm5KbFpTQnZaaUJqYUdGeVoyVXNJSFJ2SUdGdWVTQndaWEp6YjI0Z2IySjBZV2x1YVc1bklHRWdZMjl3ZVZ4dUlHOW1JSFJvYVhNZ2MyOW1kSGRoY21VZ1lXNWtJR0Z6YzI5amFXRjBaV1FnWkc5amRXMWxiblJoZEdsdmJpQm1hV3hsY3lBb2RHaGxJRndpVTI5bWRIZGhjbVZjSWlrc0lIUnZJR1JsWVd4Y2JpQnBiaUIwYUdVZ1UyOW1kSGRoY21VZ2QybDBhRzkxZENCeVpYTjBjbWxqZEdsdmJpd2dhVzVqYkhWa2FXNW5JSGRwZEdodmRYUWdiR2x0YVhSaGRHbHZiaUIwYUdVZ2NtbG5hSFJ6WEc0Z2RHOGdkWE5sTENCamIzQjVMQ0J0YjJScFpua3NJRzFsY21kbExDQndkV0pzYVhOb0xDQmthWE4wY21saWRYUmxMQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JGeHVJR052Y0dsbGN5QnZaaUIwYUdVZ1UyOW1kSGRoY21Vc0lHRnVaQ0IwYnlCd1pYSnRhWFFnY0dWeWMyOXVjeUIwYnlCM2FHOXRJSFJvWlNCVGIyWjBkMkZ5WlNCcGMxeHVJR1oxY201cGMyaGxaQ0IwYnlCa2J5QnpieXdnYzNWaWFtVmpkQ0IwYnlCMGFHVWdabTlzYkc5M2FXNW5JR052Ym1ScGRHbHZibk02WEc1Y2JpQlVhR1VnWVdKdmRtVWdZMjl3ZVhKcFoyaDBJRzV2ZEdsalpTQmhibVFnZEdocGN5QndaWEp0YVhOemFXOXVJRzV2ZEdsalpTQnphR0ZzYkNCaVpTQnBibU5zZFdSbFpDQnBibHh1SUdGc2JDQmpiM0JwWlhNZ2IzSWdjM1ZpYzNSaGJuUnBZV3dnY0c5eWRHbHZibk1nYjJZZ2RHaGxJRk52Wm5SM1lYSmxMbHh1WEc0Z1ZFaEZJRk5QUmxSWFFWSkZJRWxUSUZCU1QxWkpSRVZFSUZ3aVFWTWdTVk5jSWl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVV1NCUFJpQkJUbGtnUzBsT1JDd2dSVmhRVWtWVFV5QlBVbHh1SUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBZZ1RVVlNRMGhCVGxSQlFrbE1TVlJaTEZ4dUlFWkpWRTVGVTFNZ1JrOVNJRUVnVUVGU1ZFbERWVXhCVWlCUVZWSlFUMU5GSUVGT1JDQk9UMDVKVGtaU1NVNUhSVTFGVGxRdUlFbE9JRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSVnh1SUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzSUVSQlRVRkhSVk1nVDFJZ1QxUklSVkpjYmlCTVNVRkNTVXhKVkZrc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCVVQxSlVJRTlTSUU5VVNFVlNWMGxUUlN3Z1FWSkpVMGxPUnlCR1VrOU5MRnh1SUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJTQlZVMFVnVDFJZ1QxUklSVklnUkVWQlRFbE9SMU1nU1U1Y2JpQlVTRVVnVTA5R1ZGZEJVa1V1WEc0Z0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dUx5b3FYRzRnS2lBaEkyVnVYRzRnS2lCQlptWnBibVZVY21GdWMyWnZjbTBnWTJ4aGMzTWdjbVZ3Y21WelpXNTBJR0Z1SUdGbVptbHVaU0IwY21GdWMyWnZjbTBnYldGMGNtbDRMaUJKZENkeklHTnZiWEJ2YzJWa0lHSmhjMmxqWVd4c2VTQmllU0IwY21GdWMyeGhkR2x2Yml3Z2NtOTBZWFJwYjI0c0lITmpZV3hsSUhSeVlXNXpabTl5YldGMGFXOXVjeTQ4WW5JdlBseHVJQ29nSVNONmFGeHVJQ29nUVdabWFXNWxWSEpoYm5ObWIzSnRJT2V4dStTN28raWhxT1M0Z09TNHF1Uzd2K1d3aE9XUG1PYU5vdWVmcWVtWXRlT0FndVd1ZytXZnV1YWNyT1M0aXVhWXIrZVVzZVc1cytlbnUrYVhpK2k5ck8rOGpPZThxZWFVdnVpOXJPV1BtT2FKZ09lN2hPYUlrT09BZ2p4aWNpOCtYRzRnS2lCQVkyeGhjM01nUVdabWFXNWxWSEpoYm5ObWIzSnRYRzRnS2lCQVkyOXVjM1J5ZFdOMGIzSmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JoWEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1lseHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR05jYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCa1hHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdkSGhjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMGVWeHVJQ29nUUhObFpTQkJabVpwYm1WVWNtRnVjMlp2Y20wdVkzSmxZWFJsWEc0Z0tpOWNiblpoY2lCQlptWnBibVZVY21GdWMyWnZjbTBnUFNCbWRXNWpkR2x2YmlBb1lTd2dZaXdnWXl3Z1pDd2dkSGdzSUhSNUtTQjdYRzRnSUNBZ2RHaHBjeTVoSUQwZ1lUdGNiaUFnSUNCMGFHbHpMbUlnUFNCaU8xeHVJQ0FnSUhSb2FYTXVZeUE5SUdNN1hHNGdJQ0FnZEdocGN5NWtJRDBnWkR0Y2JpQWdJQ0IwYUdsekxuUjRJRDBnZEhnN1hHNGdJQ0FnZEdocGN5NTBlU0E5SUhSNU8xeHVmVHRjYmx4dUx5b3FYRzRnS2lBaEkyVnVJRU55WldGMFpTQmhJRUZtWm1sdVpWUnlZVzV6Wm05eWJTQnZZbXBsWTNRZ2QybDBhQ0JoYkd3Z1kyOXVkR1Z1ZEhNZ2FXNGdkR2hsSUcxaGRISnBlQzVjYmlBcUlDRWplbWdnNTVTbzVaeW81NStwNlppMTVMaXQ1NXFFNW9tQTVweUo1WWFGNWE2NTVZaWI1YnU2NUxpQTVMaXFJRUZtWm1sdVpWUnlZVzV6Wm05eWJTRGxyN25vc2FIamdJSmNiaUFxSUVCdFpYUm9iMlFnWTNKbFlYUmxYRzRnS2lCQWMzUmhkR2xqWEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1lWeHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR0pjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCalhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdaRnh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhSNFhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdkSGxjYmlBcUlFQnlaWFIxY200Z2UwRm1abWx1WlZSeVlXNXpabTl5YlgxY2JpQXFMMXh1UVdabWFXNWxWSEpoYm5ObWIzSnRMbU55WldGMFpTQTlJR1oxYm1OMGFXOXVJQ2hoTENCaUxDQmpMQ0JrTENCMGVDd2dkSGtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdlMkU2SUdFc0lHSTZJR0lzSUdNNklHTXNJR1E2SUdRc0lIUjRPaUIwZUN3Z2RIazZJSFI1ZlR0Y2JuMDdYRzVjYmk4cUtseHVJQ29nSVNObGJseHVJQ29nUTNKbFlYUmxJR0VnYVdSbGJuUnBkSGtnZEhKaGJuTm1iM0p0WVhScGIyNGdiV0YwY21sNE9pQThZbkl2UGx4dUlDb2dXeUF4TENBd0xDQXdMQ0E4WW5JdlBseHVJQ29nSUNBd0xDQXhMQ0F3SUYxY2JpQXFJQ0VqZW1oY2JpQXFJT1dObGVTOWplZWZxZW1ZdGUrOG1qeGljaTgrWEc0Z0tpQmJJREVzSURBc0lEQXNJRHhpY2k4K1hHNGdLaUFnSURBc0lERXNJREFnWFZ4dUlDcGNiaUFxSUVCdFpYUm9iMlFnYVdSbGJuUnBkSGxjYmlBcUlFQnpkR0YwYVdOY2JpQXFJRUJ5WlhSMWNtNGdlMEZtWm1sdVpWUnlZVzV6Wm05eWJYMWNiaUFxTDF4dVFXWm1hVzVsVkhKaGJuTm1iM0p0TG1sa1pXNTBhWFI1SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCN1lUb2dNUzR3TENCaU9pQXdMakFzSUdNNklEQXVNQ3dnWkRvZ01TNHdMQ0IwZURvZ01DNHdMQ0IwZVRvZ01DNHdmVHRjYm4wN1hHNWNiaThxS2x4dUlDb2dJU05sYmlCRGJHOXVaU0JoSUVGbVptbHVaVlJ5WVc1elptOXliU0J2WW1wbFkzUWdabkp2YlNCMGFHVWdjM0JsWTJsbWFXVmtJSFJ5WVc1elptOXliUzVjYmlBcUlDRWplbWdnNVlXTDZacUc1b3lINWE2YTU1cUVJRUZtWm1sdVpWUnlZVzV6Wm05eWJTRGxyN25vc2FIamdJSmNiaUFxSUVCdFpYUm9iMlFnWTJ4dmJtVmNiaUFxSUVCemRHRjBhV05jYmlBcUlFQndZWEpoYlNCN1FXWm1hVzVsVkhKaGJuTm1iM0p0ZlNCMFhHNGdLaUJBY21WMGRYSnVJSHRCWm1acGJtVlVjbUZ1YzJadmNtMTlYRzRnS2k5Y2JrRm1abWx1WlZSeVlXNXpabTl5YlM1amJHOXVaU0E5SUdaMWJtTjBhVzl1SUNoMEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUh0aE9pQjBMbUVzSUdJNklIUXVZaXdnWXpvZ2RDNWpMQ0JrT2lCMExtUXNJSFI0T2lCMExuUjRMQ0IwZVRvZ2RDNTBlWDA3WEc1OU8xeHVYRzR2S2lwY2JpQXFJQ0VqWlc1Y2JpQXFJRU52Ym1OaGRHVnVZWFJsSUdFZ2RISmhibk5tYjNKdElHMWhkSEpwZUNCMGJ5QmhibTkwYUdWeVhHNGdLaUJVYUdVZ2NtVnpkV3gwY3lCaGNtVWdjbVZtYkdWamRHVmtJR2x1SUhSb1pTQnZkWFFnWVdabWFXNWxJSFJ5WVc1elptOXliVnh1SUNvZ2IzVjBJRDBnZERFZ0tpQjBNbHh1SUNvZ1ZHaHBjeUJtZFc1amRHbHZiaUJwY3lCdFpXMXZjbmtnWm5KbFpTd2dlVzkxSUhOb2IzVnNaQ0JqY21WaGRHVWdkR2hsSUc5MWRIQjFkQ0JoWm1acGJtVWdkSEpoYm5ObWIzSnRJR0o1SUhsdmRYSnpaV3htSUdGdVpDQnRZVzVoWjJVZ2FYUnpJRzFsYlc5eWVTNWNiaUFxSUNFamVtaGNiaUFxSU9hTHZPYU9wZVM0cE9TNHF1ZWZxZW1ZdGUrOGpPV3dodWU3aythZW5PUy9uZVd0bU9XSXNDQnZkWFFnNTUrcDZaaTE0NENDNkwrWjVMaXE1WWU5NXBXdzVMaU41WWliNWJ1NjVMdTc1TDJWNVlhRjVhMlk3N3lNNUwyZzZaeUE2S2FCNVlXSTVZaWI1YnU2SUVGbVptbHVaVlJ5WVc1elptOXliU0Rscjdub3NhSG5sS2ptbmFYbHJaamxncWpudTVQbW5wenZ2SXpsdWJia3Zaemt1THJuckt6a3VJRGt1S3JsajRMbWxiRGt2S0RsaGFYbGg3M21sYkRqZ0lKY2JpQXFJRzkxZENBOUlIUXhJQ29nZERKY2JpQXFJRUJ0WlhSb2IyUWdZMjl1WTJGMFhHNGdLaUJBYzNSaGRHbGpYRzRnS2lCQWNHRnlZVzBnZTBGbVptbHVaVlJ5WVc1elptOXliWDBnYjNWMElFOTFkQ0J2WW1wbFkzUWdkRzhnYzNSdmNtVWdkR2hsSUdOdmJtTmhkQ0J5WlhOMWJIUmNiaUFxSUVCd1lYSmhiU0I3UVdabWFXNWxWSEpoYm5ObWIzSnRmU0IwTVNCVWFHVWdabWx5YzNRZ2RISmhibk5tYjNKdElHOWlhbVZqZEM1Y2JpQXFJRUJ3WVhKaGJTQjdRV1ptYVc1bFZISmhibk5tYjNKdGZTQjBNaUJVYUdVZ2RISmhibk5tYjNKdElHOWlhbVZqZENCMGJ5QmpiMjVqWVhSbGJtRjBaUzVjYmlBcUlFQnlaWFIxY200Z2UwRm1abWx1WlZSeVlXNXpabTl5YlgwZ1QzVjBJRzlpYW1WamRDQjNhWFJvSUhSb1pTQnlaWE4xYkhRZ2IyWWdZMjl1WTJGMFpXNWhkR2x2Ymk1Y2JpQXFMMXh1UVdabWFXNWxWSEpoYm5ObWIzSnRMbU52Ym1OaGRDQTlJR1oxYm1OMGFXOXVJQ2h2ZFhRc0lIUXhMQ0IwTWlrZ2UxeHVJQ0FnSUhaaGNpQmhJRDBnZERFdVlTd2dZaUE5SUhReExtSXNJR01nUFNCME1TNWpMQ0JrSUQwZ2RERXVaQ3dnZEhnZ1BTQjBNUzUwZUN3Z2RIa2dQU0IwTVM1MGVUdGNiaUFnSUNCdmRYUXVZU0E5SUdFZ0tpQjBNaTVoSUNzZ1lpQXFJSFF5TG1NN1hHNGdJQ0FnYjNWMExtSWdQU0JoSUNvZ2RESXVZaUFySUdJZ0tpQjBNaTVrTzF4dUlDQWdJRzkxZEM1aklEMGdZeUFxSUhReUxtRWdLeUJrSUNvZ2RESXVZenRjYmlBZ0lDQnZkWFF1WkNBOUlHTWdLaUIwTWk1aUlDc2daQ0FxSUhReUxtUTdYRzRnSUNBZ2IzVjBMblI0SUQwZ2RIZ2dLaUIwTWk1aElDc2dkSGtnS2lCME1pNWpJQ3NnZERJdWRIZzdYRzRnSUNBZ2IzVjBMblI1SUQwZ2RIZ2dLaUIwTWk1aUlDc2dkSGtnS2lCME1pNWtJQ3NnZERJdWRIazdYRzRnSUNBZ2NtVjBkWEp1SUc5MWREdGNibjA3WEc1Y2JpOHFLbHh1SUNvZ0lTTmxiaUJIWlhRZ2RHaGxJR2x1ZG1WeWRDQjBjbUZ1YzJadmNtMGdiMllnWVc0Z1FXWm1hVzVsVkhKaGJuTm1iM0p0SUc5aWFtVmpkQzVjYmlBcUlGUm9hWE1nWm5WdVkzUnBiMjRnYVhNZ2JXVnRiM0o1SUdaeVpXVXNJSGx2ZFNCemFHOTFiR1FnWTNKbFlYUmxJSFJvWlNCdmRYUndkWFFnWVdabWFXNWxJSFJ5WVc1elptOXliU0JpZVNCNWIzVnljMlZzWmlCaGJtUWdiV0Z1WVdkbElHbDBjeUJ0WlcxdmNua3VYRzRnS2lBaEkzcG9JT2F4Z3VtQWh1ZWZxZW1ZdGVPQWd1aS9tZVM0cXVXSHZlYVZzT1M0amVXSW0rVzd1dVM3dStTOWxlV0doZVd0bU8rOGpPUzlvT21jZ09pbWdlV0ZpT1dJbStXN3VpQkJabVpwYm1WVWNtRnVjMlp2Y20wZzVhKzU2TEdoNTVTbzVwMmw1YTJZNVlLbzU3dVQ1cDZjNzd5TTVibTI1TDJjNUxpNjU2eXM1TGlBNUxpcTVZK0M1cFd3NUx5ZzVZV2w1WWU5NXBXdzQ0Q0NYRzRnS2lCQWJXVjBhRzlrSUdsdWRtVnlkRnh1SUNvZ1FITjBZWFJwWTF4dUlDb2dRSEJoY21GdElIdEJabVpwYm1WVWNtRnVjMlp2Y20xOUlHOTFkRnh1SUNvZ1FIQmhjbUZ0SUh0QlptWnBibVZVY21GdWMyWnZjbTE5SUhSY2JpQXFJRUJ5WlhSMWNtNGdlMEZtWm1sdVpWUnlZVzV6Wm05eWJYMGdUM1YwSUc5aWFtVmpkQ0IzYVhSb0lHbHVkbVZ5ZEdWa0lISmxjM1ZzZEM1Y2JpQXFMMXh1UVdabWFXNWxWSEpoYm5ObWIzSnRMbWx1ZG1WeWRDQTlJR1oxYm1OMGFXOXVJQ2h2ZFhRc0lIUXBJSHRjYmlBZ0lDQjJZWElnWVNBOUlIUXVZU3dnWWlBOUlIUXVZaXdnWXlBOUlIUXVZeXdnWkNBOUlIUXVaRHRjYmlBZ0lDQjJZWElnWkdWMFpYSnRhVzVoYm5RZ1BTQXhJQzhnS0dFZ0tpQmtJQzBnWWlBcUlHTXBPMXh1SUNBZ0lIWmhjaUIwZUNBOUlIUXVkSGdzSUhSNUlEMGdkQzUwZVR0Y2JpQWdJQ0J2ZFhRdVlTQTlJR1JsZEdWeWJXbHVZVzUwSUNvZ1pEdGNiaUFnSUNCdmRYUXVZaUE5SUMxa1pYUmxjbTFwYm1GdWRDQXFJR0k3WEc0Z0lDQWdiM1YwTG1NZ1BTQXRaR1YwWlhKdGFXNWhiblFnS2lCak8xeHVJQ0FnSUc5MWRDNWtJRDBnWkdWMFpYSnRhVzVoYm5RZ0tpQmhPMXh1SUNBZ0lHOTFkQzUwZUNBOUlHUmxkR1Z5YldsdVlXNTBJQ29nS0dNZ0tpQjBlU0F0SUdRZ0tpQjBlQ2s3WEc0Z0lDQWdiM1YwTG5SNUlEMGdaR1YwWlhKdGFXNWhiblFnS2lBb1lpQXFJSFI0SUMwZ1lTQXFJSFI1S1R0Y2JpQWdJQ0J5WlhSMWNtNGdiM1YwTzF4dWZUdGNibHh1THlvcVhHNGdLaUFoSTJWdUlFZGxkQ0JoYmlCQlptWnBibVZVY21GdWMyWnZjbTBnYjJKcVpXTjBJR1p5YjIwZ1lTQm5hWFpsYmlCdFlYUnlhWGdnTkhnMExseHVJQ29nVkdocGN5Qm1kVzVqZEdsdmJpQnBjeUJ0WlcxdmNua2dabkpsWlN3Z2VXOTFJSE5vYjNWc1pDQmpjbVZoZEdVZ2RHaGxJRzkxZEhCMWRDQmhabVpwYm1VZ2RISmhibk5tYjNKdElHSjVJSGx2ZFhKelpXeG1JR0Z1WkNCdFlXNWhaMlVnYVhSeklHMWxiVzl5ZVM1Y2JpQXFJQ0VqZW1nZzVMdU81TGlBNUxpcUlEUjROQ0JOWVhSeWFYZ2c2STYzNVkrV0lFRm1abWx1WlZSeVlXNXpabTl5YlNEbHI3bm9zYUhqZ0lMb3Y1bmt1S3JsaDczbWxiRGt1STNsaUp2bHU3cmt1N3ZrdlpYbGhvWGxyWmp2dkl6a3ZhRHBuSURvcG9IbGhZamxpSnZsdTdvZ1FXWm1hVzVsVkhKaGJuTm1iM0p0SU9XdnVlaXhvZWVVcU9hZHBlV3RtT1dDcU9lN2srYWVuTys4ak9XNXR1UzluT1M0dXVlc3JPUzRnT1M0cXVXUGd1YVZzT1M4b09XRnBlV0h2ZWFWc09PQWdseHVJQ29nUUcxbGRHaHZaQ0JwYm5abGNuUmNiaUFxSUVCemRHRjBhV05jYmlBcUlFQndZWEpoYlNCN1FXWm1hVzVsVkhKaGJuTm1iM0p0ZlNCdmRYUmNiaUFxSUVCd1lYSmhiU0I3VFdGME5IMGdiV0YwWEc0Z0tpQkFjbVYwZFhKdUlIdEJabVpwYm1WVWNtRnVjMlp2Y20xOUlFOTFkQ0J2WW1wbFkzUWdkMmwwYUNCcGJuWmxjblJsWkNCeVpYTjFiSFF1WEc0Z0tpOWNia0ZtWm1sdVpWUnlZVzV6Wm05eWJTNW1jbTl0VFdGME5DQTlJR1oxYm1OMGFXOXVJQ2h2ZFhRc0lHMWhkQ2tnZTF4dUlDQWdJRzkxZEM1aElEMGdiV0YwTG0wd01EdGNiaUFnSUNCdmRYUXVZaUE5SUcxaGRDNXRNREU3WEc0Z0lDQWdiM1YwTG1NZ1BTQnRZWFF1YlRBME8xeHVJQ0FnSUc5MWRDNWtJRDBnYldGMExtMHdOVHRjYmlBZ0lDQnZkWFF1ZEhnZ1BTQnRZWFF1YlRFeU8xeHVJQ0FnSUc5MWRDNTBlU0E5SUcxaGRDNXRNVE03WEc0Z0lDQWdjbVYwZFhKdUlHOTFkRHRjYm4wN1hHNWNiaThxS2x4dUlDb2dJU05sYmlCQmNIQnNlU0IwYUdVZ1lXWm1hVzVsSUhSeVlXNXpabTl5YldGMGFXOXVJRzl1SUdFZ2NHOXBiblF1WEc0Z0tpQlVhR2x6SUdaMWJtTjBhVzl1SUdseklHMWxiVzl5ZVNCbWNtVmxMQ0I1YjNVZ2MyaHZkV3hrSUdOeVpXRjBaU0IwYUdVZ2IzVjBjSFYwSUZabFl6SWdZbmtnZVc5MWNuTmxiR1lnWVc1a0lHMWhibUZuWlNCcGRITWdiV1Z0YjNKNUxseHVJQ29nSVNONmFDRGxyN25rdUlEa3VLcm5ncm5sdXBUbmxLam5uNm5wbUxYbGo1am1qYUxqZ0lMb3Y1bmt1S3JsaDczbWxiRGt1STNsaUp2bHU3cmt1N3ZrdlpYbGhvWGxyWmp2dkl6a3ZhRHBuSURvcG9IbGhZamxpSnZsdTdya3VJRGt1S29nVm1Wak1pRGxyN25vc2FIbmxLam1uYVhsclpqbGdxam51NVBtbnB6dnZJemx1YmJrdlp6a3VMcm5yS3prdUlEa3VLcmxqNExtbGJEa3ZLRGxoYVhsaDczbWxiRGpnSUpjYmlBcUlFQnRaWFJvYjJRZ2RISmhibk5tYjNKdFZtVmpNbHh1SUNvZ1FITjBZWFJwWTF4dUlDb2dRSEJoY21GdElIdFdaV015ZlNCdmRYUWdWR2hsSUc5MWRIQjFkQ0J3YjJsdWRDQjBieUJ6ZEc5eVpTQjBhR1VnY21WemRXeDBYRzRnS2lCQWNHRnlZVzBnZTFabFl6SjhUblZ0WW1WeWZTQndiMmx1ZENCUWIybHVkQ0IwYnlCaGNIQnNlU0IwY21GdWMyWnZjbTBnYjNJZ2VDNWNiaUFxSUVCd1lYSmhiU0I3UVdabWFXNWxWSEpoYm5ObWIzSnRmRTUxYldKbGNuMGdkSEpoYm5OUGNsa2dkSEpoYm5ObWIzSnRJRzFoZEhKcGVDQnZjaUI1TGx4dUlDb2dRSEJoY21GdElIdEJabVpwYm1WVWNtRnVjMlp2Y20xOUlGdDBYU0IwY21GdWMyWnZjbTBnYldGMGNtbDRMbHh1SUNvZ1FISmxkSFZ5YmlCN1ZtVmpNbjFjYmlBcUwxeHVRV1ptYVc1bFZISmhibk5tYjNKdExuUnlZVzV6Wm05eWJWWmxZeklnUFNCbWRXNWpkR2x2YmlBb2IzVjBMQ0J3YjJsdWRDd2dkSEpoYm5OUGNsa3NJSFFwSUh0Y2JpQWdJQ0IyWVhJZ2VDd2dlVHRjYmlBZ0lDQnBaaUFvZENBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUhRZ1BTQjBjbUZ1YzA5eVdUdGNiaUFnSUNBZ0lDQWdlQ0E5SUhCdmFXNTBMbmc3WEc0Z0lDQWdJQ0FnSUhrZ1BTQndiMmx1ZEM1NU8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhnZ1BTQndiMmx1ZER0Y2JpQWdJQ0FnSUNBZ2VTQTlJSFJ5WVc1elQzSlpPMXh1SUNBZ0lIMWNiaUFnSUNCdmRYUXVlQ0E5SUhRdVlTQXFJSGdnS3lCMExtTWdLaUI1SUNzZ2RDNTBlRHRjYmlBZ0lDQnZkWFF1ZVNBOUlIUXVZaUFxSUhnZ0t5QjBMbVFnS2lCNUlDc2dkQzUwZVR0Y2JpQWdJQ0J5WlhSMWNtNGdiM1YwTzF4dWZUdGNibHh1THlvcVhHNGdLaUFoSTJWdUlFRndjR3g1SUhSb1pTQmhabVpwYm1VZ2RISmhibk5tYjNKdFlYUnBiMjRnYjI0Z1lTQnphWHBsTGx4dUlDb2dWR2hwY3lCbWRXNWpkR2x2YmlCcGN5QnRaVzF2Y25rZ1puSmxaU3dnZVc5MUlITm9iM1ZzWkNCamNtVmhkR1VnZEdobElHOTFkSEIxZENCVGFYcGxJR0o1SUhsdmRYSnpaV3htSUdGdVpDQnRZVzVoWjJVZ2FYUnpJRzFsYlc5eWVTNWNiaUFxSUNFamVtZ2c1YnFVNTVTbzVMdS81YkNFNVkrWTVvMmk1NStwNlppMTVZaXdJRk5wZW1VZzVMaUs0NENDNkwrWjVMaXE1WWU5NXBXdzVMaU41WWliNWJ1NjVMdTc1TDJWNVlhRjVhMlk3N3lNNUwyZzZaeUE2S2FCNVlXSTVZaWI1YnU2NUxpQTVMaXFJRk5wZW1VZzVhKzU2TEdoNTVTbzVwMmw1YTJZNVlLbzU3dVQ1cDZjNzd5TTVibTI1TDJjNUxpNjU2eXM1TGlBNUxpcTVZK0M1cFd3NUx5ZzVZV2w1WWU5NXBXdzQ0Q0NYRzRnS2lCQWJXVjBhRzlrSUhSeVlXNXpabTl5YlZOcGVtVmNiaUFxSUVCemRHRjBhV05jYmlBcUlFQndZWEpoYlNCN1UybDZaWDBnYjNWMElGUm9aU0J2ZFhSd2RYUWdjRzlwYm5RZ2RHOGdjM1J2Y21VZ2RHaGxJSEpsYzNWc2RGeHVJQ29nUUhCaGNtRnRJSHRUYVhwbGZTQnphWHBsWEc0Z0tpQkFjR0Z5WVcwZ2UwRm1abWx1WlZSeVlXNXpabTl5YlgwZ2RGeHVJQ29nUUhKbGRIVnliaUI3VTJsNlpYMWNiaUFxTDF4dVFXWm1hVzVsVkhKaGJuTm1iM0p0TG5SeVlXNXpabTl5YlZOcGVtVWdQU0JtZFc1amRHbHZiaUFvYjNWMExDQnphWHBsTENCMEtTQjdYRzRnSUNBZ2IzVjBMbmRwWkhSb0lEMGdkQzVoSUNvZ2MybDZaUzUzYVdSMGFDQXJJSFF1WXlBcUlITnBlbVV1YUdWcFoyaDBPMXh1SUNBZ0lHOTFkQzVvWldsbmFIUWdQU0IwTG1JZ0tpQnphWHBsTG5kcFpIUm9JQ3NnZEM1a0lDb2djMmw2WlM1b1pXbG5hSFE3WEc0Z0lDQWdjbVYwZFhKdUlHOTFkRHRjYm4wN1hHNWNiaThxS2x4dUlDb2dJU05sYmlCQmNIQnNlU0IwYUdVZ1lXWm1hVzVsSUhSeVlXNXpabTl5YldGMGFXOXVJRzl1SUdFZ2NtVmpkQzVjYmlBcUlGUm9hWE1nWm5WdVkzUnBiMjRnYVhNZ2JXVnRiM0o1SUdaeVpXVXNJSGx2ZFNCemFHOTFiR1FnWTNKbFlYUmxJSFJvWlNCdmRYUndkWFFnVW1WamRDQmllU0I1YjNWeWMyVnNaaUJoYm1RZ2JXRnVZV2RsSUdsMGN5QnRaVzF2Y25rdVhHNGdLaUFoSTNwb0lPVzZsT2VVcU9TN3YrV3doT1dQbU9hTm91ZWZxZW1ZdGVXSXNDQlNaV04wSU9TNGl1T0FndWkvbWVTNHF1V0h2ZWFWc09TNGplV0ltK1c3dXVTN3UrUzlsZVdHaGVXdG1PKzhqT1M5b09tY2dPaW1nZVdGaU9XSW0rVzd1dVM0Z09TNHFpQlNaV04wSU9XdnVlaXhvZWVVcU9hZHBlV3RtT1dDcU9lN2srYWVuTys4ak9XNXR1UzluT1M0dXVlc3JPUzRnT1M0cXVXUGd1YVZzT1M4b09XRnBlV0h2ZWFWc09PQWdseHVJQ29nUUcxbGRHaHZaQ0IwY21GdWMyWnZjbTFTWldOMFhHNGdLaUJBYzNSaGRHbGpYRzRnS2lCQWNHRnlZVzBnZTFKbFkzUjlJRzkxZEZ4dUlDb2dRSEJoY21GdElIdFNaV04wZlNCeVpXTjBYRzRnS2lCQWNHRnlZVzBnZTBGbVptbHVaVlJ5WVc1elptOXliWDBnWVc1QlptWnBibVZVY21GdWMyWnZjbTFjYmlBcUlFQnlaWFIxY200Z2UxSmxZM1I5WEc0Z0tpOWNia0ZtWm1sdVpWUnlZVzV6Wm05eWJTNTBjbUZ1YzJadmNtMVNaV04wSUQwZ1puVnVZM1JwYjI0b2IzVjBMQ0J5WldOMExDQjBLWHRjYmlBZ0lDQjJZWElnYjJ3Z1BTQnlaV04wTG5nN1hHNGdJQ0FnZG1GeUlHOWlJRDBnY21WamRDNTVPMXh1SUNBZ0lIWmhjaUJ2Y2lBOUlHOXNJQ3NnY21WamRDNTNhV1IwYUR0Y2JpQWdJQ0IyWVhJZ2IzUWdQU0J2WWlBcklISmxZM1F1YUdWcFoyaDBPMXh1SUNBZ0lIWmhjaUJzWW5nZ1BTQjBMbUVnS2lCdmJDQXJJSFF1WXlBcUlHOWlJQ3NnZEM1MGVEdGNiaUFnSUNCMllYSWdiR0o1SUQwZ2RDNWlJQ29nYjJ3Z0t5QjBMbVFnS2lCdllpQXJJSFF1ZEhrN1hHNGdJQ0FnZG1GeUlISmllQ0E5SUhRdVlTQXFJRzl5SUNzZ2RDNWpJQ29nYjJJZ0t5QjBMblI0TzF4dUlDQWdJSFpoY2lCeVlua2dQU0IwTG1JZ0tpQnZjaUFySUhRdVpDQXFJRzlpSUNzZ2RDNTBlVHRjYmlBZ0lDQjJZWElnYkhSNElEMGdkQzVoSUNvZ2Iyd2dLeUIwTG1NZ0tpQnZkQ0FySUhRdWRIZzdYRzRnSUNBZ2RtRnlJR3gwZVNBOUlIUXVZaUFxSUc5c0lDc2dkQzVrSUNvZ2IzUWdLeUIwTG5SNU8xeHVJQ0FnSUhaaGNpQnlkSGdnUFNCMExtRWdLaUJ2Y2lBcklIUXVZeUFxSUc5MElDc2dkQzUwZUR0Y2JpQWdJQ0IyWVhJZ2NuUjVJRDBnZEM1aUlDb2diM0lnS3lCMExtUWdLaUJ2ZENBcklIUXVkSGs3WEc1Y2JpQWdJQ0IyWVhJZ2JXbHVXQ0E5SUUxaGRHZ3ViV2x1S0d4aWVDd2djbUo0TENCc2RIZ3NJSEowZUNrN1hHNGdJQ0FnZG1GeUlHMWhlRmdnUFNCTllYUm9MbTFoZUNoc1luZ3NJSEppZUN3Z2JIUjRMQ0J5ZEhncE8xeHVJQ0FnSUhaaGNpQnRhVzVaSUQwZ1RXRjBhQzV0YVc0b2JHSjVMQ0J5WW5rc0lHeDBlU3dnY25SNUtUdGNiaUFnSUNCMllYSWdiV0Y0V1NBOUlFMWhkR2d1YldGNEtHeGllU3dnY21KNUxDQnNkSGtzSUhKMGVTazdYRzVjYmlBZ0lDQnZkWFF1ZUNBOUlHMXBibGc3WEc0Z0lDQWdiM1YwTG5rZ1BTQnRhVzVaTzF4dUlDQWdJRzkxZEM1M2FXUjBhQ0E5SUcxaGVGZ2dMU0J0YVc1WU8xeHVJQ0FnSUc5MWRDNW9aV2xuYUhRZ1BTQnRZWGhaSUMwZ2JXbHVXVHRjYmlBZ0lDQnlaWFIxY200Z2IzVjBPMXh1ZlR0Y2JseHVMeW9xWEc0Z0tpQWhJMlZ1SUVGd2NHeDVJSFJvWlNCaFptWnBibVVnZEhKaGJuTm1iM0p0WVhScGIyNGdiMjRnWVNCeVpXTjBMQ0JoYm1RZ2RISjFibk1nZEc4Z1lXNGdUM0pwWlc1MFpXUWdRbTkxYm1ScGJtY2dRbTk0TGx4dUlDb2dWR2hwY3lCbWRXNWpkR2x2YmlCcGN5QnRaVzF2Y25rZ1puSmxaU3dnZVc5MUlITm9iM1ZzWkNCamNtVmhkR1VnZEdobElHOTFkSEIxZENCMlpXTjBiM0p6SUdKNUlIbHZkWEp6Wld4bUlHRnVaQ0J0WVc1aFoyVWdkR2hsYVhJZ2JXVnRiM0o1TGx4dUlDb2dJU042YUNEbHVwVG5sS2prdTcvbHNJVGxqNWptamFMbm42bnBtTFhsaUxBZ1VtVmpkQ0RrdUlvc0lPVzV0dWk5ck9hTm91UzR1dWFjaWVXUWtlV01oZVdidE9lYmt1T0FndWkvbWVTNHF1V0h2ZWFWc09TNGplV0ltK1c3dXVTN3UrUzlsZVdHaGVXdG1PKzhqT1M5b09tY2dPaW1nZVdGaU9XSW0rVzd1dVdNaGVXYnRPZWJrdWVhaE9XYm0rUzRxaUJXWldOMGIzSWc1YSs1NkxHaDU1U281cDJsNWEyWTVZS281N3VUNXA2Yzc3eU01Ym0yNUwyYzVMaTY1WW1ONVp1YjVMaXE1WStDNXBXdzVMeWc1WVdsNVllOTVwV3c0NENDWEc0Z0tpQkFiV1YwYUc5a0lIUnlZVzV6Wm05eWJVOWlZbHh1SUNvZ1FITjBZWFJwWTF4dUlDb2dRSEJoY21GdElIdFdaV015ZlNCdmRYUmZZbXhjYmlBcUlFQndZWEpoYlNCN1ZtVmpNbjBnYjNWMFgzUnNYRzRnS2lCQWNHRnlZVzBnZTFabFl6SjlJRzkxZEY5MGNseHVJQ29nUUhCaGNtRnRJSHRXWldNeWZTQnZkWFJmWW5KY2JpQXFJRUJ3WVhKaGJTQjdVbVZqZEgwZ2NtVmpkRnh1SUNvZ1FIQmhjbUZ0SUh0QlptWnBibVZVY21GdWMyWnZjbTE5SUdGdVFXWm1hVzVsVkhKaGJuTm1iM0p0WEc0Z0tpOWNia0ZtWm1sdVpWUnlZVzV6Wm05eWJTNTBjbUZ1YzJadmNtMVBZbUlnUFNCbWRXNWpkR2x2YmlBb2IzVjBYMkpzTENCdmRYUmZkR3dzSUc5MWRGOTBjaXdnYjNWMFgySnlMQ0J5WldOMExDQmhia0ZtWm1sdVpWUnlZVzV6Wm05eWJTa2dlMXh1SUNBZ0lIWmhjaUI0SUQwZ2NtVmpkQzU0TzF4dUlDQWdJSFpoY2lCNUlEMGdjbVZqZEM1NU8xeHVJQ0FnSUhaaGNpQjNhV1IwYUNBOUlISmxZM1F1ZDJsa2RHZzdYRzRnSUNBZ2RtRnlJR2hsYVdkb2RDQTlJSEpsWTNRdWFHVnBaMmgwTzF4dVhHNGdJQ0FnZG1GeUlIUjRJRDBnWVc1QlptWnBibVZVY21GdWMyWnZjbTB1WVNBcUlIZ2dLeUJoYmtGbVptbHVaVlJ5WVc1elptOXliUzVqSUNvZ2VTQXJJR0Z1UVdabWFXNWxWSEpoYm5ObWIzSnRMblI0TzF4dUlDQWdJSFpoY2lCMGVTQTlJR0Z1UVdabWFXNWxWSEpoYm5ObWIzSnRMbUlnS2lCNElDc2dZVzVCWm1acGJtVlVjbUZ1YzJadmNtMHVaQ0FxSUhrZ0t5Qmhia0ZtWm1sdVpWUnlZVzV6Wm05eWJTNTBlVHRjYmlBZ0lDQjJZWElnZUdFZ1BTQmhia0ZtWm1sdVpWUnlZVzV6Wm05eWJTNWhJQ29nZDJsa2RHZzdYRzRnSUNBZ2RtRnlJSGhpSUQwZ1lXNUJabVpwYm1WVWNtRnVjMlp2Y20wdVlpQXFJSGRwWkhSb08xeHVJQ0FnSUhaaGNpQjVZeUE5SUdGdVFXWm1hVzVsVkhKaGJuTm1iM0p0TG1NZ0tpQm9aV2xuYUhRN1hHNGdJQ0FnZG1GeUlIbGtJRDBnWVc1QlptWnBibVZVY21GdWMyWnZjbTB1WkNBcUlHaGxhV2RvZER0Y2JseHVJQ0FnSUc5MWRGOTBiQzU0SUQwZ2RIZzdYRzRnSUNBZ2IzVjBYM1JzTG5rZ1BTQjBlVHRjYmlBZ0lDQnZkWFJmZEhJdWVDQTlJSGhoSUNzZ2RIZzdYRzRnSUNBZ2IzVjBYM1J5TG5rZ1BTQjRZaUFySUhSNU8xeHVJQ0FnSUc5MWRGOWliQzU0SUQwZ2VXTWdLeUIwZUR0Y2JpQWdJQ0J2ZFhSZlltd3VlU0E5SUhsa0lDc2dkSGs3WEc0Z0lDQWdiM1YwWDJKeUxuZ2dQU0I0WVNBcklIbGpJQ3NnZEhnN1hHNGdJQ0FnYjNWMFgySnlMbmtnUFNCNFlpQXJJSGxrSUNzZ2RIazdYRzU5TzF4dVhHNWpZeTVCWm1acGJtVlVjbUZ1YzJadmNtMGdQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRUZtWm1sdVpWUnlZVzV6Wm05eWJUc2lYWDA9Il19