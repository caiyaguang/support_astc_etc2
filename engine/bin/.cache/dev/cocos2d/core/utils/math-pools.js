(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/math-pools.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('../vmath');
        var js = require('../platform/js');
        var mat4Pool = new js.Pool(128);
        mat4Pool.get = function () {
            var matrix = this._get();
            if (matrix) {
                _vmath.mat4.identity(matrix);
            } else {
                matrix = _vmath.mat4.create();
            }
            return matrix;
        };
        var quatPool = new js.Pool(64);
        quatPool.get = function () {
            var q = this._get();
            if (q) {
                q.x = q.y = q.z = 0;
                q.w = 1;
            } else {
                q = _vmath.quat.create();
            }
            return q;
        };
        module.exports = {
            mat4: mat4Pool,
            quat: quatPool
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,