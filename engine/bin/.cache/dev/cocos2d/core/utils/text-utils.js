(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/text-utils.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _BASELINE_RATIO = 0.26;
        if (CC_RUNTIME) {
            _BASELINE_RATIO = 0;
        }
        var textUtils = {
            BASELINE_RATIO: _BASELINE_RATIO,
            MIDDLE_RATIO: (_BASELINE_RATIO + 1) / 2 - _BASELINE_RATIO,
            label_wordRex: /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûа-яА-ЯЁё]+|\S)/,
            label_symbolRex: /^[!,.:;'}\]%\?>、‘“》？。，！]/,
            label_lastWordRex: /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]+|\S)$/,
            label_lastEnglish: /[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]+$/,
            label_firstEnglish: /^[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁё]/,
            label_firstEmoji: /^[\uD83C\uDF00-\uDFFF\uDC00-\uDE4F]/,
            label_lastEmoji: /([\uDF00-\uDFFF\uDC00-\uDE4F]+|\S)$/,
            label_wrapinspection: true,
            __CHINESE_REG: /^[\u4E00-\u9FFF\u3400-\u4DFF]+$/,
            __JAPANESE_REG: /[\u3000-\u303F]|[\u3040-\u309F]|[\u30A0-\u30FF]|[\uFF00-\uFFEF]|[\u4E00-\u9FAF]|[\u2605-\u2606]|[\u2190-\u2195]|\u203B/g,
            __KOREAN_REG: /^[\u1100-\u11FF]|[\u3130-\u318F]|[\uA960-\uA97F]|[\uAC00-\uD7AF]|[\uD7B0-\uD7FF]+$/,
            isUnicodeCJK: function isUnicodeCJK(ch) {
                return this.__CHINESE_REG.test(ch) || this.__JAPANESE_REG.test(ch) || this.__KOREAN_REG.test(ch);
            },
            isUnicodeSpace: function isUnicodeSpace(ch) {
                ch = ch.charCodeAt(0);
                return ch >= 9 && ch <= 13 || ch === 32 || ch === 133 || ch === 160 || ch === 5760 || ch >= 8192 && ch <= 8202 || ch === 8232 || ch === 8233 || ch === 8239 || ch === 8287 || ch === 12288;
            },
            safeMeasureText: function safeMeasureText(ctx, string) {
                var metric = ctx.measureText(string);
                return metric && metric.width || 0;
            },
            fragmentText: function fragmentText(stringToken, allWidth, maxWidth, measureText) {
                var wrappedWords = [];
                if (stringToken.length === 0 || maxWidth < 0) {
                    wrappedWords.push('');
                    return wrappedWords;
                }
                var text = stringToken;
                while (allWidth > maxWidth && text.length > 1) {
                    var fuzzyLen = text.length * (maxWidth / allWidth) | 0;
                    var tmpText = text.substring(fuzzyLen);
                    var width = allWidth - measureText(tmpText);
                    var sLine = tmpText;
                    var pushNum = 0;
                    var checkWhile = 0;
                    var checkCount = 10;
                    while (width > maxWidth && checkWhile++ < checkCount) {
                        fuzzyLen *= maxWidth / width;
                        fuzzyLen = fuzzyLen | 0;
                        tmpText = text.substring(fuzzyLen);
                        width = allWidth - measureText(tmpText);
                    }
                    checkWhile = 0;
                    while (width <= maxWidth && checkWhile++ < checkCount) {
                        if (tmpText) {
                            var exec = this.label_wordRex.exec(tmpText);
                            pushNum = exec ? exec[0].length : 1;
                            sLine = tmpText;
                        }
                        fuzzyLen = fuzzyLen + pushNum;
                        tmpText = text.substring(fuzzyLen);
                        width = allWidth - measureText(tmpText);
                    }
                    fuzzyLen -= pushNum;
                    if (fuzzyLen === 0) {
                        fuzzyLen = 1;
                        sLine = sLine.substring(1);
                    }
                    var sText = text.substring(0, 0 + fuzzyLen), result;
                    if (this.label_wrapinspection) {
                        if (this.label_symbolRex.test(sLine || tmpText)) {
                            result = this.label_lastWordRex.exec(sText);
                            fuzzyLen -= result ? result[0].length : 0;
                            if (fuzzyLen === 0)
                                fuzzyLen = 1;
                            sLine = text.substring(fuzzyLen);
                            sText = text.substring(0, 0 + fuzzyLen);
                        }
                    }
                    if (this.label_firstEmoji.test(sLine)) {
                        result = this.label_lastEmoji.exec(sText);
                        if (result && sText !== result[0]) {
                            fuzzyLen -= result[0].length;
                            sLine = text.substring(fuzzyLen);
                            sText = text.substring(0, 0 + fuzzyLen);
                        }
                    }
                    if (this.label_firstEnglish.test(sLine)) {
                        result = this.label_lastEnglish.exec(sText);
                        if (result && sText !== result[0]) {
                            fuzzyLen -= result[0].length;
                            sLine = text.substring(fuzzyLen);
                            sText = text.substring(0, 0 + fuzzyLen);
                        }
                    }
                    if (wrappedWords.length === 0) {
                        wrappedWords.push(sText);
                    } else {
                        sText = sText.trimLeft();
                        if (sText.length > 0) {
                            wrappedWords.push(sText);
                        }
                    }
                    text = sLine || tmpText;
                    allWidth = measureText(text);
                }
                if (wrappedWords.length === 0) {
                    wrappedWords.push(text);
                } else {
                    text = text.trimLeft();
                    if (text.length > 0) {
                        wrappedWords.push(text);
                    }
                }
                return wrappedWords;
            }
        };
        module.exports = textUtils;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,