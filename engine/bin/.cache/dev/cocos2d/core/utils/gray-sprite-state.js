(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/gray-sprite-state.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Material = require('../assets/material/CCMaterial');
        function GraySpriteState() {
            this._graySpriteMaterial = null;
            this._spriteMaterial = null;
        }
        GraySpriteState.prototype._switchGrayMaterial = function (useGrayMaterial, renderComp) {
            if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                return;
            }
            var material = void 0;
            if (useGrayMaterial) {
                material = this._graySpriteMaterial;
                if (!material) {
                    material = Material.getBuiltinMaterial('2d-gray-sprite');
                }
                material = this._graySpriteMaterial = Material.getInstantiatedMaterial(material, renderComp);
            } else {
                material = this._spriteMaterial;
                if (!material) {
                    material = Material.getBuiltinMaterial('2d-sprite', renderComp);
                }
                material = this._spriteMaterial = Material.getInstantiatedMaterial(material, renderComp);
            }
            renderComp.setMaterial(0, material);
        };
        module.exports = GraySpriteState;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,