(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/base-node.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Flags = require('../platform/CCObject').Flags;
        var misc = require('./misc');
        var js = require('../platform/js');
        var IdGenerater = require('../platform/id-generater');
        var eventManager = require('../event-manager');
        var RenderFlow = require('../renderer/render-flow');
        var Destroying = Flags.Destroying;
        var DontDestroy = Flags.DontDestroy;
        var Deactivating = Flags.Deactivating;
        var CHILD_ADDED = 'child-added';
        var CHILD_REMOVED = 'child-removed';
        var idGenerater = new IdGenerater('Node');
        function getConstructor(typeOrClassName) {
            if (!typeOrClassName) {
                cc.errorID(3804);
                return null;
            }
            if (typeof typeOrClassName === 'string') {
                return js.getClassByName(typeOrClassName);
            }
            return typeOrClassName;
        }
        function findComponent(node, constructor) {
            if (constructor._sealed) {
                for (var i = 0; i < node._components.length; ++i) {
                    var comp = node._components[i];
                    if (comp.constructor === constructor) {
                        return comp;
                    }
                }
            } else {
                for (var _i = 0; _i < node._components.length; ++_i) {
                    var _comp = node._components[_i];
                    if (_comp instanceof constructor) {
                        return _comp;
                    }
                }
            }
            return null;
        }
        function findComponents(node, constructor, components) {
            if (constructor._sealed) {
                for (var i = 0; i < node._components.length; ++i) {
                    var comp = node._components[i];
                    if (comp.constructor === constructor) {
                        components.push(comp);
                    }
                }
            } else {
                for (var _i2 = 0; _i2 < node._components.length; ++_i2) {
                    var _comp2 = node._components[_i2];
                    if (_comp2 instanceof constructor) {
                        components.push(_comp2);
                    }
                }
            }
        }
        function findChildComponent(children, constructor) {
            for (var i = 0; i < children.length; ++i) {
                var node = children[i];
                var comp = findComponent(node, constructor);
                if (comp) {
                    return comp;
                } else if (node._children.length > 0) {
                    comp = findChildComponent(node._children, constructor);
                    if (comp) {
                        return comp;
                    }
                }
            }
            return null;
        }
        function findChildComponents(children, constructor, components) {
            for (var i = 0; i < children.length; ++i) {
                var node = children[i];
                findComponents(node, constructor, components);
                if (node._children.length > 0) {
                    findChildComponents(node._children, constructor, components);
                }
            }
        }
        var BaseNode = cc.Class({
            name: 'cc._BaseNode',
            extends: cc.Object,
            properties: {
                _parent: null,
                _children: [],
                _active: true,
                _level: 0,
                _components: [],
                _prefab: null,
                _persistNode: {
                    get: function get() {
                        return (this._objFlags & DontDestroy) > 0;
                    },
                    set: function set(value) {
                        if (value) {
                            this._objFlags |= DontDestroy;
                        } else {
                            this._objFlags &= ~DontDestroy;
                        }
                    }
                },
                name: {
                    get: function get() {
                        return this._name;
                    },
                    set: function set(value) {
                        if (CC_DEV && value.indexOf('/') !== -1) {
                            cc.errorID(1632);
                            return;
                        }
                        this._name = value;
                    }
                },
                uuid: {
                    get: function get() {
                        return this._id;
                    }
                },
                children: {
                    get: function get() {
                        return this._children;
                    }
                },
                childrenCount: {
                    get: function get() {
                        return this._children.length;
                    }
                },
                active: {
                    get: function get() {
                        return this._active;
                    },
                    set: function set(value) {
                        value = !!value;
                        if (this._active !== value) {
                            this._active = value;
                            var parent = this._parent;
                            if (parent) {
                                var couldActiveInScene = parent._activeInHierarchy;
                                if (couldActiveInScene) {
                                    cc.director._nodeActivator.activateNode(this, value);
                                }
                            }
                        }
                    }
                },
                activeInHierarchy: {
                    get: function get() {
                        return this._activeInHierarchy;
                    }
                }
            },
            ctor: function ctor(name) {
                this._name = name !== undefined ? name : 'New Node';
                this._activeInHierarchy = false;
                this._id = CC_EDITOR ? Editor.Utils.UuidUtils.uuid() : idGenerater.getNewId();
                cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
                this.__eventTargets = [];
                this._renderFlag = RenderFlow.FLAG_TRANSFORM;
            },
            getParent: function getParent() {
                return this._parent;
            },
            setParent: function setParent(value) {
                if (this._parent === value) {
                    return;
                }
                if (CC_EDITOR && cc.engine && !cc.engine.isPlaying) {
                    if (_Scene.DetectConflict.beforeAddChild(this)) {
                        return;
                    }
                }
                var oldParent = this._parent;
                if (CC_DEBUG && oldParent && oldParent._objFlags & Deactivating) {
                    cc.errorID(3821);
                }
                this._parent = value || null;
                this._onSetParent(value);
                if (value) {
                    if (CC_DEBUG && value._objFlags & Deactivating) {
                        cc.errorID(3821);
                    }
                    this._level = value._level + 1;
                    eventManager._setDirtyForNode(this);
                    value._children.push(this);
                    value.emit && value.emit(CHILD_ADDED, this);
                    value._renderFlag |= RenderFlow.FLAG_CHILDREN;
                }
                if (oldParent) {
                    if (!(oldParent._objFlags & Destroying)) {
                        var removeAt = oldParent._children.indexOf(this);
                        if (CC_DEV && removeAt < 0) {
                            return cc.errorID(1633);
                        }
                        oldParent._children.splice(removeAt, 1);
                        oldParent.emit && oldParent.emit(CHILD_REMOVED, this);
                        this._onHierarchyChanged(oldParent);
                        if (oldParent._children.length === 0) {
                            oldParent._renderFlag &= ~RenderFlow.FLAG_CHILDREN;
                        }
                    }
                } else if (value) {
                    this._onHierarchyChanged(null);
                }
            },
            attr: function attr(attrs) {
                js.mixin(this, attrs);
            },
            getChildByUuid: function getChildByUuid(uuid) {
                if (!uuid) {
                    cc.log('Invalid uuid');
                    return null;
                }
                var locChildren = this._children;
                for (var i = 0, len = locChildren.length; i < len; i++) {
                    if (locChildren[i]._id === uuid)
                        return locChildren[i];
                }
                return null;
            },
            getChildByName: function getChildByName(name) {
                if (!name) {
                    cc.log('Invalid name');
                    return null;
                }
                var locChildren = this._children;
                for (var i = 0, len = locChildren.length; i < len; i++) {
                    if (locChildren[i]._name === name)
                        return locChildren[i];
                }
                return null;
            },
            addChild: function addChild(child) {
                if (CC_DEV && !(child instanceof cc._BaseNode)) {
                    return cc.errorID(1634, cc.js.getClassName(child));
                }
                cc.assertID(child, 1606);
                cc.assertID(child._parent === null, 1605);
                child.setParent(this);
            },
            insertChild: function insertChild(child, siblingIndex) {
                child.parent = this;
                child.setSiblingIndex(siblingIndex);
            },
            getSiblingIndex: function getSiblingIndex() {
                if (this._parent) {
                    return this._parent._children.indexOf(this);
                } else {
                    return 0;
                }
            },
            setSiblingIndex: function setSiblingIndex(index) {
                if (!this._parent) {
                    return;
                }
                if (this._parent._objFlags & Deactivating) {
                    cc.errorID(3821);
                    return;
                }
                var siblings = this._parent._children;
                index = index !== -1 ? index : siblings.length - 1;
                var oldIndex = siblings.indexOf(this);
                if (index !== oldIndex) {
                    siblings.splice(oldIndex, 1);
                    if (index < siblings.length) {
                        siblings.splice(index, 0, this);
                    } else {
                        siblings.push(this);
                    }
                    this._onSiblingIndexChanged && this._onSiblingIndexChanged(index);
                }
            },
            walk: function walk(prefunc, postfunc) {
                var BaseNode = cc._BaseNode;
                var index = 1;
                var children, child, curr, i, afterChildren;
                var stack = BaseNode._stacks[BaseNode._stackId];
                if (!stack) {
                    stack = [];
                    BaseNode._stacks.push(stack);
                }
                BaseNode._stackId++;
                stack.length = 0;
                stack[0] = this;
                var parent = null;
                afterChildren = false;
                while (index) {
                    index--;
                    curr = stack[index];
                    if (!curr) {
                        continue;
                    }
                    if (!afterChildren && prefunc) {
                        prefunc(curr);
                    } else if (afterChildren && postfunc) {
                        postfunc(curr);
                    }
                    stack[index] = null;
                    if (afterChildren) {
                        afterChildren = false;
                    } else {
                        if (curr._children.length > 0) {
                            parent = curr;
                            children = curr._children;
                            i = 0;
                            stack[index] = children[i];
                            index++;
                        } else {
                            stack[index] = curr;
                            index++;
                            afterChildren = true;
                        }
                        continue;
                    }
                    if (children) {
                        i++;
                        if (children[i]) {
                            stack[index] = children[i];
                            index++;
                        } else if (parent) {
                            stack[index] = parent;
                            index++;
                            afterChildren = true;
                            if (parent._parent) {
                                children = parent._parent._children;
                                i = children.indexOf(parent);
                                parent = parent._parent;
                            } else {
                                parent = null;
                                children = null;
                            }
                            if (i < 0) {
                                break;
                            }
                        }
                    }
                }
                stack.length = 0;
                BaseNode._stackId--;
            },
            cleanup: function cleanup() {
            },
            removeFromParent: function removeFromParent(cleanup) {
                if (this._parent) {
                    if (cleanup === undefined)
                        cleanup = true;
                    this._parent.removeChild(this, cleanup);
                }
            },
            removeChild: function removeChild(child, cleanup) {
                if (this._children.indexOf(child) > -1) {
                    if (cleanup || cleanup === undefined) {
                        child.cleanup();
                    }
                    child.parent = null;
                }
            },
            removeAllChildren: function removeAllChildren(cleanup) {
                var children = this._children;
                if (cleanup === undefined)
                    cleanup = true;
                for (var i = children.length - 1; i >= 0; i--) {
                    var node = children[i];
                    if (node) {
                        if (cleanup)
                            node.cleanup();
                        node.parent = null;
                    }
                }
                this._children.length = 0;
            },
            isChildOf: function isChildOf(parent) {
                var child = this;
                do {
                    if (child === parent) {
                        return true;
                    }
                    child = child._parent;
                } while (child);
                return false;
            },
            getComponent: function getComponent(typeOrClassName) {
                var constructor = getConstructor(typeOrClassName);
                if (constructor) {
                    return findComponent(this, constructor);
                }
                return null;
            },
            getComponents: function getComponents(typeOrClassName) {
                var constructor = getConstructor(typeOrClassName), components = [];
                if (constructor) {
                    findComponents(this, constructor, components);
                }
                return components;
            },
            getComponentInChildren: function getComponentInChildren(typeOrClassName) {
                var constructor = getConstructor(typeOrClassName);
                if (constructor) {
                    return findChildComponent(this._children, constructor);
                }
                return null;
            },
            getComponentsInChildren: function getComponentsInChildren(typeOrClassName) {
                var constructor = getConstructor(typeOrClassName), components = [];
                if (constructor) {
                    findComponents(this, constructor, components);
                    findChildComponents(this._children, constructor, components);
                }
                return components;
            },
            _checkMultipleComp: CC_EDITOR && function (ctor) {
                var existing = this.getComponent(ctor._disallowMultiple);
                if (existing) {
                    if (existing.constructor === ctor) {
                        cc.errorID(3805, js.getClassName(ctor), this._name);
                    } else {
                        cc.errorID(3806, js.getClassName(ctor), this._name, js.getClassName(existing));
                    }
                    return false;
                }
                return true;
            },
            addComponent: function addComponent(typeOrClassName) {
                if (CC_EDITOR && this._objFlags & Destroying) {
                    cc.error('isDestroying');
                    return null;
                }
                var constructor;
                if (typeof typeOrClassName === 'string') {
                    constructor = js.getClassByName(typeOrClassName);
                    if (!constructor) {
                        cc.errorID(3807, typeOrClassName);
                        if (cc._RFpeek()) {
                            cc.errorID(3808, typeOrClassName);
                        }
                        return null;
                    }
                } else {
                    if (!typeOrClassName) {
                        cc.errorID(3804);
                        return null;
                    }
                    constructor = typeOrClassName;
                }
                if (typeof constructor !== 'function') {
                    cc.errorID(3809);
                    return null;
                }
                if (!js.isChildClassOf(constructor, cc.Component)) {
                    cc.errorID(3810);
                    return null;
                }
                if (CC_EDITOR && constructor._disallowMultiple) {
                    if (!this._checkMultipleComp(constructor)) {
                        return null;
                    }
                }
                var ReqComp = constructor._requireComponent;
                if (ReqComp && !this.getComponent(ReqComp)) {
                    var depended = this.addComponent(ReqComp);
                    if (!depended) {
                        return null;
                    }
                }
                var component = new constructor();
                component.node = this;
                this._components.push(component);
                if ((CC_EDITOR || CC_TEST) && cc.engine && this._id in cc.engine.attachedObjsForEditor) {
                    cc.engine.attachedObjsForEditor[component._id] = component;
                }
                if (this._activeInHierarchy) {
                    cc.director._nodeActivator.activateComp(component);
                }
                return component;
            },
            _addComponentAt: CC_EDITOR && function (comp, index) {
                if (this._objFlags & Destroying) {
                    return cc.error('isDestroying');
                }
                if (!(comp instanceof cc.Component)) {
                    return cc.errorID(3811);
                }
                if (index > this._components.length) {
                    return cc.errorID(3812);
                }
                var ctor = comp.constructor;
                if (ctor._disallowMultiple) {
                    if (!this._checkMultipleComp(ctor)) {
                        return;
                    }
                }
                var ReqComp = ctor._requireComponent;
                if (ReqComp && !this.getComponent(ReqComp)) {
                    if (index === this._components.length) {
                        ++index;
                    }
                    var depended = this.addComponent(ReqComp);
                    if (!depended) {
                        return null;
                    }
                }
                comp.node = this;
                this._components.splice(index, 0, comp);
                if ((CC_EDITOR || CC_TEST) && cc.engine && this._id in cc.engine.attachedObjsForEditor) {
                    cc.engine.attachedObjsForEditor[comp._id] = comp;
                }
                if (this._activeInHierarchy) {
                    cc.director._nodeActivator.activateComp(comp);
                }
            },
            removeComponent: function removeComponent(component) {
                if (!component) {
                    cc.errorID(3813);
                    return;
                }
                if (!(component instanceof cc.Component)) {
                    component = this.getComponent(component);
                }
                if (component) {
                    component.destroy();
                }
            },
            _getDependComponent: CC_EDITOR && function (depended) {
                for (var i = 0; i < this._components.length; i++) {
                    var comp = this._components[i];
                    if (comp !== depended && comp.isValid && !cc.Object._willDestroy(comp)) {
                        var depend = comp.constructor._requireComponent;
                        if (depend && depended instanceof depend) {
                            return comp;
                        }
                    }
                }
                return null;
            },
            _removeComponent: function _removeComponent(component) {
                if (!component) {
                    cc.errorID(3814);
                    return;
                }
                if (!(this._objFlags & Destroying)) {
                    var i = this._components.indexOf(component);
                    if (i !== -1) {
                        this._components.splice(i, 1);
                        if ((CC_EDITOR || CC_TEST) && cc.engine) {
                            delete cc.engine.attachedObjsForEditor[component._id];
                        }
                    } else if (component.node !== this) {
                        cc.errorID(3815);
                    }
                }
            },
            destroy: function destroy() {
                if (cc.Object.prototype.destroy.call(this)) {
                    this.active = false;
                }
            },
            destroyAllChildren: function destroyAllChildren() {
                var children = this._children;
                for (var i = 0; i < children.length; ++i) {
                    children[i].destroy();
                }
            },
            _onSetParent: function _onSetParent(value) {
            },
            _onPostActivated: function _onPostActivated() {
            },
            _onBatchRestored: function _onBatchRestored() {
            },
            _onBatchCreated: function _onBatchCreated() {
            },
            _onHierarchyChanged: function _onHierarchyChanged(oldParent) {
                var newParent = this._parent;
                if (this._persistNode && !(newParent instanceof cc.Scene)) {
                    cc.game.removePersistRootNode(this);
                    if (CC_EDITOR) {
                        cc.warnID(1623);
                    }
                }
                if (CC_EDITOR || CC_TEST) {
                    var scene = cc.director.getScene();
                    var inCurrentSceneBefore = oldParent && oldParent.isChildOf(scene);
                    var inCurrentSceneNow = newParent && newParent.isChildOf(scene);
                    if (!inCurrentSceneBefore && inCurrentSceneNow) {
                        this._registerIfAttached(true);
                    } else if (inCurrentSceneBefore && !inCurrentSceneNow) {
                        this._registerIfAttached(false);
                    }
                    var newPrefabRoot = newParent && newParent._prefab && newParent._prefab.root;
                    var myPrefabInfo = this._prefab;
                    var PrefabUtils = Editor.require('scene://utils/prefab');
                    if (myPrefabInfo) {
                        if (newPrefabRoot) {
                            if (myPrefabInfo.root !== newPrefabRoot) {
                                PrefabUtils.unlinkPrefab(this);
                                PrefabUtils.linkPrefab(newPrefabRoot._prefab.asset, newPrefabRoot, this);
                            }
                        } else if (myPrefabInfo.root !== this) {
                            PrefabUtils.unlinkPrefab(this);
                        }
                    } else if (newPrefabRoot) {
                        PrefabUtils.linkPrefab(newPrefabRoot._prefab.asset, newPrefabRoot, this);
                    }
                    _Scene.DetectConflict.afterAddChild(this);
                }
                var shouldActiveNow = this._active && !!(newParent && newParent._activeInHierarchy);
                if (this._activeInHierarchy !== shouldActiveNow) {
                    cc.director._nodeActivator.activateNode(this, shouldActiveNow);
                }
            },
            _instantiate: function _instantiate(cloned) {
                if (!cloned) {
                    cloned = cc.instantiate._clone(this, this);
                }
                var thisPrefabInfo = this._prefab;
                if (CC_EDITOR && thisPrefabInfo) {
                    if (this !== thisPrefabInfo.root) {
                        var PrefabUtils = Editor.require('scene://utils/prefab');
                        PrefabUtils.initClonedChildOfPrefab(cloned);
                    }
                }
                var syncing = thisPrefabInfo && this === thisPrefabInfo.root && thisPrefabInfo.sync;
                if (syncing) {
                } else if (CC_EDITOR && cc.engine._isPlaying) {
                    cloned._name += ' (Clone)';
                }
                cloned._parent = null;
                cloned._onBatchRestored();
                return cloned;
            },
            _registerIfAttached: (CC_EDITOR || CC_TEST) && function (register) {
                var attachedObjsForEditor = cc.engine.attachedObjsForEditor;
                if (register) {
                    attachedObjsForEditor[this._id] = this;
                    for (var i = 0; i < this._components.length; i++) {
                        var comp = this._components[i];
                        attachedObjsForEditor[comp._id] = comp;
                    }
                    cc.engine.emit('node-attach-to-scene', this);
                } else {
                    cc.engine.emit('node-detach-from-scene', this);
                    delete attachedObjsForEditor[this._id];
                    for (var _i3 = 0; _i3 < this._components.length; _i3++) {
                        var _comp3 = this._components[_i3];
                        delete attachedObjsForEditor[_comp3._id];
                    }
                }
                var children = this._children;
                for (var _i4 = 0, len = children.length; _i4 < len; ++_i4) {
                    var child = children[_i4];
                    child._registerIfAttached(register);
                }
            },
            _onPreDestroy: function _onPreDestroy() {
                var i, len;
                this._objFlags |= Destroying;
                var parent = this._parent;
                var destroyByParent = parent && parent._objFlags & Destroying;
                if (!destroyByParent && (CC_EDITOR || CC_TEST)) {
                    this._registerIfAttached(false);
                }
                var children = this._children;
                for (i = 0, len = children.length; i < len; ++i) {
                    children[i]._destroyImmediate();
                }
                for (i = 0, len = this._components.length; i < len; ++i) {
                    var component = this._components[i];
                    component._destroyImmediate();
                }
                var eventTargets = this.__eventTargets;
                for (i = 0, len = eventTargets.length; i < len; ++i) {
                    var target = eventTargets[i];
                    target && target.targetOff(this);
                }
                eventTargets.length = 0;
                if (this._persistNode) {
                    cc.game.removePersistRootNode(this);
                }
                if (!destroyByParent) {
                    if (parent) {
                        var childIndex = parent._children.indexOf(this);
                        parent._children.splice(childIndex, 1);
                        parent.emit && parent.emit('child-removed', this);
                    }
                }
                return destroyByParent;
            },
            onRestore: CC_EDITOR && function () {
                var shouldActiveNow = this._active && !!(this._parent && this._parent._activeInHierarchy);
                if (this._activeInHierarchy !== shouldActiveNow) {
                    cc.director._nodeActivator.activateNode(this, shouldActiveNow);
                }
            }
        });
        BaseNode.idGenerater = idGenerater;
        BaseNode._stacks = [[]];
        BaseNode._stackId = 0;
        BaseNode.prototype._onPreDestroyBase = BaseNode.prototype._onPreDestroy;
        if (CC_EDITOR) {
            BaseNode.prototype._onPreDestroy = function () {
                var destroyByParent = this._onPreDestroyBase();
                if (!destroyByParent) {
                    this._parent = null;
                }
                return destroyByParent;
            };
        }
        BaseNode.prototype._onHierarchyChangedBase = BaseNode.prototype._onHierarchyChanged;
        if (CC_EDITOR) {
            BaseNode.prototype._onRestoreBase = BaseNode.prototype.onRestore;
        }
        var SameNameGetSets = [
            'parent',
            'name',
            'children',
            'childrenCount'
        ];
        misc.propertyDefine(BaseNode, SameNameGetSets, {});
        if (CC_DEV) {
            js.get(BaseNode.prototype, ' INFO ', function () {
                var path = '';
                var node = this;
                while (node && !(node instanceof cc.Scene)) {
                    if (path) {
                        path = node.name + '/' + path;
                    } else {
                        path = node.name;
                    }
                    node = node._parent;
                }
                return this.name + ', path: ' + path;
            });
        }
        cc._BaseNode = module.exports = BaseNode;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,