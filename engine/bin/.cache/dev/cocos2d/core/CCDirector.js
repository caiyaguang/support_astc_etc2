(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/CCDirector.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var EventTarget = require('./event/event-target');
        var AutoReleaseUtils = require('./load-pipeline/auto-release-utils');
        var ComponentScheduler = require('./component-scheduler');
        var NodeActivator = require('./node-activator');
        var Obj = require('./platform/CCObject');
        var game = require('./CCGame');
        var renderer = require('./renderer');
        var eventManager = require('./event-manager');
        var Scheduler = require('./CCScheduler');
        cc.Director = function () {
            EventTarget.call(this);
            this._paused = false;
            this._purgeDirectorInNextLoop = false;
            this._winSizeInPoints = null;
            this._loadingScene = '';
            this._scene = null;
            this._totalFrames = 0;
            this._lastUpdate = 0;
            this._deltaTime = 0;
            this._scheduler = null;
            this._compScheduler = null;
            this._nodeActivator = null;
            this._actionManager = null;
            var self = this;
            game.on(game.EVENT_SHOW, function () {
                self._lastUpdate = performance.now();
            });
            game.once(game.EVENT_ENGINE_INITED, this.init, this);
        };
        cc.Director.prototype = {
            constructor: cc.Director,
            init: function init() {
                this._totalFrames = 0;
                this._lastUpdate = performance.now();
                this._paused = false;
                this._purgeDirectorInNextLoop = false;
                this._winSizeInPoints = cc.size(0, 0);
                this._scheduler = new Scheduler();
                if (cc.ActionManager) {
                    this._actionManager = new cc.ActionManager();
                    this._scheduler.scheduleUpdate(this._actionManager, Scheduler.PRIORITY_SYSTEM, false);
                } else {
                    this._actionManager = null;
                }
                this.sharedInit();
                return true;
            },
            sharedInit: function sharedInit() {
                this._compScheduler = new ComponentScheduler();
                this._nodeActivator = new NodeActivator();
                if (eventManager) {
                    eventManager.setEnabled(true);
                }
                if (cc.AnimationManager) {
                    this._animationManager = new cc.AnimationManager();
                    this._scheduler.scheduleUpdate(this._animationManager, Scheduler.PRIORITY_SYSTEM, false);
                } else {
                    this._animationManager = null;
                }
                if (cc.CollisionManager) {
                    this._collisionManager = new cc.CollisionManager();
                    this._scheduler.scheduleUpdate(this._collisionManager, Scheduler.PRIORITY_SYSTEM, false);
                } else {
                    this._collisionManager = null;
                }
                if (cc.PhysicsManager) {
                    this._physicsManager = new cc.PhysicsManager();
                    this._scheduler.scheduleUpdate(this._physicsManager, Scheduler.PRIORITY_SYSTEM, false);
                } else {
                    this._physicsManager = null;
                }
                if (cc._widgetManager) {
                    cc._widgetManager.init(this);
                }
                cc.loader.init(this);
            },
            calculateDeltaTime: function calculateDeltaTime(now) {
                if (!now)
                    now = performance.now();
                this._deltaTime = (now - this._lastUpdate) / 1000;
                if (CC_DEBUG && this._deltaTime > 1)
                    this._deltaTime = 1 / 60;
                this._lastUpdate = now;
            },
            convertToGL: function convertToGL(uiPoint) {
                var container = game.container;
                var view = cc.view;
                var box = container.getBoundingClientRect();
                var left = box.left + window.pageXOffset - container.clientLeft;
                var top = box.top + window.pageYOffset - container.clientTop;
                var x = view._devicePixelRatio * (uiPoint.x - left);
                var y = view._devicePixelRatio * (top + box.height - uiPoint.y);
                return view._isRotated ? cc.v2(view._viewportRect.width - y, x) : cc.v2(x, y);
            },
            convertToUI: function convertToUI(glPoint) {
                var container = game.container;
                var view = cc.view;
                var box = container.getBoundingClientRect();
                var left = box.left + window.pageXOffset - container.clientLeft;
                var top = box.top + window.pageYOffset - container.clientTop;
                var uiPoint = cc.v2(0, 0);
                if (view._isRotated) {
                    uiPoint.x = left + glPoint.y / view._devicePixelRatio;
                    uiPoint.y = top + box.height - (view._viewportRect.width - glPoint.x) / view._devicePixelRatio;
                } else {
                    uiPoint.x = left + glPoint.x * view._devicePixelRatio;
                    uiPoint.y = top + box.height - glPoint.y * view._devicePixelRatio;
                }
                return uiPoint;
            },
            end: function end() {
                this._purgeDirectorInNextLoop = true;
            },
            getWinSize: function getWinSize() {
                return cc.size(cc.winSize);
            },
            getWinSizeInPixels: function getWinSizeInPixels() {
                return cc.size(cc.winSize);
            },
            pause: function pause() {
                if (this._paused)
                    return;
                this._paused = true;
            },
            purgeCachedData: function purgeCachedData() {
                cc.loader.releaseAll();
            },
            purgeDirector: function purgeDirector() {
                this._scheduler.unscheduleAll();
                this._compScheduler.unscheduleAll();
                this._nodeActivator.reset();
                if (eventManager)
                    eventManager.setEnabled(false);
                if (!CC_EDITOR) {
                    if (cc.isValid(this._scene)) {
                        this._scene.destroy();
                    }
                    this._scene = null;
                    cc.renderer.clear();
                    cc.AssetLibrary.resetBuiltins();
                }
                cc.game.pause();
                cc.loader.releaseAll();
            },
            reset: function reset() {
                this.purgeDirector();
                if (eventManager)
                    eventManager.setEnabled(true);
                if (this._actionManager) {
                    this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
                }
                if (this._animationManager) {
                    this._scheduler.scheduleUpdate(this._animationManager, cc.Scheduler.PRIORITY_SYSTEM, false);
                }
                if (this._collisionManager) {
                    this._scheduler.scheduleUpdate(this._collisionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
                }
                if (this._physicsManager) {
                    this._scheduler.scheduleUpdate(this._physicsManager, cc.Scheduler.PRIORITY_SYSTEM, false);
                }
                cc.game.resume();
            },
            runSceneImmediate: function runSceneImmediate(scene, onBeforeLoadScene, onLaunched) {
                cc.assertID(scene instanceof cc.Scene, 1216);
                CC_BUILD && CC_DEBUG && console.time('InitScene');
                scene._load();
                CC_BUILD && CC_DEBUG && console.timeEnd('InitScene');
                CC_BUILD && CC_DEBUG && console.time('AttachPersist');
                var persistNodeList = Object.keys(game._persistRootNodes).map(function (x) {
                    return game._persistRootNodes[x];
                });
                for (var i = 0; i < persistNodeList.length; i++) {
                    var node = persistNodeList[i];
                    var existNode = scene.getChildByUuid(node.uuid);
                    if (existNode) {
                        var index = existNode.getSiblingIndex();
                        existNode._destroyImmediate();
                        scene.insertChild(node, index);
                    } else {
                        node.parent = scene;
                    }
                }
                CC_BUILD && CC_DEBUG && console.timeEnd('AttachPersist');
                var oldScene = this._scene;
                if (!CC_EDITOR) {
                    CC_BUILD && CC_DEBUG && console.time('AutoRelease');
                    var autoReleaseAssets = oldScene && oldScene.autoReleaseAssets && oldScene.dependAssets;
                    AutoReleaseUtils.autoRelease(autoReleaseAssets, scene.dependAssets, persistNodeList);
                    CC_BUILD && CC_DEBUG && console.timeEnd('AutoRelease');
                }
                CC_BUILD && CC_DEBUG && console.time('Destroy');
                if (cc.isValid(oldScene)) {
                    oldScene.destroy();
                }
                this._scene = null;
                Obj._deferredDestroy();
                CC_BUILD && CC_DEBUG && console.timeEnd('Destroy');
                if (onBeforeLoadScene) {
                    onBeforeLoadScene();
                }
                this.emit(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, scene);
                this._scene = scene;
                CC_BUILD && CC_DEBUG && console.time('Activate');
                scene._activate();
                CC_BUILD && CC_DEBUG && console.timeEnd('Activate');
                cc.game.resume();
                if (onLaunched) {
                    onLaunched(null, scene);
                }
                this.emit(cc.Director.EVENT_AFTER_SCENE_LAUNCH, scene);
            },
            runScene: function runScene(scene, onBeforeLoadScene, onLaunched) {
                cc.assertID(scene, 1205);
                cc.assertID(scene instanceof cc.Scene, 1216);
                scene._load();
                this.once(cc.Director.EVENT_AFTER_UPDATE, function () {
                    this.runSceneImmediate(scene, onBeforeLoadScene, onLaunched);
                }, this);
            },
            _getSceneUuid: function _getSceneUuid(key) {
                var scenes = game._sceneInfos;
                if (typeof key === 'string') {
                    if (!key.endsWith('.fire')) {
                        key += '.fire';
                    }
                    if (key[0] !== '/' && !key.startsWith('db://')) {
                        key = '/' + key;
                    }
                    for (var i = 0; i < scenes.length; i++) {
                        var info = scenes[i];
                        if (info.url.endsWith(key)) {
                            return info;
                        }
                    }
                } else if (typeof key === 'number') {
                    if (0 <= key && key < scenes.length) {
                        return scenes[key];
                    } else {
                        cc.errorID(1206, key);
                    }
                } else {
                    cc.errorID(1207, key);
                }
                return null;
            },
            loadScene: function loadScene(sceneName, onLaunched, _onUnloaded) {
                if (this._loadingScene) {
                    cc.errorID(1208, sceneName, this._loadingScene);
                    return false;
                }
                var info = this._getSceneUuid(sceneName);
                if (info) {
                    var uuid = info.uuid;
                    this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, sceneName);
                    this._loadingScene = sceneName;
                    this._loadSceneByUuid(uuid, onLaunched, _onUnloaded);
                    return true;
                } else {
                    cc.errorID(1209, sceneName);
                    return false;
                }
            },
            preloadScene: function preloadScene(sceneName, onProgress, onLoaded) {
                if (onLoaded === undefined) {
                    onLoaded = onProgress;
                    onProgress = null;
                }
                var info = this._getSceneUuid(sceneName);
                if (info) {
                    this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, sceneName);
                    cc.loader.load({
                        uuid: info.uuid,
                        type: 'uuid'
                    }, onProgress, function (error, asset) {
                        if (error) {
                            cc.errorID(1210, sceneName, error.message);
                        }
                        if (onLoaded) {
                            onLoaded(error, asset);
                        }
                    });
                } else {
                    var error = 'Can not preload the scene "' + sceneName + '" because it is not in the build settings.';
                    onLoaded(new Error(error));
                    cc.error('preloadScene: ' + error);
                }
            },
            _loadSceneByUuid: function _loadSceneByUuid(uuid, onLaunched, onUnloaded, dontRunScene) {
                if (CC_EDITOR) {
                    if (typeof onLaunched === 'boolean') {
                        dontRunScene = onLaunched;
                        onLaunched = null;
                    }
                    if (typeof onUnloaded === 'boolean') {
                        dontRunScene = onUnloaded;
                        onUnloaded = null;
                    }
                }
                console.time('LoadScene ' + uuid);
                cc.AssetLibrary.loadAsset(uuid, function (error, sceneAsset) {
                    console.timeEnd('LoadScene ' + uuid);
                    var self = cc.director;
                    self._loadingScene = '';
                    if (error) {
                        error = 'Failed to load scene: ' + error;
                        cc.error(error);
                    } else {
                        if (sceneAsset instanceof cc.SceneAsset) {
                            var scene = sceneAsset.scene;
                            scene._id = sceneAsset._uuid;
                            scene._name = sceneAsset._name;
                            if (CC_EDITOR) {
                                if (!dontRunScene) {
                                    self.runSceneImmediate(scene, onUnloaded, onLaunched);
                                } else {
                                    scene._load();
                                    if (onLaunched) {
                                        onLaunched(null, scene);
                                    }
                                }
                            } else {
                                self.runSceneImmediate(scene, onUnloaded, onLaunched);
                            }
                            return;
                        } else {
                            error = 'The asset ' + uuid + ' is not a scene';
                            cc.error(error);
                        }
                    }
                    if (onLaunched) {
                        onLaunched(error);
                    }
                });
            },
            resume: function resume() {
                if (!this._paused) {
                    return;
                }
                this._lastUpdate = performance.now();
                if (!this._lastUpdate) {
                    cc.logID(1200);
                }
                this._paused = false;
                this._deltaTime = 0;
            },
            setDepthTest: function setDepthTest(value) {
                if (!cc.Camera.main) {
                    return;
                }
                cc.Camera.main.depth = !!value;
            },
            setClearColor: function setClearColor(clearColor) {
                if (!cc.Camera.main) {
                    return;
                }
                cc.Camera.main.backgroundColor = clearColor;
            },
            getRunningScene: function getRunningScene() {
                return this._scene;
            },
            getScene: function getScene() {
                return this._scene;
            },
            getAnimationInterval: function getAnimationInterval() {
                return 1000 / game.getFrameRate();
            },
            setAnimationInterval: function setAnimationInterval(value) {
                game.setFrameRate(Math.round(1000 / value));
            },
            getDeltaTime: function getDeltaTime() {
                return this._deltaTime;
            },
            getTotalFrames: function getTotalFrames() {
                return this._totalFrames;
            },
            isPaused: function isPaused() {
                return this._paused;
            },
            getScheduler: function getScheduler() {
                return this._scheduler;
            },
            setScheduler: function setScheduler(scheduler) {
                if (this._scheduler !== scheduler) {
                    this._scheduler = scheduler;
                }
            },
            getActionManager: function getActionManager() {
                return this._actionManager;
            },
            setActionManager: function setActionManager(actionManager) {
                if (this._actionManager !== actionManager) {
                    if (this._actionManager) {
                        this._scheduler.unscheduleUpdate(this._actionManager);
                    }
                    this._actionManager = actionManager;
                    this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
                }
            },
            getAnimationManager: function getAnimationManager() {
                return this._animationManager;
            },
            getCollisionManager: function getCollisionManager() {
                return this._collisionManager;
            },
            getPhysicsManager: function getPhysicsManager() {
                return this._physicsManager;
            },
            startAnimation: function startAnimation() {
                cc.game.resume();
            },
            stopAnimation: function stopAnimation() {
                cc.game.pause();
            },
            _resetDeltaTime: function _resetDeltaTime() {
                this._lastUpdate = performance.now();
                this._deltaTime = 0;
            },
            mainLoop: CC_EDITOR ? function (deltaTime, updateAnimate) {
                this._deltaTime = deltaTime;
                if (!this._paused) {
                    this.emit(cc.Director.EVENT_BEFORE_UPDATE);
                    this._compScheduler.startPhase();
                    this._compScheduler.updatePhase(deltaTime);
                    if (updateAnimate) {
                        this._scheduler.update(deltaTime);
                    }
                    this._compScheduler.lateUpdatePhase(deltaTime);
                    this.emit(cc.Director.EVENT_AFTER_UPDATE);
                }
                this.emit(cc.Director.EVENT_BEFORE_DRAW);
                renderer.render(this._scene);
                this.emit(cc.Director.EVENT_AFTER_DRAW);
                this._totalFrames++;
            } : function (now) {
                if (this._purgeDirectorInNextLoop) {
                    this._purgeDirectorInNextLoop = false;
                    this.purgeDirector();
                } else {
                    this.calculateDeltaTime(now);
                    if (!this._paused) {
                        this.emit(cc.Director.EVENT_BEFORE_UPDATE);
                        this._compScheduler.startPhase();
                        this._compScheduler.updatePhase(this._deltaTime);
                        this._scheduler.update(this._deltaTime);
                        this._compScheduler.lateUpdatePhase(this._deltaTime);
                        this.emit(cc.Director.EVENT_AFTER_UPDATE);
                        Obj._deferredDestroy();
                    }
                    this.emit(cc.Director.EVENT_BEFORE_DRAW);
                    renderer.render(this._scene);
                    this.emit(cc.Director.EVENT_AFTER_DRAW);
                    eventManager.frameUpdateListeners();
                    this._totalFrames++;
                }
            },
            __fastOn: function __fastOn(type, callback, target) {
                this.add(type, callback, target);
            },
            __fastOff: function __fastOff(type, callback, target) {
                this.remove(type, callback, target);
            }
        };
        cc.js.addon(cc.Director.prototype, EventTarget.prototype);
        cc.Director.EVENT_PROJECTION_CHANGED = 'director_projection_changed';
        cc.Director.EVENT_BEFORE_SCENE_LOADING = 'director_before_scene_loading';
        cc.Director.EVENT_BEFORE_SCENE_LAUNCH = 'director_before_scene_launch';
        cc.Director.EVENT_AFTER_SCENE_LAUNCH = 'director_after_scene_launch';
        cc.Director.EVENT_BEFORE_UPDATE = 'director_before_update';
        cc.Director.EVENT_AFTER_UPDATE = 'director_after_update';
        cc.Director.EVENT_BEFORE_VISIT = 'director_before_draw';
        cc.Director.EVENT_AFTER_VISIT = 'director_before_draw';
        cc.Director.EVENT_BEFORE_DRAW = 'director_before_draw';
        cc.Director.EVENT_AFTER_DRAW = 'director_after_draw';
        cc.Director.PROJECTION_2D = 0;
        cc.Director.PROJECTION_3D = 1;
        cc.Director.PROJECTION_CUSTOM = 3;
        cc.Director.PROJECTION_DEFAULT = cc.Director.PROJECTION_2D;
        cc.director = new cc.Director();
        module.exports = cc.director;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,