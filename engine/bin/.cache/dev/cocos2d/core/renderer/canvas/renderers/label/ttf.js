(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/label/ttf.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var ttfUtils = require('../../../utils/label/ttf');
        var js = require('../../../../platform/js');
        var utils = require('../utils');
        module.exports = js.addon({
            createData: function createData(sprite) {
                var renderData = sprite.requestRenderData();
                renderData.dataLength = 2;
                return renderData;
            },
            _updateVerts: function _updateVerts(comp) {
                var renderData = comp._renderData;
                var node = comp.node, width = node.width, height = node.height, appx = node.anchorX * width, appy = node.anchorY * height;
                var data = renderData._data;
                data[0].x = -appx;
                data[0].y = -appy;
                data[1].x = width - appx;
                data[1].y = height - appy;
            },
            _updateTexture: function _updateTexture(comp) {
                ttfUtils._updateTexture(comp);
                var texture = comp._frame._texture;
                utils.dropColorizedImage(texture, comp.node.color);
            },
            draw: function draw(ctx, comp) {
                var node = comp.node;
                var matrix = node._worldMatrix;
                var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
                ctx.transform(a, b, c, d, tx, ty);
                ctx.scale(1, -1);
                utils.context.setGlobalAlpha(ctx, node.opacity / 255);
                var tex = comp._frame._texture, data = comp._renderData._data;
                var image = tex.getHtmlElementObj();
                var x = data[0].x;
                var y = data[0].y;
                var w = data[1].x - x;
                var h = data[1].y - y;
                y = -y - h;
                ctx.drawImage(image, x, y, w, h);
                return 1;
            }
        }, ttfUtils);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,