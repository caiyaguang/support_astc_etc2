(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/sprite/simple.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var utils = require('../utils');
        var renderer = {
            createData: function createData(sprite) {
                var renderData = sprite.requestRenderData();
                renderData.dataLength = 2;
                return renderData;
            },
            updateRenderData: function updateRenderData(sprite) {
                if (!sprite._material) {
                    sprite._activateMaterial();
                }
                var renderData = sprite._renderData;
                if (renderData.uvDirty) {
                    this.updateUVs(sprite);
                }
                if (renderData.vertDirty) {
                    this.updateVerts(sprite);
                }
            },
            updateUVs: function updateUVs(sprite) {
                var frame = sprite.spriteFrame;
                var renderData = sprite._renderData;
                var data = renderData._data;
                var rect = frame._rect;
                var texture = frame._texture;
                if (frame._rotated) {
                    var l = rect.x;
                    var r = rect.width;
                    var b = rect.y;
                    var t = rect.height;
                    data[0].u = l;
                    data[0].v = b;
                    data[1].u = t;
                    data[1].v = r;
                } else {
                    var _l = rect.x;
                    var _r = rect.width;
                    var _b = rect.y;
                    var _t = rect.height;
                    data[0].u = _l;
                    data[0].v = _b;
                    data[1].u = _r;
                    data[1].v = _t;
                }
                renderData.uvDirty = false;
            },
            updateVerts: function updateVerts(sprite) {
                var renderData = sprite._renderData, node = sprite.node, frame = sprite.spriteFrame, data = renderData._data, cw = node.width, ch = node.height, appx = node.anchorX * cw, appy = node.anchorY * ch, l = void 0, b = void 0, r = void 0, t = void 0;
                if (sprite.trim) {
                    l = -appx;
                    b = -appy;
                    r = cw;
                    t = ch;
                } else {
                    var ow = frame._originalSize.width, oh = frame._originalSize.height, rw = frame._rect.width, rh = frame._rect.height, offset = frame._offset, scaleX = cw / ow, scaleY = ch / oh;
                    var trimLeft = offset.x + (ow - rw) / 2;
                    var trimRight = offset.x - (ow - rw) / 2;
                    var trimBottom = offset.y + (oh - rh) / 2;
                    var trimTop = offset.y - (oh - rh) / 2;
                    l = trimLeft * scaleX - appx;
                    b = trimBottom * scaleY - appy;
                    r = cw;
                    t = ch;
                }
                if (frame._rotated) {
                    data[0].y = l;
                    data[0].x = b;
                    data[1].y = r;
                    data[1].x = t;
                } else {
                    data[0].x = l;
                    data[0].y = b;
                    data[1].x = r;
                    data[1].y = t;
                }
                renderData.vertDirty = false;
            },
            draw: function draw(ctx, comp) {
                var node = comp.node;
                var frame = comp._spriteFrame;
                var matrix = node._worldMatrix;
                var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
                ctx.transform(a, b, c, d, tx, ty);
                ctx.scale(1, -1);
                if (frame._rotated) {
                    ctx.rotate(-Math.PI / 2);
                }
                utils.context.setGlobalAlpha(ctx, node.opacity / 255);
                var tex = frame._texture, data = comp._renderData._data;
                var image = utils.getColorizedImage(tex, node._color);
                var x = data[0].x;
                var y = data[0].y;
                var w = data[1].x;
                var h = data[1].y;
                y = -y - h;
                var sx = data[0].u;
                var sy = data[0].v;
                var sw = data[1].u;
                var sh = data[1].v;
                ctx.drawImage(image, sx, sy, sw, sh, x, y, w, h);
                return 1;
            }
        };
        module.exports = renderer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,