(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/label/bmfont.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var bmfontUtils = require('../../../utils/label/bmfont');
        var js = require('../../../../platform/js');
        var utils = require('../utils');
        module.exports = js.addon({
            createData: function createData(comp) {
                return comp.requestRenderData();
            },
            appendQuad: function appendQuad(renderData, texture, rect, rotated, x, y, scale) {
                var dataOffset = renderData.dataLength;
                renderData.dataLength += 2;
                var data = renderData._data;
                var texw = texture.width, texh = texture.height;
                var rectWidth = rect.width, rectHeight = rect.height;
                var l = void 0, b = void 0, r = void 0, t = void 0;
                if (!rotated) {
                    l = rect.x;
                    r = rect.x + rectWidth;
                    b = rect.y;
                    t = rect.y + rectHeight;
                    data[dataOffset].u = l;
                    data[dataOffset].v = b;
                    data[dataOffset + 1].u = r;
                    data[dataOffset + 1].v = t;
                } else {
                    l = rect.x;
                    r = rect.x + rectHeight;
                    b = rect.y;
                    t = rect.y + rectWidth;
                    data[dataOffset].u = l;
                    data[dataOffset].v = t;
                    data[dataOffset + 1].u = l;
                    data[dataOffset + 1].v = b;
                }
                data[dataOffset].x = x;
                data[dataOffset].y = y - rectHeight * scale;
                data[dataOffset + 1].x = x + rectWidth * scale;
                data[dataOffset + 1].y = y;
            },
            draw: function draw(ctx, comp) {
                var node = comp.node;
                var matrix = node._worldMatrix;
                var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
                ctx.transform(a, b, c, d, tx, ty);
                ctx.scale(1, -1);
                utils.context.setGlobalAlpha(ctx, node.opacity / 255);
                var tex = comp._frame._texture, data = comp._renderData._data;
                var image = utils.getColorizedImage(tex, node._color);
                for (var i = 0, l = data.length; i < l; i += 2) {
                    var x = data[i].x;
                    var y = data[i].y;
                    var w = data[i + 1].x - x;
                    var h = data[i + 1].y - y;
                    y = -y - h;
                    var sx = data[i].u;
                    var sy = data[i].v;
                    var sw = data[i + 1].u - sx;
                    var sh = data[i + 1].v - sy;
                    ctx.drawImage(image, sx, sy, sw, sh, x, y, w, h);
                }
                return 1;
            }
        }, bmfontUtils);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,