(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/sprite/sliced.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var utils = require('../utils');
        var simple = require('./simple');
        var renderer = {
            createData: function createData(sprite) {
                var renderData = sprite.requestRenderData();
                renderData.dataLength = 4;
                return renderData;
            },
            updateRenderData: simple.updateRenderData,
            updateUVs: function updateUVs(sprite) {
                var frame = sprite.spriteFrame;
                var renderData = sprite._renderData;
                var rect = frame._rect;
                var texture = frame._texture;
                var leftWidth = frame.insetLeft;
                var rightWidth = frame.insetRight;
                var centerWidth = rect.width - leftWidth - rightWidth;
                var topHeight = frame.insetTop;
                var bottomHeight = frame.insetBottom;
                var centerHeight = rect.height - topHeight - bottomHeight;
                var data = renderData._data;
                if (frame._rotated) {
                    data[0].u = rect.x;
                    data[1].u = bottomHeight + rect.x;
                    data[2].u = bottomHeight + centerHeight + rect.x;
                    data[3].u = rect.x + rect.height;
                    data[3].v = rect.y;
                    data[2].v = leftWidth + rect.y;
                    data[1].v = leftWidth + centerWidth + rect.y;
                    data[0].v = rect.y + rect.width;
                } else {
                    data[0].u = rect.x;
                    data[1].u = leftWidth + rect.x;
                    data[2].u = leftWidth + centerWidth + rect.x;
                    data[3].u = rect.x + rect.width;
                    data[3].v = rect.y;
                    data[2].v = topHeight + rect.y;
                    data[1].v = topHeight + centerHeight + rect.y;
                    data[0].v = rect.y + rect.height;
                }
                renderData.uvDirty = false;
            },
            updateVerts: function updateVerts(sprite) {
                var renderData = sprite._renderData, data = renderData._data, node = sprite.node, width = node.width, height = node.height, appx = node.anchorX * width, appy = node.anchorY * height;
                var frame = sprite.spriteFrame;
                var rect = frame._rect;
                var leftWidth = frame.insetLeft;
                var rightWidth = frame.insetRight;
                var topHeight = frame.insetTop;
                var bottomHeight = frame.insetBottom;
                var sizableWidth = width - leftWidth - rightWidth;
                var sizableHeight = height - topHeight - bottomHeight;
                var xScale = width / (leftWidth + rightWidth);
                var yScale = height / (topHeight + bottomHeight);
                xScale = isNaN(xScale) || xScale > 1 ? 1 : xScale;
                yScale = isNaN(yScale) || yScale > 1 ? 1 : yScale;
                sizableWidth = sizableWidth < 0 ? 0 : sizableWidth;
                sizableHeight = sizableHeight < 0 ? 0 : sizableHeight;
                if (frame._rotated) {
                    data[0].y = -appx;
                    data[0].x = -appy;
                    data[1].y = rightWidth * xScale - appx;
                    data[1].x = bottomHeight * yScale - appy;
                    data[2].y = data[1].y + sizableWidth;
                    data[2].x = data[1].x + sizableHeight;
                    data[3].y = width - appx;
                    data[3].x = height - appy;
                } else {
                    data[0].x = -appx;
                    data[0].y = -appy;
                    data[1].x = leftWidth * xScale - appx;
                    data[1].y = bottomHeight * yScale - appy;
                    data[2].x = data[1].x + sizableWidth;
                    data[2].y = data[1].y + sizableHeight;
                    data[3].x = width - appx;
                    data[3].y = height - appy;
                }
                renderData.vertDirty = false;
            },
            draw: function draw(ctx, comp) {
                var node = comp.node;
                var frame = comp._spriteFrame;
                var matrix = node._worldMatrix;
                var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
                ctx.transform(a, b, c, d, tx, ty);
                ctx.scale(1, -1);
                if (frame._rotated) {
                    ctx.rotate(-Math.PI / 2);
                }
                utils.context.setGlobalAlpha(ctx, node.opacity / 255);
                var tex = frame._texture, data = comp._renderData._data;
                var image = utils.getColorizedImage(tex, node._color);
                var drawCall = 0;
                var off = void 0, ld = void 0, rd = void 0, td = void 0, bd = void 0, x = void 0, y = void 0, w = void 0, h = void 0, sx = void 0, sy = void 0, sw = void 0, sh = void 0;
                for (var r = 0; r < 3; ++r) {
                    bd = data[r];
                    td = data[r + 1];
                    for (var _c = 0; _c < 3; ++_c) {
                        ld = data[_c];
                        rd = data[_c + 1];
                        x = ld.x;
                        y = bd.y;
                        w = rd.x - x;
                        h = td.y - y;
                        y = -y - h;
                        sx = ld.u;
                        sy = td.v;
                        sw = rd.u - sx;
                        sh = bd.v - sy;
                        if (sw > 0 && sh > 0 && w > 0 && h > 0) {
                            ctx.drawImage(image, sx, sy, sw, sh, x, y, w, h);
                            drawCall++;
                        }
                    }
                }
                return drawCall;
            }
        };
        module.exports = renderer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,