(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/render-flow.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var DONOTHING = 0;
        var LOCAL_TRANSFORM = 1 << 0;
        var WORLD_TRANSFORM = 1 << 1;
        var TRANSFORM = LOCAL_TRANSFORM | WORLD_TRANSFORM;
        var UPDATE_RENDER_DATA = 1 << 2;
        var OPACITY = 1 << 3;
        var RENDER = 1 << 4;
        var CUSTOM_IA_RENDER = 1 << 5;
        var CHILDREN = 1 << 6;
        var POST_UPDATE_RENDER_DATA = 1 << 7;
        var POST_RENDER = 1 << 8;
        var FINAL = 1 << 9;
        var _batcher = void 0;
        var _cullingMask = 0;
        function RenderFlow() {
            this._func = init;
            this._next = null;
        }
        var _proto = RenderFlow.prototype;
        _proto._doNothing = function () {
        };
        _proto._localTransform = function (node) {
            node._updateLocalMatrix();
            node._renderFlag &= ~LOCAL_TRANSFORM;
            this._next._func(node);
        };
        _proto._worldTransform = function (node) {
            _batcher.worldMatDirty++;
            var t = node._matrix;
            var position = node._position;
            t.m12 = position.x;
            t.m13 = position.y;
            t.m14 = position.z;
            node._mulMat(node._worldMatrix, node._parent._worldMatrix, t);
            node._renderFlag &= ~WORLD_TRANSFORM;
            this._next._func(node);
            _batcher.worldMatDirty--;
        };
        _proto._opacity = function (node) {
            _batcher.parentOpacityDirty++;
            var comp = node._renderComponent;
            if (comp && comp._updateColor)
                comp._updateColor();
            node._renderFlag &= ~OPACITY;
            this._next._func(node);
            _batcher.parentOpacityDirty--;
        };
        _proto._updateRenderData = function (node) {
            var comp = node._renderComponent;
            comp._assembler.updateRenderData(comp);
            node._renderFlag &= ~UPDATE_RENDER_DATA;
            this._next._func(node);
        };
        _proto._render = function (node) {
            var comp = node._renderComponent;
            _batcher._commitComp(comp, comp._assembler, node._cullingMask);
            this._next._func(node);
        };
        _proto._customIARender = function (node) {
            var comp = node._renderComponent;
            _batcher._commitIA(comp, comp._assembler, node._cullingMask);
            this._next._func(node);
        };
        _proto._children = function (node) {
            var cullingMask = _cullingMask;
            var batcher = _batcher;
            var parentOpacity = batcher.parentOpacity;
            var opacity = batcher.parentOpacity *= node._opacity / 255;
            var worldTransformFlag = batcher.worldMatDirty ? WORLD_TRANSFORM : 0;
            var worldOpacityFlag = batcher.parentOpacityDirty ? OPACITY : 0;
            var worldDirtyFlag = worldTransformFlag | worldOpacityFlag;
            var children = node._children;
            for (var i = 0, l = children.length; i < l; i++) {
                var c = children[i];
                c._renderFlag |= worldDirtyFlag;
                if (!c._activeInHierarchy || c._opacity === 0)
                    continue;
                var colorVal = c._color._val;
                c._color._fastSetA(c._opacity * opacity);
                flows[c._renderFlag]._func(c);
                c._color._val = colorVal;
            }
            batcher.parentOpacity = parentOpacity;
            this._next._func(node);
        };
        _proto._postUpdateRenderData = function (node) {
            var comp = node._renderComponent;
            comp._postAssembler && comp._postAssembler.updateRenderData(comp);
            node._renderFlag &= ~POST_UPDATE_RENDER_DATA;
            this._next._func(node);
        };
        _proto._postRender = function (node) {
            var comp = node._renderComponent;
            _batcher._commitComp(comp, comp._postAssembler, node._cullingMask);
            this._next._func(node);
        };
        var EMPTY_FLOW = new RenderFlow();
        EMPTY_FLOW._func = EMPTY_FLOW._doNothing;
        EMPTY_FLOW._next = EMPTY_FLOW;
        var flows = {};
        function createFlow(flag, next) {
            var flow = new RenderFlow();
            flow._next = next || EMPTY_FLOW;
            switch (flag) {
            case DONOTHING:
                flow._func = flow._doNothing;
                break;
            case LOCAL_TRANSFORM:
                flow._func = flow._localTransform;
                break;
            case WORLD_TRANSFORM:
                flow._func = flow._worldTransform;
                break;
            case OPACITY:
                flow._func = flow._opacity;
                break;
            case UPDATE_RENDER_DATA:
                flow._func = flow._updateRenderData;
                break;
            case RENDER:
                flow._func = flow._render;
                break;
            case CUSTOM_IA_RENDER:
                flow._func = flow._customIARender;
                break;
            case CHILDREN:
                flow._func = flow._children;
                break;
            case POST_UPDATE_RENDER_DATA:
                flow._func = flow._postUpdateRenderData;
                break;
            case POST_RENDER:
                flow._func = flow._postRender;
                break;
            }
            return flow;
        }
        function getFlow(flag) {
            var flow = null;
            var tFlag = FINAL;
            while (tFlag > 0) {
                if (tFlag & flag)
                    flow = createFlow(tFlag, flow);
                tFlag = tFlag >> 1;
            }
            return flow;
        }
        function init(node) {
            var flag = node._renderFlag;
            var r = flows[flag] = getFlow(flag);
            r._func(node);
        }
        RenderFlow.flows = flows;
        RenderFlow.createFlow = createFlow;
        RenderFlow.visit = function (scene) {
            _batcher.reset();
            _batcher.walking = true;
            _cullingMask = 1 << scene.groupIndex;
            if (scene._renderFlag & WORLD_TRANSFORM) {
                _batcher.worldMatDirty++;
                scene._calculWorldMatrix();
                scene._renderFlag &= ~WORLD_TRANSFORM;
                flows[scene._renderFlag]._func(scene);
                _batcher.worldMatDirty--;
            } else {
                flows[scene._renderFlag]._func(scene);
            }
            _batcher.terminate();
            _batcher.walking = false;
        };
        RenderFlow.init = function (batcher) {
            _batcher = batcher;
            flows[0] = EMPTY_FLOW;
            for (var i = 1; i < FINAL; i++) {
                flows[i] = new RenderFlow();
            }
        };
        RenderFlow.FLAG_DONOTHING = DONOTHING;
        RenderFlow.FLAG_LOCAL_TRANSFORM = LOCAL_TRANSFORM;
        RenderFlow.FLAG_WORLD_TRANSFORM = WORLD_TRANSFORM;
        RenderFlow.FLAG_TRANSFORM = TRANSFORM;
        RenderFlow.FLAG_OPACITY = OPACITY;
        RenderFlow.FLAG_UPDATE_RENDER_DATA = UPDATE_RENDER_DATA;
        RenderFlow.FLAG_RENDER = RENDER;
        RenderFlow.FLAG_CUSTOM_IA_RENDER = CUSTOM_IA_RENDER;
        RenderFlow.FLAG_CHILDREN = CHILDREN;
        RenderFlow.FLAG_POST_UPDATE_RENDER_DATA = POST_UPDATE_RENDER_DATA;
        RenderFlow.FLAG_POST_RENDER = POST_RENDER;
        RenderFlow.FLAG_FINAL = FINAL;
        module.exports = cc.RenderFlow = RenderFlow;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,