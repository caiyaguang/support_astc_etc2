(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/utils/label/bmfont.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }
        var macro = require('../../../platform/CCMacro');
        var Label = require('../../../components/CCLabel');
        var Overflow = Label.Overflow;
        var textUtils = require('../../../utils/text-utils');
        var shareLabelInfo = require('../utils').shareLabelInfo;
        var LetterInfo = function LetterInfo() {
            this.char = '';
            this.valid = true;
            this.x = 0;
            this.y = 0;
            this.line = 0;
            this.hash = '';
        };
        var _tmpRect = cc.rect();
        var _comp = null;
        var _horizontalKernings = [];
        var _lettersInfo = [];
        var _linesWidth = [];
        var _linesOffsetX = [];
        var _fntConfig = null;
        var _numberOfLines = 0;
        var _textDesiredHeight = 0;
        var _letterOffsetY = 0;
        var _tailoredTopY = 0;
        var _tailoredBottomY = 0;
        var _bmfontScale = 1;
        var _lineBreakWithoutSpaces = false;
        var _spriteFrame = null;
        var _lineSpacing = 0;
        var _contentSize = cc.size();
        var _string = '';
        var _fontSize = 0;
        var _originFontSize = 0;
        var _hAlign = 0;
        var _vAlign = 0;
        var _spacingX = 0;
        var _lineHeight = 0;
        var _overflow = 0;
        var _isWrapText = false;
        var _labelWidth = 0;
        var _labelHeight = 0;
        var _maxLineWidth = 0;
        module.exports = _defineProperty({
            updateRenderData: function updateRenderData(comp) {
                if (!comp._renderData.vertDirty)
                    return;
                if (_comp === comp)
                    return;
                _comp = comp;
                this._updateFontFamily(comp);
                this._updateProperties(comp);
                this._updateLabelInfo(comp);
                this._updateContent();
                _comp._actualFontSize = _fontSize;
                _comp.node.setContentSize(_contentSize);
                _comp._renderData.vertDirty = _comp._renderData.uvDirty = false;
                _comp = null;
                this._resetProperties();
            },
            _updateFontScale: function _updateFontScale() {
                _bmfontScale = _fontSize / _originFontSize;
            },
            _updateFontFamily: function _updateFontFamily(comp) {
                var fontAsset = comp.font;
                _spriteFrame = fontAsset.spriteFrame;
                _fntConfig = fontAsset._fntConfig;
                shareLabelInfo.fontAtlas = fontAsset._fontDefDictionary;
            },
            _updateLabelInfo: function _updateLabelInfo() {
                shareLabelInfo.hash = '';
                shareLabelInfo.margin = 0;
            },
            _updateProperties: function _updateProperties(comp) {
                _string = comp.string.toString();
                _fontSize = comp.fontSize;
                _originFontSize = _fntConfig ? _fntConfig.fontSize : comp.fontSize;
                _hAlign = comp.horizontalAlign;
                _vAlign = comp.verticalAlign;
                _spacingX = comp.spacingX;
                _overflow = comp.overflow;
                _lineHeight = comp._lineHeight;
                _contentSize.width = _comp.node.width;
                _contentSize.height = _comp.node.height;
                if (_overflow === Overflow.NONE) {
                    _isWrapText = false;
                    _contentSize.width += shareLabelInfo.margin * 2;
                    _contentSize.height += shareLabelInfo.margin * 2;
                } else if (_overflow === Overflow.RESIZE_HEIGHT) {
                    _isWrapText = true;
                    _contentSize.height += shareLabelInfo.margin * 2;
                } else {
                    _isWrapText = comp.enableWrapText;
                }
                shareLabelInfo.lineHeight = _lineHeight;
                shareLabelInfo.fontSize = _fontSize;
                this._setupBMFontOverflowMetrics();
            },
            _resetProperties: function _resetProperties() {
                _fntConfig = null;
                _spriteFrame = null;
                shareLabelInfo.hash = '';
                shareLabelInfo.margin = 0;
            },
            _updateContent: function _updateContent() {
                this._updateFontScale();
                this._computeHorizontalKerningForText();
                this._alignText();
            },
            _computeHorizontalKerningForText: function _computeHorizontalKerningForText() {
                var string = _string;
                var stringLen = string.length;
                var kerningDict = _fntConfig.kerningDict;
                var horizontalKernings = _horizontalKernings;
                var prev = -1;
                for (var i = 0; i < stringLen; ++i) {
                    var key = string.charCodeAt(i);
                    var kerningAmount = kerningDict[prev << 16 | key & 65535] || 0;
                    if (i < stringLen - 1) {
                        horizontalKernings[i] = kerningAmount;
                    } else {
                        horizontalKernings[i] = 0;
                    }
                    prev = key;
                }
            },
            _multilineTextWrap: function _multilineTextWrap(nextTokenFunc) {
                var textLen = _string.length;
                var lineIndex = 0;
                var nextTokenX = 0;
                var nextTokenY = 0;
                var longestLine = 0;
                var letterRight = 0;
                var highestY = 0;
                var lowestY = 0;
                var letterDef = null;
                var letterPosition = cc.v2(0, 0);
                for (var index = 0; index < textLen;) {
                    var character = _string.charAt(index);
                    if (character === '\n') {
                        _linesWidth.push(letterRight);
                        letterRight = 0;
                        lineIndex++;
                        nextTokenX = 0;
                        nextTokenY -= _lineHeight * _bmfontScale + _lineSpacing;
                        this._recordPlaceholderInfo(index, character);
                        index++;
                        continue;
                    }
                    var tokenLen = nextTokenFunc(_string, index, textLen);
                    var tokenHighestY = highestY;
                    var tokenLowestY = lowestY;
                    var tokenRight = letterRight;
                    var nextLetterX = nextTokenX;
                    var newLine = false;
                    for (var tmp = 0; tmp < tokenLen; ++tmp) {
                        var letterIndex = index + tmp;
                        character = _string.charAt(letterIndex);
                        if (character === '\r') {
                            this._recordPlaceholderInfo(letterIndex, character);
                            continue;
                        }
                        letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);
                        if (!letterDef) {
                            this._recordPlaceholderInfo(letterIndex, character);
                            console.log('Can\'t find letter definition in texture atlas ' + _fntConfig.atlasName + ' for letter:' + character);
                            continue;
                        }
                        var letterX = nextLetterX + letterDef.offsetX * _bmfontScale - shareLabelInfo.margin;
                        if (_isWrapText && _maxLineWidth > 0 && nextTokenX > 0 && letterX + letterDef.w * _bmfontScale > _maxLineWidth && !textUtils.isUnicodeSpace(character)) {
                            _linesWidth.push(letterRight);
                            letterRight = 0;
                            lineIndex++;
                            nextTokenX = 0;
                            nextTokenY -= _lineHeight * _bmfontScale + _lineSpacing;
                            newLine = true;
                            break;
                        } else {
                            letterPosition.x = letterX;
                        }
                        letterPosition.y = nextTokenY - letterDef.offsetY * _bmfontScale + shareLabelInfo.margin;
                        this._recordLetterInfo(letterPosition, character, letterIndex, lineIndex);
                        if (letterIndex + 1 < _horizontalKernings.length && letterIndex < textLen - 1) {
                            nextLetterX += _horizontalKernings[letterIndex + 1];
                        }
                        nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX - shareLabelInfo.margin * 2;
                        tokenRight = letterPosition.x + letterDef.w * _bmfontScale - shareLabelInfo.margin;
                        if (tokenHighestY < letterPosition.y) {
                            tokenHighestY = letterPosition.y;
                        }
                        if (tokenLowestY > letterPosition.y - letterDef.h * _bmfontScale) {
                            tokenLowestY = letterPosition.y - letterDef.h * _bmfontScale;
                        }
                    }
                    if (newLine)
                        continue;
                    nextTokenX = nextLetterX;
                    letterRight = tokenRight;
                    if (highestY < tokenHighestY) {
                        highestY = tokenHighestY;
                    }
                    if (lowestY > tokenLowestY) {
                        lowestY = tokenLowestY;
                    }
                    if (longestLine < letterRight) {
                        longestLine = letterRight;
                    }
                    index += tokenLen;
                }
                _linesWidth.push(letterRight);
                _numberOfLines = lineIndex + 1;
                _textDesiredHeight = _numberOfLines * _lineHeight * _bmfontScale;
                if (_numberOfLines > 1) {
                    _textDesiredHeight += (_numberOfLines - 1) * _lineSpacing;
                }
                _contentSize.width = _labelWidth;
                _contentSize.height = _labelHeight;
                if (_labelWidth <= 0) {
                    _contentSize.width = parseFloat(longestLine.toFixed(2)) + shareLabelInfo.margin * 2;
                }
                if (_labelHeight <= 0) {
                    _contentSize.height = parseFloat(_textDesiredHeight.toFixed(2)) + shareLabelInfo.margin * 2;
                }
                _tailoredTopY = _contentSize.height;
                _tailoredBottomY = 0;
                if (highestY > 0) {
                    _tailoredTopY = _contentSize.height + highestY;
                }
                if (lowestY < -_textDesiredHeight) {
                    _tailoredBottomY = _textDesiredHeight + lowestY;
                }
                return true;
            },
            _getFirstCharLen: function _getFirstCharLen() {
                return 1;
            },
            _getFirstWordLen: function _getFirstWordLen(text, startIndex, textLen) {
                var character = text.charAt(startIndex);
                if (textUtils.isUnicodeCJK(character) || character === '\n' || textUtils.isUnicodeSpace(character)) {
                    return 1;
                }
                var len = 1;
                var letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);
                if (!letterDef) {
                    return len;
                }
                var nextLetterX = letterDef.xAdvance * _bmfontScale + _spacingX;
                var letterX = void 0;
                for (var index = startIndex + 1; index < textLen; ++index) {
                    character = text.charAt(index);
                    letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);
                    if (!letterDef) {
                        break;
                    }
                    letterX = nextLetterX + letterDef.offsetX * _bmfontScale;
                    if (letterX + letterDef.w * _bmfontScale > _maxLineWidth && !textUtils.isUnicodeSpace(character) && _maxLineWidth > 0) {
                        return len;
                    }
                    nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;
                    if (character === '\n' || textUtils.isUnicodeSpace(character) || textUtils.isUnicodeCJK(character)) {
                        break;
                    }
                    len++;
                }
                return len;
            },
            _multilineTextWrapByWord: function _multilineTextWrapByWord() {
                return this._multilineTextWrap(this._getFirstWordLen);
            },
            _multilineTextWrapByChar: function _multilineTextWrapByChar() {
                return this._multilineTextWrap(this._getFirstCharLen);
            },
            _recordPlaceholderInfo: function _recordPlaceholderInfo(letterIndex, char) {
                if (letterIndex >= _lettersInfo.length) {
                    var tmpInfo = new LetterInfo();
                    _lettersInfo.push(tmpInfo);
                }
                _lettersInfo[letterIndex].char = char;
                _lettersInfo[letterIndex].hash = char.charCodeAt(0) + shareLabelInfo.hash;
                _lettersInfo[letterIndex].valid = false;
            },
            _recordLetterInfo: function _recordLetterInfo(letterPosition, character, letterIndex, lineIndex) {
                if (letterIndex >= _lettersInfo.length) {
                    var tmpInfo = new LetterInfo();
                    _lettersInfo.push(tmpInfo);
                }
                var char = character.charCodeAt(0);
                var key = char + shareLabelInfo.hash;
                _lettersInfo[letterIndex].line = lineIndex;
                _lettersInfo[letterIndex].char = character;
                _lettersInfo[letterIndex].hash = key;
                _lettersInfo[letterIndex].valid = shareLabelInfo.fontAtlas.getLetter(key).valid;
                _lettersInfo[letterIndex].x = letterPosition.x;
                _lettersInfo[letterIndex].y = letterPosition.y;
            },
            _alignText: function _alignText() {
                _textDesiredHeight = 0;
                _linesWidth.length = 0;
                if (!_lineBreakWithoutSpaces) {
                    this._multilineTextWrapByWord();
                } else {
                    this._multilineTextWrapByChar();
                }
                this._computeAlignmentOffset();
                if (_overflow === Overflow.SHRINK) {
                    if (_fontSize > 0 && this._isVerticalClamp()) {
                        this._shrinkLabelToContentSize(this._isVerticalClamp);
                    }
                }
                if (!this._updateQuads()) {
                    if (_overflow === Overflow.SHRINK) {
                        this._shrinkLabelToContentSize(this._isHorizontalClamp);
                    }
                }
            },
            _scaleFontSizeDown: function _scaleFontSizeDown(fontSize) {
                var shouldUpdateContent = true;
                if (!fontSize) {
                    fontSize = 0.1;
                    shouldUpdateContent = false;
                }
                _fontSize = fontSize;
                if (shouldUpdateContent) {
                    this._updateContent();
                }
            },
            _shrinkLabelToContentSize: function _shrinkLabelToContentSize(lambda) {
                var fontSize = _fontSize;
                var i = 0;
                var flag = true;
                while (lambda()) {
                    ++i;
                    var newFontSize = fontSize - i;
                    flag = false;
                    if (newFontSize <= 0) {
                        break;
                    }
                    _bmfontScale = newFontSize / _originFontSize;
                    if (!_lineBreakWithoutSpaces) {
                        this._multilineTextWrapByWord();
                    } else {
                        this._multilineTextWrapByChar();
                    }
                    this._computeAlignmentOffset();
                }
                if (!flag) {
                    if (fontSize - i >= 0) {
                        this._scaleFontSizeDown(fontSize - i);
                    }
                }
            },
            _isVerticalClamp: function _isVerticalClamp() {
                if (_textDesiredHeight > _contentSize.height) {
                    return true;
                } else {
                    return false;
                }
            },
            _isHorizontalClamp: function _isHorizontalClamp() {
                var letterClamp = false;
                for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
                    var letterInfo = _lettersInfo[ctr];
                    if (letterInfo.valid) {
                        var letterDef = shareLabelInfo.fontAtlas.getLetter(letterInfo.hash);
                        var px = letterInfo.x + letterDef.w * _bmfontScale;
                        var lineIndex = letterInfo.line;
                        if (_labelWidth > 0) {
                            if (!_isWrapText) {
                                if (px > _contentSize.width) {
                                    letterClamp = true;
                                    break;
                                }
                            } else {
                                var wordWidth = _linesWidth[lineIndex];
                                if (wordWidth > _contentSize.width && (px > _contentSize.width || px < 0)) {
                                    letterClamp = true;
                                    break;
                                }
                            }
                        }
                    }
                }
                return letterClamp;
            },
            _isHorizontalClamped: function _isHorizontalClamped(px, lineIndex) {
                var wordWidth = _linesWidth[lineIndex];
                var letterOverClamp = px > _contentSize.width || px < 0;
                if (!_isWrapText) {
                    return letterOverClamp;
                } else {
                    return wordWidth > _contentSize.width && letterOverClamp;
                }
            },
            _updateQuads: function _updateQuads() {
                var texture = shareLabelInfo.fontAtlas.getTexture();
                var node = _comp.node;
                var renderData = _comp._renderData;
                renderData.dataLength = renderData.vertexCount = renderData.indiceCount = 0;
                var contentSize = _contentSize, appx = node._anchorPoint.x * contentSize.width, appy = node._anchorPoint.y * contentSize.height;
                var ret = true;
                for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
                    var letterInfo = _lettersInfo[ctr];
                    if (!letterInfo.valid)
                        continue;
                    var letterDef = shareLabelInfo.fontAtlas.getLetter(letterInfo.hash);
                    _tmpRect.height = letterDef.h;
                    _tmpRect.width = letterDef.w;
                    _tmpRect.x = letterDef.u;
                    _tmpRect.y = letterDef.v;
                    var py = letterInfo.y + _letterOffsetY;
                    if (_labelHeight > 0) {
                        if (py > _tailoredTopY) {
                            var clipTop = py - _tailoredTopY;
                            _tmpRect.y += clipTop;
                            _tmpRect.height -= clipTop;
                            py = py - clipTop;
                        }
                        if (py - letterDef.h * _bmfontScale < _tailoredBottomY && _overflow === Overflow.CLAMP) {
                            _tmpRect.height = py < _tailoredBottomY ? 0 : py - _tailoredBottomY;
                        }
                    }
                    var lineIndex = letterInfo.line;
                    var px = letterInfo.x + letterDef.w / 2 * _bmfontScale + _linesOffsetX[lineIndex];
                    if (_labelWidth > 0) {
                        if (this._isHorizontalClamped(px, lineIndex)) {
                            if (_overflow === Overflow.CLAMP) {
                                _tmpRect.width = 0;
                            } else if (_overflow === Overflow.SHRINK) {
                                if (_contentSize.width > letterDef.w) {
                                    ret = false;
                                    break;
                                } else {
                                    _tmpRect.width = 0;
                                }
                            }
                        }
                    }
                    if (_tmpRect.height > 0 && _tmpRect.width > 0) {
                        var isRotated = this._determineRect(_tmpRect);
                        var letterPositionX = letterInfo.x + _linesOffsetX[letterInfo.line];
                        this.appendQuad(renderData, texture, _tmpRect, isRotated, letterPositionX - appx, py - appy, _bmfontScale);
                    }
                }
                return ret;
            },
            appendQuad: function appendQuad(renderData, texture, rect, rotated, x, y, scale) {
            },
            _determineRect: function _determineRect(tempRect) {
                var isRotated = _spriteFrame.isRotated();
                var originalSize = _spriteFrame._originalSize;
                var rect = _spriteFrame._rect;
                var offset = _spriteFrame._offset;
                var trimmedLeft = offset.x + (originalSize.width - rect.width) / 2;
                var trimmedTop = offset.y - (originalSize.height - rect.height) / 2;
                if (!isRotated) {
                    tempRect.x += rect.x - trimmedLeft;
                    tempRect.y += rect.y + trimmedTop;
                } else {
                    var originalX = tempRect.x;
                    tempRect.x = rect.x + rect.height - tempRect.y - tempRect.height - trimmedTop;
                    tempRect.y = originalX + rect.y - trimmedLeft;
                    if (tempRect.y < 0) {
                        tempRect.height = tempRect.height + trimmedTop;
                    }
                }
                return isRotated;
            },
            _computeAlignmentOffset: function _computeAlignmentOffset() {
                _linesOffsetX.length = 0;
                switch (_hAlign) {
                case macro.TextAlignment.LEFT:
                    for (var i = 0; i < _numberOfLines; ++i) {
                        _linesOffsetX.push(0);
                    }
                    break;
                case macro.TextAlignment.CENTER:
                    for (var _i = 0, l = _linesWidth.length; _i < l; _i++) {
                        _linesOffsetX.push((_contentSize.width - _linesWidth[_i]) / 2);
                    }
                    break;
                case macro.TextAlignment.RIGHT:
                    for (var _i2 = 0, _l = _linesWidth.length; _i2 < _l; _i2++) {
                        _linesOffsetX.push(_contentSize.width - _linesWidth[_i2]);
                    }
                    break;
                default:
                    break;
                }
                _letterOffsetY = (_contentSize.height + _textDesiredHeight) / 2;
                if (_vAlign !== macro.VerticalTextAlignment.TOP) {
                    var blank = (_lineHeight - _originFontSize) * _bmfontScale;
                    if (_vAlign === macro.VerticalTextAlignment.BOTTOM) {
                        _letterOffsetY -= blank;
                    } else {
                        _letterOffsetY -= blank / 2;
                    }
                }
            },
            _setupBMFontOverflowMetrics: function _setupBMFontOverflowMetrics() {
                var newWidth = _contentSize.width, newHeight = _contentSize.height;
                if (_overflow === Overflow.RESIZE_HEIGHT) {
                    newHeight = 0;
                }
                if (_overflow === Overflow.NONE) {
                    newWidth = 0;
                    newHeight = 0;
                }
                _labelWidth = newWidth;
                _labelHeight = newHeight;
                _maxLineWidth = newWidth;
            }
        }, 'appendQuad', function appendQuad(comp, texture, rect, rotated, x, y, scale) {
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,