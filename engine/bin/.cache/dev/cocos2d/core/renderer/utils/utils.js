(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/utils/utils.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var dynamicAtlasManager = require('./dynamic-atlas/manager');
        var WHITE = cc.Color.WHITE;
        var shareLabelInfo = {
            fontAtlas: null,
            fontSize: 0,
            lineHeight: 0,
            hAlign: 0,
            vAlign: 0,
            hash: '',
            fontFamily: '',
            fontDesc: 'Arial',
            color: WHITE,
            isOutlined: false,
            out: WHITE,
            margin: 0
        };
        module.exports = {
            packToDynamicAtlas: function packToDynamicAtlas(comp, frame) {
                if (frame && !CC_TEST) {
                    if (!frame._original && dynamicAtlasManager) {
                        var packedFrame = dynamicAtlasManager.insertSpriteFrame(frame);
                        if (packedFrame) {
                            frame._setDynamicAtlasFrame(packedFrame);
                        }
                    }
                    if (comp.sharedMaterials[0].getProperty('texture') !== frame._texture) {
                        comp._activateMaterial(true);
                    }
                }
            },
            deleteFromDynamicAtlas: function deleteFromDynamicAtlas(comp, frame) {
                if (frame && !CC_TEST) {
                    if (frame._original && dynamicAtlasManager) {
                        dynamicAtlasManager.deleteAtlasTexture(frame);
                        frame._resetDynamicAtlasFrame();
                    }
                }
            },
            getFontFamily: function getFontFamily(comp) {
                if (!comp.useSystemFont) {
                    if (comp.font) {
                        if (comp.font._nativeAsset)
                            return comp.font._nativeAsset;
                        cc.loader.load(comp.font.nativeUrl, function (err, asset) {
                            comp.font._nativeAsset = asset;
                            comp._updateRenderData(true);
                        });
                        return 'Arial';
                    }
                    return 'Arial';
                } else {
                    return comp.fontFamily;
                }
            },
            shareLabelInfo: shareLabelInfo
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,