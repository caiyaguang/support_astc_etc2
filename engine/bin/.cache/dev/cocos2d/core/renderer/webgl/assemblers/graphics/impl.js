(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/graphics/impl.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _inputAssembler = require('../../../../../renderer/core/input-assembler');
        var _inputAssembler2 = _interopRequireDefault(_inputAssembler);
        var _iaRenderData = require('../../../../../renderer/render-data/ia-render-data');
        var _iaRenderData2 = _interopRequireDefault(_iaRenderData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var Helper = require('../../../../graphics/helper');
        var PointFlags = require('../../../../graphics/types').PointFlags;
        var MeshBuffer = require('../../mesh-buffer');
        var vfmtPosColor = require('../../vertex-format').vfmtPosColor;
        var renderer = require('../../../index');
        var Point = cc.Class({
            name: 'cc.GraphicsPoint',
            extends: cc.Vec2,
            ctor: function ctor(x, y) {
                this.reset();
            },
            reset: function reset() {
                this.dx = 0;
                this.dy = 0;
                this.dmx = 0;
                this.dmy = 0;
                this.flags = 0;
                this.len = 0;
            }
        });
        function Path() {
            this.reset();
        }
        cc.js.mixin(Path.prototype, {
            reset: function reset() {
                this.closed = false;
                this.nbevel = 0;
                this.complex = true;
                if (this.points) {
                    this.points.length = 0;
                } else {
                    this.points = [];
                }
            }
        });
        function Impl(graphics) {
            this._tessTol = 0.25;
            this._distTol = 0.01;
            this._updatePathOffset = false;
            this._paths = null;
            this._pathLength = 0;
            this._pathOffset = 0;
            this._points = null;
            this._pointsOffset = 0;
            this._commandx = 0;
            this._commandy = 0;
            this._paths = [];
            this._points = [];
            this._renderDatas = [];
            this._dataOffset = 0;
        }
        cc.js.mixin(Impl.prototype, {
            moveTo: function moveTo(x, y) {
                if (this._updatePathOffset) {
                    this._pathOffset = this._pathLength;
                    this._updatePathOffset = false;
                }
                this._addPath();
                this._addPoint(x, y, PointFlags.PT_CORNER);
                this._commandx = x;
                this._commandy = y;
            },
            lineTo: function lineTo(x, y) {
                this._addPoint(x, y, PointFlags.PT_CORNER);
                this._commandx = x;
                this._commandy = y;
            },
            bezierCurveTo: function bezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
                var path = this._curPath;
                var last = path.points[path.points.length - 1];
                if (last.x === c1x && last.y === c1y && c2x === x && c2y === y) {
                    this.lineTo(x, y);
                    return;
                }
                Helper.tesselateBezier(this, last.x, last.y, c1x, c1y, c2x, c2y, x, y, 0, PointFlags.PT_CORNER);
                this._commandx = x;
                this._commandy = y;
            },
            quadraticCurveTo: function quadraticCurveTo(cx, cy, x, y) {
                var x0 = this._commandx;
                var y0 = this._commandy;
                this.bezierCurveTo(x0 + 2 / 3 * (cx - x0), y0 + 2 / 3 * (cy - y0), x + 2 / 3 * (cx - x), y + 2 / 3 * (cy - y), x, y);
            },
            arc: function arc(cx, cy, r, startAngle, endAngle, counterclockwise) {
                Helper.arc(this, cx, cy, r, startAngle, endAngle, counterclockwise);
            },
            ellipse: function ellipse(cx, cy, rx, ry) {
                Helper.ellipse(this, cx, cy, rx, ry);
                this._curPath.complex = false;
            },
            circle: function circle(cx, cy, r) {
                Helper.ellipse(this, cx, cy, r, r);
                this._curPath.complex = false;
            },
            rect: function rect(x, y, w, h) {
                this.moveTo(x, y);
                this.lineTo(x, y + h);
                this.lineTo(x + w, y + h);
                this.lineTo(x + w, y);
                this.close();
                this._curPath.complex = false;
            },
            roundRect: function roundRect(x, y, w, h, r) {
                Helper.roundRect(this, x, y, w, h, r);
                this._curPath.complex = false;
            },
            clear: function clear(comp, clean) {
                this._pathLength = 0;
                this._pathOffset = 0;
                this._pointsOffset = 0;
                this._dataOffset = 0;
                this._curPath = null;
                var datas = this._renderDatas;
                if (clean) {
                    this._paths.length = 0;
                    this._points.length = 0;
                    for (var i = 0, l = datas.length; i < l; i++) {
                        var data = datas[i];
                        data.meshbuffer.destroy();
                        data.meshbuffer = null;
                    }
                    datas.length = 0;
                } else {
                    for (var _i = 0, _l = datas.length; _i < _l; _i++) {
                        var _data = datas[_i];
                        var meshbuffer = _data.meshbuffer;
                        meshbuffer.reset();
                    }
                }
            },
            close: function close() {
                this._curPath.closed = true;
            },
            _addPath: function _addPath() {
                var offset = this._pathLength;
                var path = this._paths[offset];
                if (!path) {
                    path = new Path();
                    this._paths.push(path);
                } else {
                    path.reset();
                }
                this._pathLength++;
                this._curPath = path;
                return path;
            },
            _addPoint: function _addPoint(x, y, flags) {
                var path = this._curPath;
                if (!path)
                    return;
                var pt;
                var points = this._points;
                var pathPoints = path.points;
                var offset = this._pointsOffset++;
                pt = points[offset];
                if (!pt) {
                    pt = new Point(x, y);
                    points.push(pt);
                } else {
                    pt.x = x;
                    pt.y = y;
                }
                pt.flags = flags;
                pathPoints.push(pt);
            },
            requestRenderData: function requestRenderData() {
                var renderData = new _iaRenderData2.default();
                var meshbuffer = new MeshBuffer(renderer._handle, vfmtPosColor);
                renderData.meshbuffer = meshbuffer;
                this._renderDatas.push(renderData);
                var ia = new _inputAssembler2.default();
                ia._vertexBuffer = meshbuffer._vb;
                ia._indexBuffer = meshbuffer._ib;
                ia._start = 0;
                renderData.ia = ia;
                return renderData;
            },
            getRenderDatas: function getRenderDatas() {
                if (this._renderDatas.length === 0) {
                    this.requestRenderData();
                }
                return this._renderDatas;
            }
        });
        module.exports = Impl;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,