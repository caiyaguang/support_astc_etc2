(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/motion-streak.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var MotionStreak = require('../../../components/CCMotionStreak');
        var RenderFlow = require('../../render-flow');
        function Point(point, dir) {
            this.point = point || cc.v2();
            this.dir = dir || cc.v2();
            this.distance = 0;
            this.time = 0;
        }
        Point.prototype.setPoint = function (x, y) {
            this.point.x = x;
            this.point.y = y;
        };
        Point.prototype.setDir = function (x, y) {
            this.dir.x = x;
            this.dir.y = y;
        };
        var _tangent = cc.v2();
        var _miter = cc.v2();
        var _normal = cc.v2();
        var _vec2 = cc.v2();
        function normal(out, dir) {
            out.x = -dir.y;
            out.y = dir.x;
            return out;
        }
        function computeMiter(miter, lineA, lineB, halfThick, maxMultiple) {
            lineA.add(lineB, _tangent);
            _tangent.normalizeSelf();
            miter.x = -_tangent.y;
            miter.y = _tangent.x;
            _vec2.x = -lineA.y;
            _vec2.y = lineA.x;
            var multiple = 1 / miter.dot(_vec2);
            if (maxMultiple) {
                multiple = Math.min(multiple, maxMultiple);
            }
            return halfThick * multiple;
        }
        var motionStreakAssembler = {
            updateRenderData: function updateRenderData(comp) {
                var dt = cc.director.getDeltaTime();
                this.update(comp, dt);
                var renderData = comp._renderData;
                var size = comp.node._contentSize;
                var anchor = comp.node._anchorPoint;
                renderData.updateSizeNPivot(size.width, size.height, anchor.x, anchor.y);
                renderData.material = comp.sharedMaterials[0];
            },
            update: function update(comp, dt) {
                var renderData = comp._renderData;
                if (!renderData) {
                    renderData = comp._renderData = comp.requestRenderData();
                }
                if (CC_EDITOR && !comp.preview)
                    return;
                var stroke = comp._stroke / 2;
                var node = comp.node;
                var matrix = node._worldMatrix;
                var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
                var points = comp._points;
                var cur = void 0;
                if (points.length > 1) {
                    var difx = points[0].point.x - tx;
                    var dify = points[0].point.y - ty;
                    if (difx * difx + dify * dify < comp.minSeg) {
                        cur = points[0];
                    }
                }
                if (!cur) {
                    cur = new Point();
                    points.splice(0, 0, cur);
                }
                cur.setPoint(tx, ty);
                cur.time = comp._fadeTime + dt;
                renderData.dataLength = 0;
                if (points.length < 2) {
                    return;
                }
                var data = renderData._data;
                var color = comp._color, cr = color.r, cg = color.g, cb = color.b, ca = color.a;
                var prev = points[1];
                prev.distance = cur.point.sub(prev.point, _vec2).mag();
                _vec2.normalizeSelf();
                prev.setDir(_vec2.x, _vec2.y);
                cur.setDir(_vec2.x, _vec2.y);
                var fadeTime = comp._fadeTime;
                var findLast = false;
                for (var i = points.length - 1; i >= 0; i--) {
                    var p = points[i];
                    var point = p.point;
                    var dir = p.dir;
                    p.time -= dt;
                    if (p.time < 0) {
                        points.splice(i, 1);
                        continue;
                    }
                    var progress = p.time / fadeTime;
                    var next = points[i - 1];
                    if (!findLast) {
                        if (!next) {
                            points.splice(i, 1);
                            continue;
                        }
                        point.x = next.point.x - dir.x * progress;
                        point.y = next.point.y - dir.y * progress;
                    }
                    findLast = true;
                    normal(_normal, dir);
                    renderData.dataLength += 2;
                    var da = progress * ca;
                    var _c = (da << 24 >>> 0) + (cb << 16) + (cg << 8) + cr;
                    var dataIndex = data.length - 1;
                    data[dataIndex].x = point.x - _normal.x * stroke;
                    data[dataIndex].y = point.y - _normal.y * stroke;
                    data[dataIndex].u = 0;
                    data[dataIndex].v = progress;
                    data[dataIndex].color = _c;
                    dataIndex--;
                    data[dataIndex].x = point.x + _normal.x * stroke;
                    data[dataIndex].y = point.y + _normal.y * stroke;
                    data[dataIndex].u = 1;
                    data[dataIndex].v = progress;
                    data[dataIndex].color = _c;
                }
                renderData.vertexCount = renderData.dataLength;
                renderData.indiceCount = renderData.vertexCount <= 2 ? 0 : (renderData.vertexCount - 2) * 3;
            },
            fillBuffers: function fillBuffers(comp, renderer) {
                var node = comp.node, renderData = comp._renderData, data = renderData._data;
                var buffer = renderer._meshBuffer, vertexCount = renderData.vertexCount;
                var offsetInfo = buffer.request(vertexCount, renderData.indiceCount);
                var indiceOffset = offsetInfo.indiceOffset, vertexOffset = offsetInfo.byteOffset >> 2, vertexId = offsetInfo.vertexOffset, vbuf = buffer._vData, uintbuf = buffer._uintVData, ibuf = buffer._iData;
                var vert = void 0;
                for (var i = 0, l = renderData.vertexCount; i < l; i++) {
                    vert = data[i];
                    vbuf[vertexOffset++] = vert.x;
                    vbuf[vertexOffset++] = vert.y;
                    vbuf[vertexOffset++] = vert.u;
                    vbuf[vertexOffset++] = vert.v;
                    uintbuf[vertexOffset++] = vert.color;
                }
                for (var _i = 0, _l = renderData.vertexCount; _i < _l; _i += 2) {
                    var start = vertexId + _i;
                    ibuf[indiceOffset++] = start;
                    ibuf[indiceOffset++] = start + 2;
                    ibuf[indiceOffset++] = start + 1;
                    ibuf[indiceOffset++] = start + 1;
                    ibuf[indiceOffset++] = start + 2;
                    ibuf[indiceOffset++] = start + 3;
                }
                comp.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
            }
        };
        module.exports = MotionStreak._assembler = motionStreakAssembler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,