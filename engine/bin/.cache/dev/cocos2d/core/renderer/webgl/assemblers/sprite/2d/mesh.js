(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/mesh.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var fillVerticesWithoutCalc = require('../../utils').fillVerticesWithoutCalc;
        var packToDynamicAtlas = require('../../../../utils/utils').packToDynamicAtlas;
        module.exports = {
            createData: function createData(sprite) {
                return sprite.requestRenderData();
            },
            updateRenderData: function updateRenderData(sprite) {
                packToDynamicAtlas(sprite, sprite._spriteFrame);
                var renderData = sprite._renderData;
                var frame = sprite.spriteFrame;
                if (!renderData || !frame)
                    return;
                var vertices = frame.vertices;
                if (vertices) {
                    if (renderData.vertexCount !== vertices.x.length) {
                        renderData.vertexCount = vertices.x.length;
                        renderData.dataLength = renderData.vertexCount * 2;
                        renderData.uvDirty = renderData.vertDirty = true;
                    }
                    renderData.indiceCount = vertices.triangles.length;
                    if (renderData.uvDirty) {
                        this.updateUVs(sprite);
                    }
                    var vertDirty = renderData.vertDirty;
                    if (vertDirty) {
                        this.updateVerts(sprite);
                        this.updateWorldVerts(sprite);
                    }
                }
            },
            updateUVs: function updateUVs(sprite) {
                var vertices = sprite.spriteFrame.vertices, u = vertices.nu, v = vertices.nv;
                var renderData = sprite._renderData;
                var data = renderData._data;
                for (var i = 0, l = u.length; i < l; i++) {
                    var vertice = data[i];
                    vertice.u = u[i];
                    vertice.v = v[i];
                }
                renderData.uvDirty = false;
            },
            updateVerts: function updateVerts(sprite) {
                var node = sprite.node, contentWidth = Math.abs(node.width), contentHeight = Math.abs(node.height), appx = node.anchorX * contentWidth, appy = node.anchorY * contentHeight;
                var frame = sprite.spriteFrame, vertices = frame.vertices, x = vertices.x, y = vertices.y, originalWidth = frame._originalSize.width, originalHeight = frame._originalSize.height, rectWidth = frame._rect.width, rectHeight = frame._rect.height, offsetX = frame._offset.x, offsetY = frame._offset.y, trimX = offsetX + (originalWidth - rectWidth) / 2, trimY = offsetY + (originalHeight - rectHeight) / 2;
                var scaleX = contentWidth / (sprite.trim ? rectWidth : originalWidth), scaleY = contentHeight / (sprite.trim ? rectHeight : originalHeight);
                var renderData = sprite._renderData;
                var data = renderData._data;
                if (!sprite.trim) {
                    for (var i = 0, l = x.length; i < l; i++) {
                        var vertice = data[i + l];
                        vertice.x = x[i] * scaleX - appx;
                        vertice.y = (originalHeight - y[i]) * scaleY - appy;
                    }
                } else {
                    for (var _i = 0, _l = x.length; _i < _l; _i++) {
                        var _vertice = data[_i + _l];
                        _vertice.x = (x[_i] - trimX) * scaleX - appx;
                        _vertice.y = (originalHeight - y[_i] - trimY) * scaleY - appy;
                    }
                }
                renderData.vertDirty = false;
            },
            updateWorldVerts: function updateWorldVerts(sprite) {
                var node = sprite.node, renderData = sprite._renderData, data = renderData._data;
                var matrix = node._worldMatrix;
                var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
                for (var i = 0, l = renderData.vertexCount; i < l; i++) {
                    var local = data[i + l];
                    var world = data[i];
                    world.x = local.x * a + local.y * c + tx;
                    world.y = local.x * b + local.y * d + ty;
                }
            },
            fillBuffers: function fillBuffers(sprite, renderer) {
                var vertices = sprite.spriteFrame.vertices;
                if (!vertices) {
                    return;
                }
                if (renderer.worldMatDirty) {
                    this.updateWorldVerts(sprite);
                }
                var buffer = renderer._meshBuffer;
                var node = sprite.node;
                var offsetInfo = fillVerticesWithoutCalc(node, buffer, sprite._renderData, node._color._val);
                var ibuf = buffer._iData, indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset;
                var triangles = vertices.triangles;
                for (var i = 0, l = triangles.length; i < l; i++) {
                    ibuf[indiceOffset++] = vertexId + triangles[i];
                }
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lc2guanMiLCIvVXNlcnMvenpmMjAxOS9EZXNrdG9wL2RldmVsb3BtZW50L3N1cHBvcnRfYXN0Yy9lbmdpbmUvY29jb3MyZC9jb3JlL3JlbmRlcmVyL3dlYmdsL2Fzc2VtYmxlcnMvc3ByaXRlLzJkL21lc2guanMiXSwibmFtZXMiOlsiZmlsbFZlcnRpY2VzV2l0aG91dENhbGMiLCJyZXF1aXJlIiwicGFja1RvRHluYW1pY0F0bGFzIiwibW9kdWxlIiwiZXhwb3J0cyIsImNyZWF0ZURhdGEiLCJzcHJpdGUiLCJyZXF1ZXN0UmVuZGVyRGF0YSIsInVwZGF0ZVJlbmRlckRhdGEiLCJfc3ByaXRlRnJhbWUiLCJyZW5kZXJEYXRhIiwiX3JlbmRlckRhdGEiLCJmcmFtZSIsInNwcml0ZUZyYW1lIiwidmVydGljZXMiLCJ2ZXJ0ZXhDb3VudCIsIngiLCJsZW5ndGgiLCJkYXRhTGVuZ3RoIiwidXZEaXJ0eSIsInZlcnREaXJ0eSIsImluZGljZUNvdW50IiwidHJpYW5nbGVzIiwidXBkYXRlVVZzIiwidXBkYXRlVmVydHMiLCJ1cGRhdGVXb3JsZFZlcnRzIiwidSIsIm51IiwidiIsIm52IiwiZGF0YSIsIl9kYXRhIiwiaSIsImwiLCJ2ZXJ0aWNlIiwibm9kZSIsImNvbnRlbnRXaWR0aCIsIk1hdGgiLCJhYnMiLCJ3aWR0aCIsImNvbnRlbnRIZWlnaHQiLCJoZWlnaHQiLCJhcHB4IiwiYW5jaG9yWCIsImFwcHkiLCJhbmNob3JZIiwieSIsIm9yaWdpbmFsV2lkdGgiLCJfb3JpZ2luYWxTaXplIiwib3JpZ2luYWxIZWlnaHQiLCJyZWN0V2lkdGgiLCJfcmVjdCIsInJlY3RIZWlnaHQiLCJvZmZzZXRYIiwiX29mZnNldCIsIm9mZnNldFkiLCJ0cmltWCIsInRyaW1ZIiwic2NhbGVYIiwidHJpbSIsInNjYWxlWSIsIm1hdHJpeCIsIl93b3JsZE1hdHJpeCIsImEiLCJtMDAiLCJiIiwibTAxIiwiYyIsIm0wNCIsImQiLCJtMDUiLCJ0eCIsIm0xMiIsInR5IiwibTEzIiwibG9jYWwiLCJ3b3JsZCIsImZpbGxCdWZmZXJzIiwicmVuZGVyZXIiLCJ3b3JsZE1hdERpcnR5IiwiYnVmZmVyIiwiX21lc2hCdWZmZXIiLCJvZmZzZXRJbmZvIiwiX2NvbG9yIiwiX3ZhbCIsImlidWYiLCJfaURhdGEiLCJpbmRpY2VPZmZzZXQiLCJ2ZXJ0ZXhJZCIsInZlcnRleE9mZnNldCJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBeUJBLElBQU1BLHVCQUFBQSxHQUEwQkMsT0FBQUEsQ0FBUSxhQUFSQSxFQUF1QkQsdUJBQXZEO1FBQ0EsSUFBTUUsa0JBQUFBLEdBQXFCRCxPQUFBQSxDQUFRLHlCQUFSQSxFQUFtQ0Msa0JBQTlEO1FBRUFDLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCO0FBQUEsWUFDYkUsVUFBQUEsRUFEYSxTQUFBLFVBQUEsQ0FDREMsTUFEQyxFQUNPO0FBQUEsZ0JBQ2hCLE9BQU9BLE1BQUFBLENBQU9DLGlCQUFQRCxFQUFQLENBRGdCO0FBQUEsYUFEUDtBQUFBLFlBS2JFLGdCQUFBQSxFQUxhLFNBQUEsZ0JBQUEsQ0FLS0YsTUFMTCxFQUthO0FBQUEsZ0JBQ3RCSixrQkFBQUEsQ0FBbUJJLE1BQW5CSixFQUEyQkksTUFBQUEsQ0FBT0csWUFBbENQLEVBRHNCO0FBQUEsZ0JBR3RCLElBQUlRLFVBQUFBLEdBQWFKLE1BQUFBLENBQU9LLFdBQXhCLENBSHNCO0FBQUEsZ0JBSXRCLElBQUlDLEtBQUFBLEdBQVFOLE1BQUFBLENBQU9PLFdBQW5CLENBSnNCO0FBQUEsZ0JBS3RCLElBQUksQ0FBQ0gsVUFBRCxJQUFlLENBQUNFLEtBQXBCO0FBQUEsb0JBQTJCLE9BTEw7QUFBQSxnQkFNdEIsSUFBSUUsUUFBQUEsR0FBV0YsS0FBQUEsQ0FBTUUsUUFBckIsQ0FOc0I7QUFBQSxnQkFPdEIsSUFBSUEsUUFBSixFQUFjO0FBQUEsb0JBQ1YsSUFBSUosVUFBQUEsQ0FB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QUEsZ0JBb0IzQixJQUFJbkUsU0FBQUEsR0FBWVIsUUFBQUEsQ0FBU1EsU0FBekIsQ0FwQjJCO0FBQUEsZ0JBcUIzQixLQUFLLElBQUlVLENBQUFBLEdBQUksQ0FBUixFQUFXQyxDQUFBQSxHQUFJWCxTQUFBQSxDQUFVTCxNQUF6QixDQUFMLENBQXNDZSxDQUFBQSxHQUFJQyxDQUExQyxFQUE2Q0QsQ0FBQUEsRUFBN0MsRUFBa0Q7QUFBQSxvQkFDOUNxRCxJQUFBQSxDQUFLRSxZQUFBQSxFQUFMRixJQUF1QkcsUUFBQUEsR0FBV2xFLFNBQUFBLENBQVVVLENBQVZWLENBQWxDK0QsQ0FEOEM7QUFBQSxpQkFyQnZCO0FBQUEsYUEvR2xCO0FBQUEsU0FBakJsRiIsImZpbGUiOiJtZXNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuY29uc3QgZmlsbFZlcnRpY2VzV2l0aG91dENhbGMgPSByZXF1aXJlKCcuLi8uLi91dGlscycpLmZpbGxWZXJ0aWNlc1dpdGhvdXRDYWxjO1xuY29uc3QgcGFja1RvRHluYW1pY0F0bGFzID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnKS5wYWNrVG9EeW5hbWljQXRsYXM7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNyZWF0ZURhdGEgKHNwcml0ZSkge1xuICAgICAgICByZXR1cm4gc3ByaXRlLnJlcXVlc3RSZW5kZXJEYXRhKCk7XG4gICAgfSxcblxuICAgIHVwZGF0ZVJlbmRlckRhdGEgKHNwcml0ZSkge1xuICAgICAgICBwYWNrVG9EeW5hbWljQXRsYXMoc3ByaXRlLCBzcHJpdGUuX3Nwcml0ZUZyYW1lKTtcblxuICAgICAgICBsZXQgcmVuZGVyRGF0YSA9IHNwcml0ZS5fcmVuZGVyRGF0YTtcbiAgICAgICAgbGV0IGZyYW1lID0gc3ByaXRlLnNwcml0ZUZyYW1lO1xuICAgICAgICBpZiAoIXJlbmRlckRhdGEgfHwgIWZyYW1lKSByZXR1cm47XG4gICAgICAgIGxldCB2ZXJ0aWNlcyA9IGZyYW1lLnZlcnRpY2VzO1xuICAgICAgICBpZiAodmVydGljZXMpIHtcbiAgICAgICAgICAgIGlmIChyZW5kZXJEYXRhLnZlcnRleENvdW50ICE9PSB2ZXJ0aWNlcy54Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJlbmRlckRhdGEudmVydGV4Q291bnQgPSB2ZXJ0aWNlcy54Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyAxIGZvciB3b3JsZCB2ZXJ0aWNlcywgMiBmb3IgbG9jYWwgdmVydGljZXNcbiAgICAgICAgICAgICAgICByZW5kZXJEYXRhLmRhdGFMZW5ndGggPSByZW5kZXJEYXRhLnZlcnRleENvdW50ICogMjtcblxuICAgICAgICAgICAgICAgIHJlbmRlckRhdGEudXZEaXJ0eSA9IHJlbmRlckRhdGEudmVydERpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbmRlckRhdGEuaW5kaWNlQ291bnQgPSB2ZXJ0aWNlcy50cmlhbmdsZXMubGVuZ3RoO1xuXG4gICAgICAgICAgICBpZiAocmVuZGVyRGF0YS51dkRpcnR5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVVVnMoc3ByaXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB2ZXJ0RGlydHkgPSByZW5kZXJEYXRhLnZlcnREaXJ0eTtcbiAgICAgICAgICAgIGlmICh2ZXJ0RGlydHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVZlcnRzKHNwcml0ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVXb3JsZFZlcnRzKHNwcml0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlVVZzIChzcHJpdGUpIHtcbiAgICAgICAgbGV0IHZlcnRpY2VzID0gc3ByaXRlLnNwcml0ZUZyYW1lLnZlcnRpY2VzLFxuICAgICAgICAgICAgdSA9IHZlcnRpY2VzLm51LFxuICAgICAgICAgICAgdiA9IHZlcnRpY2VzLm52O1xuXG4gICAgICAgIGxldCByZW5kZXJEYXRhID0gc3ByaXRlLl9yZW5kZXJEYXRhO1xuICAgICAgICBsZXQgZGF0YSA9IHJlbmRlckRhdGEuX2RhdGE7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB2ZXJ0aWNlID0gZGF0YVtpXTtcbiAgICAgICAgICAgIHZlcnRpY2UudSA9IHVbaV07XG4gICAgICAgICAgICB2ZXJ0aWNlLnYgPSB2W2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyRGF0YS51dkRpcnR5ID0gZmFsc2U7XG4gICAgfSxcblxuICAgIHVwZGF0ZVZlcnRzIChzcHJpdGUpIHtcbiAgICAgICAgbGV0IG5vZGUgPSBzcHJpdGUubm9kZSxcbiAgICAgICAgICAgIGNvbnRlbnRXaWR0aCA9IE1hdGguYWJzKG5vZGUud2lkdGgpLFxuICAgICAgICAgICAgY29udGVudEhlaWdodCA9IE1hdGguYWJzKG5vZGUuaGVpZ2h0KSxcbiAgICAgICAgICAgIGFwcHggPSBub2RlLmFuY2hvclggKiBjb250ZW50V2lkdGgsXG4gICAgICAgICAgICBhcHB5ID0gbm9kZS5hbmNob3JZICogY29udGVudEhlaWdodDtcblxuICAgICAgICBsZXQgZnJhbWUgPSBzcHJpdGUuc3ByaXRlRnJhbWUsXG4gICAgICAgICAgICB2ZXJ0aWNlcyA9IGZyYW1lLnZlcnRpY2VzLFxuICAgICAgICAgICAgeCA9IHZlcnRpY2VzLngsXG4gICAgICAgICAgICB5ID0gdmVydGljZXMueSxcbiAgICAgICAgICAgIG9yaWdpbmFsV2lkdGggPSBmcmFtZS5fb3JpZ2luYWxTaXplLndpZHRoLFxuICAgICAgICAgICAgb3JpZ2luYWxIZWlnaHQgPSBmcmFtZS5fb3JpZ2luYWxTaXplLmhlaWdodCxcbiAgICAgICAgICAgIHJlY3RXaWR0aCA9IGZyYW1lLl9yZWN0LndpZHRoLFxuICAgICAgICAgICAgcmVjdEhlaWdodCA9IGZyYW1lLl9yZWN0LmhlaWdodCxcbiAgICAgICAgICAgIG9mZnNldFggPSBmcmFtZS5fb2Zmc2V0LngsXG4gICAgICAgICAgICBvZmZzZXRZID0gZnJhbWUuX29mZnNldC55LFxuICAgICAgICAgICAgdHJpbVggPSBvZmZzZXRYICsgKG9yaWdpbmFsV2lkdGggLSByZWN0V2lkdGgpIC8gMixcbiAgICAgICAgICAgIHRyaW1ZID0gb2Zmc2V0WSArIChvcmlnaW5hbEhlaWdodCAtIHJlY3RIZWlnaHQpIC8gMjtcblxuICAgICAgICBsZXQgc2NhbGVYID0gY29udGVudFdpZHRoIC8gKHNwcml0ZS50cmltID8gcmVjdFdpZHRoIDogb3JpZ2luYWxXaWR0aCksXG4gICAgICAgICAgICBzY2FsZVkgPSBjb250ZW50SGVpZ2h0IC8gKHNwcml0ZS50cmltID8gcmVjdEhlaWdodCA6IG9yaWdpbmFsSGVpZ2h0KTtcblxuICAgICAgICBsZXQgcmVuZGVyRGF0YSA9IHNwcml0ZS5fcmVuZGVyRGF0YTtcbiAgICAgICAgbGV0IGRhdGEgPSByZW5kZXJEYXRhLl9kYXRhO1xuXG4gICAgICAgIGlmICghc3ByaXRlLnRyaW0pIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0geC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgdmVydGljZSA9IGRhdGFbaSArIGxdO1xuICAgICAgICAgICAgICAgIHZlcnRpY2UueCA9ICh4W2ldKSAqIHNjYWxlWCAtIGFwcHg7XG4gICAgICAgICAgICAgICAgdmVydGljZS55ID0gKG9yaWdpbmFsSGVpZ2h0IC0geVtpXSkgKiBzY2FsZVkgLSBhcHB5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB4Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCB2ZXJ0aWNlID0gZGF0YVtpICsgbF07XG4gICAgICAgICAgICAgICAgdmVydGljZS54ID0gKHhbaV0gLSB0cmltWCkgKiBzY2FsZVggLSBhcHB4O1xuICAgICAgICAgICAgICAgIHZlcnRpY2UueSA9IChvcmlnaW5hbEhlaWdodCAtIHlbaV0gLSB0cmltWSkgKiBzY2FsZVkgLSBhcHB5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyRGF0YS52ZXJ0RGlydHkgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgdXBkYXRlV29ybGRWZXJ0cyAoc3ByaXRlKSB7XG4gICAgICAgIGxldCBub2RlID0gc3ByaXRlLm5vZGUsXG4gICAgICAgICAgICByZW5kZXJEYXRhID0gc3ByaXRlLl9yZW5kZXJEYXRhLFxuICAgICAgICAgICAgZGF0YSA9IHJlbmRlckRhdGEuX2RhdGE7XG5cbiAgICAgICAgbGV0IG1hdHJpeCA9IG5vZGUuX3dvcmxkTWF0cml4O1xuXG4gICAgICAgIGxldCBhID0gbWF0cml4Lm0wMCwgYiA9IG1hdHJpeC5tMDEsIGMgPSBtYXRyaXgubTA0LCBkID0gbWF0cml4Lm0wNSxcbiAgICAgICAgICAgIHR4ID0gbWF0cml4Lm0xMiwgdHkgPSBtYXRyaXgubTEzO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHJlbmRlckRhdGEudmVydGV4Q291bnQ7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBsb2NhbCA9IGRhdGFbaSArIGxdO1xuICAgICAgICAgICAgbGV0IHdvcmxkID0gZGF0YVtpXTtcbiAgICAgICAgICAgIHdvcmxkLnggPSBsb2NhbC54ICogYSArIGxvY2FsLnkgKiBjICsgdHg7XG4gICAgICAgICAgICB3b3JsZC55ID0gbG9jYWwueCAqIGIgKyBsb2NhbC55ICogZCArIHR5O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGZpbGxCdWZmZXJzIChzcHJpdGUsIHJlbmRlcmVyKSB7XG4gICAgICAgIGxldCB2ZXJ0aWNlcyA9IHNwcml0ZS5zcHJpdGVGcmFtZS52ZXJ0aWNlcztcbiAgICAgICAgaWYgKCF2ZXJ0aWNlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIHdvcmxkIHZlcnRzXG4gICAgICAgIGlmIChyZW5kZXJlci53b3JsZE1hdERpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVdvcmxkVmVydHMoc3ByaXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJ1ZmZlclxuICAgICAgICBsZXQgYnVmZmVyID0gcmVuZGVyZXIuX21lc2hCdWZmZXI7XG4gICAgICAgIGxldCBub2RlID0gc3ByaXRlLm5vZGU7XG4gICAgICAgIGxldCBvZmZzZXRJbmZvID0gZmlsbFZlcnRpY2VzV2l0aG91dENhbGMobm9kZSwgYnVmZmVyLCBzcHJpdGUuX3JlbmRlckRhdGEsIG5vZGUuX2NvbG9yLl92YWwpO1xuXG4gICAgICAgIGxldCBpYnVmID0gYnVmZmVyLl9pRGF0YSxcbiAgICAgICAgICAgIGluZGljZU9mZnNldCA9IG9mZnNldEluZm8uaW5kaWNlT2Zmc2V0LFxuICAgICAgICAgICAgdmVydGV4SWQgPSBvZmZzZXRJbmZvLnZlcnRleE9mZnNldDtcblxuICAgICAgICBsZXQgdHJpYW5nbGVzID0gdmVydGljZXMudHJpYW5nbGVzO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRyaWFuZ2xlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlidWZbaW5kaWNlT2Zmc2V0KytdID0gdmVydGV4SWQgKyB0cmlhbmdsZXNbaV07XG4gICAgICAgIH1cbiAgICB9LFxufTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBmaWxsVmVydGljZXNXaXRob3V0Q2FsYyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJykuZmlsbFZlcnRpY2VzV2l0aG91dENhbGM7XG52YXIgcGFja1RvRHluYW1pY0F0bGFzID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnKS5wYWNrVG9EeW5hbWljQXRsYXM7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNyZWF0ZURhdGE6IGZ1bmN0aW9uIGNyZWF0ZURhdGEoc3ByaXRlKSB7XG4gICAgICAgIHJldHVybiBzcHJpdGUucmVxdWVzdFJlbmRlckRhdGEoKTtcbiAgICB9LFxuICAgIHVwZGF0ZVJlbmRlckRhdGE6IGZ1bmN0aW9uIHVwZGF0ZVJlbmRlckRhdGEoc3ByaXRlKSB7XG4gICAgICAgIHBhY2tUb0R5bmFtaWNBdGxhcyhzcHJpdGUsIHNwcml0ZS5fc3ByaXRlRnJhbWUpO1xuXG4gICAgICAgIHZhciByZW5kZXJEYXRhID0gc3ByaXRlLl9yZW5kZXJEYXRhO1xuICAgICAgICB2YXIgZnJhbWUgPSBzcHJpdGUuc3ByaXRlRnJhbWU7XG4gICAgICAgIGlmICghcmVuZGVyRGF0YSB8fCAhZnJhbWUpIHJldHVybjtcbiAgICAgICAgdmFyIHZlcnRpY2VzID0gZnJhbWUudmVydGljZXM7XG4gICAgICAgIGlmICh2ZXJ0aWNlcykge1xuICAgICAgICAgICAgaWYgKHJlbmRlckRhdGEudmVydGV4Q291bnQgIT09IHZlcnRpY2VzLngubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyRGF0YS52ZXJ0ZXhDb3VudCA9IHZlcnRpY2VzLngubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgLy8gMSBmb3Igd29ybGQgdmVydGljZXMsIDIgZm9yIGxvY2FsIHZlcnRpY2VzXG4gICAgICAgICAgICAgICAgcmVuZGVyRGF0YS5kYXRhTGVuZ3RoID0gcmVuZGVyRGF0YS52ZXJ0ZXhDb3VudCAqIDI7XG5cbiAgICAgICAgICAgICAgICByZW5kZXJEYXRhLnV2RGlydHkgPSByZW5kZXJEYXRhLnZlcnREaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW5kZXJEYXRhLmluZGljZUNvdW50ID0gdmVydGljZXMudHJpYW5nbGVzLmxlbmd0aDtcblxuICAgICAgICAgICAgaWYgKHJlbmRlckRhdGEudXZEaXJ0eSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVVZzKHNwcml0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmVydERpcnR5ID0gcmVuZGVyRGF0YS52ZXJ0RGlydHk7XG4gICAgICAgICAgICBpZiAodmVydERpcnR5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVWZXJ0cyhzcHJpdGUpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlV29ybGRWZXJ0cyhzcHJpdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICB1cGRhdGVVVnM6IGZ1bmN0aW9uIHVwZGF0ZVVWcyhzcHJpdGUpIHtcbiAgICAgICAgdmFyIHZlcnRpY2VzID0gc3ByaXRlLnNwcml0ZUZyYW1lLnZlcnRpY2VzLFxuICAgICAgICAgICAgdSA9IHZlcnRpY2VzLm51LFxuICAgICAgICAgICAgdiA9IHZlcnRpY2VzLm52O1xuXG4gICAgICAgIHZhciByZW5kZXJEYXRhID0gc3ByaXRlLl9yZW5kZXJEYXRhO1xuICAgICAgICB2YXIgZGF0YSA9IHJlbmRlckRhdGEuX2RhdGE7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNlID0gZGF0YVtpXTtcbiAgICAgICAgICAgIHZlcnRpY2UudSA9IHVbaV07XG4gICAgICAgICAgICB2ZXJ0aWNlLnYgPSB2W2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyRGF0YS51dkRpcnR5ID0gZmFsc2U7XG4gICAgfSxcbiAgICB1cGRhdGVWZXJ0czogZnVuY3Rpb24gdXBkYXRlVmVydHMoc3ByaXRlKSB7XG4gICAgICAgIHZhciBub2RlID0gc3ByaXRlLm5vZGUsXG4gICAgICAgICAgICBjb250ZW50V2lkdGggPSBNYXRoLmFicyhub2RlLndpZHRoKSxcbiAgICAgICAgICAgIGNvbnRlbnRIZWlnaHQgPSBNYXRoLmFicyhub2RlLmhlaWdodCksXG4gICAgICAgICAgICBhcHB4ID0gbm9kZS5hbmNob3JYICogY29udGVudFdpZHRoLFxuICAgICAgICAgICAgYXBweSA9IG5vZGUuYW5jaG9yWSAqIGNvbnRlbnRIZWlnaHQ7XG5cbiAgICAgICAgdmFyIGZyYW1lID0gc3ByaXRlLnNwcml0ZUZyYW1lLFxuICAgICAgICAgICAgdmVydGljZXMgPSBmcmFtZS52ZXJ0aWNlcyxcbiAgICAgICAgICAgIHggPSB2ZXJ0aWNlcy54LFxuICAgICAgICAgICAgeSA9IHZlcnRpY2VzLnksXG4gICAgICAgICAgICBvcmlnaW5hbFdpZHRoID0gZnJhbWUuX29yaWdpbmFsU2l6ZS53aWR0aCxcbiAgICAgICAgICAgIG9yaWdpbmFsSGVpZ2h0ID0gZnJhbWUuX29yaWdpbmFsU2l6ZS5oZWlnaHQsXG4gICAgICAgICAgICByZWN0V2lkdGggPSBmcmFtZS5fcmVjdC53aWR0aCxcbiAgICAgICAgICAgIHJlY3RIZWlnaHQgPSBmcmFtZS5fcmVjdC5oZWlnaHQsXG4gICAgICAgICAgICBvZmZzZXRYID0gZnJhbWUuX29mZnNldC54LFxuICAgICAgICAgICAgb2Zmc2V0WSA9IGZyYW1lLl9vZmZzZXQueSxcbiAgICAgICAgICAgIHRyaW1YID0gb2Zmc2V0WCArIChvcmlnaW5hbFdpZHRoIC0gcmVjdFdpZHRoKSAvIDIsXG4gICAgICAgICAgICB0cmltWSA9IG9mZnNldFkgKyAob3JpZ2luYWxIZWlnaHQgLSByZWN0SGVpZ2h0KSAvIDI7XG5cbiAgICAgICAgdmFyIHNjYWxlWCA9IGNvbnRlbnRXaWR0aCAvIChzcHJpdGUudHJpbSA/IHJlY3RXaWR0aCA6IG9yaWdpbmFsV2lkdGgpLFxuICAgICAgICAgICAgc2NhbGVZID0gY29udGVudEhlaWdodCAvIChzcHJpdGUudHJpbSA/IHJlY3RIZWlnaHQgOiBvcmlnaW5hbEhlaWdodCk7XG5cbiAgICAgICAgdmFyIHJlbmRlckRhdGEgPSBzcHJpdGUuX3JlbmRlckRhdGE7XG4gICAgICAgIHZhciBkYXRhID0gcmVuZGVyRGF0YS5fZGF0YTtcblxuICAgICAgICBpZiAoIXNwcml0ZS50cmltKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHgubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZlcnRpY2UgPSBkYXRhW2kgKyBsXTtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlLnggPSB4W2ldICogc2NhbGVYIC0gYXBweDtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlLnkgPSAob3JpZ2luYWxIZWlnaHQgLSB5W2ldKSAqIHNjYWxlWSAtIGFwcHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9sID0geC5sZW5ndGg7IF9pIDwgX2w7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgX3ZlcnRpY2UgPSBkYXRhW19pICsgX2xdO1xuICAgICAgICAgICAgICAgIF92ZXJ0aWNlLnggPSAoeFtfaV0gLSB0cmltWCkgKiBzY2FsZVggLSBhcHB4O1xuICAgICAgICAgICAgICAgIF92ZXJ0aWNlLnkgPSAob3JpZ2luYWxIZWlnaHQgLSB5W19pXSAtIHRyaW1ZKSAqIHNjYWxlWSAtIGFwcHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJEYXRhLnZlcnREaXJ0eSA9IGZhbHNlO1xuICAgIH0sXG4gICAgdXBkYXRlV29ybGRWZXJ0czogZnVuY3Rpb24gdXBkYXRlV29ybGRWZXJ0cyhzcHJpdGUpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBzcHJpdGUubm9kZSxcbiAgICAgICAgICAgIHJlbmRlckRhdGEgPSBzcHJpdGUuX3JlbmRlckRhdGEsXG4gICAgICAgICAgICBkYXRhID0gcmVuZGVyRGF0YS5fZGF0YTtcblxuICAgICAgICB2YXIgbWF0cml4ID0gbm9kZS5fd29ybGRNYXRyaXg7XG5cbiAgICAgICAgdmFyIGEgPSBtYXRyaXgubTAwLFxuICAgICAgICAgICAgYiA9IG1hdHJpeC5tMDEsXG4gICAgICAgICAgICBjID0gbWF0cml4Lm0wNCxcbiAgICAgICAgICAgIGQgPSBtYXRyaXgubTA1LFxuICAgICAgICAgICAgdHggPSBtYXRyaXgubTEyLFxuICAgICAgICAgICAgdHkgPSBtYXRyaXgubTEzO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHJlbmRlckRhdGEudmVydGV4Q291bnQ7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBsb2NhbCA9IGRhdGFbaSArIGxdO1xuICAgICAgICAgICAgdmFyIHdvcmxkID0gZGF0YVtpXTtcbiAgICAgICAgICAgIHdvcmxkLnggPSBsb2NhbC54ICogYSArIGxvY2FsLnkgKiBjICsgdHg7XG4gICAgICAgICAgICB3b3JsZC55ID0gbG9jYWwueCAqIGIgKyBsb2NhbC55ICogZCArIHR5O1xuICAgICAgICB9XG4gICAgfSxcbiAgICBmaWxsQnVmZmVyczogZnVuY3Rpb24gZmlsbEJ1ZmZlcnMoc3ByaXRlLCByZW5kZXJlcikge1xuICAgICAgICB2YXIgdmVydGljZXMgPSBzcHJpdGUuc3ByaXRlRnJhbWUudmVydGljZXM7XG4gICAgICAgIGlmICghdmVydGljZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSB3b3JsZCB2ZXJ0c1xuICAgICAgICBpZiAocmVuZGVyZXIud29ybGRNYXREaXJ0eSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVXb3JsZFZlcnRzKHNwcml0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBidWZmZXJcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHJlbmRlcmVyLl9tZXNoQnVmZmVyO1xuICAgICAgICB2YXIgbm9kZSA9IHNwcml0ZS5ub2RlO1xuICAgICAgICB2YXIgb2Zmc2V0SW5mbyA9IGZpbGxWZXJ0aWNlc1dpdGhvdXRDYWxjKG5vZGUsIGJ1ZmZlciwgc3ByaXRlLl9yZW5kZXJEYXRhLCBub2RlLl9jb2xvci5fdmFsKTtcblxuICAgICAgICB2YXIgaWJ1ZiA9IGJ1ZmZlci5faURhdGEsXG4gICAgICAgICAgICBpbmRpY2VPZmZzZXQgPSBvZmZzZXRJbmZvLmluZGljZU9mZnNldCxcbiAgICAgICAgICAgIHZlcnRleElkID0gb2Zmc2V0SW5mby52ZXJ0ZXhPZmZzZXQ7XG5cbiAgICAgICAgdmFyIHRyaWFuZ2xlcyA9IHZlcnRpY2VzLnRyaWFuZ2xlcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0cmlhbmdsZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpYnVmW2luZGljZU9mZnNldCsrXSA9IHZlcnRleElkICsgdHJpYW5nbGVzW2ldO1xuICAgICAgICB9XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltMWxjMmd1YW5NaVhTd2libUZ0WlhNaU9sc2labWxzYkZabGNuUnBZMlZ6VjJsMGFHOTFkRU5oYkdNaUxDSnlaWEYxYVhKbElpd2ljR0ZqYTFSdlJIbHVZVzFwWTBGMGJHRnpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1OeVpXRjBaVVJoZEdFaUxDSnpjSEpwZEdVaUxDSnlaWEYxWlhOMFVtVnVaR1Z5UkdGMFlTSXNJblZ3WkdGMFpWSmxibVJsY2tSaGRHRWlMQ0pmYzNCeWFYUmxSbkpoYldVaUxDSnlaVzVrWlhKRVlYUmhJaXdpWDNKbGJtUmxja1JoZEdFaUxDSm1jbUZ0WlNJc0luTndjbWwwWlVaeVlXMWxJaXdpZG1WeWRHbGpaWE1pTENKMlpYSjBaWGhEYjNWdWRDSXNJbmdpTENKc1pXNW5kR2dpTENKa1lYUmhUR1Z1WjNSb0lpd2lkWFpFYVhKMGVTSXNJblpsY25SRWFYSjBlU0lzSW1sdVpHbGpaVU52ZFc1MElpd2lkSEpwWVc1bmJHVnpJaXdpZFhCa1lYUmxWVlp6SWl3aWRYQmtZWFJsVm1WeWRITWlMQ0oxY0dSaGRHVlhiM0pzWkZabGNuUnpJaXdpZFNJc0ltNTFJaXdpZGlJc0ltNTJJaXdpWkdGMFlTSXNJbDlrWVhSaElpd2lhU0lzSW13aUxDSjJaWEowYVdObElpd2libTlrWlNJc0ltTnZiblJsYm5SWGFXUjBhQ0lzSWsxaGRHZ2lMQ0poWW5NaUxDSjNhV1IwYUNJc0ltTnZiblJsYm5SSVpXbG5hSFFpTENKb1pXbG5hSFFpTENKaGNIQjRJaXdpWVc1amFHOXlXQ0lzSW1Gd2NIa2lMQ0poYm1Ob2IzSlpJaXdpZVNJc0ltOXlhV2RwYm1Gc1YybGtkR2dpTENKZmIzSnBaMmx1WVd4VGFYcGxJaXdpYjNKcFoybHVZV3hJWldsbmFIUWlMQ0p5WldOMFYybGtkR2dpTENKZmNtVmpkQ0lzSW5KbFkzUklaV2xuYUhRaUxDSnZabVp6WlhSWUlpd2lYMjltWm5ObGRDSXNJbTltWm5ObGRGa2lMQ0owY21sdFdDSXNJblJ5YVcxWklpd2ljMk5oYkdWWUlpd2lkSEpwYlNJc0luTmpZV3hsV1NJc0ltMWhkSEpwZUNJc0lsOTNiM0pzWkUxaGRISnBlQ0lzSW1FaUxDSnRNREFpTENKaUlpd2liVEF4SWl3aVl5SXNJbTB3TkNJc0ltUWlMQ0p0TURVaUxDSjBlQ0lzSW0weE1pSXNJblI1SWl3aWJURXpJaXdpYkc5allXd2lMQ0ozYjNKc1pDSXNJbVpwYkd4Q2RXWm1aWEp6SWl3aWNtVnVaR1Z5WlhJaUxDSjNiM0pzWkUxaGRFUnBjblI1SWl3aVluVm1abVZ5SWl3aVgyMWxjMmhDZFdabVpYSWlMQ0p2Wm1aelpYUkpibVp2SWl3aVgyTnZiRzl5SWl3aVgzWmhiQ0lzSW1saWRXWWlMQ0pmYVVSaGRHRWlMQ0pwYm1ScFkyVlBabVp6WlhRaUxDSjJaWEowWlhoSlpDSXNJblpsY25SbGVFOW1abk5sZENKZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFYbENRU3hKUVVGTlFTd3dRa0ZCTUVKRExGRkJRVkVzWVVGQlVpeEZRVUYxUWtRc2RVSkJRWFpFTzBGQlEwRXNTVUZCVFVVc2NVSkJRWEZDUkN4UlFVRlJMSGxDUVVGU0xFVkJRVzFEUXl4clFrRkJPVVE3TzBGQlJVRkRMRTlCUVU5RExFOUJRVkFzUjBGQmFVSTdRVUZEWWtNc1kwRkVZU3h6UWtGRFJFTXNUVUZFUXl4RlFVTlBPMEZCUTJoQ0xHVkJRVTlCTEU5QlFVOURMR2xDUVVGUUxFVkJRVkE3UVVGRFNDeExRVWhaTzBGQlMySkRMRzlDUVV4aExEUkNRVXRMUml4TlFVeE1MRVZCUzJFN1FVRkRkRUpLTERKQ1FVRnRRa2tzVFVGQmJrSXNSVUZCTWtKQkxFOUJRVTlITEZsQlFXeERPenRCUVVWQkxGbEJRVWxETEdGQlFXRktMRTlCUVU5TExGZEJRWGhDTzBGQlEwRXNXVUZCU1VNc1VVRkJVVTRzVDBGQlQwOHNWMEZCYmtJN1FVRkRRU3haUVVGSkxFTkJRVU5JTEZWQlFVUXNTVUZCWlN4RFFVRkRSU3hMUVVGd1FpeEZRVUV5UWp0QlFVTXpRaXhaUVVGSlJTeFhRVUZYUml4TlFVRk5SU3hSUVVGeVFqdEJRVU5CTEZsQlFVbEJMRkZCUVVvc1JVRkJZenRCUVVOV0xHZENRVUZKU2l4WFFVRlhTeXhYUVVGWUxFdEJRVEpDUkN4VFFVRlRSU3hEUVVGVUxFTkJRVmRETEUxQlFURkRMRVZCUVd0RU8wRkJRemxEVUN3eVFrRkJWMHNzVjBGQldDeEhRVUY1UWtRc1UwRkJVMFVzUTBGQlZDeERRVUZYUXl4TlFVRndRenM3UVVGRlFUdEJRVU5CVUN3eVFrRkJWMUVzVlVGQldDeEhRVUYzUWxJc1YwRkJWMHNzVjBGQldDeEhRVUY1UWl4RFFVRnFSRHM3UVVGRlFVd3NNa0pCUVZkVExFOUJRVmdzUjBGQmNVSlVMRmRCUVZkVkxGTkJRVmdzUjBGQmRVSXNTVUZCTlVNN1FVRkRTRHRCUVVORVZpeDFRa0ZCVjFjc1YwRkJXQ3hIUVVGNVFsQXNVMEZCVTFFc1UwRkJWQ3hEUVVGdFFrd3NUVUZCTlVNN08wRkJSVUVzWjBKQlFVbFFMRmRCUVZkVExFOUJRV1lzUlVGQmQwSTdRVUZEY0VJc2NVSkJRVXRKTEZOQlFVd3NRMEZCWldwQ0xFMUJRV1k3UVVGRFNEdEJRVU5FTEdkQ1FVRkpZeXhaUVVGWlZpeFhRVUZYVlN4VFFVRXpRanRCUVVOQkxHZENRVUZKUVN4VFFVRktMRVZCUVdVN1FVRkRXQ3h4UWtGQlMwa3NWMEZCVEN4RFFVRnBRbXhDTEUxQlFXcENPMEZCUTBFc2NVSkJRVXR0UWl4blFrRkJUQ3hEUVVGelFtNUNMRTFCUVhSQ08wRkJRMGc3UVVGRFNqdEJRVU5LTEV0QmFFTlpPMEZCYTBOaWFVSXNZVUZzUTJFc2NVSkJhME5HYWtJc1RVRnNRMFVzUlVGclEwMDdRVUZEWml4WlFVRkpVU3hYUVVGWFVpeFBRVUZQVHl4WFFVRlFMRU5CUVcxQ1F5eFJRVUZzUXp0QlFVRkJMRmxCUTBsWkxFbEJRVWxhTEZOQlFWTmhMRVZCUkdwQ08wRkJRVUVzV1VGRlNVTXNTVUZCU1dRc1UwRkJVMlVzUlVGR2FrSTdPMEZCU1VFc1dVRkJTVzVDTEdGQlFXRktMRTlCUVU5TExGZEJRWGhDTzBGQlEwRXNXVUZCU1cxQ0xFOUJRVTl3UWl4WFFVRlhjVUlzUzBGQmRFSTdRVUZEUVN4aFFVRkxMRWxCUVVsRExFbEJRVWtzUTBGQlVpeEZRVUZYUXl4SlFVRkpVQ3hGUVVGRlZDeE5RVUYwUWl4RlFVRTRRbVVzU1VGQlNVTXNRMEZCYkVNc1JVRkJjVU5FTEVkQlFYSkRMRVZCUVRCRE8wRkJRM1JETEdkQ1FVRkpSU3hWUVVGVlNpeExRVUZMUlN4RFFVRk1MRU5CUVdRN1FVRkRRVVVzYjBKQlFWRlNMRU5CUVZJc1IwRkJXVUVzUlVGQlJVMHNRMEZCUml4RFFVRmFPMEZCUTBGRkxHOUNRVUZSVGl4RFFVRlNMRWRCUVZsQkxFVkJRVVZKTEVOQlFVWXNRMEZCV2p0QlFVTklPenRCUVVWRWRFSXNiVUpCUVZkVExFOUJRVmdzUjBGQmNVSXNTMEZCY2tJN1FVRkRTQ3hMUVdoRVdUdEJRV3RFWWtzc1pVRnNSR0VzZFVKQmEwUkJiRUlzVFVGc1JFRXNSVUZyUkZFN1FVRkRha0lzV1VGQlNUWkNMRTlCUVU4M1FpeFBRVUZQTmtJc1NVRkJiRUk3UVVGQlFTeFpRVU5KUXl4bFFVRmxReXhMUVVGTFF5eEhRVUZNTEVOQlFWTklMRXRCUVV0SkxFdEJRV1FzUTBGRWJrSTdRVUZCUVN4WlFVVkpReXhuUWtGQlowSklMRXRCUVV0RExFZEJRVXdzUTBGQlUwZ3NTMEZCUzAwc1RVRkJaQ3hEUVVad1FqdEJRVUZCTEZsQlIwbERMRTlCUVU5UUxFdEJRVXRSTEU5QlFVd3NSMEZCWlZBc1dVRklNVUk3UVVGQlFTeFpRVWxKVVN4UFFVRlBWQ3hMUVVGTFZTeFBRVUZNTEVkQlFXVk1MR0ZCU2pGQ096dEJRVTFCTEZsQlFVazFRaXhSUVVGUlRpeFBRVUZQVHl4WFFVRnVRanRCUVVGQkxGbEJRMGxETEZkQlFWZEdMRTFCUVUxRkxGRkJSSEpDTzBGQlFVRXNXVUZGU1VVc1NVRkJTVVlzVTBGQlUwVXNRMEZHYWtJN1FVRkJRU3haUVVkSk9FSXNTVUZCU1doRExGTkJRVk5uUXl4RFFVaHFRanRCUVVGQkxGbEJTVWxETEdkQ1FVRm5RbTVETEUxQlFVMXZReXhoUVVGT0xFTkJRVzlDVkN4TFFVcDRRenRCUVVGQkxGbEJTMGxWTEdsQ1FVRnBRbkpETEUxQlFVMXZReXhoUVVGT0xFTkJRVzlDVUN4TlFVeDZRenRCUVVGQkxGbEJUVWxUTEZsQlFWbDBReXhOUVVGTmRVTXNTMEZCVGl4RFFVRlpXaXhMUVU0MVFqdEJRVUZCTEZsQlQwbGhMR0ZCUVdGNFF5eE5RVUZOZFVNc1MwRkJUaXhEUVVGWlZpeE5RVkEzUWp0QlFVRkJMRmxCVVVsWkxGVkJRVlY2UXl4TlFVRk5NRU1zVDBGQlRpeERRVUZqZEVNc1EwRlNOVUk3UVVGQlFTeFpRVk5KZFVNc1ZVRkJWVE5ETEUxQlFVMHdReXhQUVVGT0xFTkJRV05TTEVOQlZEVkNPMEZCUVVFc1dVRlZTVlVzVVVGQlVVZ3NWVUZCVlN4RFFVRkRUaXhuUWtGQlowSkhMRk5CUVdwQ0xFbEJRVGhDTEVOQlZuQkVPMEZCUVVFc1dVRlhTVThzVVVGQlVVWXNWVUZCVlN4RFFVRkRUaXhwUWtGQmFVSkhMRlZCUVd4Q0xFbEJRV2RETEVOQldIUkVPenRCUVdGQkxGbEJRVWxOTEZOQlFWTjBRaXhuUWtGQlowSTVRaXhQUVVGUGNVUXNTVUZCVUN4SFFVRmpWQ3hUUVVGa0xFZEJRVEJDU0N4aFFVRXhReXhEUVVGaU8wRkJRVUVzV1VGRFNXRXNVMEZCVTNCQ0xHbENRVUZwUW14RExFOUJRVTl4UkN4SlFVRlFMRWRCUVdOUUxGVkJRV1FzUjBGQk1rSklMR05CUVRWRExFTkJSR0k3TzBGQlIwRXNXVUZCU1haRExHRkJRV0ZLTEU5QlFVOUxMRmRCUVhoQ08wRkJRMEVzV1VGQlNXMUNMRTlCUVU5d1FpeFhRVUZYY1VJc1MwRkJkRUk3TzBGQlJVRXNXVUZCU1N4RFFVRkRla0lzVDBGQlQzRkVMRWxCUVZvc1JVRkJhMEk3UVVGRFpDeHBRa0ZCU3l4SlFVRkpNMElzU1VGQlNTeERRVUZTTEVWQlFWZERMRWxCUVVscVFpeEZRVUZGUXl4TlFVRjBRaXhGUVVFNFFtVXNTVUZCU1VNc1EwRkJiRU1zUlVGQmNVTkVMRWRCUVhKRExFVkJRVEJETzBGQlEzUkRMRzlDUVVGSlJTeFZRVUZWU2l4TFFVRkxSU3hKUVVGSlF5eERRVUZVTEVOQlFXUTdRVUZEUVVNc2QwSkJRVkZzUWl4RFFVRlNMRWRCUVdGQkxFVkJRVVZuUWl4RFFVRkdMRU5CUVVRc1IwRkJVekJDTEUxQlFWUXNSMEZCYTBKb1FpeEpRVUU1UWp0QlFVTkJVaXgzUWtGQlVWa3NRMEZCVWl4SFFVRlpMRU5CUVVOSExHbENRVUZwUWtnc1JVRkJSV1FzUTBGQlJpeERRVUZzUWl4SlFVRXdRalJDTEUxQlFURkNMRWRCUVcxRGFFSXNTVUZCTDBNN1FVRkRTRHRCUVVOS0xGTkJUa1FzVFVGUFN6dEJRVU5FTEdsQ1FVRkxMRWxCUVVsYUxFdEJRVWtzUTBGQlVpeEZRVUZYUXl4TFFVRkpha0lzUlVGQlJVTXNUVUZCZEVJc1JVRkJPRUpsTEV0QlFVbERMRVZCUVd4RExFVkJRWEZEUkN4SlFVRnlReXhGUVVFd1F6dEJRVU4wUXl4dlFrRkJTVVVzVjBGQlZVb3NTMEZCUzBVc1MwRkJTVU1zUlVGQlZDeERRVUZrTzBGQlEwRkRMSGxDUVVGUmJFSXNRMEZCVWl4SFFVRlpMRU5CUVVOQkxFVkJRVVZuUWl4RlFVRkdMRWxCUVU5M1FpeExRVUZTTEVsQlFXbENSU3hOUVVGcVFpeEhRVUV3UW1oQ0xFbEJRWFJETzBGQlEwRlNMSGxDUVVGUldTeERRVUZTTEVkQlFWa3NRMEZCUTBjc2FVSkJRV2xDU0N4RlFVRkZaQ3hGUVVGR0xFTkJRV3BDTEVkQlFYZENlVUlzUzBGQmVrSXNTVUZCYTBOSExFMUJRV3hETEVkQlFUSkRhRUlzU1VGQmRrUTdRVUZEU0R0QlFVTktPenRCUVVWRWJFTXNiVUpCUVZkVkxGTkJRVmdzUjBGQmRVSXNTMEZCZGtJN1FVRkRTQ3hMUVRWR1dUdEJRVGhHWWtzc2IwSkJPVVpoTERSQ1FUaEdTMjVDTEUxQk9VWk1MRVZCT0VaaE8wRkJRM1JDTEZsQlFVazJRaXhQUVVGUE4wSXNUMEZCVHpaQ0xFbEJRV3hDTzBGQlFVRXNXVUZEU1hwQ0xHRkJRV0ZLTEU5QlFVOUxMRmRCUkhoQ08wRkJRVUVzV1VGRlNXMUNMRTlCUVU5d1FpeFhRVUZYY1VJc1MwRkdkRUk3TzBGQlNVRXNXVUZCU1RoQ0xGTkJRVk14UWl4TFFVRkxNa0lzV1VGQmJFSTdPMEZCUlVFc1dVRkJTVU1zU1VGQlNVWXNUMEZCVDBjc1IwRkJaanRCUVVGQkxGbEJRVzlDUXl4SlFVRkpTaXhQUVVGUFN5eEhRVUV2UWp0QlFVRkJMRmxCUVc5RFF5eEpRVUZKVGl4UFFVRlBUeXhIUVVFdlF6dEJRVUZCTEZsQlFXOUVReXhKUVVGSlVpeFBRVUZQVXl4SFFVRXZSRHRCUVVGQkxGbEJRMGxETEV0QlFVdFdMRTlCUVU5WExFZEJSR2hDTzBGQlFVRXNXVUZEY1VKRExFdEJRVXRhTEU5QlFVOWhMRWRCUkdwRE8wRkJSVUVzWVVGQlN5eEpRVUZKTVVNc1NVRkJTU3hEUVVGU0xFVkJRVmRETEVsQlFVbDJRaXhYUVVGWFN5eFhRVUV2UWl4RlFVRTBRMmxDTEVsQlFVbERMRU5CUVdoRUxFVkJRVzFFUkN4SFFVRnVSQ3hGUVVGM1JEdEJRVU53UkN4blFrRkJTVEpETEZGQlFWRTNReXhMUVVGTFJTeEpRVUZKUXl4RFFVRlVMRU5CUVZvN1FVRkRRU3huUWtGQlNUSkRMRkZCUVZFNVF5eExRVUZMUlN4RFFVRk1MRU5CUVZvN1FVRkRRVFJETEd0Q1FVRk5OVVFzUTBGQlRpeEhRVUZWTWtRc1RVRkJUVE5FTEVOQlFVNHNSMEZCVlN0RExFTkJRVllzUjBGQlkxa3NUVUZCVFRkQ0xFTkJRVTRzUjBGQlZYRkNMRU5CUVhoQ0xFZEJRVFJDU1N4RlFVRjBRenRCUVVOQlN5eHJRa0ZCVFRsQ0xFTkJRVTRzUjBGQlZUWkNMRTFCUVUwelJDeERRVUZPTEVkQlFWVnBSQ3hEUVVGV0xFZEJRV05WTEUxQlFVMDNRaXhEUVVGT0xFZEJRVlYxUWl4RFFVRjRRaXhIUVVFMFFra3NSVUZCZEVNN1FVRkRTRHRCUVVOS0xFdEJOMGRaTzBGQkswZGlTU3hsUVM5SFlTeDFRa0VyUjBGMlJTeE5RUzlIUVN4RlFTdEhVWGRGTEZGQkwwZFNMRVZCSzBkclFqdEJRVU16UWl4WlFVRkphRVVzVjBGQlYxSXNUMEZCVDA4c1YwRkJVQ3hEUVVGdFFrTXNVVUZCYkVNN1FVRkRRU3haUVVGSkxFTkJRVU5CTEZGQlFVd3NSVUZCWlR0QlFVTllPMEZCUTBnN08wRkJSVVE3UVVGRFFTeFpRVUZKWjBVc1UwRkJVME1zWVVGQllpeEZRVUUwUWp0QlFVTjRRaXhwUWtGQlMzUkVMR2RDUVVGTUxFTkJRWE5DYmtJc1RVRkJkRUk3UVVGRFNEczdRVUZGUkR0QlFVTkJMRmxCUVVrd1JTeFRRVUZUUml4VFFVRlRSeXhYUVVGMFFqdEJRVU5CTEZsQlFVazVReXhQUVVGUE4wSXNUMEZCVHpaQ0xFbEJRV3hDTzBGQlEwRXNXVUZCU1N0RExHRkJRV0ZzUml4M1FrRkJkMEp0UXl4SlFVRjRRaXhGUVVFNFFqWkRMRTFCUVRsQ0xFVkJRWE5ETVVVc1QwRkJUMHNzVjBGQk4wTXNSVUZCTUVSM1FpeExRVUZMWjBRc1RVRkJUQ3hEUVVGWlF5eEpRVUYwUlN4RFFVRnFRanM3UVVGRlFTeFpRVUZKUXl4UFFVRlBUQ3hQUVVGUFRTeE5RVUZzUWp0QlFVRkJMRmxCUTBsRExHVkJRV1ZNTEZkQlFWZExMRmxCUkRsQ08wRkJRVUVzV1VGRlNVTXNWMEZCVjA0c1YwRkJWMDhzV1VGR01VSTdPMEZCU1VFc1dVRkJTVzVGTEZsQlFWbFNMRk5CUVZOUkxGTkJRWHBDTzBGQlEwRXNZVUZCU3l4SlFVRkpWU3hKUVVGSkxFTkJRVklzUlVGQlYwTXNTVUZCU1Znc1ZVRkJWVXdzVFVGQk9VSXNSVUZCYzBObExFbEJRVWxETEVOQlFURkRMRVZCUVRaRFJDeEhRVUUzUXl4RlFVRnJSRHRCUVVNNVEzRkVMR2xDUVVGTFJTeGpRVUZNTEVsQlFYVkNReXhYUVVGWGJFVXNWVUZCVlZVc1EwRkJWaXhEUVVGc1F6dEJRVU5JTzBGQlEwbzdRVUYyU1Zrc1EwRkJha0lpTENKbWFXeGxJam9pYldWemFDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREUzTFRJd01UZ2dXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1WEc1Y2JpQm9kSFJ3Y3pvdkwzZDNkeTVqYjJOdmN5NWpiMjB2WEc1Y2JpQlFaWEp0YVhOemFXOXVJR2x6SUdobGNtVmllU0JuY21GdWRHVmtMQ0JtY21WbElHOW1JR05vWVhKblpTd2dkRzhnWVc1NUlIQmxjbk52YmlCdlluUmhhVzVwYm1jZ1lTQmpiM0I1WEc0Z2IyWWdkR2hwY3lCemIyWjBkMkZ5WlNCaGJtUWdZWE56YjJOcFlYUmxaQ0JsYm1kcGJtVWdjMjkxY21ObElHTnZaR1VnS0hSb1pTQmNJbE52Wm5SM1lYSmxYQ0lwTENCaElHeHBiV2wwWldRc1hHNGdkMjl5YkdSM2FXUmxMQ0J5YjNsaGJIUjVMV1p5WldVc0lHNXZiaTFoYzNOcFoyNWhZbXhsTENCeVpYWnZZMkZpYkdVZ1lXNWtJRzV2YmkxbGVHTnNkWE5wZG1VZ2JHbGpaVzV6WlZ4dUlIUnZJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52YkdWc2VTQjBieUJrWlhabGJHOXdJR2RoYldWeklHOXVJSGx2ZFhJZ2RHRnlaMlYwSUhCc1lYUm1iM0p0Y3k0Z1dXOTFJSE5vWVd4c1hHNGdibTkwSUhWelpTQkRiMk52Y3lCRGNtVmhkRzl5SUhOdlpuUjNZWEpsSUdadmNpQmtaWFpsYkc5d2FXNW5JRzkwYUdWeUlITnZablIzWVhKbElHOXlJSFJ2YjJ4eklIUm9ZWFFuYzF4dUlIVnpaV1FnWm05eUlHUmxkbVZzYjNCcGJtY2daMkZ0WlhNdUlGbHZkU0JoY21VZ2JtOTBJR2R5WVc1MFpXUWdkRzhnY0hWaWJHbHphQ3dnWkdsemRISnBZblYwWlN4Y2JpQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ1EyOWpiM01nUTNKbFlYUnZjaTVjYmx4dUlGUm9aU0J6YjJaMGQyRnlaU0J2Y2lCMGIyOXNjeUJwYmlCMGFHbHpJRXhwWTJWdWMyVWdRV2R5WldWdFpXNTBJR0Z5WlNCc2FXTmxibk5sWkN3Z2JtOTBJSE52YkdRdVhHNGdXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1SUhKbGMyVnlkbVZ6SUdGc2JDQnlhV2RvZEhNZ2JtOTBJR1Y0Y0hKbGMzTnNlU0JuY21GdWRHVmtJSFJ2SUhsdmRTNWNibHh1SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFNZ1QxSmNiaUJKVFZCTVNVVkVMQ0JKVGtOTVZVUkpUa2NnUWxWVUlFNVBWQ0JNU1UxSlZFVkVJRlJQSUZSSVJTQlhRVkpTUVU1VVNVVlRJRTlHSUUxRlVrTklRVTVVUVVKSlRFbFVXU3hjYmlCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRpQk9UeUJGVmtWT1ZDQlRTRUZNVENCVVNFVmNiaUJCVlZSSVQxSlRJRTlTSUVOUFVGbFNTVWRJVkNCSVQweEVSVkpUSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUVOTVFVbE5MQ0JFUVUxQlIwVlRJRTlTSUU5VVNFVlNYRzRnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVaUJQVkVoRlVsZEpVMFVzSUVGU1NWTkpUa2NnUmxKUFRTeGNiaUJQVlZRZ1QwWWdUMUlnU1U0Z1EwOU9Ua1ZEVkVsUFRpQlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VVZ1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPWEc0Z1ZFaEZJRk5QUmxSWFFWSkZMbHh1SUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzVjYm1OdmJuTjBJR1pwYkd4V1pYSjBhV05sYzFkcGRHaHZkWFJEWVd4aklEMGdjbVZ4ZFdseVpTZ25MaTR2TGk0dmRYUnBiSE1uS1M1bWFXeHNWbVZ5ZEdsalpYTlhhWFJvYjNWMFEyRnNZenRjYm1OdmJuTjBJSEJoWTJ0VWIwUjVibUZ0YVdOQmRHeGhjeUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMeTR1THk0dUwzVjBhV3h6TDNWMGFXeHpKeWt1Y0dGamExUnZSSGx1WVcxcFkwRjBiR0Z6TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnSUNCamNtVmhkR1ZFWVhSaElDaHpjSEpwZEdVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITndjbWwwWlM1eVpYRjFaWE4wVW1WdVpHVnlSR0YwWVNncE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCMWNHUmhkR1ZTWlc1a1pYSkVZWFJoSUNoemNISnBkR1VwSUh0Y2JpQWdJQ0FnSUNBZ2NHRmphMVJ2UkhsdVlXMXBZMEYwYkdGektITndjbWwwWlN3Z2MzQnlhWFJsTGw5emNISnBkR1ZHY21GdFpTazdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElISmxibVJsY2tSaGRHRWdQU0J6Y0hKcGRHVXVYM0psYm1SbGNrUmhkR0U3WEc0Z0lDQWdJQ0FnSUd4bGRDQm1jbUZ0WlNBOUlITndjbWwwWlM1emNISnBkR1ZHY21GdFpUdGNiaUFnSUNBZ0lDQWdhV1lnS0NGeVpXNWtaWEpFWVhSaElIeDhJQ0ZtY21GdFpTa2djbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQnNaWFFnZG1WeWRHbGpaWE1nUFNCbWNtRnRaUzUyWlhKMGFXTmxjenRjYmlBZ0lDQWdJQ0FnYVdZZ0tIWmxjblJwWTJWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ1WkdWeVJHRjBZUzUyWlhKMFpYaERiM1Z1ZENBaFBUMGdkbVZ5ZEdsalpYTXVlQzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5Wlc1a1pYSkVZWFJoTG5abGNuUmxlRU52ZFc1MElEMGdkbVZ5ZEdsalpYTXVlQzVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnTVNCbWIzSWdkMjl5YkdRZ2RtVnlkR2xqWlhNc0lESWdabTl5SUd4dlkyRnNJSFpsY25ScFkyVnpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ1WkdWeVJHRjBZUzVrWVhSaFRHVnVaM1JvSUQwZ2NtVnVaR1Z5UkdGMFlTNTJaWEowWlhoRGIzVnVkQ0FxSURJN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaVzVrWlhKRVlYUmhMblYyUkdseWRIa2dQU0J5Wlc1a1pYSkVZWFJoTG5abGNuUkVhWEowZVNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXNWtaWEpFWVhSaExtbHVaR2xqWlVOdmRXNTBJRDBnZG1WeWRHbGpaWE11ZEhKcFlXNW5iR1Z6TG14bGJtZDBhRHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGJtUmxja1JoZEdFdWRYWkVhWEowZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxWVlp6S0hOd2NtbDBaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkbVZ5ZEVScGNuUjVJRDBnY21WdVpHVnlSR0YwWVM1MlpYSjBSR2x5ZEhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtVnlkRVJwY25SNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZXWlhKMGN5aHpjSEpwZEdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxWMjl5YkdSV1pYSjBjeWh6Y0hKcGRHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lIVndaR0YwWlZWV2N5QW9jM0J5YVhSbEtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCMlpYSjBhV05sY3lBOUlITndjbWwwWlM1emNISnBkR1ZHY21GdFpTNTJaWEowYVdObGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhVZ1BTQjJaWEowYVdObGN5NXVkU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIWWdQU0IyWlhKMGFXTmxjeTV1ZGp0Y2JseHVJQ0FnSUNBZ0lDQnNaWFFnY21WdVpHVnlSR0YwWVNBOUlITndjbWwwWlM1ZmNtVnVaR1Z5UkdGMFlUdGNiaUFnSUNBZ0lDQWdiR1YwSUdSaGRHRWdQU0J5Wlc1a1pYSkVZWFJoTGw5a1lYUmhPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2diQ0E5SUhVdWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkbVZ5ZEdsalpTQTlJR1JoZEdGYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMlpYSjBhV05sTG5VZ1BTQjFXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEdsalpTNTJJRDBnZGx0cFhUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGJtUmxja1JoZEdFdWRYWkVhWEowZVNBOUlHWmhiSE5sTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0IxY0dSaGRHVldaWEowY3lBb2MzQnlhWFJsS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J1YjJSbElEMGdjM0J5YVhSbExtNXZaR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwWlc1MFYybGtkR2dnUFNCTllYUm9MbUZpY3lodWIyUmxMbmRwWkhSb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUmxiblJJWldsbmFIUWdQU0JOWVhSb0xtRmljeWh1YjJSbExtaGxhV2RvZENrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoY0hCNElEMGdibTlrWlM1aGJtTm9iM0pZSUNvZ1kyOXVkR1Z1ZEZkcFpIUm9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lYQndlU0E5SUc1dlpHVXVZVzVqYUc5eVdTQXFJR052Ym5SbGJuUklaV2xuYUhRN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUdaeVlXMWxJRDBnYzNCeWFYUmxMbk53Y21sMFpVWnlZVzFsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbVZ5ZEdsalpYTWdQU0JtY21GdFpTNTJaWEowYVdObGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhnZ1BTQjJaWEowYVdObGN5NTRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2VTQTlJSFpsY25ScFkyVnpMbmtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZjbWxuYVc1aGJGZHBaSFJvSUQwZ1puSmhiV1V1WDI5eWFXZHBibUZzVTJsNlpTNTNhV1IwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl5YVdkcGJtRnNTR1ZwWjJoMElEMGdabkpoYldVdVgyOXlhV2RwYm1Gc1UybDZaUzVvWldsbmFIUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXTjBWMmxrZEdnZ1BTQm1jbUZ0WlM1ZmNtVmpkQzUzYVdSMGFDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFkzUklaV2xuYUhRZ1BTQm1jbUZ0WlM1ZmNtVmpkQzVvWldsbmFIUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdlptWnpaWFJZSUQwZ1puSmhiV1V1WDI5bVpuTmxkQzU0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMlptYzJWMFdTQTlJR1p5WVcxbExsOXZabVp6WlhRdWVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSeWFXMVlJRDBnYjJabWMyVjBXQ0FySUNodmNtbG5hVzVoYkZkcFpIUm9JQzBnY21WamRGZHBaSFJvS1NBdklESXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtbHRXU0E5SUc5bVpuTmxkRmtnS3lBb2IzSnBaMmx1WVd4SVpXbG5hSFFnTFNCeVpXTjBTR1ZwWjJoMEtTQXZJREk3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJSE5qWVd4bFdDQTlJR052Ym5SbGJuUlhhV1IwYUNBdklDaHpjSEpwZEdVdWRISnBiU0EvSUhKbFkzUlhhV1IwYUNBNklHOXlhV2RwYm1Gc1YybGtkR2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMk5oYkdWWklEMGdZMjl1ZEdWdWRFaGxhV2RvZENBdklDaHpjSEpwZEdVdWRISnBiU0EvSUhKbFkzUklaV2xuYUhRZ09pQnZjbWxuYVc1aGJFaGxhV2RvZENrN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUhKbGJtUmxja1JoZEdFZ1BTQnpjSEpwZEdVdVgzSmxibVJsY2tSaGRHRTdYRzRnSUNBZ0lDQWdJR3hsZENCa1lYUmhJRDBnY21WdVpHVnlSR0YwWVM1ZlpHRjBZVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9JWE53Y21sMFpTNTBjbWx0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2diQ0E5SUhndWJHVnVaM1JvT3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhabGNuUnBZMlVnUFNCa1lYUmhXMmtnS3lCc1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJaWEowYVdObExuZ2dQU0FvZUZ0cFhTa2dLaUJ6WTJGc1pWZ2dMU0JoY0hCNE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmxjblJwWTJVdWVTQTlJQ2h2Y21sbmFXNWhiRWhsYVdkb2RDQXRJSGxiYVYwcElDb2djMk5oYkdWWklDMGdZWEJ3ZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3TENCc0lEMGdlQzVzWlc1bmRHZzdJR2tnUENCc095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkbVZ5ZEdsalpTQTlJR1JoZEdGYmFTQXJJR3hkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhabGNuUnBZMlV1ZUNBOUlDaDRXMmxkSUMwZ2RISnBiVmdwSUNvZ2MyTmhiR1ZZSUMwZ1lYQndlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWlhKMGFXTmxMbmtnUFNBb2IzSnBaMmx1WVd4SVpXbG5hSFFnTFNCNVcybGRJQzBnZEhKcGJWa3BJQ29nYzJOaGJHVlpJQzBnWVhCd2VUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsYm1SbGNrUmhkR0V1ZG1WeWRFUnBjblI1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSFZ3WkdGMFpWZHZjbXhrVm1WeWRITWdLSE53Y21sMFpTa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JtOWtaU0E5SUhOd2NtbDBaUzV1YjJSbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WdVpHVnlSR0YwWVNBOUlITndjbWwwWlM1ZmNtVnVaR1Z5UkdGMFlTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRWdQU0J5Wlc1a1pYSkVZWFJoTGw5a1lYUmhPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnRZWFJ5YVhnZ1BTQnViMlJsTGw5M2IzSnNaRTFoZEhKcGVEdGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ1lTQTlJRzFoZEhKcGVDNXRNREFzSUdJZ1BTQnRZWFJ5YVhndWJUQXhMQ0JqSUQwZ2JXRjBjbWw0TG0wd05Dd2daQ0E5SUcxaGRISnBlQzV0TURVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZUNBOUlHMWhkSEpwZUM1dE1USXNJSFI1SUQwZ2JXRjBjbWw0TG0weE16dGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHd2dQU0J5Wlc1a1pYSkVZWFJoTG5abGNuUmxlRU52ZFc1ME95QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYkc5allXd2dQU0JrWVhSaFcya2dLeUJzWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCM2IzSnNaQ0E5SUdSaGRHRmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNiM0pzWkM1NElEMGdiRzlqWVd3dWVDQXFJR0VnS3lCc2IyTmhiQzU1SUNvZ1l5QXJJSFI0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkMjl5YkdRdWVTQTlJR3h2WTJGc0xuZ2dLaUJpSUNzZ2JHOWpZV3d1ZVNBcUlHUWdLeUIwZVR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCbWFXeHNRblZtWm1WeWN5QW9jM0J5YVhSbExDQnlaVzVrWlhKbGNpa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2RtVnlkR2xqWlhNZ1BTQnpjSEpwZEdVdWMzQnlhWFJsUm5KaGJXVXVkbVZ5ZEdsalpYTTdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRtVnlkR2xqWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJSFZ3WkdGMFpTQjNiM0pzWkNCMlpYSjBjMXh1SUNBZ0lDQWdJQ0JwWmlBb2NtVnVaR1Z5WlhJdWQyOXliR1JOWVhSRWFYSjBlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZYYjNKc1pGWmxjblJ6S0hOd2NtbDBaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJpZFdabVpYSmNiaUFnSUNBZ0lDQWdiR1YwSUdKMVptWmxjaUE5SUhKbGJtUmxjbVZ5TGw5dFpYTm9RblZtWm1WeU8xeHVJQ0FnSUNBZ0lDQnNaWFFnYm05a1pTQTlJSE53Y21sMFpTNXViMlJsTzF4dUlDQWdJQ0FnSUNCc1pYUWdiMlptYzJWMFNXNW1ieUE5SUdacGJHeFdaWEowYVdObGMxZHBkR2h2ZFhSRFlXeGpLRzV2WkdVc0lHSjFabVpsY2l3Z2MzQnlhWFJsTGw5eVpXNWtaWEpFWVhSaExDQnViMlJsTGw5amIyeHZjaTVmZG1Gc0tUdGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2FXSjFaaUE5SUdKMVptWmxjaTVmYVVSaGRHRXNYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtUnBZMlZQWm1aelpYUWdQU0J2Wm1aelpYUkpibVp2TG1sdVpHbGpaVTltWm5ObGRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhabGNuUmxlRWxrSUQwZ2IyWm1jMlYwU1c1bWJ5NTJaWEowWlhoUFptWnpaWFE3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJSFJ5YVdGdVoyeGxjeUE5SUhabGNuUnBZMlZ6TG5SeWFXRnVaMnhsY3p0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUd3Z1BTQjBjbWxoYm1kc1pYTXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBZblZtVzJsdVpHbGpaVTltWm5ObGRDc3JYU0E5SUhabGNuUmxlRWxrSUNzZ2RISnBZVzVuYkdWelcybGRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYm4wN0lsMTkiXX0=