(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Sprite = require('../../../../components/CCSprite');
        var SpriteType = Sprite.Type;
        var FillType = Sprite.FillType;
        var simpleRenderUtil = require('./2d/simple');
        var slicedRenderUtil = require('./2d/sliced');
        var tiledRenderUtil = require('./2d/tiled');
        var radialFilledRenderUtil = require('./2d/radial-filled');
        var barFilledRenderUtil = require('./2d/bar-filled');
        var meshRenderUtil = require('./2d/mesh');
        var simpleRenderUtil3D = require('./3d/simple');
        var slicedRenderUtil3D = require('./3d/sliced');
        var tiledRenderUtil3D = require('./3d/tiled');
        var radialFilledRenderUtil3D = require('./3d/radial-filled');
        var barFilledRenderUtil3D = require('./3d/bar-filled');
        var meshRenderUtil3D = require('./3d/mesh');
        var spriteAssembler = {
            getAssembler: function getAssembler(sprite) {
                var is3DNode = sprite.node.is3DNode;
                var util = is3DNode ? simpleRenderUtil3D : simpleRenderUtil;
                switch (sprite.type) {
                case SpriteType.SLICED:
                    util = is3DNode ? slicedRenderUtil3D : slicedRenderUtil;
                    break;
                case SpriteType.TILED:
                    util = is3DNode ? tiledRenderUtil3D : tiledRenderUtil;
                    break;
                case SpriteType.FILLED:
                    if (sprite._fillType === FillType.RADIAL) {
                        util = is3DNode ? radialFilledRenderUtil3D : radialFilledRenderUtil;
                    } else {
                        util = is3DNode ? barFilledRenderUtil3D : barFilledRenderUtil;
                    }
                    break;
                case SpriteType.MESH:
                    util = is3DNode ? meshRenderUtil3D : meshRenderUtil;
                    break;
                }
                return util;
            },
            updateRenderData: function updateRenderData(sprite) {
                return sprite.__allocedDatas;
            }
        };
        Sprite._assembler = spriteAssembler;
        module.exports = spriteAssembler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,