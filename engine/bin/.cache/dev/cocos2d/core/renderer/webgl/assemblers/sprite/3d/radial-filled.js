(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/3d/radial-filled.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../../../../../platform/js');
        var assembler = require('../2d/radial-filled');
        var fillVertices3D = require('../../utils').fillVertices3D;
        module.exports = js.addon({
            fillBuffers: function fillBuffers(comp, renderer) {
                var node = comp.node, color = node._color._val, buffer = renderer._meshBuffer3D, renderData = comp._renderData;
                var offsetInfo = fillVertices3D(node, buffer, renderData, color);
                var indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset;
                var ibuf = buffer._iData;
                for (var i = 0; i < renderData.dataLength; i++) {
                    ibuf[indiceOffset + i] = vertexId + i;
                }
            }
        }, assembler);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,