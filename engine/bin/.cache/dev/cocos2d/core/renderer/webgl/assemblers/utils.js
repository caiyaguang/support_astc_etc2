(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/utils.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var vec3 = cc.vmath.vec3;
        var vec3_temp = vec3.create();
        function fillVertices(node, buffer, renderData, color) {
            var vertexCount = renderData.vertexCount;
            var offsetInfo = buffer.request(vertexCount, renderData.indiceCount);
            var vertexOffset = offsetInfo.byteOffset >> 2, vbuf = buffer._vData, uintbuf = buffer._uintVData;
            var matrix = node._worldMatrix;
            var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
            var data = renderData._data;
            for (var i = 0; i < vertexCount; i++) {
                var vert = data[i];
                vbuf[vertexOffset++] = vert.x * a + vert.y * c + tx;
                vbuf[vertexOffset++] = vert.x * b + vert.y * d + ty;
                vbuf[vertexOffset++] = vert.u;
                vbuf[vertexOffset++] = vert.v;
                uintbuf[vertexOffset++] = color;
            }
            return offsetInfo;
        }
        function fillMeshVertices(node, buffer, renderData, color) {
            var vertexCount = renderData.vertexCount;
            var offsetInfo = buffer.request(vertexCount, renderData.indiceCount);
            var indiceOffset = offsetInfo.indiceOffset, vertexOffset = offsetInfo.byteOffset >> 2, vertexId = offsetInfo.vertexOffset, vbuf = buffer._vData, uintbuf = buffer._uintVData, ibuf = buffer._iData;
            var matrix = node._worldMatrix;
            var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
            var data = renderData._data;
            for (var i = 0; i < vertexCount; i++) {
                var vert = data[i];
                vbuf[vertexOffset++] = vert.x * a + vert.y * c + tx;
                vbuf[vertexOffset++] = vert.x * b + vert.y * d + ty;
                vbuf[vertexOffset++] = vert.u;
                vbuf[vertexOffset++] = vert.v;
                uintbuf[vertexOffset++] = color;
            }
            for (var _i = 0, count = vertexCount / 4; _i < count; _i++) {
                var start = vertexId + _i * 4;
                ibuf[indiceOffset++] = start;
                ibuf[indiceOffset++] = start + 1;
                ibuf[indiceOffset++] = start + 2;
                ibuf[indiceOffset++] = start + 1;
                ibuf[indiceOffset++] = start + 3;
                ibuf[indiceOffset++] = start + 2;
            }
            return offsetInfo;
        }
        function fillVertices3D(node, buffer, renderData, color) {
            var vertexCount = renderData.vertexCount;
            var offsetInfo = buffer.request(vertexCount, renderData.indiceCount);
            var vertexOffset = offsetInfo.byteOffset >> 2, vbuf = buffer._vData, uintbuf = buffer._uintVData;
            var matrix = node._worldMatrix;
            var data = renderData._data;
            for (var i = 0; i < vertexCount; i++) {
                var vert = data[i];
                vec3.set(vec3_temp, vert.x, vert.y, 0);
                vec3.transformMat4(vec3_temp, vec3_temp, matrix);
                vbuf[vertexOffset++] = vec3_temp.x;
                vbuf[vertexOffset++] = vec3_temp.y;
                vbuf[vertexOffset++] = vec3_temp.z;
                vbuf[vertexOffset++] = vert.u;
                vbuf[vertexOffset++] = vert.v;
                uintbuf[vertexOffset++] = color;
            }
            return offsetInfo;
        }
        function fillMeshVertices3D(node, buffer, renderData, color) {
            var vertexCount = renderData.vertexCount;
            var offsetInfo = buffer.request(vertexCount, renderData.indiceCount);
            var indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset, vertexOffset = offsetInfo.byteOffset >> 2, vbuf = buffer._vData, uintbuf = buffer._uintVData, ibuf = buffer._iData;
            var matrix = node._worldMatrix;
            var data = renderData._data;
            for (var i = 0; i < vertexCount; i++) {
                var vert = data[i];
                vec3.set(vec3_temp, vert.x, vert.y, 0);
                vec3.transformMat4(vec3_temp, vec3_temp, matrix);
                vbuf[vertexOffset++] = vec3_temp.x;
                vbuf[vertexOffset++] = vec3_temp.y;
                vbuf[vertexOffset++] = vec3_temp.z;
                vbuf[vertexOffset++] = vert.u;
                vbuf[vertexOffset++] = vert.v;
                uintbuf[vertexOffset++] = color;
            }
            for (var _i2 = 0, count = vertexCount / 4; _i2 < count; _i2++) {
                var start = vertexId + _i2 * 4;
                ibuf[indiceOffset++] = start;
                ibuf[indiceOffset++] = start + 1;
                ibuf[indiceOffset++] = start + 2;
                ibuf[indiceOffset++] = start + 1;
                ibuf[indiceOffset++] = start + 3;
                ibuf[indiceOffset++] = start + 2;
            }
            return offsetInfo;
        }
        function fillVerticesWithoutCalc(node, buffer, renderData, color) {
            var vertexCount = renderData.vertexCount;
            var offsetInfo = buffer.request(vertexCount, renderData.indiceCount);
            var vertexOffset = offsetInfo.byteOffset >> 2, vbuf = buffer._vData, uintbuf = buffer._uintVData;
            var data = renderData._data;
            for (var i = 0; i < vertexCount; i++) {
                var vert = data[i];
                vbuf[vertexOffset++] = vert.x;
                vbuf[vertexOffset++] = vert.y;
                vbuf[vertexOffset++] = vert.u;
                vbuf[vertexOffset++] = vert.v;
                uintbuf[vertexOffset++] = color;
            }
            return offsetInfo;
        }
        function fillVerticesWithoutCalc3D(node, buffer, renderData, color) {
            var vertexCount = renderData.vertexCount;
            var offsetInfo = buffer.request(vertexCount, renderData.indiceCount);
            var vertexOffset = offsetInfo.byteOffset >> 2, vbuf = buffer._vData, uintbuf = buffer._uintVData;
            var data = renderData._data;
            for (var i = 0; i < vertexCount; i++) {
                var vert = data[i];
                vbuf[vertexOffset++] = vert.x;
                vbuf[vertexOffset++] = vert.y;
                vbuf[vertexOffset++] = vert.z;
                vbuf[vertexOffset++] = vert.u;
                vbuf[vertexOffset++] = vert.v;
                uintbuf[vertexOffset++] = color;
            }
        }
        module.exports = {
            fillVertices: fillVertices,
            fillMeshVertices: fillMeshVertices,
            fillVertices3D: fillVertices3D,
            fillMeshVertices3D: fillMeshVertices3D,
            fillVerticesWithoutCalc: fillVerticesWithoutCalc,
            fillVerticesWithoutCalc3D: fillVerticesWithoutCalc3D
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,