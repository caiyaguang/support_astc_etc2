(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/label/2d/ttf.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../../../../../platform/js');
        var ttfUtls = require('../../../../utils/label/ttf');
        var LabelShadow = require('../../../../../components/CCLabelShadow');
        var fillMeshVertices = require('../../utils').fillMeshVertices;
        var WHITE = cc.color(255, 255, 255, 255);
        module.exports = js.addon({
            createData: function createData(comp) {
                var renderData = comp.requestRenderData();
                renderData.dataLength = 4;
                renderData.vertexCount = 4;
                renderData.indiceCount = 6;
                return renderData;
            },
            fillBuffers: function fillBuffers(comp, renderer) {
                var node = comp.node;
                WHITE._fastSetA(node.color.a);
                fillMeshVertices(node, renderer._meshBuffer, comp._renderData, WHITE._val);
            },
            _updateVerts: function _updateVerts(comp) {
                var renderData = comp._renderData;
                var uv = comp._frame.uv;
                var node = comp.node, canvasWidth = comp._ttfTexture.width, canvasHeight = comp._ttfTexture.height, appx = node.anchorX * node.width, appy = node.anchorY * node.height;
                var shadow = LabelShadow && comp.getComponent(LabelShadow);
                if (shadow && shadow._enabled) {
                    var offsetX = (canvasWidth - node.width) / 2;
                    var offsetY = (canvasHeight - node.height) / 2;
                    var shadowOffset = shadow.offset;
                    if (-shadowOffset.x > offsetX) {
                        appx += canvasWidth - node.width;
                    } else if (offsetX > shadowOffset.x) {
                        appx += offsetX - shadowOffset.x;
                    } else {
                    }
                    if (-shadowOffset.y > offsetY) {
                        appy += canvasHeight - node.height;
                    } else if (offsetY > shadowOffset.y) {
                        appy += offsetY - shadowOffset.y;
                    } else {
                    }
                }
                var data = renderData._data;
                data[0].x = -appx;
                data[0].y = -appy;
                data[1].x = canvasWidth - appx;
                data[1].y = -appy;
                data[2].x = -appx;
                data[2].y = canvasHeight - appy;
                data[3].x = canvasWidth - appx;
                data[3].y = canvasHeight - appy;
                data[0].u = uv[0];
                data[0].v = uv[1];
                data[1].u = uv[2];
                data[1].v = uv[3];
                data[2].u = uv[4];
                data[2].v = uv[5];
                data[3].u = uv[6];
                data[3].v = uv[7];
            }
        }, ttfUtls);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR0Zi5qcyIsIi9Vc2Vycy96emYyMDE5L0Rlc2t0b3AvZGV2ZWxvcG1lbnQvc3VwcG9ydF9hc3RjL2VuZ2luZS9jb2NvczJkL2NvcmUvcmVuZGVyZXIvd2ViZ2wvYXNzZW1ibGVycy9sYWJlbC8yZC90dGYuanMiXSwibmFtZXMiOlsianMiLCJyZXF1aXJlIiwidHRmVXRscyIsIkxhYmVsU2hhZG93IiwiZmlsbE1lc2hWZXJ0aWNlcyIsIldISVRFIiwiY2MiLCJjb2xvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhZGRvbiIsImNyZWF0ZURhdGEiLCJjb21wIiwicmVuZGVyRGF0YSIsInJlcXVlc3RSZW5kZXJEYXRhIiwiZGF0YUxlbmd0aCIsInZlcnRleENvdW50IiwiaW5kaWNlQ291bnQiLCJmaWxsQnVmZmVycyIsInJlbmRlcmVyIiwibm9kZSIsIl9mYXN0U2V0QSIsImEiLCJfbWVzaEJ1ZmZlciIsIl9yZW5kZXJEYXRhIiwiX3ZhbCIsIl91cGRhdGVWZXJ0cyIsInV2IiwiX2ZyYW1lIiwiY2FudmFzV2lkdGgiLCJfdHRmVGV4dHVyZSIsIndpZHRoIiwiY2FudmFzSGVpZ2h0IiwiaGVpZ2h0IiwiYXBweCIsImFuY2hvclgiLCJhcHB5IiwiYW5jaG9yWSIsInNoYWRvdyIsImdldENvbXBvbmVudCIsIl9lbmFibGVkIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJzaGFkb3dPZmZzZXQiLCJvZmZzZXQiLCJ4IiwieSIsImRhdGEiLCJfZGF0YSIsInUiLCJ2Il0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUF5QkEsSUFBTUEsRUFBQUEsR0FBS0MsT0FBQUEsQ0FBUSw0QkFBUkEsQ0FBWDtRQUNBLElBQU1DLE9BQUFBLEdBQVVELE9BQUFBLENBQVEsNkJBQVJBLENBQWhCO1FBQ0EsSUFBTUUsV0FBQUEsR0FBY0YsT0FBQUEsQ0FBUSx5Q0FBUkEsQ0FB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KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmNvbnN0IGpzID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vcGxhdGZvcm0vanMnKTtcbmNvbnN0IHR0ZlV0bHMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlscy9sYWJlbC90dGYnKTtcbmNvbnN0IExhYmVsU2hhZG93ID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50cy9DQ0xhYmVsU2hhZG93Jyk7XG5jb25zdCBmaWxsTWVzaFZlcnRpY2VzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMnKS5maWxsTWVzaFZlcnRpY2VzO1xuY29uc3QgV0hJVEUgPSBjYy5jb2xvcigyNTUsIDI1NSwgMjU1LCAyNTUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpzLmFkZG9uKHtcbiAgICBjcmVhdGVEYXRhIChjb21wKSB7XG4gICAgICAgIGxldCByZW5kZXJEYXRhID0gY29tcC5yZXF1ZXN0UmVuZGVyRGF0YSgpO1xuXG4gICAgICAgIHJlbmRlckRhdGEuZGF0YUxlbmd0aCA9IDQ7XG4gICAgICAgIHJlbmRlckRhdGEudmVydGV4Q291bnQgPSA0O1xuICAgICAgICByZW5kZXJEYXRhLmluZGljZUNvdW50ID0gNjtcblxuICAgICAgICByZXR1cm4gcmVuZGVyRGF0YTtcbiAgICB9LFxuXG4gICAgZmlsbEJ1ZmZlcnMgKGNvbXAsIHJlbmRlcmVyKSB7XG4gICAgICAgIGxldCBub2RlID0gY29tcC5ub2RlO1xuICAgICAgICBXSElURS5fZmFzdFNldEEobm9kZS5jb2xvci5hKTtcbiAgICAgICAgZmlsbE1lc2hWZXJ0aWNlcyhub2RlLCByZW5kZXJlci5fbWVzaEJ1ZmZlciwgY29tcC5fcmVuZGVyRGF0YSwgV0hJVEUuX3ZhbCk7XG4gICAgfSxcblxuICAgIF91cGRhdGVWZXJ0cyAoY29tcCkge1xuICAgICAgICBsZXQgcmVuZGVyRGF0YSA9IGNvbXAuX3JlbmRlckRhdGE7XG4gICAgICAgIGxldCB1diA9IGNvbXAuX2ZyYW1lLnV2O1xuXG4gICAgICAgIGxldCBub2RlID0gY29tcC5ub2RlLFxuICAgICAgICAgICAgY2FudmFzV2lkdGggPSBjb21wLl90dGZUZXh0dXJlLndpZHRoLFxuICAgICAgICAgICAgY2FudmFzSGVpZ2h0ID0gY29tcC5fdHRmVGV4dHVyZS5oZWlnaHQsXG4gICAgICAgICAgICBhcHB4ID0gbm9kZS5hbmNob3JYICogbm9kZS53aWR0aCxcbiAgICAgICAgICAgIGFwcHkgPSBub2RlLmFuY2hvclkgKiBub2RlLmhlaWdodDtcblxuICAgICAgICBsZXQgc2hhZG93ID0gTGFiZWxTaGFkb3cgJiYgY29tcC5nZXRDb21wb25lbnQoTGFiZWxTaGFkb3cpO1xuICAgICAgICBpZiAoc2hhZG93ICYmIHNoYWRvdy5fZW5hYmxlZCkge1xuICAgICAgICAgICAgLy8gYWRhcHQgc2l6ZSBjaGFuZ2VkIGNhdXNlZCBieSBzaGFkb3dcbiAgICAgICAgICAgIGxldCBvZmZzZXRYID0gKGNhbnZhc1dpZHRoIC0gbm9kZS53aWR0aCkgLyAyO1xuICAgICAgICAgICAgbGV0IG9mZnNldFkgPSAoY2FudmFzSGVpZ2h0IC0gbm9kZS5oZWlnaHQpIC8gMjtcblxuICAgICAgICAgICAgbGV0IHNoYWRvd09mZnNldCA9IHNoYWRvdy5vZmZzZXQ7XG4gICAgICAgICAgICBpZiAoLXNoYWRvd09mZnNldC54ID4gb2Zmc2V0WCkge1xuICAgICAgICAgICAgICAgIC8vIGV4cGFuZCB0byBsZWZ0XG4gICAgICAgICAgICAgICAgYXBweCArPSAoY2FudmFzV2lkdGggLSBub2RlLndpZHRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9mZnNldFggPiBzaGFkb3dPZmZzZXQueCkge1xuICAgICAgICAgICAgICAgIC8vIGV4cGFuZCB0byBsZWZ0IGFuZCByaWdodFxuICAgICAgICAgICAgICAgIGFwcHggKz0gKG9mZnNldFggLSBzaGFkb3dPZmZzZXQueCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBleHBhbmQgdG8gcmlnaHQsIG5vIG5lZWQgdG8gY2hhbmdlIHJlbmRlciBwb3NpdGlvblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoLXNoYWRvd09mZnNldC55ID4gb2Zmc2V0WSkge1xuICAgICAgICAgICAgICAgIC8vIGV4cGFuZCB0byB0b3BcbiAgICAgICAgICAgICAgICBhcHB5ICs9IChjYW52YXNIZWlnaHQgLSBub2RlLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvZmZzZXRZID4gc2hhZG93T2Zmc2V0LnkpIHtcbiAgICAgICAgICAgICAgICAvLyBleHBhbmQgdG8gdG9wIGFuZCBib3R0b21cbiAgICAgICAgICAgICAgICBhcHB5ICs9IChvZmZzZXRZIC0gc2hhZG93T2Zmc2V0LnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZXhwYW5kIHRvIGJvdHRvbSwgbm8gbmVlZCB0byBjaGFuZ2UgcmVuZGVyIHBvc2l0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGF0YSA9IHJlbmRlckRhdGEuX2RhdGE7XG4gICAgICAgIGRhdGFbMF0ueCA9IC1hcHB4O1xuICAgICAgICBkYXRhWzBdLnkgPSAtYXBweTtcbiAgICAgICAgZGF0YVsxXS54ID0gY2FudmFzV2lkdGggLSBhcHB4O1xuICAgICAgICBkYXRhWzFdLnkgPSAtYXBweTtcbiAgICAgICAgZGF0YVsyXS54ID0gLWFwcHg7XG4gICAgICAgIGRhdGFbMl0ueSA9IGNhbnZhc0hlaWdodCAtIGFwcHk7XG4gICAgICAgIGRhdGFbM10ueCA9IGNhbnZhc1dpZHRoIC0gYXBweDtcbiAgICAgICAgZGF0YVszXS55ID0gY2FudmFzSGVpZ2h0IC0gYXBweTtcblxuICAgICAgICBkYXRhWzBdLnUgPSB1dlswXTtcbiAgICAgICAgZGF0YVswXS52ID0gdXZbMV07XG4gICAgICAgIGRhdGFbMV0udSA9IHV2WzJdO1xuICAgICAgICBkYXRhWzFdLnYgPSB1dlszXTtcbiAgICAgICAgZGF0YVsyXS51ID0gdXZbNF07XG4gICAgICAgIGRhdGFbMl0udiA9IHV2WzVdO1xuICAgICAgICBkYXRhWzNdLnUgPSB1dls2XTtcbiAgICAgICAgZGF0YVszXS52ID0gdXZbN107XG4gICAgfVxufSwgdHRmVXRscyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBqcyA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uL3BsYXRmb3JtL2pzJyk7XG52YXIgdHRmVXRscyA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3V0aWxzL2xhYmVsL3R0ZicpO1xudmFyIExhYmVsU2hhZG93ID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50cy9DQ0xhYmVsU2hhZG93Jyk7XG52YXIgZmlsbE1lc2hWZXJ0aWNlcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJykuZmlsbE1lc2hWZXJ0aWNlcztcbnZhciBXSElURSA9IGNjLmNvbG9yKDI1NSwgMjU1LCAyNTUsIDI1NSk7XG5cbm1vZHVsZS5leHBvcnRzID0ganMuYWRkb24oe1xuICAgIGNyZWF0ZURhdGE6IGZ1bmN0aW9uIGNyZWF0ZURhdGEoY29tcCkge1xuICAgICAgICB2YXIgcmVuZGVyRGF0YSA9IGNvbXAucmVxdWVzdFJlbmRlckRhdGEoKTtcblxuICAgICAgICByZW5kZXJEYXRhLmRhdGFMZW5ndGggPSA0O1xuICAgICAgICByZW5kZXJEYXRhLnZlcnRleENvdW50ID0gNDtcbiAgICAgICAgcmVuZGVyRGF0YS5pbmRpY2VDb3VudCA9IDY7XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlckRhdGE7XG4gICAgfSxcbiAgICBmaWxsQnVmZmVyczogZnVuY3Rpb24gZmlsbEJ1ZmZlcnMoY29tcCwgcmVuZGVyZXIpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBjb21wLm5vZGU7XG4gICAgICAgIFdISVRFLl9mYXN0U2V0QShub2RlLmNvbG9yLmEpO1xuICAgICAgICBmaWxsTWVzaFZlcnRpY2VzKG5vZGUsIHJlbmRlcmVyLl9tZXNoQnVmZmVyLCBjb21wLl9yZW5kZXJEYXRhLCBXSElURS5fdmFsKTtcbiAgICB9LFxuICAgIF91cGRhdGVWZXJ0czogZnVuY3Rpb24gX3VwZGF0ZVZlcnRzKGNvbXApIHtcbiAgICAgICAgdmFyIHJlbmRlckRhdGEgPSBjb21wLl9yZW5kZXJEYXRhO1xuICAgICAgICB2YXIgdXYgPSBjb21wLl9mcmFtZS51djtcblxuICAgICAgICB2YXIgbm9kZSA9IGNvbXAubm9kZSxcbiAgICAgICAgICAgIGNhbnZhc1dpZHRoID0gY29tcC5fdHRmVGV4dHVyZS53aWR0aCxcbiAgICAgICAgICAgIGNhbnZhc0hlaWdodCA9IGNvbXAuX3R0ZlRleHR1cmUuaGVpZ2h0LFxuICAgICAgICAgICAgYXBweCA9IG5vZGUuYW5jaG9yWCAqIG5vZGUud2lkdGgsXG4gICAgICAgICAgICBhcHB5ID0gbm9kZS5hbmNob3JZICogbm9kZS5oZWlnaHQ7XG5cbiAgICAgICAgdmFyIHNoYWRvdyA9IExhYmVsU2hhZG93ICYmIGNvbXAuZ2V0Q29tcG9uZW50KExhYmVsU2hhZG93KTtcbiAgICAgICAgaWYgKHNoYWRvdyAmJiBzaGFkb3cuX2VuYWJsZWQpIHtcbiAgICAgICAgICAgIC8vIGFkYXB0IHNpemUgY2hhbmdlZCBjYXVzZWQgYnkgc2hhZG93XG4gICAgICAgICAgICB2YXIgb2Zmc2V0WCA9IChjYW52YXNXaWR0aCAtIG5vZGUud2lkdGgpIC8gMjtcbiAgICAgICAgICAgIHZhciBvZmZzZXRZID0gKGNhbnZhc0hlaWdodCAtIG5vZGUuaGVpZ2h0KSAvIDI7XG5cbiAgICAgICAgICAgIHZhciBzaGFkb3dPZmZzZXQgPSBzaGFkb3cub2Zmc2V0O1xuICAgICAgICAgICAgaWYgKC1zaGFkb3dPZmZzZXQueCA+IG9mZnNldFgpIHtcbiAgICAgICAgICAgICAgICAvLyBleHBhbmQgdG8gbGVmdFxuICAgICAgICAgICAgICAgIGFwcHggKz0gY2FudmFzV2lkdGggLSBub2RlLndpZHRoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvZmZzZXRYID4gc2hhZG93T2Zmc2V0LngpIHtcbiAgICAgICAgICAgICAgICAvLyBleHBhbmQgdG8gbGVmdCBhbmQgcmlnaHRcbiAgICAgICAgICAgICAgICBhcHB4ICs9IG9mZnNldFggLSBzaGFkb3dPZmZzZXQueDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZXhwYW5kIHRvIHJpZ2h0LCBubyBuZWVkIHRvIGNoYW5nZSByZW5kZXIgcG9zaXRpb25cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKC1zaGFkb3dPZmZzZXQueSA+IG9mZnNldFkpIHtcbiAgICAgICAgICAgICAgICAvLyBleHBhbmQgdG8gdG9wXG4gICAgICAgICAgICAgICAgYXBweSArPSBjYW52YXNIZWlnaHQgLSBub2RlLmhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2Zmc2V0WSA+IHNoYWRvd09mZnNldC55KSB7XG4gICAgICAgICAgICAgICAgLy8gZXhwYW5kIHRvIHRvcCBhbmQgYm90dG9tXG4gICAgICAgICAgICAgICAgYXBweSArPSBvZmZzZXRZIC0gc2hhZG93T2Zmc2V0Lnk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGV4cGFuZCB0byBib3R0b20sIG5vIG5lZWQgdG8gY2hhbmdlIHJlbmRlciBwb3NpdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRhdGEgPSByZW5kZXJEYXRhLl9kYXRhO1xuICAgICAgICBkYXRhWzBdLnggPSAtYXBweDtcbiAgICAgICAgZGF0YVswXS55ID0gLWFwcHk7XG4gICAgICAgIGRhdGFbMV0ueCA9IGNhbnZhc1dpZHRoIC0gYXBweDtcbiAgICAgICAgZGF0YVsxXS55ID0gLWFwcHk7XG4gICAgICAgIGRhdGFbMl0ueCA9IC1hcHB4O1xuICAgICAgICBkYXRhWzJdLnkgPSBjYW52YXNIZWlnaHQgLSBhcHB5O1xuICAgICAgICBkYXRhWzNdLnggPSBjYW52YXNXaWR0aCAtIGFwcHg7XG4gICAgICAgIGRhdGFbM10ueSA9IGNhbnZhc0hlaWdodCAtIGFwcHk7XG5cbiAgICAgICAgZGF0YVswXS51ID0gdXZbMF07XG4gICAgICAgIGRhdGFbMF0udiA9IHV2WzFdO1xuICAgICAgICBkYXRhWzFdLnUgPSB1dlsyXTtcbiAgICAgICAgZGF0YVsxXS52ID0gdXZbM107XG4gICAgICAgIGRhdGFbMl0udSA9IHV2WzRdO1xuICAgICAgICBkYXRhWzJdLnYgPSB1dls1XTtcbiAgICAgICAgZGF0YVszXS51ID0gdXZbNl07XG4gICAgICAgIGRhdGFbM10udiA9IHV2WzddO1xuICAgIH1cbn0sIHR0ZlV0bHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5SMFppNXFjeUpkTENKdVlXMWxjeUk2V3lKcWN5SXNJbkpsY1hWcGNtVWlMQ0owZEdaVmRHeHpJaXdpVEdGaVpXeFRhR0ZrYjNjaUxDSm1hV3hzVFdWemFGWmxjblJwWTJWeklpd2lWMGhKVkVVaUxDSmpZeUlzSW1OdmJHOXlJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1Ga1pHOXVJaXdpWTNKbFlYUmxSR0YwWVNJc0ltTnZiWEFpTENKeVpXNWtaWEpFWVhSaElpd2ljbVZ4ZFdWemRGSmxibVJsY2tSaGRHRWlMQ0prWVhSaFRHVnVaM1JvSWl3aWRtVnlkR1Y0UTI5MWJuUWlMQ0pwYm1ScFkyVkRiM1Z1ZENJc0ltWnBiR3hDZFdabVpYSnpJaXdpY21WdVpHVnlaWElpTENKdWIyUmxJaXdpWDJaaGMzUlRaWFJCSWl3aVlTSXNJbDl0WlhOb1FuVm1abVZ5SWl3aVgzSmxibVJsY2tSaGRHRWlMQ0pmZG1Gc0lpd2lYM1Z3WkdGMFpWWmxjblJ6SWl3aWRYWWlMQ0pmWm5KaGJXVWlMQ0pqWVc1MllYTlhhV1IwYUNJc0lsOTBkR1pVWlhoMGRYSmxJaXdpZDJsa2RHZ2lMQ0pqWVc1MllYTklaV2xuYUhRaUxDSm9aV2xuYUhRaUxDSmhjSEI0SWl3aVlXNWphRzl5V0NJc0ltRndjSGtpTENKaGJtTm9iM0paSWl3aWMyaGhaRzkzSWl3aVoyVjBRMjl0Y0c5dVpXNTBJaXdpWDJWdVlXSnNaV1FpTENKdlptWnpaWFJZSWl3aWIyWm1jMlYwV1NJc0luTm9ZV1J2ZDA5bVpuTmxkQ0lzSW05bVpuTmxkQ0lzSW5naUxDSjVJaXdpWkdGMFlTSXNJbDlrWVhSaElpd2lkU0lzSW5ZaVhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRjVRa0VzU1VGQlRVRXNTMEZCUzBNc1VVRkJVU3cwUWtGQlVpeERRVUZZTzBGQlEwRXNTVUZCVFVNc1ZVRkJWVVFzVVVGQlVTdzJRa0ZCVWl4RFFVRm9RanRCUVVOQkxFbEJRVTFGTEdOQlFXTkdMRkZCUVZFc2VVTkJRVklzUTBGQmNFSTdRVUZEUVN4SlFVRk5SeXh0UWtGQmJVSklMRkZCUVZFc1lVRkJVaXhGUVVGMVFrY3NaMEpCUVdoRU8wRkJRMEVzU1VGQlRVTXNVVUZCVVVNc1IwRkJSME1zUzBGQlNDeERRVUZUTEVkQlFWUXNSVUZCWXl4SFFVRmtMRVZCUVcxQ0xFZEJRVzVDTEVWQlFYZENMRWRCUVhoQ0xFTkJRV1E3TzBGQlJVRkRMRTlCUVU5RExFOUJRVkFzUjBGQmFVSlVMRWRCUVVkVkxFdEJRVWdzUTBGQlV6dEJRVU4wUWtNc1kwRkVjMElzYzBKQlExWkRMRWxCUkZVc1JVRkRTanRCUVVOa0xGbEJRVWxETEdGQlFXRkVMRXRCUVV0RkxHbENRVUZNTEVWQlFXcENPenRCUVVWQlJDeHRRa0ZCVjBVc1ZVRkJXQ3hIUVVGM1FpeERRVUY0UWp0QlFVTkJSaXh0UWtGQlYwY3NWMEZCV0N4SFFVRjVRaXhEUVVGNlFqdEJRVU5CU0N4dFFrRkJWMGtzVjBGQldDeEhRVUY1UWl4RFFVRjZRanM3UVVGRlFTeGxRVUZQU2l4VlFVRlFPMEZCUTBnc1MwRlVjVUk3UVVGWGRFSkxMR1ZCV0hOQ0xIVkNRVmRVVGl4SlFWaFRMRVZCVjBoUExGRkJXRWNzUlVGWFR6dEJRVU42UWl4WlFVRkpReXhQUVVGUFVpeExRVUZMVVN4SlFVRm9RanRCUVVOQlppeGpRVUZOWjBJc1UwRkJUaXhEUVVGblFrUXNTMEZCUzJJc1MwRkJUQ3hEUVVGWFpTeERRVUV6UWp0QlFVTkJiRUlzZVVKQlFXbENaMElzU1VGQmFrSXNSVUZCZFVKRUxGTkJRVk5KTEZkQlFXaERMRVZCUVRaRFdDeExRVUZMV1N4WFFVRnNSQ3hGUVVFclJHNUNMRTFCUVUxdlFpeEpRVUZ5UlR0QlFVTklMRXRCWm5GQ08wRkJhVUowUWtNc1owSkJha0p6UWl4M1FrRnBRbEprTEVsQmFrSlJMRVZCYVVKR08wRkJRMmhDTEZsQlFVbERMR0ZCUVdGRUxFdEJRVXRaTEZkQlFYUkNPMEZCUTBFc1dVRkJTVWNzUzBGQlMyWXNTMEZCUzJkQ0xFMUJRVXdzUTBGQldVUXNSVUZCY2tJN08wRkJSVUVzV1VGQlNWQXNUMEZCVDFJc1MwRkJTMUVzU1VGQmFFSTdRVUZCUVN4WlFVTkpVeXhqUVVGamFrSXNTMEZCUzJ0Q0xGZEJRVXdzUTBGQmFVSkRMRXRCUkc1RE8wRkJRVUVzV1VGRlNVTXNaVUZCWlhCQ0xFdEJRVXRyUWl4WFFVRk1MRU5CUVdsQ1J5eE5RVVp3UXp0QlFVRkJMRmxCUjBsRExFOUJRVTlrTEV0QlFVdGxMRTlCUVV3c1IwRkJaV1lzUzBGQlMxY3NTMEZJTDBJN1FVRkJRU3haUVVsSlN5eFBRVUZQYUVJc1MwRkJTMmxDTEU5QlFVd3NSMEZCWldwQ0xFdEJRVXRoTEUxQlNpOUNPenRCUVUxQkxGbEJRVWxMTEZOQlFWTnVReXhsUVVGbFV5eExRVUZMTWtJc1dVRkJUQ3hEUVVGclFuQkRMRmRCUVd4Q0xFTkJRVFZDTzBGQlEwRXNXVUZCU1cxRExGVkJRVlZCTEU5QlFVOUZMRkZCUVhKQ0xFVkJRU3RDTzBGQlF6TkNPMEZCUTBFc1owSkJRVWxETEZWQlFWVXNRMEZCUTFvc1kwRkJZMVFzUzBGQlMxY3NTMEZCY0VJc1NVRkJOa0lzUTBGQk0wTTdRVUZEUVN4blFrRkJTVmNzVlVGQlZTeERRVUZEVml4bFFVRmxXaXhMUVVGTFlTeE5RVUZ5UWl4SlFVRXJRaXhEUVVFM1F6czdRVUZGUVN4blFrRkJTVlVzWlVGQlpVd3NUMEZCVDAwc1RVRkJNVUk3UVVGRFFTeG5Ra0ZCU1N4RFFVRkRSQ3hoUVVGaFJTeERRVUZrTEVkQlFXdENTaXhQUVVGMFFpeEZRVUVyUWp0QlFVTXpRanRCUVVOQlVDeDNRa0ZCVTB3c1kwRkJZMVFzUzBGQlMxY3NTMEZCTlVJN1FVRkRTQ3hoUVVoRUxFMUJTVXNzU1VGQlNWVXNWVUZCVlVVc1lVRkJZVVVzUTBGQk0wSXNSVUZCT0VJN1FVRkRMMEk3UVVGRFFWZ3NkMEpCUVZOUExGVkJRVlZGTEdGQlFXRkZMRU5CUVdoRE8wRkJRMGdzWVVGSVNTeE5RVWxCTzBGQlEwUTdRVUZEU0RzN1FVRkZSQ3huUWtGQlNTeERRVUZEUml4aFFVRmhSeXhEUVVGa0xFZEJRV3RDU2l4UFFVRjBRaXhGUVVFclFqdEJRVU16UWp0QlFVTkJUaXgzUWtGQlUwb3NaVUZCWlZvc1MwRkJTMkVzVFVGQk4wSTdRVUZEU0N4aFFVaEVMRTFCU1Vzc1NVRkJTVk1zVlVGQlZVTXNZVUZCWVVjc1EwRkJNMElzUlVGQk9FSTdRVUZETDBJN1FVRkRRVllzZDBKQlFWTk5MRlZCUVZWRExHRkJRV0ZITEVOQlFXaERPMEZCUTBnc1lVRklTU3hOUVVsQk8wRkJRMFE3UVVGRFNEdEJRVU5LT3p0QlFVVkVMRmxCUVVsRExFOUJRVTlzUXl4WFFVRlhiVU1zUzBGQmRFSTdRVUZEUVVRc1lVRkJTeXhEUVVGTUxFVkJRVkZHTEVOQlFWSXNSMEZCV1N4RFFVRkRXQ3hKUVVGaU8wRkJRMEZoTEdGQlFVc3NRMEZCVEN4RlFVRlJSQ3hEUVVGU0xFZEJRVmtzUTBGQlExWXNTVUZCWWp0QlFVTkJWeXhoUVVGTExFTkJRVXdzUlVGQlVVWXNRMEZCVWl4SFFVRlphRUlzWTBGQlkwc3NTVUZCTVVJN1FVRkRRV0VzWVVGQlN5eERRVUZNTEVWQlFWRkVMRU5CUVZJc1IwRkJXU3hEUVVGRFZpeEpRVUZpTzBGQlEwRlhMR0ZCUVVzc1EwRkJUQ3hGUVVGUlJpeERRVUZTTEVkQlFWa3NRMEZCUTFnc1NVRkJZanRCUVVOQllTeGhRVUZMTEVOQlFVd3NSVUZCVVVRc1EwRkJVaXhIUVVGWlpDeGxRVUZsU1N4SlFVRXpRanRCUVVOQlZ5eGhRVUZMTEVOQlFVd3NSVUZCVVVZc1EwRkJVaXhIUVVGWmFFSXNZMEZCWTBzc1NVRkJNVUk3UVVGRFFXRXNZVUZCU3l4RFFVRk1MRVZCUVZGRUxFTkJRVklzUjBGQldXUXNaVUZCWlVrc1NVRkJNMEk3TzBGQlJVRlhMR0ZCUVVzc1EwRkJUQ3hGUVVGUlJTeERRVUZTTEVkQlFWbDBRaXhIUVVGSExFTkJRVWdzUTBGQldqdEJRVU5CYjBJc1lVRkJTeXhEUVVGTUxFVkJRVkZITEVOQlFWSXNSMEZCV1haQ0xFZEJRVWNzUTBGQlNDeERRVUZhTzBGQlEwRnZRaXhoUVVGTExFTkJRVXdzUlVGQlVVVXNRMEZCVWl4SFFVRlpkRUlzUjBGQlJ5eERRVUZJTEVOQlFWbzdRVUZEUVc5Q0xHRkJRVXNzUTBGQlRDeEZRVUZSUnl4RFFVRlNMRWRCUVZsMlFpeEhRVUZITEVOQlFVZ3NRMEZCV2p0QlFVTkJiMElzWVVGQlN5eERRVUZNTEVWQlFWRkZMRU5CUVZJc1IwRkJXWFJDTEVkQlFVY3NRMEZCU0N4RFFVRmFPMEZCUTBGdlFpeGhRVUZMTEVOQlFVd3NSVUZCVVVjc1EwRkJVaXhIUVVGWmRrSXNSMEZCUnl4RFFVRklMRU5CUVZvN1FVRkRRVzlDTEdGQlFVc3NRMEZCVEN4RlFVRlJSU3hEUVVGU0xFZEJRVmwwUWl4SFFVRkhMRU5CUVVnc1EwRkJXanRCUVVOQmIwSXNZVUZCU3l4RFFVRk1MRVZCUVZGSExFTkJRVklzUjBGQldYWkNMRWRCUVVjc1EwRkJTQ3hEUVVGYU8wRkJRMGc3UVVFM1JYRkNMRU5CUVZRc1JVRTRSV1I2UWl4UFFUbEZZeXhEUVVGcVFpSXNJbVpwYkdVaU9pSjBkR1l1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE55MHlNREU0SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xseHVYRzRnYUhSMGNITTZMeTkzZDNjdVkyOWpiM011WTI5dEwxeHVYRzRnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0VnWTI5d2VWeHVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pXNW5hVzVsSUhOdmRYSmpaU0JqYjJSbElDaDBhR1VnWENKVGIyWjBkMkZ5WlZ3aUtTd2dZU0JzYVcxcGRHVmtMRnh1SUhkdmNteGtkMmxrWlN3Z2NtOTVZV3gwZVMxbWNtVmxMQ0J1YjI0dFlYTnphV2R1WVdKc1pTd2djbVYyYjJOaFlteGxJR0Z1WkNCdWIyNHRaWGhqYkhWemFYWmxJR3hwWTJWdWMyVmNiaUIwYnlCMWMyVWdRMjlqYjNNZ1EzSmxZWFJ2Y2lCemIyeGxiSGtnZEc4Z1pHVjJaV3h2Y0NCbllXMWxjeUJ2YmlCNWIzVnlJSFJoY21kbGRDQndiR0YwWm05eWJYTXVJRmx2ZFNCemFHRnNiRnh1SUc1dmRDQjFjMlVnUTI5amIzTWdRM0psWVhSdmNpQnpiMlowZDJGeVpTQm1iM0lnWkdWMlpXeHZjR2x1WnlCdmRHaGxjaUJ6YjJaMGQyRnlaU0J2Y2lCMGIyOXNjeUIwYUdGMEozTmNiaUIxYzJWa0lHWnZjaUJrWlhabGJHOXdhVzVuSUdkaGJXVnpMaUJaYjNVZ1lYSmxJRzV2ZENCbmNtRnVkR1ZrSUhSdklIQjFZbXhwYzJnc0lHUnBjM1J5YVdKMWRHVXNYRzRnYzNWaWJHbGpaVzV6WlN3Z1lXNWtMMjl5SUhObGJHd2dZMjl3YVdWeklHOW1JRU52WTI5eklFTnlaV0YwYjNJdVhHNWNiaUJVYUdVZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2FXNGdkR2hwY3lCTWFXTmxibk5sSUVGbmNtVmxiV1Z1ZENCaGNtVWdiR2xqWlc1elpXUXNJRzV2ZENCemIyeGtMbHh1SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xpQnlaWE5sY25abGN5QmhiR3dnY21sbmFIUnpJRzV2ZENCbGVIQnlaWE56YkhrZ1ozSmhiblJsWkNCMGJ5QjViM1V1WEc1Y2JpQlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRJRTlTWEc0Z1NVMVFURWxGUkN3Z1NVNURURlZFU1U1SElFSlZWQ0JPVDFRZ1RFbE5TVlJGUkNCVVR5QlVTRVVnVjBGU1VrRk9WRWxGVXlCUFJpQk5SVkpEU0VGT1ZFRkNTVXhKVkZrc1hHNGdSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTRnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGWEc0Z1FWVlVTRTlTVXlCUFVpQkRUMUJaVWtsSFNGUWdTRTlNUkVWU1V5QkNSU0JNU1VGQ1RFVWdSazlTSUVGT1dTQkRURUZKVFN3Z1JFRk5RVWRGVXlCUFVpQlBWRWhGVWx4dUlFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFJZ1QxUklSVkpYU1ZORkxDQkJVa2xUU1U1SElFWlNUMDBzWEc0Z1QxVlVJRTlHSUU5U0lFbE9JRU5QVGs1RlExUkpUMDRnVjBsVVNDQlVTRVVnVTA5R1ZGZEJVa1VnVDFJZ1ZFaEZJRlZUUlNCUFVpQlBWRWhGVWlCRVJVRk1TVTVIVXlCSlRseHVJRlJJUlNCVFQwWlVWMEZTUlM1Y2JpQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWpiMjV6ZENCcWN5QTlJSEpsY1hWcGNtVW9KeTR1THk0dUx5NHVMeTR1THk0dUwzQnNZWFJtYjNKdEwycHpKeWs3WEc1amIyNXpkQ0IwZEdaVmRHeHpJRDBnY21WeGRXbHlaU2duTGk0dkxpNHZMaTR2TGk0dmRYUnBiSE12YkdGaVpXd3ZkSFJtSnlrN1hHNWpiMjV6ZENCTVlXSmxiRk5vWVdSdmR5QTlJSEpsY1hWcGNtVW9KeTR1THk0dUx5NHVMeTR1THk0dUwyTnZiWEJ2Ym1WdWRITXZRME5NWVdKbGJGTm9ZV1J2ZHljcE8xeHVZMjl1YzNRZ1ptbHNiRTFsYzJoV1pYSjBhV05sY3lBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDNWMGFXeHpKeWt1Wm1sc2JFMWxjMmhXWlhKMGFXTmxjenRjYm1OdmJuTjBJRmRJU1ZSRklEMGdZMk11WTI5c2IzSW9NalUxTENBeU5UVXNJREkxTlN3Z01qVTFLVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCcWN5NWhaR1J2YmloN1hHNGdJQ0FnWTNKbFlYUmxSR0YwWVNBb1kyOXRjQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdjbVZ1WkdWeVJHRjBZU0E5SUdOdmJYQXVjbVZ4ZFdWemRGSmxibVJsY2tSaGRHRW9LVHRjYmx4dUlDQWdJQ0FnSUNCeVpXNWtaWEpFWVhSaExtUmhkR0ZNWlc1bmRHZ2dQU0EwTzF4dUlDQWdJQ0FnSUNCeVpXNWtaWEpFWVhSaExuWmxjblJsZUVOdmRXNTBJRDBnTkR0Y2JpQWdJQ0FnSUNBZ2NtVnVaR1Z5UkdGMFlTNXBibVJwWTJWRGIzVnVkQ0E5SURZN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxibVJsY2tSaGRHRTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHWnBiR3hDZFdabVpYSnpJQ2hqYjIxd0xDQnlaVzVrWlhKbGNpa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JtOWtaU0E5SUdOdmJYQXVibTlrWlR0Y2JpQWdJQ0FnSUNBZ1YwaEpWRVV1WDJaaGMzUlRaWFJCS0c1dlpHVXVZMjlzYjNJdVlTazdYRzRnSUNBZ0lDQWdJR1pwYkd4TlpYTm9WbVZ5ZEdsalpYTW9ibTlrWlN3Z2NtVnVaR1Z5WlhJdVgyMWxjMmhDZFdabVpYSXNJR052YlhBdVgzSmxibVJsY2tSaGRHRXNJRmRJU1ZSRkxsOTJZV3dwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmZFhCa1lYUmxWbVZ5ZEhNZ0tHTnZiWEFwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJSEpsYm1SbGNrUmhkR0VnUFNCamIyMXdMbDl5Wlc1a1pYSkVZWFJoTzF4dUlDQWdJQ0FnSUNCc1pYUWdkWFlnUFNCamIyMXdMbDltY21GdFpTNTFkanRjYmx4dUlDQWdJQ0FnSUNCc1pYUWdibTlrWlNBOUlHTnZiWEF1Ym05a1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGJuWmhjMWRwWkhSb0lEMGdZMjl0Y0M1ZmRIUm1WR1Y0ZEhWeVpTNTNhV1IwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYm5aaGMwaGxhV2RvZENBOUlHTnZiWEF1WDNSMFpsUmxlSFIxY21VdWFHVnBaMmgwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZWEJ3ZUNBOUlHNXZaR1V1WVc1amFHOXlXQ0FxSUc1dlpHVXVkMmxrZEdnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoY0hCNUlEMGdibTlrWlM1aGJtTm9iM0paSUNvZ2JtOWtaUzVvWldsbmFIUTdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElITm9ZV1J2ZHlBOUlFeGhZbVZzVTJoaFpHOTNJQ1ltSUdOdmJYQXVaMlYwUTI5dGNHOXVaVzUwS0V4aFltVnNVMmhoWkc5M0tUdGNiaUFnSUNBZ0lDQWdhV1lnS0hOb1lXUnZkeUFtSmlCemFHRmtiM2N1WDJWdVlXSnNaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdGa1lYQjBJSE5wZW1VZ1kyaGhibWRsWkNCallYVnpaV1FnWW5rZ2MyaGhaRzkzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYjJabWMyVjBXQ0E5SUNoallXNTJZWE5YYVdSMGFDQXRJRzV2WkdVdWQybGtkR2dwSUM4Z01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnZabVp6WlhSWklEMGdLR05oYm5aaGMwaGxhV2RvZENBdElHNXZaR1V1YUdWcFoyaDBLU0F2SURJN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnphR0ZrYjNkUFptWnpaWFFnUFNCemFHRmtiM2N1YjJabWMyVjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQzF6YUdGa2IzZFBabVp6WlhRdWVDQStJRzltWm5ObGRGZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCbGVIQmhibVFnZEc4Z2JHVm1kRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z3Y0hnZ0t6MGdLR05oYm5aaGMxZHBaSFJvSUMwZ2JtOWtaUzUzYVdSMGFDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2h2Wm1aelpYUllJRDRnYzJoaFpHOTNUMlptYzJWMExuZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCbGVIQmhibVFnZEc4Z2JHVm1kQ0JoYm1RZ2NtbG5hSFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY0hCNElDczlJQ2h2Wm1aelpYUllJQzBnYzJoaFpHOTNUMlptYzJWMExuZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWlhod1lXNWtJSFJ2SUhKcFoyaDBMQ0J1YnlCdVpXVmtJSFJ2SUdOb1lXNW5aU0J5Wlc1a1pYSWdjRzl6YVhScGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDMXphR0ZrYjNkUFptWnpaWFF1ZVNBK0lHOW1abk5sZEZrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJsZUhCaGJtUWdkRzhnZEc5d1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYQndlU0FyUFNBb1kyRnVkbUZ6U0dWcFoyaDBJQzBnYm05a1pTNW9aV2xuYUhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9iMlptYzJWMFdTQStJSE5vWVdSdmQwOW1abk5sZEM1NUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWlhod1lXNWtJSFJ2SUhSdmNDQmhibVFnWW05MGRHOXRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEJ3ZVNBclBTQW9iMlptYzJWMFdTQXRJSE5vWVdSdmQwOW1abk5sZEM1NUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1Y0Y0dGdVpDQjBieUJpYjNSMGIyMHNJRzV2SUc1bFpXUWdkRzhnWTJoaGJtZGxJSEpsYm1SbGNpQndiM05wZEdsdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdiR1YwSUdSaGRHRWdQU0J5Wlc1a1pYSkVZWFJoTGw5a1lYUmhPMXh1SUNBZ0lDQWdJQ0JrWVhSaFd6QmRMbmdnUFNBdFlYQndlRHRjYmlBZ0lDQWdJQ0FnWkdGMFlWc3dYUzU1SUQwZ0xXRndjSGs3WEc0Z0lDQWdJQ0FnSUdSaGRHRmJNVjB1ZUNBOUlHTmhiblpoYzFkcFpIUm9JQzBnWVhCd2VEdGNiaUFnSUNBZ0lDQWdaR0YwWVZzeFhTNTVJRDBnTFdGd2NIazdYRzRnSUNBZ0lDQWdJR1JoZEdGYk1sMHVlQ0E5SUMxaGNIQjRPMXh1SUNBZ0lDQWdJQ0JrWVhSaFd6SmRMbmtnUFNCallXNTJZWE5JWldsbmFIUWdMU0JoY0hCNU8xeHVJQ0FnSUNBZ0lDQmtZWFJoV3pOZExuZ2dQU0JqWVc1MllYTlhhV1IwYUNBdElHRndjSGc3WEc0Z0lDQWdJQ0FnSUdSaGRHRmJNMTB1ZVNBOUlHTmhiblpoYzBobGFXZG9kQ0F0SUdGd2NIazdYRzVjYmlBZ0lDQWdJQ0FnWkdGMFlWc3dYUzUxSUQwZ2RYWmJNRjA3WEc0Z0lDQWdJQ0FnSUdSaGRHRmJNRjB1ZGlBOUlIVjJXekZkTzF4dUlDQWdJQ0FnSUNCa1lYUmhXekZkTG5VZ1BTQjFkbHN5WFR0Y2JpQWdJQ0FnSUNBZ1pHRjBZVnN4WFM1MklEMGdkWFpiTTEwN1hHNGdJQ0FnSUNBZ0lHUmhkR0ZiTWwwdWRTQTlJSFYyV3pSZE8xeHVJQ0FnSUNBZ0lDQmtZWFJoV3pKZExuWWdQU0IxZGxzMVhUdGNiaUFnSUNBZ0lDQWdaR0YwWVZzelhTNTFJRDBnZFhaYk5sMDdYRzRnSUNBZ0lDQWdJR1JoZEdGYk0xMHVkaUE5SUhWMld6ZGRPMXh1SUNBZ0lIMWNibjBzSUhSMFpsVjBiSE1wTzF4dUlsMTkiXX0=