(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/3d/tiled.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../../../../../platform/js');
        var assembler = require('../2d/tiled');
        var vec3 = cc.vmath.vec3;
        module.exports = js.addon({
            vertexOffset: 6,
            uvOffset: 3,
            colorOffset: 5,
            fillVertices: function () {
                var vec3_temps = [];
                for (var i = 0; i < 4; i++) {
                    vec3_temps.push(vec3.create());
                }
                return function (vbuf, vertexOffset, matrix, row, col, data) {
                    var x = void 0, x1 = void 0, y = void 0, y1 = void 0;
                    for (var yindex = 0, ylength = row; yindex < ylength; ++yindex) {
                        y = data[yindex].y;
                        y1 = data[yindex + 1].y;
                        for (var xindex = 0, xlength = col; xindex < xlength; ++xindex) {
                            x = data[xindex].x;
                            x1 = data[xindex + 1].x;
                            vec3.set(vec3_temps[0], x, y, 0);
                            vec3.set(vec3_temps[1], x1, y, 0);
                            vec3.set(vec3_temps[2], x, y1, 0);
                            vec3.set(vec3_temps[3], x1, y1, 0);
                            for (var _i = 0; _i < 4; _i++) {
                                var vec3_temp = vec3_temps[_i];
                                vec3.transformMat4(vec3_temp, vec3_temp, matrix);
                                var offset = _i * 6;
                                vbuf[vertexOffset + offset] = vec3_temp.x;
                                vbuf[vertexOffset + offset + 1] = vec3_temp.y;
                                vbuf[vertexOffset + offset + 2] = vec3_temp.z;
                            }
                            vertexOffset += 24;
                        }
                    }
                };
            }()
        }, assembler);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,