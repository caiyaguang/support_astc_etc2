(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/simple.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var packToDynamicAtlas = require('../../../../utils/utils').packToDynamicAtlas;
        module.exports = {
            updateRenderData: function updateRenderData(sprite) {
                packToDynamicAtlas(sprite, sprite._spriteFrame);
                var renderData = sprite._renderData;
                if (!renderData || !sprite.spriteFrame)
                    return;
                if (renderData.vertDirty) {
                    this.updateVerts(sprite);
                }
            },
            fillBuffers: function fillBuffers(sprite, renderer) {
                var data = sprite._renderData._data, node = sprite.node, color = node._color._val, matrix = node._worldMatrix, a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13, buffer = renderer._meshBuffer;
                var offsetInfo = buffer.request(4, 6);
                var indiceOffset = offsetInfo.indiceOffset, vertexOffset = offsetInfo.byteOffset >> 2, vertexId = offsetInfo.vertexOffset, vbuf = buffer._vData, uintbuf = buffer._uintVData, ibuf = buffer._iData;
                var uv = sprite._spriteFrame.uv;
                vbuf[vertexOffset + 2] = uv[0];
                vbuf[vertexOffset + 3] = uv[1];
                vbuf[vertexOffset + 7] = uv[2];
                vbuf[vertexOffset + 8] = uv[3];
                vbuf[vertexOffset + 12] = uv[4];
                vbuf[vertexOffset + 13] = uv[5];
                vbuf[vertexOffset + 17] = uv[6];
                vbuf[vertexOffset + 18] = uv[7];
                var data0 = data[0], data3 = data[3], vl = data0.x, vr = data3.x, vb = data0.y, vt = data3.y;
                var al = a * vl, ar = a * vr, bl = b * vl, br = b * vr, cb = c * vb, ct = c * vt, db = d * vb, dt = d * vt;
                vbuf[vertexOffset] = al + cb + tx;
                vbuf[vertexOffset + 1] = bl + db + ty;
                vbuf[vertexOffset + 5] = ar + cb + tx;
                vbuf[vertexOffset + 6] = br + db + ty;
                vbuf[vertexOffset + 10] = al + ct + tx;
                vbuf[vertexOffset + 11] = bl + dt + ty;
                vbuf[vertexOffset + 15] = ar + ct + tx;
                vbuf[vertexOffset + 16] = br + dt + ty;
                uintbuf[vertexOffset + 4] = color;
                uintbuf[vertexOffset + 9] = color;
                uintbuf[vertexOffset + 14] = color;
                uintbuf[vertexOffset + 19] = color;
                ibuf[indiceOffset++] = vertexId;
                ibuf[indiceOffset++] = vertexId + 1;
                ibuf[indiceOffset++] = vertexId + 2;
                ibuf[indiceOffset++] = vertexId + 1;
                ibuf[indiceOffset++] = vertexId + 3;
                ibuf[indiceOffset++] = vertexId + 2;
            },
            createData: function createData(sprite) {
                var renderData = sprite.requestRenderData();
                renderData.dataLength = 4;
                renderData.vertexCount = 4;
                renderData.indiceCount = 6;
                return renderData;
            },
            updateVerts: function updateVerts(sprite) {
                var renderData = sprite._renderData, node = sprite.node, data = renderData._data, cw = node.width, ch = node.height, appx = node.anchorX * cw, appy = node.anchorY * ch, l = void 0, b = void 0, r = void 0, t = void 0;
                if (sprite.trim) {
                    l = -appx;
                    b = -appy;
                    r = cw - appx;
                    t = ch - appy;
                } else {
                    var frame = sprite.spriteFrame, ow = frame._originalSize.width, oh = frame._originalSize.height, rw = frame._rect.width, rh = frame._rect.height, offset = frame._offset, scaleX = cw / ow, scaleY = ch / oh;
                    var trimLeft = offset.x + (ow - rw) / 2;
                    var trimRight = offset.x - (ow - rw) / 2;
                    var trimBottom = offset.y + (oh - rh) / 2;
                    var trimTop = offset.y - (oh - rh) / 2;
                    l = trimLeft * scaleX - appx;
                    b = trimBottom * scaleY - appy;
                    r = cw + trimRight * scaleX - appx;
                    t = ch + trimTop * scaleY - appy;
                }
                data[0].x = l;
                data[0].y = b;
                data[3].x = r;
                data[3].y = t;
                renderData.vertDirty = false;
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,