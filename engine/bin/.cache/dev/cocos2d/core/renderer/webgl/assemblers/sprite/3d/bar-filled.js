(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/3d/bar-filled.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../../../../../platform/js');
        var assembler = require('../2d/bar-filled');
        var fillVerticesWithoutCalc3D = require('../../utils').fillVerticesWithoutCalc3D;
        var vec3 = cc.vmath.vec3;
        module.exports = js.addon({
            updateWorldVerts: function updateWorldVerts(sprite) {
                var node = sprite.node, data = sprite._renderData._data;
                var matrix = node._worldMatrix;
                for (var i = 0; i < 4; i++) {
                    var local = data[i + 4];
                    var world = data[i];
                    vec3.transformMat4(world, local, matrix);
                }
            },
            fillBuffers: function fillBuffers(sprite, renderer) {
                if (renderer.worldMatDirty) {
                    this.updateWorldVerts(sprite);
                }
                var buffer = renderer._meshBuffer3D;
                var node = sprite.node;
                var offsetInfo = fillVerticesWithoutCalc3D(node, buffer, sprite._renderData, node._color._val);
                var ibuf = buffer._iData, indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset;
                ibuf[indiceOffset++] = vertexId;
                ibuf[indiceOffset++] = vertexId + 1;
                ibuf[indiceOffset++] = vertexId + 2;
                ibuf[indiceOffset++] = vertexId + 1;
                ibuf[indiceOffset++] = vertexId + 3;
                ibuf[indiceOffset++] = vertexId + 2;
            }
        }, assembler);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,