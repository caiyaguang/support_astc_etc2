(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/label/2d/bmfont.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../../../../../platform/js');
        var bmfontUtls = require('../../../../utils/label/bmfont');
        var fillMeshVertices = require('../../utils').fillMeshVertices;
        module.exports = js.addon({
            createData: function createData(comp) {
                return comp.requestRenderData();
            },
            fillBuffers: function fillBuffers(comp, renderer) {
                var node = comp.node;
                fillMeshVertices(node, renderer._meshBuffer, comp._renderData, node._color._val);
            },
            appendQuad: function appendQuad(renderData, texture, rect, rotated, x, y, scale) {
                var dataOffset = renderData.dataLength;
                renderData.dataLength += 4;
                renderData.vertexCount = renderData.dataLength;
                renderData.indiceCount = renderData.dataLength / 2 * 3;
                var data = renderData._data;
                var texw = texture.width, texh = texture.height;
                var rectWidth = rect.width, rectHeight = rect.height;
                var l = void 0, b = void 0, r = void 0, t = void 0;
                if (!rotated) {
                    l = rect.x / texw;
                    r = (rect.x + rectWidth) / texw;
                    b = (rect.y + rectHeight) / texh;
                    t = rect.y / texh;
                    data[dataOffset].u = l;
                    data[dataOffset].v = b;
                    data[dataOffset + 1].u = r;
                    data[dataOffset + 1].v = b;
                    data[dataOffset + 2].u = l;
                    data[dataOffset + 2].v = t;
                    data[dataOffset + 3].u = r;
                    data[dataOffset + 3].v = t;
                } else {
                    l = rect.x / texw;
                    r = (rect.x + rectHeight) / texw;
                    b = (rect.y + rectWidth) / texh;
                    t = rect.y / texh;
                    data[dataOffset].u = l;
                    data[dataOffset].v = t;
                    data[dataOffset + 1].u = l;
                    data[dataOffset + 1].v = b;
                    data[dataOffset + 2].u = r;
                    data[dataOffset + 2].v = t;
                    data[dataOffset + 3].u = r;
                    data[dataOffset + 3].v = b;
                }
                data[dataOffset].x = x;
                data[dataOffset].y = y - rectHeight * scale;
                data[dataOffset + 1].x = x + rectWidth * scale;
                data[dataOffset + 1].y = y - rectHeight * scale;
                data[dataOffset + 2].x = x;
                data[dataOffset + 2].y = y;
                data[dataOffset + 3].x = x + rectWidth * scale;
                data[dataOffset + 3].y = y;
            }
        }, bmfontUtls);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,