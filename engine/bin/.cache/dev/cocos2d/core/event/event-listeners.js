(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/event/event-listeners.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = cc.js;
        var CallbacksHandler = require('../platform/callbacks-invoker').CallbacksHandler;
        function EventListeners() {
            CallbacksHandler.call(this);
        }
        js.extend(EventListeners, CallbacksHandler);
        EventListeners.prototype.invoke = function (event, captureListeners) {
            var key = event.type;
            var list = this._callbackTable[key];
            if (list) {
                var rootInvoker = !list.isInvoking;
                list.isInvoking = true;
                var callbacks = list.callbacks;
                var targets = list.targets;
                for (var i = 0, len = callbacks.length; i < len; ++i) {
                    var callback = callbacks[i];
                    if (callback) {
                        var target = targets[i] || event.currentTarget;
                        callback.call(target, event, captureListeners);
                        if (event._propagationImmediateStopped) {
                            break;
                        }
                    }
                }
                if (rootInvoker) {
                    list.isInvoking = false;
                    if (list.containCanceled) {
                        list.purgeCanceled();
                    }
                }
            }
        };
        module.exports = EventListeners;
        if (CC_TEST) {
            cc._Test.EventListeners = EventListeners;
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,