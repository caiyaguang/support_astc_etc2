(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/graphics/graphics.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var RenderComponent = require('../components/CCRenderComponent');
        var Material = require('../assets/material/CCMaterial');
        var Types = require('./types');
        var LineCap = Types.LineCap;
        var LineJoin = Types.LineJoin;
        var Graphics = cc.Class({
            name: 'cc.Graphics',
            extends: RenderComponent,
            editor: CC_EDITOR && { menu: 'i18n:MAIN_MENU.component.renderers/Graphics' },
            ctor: function ctor() {
                this._impl = Graphics._assembler.createImpl(this);
            },
            properties: {
                _lineWidth: 1,
                _strokeColor: cc.Color.BLACK,
                _lineJoin: LineJoin.MITER,
                _lineCap: LineCap.BUTT,
                _fillColor: cc.Color.WHITE,
                _miterLimit: 10,
                lineWidth: {
                    get: function get() {
                        return this._lineWidth;
                    },
                    set: function set(value) {
                        this._lineWidth = value;
                        this._impl.lineWidth = value;
                    }
                },
                lineJoin: {
                    get: function get() {
                        return this._lineJoin;
                    },
                    set: function set(value) {
                        this._lineJoin = value;
                        this._impl.lineJoin = value;
                    },
                    type: LineJoin
                },
                lineCap: {
                    get: function get() {
                        return this._lineCap;
                    },
                    set: function set(value) {
                        this._lineCap = value;
                        this._impl.lineCap = value;
                    },
                    type: LineCap
                },
                strokeColor: {
                    get: function get() {
                        return this._strokeColor;
                    },
                    set: function set(value) {
                        this._impl.strokeColor = this._strokeColor = cc.color(value);
                    }
                },
                fillColor: {
                    get: function get() {
                        return this._fillColor;
                    },
                    set: function set(value) {
                        this._impl.fillColor = this._fillColor = cc.color(value);
                    }
                },
                miterLimit: {
                    get: function get() {
                        return this._miterLimit;
                    },
                    set: function set(value) {
                        this._miterLimit = value;
                        this._impl.miterLimit = value;
                    }
                }
            },
            statics: {
                LineJoin: LineJoin,
                LineCap: LineCap
            },
            onRestore: function onRestore() {
                if (!this._impl) {
                    this._impl = Graphics._assembler.createImpl();
                }
            },
            onEnable: function onEnable() {
                this._super();
                this._activateMaterial();
            },
            onDestroy: function onDestroy() {
                this._super();
                this._impl.clear(this, true);
                this._impl = null;
            },
            _activateMaterial: function _activateMaterial() {
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    this.disableRender();
                    return;
                }
                this.node._renderFlag &= ~cc.RenderFlow.FLAG_RENDER;
                this.node._renderFlag |= cc.RenderFlow.FLAG_CUSTOM_IA_RENDER;
                var material = this.sharedMaterials[0];
                if (!material) {
                    material = Material.getInstantiatedBuiltinMaterial('2d-base', this);
                } else {
                    material = Material.getInstantiatedMaterial(material, this);
                }
                material.define('_USE_MODEL', true);
                this.setMaterial(0, material);
            },
            moveTo: function moveTo(x, y) {
                if (CC_DEBUG && x instanceof cc.Vec2) {
                    cc.warn('[moveTo] : Can not pass Vec2 as [x, y] value, please check it.');
                    return;
                }
                this._impl.moveTo(x, y);
            },
            lineTo: function lineTo(x, y) {
                if (CC_DEBUG && x instanceof cc.Vec2) {
                    cc.warn('[moveTo] : Can not pass Vec2 as [x, y] value, please check it.');
                    return;
                }
                this._impl.lineTo(x, y);
            },
            bezierCurveTo: function bezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
                this._impl.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
            },
            quadraticCurveTo: function quadraticCurveTo(cx, cy, x, y) {
                this._impl.quadraticCurveTo(cx, cy, x, y);
            },
            arc: function arc(cx, cy, r, startAngle, endAngle, counterclockwise) {
                this._impl.arc(cx, cy, r, startAngle, endAngle, counterclockwise);
            },
            ellipse: function ellipse(cx, cy, rx, ry) {
                this._impl.ellipse(cx, cy, rx, ry);
            },
            circle: function circle(cx, cy, r) {
                this._impl.circle(cx, cy, r);
            },
            rect: function rect(x, y, w, h) {
                this._impl.rect(x, y, w, h);
            },
            roundRect: function roundRect(x, y, w, h, r) {
                this._impl.roundRect(x, y, w, h, r);
            },
            fillRect: function fillRect(x, y, w, h) {
                this.rect(x, y, w, h);
                this.fill();
            },
            clear: function clear(clean) {
                this._impl.clear(this, clean);
            },
            close: function close() {
                this._impl.close();
            },
            stroke: function stroke() {
                Graphics._assembler.stroke(this);
            },
            fill: function fill() {
                Graphics._assembler.fill(this);
            }
        });
        cc.Graphics = module.exports = Graphics;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,