(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCRenderTexture.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var renderer = require('../renderer');
        var Texture2D = require('./CCTexture2D');
        var RenderTexture = cc.Class({
            name: 'cc.RenderTexture',
            extends: Texture2D,
            ctor: function ctor() {
                this._framebuffer = null;
            },
            initWithSize: function initWithSize(width, height, depthStencilFormat) {
                this.width = Math.floor(width || cc.visibleRect.width);
                this.height = Math.floor(height || cc.visibleRect.height);
                this._resetUnderlyingMipmaps();
                var opts = { colors: [this._texture] };
                if (this._depthStencilBuffer)
                    this._depthStencilBuffer.destroy();
                var depthStencilBuffer = void 0;
                if (depthStencilFormat) {
                    depthStencilBuffer = new _gfx2.default.RenderBuffer(renderer.device, depthStencilFormat, width, height);
                    if (depthStencilFormat === _gfx2.default.RB_FMT_D24S8) {
                        opts.depthStencil = depthStencilBuffer;
                    } else if (depthStencilFormat === _gfx2.default.RB_FMT_S8) {
                        opts.stencil = depthStencilBuffer;
                    } else if (depthStencilFormat === _gfx2.default.RB_FMT_D16) {
                        opts.depth = depthStencilBuffer;
                    }
                }
                this._depthStencilBuffer = depthStencilBuffer;
                if (this._framebuffer)
                    this._framebuffer.destroy();
                this._framebuffer = new _gfx2.default.FrameBuffer(renderer.device, width, height, opts);
                this._packable = false;
                this.loaded = true;
                this.emit('load');
            },
            updateSize: function updateSize(width, height) {
                this.width = Math.floor(width || cc.visibleRect.width);
                this.height = Math.floor(height || cc.visibleRect.height);
                this._resetUnderlyingMipmaps();
                var rbo = this._depthStencilBuffer;
                if (rbo)
                    rbo.update(this.width, this.height);
                this._framebuffer._width = width;
                this._framebuffer._height = height;
            },
            drawTextureAt: function drawTextureAt(texture, x, y) {
                if (!texture._image)
                    return;
                this._texture.updateSubImage({
                    x: x,
                    y: y,
                    image: texture._image,
                    width: texture.width,
                    height: texture.height,
                    level: 0,
                    flipY: false,
                    premultiplyAlpha: texture._premultiplyAlpha
                });
            },
            readPixels: function readPixels(data, x, y, w, h) {
                if (!this._framebuffer || !this._texture)
                    return data;
                x = x || 0;
                y = y || 0;
                var width = w || this.width;
                var height = h || this.height;
                data = data || new Uint8Array(width * height * 4);
                var gl = renderer._forward._device._gl;
                var oldFBO = gl.getParameter(gl.FRAMEBUFFER_BINDING);
                gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer._glID);
                gl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);
                gl.bindFramebuffer(gl.FRAMEBUFFER, oldFBO);
                return data;
            },
            destroy: function destroy() {
                this._super();
                if (this._framebuffer) {
                    this._framebuffer.destroy();
                }
            }
        });
        cc.RenderTexture = module.exports = RenderTexture;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,