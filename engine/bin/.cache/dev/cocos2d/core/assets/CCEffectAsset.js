(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCEffectAsset.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Asset = require('./CCAsset');
        var EffectAsset = cc.Class({
            name: 'cc.EffectAsset',
            extends: Asset,
            properties: {
                properties: Object,
                techniques: [],
                shaders: []
            },
            onLoad: function onLoad() {
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    return;
                }
                var lib = cc.renderer._forward._programLib;
                for (var i = 0; i < this.shaders.length; i++) {
                    lib.define(this.shaders[i]);
                }
            }
        });
        module.exports = cc.EffectAsset = EffectAsset;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDRWZmZWN0QXNzZXQuanMiLCIvVXNlcnMvenpmMjAxOS9EZXNrdG9wL2RldmVsb3BtZW50L3N1cHBvcnRfYXN0Yy9lbmdpbmUvY29jb3MyZC9jb3JlL2Fzc2V0cy9DQ0VmZmVjdEFzc2V0LmpzIl0sIm5hbWVzIjpbImNjIiwiQ2xhc3MiLCJBc3NldCIsInJlcXVpcmUiLCJFZmZlY3RBc3NldCIsIm5hbWUiLCJleHRlbmRzIiwicHJvcGVydGllcyIsIk9iamVjdCIsInRlY2huaXF1ZXMiLCJzaGFkZXJzIiwib25Mb2FkIiwiZ2FtZSIsInJlbmRlclR5cGUiLCJSRU5ERVJfVFlQRV9DQU5WQVMiLCJsaWIiLCJyZW5kZXJlciIsIl9mb3J3YXJkIiwiX3Byb2dyYW1MaWIiLCJpIiwibGVuZ3RoIiwiZGVmaW5lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFzQixJQUFBLE9BQUEsR0FBdEIsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQXNCOztJQUVKQSxJQUFHQyxVQUFBQSxHQUFNLGlEQUFURDtJQUNSLElBQUEsU0FBQSxHQURpQixPQUFBLEdBQUEsVUFBQSxPQUFBLEVBQUE7QUFBQSxRQUFBLE9BQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBO0FBQUEsS0FBQTtRQUlYLE9BQUEsaUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxFQUFBLFVBQUEsQ0FBQTtLQUhOO0lBS1UsU0FGSixRQUVJLENBRkosT0FFSSxFQUZKLE9BRUksRUFGSixNQUVJLEVBRko7QUFBQSxRQUdDLElBQUEsQ0FBQSxPQUFBLEVBQUE7QUFBQSxZQUFBLGlCQUFBLENBQUEsY0FBQSxDQUFBLFVBQUEsRUFBQSxNQUFBLEVBQUE7QUFBQSxTQUhEO0FBQUE7UUFOaEIsSUFBTUUsS0FBQUEsR0FBUUMsT0FBQUEsQ0FBUSxXQUFSQSxDQUFkO1FBRUEsSUFBSUMsV0FBQUEsR0FBY0osRUFBQUEsQ0FBR0MsS0FBSEQsQ0FBUztBQUFBLFlBQ3ZCSyxJQUFBQSxFQUFNLGdCQURpQjtBQUFBLFlBRXZCQyxPQUFBQSxFQUFTSixLQUZjO0FBQUEsWUFJdkJLLFVBQUFBLEVBQVk7QUFBQSxnQkFDUkEsVUFBQUEsRUFBWUMsTUFESjtBQUFBLGdCQUVSQyxVQUFBQSxFQUFZLEVBRko7QUFBQSxnQkFHUkMsT0FBQUEsRUFBUyxFQUhEO0FBQUEsYUFKVztBQUFBLFlBVXZCQyxNQUFBQSxFQVZ1QixTQUFBLE1BQUEsR0FVYjtBQUFBLGdCQUNOLElBQUlYLEVBQUFBLENBQUdZLElBQUhaLENBQVFhLFVBQVJiLEtBQXVCQSxFQUFBQSxDQUFHWSxJQUFIWixDQUFRYyxrQkFBbkMsRUFBdUQ7QUFBQSxvQkFDbkQsT0FEbUQ7QUFBQSxpQkFEakQ7QUFBQSxnQkFLTixJQUFJQyxHQUFBQSxHQUFNZixFQUFBQSxDQUFHZ0IsUUFBSGhCLENBQVlpQixRQUFaakIsQ0FBcUJrQixXQUEvQixDQUxNO0FBQUEsZ0JBTU4sS0FBSyxJQUFJQyxDQUFBQSxHQUFJLENBQVIsQ0FBTCxDQUFnQkEsQ0FBQUEsR0FBSSxLQUFLVCxPQUFMLENBQWFVLE1BQWpDLEVBQXlDRCxDQUFBQSxFQUF6QyxFQUE4QztBQUFBLG9CQUMxQ0osR0FBQUEsQ0FBSU0sTUFBSk4sQ0FBVyxLQUFLTCxPQUFMLENBQWFTLENBQWIsQ0FBWEosRUFEMEM7QUFBQSxpQkFOeEM7QUFBQSxhQVZhO0FBQUEsU0FBVGYsQ0FBbEI7UUFzQkFzQixNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQnRCLEVBQUFBLENBQUdJLFdBQUhKLEdBQWlCSSxXQUFsQ2tCLENBbEJnQjtBQUFBOztRQUpXLFFBQUEsQ0FVYixRQUFBLENBQUEsT0FWYSxFQVViLFNBVmEsRUFVYixRQVZhO1dBWWY7QUFBQSxRQUNILGlCQUFBLENBQUEsa0JBQUEsQ0FBQSxVQUFBLEVBQUEsWUFBQTtBQUFBLDREQUFBO0FBQUEsU0FBQSxFQURHO0FBQUEiLCJmaWxlIjoiQ0NFZmZlY3RBc3NldC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFzc2V0ID0gcmVxdWlyZSgnLi9DQ0Fzc2V0Jyk7XG5cbmxldCBFZmZlY3RBc3NldCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuRWZmZWN0QXNzZXQnLFxuICAgIGV4dGVuZHM6IEFzc2V0LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBwcm9wZXJ0aWVzOiBPYmplY3QsXG4gICAgICAgIHRlY2huaXF1ZXM6IFtdLFxuICAgICAgICBzaGFkZXJzOiBbXVxuICAgIH0sXG5cbiAgICBvbkxvYWQgKCkge1xuICAgICAgICBpZiAoY2MuZ2FtZS5yZW5kZXJUeXBlID09PSBjYy5nYW1lLlJFTkRFUl9UWVBFX0NBTlZBUykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsZXQgbGliID0gY2MucmVuZGVyZXIuX2ZvcndhcmQuX3Byb2dyYW1MaWI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaGFkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsaWIuZGVmaW5lKHRoaXMuc2hhZGVyc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjYy5FZmZlY3RBc3NldCA9IEVmZmVjdEFzc2V0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXNzZXQgPSByZXF1aXJlKCcuL0NDQXNzZXQnKTtcblxudmFyIEVmZmVjdEFzc2V0ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5FZmZlY3RBc3NldCcsXG4gICAgZXh0ZW5kczogQXNzZXQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHByb3BlcnRpZXM6IE9iamVjdCxcbiAgICAgICAgdGVjaG5pcXVlczogW10sXG4gICAgICAgIHNoYWRlcnM6IFtdXG4gICAgfSxcblxuICAgIG9uTG9hZDogZnVuY3Rpb24gb25Mb2FkKCkge1xuICAgICAgICBpZiAoY2MuZ2FtZS5yZW5kZXJUeXBlID09PSBjYy5nYW1lLlJFTkRFUl9UWVBFX0NBTlZBUykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxpYiA9IGNjLnJlbmRlcmVyLl9mb3J3YXJkLl9wcm9ncmFtTGliO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2hhZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGliLmRlZmluZSh0aGlzLnNoYWRlcnNbaV0pO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2MuRWZmZWN0QXNzZXQgPSBFZmZlY3RBc3NldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRSV1ptWldOMFFYTnpaWFF1YW5NaVhTd2libUZ0WlhNaU9sc2lRWE56WlhRaUxDSnlaWEYxYVhKbElpd2lSV1ptWldOMFFYTnpaWFFpTENKall5SXNJa05zWVhOeklpd2libUZ0WlNJc0ltVjRkR1Z1WkhNaUxDSndjbTl3WlhKMGFXVnpJaXdpVDJKcVpXTjBJaXdpZEdWamFHNXBjWFZsY3lJc0luTm9ZV1JsY25NaUxDSnZia3h2WVdRaUxDSm5ZVzFsSWl3aWNtVnVaR1Z5Vkhsd1pTSXNJbEpGVGtSRlVsOVVXVkJGWDBOQlRsWkJVeUlzSW14cFlpSXNJbkpsYm1SbGNtVnlJaXdpWDJadmNuZGhjbVFpTENKZmNISnZaM0poYlV4cFlpSXNJbWtpTENKc1pXNW5kR2dpTENKa1pXWnBibVVpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFbEJRVTFCTEZGQlFWRkRMRkZCUVZFc1YwRkJVaXhEUVVGa096dEJRVVZCTEVsQlFVbERMR05CUVdORExFZEJRVWRETEV0QlFVZ3NRMEZCVXp0QlFVTjJRa01zVlVGQlRTeG5Ra0ZFYVVJN1FVRkZka0pETEdGQlFWTk9MRXRCUm1NN08wRkJTWFpDVHl4blFrRkJXVHRCUVVOU1FTeHZRa0ZCV1VNc1RVRkVTanRCUVVWU1F5eHZRa0ZCV1N4RlFVWktPMEZCUjFKRExHbENRVUZUTzBGQlNFUXNTMEZLVnpzN1FVRlZka0pETEZWQlZuVkNMRzlDUVZWaU8wRkJRMDRzV1VGQlNWSXNSMEZCUjFNc1NVRkJTQ3hEUVVGUlF5eFZRVUZTTEV0QlFYVkNWaXhIUVVGSFV5eEpRVUZJTEVOQlFWRkZMR3RDUVVGdVF5eEZRVUYxUkR0QlFVTnVSRHRCUVVOSU96dEJRVVZFTEZsQlFVbERMRTFCUVUxYUxFZEJRVWRoTEZGQlFVZ3NRMEZCV1VNc1VVRkJXaXhEUVVGeFFrTXNWMEZCTDBJN1FVRkRRU3hoUVVGTExFbEJRVWxETEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNTeExRVUZMVkN4UFFVRk1MRU5CUVdGVkxFMUJRV3BETEVWQlFYbERSQ3hIUVVGNlF5eEZRVUU0UXp0QlFVTXhRMG9zWjBKQlFVbE5MRTFCUVVvc1EwRkJWeXhMUVVGTFdDeFBRVUZNTEVOQlFXRlRMRU5CUVdJc1EwRkJXRHRCUVVOSU8wRkJRMG83UVVGdVFuTkNMRU5CUVZRc1EwRkJiRUk3TzBGQmMwSkJSeXhQUVVGUFF5eFBRVUZRTEVkQlFXbENjRUlzUjBGQlIwUXNWMEZCU0N4SFFVRnBRa0VzVjBGQmJFTWlMQ0ptYVd4bElqb2lRME5GWm1abFkzUkJjM05sZEM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbU52Ym5OMElFRnpjMlYwSUQwZ2NtVnhkV2x5WlNnbkxpOURRMEZ6YzJWMEp5azdYRzVjYm14bGRDQkZabVpsWTNSQmMzTmxkQ0E5SUdOakxrTnNZWE56S0h0Y2JpQWdJQ0J1WVcxbE9pQW5ZMk11UldabVpXTjBRWE56WlhRbkxGeHVJQ0FnSUdWNGRHVnVaSE02SUVGemMyVjBMRnh1WEc0Z0lDQWdjSEp2Y0dWeWRHbGxjem9nZTF4dUlDQWdJQ0FnSUNCd2NtOXdaWEowYVdWek9pQlBZbXBsWTNRc1hHNGdJQ0FnSUNBZ0lIUmxZMmh1YVhGMVpYTTZJRnRkTEZ4dUlDQWdJQ0FnSUNCemFHRmtaWEp6T2lCYlhWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCdmJreHZZV1FnS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWTJNdVoyRnRaUzV5Wlc1a1pYSlVlWEJsSUQwOVBTQmpZeTVuWVcxbExsSkZUa1JGVWw5VVdWQkZYME5CVGxaQlV5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQnNaWFFnYkdsaUlEMGdZMk11Y21WdVpHVnlaWEl1WDJadmNuZGhjbVF1WDNCeWIyZHlZVzFNYVdJN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dkR2hwY3k1emFHRmtaWEp6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc2FXSXVaR1ZtYVc1bEtIUm9hWE11YzJoaFpHVnljMXRwWFNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlLVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCall5NUZabVpsWTNSQmMzTmxkQ0E5SUVWbVptVmpkRUZ6YzJWME8xeHVJbDE5Il19