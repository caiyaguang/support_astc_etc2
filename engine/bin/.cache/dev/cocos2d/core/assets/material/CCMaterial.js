(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/material/CCMaterial.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _effect = require('../../../renderer/core/effect');
        var _effect2 = _interopRequireDefault(_effect);
        var _murmurhash2_gc = require('./murmurhash2_gc');
        var _murmurhash2_gc2 = _interopRequireDefault(_murmurhash2_gc);
        var _utils = require('./utils');
        var _utils2 = _interopRequireDefault(_utils);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var Asset = require('../CCAsset');
        var Texture = require('../CCTexture2D');
        var PixelFormat = Texture.PixelFormat;
        var EffectAsset = require('../CCEffectAsset');
        var Material = cc.Class({
            name: 'cc.Material',
            extends: Asset,
            ctor: function ctor() {
                this._dirty = true;
                this._effect = null;
                this._owner = null;
            },
            properties: {
                _effectAsset: {
                    type: EffectAsset,
                    default: null
                },
                _defines: {
                    default: {},
                    type: Object
                },
                _props: {
                    default: {},
                    type: Object
                },
                effectName: CC_EDITOR ? {
                    get: function get() {
                        return this._effectAsset.name;
                    },
                    set: function set(val) {
                        var effectAsset = cc.AssetLibrary.getBuiltin('effect', val);
                        if (!effectAsset) {
                            Editor.warn('no effect named \'' + val + '\' found');
                            return;
                        }
                        this.effectAsset = effectAsset;
                    }
                } : undefined,
                effectAsset: {
                    get: function get() {
                        return this._effectAsset;
                    },
                    set: function set(asset) {
                        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                            return;
                        }
                        this._effectAsset = asset;
                        if (!asset) {
                            cc.error('Can not set an empty effect asset.');
                            return;
                        }
                        this._effect = _effect2.default.parseEffect(asset);
                    }
                },
                effect: {
                    get: function get() {
                        return this._effect;
                    }
                },
                owner: {
                    get: function get() {
                        return this._owner;
                    }
                }
            },
            statics: {
                getBuiltinMaterial: function getBuiltinMaterial(name) {
                    return cc.AssetLibrary.getBuiltin('material', 'builtin-' + name);
                },
                getInstantiatedBuiltinMaterial: function getInstantiatedBuiltinMaterial(name, renderComponent) {
                    var builtinMaterial = this.getBuiltinMaterial(name);
                    return Material.getInstantiatedMaterial(builtinMaterial, renderComponent);
                },
                getInstantiatedMaterial: function getInstantiatedMaterial(mat, renderComponent) {
                    if (mat._owner === renderComponent) {
                        return mat;
                    } else {
                        var instance = new Material();
                        instance.copy(mat);
                        instance._name = mat._name + ' (Instance)';
                        instance._uuid = mat._uuid;
                        instance._owner = renderComponent;
                        return instance;
                    }
                }
            },
            copy: function copy(mat) {
                this.effectAsset = mat.effectAsset;
                for (var name in mat._defines) {
                    this.define(name, mat._defines[name]);
                }
                for (var _name in mat._props) {
                    this.setProperty(_name, mat._props[_name]);
                }
            },
            setProperty: function setProperty(name, val, force) {
                if (this._props[name] === val && !force)
                    return;
                this._props[name] = val;
                this._dirty = true;
                if (this._effect) {
                    if (val instanceof Texture) {
                        this._effect.setProperty(name, val.getImpl());
                        if (val.getPixelFormat() === PixelFormat.RGBA_ETC1) {
                            this.define('_USE_ETC1_' + name.toUpperCase(), true);
                        }
                    } else {
                        this._effect.setProperty(name, val);
                    }
                }
            },
            getProperty: function getProperty(name) {
                return this._props[name];
            },
            define: function define(name, val, force) {
                if (this._defines[name] === val && !force)
                    return;
                this._defines[name] = val;
                this._dirty = true;
                if (this._effect) {
                    this._effect.define(name, val);
                }
            },
            getDefine: function getDefine(name) {
                return this._defines[name];
            },
            setDirty: function setDirty(dirty) {
                this._dirty = dirty;
            },
            updateHash: function updateHash(hash) {
                this._dirty = false;
                this._hash = hash;
            },
            getHash: function getHash() {
                if (!this._dirty)
                    return this._hash;
                this._dirty = false;
                var effect = this._effect;
                var hashStr = '';
                if (effect) {
                    hashStr += _utils2.default.serializeDefines(effect._defines);
                    hashStr += _utils2.default.serializeTechniques(effect._techniques);
                    hashStr += _utils2.default.serializeUniforms(effect._properties);
                }
                return this._hash = (0, _murmurhash2_gc2.default)(hashStr, 666);
            },
            onLoad: function onLoad() {
                this.effectAsset = this._effectAsset;
                if (!this._effect)
                    return;
                for (var def in this._defines) {
                    this.define(def, this._defines[def], true);
                }
                for (var prop in this._props) {
                    this.setProperty(prop, this._props[prop], true);
                }
            }
        });
        module.exports = cc.Material = Material;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDTWF0ZXJpYWwuanMiLCIvVXNlcnMvenpmMjAxOS9EZXNrdG9wL2RldmVsb3BtZW50L3N1cHBvcnRfYXN0Yy9lbmdpbmUvY29jb3MyZC9jb3JlL2Fzc2V0cy9tYXRlcmlhbC9DQ01hdGVyaWFsLmpzIl0sIm5hbWVzIjpbIkFzc2V0IiwicmVxdWlyZSIsIlRleHR1cmUiLCJQaXhlbEZvcm1hdCIsIkVmZmVjdEFzc2V0IiwiTWF0ZXJpYWwiLCJjYyIsIkNsYXNzIiwibmFtZSIsImV4dGVuZHMiLCJjdG9yIiwiX2RpcnR5IiwiX2VmZmVjdCIsIl9vd25lciIsInByb3BlcnRpZXMiLCJfZWZmZWN0QXNzZXQiLCJ0eXBlIiwiZGVmYXVsdCIsIl9kZWZpbmVzIiwiT2JqZWN0IiwiX3Byb3BzIiwiZWZmZWN0TmFtZSIsIkNDX0VESVRPUiIsImdldCIsInNldCIsInZhbCIsImVmZmVjdEFzc2V0IiwiQXNzZXRMaWJyYXJ5IiwiZ2V0QnVpbHRpbiIsIkVkaXRvciIsIndhcm4iLCJ1bmRlZmluZWQiLCJhc3NldCIsImdhbWUiLCJyZW5kZXJUeXBlIiwiUkVOREVSX1RZUEVfQ0FOVkFTIiwiZXJyb3IiLCJFZmZlY3QiLCJwYXJzZUVmZmVjdCIsImVmZmVjdCIsIm93bmVyIiwic3RhdGljcyIsImdldEJ1aWx0aW5NYXRlcmlhbCIsImdldEluc3RhbnRpYXRlZEJ1aWx0aW5NYXRlcmlhbCIsInJlbmRlckNvbXBvbmVudCIsImJ1aWx0aW5NYXRlcmlhbCIsImdldEluc3RhbnRpYXRlZE1hdGVyaWFsIiwibWF0IiwiaW5zdGFuY2UiLCJjb3B5IiwiX25hbWUiLCJfdXVpZCIsImRlZmluZSIsInNldFByb3BlcnR5IiwiZm9yY2UiLCJnZXRJbXBsIiwiZ2V0UGl4ZWxGb3JtYXQiLCJSR0JBX0VUQzEiLCJ0b1VwcGVyQ2FzZSIsImdldFByb3BlcnR5IiwiZ2V0RGVmaW5lIiwic2V0RGlydHkiLCJkaXJ0eSIsInVwZGF0ZUhhc2giLCJoYXNoIiwiX2hhc2giLCJnZXRIYXNoIiwiaGFzaFN0ciIsInV0aWxzIiwic2VyaWFsaXplRGVmaW5lcyIsInNlcmlhbGl6ZVRlY2huaXF1ZXMiLCJfdGVjaG5pcXVlcyIsInNlcmlhbGl6ZVVuaWZvcm1zIiwiX3Byb3BlcnRpZXMiLCJvbkxvYWQiLCJkZWYiLCJwcm9wIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQStCQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7OztRQUNBLE9BQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQTs7OztJQUNBLFNBQUEsUUFBQSxDQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBO0FBQUE7O1NBQUE7QUFBQTtRQUZBLElBQUEsT0FBQSxHQUFBLE9BQUEsQ0FBQSwrQkFBQSxDQUFBOztRQUNBLElBQUEsZUFBQSxHQUFBLE9BQUEsQ0FBQSxrQkFBQSxDQUFBOztRQUNBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxTQUFBLENBQUE7Ozs7O1FBUEEsSUFBTUEsS0FBQUEsR0FBUUMsT0FBQUEsQ0FBUSxZQUFSQSxDQUFkO1FBQ0EsSUFBTUMsT0FBQUEsR0FBVUQsT0FBQUEsQ0FBUSxnQkFBUkEsQ0FBaEI7UUFDQSxJQUFNRSxXQUFBQSxHQUFjRCxPQUFBQSxDQUFRQyxXQUE1QjtRQUNBLElBQU1DLFdBQUFBLEdBQWNILE9BQUFBLENBQVEsa0JBQVJBLENBQXBCO1FBWUEsSUFBSUksUUFBQUEsR0FBV0MsRUFBQUEsQ0FBR0MsS0FBSEQsQ0FBUztBQUFBLFlBQ3BCRSxJQUFBQSxFQUFNLGFBRGM7QUFBQSxZQUVwQkMsT0FBQUEsRUFBU1QsS0FGVztBQUFBLFlBSXBCVSxJQUFBQSxFQUpvQixTQUFBLElBQUEsR0FJWjtBQUFBLGdCQUNKLEtBQUtDLE1BQUwsR0FBYyxJQUFkLENBREk7QUFBQSxnQkFFSixLQUFLQyxPQUFMLEdBQWUsSUFBZixDQUZJO0FBQUEsZ0JBR0osS0FBS0MsTUFBTCxHQUFjLElBQWQsQ0FISTtBQUFBLGFBSlk7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Q0FBWXVCLEdBQVosRUFBaUIsS0FBS3pELFFBQUwsQ0FBY3lELEdBQWQsQ0FBakIsRUFBcUMsSUFBckMsRUFEMkI7QUFBQSxpQkFKekI7QUFBQSxnQkFPTixTQUFTQyxJQUFULElBQWlCLEtBQUt4RCxNQUF0QixFQUE4QjtBQUFBLG9CQUMxQixLQUFLaUMsV0FBTCxDQUFpQnVCLElBQWpCLEVBQXVCLEtBQUt4RCxNQUFMLENBQVl3RCxJQUFaLENBQXZCLEVBQTBDLElBQTFDLEVBRDBCO0FBQUEsaUJBUHhCO0FBQUEsYUFsTFU7QUFBQSxTQUFUdEUsQ0FBZjtRQStMQXVFLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCdkUsRUFBQUEsQ0FBR0QsUUFBSEMsR0FBY0QsUUFBL0J3RSxDQXZNQTtBQUFBOzs7V0FqQ0E7QUFBQTs7V0FBQTtBQUFBIiwiZmlsZSI6IkNDTWF0ZXJpYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cDovL3d3dy5jb2Nvcy5jb21cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vLyBAdHMtY2hlY2tcblxuY29uc3QgQXNzZXQgPSByZXF1aXJlKCcuLi9DQ0Fzc2V0Jyk7XG5jb25zdCBUZXh0dXJlID0gcmVxdWlyZSgnLi4vQ0NUZXh0dXJlMkQnKTtcbmNvbnN0IFBpeGVsRm9ybWF0ID0gVGV4dHVyZS5QaXhlbEZvcm1hdDtcbmNvbnN0IEVmZmVjdEFzc2V0ID0gcmVxdWlyZSgnLi4vQ0NFZmZlY3RBc3NldCcpO1xuXG5pbXBvcnQgRWZmZWN0IGZyb20gJy4uLy4uLy4uL3JlbmRlcmVyL2NvcmUvZWZmZWN0JztcbmltcG9ydCBtdXJtdXJoYXNoMiBmcm9tICcuL211cm11cmhhc2gyX2djJztcbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJztcblxuLyoqXG4gKiAhI2VuIE1hdGVyaWFsIEFzc2V0LlxuICogISN6aCDmnZDotKjotYTmupDnsbvjgIJcbiAqIEBjbGFzcyBNYXRlcmlhbFxuICogQGV4dGVuZHMgQXNzZXRcbiAqL1xubGV0IE1hdGVyaWFsID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5NYXRlcmlhbCcsXG4gICAgZXh0ZW5kczogQXNzZXQsXG5cbiAgICBjdG9yICgpIHtcbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLl9lZmZlY3QgPSBudWxsO1xuICAgICAgICB0aGlzLl9vd25lciA9IG51bGw7XG4gICAgfSxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgX2VmZmVjdEFzc2V0OiB7XG4gICAgICAgICAgICB0eXBlOiBFZmZlY3RBc3NldCxcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgIH0sXG4gICAgICAgIF9kZWZpbmVzOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiB7fSxcbiAgICAgICAgICAgIHR5cGU6IE9iamVjdFxuICAgICAgICB9LFxuICAgICAgICBfcHJvcHM6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHt9LFxuICAgICAgICAgICAgdHlwZTogT2JqZWN0XG4gICAgICAgIH0sXG5cbiAgICAgICAgZWZmZWN0TmFtZTogQ0NfRURJVE9SID8ge1xuICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZWZmZWN0QXNzZXQubmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQgKHZhbCkge1xuICAgICAgICAgICAgICAgIGxldCBlZmZlY3RBc3NldCA9IGNjLkFzc2V0TGlicmFyeS5nZXRCdWlsdGluKCdlZmZlY3QnLCB2YWwpO1xuICAgICAgICAgICAgICAgIGlmICghZWZmZWN0QXNzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgRWRpdG9yLndhcm4oYG5vIGVmZmVjdCBuYW1lZCAnJHt2YWx9JyBmb3VuZGApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZWZmZWN0QXNzZXQgPSBlZmZlY3RBc3NldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSA6IHVuZGVmaW5lZCxcblxuICAgICAgICBlZmZlY3RBc3NldDoge1xuICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZWZmZWN0QXNzZXQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0IChhc3NldCkge1xuICAgICAgICAgICAgICAgIGlmIChjYy5nYW1lLnJlbmRlclR5cGUgPT09IGNjLmdhbWUuUkVOREVSX1RZUEVfQ0FOVkFTKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9lZmZlY3RBc3NldCA9IGFzc2V0O1xuICAgICAgICAgICAgICAgIGlmICghYXNzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3IoJ0NhbiBub3Qgc2V0IGFuIGVtcHR5IGVmZmVjdCBhc3NldC4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9lZmZlY3QgPSBFZmZlY3QucGFyc2VFZmZlY3QoYXNzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGVmZmVjdDoge1xuICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZWZmZWN0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG93bmVyOiB7XG4gICAgICAgICAgICBnZXQgKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9vd25lcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzdGF0aWNzOiB7XG4gICAgICAgIGdldEJ1aWx0aW5NYXRlcmlhbCAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNjLkFzc2V0TGlicmFyeS5nZXRCdWlsdGluKCdtYXRlcmlhbCcsICdidWlsdGluLScgKyBuYW1lKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0SW5zdGFudGlhdGVkQnVpbHRpbk1hdGVyaWFsIChuYW1lLCByZW5kZXJDb21wb25lbnQpIHtcbiAgICAgICAgICAgIGxldCBidWlsdGluTWF0ZXJpYWwgPSB0aGlzLmdldEJ1aWx0aW5NYXRlcmlhbChuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBNYXRlcmlhbC5nZXRJbnN0YW50aWF0ZWRNYXRlcmlhbChidWlsdGluTWF0ZXJpYWwsIHJlbmRlckNvbXBvbmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEluc3RhbnRpYXRlZE1hdGVyaWFsIChtYXQsIHJlbmRlckNvbXBvbmVudCkge1xuICAgICAgICAgICAgaWYgKG1hdC5fb3duZXIgPT09IHJlbmRlckNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSBuZXcgTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5jb3B5KG1hdCk7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuX25hbWUgPSBtYXQuX25hbWUgKyAnIChJbnN0YW5jZSknO1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLl91dWlkID0gbWF0Ll91dWlkO1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLl9vd25lciA9IHJlbmRlckNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge01hdGVyaWFsfSBtYXRcbiAgICAgKi9cbiAgICBjb3B5IChtYXQpIHtcbiAgICAgICAgdGhpcy5lZmZlY3RBc3NldCA9IG1hdC5lZmZlY3RBc3NldDtcblxuICAgICAgICBmb3IgKGxldCBuYW1lIGluIG1hdC5fZGVmaW5lcykge1xuICAgICAgICAgICAgdGhpcy5kZWZpbmUobmFtZSwgbWF0Ll9kZWZpbmVzW25hbWVdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IG5hbWUgaW4gbWF0Ll9wcm9wcykge1xuICAgICAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShuYW1lLCBtYXQuX3Byb3BzW25hbWVdKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHZhbFxuICAgICAqL1xuICAgIHNldFByb3BlcnR5IChuYW1lLCB2YWwsIGZvcmNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcm9wc1tuYW1lXSA9PT0gdmFsICYmICFmb3JjZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9wcm9wc1tuYW1lXSA9IHZhbDtcbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuXG4gICAgICAgIGlmICh0aGlzLl9lZmZlY3QpIHtcbiAgICAgICAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBUZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZWZmZWN0LnNldFByb3BlcnR5KG5hbWUsIHZhbC5nZXRJbXBsKCkpO1xuICAgICAgICAgICAgICAgIGlmICh2YWwuZ2V0UGl4ZWxGb3JtYXQoKSA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9FVEMxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmaW5lKCdfVVNFX0VUQzFfJyArIG5hbWUudG9VcHBlckNhc2UoKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZWZmZWN0LnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0UHJvcGVydHkgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BzW25hbWVdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHtCb29sZWFufE51bWJlcn0gdmFsXG4gICAgICovXG4gICAgZGVmaW5lIChuYW1lLCB2YWwsIGZvcmNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9kZWZpbmVzW25hbWVdID09PSB2YWwgJiYgIWZvcmNlKSByZXR1cm47XG4gICAgICAgIHRoaXMuX2RlZmluZXNbbmFtZV0gPSB2YWw7XG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcy5fZWZmZWN0KSB7XG4gICAgICAgICAgICB0aGlzLl9lZmZlY3QuZGVmaW5lKG5hbWUsIHZhbCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0RGVmaW5lIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZpbmVzW25hbWVdO1xuICAgIH0sXG5cbiAgICBzZXREaXJ0eSAoZGlydHkpIHtcbiAgICAgICAgdGhpcy5fZGlydHkgPSBkaXJ0eTtcbiAgICB9LFxuXG4gICAgdXBkYXRlSGFzaCAoaGFzaCkge1xuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9oYXNoID0gaGFzaDtcbiAgICB9LFxuXG4gICAgZ2V0SGFzaCAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGlydHkpIHJldHVybiB0aGlzLl9oYXNoO1xuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuICAgICAgICBsZXQgZWZmZWN0ID0gdGhpcy5fZWZmZWN0O1xuXG4gICAgICAgIGxldCBoYXNoU3RyID0gJyc7XG4gICAgICAgIGlmIChlZmZlY3QpIHtcbiAgICAgICAgICAgIGhhc2hTdHIgKz0gdXRpbHMuc2VyaWFsaXplRGVmaW5lcyhlZmZlY3QuX2RlZmluZXMpO1xuICAgICAgICAgICAgaGFzaFN0ciArPSB1dGlscy5zZXJpYWxpemVUZWNobmlxdWVzKGVmZmVjdC5fdGVjaG5pcXVlcyk7XG4gICAgICAgICAgICBoYXNoU3RyICs9IHV0aWxzLnNlcmlhbGl6ZVVuaWZvcm1zKGVmZmVjdC5fcHJvcGVydGllcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faGFzaCA9IG11cm11cmhhc2gyKGhhc2hTdHIsIDY2Nik7XG4gICAgfSxcblxuICAgIG9uTG9hZCAoKSB7XG4gICAgICAgIHRoaXMuZWZmZWN0QXNzZXQgPSB0aGlzLl9lZmZlY3RBc3NldDtcbiAgICAgICAgaWYgKCF0aGlzLl9lZmZlY3QpIHJldHVybjtcblxuICAgICAgICBmb3IgKGxldCBkZWYgaW4gdGhpcy5fZGVmaW5lcykge1xuICAgICAgICAgICAgdGhpcy5kZWZpbmUoZGVmLCB0aGlzLl9kZWZpbmVzW2RlZl0sIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gdGhpcy5fcHJvcHMpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UHJvcGVydHkocHJvcCwgdGhpcy5fcHJvcHNbcHJvcF0sIHRydWUpO1xuICAgICAgICB9XG4gICAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNjLk1hdGVyaWFsID0gTWF0ZXJpYWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfZWZmZWN0ID0gcmVxdWlyZSgnLi4vLi4vLi4vcmVuZGVyZXIvY29yZS9lZmZlY3QnKTtcblxudmFyIF9lZmZlY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWZmZWN0KTtcblxudmFyIF9tdXJtdXJoYXNoMl9nYyA9IHJlcXVpcmUoJy4vbXVybXVyaGFzaDJfZ2MnKTtcblxudmFyIF9tdXJtdXJoYXNoMl9nYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tdXJtdXJoYXNoMl9nYyk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBfdXRpbHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXRpbHMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cDovL3d3dy5jb2Nvcy5jb21cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vLyBAdHMtY2hlY2tcblxudmFyIEFzc2V0ID0gcmVxdWlyZSgnLi4vQ0NBc3NldCcpO1xudmFyIFRleHR1cmUgPSByZXF1aXJlKCcuLi9DQ1RleHR1cmUyRCcpO1xudmFyIFBpeGVsRm9ybWF0ID0gVGV4dHVyZS5QaXhlbEZvcm1hdDtcbnZhciBFZmZlY3RBc3NldCA9IHJlcXVpcmUoJy4uL0NDRWZmZWN0QXNzZXQnKTtcblxuLyoqXG4gKiAhI2VuIE1hdGVyaWFsIEFzc2V0LlxuICogISN6aCDmnZDotKjotYTmupDnsbvjgIJcbiAqIEBjbGFzcyBNYXRlcmlhbFxuICogQGV4dGVuZHMgQXNzZXRcbiAqL1xudmFyIE1hdGVyaWFsID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5NYXRlcmlhbCcsXG4gICAgZXh0ZW5kczogQXNzZXQsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiBjdG9yKCkge1xuICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2VmZmVjdCA9IG51bGw7XG4gICAgICAgIHRoaXMuX293bmVyID0gbnVsbDtcbiAgICB9LFxuXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIF9lZmZlY3RBc3NldDoge1xuICAgICAgICAgICAgdHlwZTogRWZmZWN0QXNzZXQsXG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIF9kZWZpbmVzOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiB7fSxcbiAgICAgICAgICAgIHR5cGU6IE9iamVjdFxuICAgICAgICB9LFxuICAgICAgICBfcHJvcHM6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHt9LFxuICAgICAgICAgICAgdHlwZTogT2JqZWN0XG4gICAgICAgIH0sXG5cbiAgICAgICAgZWZmZWN0TmFtZTogQ0NfRURJVE9SID8ge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VmZmVjdEFzc2V0Lm5hbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVmZmVjdEFzc2V0ID0gY2MuQXNzZXRMaWJyYXJ5LmdldEJ1aWx0aW4oJ2VmZmVjdCcsIHZhbCk7XG4gICAgICAgICAgICAgICAgaWYgKCFlZmZlY3RBc3NldCkge1xuICAgICAgICAgICAgICAgICAgICBFZGl0b3Iud2Fybignbm8gZWZmZWN0IG5hbWVkIFxcJycgKyB2YWwgKyAnXFwnIGZvdW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5lZmZlY3RBc3NldCA9IGVmZmVjdEFzc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IDogdW5kZWZpbmVkLFxuXG4gICAgICAgIGVmZmVjdEFzc2V0OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZWZmZWN0QXNzZXQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoYXNzZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2MuZ2FtZS5yZW5kZXJUeXBlID09PSBjYy5nYW1lLlJFTkRFUl9UWVBFX0NBTlZBUykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fZWZmZWN0QXNzZXQgPSBhc3NldDtcbiAgICAgICAgICAgICAgICBpZiAoIWFzc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmVycm9yKCdDYW4gbm90IHNldCBhbiBlbXB0eSBlZmZlY3QgYXNzZXQuJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fZWZmZWN0ID0gX2VmZmVjdDIuZGVmYXVsdC5wYXJzZUVmZmVjdChhc3NldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZWZmZWN0OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZWZmZWN0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG93bmVyOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3duZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RhdGljczoge1xuICAgICAgICBnZXRCdWlsdGluTWF0ZXJpYWw6IGZ1bmN0aW9uIGdldEJ1aWx0aW5NYXRlcmlhbChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gY2MuQXNzZXRMaWJyYXJ5LmdldEJ1aWx0aW4oJ21hdGVyaWFsJywgJ2J1aWx0aW4tJyArIG5hbWUpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRJbnN0YW50aWF0ZWRCdWlsdGluTWF0ZXJpYWw6IGZ1bmN0aW9uIGdldEluc3RhbnRpYXRlZEJ1aWx0aW5NYXRlcmlhbChuYW1lLCByZW5kZXJDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHZhciBidWlsdGluTWF0ZXJpYWwgPSB0aGlzLmdldEJ1aWx0aW5NYXRlcmlhbChuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBNYXRlcmlhbC5nZXRJbnN0YW50aWF0ZWRNYXRlcmlhbChidWlsdGluTWF0ZXJpYWwsIHJlbmRlckNvbXBvbmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEluc3RhbnRpYXRlZE1hdGVyaWFsOiBmdW5jdGlvbiBnZXRJbnN0YW50aWF0ZWRNYXRlcmlhbChtYXQsIHJlbmRlckNvbXBvbmVudCkge1xuICAgICAgICAgICAgaWYgKG1hdC5fb3duZXIgPT09IHJlbmRlckNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBNYXRlcmlhbCgpO1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLmNvcHkobWF0KTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5fbmFtZSA9IG1hdC5fbmFtZSArICcgKEluc3RhbmNlKSc7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuX3V1aWQgPSBtYXQuX3V1aWQ7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuX293bmVyID0gcmVuZGVyQ29tcG9uZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TWF0ZXJpYWx9IG1hdFxuICAgICAqL1xuICAgIGNvcHk6IGZ1bmN0aW9uIGNvcHkobWF0KSB7XG4gICAgICAgIHRoaXMuZWZmZWN0QXNzZXQgPSBtYXQuZWZmZWN0QXNzZXQ7XG5cbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBtYXQuX2RlZmluZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lKG5hbWUsIG1hdC5fZGVmaW5lc1tuYW1lXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfbmFtZSBpbiBtYXQuX3Byb3BzKSB7XG4gICAgICAgICAgICB0aGlzLnNldFByb3BlcnR5KF9uYW1lLCBtYXQuX3Byb3BzW19uYW1lXSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHZhbFxuICAgICAqL1xuICAgIHNldFByb3BlcnR5OiBmdW5jdGlvbiBzZXRQcm9wZXJ0eShuYW1lLCB2YWwsIGZvcmNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcm9wc1tuYW1lXSA9PT0gdmFsICYmICFmb3JjZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9wcm9wc1tuYW1lXSA9IHZhbDtcbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuXG4gICAgICAgIGlmICh0aGlzLl9lZmZlY3QpIHtcbiAgICAgICAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBUZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZWZmZWN0LnNldFByb3BlcnR5KG5hbWUsIHZhbC5nZXRJbXBsKCkpO1xuICAgICAgICAgICAgICAgIGlmICh2YWwuZ2V0UGl4ZWxGb3JtYXQoKSA9PT0gUGl4ZWxGb3JtYXQuUkdCQV9FVEMxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmaW5lKCdfVVNFX0VUQzFfJyArIG5hbWUudG9VcHBlckNhc2UoKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lZmZlY3Quc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0UHJvcGVydHk6IGZ1bmN0aW9uIGdldFByb3BlcnR5KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BzW25hbWVdO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW58TnVtYmVyfSB2YWxcbiAgICAgKi9cbiAgICBkZWZpbmU6IGZ1bmN0aW9uIGRlZmluZShuYW1lLCB2YWwsIGZvcmNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9kZWZpbmVzW25hbWVdID09PSB2YWwgJiYgIWZvcmNlKSByZXR1cm47XG4gICAgICAgIHRoaXMuX2RlZmluZXNbbmFtZV0gPSB2YWw7XG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcy5fZWZmZWN0KSB7XG4gICAgICAgICAgICB0aGlzLl9lZmZlY3QuZGVmaW5lKG5hbWUsIHZhbCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGdldERlZmluZTogZnVuY3Rpb24gZ2V0RGVmaW5lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmluZXNbbmFtZV07XG4gICAgfSxcbiAgICBzZXREaXJ0eTogZnVuY3Rpb24gc2V0RGlydHkoZGlydHkpIHtcbiAgICAgICAgdGhpcy5fZGlydHkgPSBkaXJ0eTtcbiAgICB9LFxuICAgIHVwZGF0ZUhhc2g6IGZ1bmN0aW9uIHVwZGF0ZUhhc2goaGFzaCkge1xuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9oYXNoID0gaGFzaDtcbiAgICB9LFxuICAgIGdldEhhc2g6IGZ1bmN0aW9uIGdldEhhc2goKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGlydHkpIHJldHVybiB0aGlzLl9oYXNoO1xuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuICAgICAgICB2YXIgZWZmZWN0ID0gdGhpcy5fZWZmZWN0O1xuXG4gICAgICAgIHZhciBoYXNoU3RyID0gJyc7XG4gICAgICAgIGlmIChlZmZlY3QpIHtcbiAgICAgICAgICAgIGhhc2hTdHIgKz0gX3V0aWxzMi5kZWZhdWx0LnNlcmlhbGl6ZURlZmluZXMoZWZmZWN0Ll9kZWZpbmVzKTtcbiAgICAgICAgICAgIGhhc2hTdHIgKz0gX3V0aWxzMi5kZWZhdWx0LnNlcmlhbGl6ZVRlY2huaXF1ZXMoZWZmZWN0Ll90ZWNobmlxdWVzKTtcbiAgICAgICAgICAgIGhhc2hTdHIgKz0gX3V0aWxzMi5kZWZhdWx0LnNlcmlhbGl6ZVVuaWZvcm1zKGVmZmVjdC5fcHJvcGVydGllcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5faGFzaCA9ICgwLCBfbXVybXVyaGFzaDJfZ2MyLmRlZmF1bHQpKGhhc2hTdHIsIDY2Nik7XG4gICAgfSxcbiAgICBvbkxvYWQ6IGZ1bmN0aW9uIG9uTG9hZCgpIHtcbiAgICAgICAgdGhpcy5lZmZlY3RBc3NldCA9IHRoaXMuX2VmZmVjdEFzc2V0O1xuICAgICAgICBpZiAoIXRoaXMuX2VmZmVjdCkgcmV0dXJuO1xuXG4gICAgICAgIGZvciAodmFyIGRlZiBpbiB0aGlzLl9kZWZpbmVzKSB7XG4gICAgICAgICAgICB0aGlzLmRlZmluZShkZWYsIHRoaXMuX2RlZmluZXNbZGVmXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzLl9wcm9wcykge1xuICAgICAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eShwcm9wLCB0aGlzLl9wcm9wc1twcm9wXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjYy5NYXRlcmlhbCA9IE1hdGVyaWFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtORFRXRjBaWEpwWVd3dWFuTWlYU3dpYm1GdFpYTWlPbHNpUVhOelpYUWlMQ0p5WlhGMWFYSmxJaXdpVkdWNGRIVnlaU0lzSWxCcGVHVnNSbTl5YldGMElpd2lSV1ptWldOMFFYTnpaWFFpTENKTllYUmxjbWxoYkNJc0ltTmpJaXdpUTJ4aGMzTWlMQ0p1WVcxbElpd2laWGgwWlc1a2N5SXNJbU4wYjNJaUxDSmZaR2x5ZEhraUxDSmZaV1ptWldOMElpd2lYMjkzYm1WeUlpd2ljSEp2Y0dWeWRHbGxjeUlzSWw5bFptWmxZM1JCYzNObGRDSXNJblI1Y0dVaUxDSmtaV1poZFd4MElpd2lYMlJsWm1sdVpYTWlMQ0pQWW1wbFkzUWlMQ0pmY0hKdmNITWlMQ0psWm1abFkzUk9ZVzFsSWl3aVEwTmZSVVJKVkU5U0lpd2laMlYwSWl3aWMyVjBJaXdpZG1Gc0lpd2laV1ptWldOMFFYTnpaWFFpTENKQmMzTmxkRXhwWW5KaGNua2lMQ0puWlhSQ2RXbHNkR2x1SWl3aVJXUnBkRzl5SWl3aWQyRnliaUlzSW5WdVpHVm1hVzVsWkNJc0ltRnpjMlYwSWl3aVoyRnRaU0lzSW5KbGJtUmxjbFI1Y0dVaUxDSlNSVTVFUlZKZlZGbFFSVjlEUVU1V1FWTWlMQ0psY25KdmNpSXNJa1ZtWm1WamRDSXNJbkJoY25ObFJXWm1aV04wSWl3aVpXWm1aV04wSWl3aWIzZHVaWElpTENKemRHRjBhV056SWl3aVoyVjBRblZwYkhScGJrMWhkR1Z5YVdGc0lpd2laMlYwU1c1emRHRnVkR2xoZEdWa1FuVnBiSFJwYmsxaGRHVnlhV0ZzSWl3aWNtVnVaR1Z5UTI5dGNHOXVaVzUwSWl3aVluVnBiSFJwYmsxaGRHVnlhV0ZzSWl3aVoyVjBTVzV6ZEdGdWRHbGhkR1ZrVFdGMFpYSnBZV3dpTENKdFlYUWlMQ0pwYm5OMFlXNWpaU0lzSW1OdmNIa2lMQ0pmYm1GdFpTSXNJbDkxZFdsa0lpd2laR1ZtYVc1bElpd2ljMlYwVUhKdmNHVnlkSGtpTENKbWIzSmpaU0lzSW1kbGRFbHRjR3dpTENKblpYUlFhWGhsYkVadmNtMWhkQ0lzSWxKSFFrRmZSVlJETVNJc0luUnZWWEJ3WlhKRFlYTmxJaXdpWjJWMFVISnZjR1Z5ZEhraUxDSm5aWFJFWldacGJtVWlMQ0p6WlhSRWFYSjBlU0lzSW1ScGNuUjVJaXdpZFhCa1lYUmxTR0Z6YUNJc0ltaGhjMmdpTENKZmFHRnphQ0lzSW1kbGRFaGhjMmdpTENKb1lYTm9VM1J5SWl3aWRYUnBiSE1pTENKelpYSnBZV3hwZW1WRVpXWnBibVZ6SWl3aWMyVnlhV0ZzYVhwbFZHVmphRzVwY1hWbGN5SXNJbDkwWldOb2JtbHhkV1Z6SWl3aWMyVnlhV0ZzYVhwbFZXNXBabTl5YlhNaUxDSmZjSEp2Y0dWeWRHbGxjeUlzSW05dVRHOWhaQ0lzSW1SbFppSXNJbkJ5YjNBaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFTdENRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3T3p0QlFXcERRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJkMEpCT3p0QlFVVkJMRWxCUVUxQkxGRkJRVkZETEZGQlFWRXNXVUZCVWl4RFFVRmtPMEZCUTBFc1NVRkJUVU1zVlVGQlZVUXNVVUZCVVN4blFrRkJVaXhEUVVGb1FqdEJRVU5CTEVsQlFVMUZMR05CUVdORUxGRkJRVkZETEZkQlFUVkNPMEZCUTBFc1NVRkJUVU1zWTBGQlkwZ3NVVUZCVVN4clFrRkJVaXhEUVVGd1FqczdRVUZOUVRzN096czdPMEZCVFVFc1NVRkJTVWtzVjBGQlYwTXNSMEZCUjBNc1MwRkJTQ3hEUVVGVE8wRkJRM0JDUXl4VlFVRk5MR0ZCUkdNN1FVRkZjRUpETEdGQlFWTlVMRXRCUmxjN08wRkJTWEJDVlN4UlFVcHZRaXhyUWtGSldqdEJRVU5LTEdGQlFVdERMRTFCUVV3c1IwRkJZeXhKUVVGa08wRkJRMEVzWVVGQlMwTXNUMEZCVEN4SFFVRmxMRWxCUVdZN1FVRkRRU3hoUVVGTFF5eE5RVUZNTEVkQlFXTXNTVUZCWkR0QlFVTklMRXRCVW0xQ096czdRVUZWY0VKRExHZENRVUZaTzBGQlExSkRMSE5DUVVGak8wRkJRMVpETEd0Q1FVRk5XaXhYUVVSSk8wRkJSVlpoTEhGQ1FVRlRPMEZCUmtNc1UwRkVUanRCUVV0U1F5eHJRa0ZCVlR0QlFVTk9SQ3h4UWtGQlV5eEZRVVJJTzBGQlJVNUVMR3RDUVVGTlJ6dEJRVVpCTEZOQlRFWTdRVUZUVWtNc1owSkJRVkU3UVVGRFNrZ3NjVUpCUVZNc1JVRkVURHRCUVVWS1JDeHJRa0ZCVFVjN1FVRkdSaXhUUVZSQk96dEJRV05TUlN4dlFrRkJXVU1zV1VGQldUdEJRVU53UWtNc1pVRkViMElzYVVKQlEySTdRVUZEU0N4MVFrRkJUeXhMUVVGTFVpeFpRVUZNTEVOQlFXdENVQ3hKUVVGNlFqdEJRVU5JTEdGQlNHMUNPMEZCU1hCQ1owSXNaVUZLYjBJc1pVRkpaa01zUjBGS1pTeEZRVWxXTzBGQlEwNHNiMEpCUVVsRExHTkJRV053UWl4SFFVRkhjVUlzV1VGQlNDeERRVUZuUWtNc1ZVRkJhRUlzUTBGQk1rSXNVVUZCTTBJc1JVRkJjVU5JTEVkQlFYSkRMRU5CUVd4Q08wRkJRMEVzYjBKQlFVa3NRMEZCUTBNc1YwRkJUQ3hGUVVGclFqdEJRVU5rUnl3eVFrRkJUME1zU1VGQlVDeDNRa0ZCWjBOTUxFZEJRV2hETzBGQlEwRTdRVUZEU0R0QlFVTkVMSEZDUVVGTFF5eFhRVUZNTEVkQlFXMUNRU3hYUVVGdVFqdEJRVU5JTzBGQldHMUNMRk5CUVZvc1IwRlpVa3NzVTBFeFFrazdPMEZCTkVKU1RDeHhRa0ZCWVR0QlFVTlVTQ3hsUVVSVExHbENRVU5HTzBGQlEwZ3NkVUpCUVU4c1MwRkJTMUlzV1VGQldqdEJRVU5JTEdGQlNGRTdRVUZKVkZNc1pVRktVeXhsUVVsS1VTeExRVXBKTEVWQlNVYzdRVUZEVWl4dlFrRkJTVEZDTEVkQlFVY3lRaXhKUVVGSUxFTkJRVkZETEZWQlFWSXNTMEZCZFVJMVFpeEhRVUZITWtJc1NVRkJTQ3hEUVVGUlJTeHJRa0ZCYmtNc1JVRkJkVVE3UVVGRGJrUTdRVUZEU0RzN1FVRkZSQ3h4UWtGQlMzQkNMRmxCUVV3c1IwRkJiMEpwUWl4TFFVRndRanRCUVVOQkxHOUNRVUZKTEVOQlFVTkJMRXRCUVV3c1JVRkJXVHRCUVVOU01VSXNkVUpCUVVjNFFpeExRVUZJTEVOQlFWTXNiME5CUVZRN1FVRkRRVHRCUVVOSU8wRkJRMFFzY1VKQlFVdDRRaXhQUVVGTUxFZEJRV1Y1UWl4cFFrRkJUME1zVjBGQlVDeERRVUZ0UWs0c1MwRkJia0lzUTBGQlpqdEJRVU5JTzBGQlpsRXNVMEUxUWt3N08wRkJPRU5TVHl4blFrRkJVVHRCUVVOS2FFSXNaVUZFU1N4cFFrRkRSenRCUVVOSUxIVkNRVUZQTEV0QlFVdFlMRTlCUVZvN1FVRkRTRHRCUVVoSExGTkJPVU5CT3p0QlFXOUVValJDTEdWQlFVODdRVUZEU0dwQ0xHVkJSRWNzYVVKQlEwazdRVUZEU0N4MVFrRkJUeXhMUVVGTFZpeE5RVUZhTzBGQlEwZzdRVUZJUlR0QlFYQkVReXhMUVZaUk96dEJRWEZGY0VJMFFpeGhRVUZUTzBGQlEweERMREJDUVVSTExEaENRVU5sYkVNc1NVRkVaaXhGUVVOeFFqdEJRVU4wUWl4dFFrRkJUMFlzUjBGQlIzRkNMRmxCUVVnc1EwRkJaMEpETEZWQlFXaENMRU5CUVRKQ0xGVkJRVE5DTEVWQlFYVkRMR0ZCUVdGd1FpeEpRVUZ3UkN4RFFVRlFPMEZCUTBnc1UwRklTVHRCUVVsTWJVTXNjME5CU2tzc01FTkJTVEpDYmtNc1NVRktNMElzUlVGSmFVTnZReXhsUVVwcVF5eEZRVWxyUkR0QlFVTnVSQ3huUWtGQlNVTXNhMEpCUVd0Q0xFdEJRVXRJTEd0Q1FVRk1MRU5CUVhkQ2JFTXNTVUZCZUVJc1EwRkJkRUk3UVVGRFFTeHRRa0ZCVDBnc1UwRkJVM2xETEhWQ1FVRlVMRU5CUVdsRFJDeGxRVUZxUXl4RlFVRnJSRVFzWlVGQmJFUXNRMEZCVUR0QlFVTklMRk5CVUVrN1FVRlJURVVzSzBKQlVrc3NiVU5CVVc5Q1F5eEhRVkp3UWl4RlFWRjVRa2dzWlVGU2VrSXNSVUZSTUVNN1FVRkRNME1zWjBKQlFVbEhMRWxCUVVsc1F5eE5RVUZLTEV0QlFXVXJRaXhsUVVGdVFpeEZRVUZ2UXp0QlFVTm9ReXgxUWtGQlQwY3NSMEZCVUR0QlFVTklMR0ZCUmtRc1RVRkhTenRCUVVORUxHOUNRVUZKUXl4WFFVRlhMRWxCUVVrelF5eFJRVUZLTEVWQlFXWTdRVUZEUVRKRExIbENRVUZUUXl4SlFVRlVMRU5CUVdOR0xFZEJRV1E3UVVGRFFVTXNlVUpCUVZORkxFdEJRVlFzUjBGQmFVSklMRWxCUVVsSExFdEJRVW9zUjBGQldTeGhRVUUzUWp0QlFVTkJSaXg1UWtGQlUwY3NTMEZCVkN4SFFVRnBRa29zU1VGQlNVa3NTMEZCY2tJN1FVRkRRVWdzZVVKQlFWTnVReXhOUVVGVUxFZEJRV3RDSzBJc1pVRkJiRUk3UVVGRFFTeDFRa0ZCVDBrc1VVRkJVRHRCUVVOSU8wRkJRMG83UVVGd1Fra3NTMEZ5UlZjN08wRkJORVp3UWpzN096dEJRVWxCUXl4UlFXaEhiMElzWjBKQlowZGtSaXhIUVdoSFl5eEZRV2RIVkR0QlFVTlFMR0ZCUVV0eVFpeFhRVUZNTEVkQlFXMUNjVUlzU1VGQlNYSkNMRmRCUVhaQ096dEJRVVZCTEdGQlFVc3NTVUZCU1d4Q0xFbEJRVlFzU1VGQmFVSjFReXhKUVVGSk4wSXNVVUZCY2tJc1JVRkJLMEk3UVVGRE0wSXNhVUpCUVV0clF5eE5RVUZNTEVOQlFWazFReXhKUVVGYUxFVkJRV3RDZFVNc1NVRkJTVGRDTEZGQlFVb3NRMEZCWVZZc1NVRkJZaXhEUVVGc1FqdEJRVU5JT3p0QlFVVkVMR0ZCUVVzc1NVRkJTVUVzUzBGQlZDeEpRVUZwUW5WRExFbEJRVWt6UWl4TlFVRnlRaXhGUVVFMlFqdEJRVU42UWl4cFFrRkJTMmxETEZkQlFVd3NRMEZCYVVJM1F5eExRVUZxUWl4RlFVRjFRblZETEVsQlFVa3pRaXhOUVVGS0xFTkJRVmRhTEV0QlFWZ3NRMEZCZGtJN1FVRkRTRHRCUVVOS0xFdEJNVWR0UWpzN08wRkJORWR3UWpzN096czdRVUZMUVRaRExHVkJha2h2UWl4MVFrRnBTRkEzUXl4SlFXcElUeXhGUVdsSVJHbENMRWRCYWtoRExFVkJhVWhKTmtJc1MwRnFTRW9zUlVGcFNGYzdRVUZETTBJc1dVRkJTU3hMUVVGTGJFTXNUVUZCVEN4RFFVRlpXaXhKUVVGYUxFMUJRWE5DYVVJc1IwRkJkRUlzU1VGQk5rSXNRMEZCUXpaQ0xFdEJRV3hETEVWQlFYbERPMEZCUTNwRExHRkJRVXRzUXl4TlFVRk1MRU5CUVZsYUxFbEJRVm9zU1VGQmIwSnBRaXhIUVVGd1FqdEJRVU5CTEdGQlFVdGtMRTFCUVV3c1IwRkJZeXhKUVVGa096dEJRVVZCTEZsQlFVa3NTMEZCUzBNc1QwRkJWQ3hGUVVGclFqdEJRVU5rTEdkQ1FVRkpZU3hsUVVGbGRrSXNUMEZCYmtJc1JVRkJORUk3UVVGRGVFSXNjVUpCUVV0VkxFOUJRVXdzUTBGQllYbERMRmRCUVdJc1EwRkJlVUkzUXl4SlFVRjZRaXhGUVVFclFtbENMRWxCUVVrNFFpeFBRVUZLTEVWQlFTOUNPMEZCUTBFc2IwSkJRVWs1UWl4SlFVRkpLMElzWTBGQlNpeFBRVUY1UW5KRUxGbEJRVmx6UkN4VFFVRjZReXhGUVVGdlJEdEJRVU5vUkN4NVFrRkJTMHdzVFVGQlRDeERRVUZaTEdWQlFXVTFReXhMUVVGTGEwUXNWMEZCVEN4RlFVRXpRaXhGUVVFclF5eEpRVUV2UXp0QlFVTklPMEZCUTBvc1lVRk1SQ3hOUVUxTE8wRkJRMFFzY1VKQlFVczVReXhQUVVGTUxFTkJRV0Y1UXl4WFFVRmlMRU5CUVhsQ04wTXNTVUZCZWtJc1JVRkJLMEpwUWl4SFFVRXZRanRCUVVOSU8wRkJRMG83UVVGRFNpeExRV3BKYlVJN1FVRnRTWEJDYTBNc1pVRnVTVzlDTEhWQ1FXMUpVRzVFTEVsQmJrbFBMRVZCYlVsRU8wRkJRMllzWlVGQlR5eExRVUZMV1N4TlFVRk1MRU5CUVZsYUxFbEJRVm9zUTBGQlVEdEJRVU5JTEV0QmNrbHRRanM3TzBGQmRVbHdRanM3T3pzN1FVRkxRVFJETEZWQk5VbHZRaXhyUWtFMFNWbzFReXhKUVRWSldTeEZRVFJKVG1sQ0xFZEJOVWxOTEVWQk5FbEVOa0lzUzBFMVNVTXNSVUUwU1UwN1FVRkRkRUlzV1VGQlNTeExRVUZMY0VNc1VVRkJUQ3hEUVVGalZpeEpRVUZrTEUxQlFYZENhVUlzUjBGQmVFSXNTVUZCSzBJc1EwRkJRelpDTEV0QlFYQkRMRVZCUVRKRE8wRkJRek5ETEdGQlFVdHdReXhSUVVGTUxFTkJRV05XTEVsQlFXUXNTVUZCYzBKcFFpeEhRVUYwUWp0QlFVTkJMR0ZCUVV0a0xFMUJRVXdzUjBGQll5eEpRVUZrT3p0QlFVVkJMRmxCUVVrc1MwRkJTME1zVDBGQlZDeEZRVUZyUWp0QlFVTmtMR2xDUVVGTFFTeFBRVUZNTEVOQlFXRjNReXhOUVVGaUxFTkJRVzlDTlVNc1NVRkJjRUlzUlVGQk1FSnBRaXhIUVVFeFFqdEJRVU5JTzBGQlEwb3NTMEZ3U20xQ08wRkJjMHB3UW0xRExHRkJkRXB2UWl4eFFrRnpTbFJ3UkN4SlFYUktVeXhGUVhOS1NEdEJRVU5pTEdWQlFVOHNTMEZCUzFVc1VVRkJUQ3hEUVVGalZpeEpRVUZrTEVOQlFWQTdRVUZEU0N4TFFYaEtiVUk3UVVFd1NuQkNjVVFzV1VFeFNtOUNMRzlDUVRCS1ZrTXNTMEV4U2xVc1JVRXdTa2c3UVVGRFlpeGhRVUZMYmtRc1RVRkJUQ3hIUVVGamJVUXNTMEZCWkR0QlFVTklMRXRCTlVwdFFqdEJRVGhLY0VKRExHTkJPVXB2UWl4elFrRTRTbEpETEVsQk9VcFJMRVZCT0VwR08wRkJRMlFzWVVGQlMzSkVMRTFCUVV3c1IwRkJZeXhMUVVGa08wRkJRMEVzWVVGQlMzTkVMRXRCUVV3c1IwRkJZVVFzU1VGQllqdEJRVU5JTEV0QmFrdHRRanRCUVcxTGNFSkZMRmRCYmt0dlFpeHhRa0Z0UzFRN1FVRkRVQ3haUVVGSkxFTkJRVU1zUzBGQlMzWkVMRTFCUVZZc1JVRkJhMElzVDBGQlR5eExRVUZMYzBRc1MwRkJXanRCUVVOc1FpeGhRVUZMZEVRc1RVRkJUQ3hIUVVGakxFdEJRV1E3UVVGRFFTeFpRVUZKTkVJc1UwRkJVeXhMUVVGTE0wSXNUMEZCYkVJN08wRkJSVUVzV1VGQlNYVkVMRlZCUVZVc1JVRkJaRHRCUVVOQkxGbEJRVWsxUWl4TlFVRktMRVZCUVZrN1FVRkRValJDTEhWQ1FVRlhReXhuUWtGQlRVTXNaMEpCUVU0c1EwRkJkVUk1UWl4UFFVRlBja0lzVVVGQk9VSXNRMEZCV0R0QlFVTkJhVVFzZFVKQlFWZERMR2RDUVVGTlJTeHRRa0ZCVGl4RFFVRXdRaTlDTEU5QlFVOW5ReXhYUVVGcVF5eERRVUZZTzBGQlEwRktMSFZDUVVGWFF5eG5Ra0ZCVFVrc2FVSkJRVTRzUTBGQmQwSnFReXhQUVVGUGEwTXNWMEZCTDBJc1EwRkJXRHRCUVVOSU96dEJRVVZFTEdWQlFVOHNTMEZCUzFJc1MwRkJUQ3hIUVVGaExEaENRVUZaUlN4UFFVRmFMRVZCUVhGQ0xFZEJRWEpDTEVOQlFYQkNPMEZCUTBnc1MwRm9URzFDTzBGQmEweHdRazhzVlVGc1RHOUNMRzlDUVd0TVZqdEJRVU5PTEdGQlFVdG9SQ3hYUVVGTUxFZEJRVzFDTEV0QlFVdFlMRmxCUVhoQ08wRkJRMEVzV1VGQlNTeERRVUZETEV0QlFVdElMRTlCUVZZc1JVRkJiVUk3TzBGQlJXNUNMR0ZCUVVzc1NVRkJTU3RFTEVkQlFWUXNTVUZCWjBJc1MwRkJTM3BFTEZGQlFYSkNMRVZCUVN0Q08wRkJRek5DTEdsQ1FVRkxhME1zVFVGQlRDeERRVUZaZFVJc1IwRkJXaXhGUVVGcFFpeExRVUZMZWtRc1VVRkJUQ3hEUVVGamVVUXNSMEZCWkN4RFFVRnFRaXhGUVVGeFF5eEpRVUZ5UXp0QlFVTklPMEZCUTBRc1lVRkJTeXhKUVVGSlF5eEpRVUZVTEVsQlFXbENMRXRCUVV0NFJDeE5RVUYwUWl4RlFVRTRRanRCUVVNeFFpeHBRa0ZCUzJsRExGZEJRVXdzUTBGQmFVSjFRaXhKUVVGcVFpeEZRVUYxUWl4TFFVRkxlRVFzVFVGQlRDeERRVUZaZDBRc1NVRkJXaXhEUVVGMlFpeEZRVUV3UXl4SlFVRXhRenRCUVVOSU8wRkJRMG83UVVFMVRHMUNMRU5CUVZRc1EwRkJaanM3UVVFclRFRkRMRTlCUVU5RExFOUJRVkFzUjBGQmFVSjRSU3hIUVVGSFJDeFJRVUZJTEVkQlFXTkJMRkZCUVM5Q0lpd2labWxzWlNJNklrTkRUV0YwWlhKcFlXd3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TnkweU1ERTRJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGx4dVhHNGdhSFIwY0RvdkwzZDNkeTVqYjJOdmN5NWpiMjFjYmx4dUlGQmxjbTFwYzNOcGIyNGdhWE1nYUdWeVpXSjVJR2R5WVc1MFpXUXNJR1p5WldVZ2IyWWdZMmhoY21kbExDQjBieUJoYm5rZ2NHVnljMjl1SUc5aWRHRnBibWx1WnlCaElHTnZjSGxjYmlCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1Z1WjJsdVpTQnpiM1Z5WTJVZ1kyOWtaU0FvZEdobElGd2lVMjltZEhkaGNtVmNJaWtzSUdFZ2JHbHRhWFJsWkN4Y2JpQWdkMjl5YkdSM2FXUmxMQ0J5YjNsaGJIUjVMV1p5WldVc0lHNXZiaTFoYzNOcFoyNWhZbXhsTENCeVpYWnZZMkZpYkdVZ1lXNWtJRzV2YmkxbGVHTnNkWE5wZG1VZ2JHbGpaVzV6WlZ4dUlIUnZJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52YkdWc2VTQjBieUJrWlhabGJHOXdJR2RoYldWeklHOXVJSGx2ZFhJZ2RHRnlaMlYwSUhCc1lYUm1iM0p0Y3k0Z1dXOTFJSE5vWVd4c1hHNGdJRzV2ZENCMWMyVWdRMjlqYjNNZ1EzSmxZWFJ2Y2lCemIyWjBkMkZ5WlNCbWIzSWdaR1YyWld4dmNHbHVaeUJ2ZEdobGNpQnpiMlowZDJGeVpTQnZjaUIwYjI5c2N5QjBhR0YwSjNOY2JpQWdkWE5sWkNCbWIzSWdaR1YyWld4dmNHbHVaeUJuWVcxbGN5NGdXVzkxSUdGeVpTQnViM1FnWjNKaGJuUmxaQ0IwYnlCd2RXSnNhWE5vTENCa2FYTjBjbWxpZFhSbExGeHVJQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JDQmpiM0JwWlhNZ2IyWWdRMjlqYjNNZ1EzSmxZWFJ2Y2k1Y2JseHVJRlJvWlNCemIyWjBkMkZ5WlNCdmNpQjBiMjlzY3lCcGJpQjBhR2x6SUV4cFkyVnVjMlVnUVdkeVpXVnRaVzUwSUdGeVpTQnNhV05sYm5ObFpDd2dibTkwSUhOdmJHUXVYRzRnV0dsaGJXVnVJRmxoYW1rZ1UyOW1kSGRoY21VZ1EyOHVMQ0JNZEdRdUlISmxjMlZ5ZG1WeklHRnNiQ0J5YVdkb2RITWdibTkwSUdWNGNISmxjM05zZVNCbmNtRnVkR1ZrSUhSdklIbHZkUzVjYmx4dUlGUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkZrZ1QwWWdRVTVaSUV0SlRrUXNJRVZZVUZKRlUxTWdUMUpjYmlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R0lFMUZVa05JUVU1VVFVSkpURWxVV1N4Y2JpQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUaUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVZjYmlCQlZWUklUMUpUSUU5U0lFTlBVRmxTU1VkSVZDQklUMHhFUlZKVElFSkZJRXhKUVVKTVJTQkdUMUlnUVU1WklFTk1RVWxOTENCRVFVMUJSMFZUSUU5U0lFOVVTRVZTWEc0Z1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3hjYmlCUFZWUWdUMFlnVDFJZ1NVNGdRMDlPVGtWRFZFbFBUaUJYU1ZSSUlGUklSU0JUVDBaVVYwRlNSU0JQVWlCVVNFVWdWVk5GSUU5U0lFOVVTRVZTSUVSRlFVeEpUa2RUSUVsT1hHNGdWRWhGSUZOUFJsUlhRVkpGTGx4dUlDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc0dkx5QkFkSE10WTJobFkydGNibHh1WTI5dWMzUWdRWE56WlhRZ1BTQnlaWEYxYVhKbEtDY3VMaTlEUTBGemMyVjBKeWs3WEc1amIyNXpkQ0JVWlhoMGRYSmxJRDBnY21WeGRXbHlaU2duTGk0dlEwTlVaWGgwZFhKbE1rUW5LVHRjYm1OdmJuTjBJRkJwZUdWc1JtOXliV0YwSUQwZ1ZHVjRkSFZ5WlM1UWFYaGxiRVp2Y20xaGREdGNibU52Ym5OMElFVm1abVZqZEVGemMyVjBJRDBnY21WeGRXbHlaU2duTGk0dlEwTkZabVpsWTNSQmMzTmxkQ2NwTzF4dVhHNXBiWEJ2Y25RZ1JXWm1aV04wSUdaeWIyMGdKeTR1THk0dUx5NHVMM0psYm1SbGNtVnlMMk52Y21VdlpXWm1aV04wSnp0Y2JtbHRjRzl5ZENCdGRYSnRkWEpvWVhOb01pQm1jbTl0SUNjdUwyMTFjbTExY21oaGMyZ3lYMmRqSnp0Y2JtbHRjRzl5ZENCMWRHbHNjeUJtY205dElDY3VMM1YwYVd4ekp6dGNibHh1THlvcVhHNGdLaUFoSTJWdUlFMWhkR1Z5YVdGc0lFRnpjMlYwTGx4dUlDb2dJU042YUNEbW5aRG90S2pvdFlUbXVwRG5zYnZqZ0lKY2JpQXFJRUJqYkdGemN5Qk5ZWFJsY21saGJGeHVJQ29nUUdWNGRHVnVaSE1nUVhOelpYUmNiaUFxTDF4dWJHVjBJRTFoZEdWeWFXRnNJRDBnWTJNdVEyeGhjM01vZTF4dUlDQWdJRzVoYldVNklDZGpZeTVOWVhSbGNtbGhiQ2NzWEc0Z0lDQWdaWGgwWlc1a2N6b2dRWE56WlhRc1hHNWNiaUFnSUNCamRHOXlJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkdseWRIa2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bFptWmxZM1FnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXZkMjVsY2lBOUlHNTFiR3c3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEJ5YjNCbGNuUnBaWE02SUh0Y2JpQWdJQ0FnSUNBZ1gyVm1abVZqZEVGemMyVjBPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCRlptWmxZM1JCYzNObGRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2SUc1MWJHd3NYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUY5a1pXWnBibVZ6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUI3ZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklFOWlhbVZqZEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQmZjSEp2Y0hNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2SUh0OUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dUMkpxWldOMFhHNGdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnWldabVpXTjBUbUZ0WlRvZ1EwTmZSVVJKVkU5U0lEOGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1oyVjBJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZaV1ptWldOMFFYTnpaWFF1Ym1GdFpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhRZ0tIWmhiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmxabVpsWTNSQmMzTmxkQ0E5SUdOakxrRnpjMlYwVEdsaWNtRnllUzVuWlhSQ2RXbHNkR2x1S0NkbFptWmxZM1FuTENCMllXd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpXWm1aV04wUVhOelpYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JXUnBkRzl5TG5kaGNtNG9ZRzV2SUdWbVptVmpkQ0J1WVcxbFpDQW5KSHQyWVd4OUp5Qm1iM1Z1WkdBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXWm1aV04wUVhOelpYUWdQU0JsWm1abFkzUkJjM05sZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNBNklIVnVaR1ZtYVc1bFpDeGNibHh1SUNBZ0lDQWdJQ0JsWm1abFkzUkJjM05sZERvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWMElDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlpXWm1aV04wUVhOelpYUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMElDaGhjM05sZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqWXk1bllXMWxMbkpsYm1SbGNsUjVjR1VnUFQwOUlHTmpMbWRoYldVdVVrVk9SRVZTWDFSWlVFVmZRMEZPVmtGVEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlsWm1abFkzUkJjM05sZENBOUlHRnpjMlYwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hZWE56WlhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJNdVpYSnliM0lvSjBOaGJpQnViM1FnYzJWMElHRnVJR1Z0Y0hSNUlHVm1abVZqZENCaGMzTmxkQzRuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bFptWmxZM1FnUFNCRlptWmxZM1F1Y0dGeWMyVkZabVpsWTNRb1lYTnpaWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lHVm1abVZqZERvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWMElDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlpXWm1aV04wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lHOTNibVZ5T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRZ0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dmQyNWxjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnpkR0YwYVdOek9pQjdYRzRnSUNBZ0lDQWdJR2RsZEVKMWFXeDBhVzVOWVhSbGNtbGhiQ0FvYm1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOakxrRnpjMlYwVEdsaWNtRnllUzVuWlhSQ2RXbHNkR2x1S0NkdFlYUmxjbWxoYkNjc0lDZGlkV2xzZEdsdUxTY2dLeUJ1WVcxbEtUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWjJWMFNXNXpkR0Z1ZEdsaGRHVmtRblZwYkhScGJrMWhkR1Z5YVdGc0lDaHVZVzFsTENCeVpXNWtaWEpEYjIxd2IyNWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaWRXbHNkR2x1VFdGMFpYSnBZV3dnUFNCMGFHbHpMbWRsZEVKMWFXeDBhVzVOWVhSbGNtbGhiQ2h1WVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJOWVhSbGNtbGhiQzVuWlhSSmJuTjBZVzUwYVdGMFpXUk5ZWFJsY21saGJDaGlkV2xzZEdsdVRXRjBaWEpwWVd3c0lISmxibVJsY2tOdmJYQnZibVZ1ZENrN1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR2RsZEVsdWMzUmhiblJwWVhSbFpFMWhkR1Z5YVdGc0lDaHRZWFFzSUhKbGJtUmxja052YlhCdmJtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0cxaGRDNWZiM2R1WlhJZ1BUMDlJSEpsYm1SbGNrTnZiWEJ2Ym1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnRZWFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FXNXpkR0Z1WTJVZ1BTQnVaWGNnVFdGMFpYSnBZV3dvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuTjBZVzVqWlM1amIzQjVLRzFoZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXpkR0Z1WTJVdVgyNWhiV1VnUFNCdFlYUXVYMjVoYldVZ0t5QW5JQ2hKYm5OMFlXNWpaU2tuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWMzUmhibU5sTGw5MWRXbGtJRDBnYldGMExsOTFkV2xrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWMzUmhibU5sTGw5dmQyNWxjaUE5SUhKbGJtUmxja052YlhCdmJtVnVkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVzV6ZEdGdVkyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwMWhkR1Z5YVdGc2ZTQnRZWFJjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiM0I1SUNodFlYUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxabVpsWTNSQmMzTmxkQ0E5SUcxaGRDNWxabVpsWTNSQmMzTmxkRHRjYmx4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCdVlXMWxJR2x1SUcxaGRDNWZaR1ZtYVc1bGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrWldacGJtVW9ibUZ0WlN3Z2JXRjBMbDlrWldacGJtVnpXMjVoYldWZEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUc1aGJXVWdhVzRnYldGMExsOXdjbTl3Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJRY205d1pYSjBlU2h1WVcxbExDQnRZWFF1WDNCeWIzQnpXMjVoYldWZEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVZVzFsWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSFpoYkZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEZCeWIzQmxjblI1SUNodVlXMWxMQ0IyWVd3c0lHWnZjbU5sS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXdjbTl3YzF0dVlXMWxYU0E5UFQwZ2RtRnNJQ1ltSUNGbWIzSmpaU2tnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdjbTl3YzF0dVlXMWxYU0E5SUhaaGJEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpHbHlkSGtnUFNCMGNuVmxPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5bFptWmxZM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMllXd2dhVzV6ZEdGdVkyVnZaaUJVWlhoMGRYSmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZaV1ptWldOMExuTmxkRkJ5YjNCbGNuUjVLRzVoYldVc0lIWmhiQzVuWlhSSmJYQnNLQ2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3d1WjJWMFVHbDRaV3hHYjNKdFlYUW9LU0E5UFQwZ1VHbDRaV3hHYjNKdFlYUXVVa2RDUVY5RlZFTXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WkdWbWFXNWxLQ2RmVlZORlgwVlVRekZmSnlBcklHNWhiV1V1ZEc5VmNIQmxja05oYzJVb0tTd2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWldabVpXTjBMbk5sZEZCeWIzQmxjblI1S0c1aGJXVXNJSFpoYkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWjJWMFVISnZjR1Z5ZEhrZ0tHNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0J5YjNCelcyNWhiV1ZkTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J1WVcxbFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0Q2IyOXNaV0Z1ZkU1MWJXSmxjbjBnZG1Gc1hHNGdJQ0FnSUNvdlhHNGdJQ0FnWkdWbWFXNWxJQ2h1WVcxbExDQjJZV3dzSUdadmNtTmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5a1pXWnBibVZ6VzI1aGJXVmRJRDA5UFNCMllXd2dKaVlnSVdadmNtTmxLU0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUmxabWx1WlhOYmJtRnRaVjBnUFNCMllXdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUnBjblI1SUQwZ2RISjFaVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZlpXWm1aV04wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWxabVpsWTNRdVpHVm1hVzVsS0c1aGJXVXNJSFpoYkNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ1oyVjBSR1ZtYVc1bElDaHVZVzFsS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlrWldacGJtVnpXMjVoYldWZE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCelpYUkVhWEowZVNBb1pHbHlkSGtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkdseWRIa2dQU0JrYVhKMGVUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2RYQmtZWFJsU0dGemFDQW9hR0Z6YUNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a2FYSjBlU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOW9ZWE5vSUQwZ2FHRnphRHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdaMlYwU0dGemFDQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZlpHbHlkSGtwSUhKbGRIVnliaUIwYUdsekxsOW9ZWE5vTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrYVhKMGVTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQnNaWFFnWldabVpXTjBJRDBnZEdocGN5NWZaV1ptWldOME8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCb1lYTm9VM1J5SUQwZ0p5YzdYRzRnSUNBZ0lDQWdJR2xtSUNobFptWmxZM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2hoYzJoVGRISWdLejBnZFhScGJITXVjMlZ5YVdGc2FYcGxSR1ZtYVc1bGN5aGxabVpsWTNRdVgyUmxabWx1WlhNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGemFGTjBjaUFyUFNCMWRHbHNjeTV6WlhKcFlXeHBlbVZVWldOb2JtbHhkV1Z6S0dWbVptVmpkQzVmZEdWamFHNXBjWFZsY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWVhOb1UzUnlJQ3M5SUhWMGFXeHpMbk5sY21saGJHbDZaVlZ1YVdadmNtMXpLR1ZtWm1WamRDNWZjSEp2Y0dWeWRHbGxjeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYUdGemFDQTlJRzExY20xMWNtaGhjMmd5S0doaGMyaFRkSElzSURZMk5pazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHOXVURzloWkNBb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXWm1aV04wUVhOelpYUWdQU0IwYUdsekxsOWxabVpsWTNSQmMzTmxkRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5bFptWmxZM1FwSUhKbGRIVnlianRjYmx4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCa1pXWWdhVzRnZEdocGN5NWZaR1ZtYVc1bGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrWldacGJtVW9aR1ZtTENCMGFHbHpMbDlrWldacGJtVnpXMlJsWmwwc0lIUnlkV1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElIQnliM0FnYVc0Z2RHaHBjeTVmY0hKdmNITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFVISnZjR1Z5ZEhrb2NISnZjQ3dnZEdocGN5NWZjSEp2Y0hOYmNISnZjRjBzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYm4wcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR05qTGsxaGRHVnlhV0ZzSUQwZ1RXRjBaWEpwWVd3N1hHNGlYWDA9Il19