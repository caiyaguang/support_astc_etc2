(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCAsset.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var RawAsset = require('./CCRawAsset');
        cc.Asset = cc.Class({
            name: 'cc.Asset',
            extends: RawAsset,
            ctor: function ctor() {
                this.loaded = true;
                this.url = '';
            },
            properties: {
                nativeUrl: {
                    get: function get() {
                        if (this._native) {
                            var name = this._native;
                            if (name.charCodeAt(0) === 47) {
                                return name.slice(1);
                            }
                            if (cc.AssetLibrary) {
                                var base = cc.AssetLibrary.getLibUrlNoExt(this._uuid, true);
                                if (name.charCodeAt(0) === 46) {
                                    return base + name;
                                } else {
                                    return base + '/' + name;
                                }
                            } else {
                                cc.errorID(6400);
                            }
                        }
                        return '';
                    },
                    visible: false
                },
                _native: '',
                _nativeAsset: {
                    get: function get() {
                        return this._$nativeAsset;
                    },
                    set: function set(obj) {
                        this._$nativeAsset = obj;
                    }
                }
            },
            statics: {
                deserialize: CC_EDITOR && function (data) {
                    return cc.deserialize(data);
                },
                preventDeferredLoadDependents: false,
                preventPreloadNativeObject: false
            },
            toString: function toString() {
                return this.nativeUrl;
            },
            serialize: CC_EDITOR && function () {
                return Editor.serialize(this);
            },
            createNode: null,
            _setRawAsset: function _setRawAsset(filename, inLibrary) {
                if (inLibrary !== false) {
                    this._native = filename || undefined;
                } else {
                    this._native = '/' + filename;
                }
            }
        });
        module.exports = cc.Asset;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,