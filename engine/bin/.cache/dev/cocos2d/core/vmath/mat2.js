(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/mat2.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var mat2 = function () {
            function mat2() {
                var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                _classCallCheck(this, mat2);
                this.m00 = m00;
                this.m01 = m01;
                this.m02 = m02;
                this.m03 = m03;
            }
            _createClass(mat2, null, [
                {
                    key: 'create',
                    value: function create() {
                        var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                        var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                        return new mat2(m00, m01, m02, m03);
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        return new mat2(a.m00, a.m01, a.m02, a.m03);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.m00 = a.m00;
                        out.m01 = a.m01;
                        out.m02 = a.m02;
                        out.m03 = a.m03;
                        return out;
                    }
                },
                {
                    key: 'identity',
                    value: function identity(out) {
                        out.m00 = 1;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 1;
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, m00, m01, m10, m11) {
                        out.m00 = m00;
                        out.m01 = m01;
                        out.m02 = m10;
                        out.m03 = m11;
                        return out;
                    }
                },
                {
                    key: 'transpose',
                    value: function transpose(out, a) {
                        if (out === a) {
                            var a1 = a.m01;
                            out.m01 = a.m02;
                            out.m02 = a1;
                        } else {
                            out.m00 = a.m00;
                            out.m01 = a.m02;
                            out.m02 = a.m01;
                            out.m03 = a.m03;
                        }
                        return out;
                    }
                },
                {
                    key: 'invert',
                    value: function invert(out, a) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03;
                        var det = a0 * a3 - a2 * a1;
                        if (!det) {
                            return null;
                        }
                        det = 1 / det;
                        out.m00 = a3 * det;
                        out.m01 = -a1 * det;
                        out.m02 = -a2 * det;
                        out.m03 = a0 * det;
                        return out;
                    }
                },
                {
                    key: 'adjoint',
                    value: function adjoint(out, a) {
                        var a0 = a.m00;
                        out.m00 = a.m03;
                        out.m01 = -a.m01;
                        out.m02 = -a.m02;
                        out.m03 = a0;
                        return out;
                    }
                },
                {
                    key: 'determinant',
                    value: function determinant(a) {
                        return a.m00 * a.m03 - a.m02 * a.m01;
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03;
                        var b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03;
                        out.m00 = a0 * b0 + a2 * b1;
                        out.m01 = a1 * b0 + a3 * b1;
                        out.m02 = a0 * b2 + a2 * b3;
                        out.m03 = a1 * b2 + a3 * b3;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return mat2.multiply(out, a, b);
                    }
                },
                {
                    key: 'rotate',
                    value: function rotate(out, a, rad) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, s = Math.sin(rad), c = Math.cos(rad);
                        out.m00 = a0 * c + a2 * s;
                        out.m01 = a1 * c + a3 * s;
                        out.m02 = a0 * -s + a2 * c;
                        out.m03 = a1 * -s + a3 * c;
                        return out;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, v) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, v0 = v.x, v1 = v.y;
                        out.m00 = a0 * v0;
                        out.m01 = a1 * v0;
                        out.m02 = a2 * v1;
                        out.m03 = a3 * v1;
                        return out;
                    }
                },
                {
                    key: 'fromRotation',
                    value: function fromRotation(out, rad) {
                        var s = Math.sin(rad), c = Math.cos(rad);
                        out.m00 = c;
                        out.m01 = s;
                        out.m02 = -s;
                        out.m03 = c;
                        return out;
                    }
                },
                {
                    key: 'fromScaling',
                    value: function fromScaling(out, v) {
                        out.m00 = v.x;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = v.y;
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        return 'mat2(' + a.m00 + ', ' + a.m01 + ', ' + a.m02 + ', ' + a.m03 + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, m) {
                        out[0] = m.m00;
                        out[1] = m.m01;
                        out[2] = m.m02;
                        out[3] = m.m03;
                        return out;
                    }
                },
                {
                    key: 'frob',
                    value: function frob(a) {
                        return Math.sqrt(Math.pow(a.m00, 2) + Math.pow(a.m01, 2) + Math.pow(a.m02, 2) + Math.pow(a.m03, 2));
                    }
                },
                {
                    key: 'LDU',
                    value: function LDU(L, D, U, a) {
                        L.m02 = a.m02 / a.m00;
                        U.m00 = a.m00;
                        U.m01 = a.m01;
                        U.m03 = a.m03 - L.m02 * U.m01;
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        out.m00 = a.m00 + b.m00;
                        out.m01 = a.m01 + b.m01;
                        out.m02 = a.m02 + b.m02;
                        out.m03 = a.m03 + b.m03;
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        out.m00 = a.m00 - b.m00;
                        out.m01 = a.m01 - b.m01;
                        out.m02 = a.m02 - b.m02;
                        out.m03 = a.m03 - b.m03;
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return mat2.subtract(out, a, b);
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03;
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03;
                        var b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03;
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _utils.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
                    }
                },
                {
                    key: 'multiplyScalar',
                    value: function multiplyScalar(out, a, b) {
                        out.m00 = a.m00 * b;
                        out.m01 = a.m01 * b;
                        out.m02 = a.m02 * b;
                        out.m03 = a.m03 * b;
                        return out;
                    }
                },
                {
                    key: 'multiplyScalarAndAdd',
                    value: function multiplyScalarAndAdd(out, a, b, scale) {
                        out.m00 = a.m00 + b.m00 * scale;
                        out.m01 = a.m01 + b.m01 * scale;
                        out.m02 = a.m02 + b.m02 * scale;
                        out.m03 = a.m03 + b.m03 * scale;
                        return out;
                    }
                }
            ]);
            return mat2;
        }();
        exports.default = mat2;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,