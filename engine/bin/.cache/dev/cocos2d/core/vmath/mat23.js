(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/mat23.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var mat23 = function () {
            function mat23() {
                var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                _classCallCheck(this, mat23);
                this.m00 = m00;
                this.m01 = m01;
                this.m02 = m02;
                this.m03 = m03;
                this.m04 = m04;
                this.m05 = m05;
            }
            _createClass(mat23, null, [
                {
                    key: 'create',
                    value: function create() {
                        var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                        var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                        var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                        var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                        return new mat23(m00, m01, m02, m03, m04, m05);
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        return new mat23(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.m00 = a.m00;
                        out.m01 = a.m01;
                        out.m02 = a.m02;
                        out.m03 = a.m03;
                        out.m04 = a.m04;
                        out.m05 = a.m05;
                        return out;
                    }
                },
                {
                    key: 'identity',
                    value: function identity(out) {
                        out.m00 = 1;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 1;
                        out.m04 = 0;
                        out.m05 = 0;
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, a, b, c, d, tx, ty) {
                        out.m00 = a;
                        out.m01 = b;
                        out.m02 = c;
                        out.m03 = d;
                        out.m04 = tx;
                        out.m05 = ty;
                        return out;
                    }
                },
                {
                    key: 'invert',
                    value: function invert(out, a) {
                        var aa = a.m00, ab = a.m01, ac = a.m02, ad = a.m03, atx = a.m04, aty = a.m05;
                        var det = aa * ad - ab * ac;
                        if (!det) {
                            return null;
                        }
                        det = 1 / det;
                        out.m00 = ad * det;
                        out.m01 = -ab * det;
                        out.m02 = -ac * det;
                        out.m03 = aa * det;
                        out.m04 = (ac * aty - ad * atx) * det;
                        out.m05 = (ab * atx - aa * aty) * det;
                        return out;
                    }
                },
                {
                    key: 'determinant',
                    value: function determinant(a) {
                        return a.m00 * a.m03 - a.m01 * a.m02;
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05, b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03, b4 = b.m04, b5 = b.m05;
                        out.m00 = a0 * b0 + a2 * b1;
                        out.m01 = a1 * b0 + a3 * b1;
                        out.m02 = a0 * b2 + a2 * b3;
                        out.m03 = a1 * b2 + a3 * b3;
                        out.m04 = a0 * b4 + a2 * b5 + a4;
                        out.m05 = a1 * b4 + a3 * b5 + a5;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return mat23.multiply(out, a, b);
                    }
                },
                {
                    key: 'rotate',
                    value: function rotate(out, a, rad) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05, s = Math.sin(rad), c = Math.cos(rad);
                        out.m00 = a0 * c + a2 * s;
                        out.m01 = a1 * c + a3 * s;
                        out.m02 = a0 * -s + a2 * c;
                        out.m03 = a1 * -s + a3 * c;
                        out.m04 = a4;
                        out.m05 = a5;
                        return out;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, v) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05, v0 = v.x, v1 = v.y;
                        out.m00 = a0 * v0;
                        out.m01 = a1 * v0;
                        out.m02 = a2 * v1;
                        out.m03 = a3 * v1;
                        out.m04 = a4;
                        out.m05 = a5;
                        return out;
                    }
                },
                {
                    key: 'translate',
                    value: function translate(out, a, v) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05, v0 = v.x, v1 = v.y;
                        out.m00 = a0;
                        out.m01 = a1;
                        out.m02 = a2;
                        out.m03 = a3;
                        out.m04 = a0 * v0 + a2 * v1 + a4;
                        out.m05 = a1 * v0 + a3 * v1 + a5;
                        return out;
                    }
                },
                {
                    key: 'fromRotation',
                    value: function fromRotation(out, rad) {
                        var s = Math.sin(rad), c = Math.cos(rad);
                        out.m00 = c;
                        out.m01 = s;
                        out.m02 = -s;
                        out.m03 = c;
                        out.m04 = 0;
                        out.m05 = 0;
                        return out;
                    }
                },
                {
                    key: 'fromScaling',
                    value: function fromScaling(out, v) {
                        out.m00 = v.m00;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = v.m01;
                        out.m04 = 0;
                        out.m05 = 0;
                        return out;
                    }
                },
                {
                    key: 'fromTranslation',
                    value: function fromTranslation(out, v) {
                        out.m00 = 1;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 1;
                        out.m04 = v.x;
                        out.m05 = v.y;
                        return out;
                    }
                },
                {
                    key: 'fromRTS',
                    value: function fromRTS(out, r, t, s) {
                        var sr = Math.sin(r), cr = Math.cos(r);
                        out.m00 = cr * s.x;
                        out.m01 = sr * s.x;
                        out.m02 = -sr * s.y;
                        out.m03 = cr * s.y;
                        out.m04 = t.x;
                        out.m05 = t.y;
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        return 'mat23(' + a.m00 + ', ' + a.m01 + ', ' + a.m02 + ', ' + a.m03 + ', ' + a.m04 + ', ' + a.m05 + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, m) {
                        out[0] = m.m00;
                        out[1] = m.m01;
                        out[2] = m.m02;
                        out[3] = m.m03;
                        out[4] = m.m04;
                        out[5] = m.m05;
                        return out;
                    }
                },
                {
                    key: 'array4x4',
                    value: function array4x4(out, m) {
                        out[0] = m.m00;
                        out[1] = m.m01;
                        out[2] = 0;
                        out[3] = 0;
                        out[4] = m.m02;
                        out[5] = m.m03;
                        out[6] = 0;
                        out[7] = 0;
                        out[8] = 0;
                        out[9] = 0;
                        out[10] = 1;
                        out[11] = 0;
                        out[12] = m.m04;
                        out[13] = m.m05;
                        out[14] = 0;
                        out[15] = 1;
                        return out;
                    }
                },
                {
                    key: 'frob',
                    value: function frob(a) {
                        return Math.sqrt(Math.pow(a.m00, 2) + Math.pow(a.m01, 2) + Math.pow(a.m02, 2) + Math.pow(a.m03, 2) + Math.pow(a.m04, 2) + Math.pow(a.m05, 2) + 1);
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        out.m00 = a.m00 + b.m00;
                        out.m01 = a.m01 + b.m01;
                        out.m02 = a.m02 + b.m02;
                        out.m03 = a.m03 + b.m03;
                        out.m04 = a.m04 + b.m04;
                        out.m05 = a.m05 + b.m05;
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        out.m00 = a.m00 - b.m00;
                        out.m01 = a.m01 - b.m01;
                        out.m02 = a.m02 - b.m02;
                        out.m03 = a.m03 - b.m03;
                        out.m04 = a.m04 - b.m04;
                        out.m05 = a.m05 - b.m05;
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return mat23.subtract(out, a, b);
                    }
                },
                {
                    key: 'multiplyScalar',
                    value: function multiplyScalar(out, a, b) {
                        out.m00 = a.m00 * b;
                        out.m01 = a.m01 * b;
                        out.m02 = a.m02 * b;
                        out.m03 = a.m03 * b;
                        out.m04 = a.m04 * b;
                        out.m05 = a.m05 * b;
                        return out;
                    }
                },
                {
                    key: 'multiplyScalarAndAdd',
                    value: function multiplyScalarAndAdd(out, a, b, scale) {
                        out.m00 = a.m00 + b.m00 * scale;
                        out.m01 = a.m01 + b.m01 * scale;
                        out.m02 = a.m02 + b.m02 * scale;
                        out.m03 = a.m03 + b.m03 * scale;
                        out.m04 = a.m04 + b.m04 * scale;
                        out.m05 = a.m05 + b.m05 * scale;
                        return out;
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05;
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05;
                        var b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03, b4 = b.m04, b5 = b.m05;
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _utils.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _utils.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _utils.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5));
                    }
                }
            ]);
            return mat23;
        }();
        exports.default = mat23;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,