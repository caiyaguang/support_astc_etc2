(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/vec4.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var vec4 = function () {
            function vec4() {
                var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                _classCallCheck(this, vec4);
                this.x = x;
                this.y = y;
                this.z = z;
                this.w = w;
            }
            _createClass(vec4, null, [
                {
                    key: 'create',
                    value: function create() {
                        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                        return new vec4(x, y, z, w);
                    }
                },
                {
                    key: 'zero',
                    value: function zero(out) {
                        out.x = 0;
                        out.y = 0;
                        out.z = 0;
                        out.w = 0;
                        return out;
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        return new vec4(a.x, a.y, a.z, a.w);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.x = a.x;
                        out.y = a.y;
                        out.z = a.z;
                        out.w = a.w;
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, x, y, z, w) {
                        out.x = x;
                        out.y = y;
                        out.z = z;
                        out.w = w;
                        return out;
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        out.x = a.x + b.x;
                        out.y = a.y + b.y;
                        out.z = a.z + b.z;
                        out.w = a.w + b.w;
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        out.x = a.x - b.x;
                        out.y = a.y - b.y;
                        out.z = a.z - b.z;
                        out.w = a.w - b.w;
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return vec4.subtract(out, a, b);
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        out.x = a.x * b.x;
                        out.y = a.y * b.y;
                        out.z = a.z * b.z;
                        out.w = a.w * b.w;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return vec4.multiply(out, a, b);
                    }
                },
                {
                    key: 'divide',
                    value: function divide(out, a, b) {
                        out.x = a.x / b.x;
                        out.y = a.y / b.y;
                        out.z = a.z / b.z;
                        out.w = a.w / b.w;
                        return out;
                    }
                },
                {
                    key: 'div',
                    value: function div(out, a, b) {
                        return vec4.divide(out, a, b);
                    }
                },
                {
                    key: 'ceil',
                    value: function ceil(out, a) {
                        out.x = Math.ceil(a.x);
                        out.y = Math.ceil(a.y);
                        out.z = Math.ceil(a.z);
                        out.w = Math.ceil(a.w);
                        return out;
                    }
                },
                {
                    key: 'floor',
                    value: function floor(out, a) {
                        out.x = Math.floor(a.x);
                        out.y = Math.floor(a.y);
                        out.z = Math.floor(a.z);
                        out.w = Math.floor(a.w);
                        return out;
                    }
                },
                {
                    key: 'min',
                    value: function min(out, a, b) {
                        out.x = Math.min(a.x, b.x);
                        out.y = Math.min(a.y, b.y);
                        out.z = Math.min(a.z, b.z);
                        out.w = Math.min(a.w, b.w);
                        return out;
                    }
                },
                {
                    key: 'max',
                    value: function max(out, a, b) {
                        out.x = Math.max(a.x, b.x);
                        out.y = Math.max(a.y, b.y);
                        out.z = Math.max(a.z, b.z);
                        out.w = Math.max(a.w, b.w);
                        return out;
                    }
                },
                {
                    key: 'round',
                    value: function round(out, a) {
                        out.x = Math.round(a.x);
                        out.y = Math.round(a.y);
                        out.z = Math.round(a.z);
                        out.w = Math.round(a.w);
                        return out;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, b) {
                        out.x = a.x * b;
                        out.y = a.y * b;
                        out.z = a.z * b;
                        out.w = a.w * b;
                        return out;
                    }
                },
                {
                    key: 'scaleAndAdd',
                    value: function scaleAndAdd(out, a, b, scale) {
                        out.x = a.x + b.x * scale;
                        out.y = a.y + b.y * scale;
                        out.z = a.z + b.z * scale;
                        out.w = a.w + b.w * scale;
                        return out;
                    }
                },
                {
                    key: 'distance',
                    value: function distance(a, b) {
                        var x = b.x - a.x, y = b.y - a.y, z = b.z - a.z, w = b.w - a.w;
                        return Math.sqrt(x * x + y * y + z * z + w * w);
                    }
                },
                {
                    key: 'dist',
                    value: function dist(a, b) {
                        return vec4.distance(a, b);
                    }
                },
                {
                    key: 'squaredDistance',
                    value: function squaredDistance(a, b) {
                        var x = b.x - a.x, y = b.y - a.y, z = b.z - a.z, w = b.w - a.w;
                        return x * x + y * y + z * z + w * w;
                    }
                },
                {
                    key: 'sqrDist',
                    value: function sqrDist(a, b) {
                        return vec4.squaredDistance(a, b);
                    }
                },
                {
                    key: 'magnitude',
                    value: function magnitude(a) {
                        var x = a.x, y = a.y, z = a.z, w = a.w;
                        return Math.sqrt(x * x + y * y + z * z + w * w);
                    }
                },
                {
                    key: 'mag',
                    value: function mag(a) {
                        return vec4.magnitude(a);
                    }
                },
                {
                    key: 'squaredMagnitude',
                    value: function squaredMagnitude(a) {
                        var x = a.x, y = a.y, z = a.z, w = a.w;
                        return x * x + y * y + z * z + w * w;
                    }
                },
                {
                    key: 'sqrMag',
                    value: function sqrMag(a) {
                        return vec4.squaredMagnitude(a);
                    }
                },
                {
                    key: 'negate',
                    value: function negate(out, a) {
                        out.x = -a.x;
                        out.y = -a.y;
                        out.z = -a.z;
                        out.w = -a.w;
                        return out;
                    }
                },
                {
                    key: 'inverse',
                    value: function inverse(out, a) {
                        out.x = 1 / a.x;
                        out.y = 1 / a.y;
                        out.z = 1 / a.z;
                        out.w = 1 / a.w;
                        return out;
                    }
                },
                {
                    key: 'inverseSafe',
                    value: function inverseSafe(out, a) {
                        var x = a.x, y = a.y, z = a.z, w = a.w;
                        if (Math.abs(x) < _utils.EPSILON) {
                            out.x = 0;
                        } else {
                            out.x = 1 / x;
                        }
                        if (Math.abs(y) < _utils.EPSILON) {
                            out.y = 0;
                        } else {
                            out.y = 1 / y;
                        }
                        if (Math.abs(z) < _utils.EPSILON) {
                            out.z = 0;
                        } else {
                            out.z = 1 / z;
                        }
                        if (Math.abs(w) < _utils.EPSILON) {
                            out.w = 0;
                        } else {
                            out.w = 1 / w;
                        }
                        return out;
                    }
                },
                {
                    key: 'normalize',
                    value: function normalize(out, a) {
                        var x = a.x, y = a.y, z = a.z, w = a.w;
                        var len = x * x + y * y + z * z + w * w;
                        if (len > 0) {
                            len = 1 / Math.sqrt(len);
                            out.x = x * len;
                            out.y = y * len;
                            out.z = z * len;
                            out.w = w * len;
                        }
                        return out;
                    }
                },
                {
                    key: 'dot',
                    value: function dot(a, b) {
                        return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
                    }
                },
                {
                    key: 'lerp',
                    value: function lerp(out, a, b, t) {
                        var ax = a.x, ay = a.y, az = a.z, aw = a.w;
                        out.x = ax + t * (b.x - ax);
                        out.y = ay + t * (b.y - ay);
                        out.z = az + t * (b.z - az);
                        out.w = aw + t * (b.w - aw);
                        return out;
                    }
                },
                {
                    key: 'random',
                    value: function random(out, scale) {
                        scale = scale || 1;
                        var phi = (0, _utils.random)() * 2 * Math.PI;
                        var theta = Math.acos((0, _utils.random)() * 2 - 1);
                        out.x = Math.sin(theta) * Math.cos(phi) * scale;
                        out.y = Math.sin(theta) * Math.sin(phi) * scale;
                        out.z = Math.cos(theta) * scale;
                        out.w = 0;
                        return out;
                    }
                },
                {
                    key: 'transformMat4',
                    value: function transformMat4(out, a, m) {
                        var x = a.x, y = a.y, z = a.z, w = a.w;
                        out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12 * w;
                        out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13 * w;
                        out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14 * w;
                        out.w = m.m03 * x + m.m07 * y + m.m11 * z + m.m15 * w;
                        return out;
                    }
                },
                {
                    key: 'transformQuat',
                    value: function transformQuat(out, a, q) {
                        var x = a.x, y = a.y, z = a.z;
                        var qx = q.x, qy = q.y, qz = q.z, qw = q.w;
                        var ix = qw * x + qy * z - qz * y;
                        var iy = qw * y + qz * x - qx * z;
                        var iz = qw * z + qx * y - qy * x;
                        var iw = -qx * x - qy * y - qz * z;
                        out.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                        out.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                        out.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                        out.w = a.w;
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        return 'vec4(' + a.x + ', ' + a.y + ', ' + a.z + ', ' + a.w + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, v) {
                        out[0] = v.x;
                        out[1] = v.y;
                        out[2] = v.z;
                        out[3] = v.w;
                        return out;
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var a0 = a.x, a1 = a.y, a2 = a.z, a3 = a.w;
                        var b0 = b.x, b1 = b.y, b2 = b.z, b3 = b.w;
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _utils.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
                    }
                },
                {
                    key: 'forEach',
                    value: function forEach(a, stride, offset, count, fn, arg) {
                        return vec4._forEach(a, stride, offset, count, fn, arg);
                    }
                }
            ]);
            return vec4;
        }();
        vec4._forEach = function () {
            var vec = vec4.create(0, 0, 0, 0);
            return function (a, stride, offset, count, fn, arg) {
                var i = void 0, l = void 0;
                if (!stride) {
                    stride = 4;
                }
                if (!offset) {
                    offset = 0;
                }
                if (count) {
                    l = Math.min(count * stride + offset, a.length);
                } else {
                    l = a.length;
                }
                for (i = offset; i < l; i += stride) {
                    vec.x = a[i];
                    vec.y = a[i + 1];
                    vec.z = a[i + 2];
                    vec.w = a[i + 3];
                    fn(vec, vec, arg);
                    a[i] = vec.x;
                    a[i + 1] = vec.y;
                    a[i + 2] = vec.z;
                    a[i + 3] = vec.w;
                }
                return a;
            };
        }();
        exports.default = vec4;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,