(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/utils.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.equals = equals;
        exports.approx = approx;
        exports.clamp = clamp;
        exports.clamp01 = clamp01;
        exports.lerp = lerp;
        exports.toRadian = toRadian;
        exports.toDegree = toDegree;
        exports.randomRange = randomRange;
        exports.randomRangeInt = randomRangeInt;
        exports.pseudoRandom = pseudoRandom;
        exports.pseudoRandomRange = pseudoRandomRange;
        exports.pseudoRandomRangeInt = pseudoRandomRangeInt;
        exports.nextPow2 = nextPow2;
        exports.repeat = repeat;
        exports.pingPong = pingPong;
        exports.inverseLerp = inverseLerp;
        var _d2r = Math.PI / 180;
        var _r2d = 180 / Math.PI;
        var EPSILON = exports.EPSILON = 0.000001;
        function equals(a, b) {
            return Math.abs(a - b) <= EPSILON * Math.max(1, Math.abs(a), Math.abs(b));
        }
        function approx(a, b, maxDiff) {
            maxDiff = maxDiff || EPSILON;
            return Math.abs(a - b) <= maxDiff;
        }
        function clamp(val, min, max) {
            return val < min ? min : val > max ? max : val;
        }
        function clamp01(val) {
            return val < 0 ? 0 : val > 1 ? 1 : val;
        }
        function lerp(from, to, ratio) {
            return from + (to - from) * ratio;
        }
        function toRadian(a) {
            return a * _d2r;
        }
        function toDegree(a) {
            return a * _r2d;
        }
        var random = exports.random = Math.random;
        function randomRange(min, max) {
            return Math.random() * (max - min) + min;
        }
        function randomRangeInt(min, max) {
            return Math.floor(randomRange(min, max));
        }
        function pseudoRandom(seed) {
            seed = (seed * 9301 + 49297) % 233280;
            return seed / 233280;
        }
        function pseudoRandomRange(seed, min, max) {
            return pseudoRandom(seed) * (max - min) + min;
        }
        function pseudoRandomRangeInt(seed, min, max) {
            return Math.floor(pseudoRandomRange(seed, min, max));
        }
        function nextPow2(val) {
            --val;
            val = val >> 1 | val;
            val = val >> 2 | val;
            val = val >> 4 | val;
            val = val >> 8 | val;
            val = val >> 16 | val;
            ++val;
            return val;
        }
        function repeat(t, length) {
            return t - Math.floor(t / length) * length;
        }
        function pingPong(t, length) {
            t = repeat(t, length * 2);
            t = length - Math.abs(t - length);
            return t;
        }
        function inverseLerp(from, to, value) {
            return (value - from) / (to - from);
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,