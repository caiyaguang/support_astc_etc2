(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/mat3.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        var _vec = require('./vec3');
        var _vec2 = _interopRequireDefault(_vec);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var mat3 = function () {
            function mat3() {
                var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
                var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                var m06 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
                var m07 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
                var m08 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;
                _classCallCheck(this, mat3);
                this.m00 = m00;
                this.m01 = m01;
                this.m02 = m02;
                this.m03 = m03;
                this.m04 = m04;
                this.m05 = m05;
                this.m06 = m06;
                this.m07 = m07;
                this.m08 = m08;
            }
            _createClass(mat3, null, [
                {
                    key: 'create',
                    value: function create() {
                        var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                        var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                        var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
                        var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                        var m06 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
                        var m07 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
                        var m08 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;
                        return new mat3(m00, m01, m02, m03, m04, m05, m06, m07, m08);
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        return new mat3(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05, a.m06, a.m07, a.m08);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.m00 = a.m00;
                        out.m01 = a.m01;
                        out.m02 = a.m02;
                        out.m03 = a.m03;
                        out.m04 = a.m04;
                        out.m05 = a.m05;
                        out.m06 = a.m06;
                        out.m07 = a.m07;
                        out.m08 = a.m08;
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
                        out.m00 = m00;
                        out.m01 = m01;
                        out.m02 = m02;
                        out.m03 = m10;
                        out.m04 = m11;
                        out.m05 = m12;
                        out.m06 = m20;
                        out.m07 = m21;
                        out.m08 = m22;
                        return out;
                    }
                },
                {
                    key: 'identity',
                    value: function identity(out) {
                        out.m00 = 1;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 0;
                        out.m04 = 1;
                        out.m05 = 0;
                        out.m06 = 0;
                        out.m07 = 0;
                        out.m08 = 1;
                        return out;
                    }
                },
                {
                    key: 'transpose',
                    value: function transpose(out, a) {
                        if (out === a) {
                            var a01 = a.m01, a02 = a.m02, a12 = a.m05;
                            out.m01 = a.m03;
                            out.m02 = a.m06;
                            out.m03 = a01;
                            out.m05 = a.m07;
                            out.m06 = a02;
                            out.m07 = a12;
                        } else {
                            out.m00 = a.m00;
                            out.m01 = a.m03;
                            out.m02 = a.m06;
                            out.m03 = a.m01;
                            out.m04 = a.m04;
                            out.m05 = a.m07;
                            out.m06 = a.m02;
                            out.m07 = a.m05;
                            out.m08 = a.m08;
                        }
                        return out;
                    }
                },
                {
                    key: 'invert',
                    value: function invert(out, a) {
                        var a00 = a.m00, a01 = a.m01, a02 = a.m02, a10 = a.m03, a11 = a.m04, a12 = a.m05, a20 = a.m06, a21 = a.m07, a22 = a.m08;
                        var b01 = a22 * a11 - a12 * a21;
                        var b11 = -a22 * a10 + a12 * a20;
                        var b21 = a21 * a10 - a11 * a20;
                        var det = a00 * b01 + a01 * b11 + a02 * b21;
                        if (!det) {
                            return null;
                        }
                        det = 1 / det;
                        out.m00 = b01 * det;
                        out.m01 = (-a22 * a01 + a02 * a21) * det;
                        out.m02 = (a12 * a01 - a02 * a11) * det;
                        out.m03 = b11 * det;
                        out.m04 = (a22 * a00 - a02 * a20) * det;
                        out.m05 = (-a12 * a00 + a02 * a10) * det;
                        out.m06 = b21 * det;
                        out.m07 = (-a21 * a00 + a01 * a20) * det;
                        out.m08 = (a11 * a00 - a01 * a10) * det;
                        return out;
                    }
                },
                {
                    key: 'adjoint',
                    value: function adjoint(out, a) {
                        var a00 = a.m00, a01 = a.m01, a02 = a.m02, a10 = a.m03, a11 = a.m04, a12 = a.m05, a20 = a.m06, a21 = a.m07, a22 = a.m08;
                        out.m00 = a11 * a22 - a12 * a21;
                        out.m01 = a02 * a21 - a01 * a22;
                        out.m02 = a01 * a12 - a02 * a11;
                        out.m03 = a12 * a20 - a10 * a22;
                        out.m04 = a00 * a22 - a02 * a20;
                        out.m05 = a02 * a10 - a00 * a12;
                        out.m06 = a10 * a21 - a11 * a20;
                        out.m07 = a01 * a20 - a00 * a21;
                        out.m08 = a00 * a11 - a01 * a10;
                        return out;
                    }
                },
                {
                    key: 'determinant',
                    value: function determinant(a) {
                        var a00 = a.m00, a01 = a.m01, a02 = a.m02, a10 = a.m03, a11 = a.m04, a12 = a.m05, a20 = a.m06, a21 = a.m07, a22 = a.m08;
                        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        var a00 = a.m00, a01 = a.m01, a02 = a.m02, a10 = a.m03, a11 = a.m04, a12 = a.m05, a20 = a.m06, a21 = a.m07, a22 = a.m08;
                        var b00 = b.m00, b01 = b.m01, b02 = b.m02;
                        var b10 = b.m03, b11 = b.m04, b12 = b.m05;
                        var b20 = b.m06, b21 = b.m07, b22 = b.m08;
                        out.m00 = b00 * a00 + b01 * a10 + b02 * a20;
                        out.m01 = b00 * a01 + b01 * a11 + b02 * a21;
                        out.m02 = b00 * a02 + b01 * a12 + b02 * a22;
                        out.m03 = b10 * a00 + b11 * a10 + b12 * a20;
                        out.m04 = b10 * a01 + b11 * a11 + b12 * a21;
                        out.m05 = b10 * a02 + b11 * a12 + b12 * a22;
                        out.m06 = b20 * a00 + b21 * a10 + b22 * a20;
                        out.m07 = b20 * a01 + b21 * a11 + b22 * a21;
                        out.m08 = b20 * a02 + b21 * a12 + b22 * a22;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return mat3.multiply(out, a, b);
                    }
                },
                {
                    key: 'translate',
                    value: function translate(out, a, v) {
                        var a00 = a.m00, a01 = a.m01, a02 = a.m02, a10 = a.m03, a11 = a.m04, a12 = a.m05, a20 = a.m06, a21 = a.m07, a22 = a.m08;
                        var x = v.x, y = v.y;
                        out.m00 = a00;
                        out.m01 = a01;
                        out.m02 = a02;
                        out.m03 = a10;
                        out.m04 = a11;
                        out.m05 = a12;
                        out.m06 = x * a00 + y * a10 + a20;
                        out.m07 = x * a01 + y * a11 + a21;
                        out.m08 = x * a02 + y * a12 + a22;
                        return out;
                    }
                },
                {
                    key: 'rotate',
                    value: function rotate(out, a, rad) {
                        var a00 = a.m00, a01 = a.m01, a02 = a.m02, a10 = a.m03, a11 = a.m04, a12 = a.m05, a20 = a.m06, a21 = a.m07, a22 = a.m08;
                        var s = Math.sin(rad);
                        var c = Math.cos(rad);
                        out.m00 = c * a00 + s * a10;
                        out.m01 = c * a01 + s * a11;
                        out.m02 = c * a02 + s * a12;
                        out.m03 = c * a10 - s * a00;
                        out.m04 = c * a11 - s * a01;
                        out.m05 = c * a12 - s * a02;
                        out.m06 = a20;
                        out.m07 = a21;
                        out.m08 = a22;
                        return out;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, v) {
                        var x = v.x, y = v.y;
                        out.m00 = x * a.m00;
                        out.m01 = x * a.m01;
                        out.m02 = x * a.m02;
                        out.m03 = y * a.m03;
                        out.m04 = y * a.m04;
                        out.m05 = y * a.m05;
                        out.m06 = a.m06;
                        out.m07 = a.m07;
                        out.m08 = a.m08;
                        return out;
                    }
                },
                {
                    key: 'fromMat4',
                    value: function fromMat4(out, a) {
                        out.m00 = a.m00;
                        out.m01 = a.m01;
                        out.m02 = a.m02;
                        out.m03 = a.m04;
                        out.m04 = a.m05;
                        out.m05 = a.m06;
                        out.m06 = a.m08;
                        out.m07 = a.m09;
                        out.m08 = a.m10;
                        return out;
                    }
                },
                {
                    key: 'fromTranslation',
                    value: function fromTranslation(out, v) {
                        out.m00 = 1;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 0;
                        out.m04 = 1;
                        out.m05 = 0;
                        out.m06 = v.x;
                        out.m07 = v.y;
                        out.m08 = 1;
                        return out;
                    }
                },
                {
                    key: 'fromRotation',
                    value: function fromRotation(out, rad) {
                        var s = Math.sin(rad), c = Math.cos(rad);
                        out.m00 = c;
                        out.m01 = s;
                        out.m02 = 0;
                        out.m03 = -s;
                        out.m04 = c;
                        out.m05 = 0;
                        out.m06 = 0;
                        out.m07 = 0;
                        out.m08 = 1;
                        return out;
                    }
                },
                {
                    key: 'fromScaling',
                    value: function fromScaling(out, v) {
                        out.m00 = v.x;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 0;
                        out.m04 = v.y;
                        out.m05 = 0;
                        out.m06 = 0;
                        out.m07 = 0;
                        out.m08 = 1;
                        return out;
                    }
                },
                {
                    key: 'fromMat2d',
                    value: function fromMat2d(out, a) {
                        out.m00 = a.m00;
                        out.m01 = a.m01;
                        out.m02 = 0;
                        out.m03 = a.m02;
                        out.m04 = a.m03;
                        out.m05 = 0;
                        out.m06 = a.m04;
                        out.m07 = a.m05;
                        out.m08 = 1;
                        return out;
                    }
                },
                {
                    key: 'fromQuat',
                    value: function fromQuat(out, q) {
                        var x = q.x, y = q.y, z = q.z, w = q.w;
                        var x2 = x + x;
                        var y2 = y + y;
                        var z2 = z + z;
                        var xx = x * x2;
                        var yx = y * x2;
                        var yy = y * y2;
                        var zx = z * x2;
                        var zy = z * y2;
                        var zz = z * z2;
                        var wx = w * x2;
                        var wy = w * y2;
                        var wz = w * z2;
                        out.m00 = 1 - yy - zz;
                        out.m03 = yx - wz;
                        out.m06 = zx + wy;
                        out.m01 = yx + wz;
                        out.m04 = 1 - xx - zz;
                        out.m07 = zy - wx;
                        out.m02 = zx - wy;
                        out.m05 = zy + wx;
                        out.m08 = 1 - xx - yy;
                        return out;
                    }
                },
                {
                    key: 'fromViewUp',
                    value: function fromViewUp(out, view, up) {
                        var _fromViewUpIIFE = function () {
                            var default_up = _vec2.default.create(0, 1, 0);
                            var x = _vec2.default.create(0, 0, 0);
                            var y = _vec2.default.create(0, 0, 0);
                            return function (out, view, up) {
                                if (_vec2.default.sqrMag(view) < _utils.EPSILON * _utils.EPSILON) {
                                    mat3.identity(out);
                                    return out;
                                }
                                up = up || default_up;
                                _vec2.default.normalize(x, _vec2.default.cross(x, up, view));
                                if (_vec2.default.sqrMag(x) < _utils.EPSILON * _utils.EPSILON) {
                                    mat3.identity(out);
                                    return out;
                                }
                                _vec2.default.cross(y, view, x);
                                mat3.set(out, x.x, x.y, x.z, y.x, y.y, y.z, view.x, view.y, view.z);
                                return out;
                            };
                        }();
                        return _fromViewUpIIFE(out, view, up);
                    }
                },
                {
                    key: 'normalFromMat4',
                    value: function normalFromMat4(out, a) {
                        var a00 = a.m00, a01 = a.m01, a02 = a.m02, a03 = a.m03, a10 = a.m04, a11 = a.m05, a12 = a.m06, a13 = a.m07, a20 = a.m08, a21 = a.m09, a22 = a.m10, a23 = a.m11, a30 = a.m12, a31 = a.m13, a32 = a.m14, a33 = a.m15;
                        var b00 = a00 * a11 - a01 * a10;
                        var b01 = a00 * a12 - a02 * a10;
                        var b02 = a00 * a13 - a03 * a10;
                        var b03 = a01 * a12 - a02 * a11;
                        var b04 = a01 * a13 - a03 * a11;
                        var b05 = a02 * a13 - a03 * a12;
                        var b06 = a20 * a31 - a21 * a30;
                        var b07 = a20 * a32 - a22 * a30;
                        var b08 = a20 * a33 - a23 * a30;
                        var b09 = a21 * a32 - a22 * a31;
                        var b10 = a21 * a33 - a23 * a31;
                        var b11 = a22 * a33 - a23 * a32;
                        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                        if (!det) {
                            return null;
                        }
                        det = 1 / det;
                        out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                        out.m01 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                        out.m02 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                        out.m03 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                        out.m04 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                        out.m05 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                        out.m06 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                        out.m07 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                        out.m08 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        return 'mat3(' + a.m00 + ', ' + a.m01 + ', ' + a.m02 + ', ' + a.m03 + ', ' + a.m04 + ', ' + a.m05 + ', ' + a.m06 + ', ' + a.m07 + ', ' + a.m08 + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, m) {
                        out[0] = m.m00;
                        out[1] = m.m01;
                        out[2] = m.m02;
                        out[3] = m.m03;
                        out[4] = m.m04;
                        out[5] = m.m05;
                        out[6] = m.m06;
                        out[7] = m.m07;
                        out[8] = m.m08;
                        return out;
                    }
                },
                {
                    key: 'frob',
                    value: function frob(a) {
                        return Math.sqrt(Math.pow(a.m00, 2) + Math.pow(a.m01, 2) + Math.pow(a.m02, 2) + Math.pow(a.m03, 2) + Math.pow(a.m04, 2) + Math.pow(a.m05, 2) + Math.pow(a.m06, 2) + Math.pow(a.m07, 2) + Math.pow(a.m08, 2));
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        out.m00 = a.m00 + b.m00;
                        out.m01 = a.m01 + b.m01;
                        out.m02 = a.m02 + b.m02;
                        out.m03 = a.m03 + b.m03;
                        out.m04 = a.m04 + b.m04;
                        out.m05 = a.m05 + b.m05;
                        out.m06 = a.m06 + b.m06;
                        out.m07 = a.m07 + b.m07;
                        out.m08 = a.m08 + b.m08;
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        out.m00 = a.m00 - b.m00;
                        out.m01 = a.m01 - b.m01;
                        out.m02 = a.m02 - b.m02;
                        out.m03 = a.m03 - b.m03;
                        out.m04 = a.m04 - b.m04;
                        out.m05 = a.m05 - b.m05;
                        out.m06 = a.m06 - b.m06;
                        out.m07 = a.m07 - b.m07;
                        out.m08 = a.m08 - b.m08;
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return mat3.subtract(out, a, b);
                    }
                },
                {
                    key: 'multiplyScalar',
                    value: function multiplyScalar(out, a, b) {
                        out.m00 = a.m00 * b;
                        out.m01 = a.m01 * b;
                        out.m02 = a.m02 * b;
                        out.m03 = a.m03 * b;
                        out.m04 = a.m04 * b;
                        out.m05 = a.m05 * b;
                        out.m06 = a.m06 * b;
                        out.m07 = a.m07 * b;
                        out.m08 = a.m08 * b;
                        return out;
                    }
                },
                {
                    key: 'multiplyScalarAndAdd',
                    value: function multiplyScalarAndAdd(out, a, b, scale) {
                        out.m00 = a.m00 + b.m00 * scale;
                        out.m01 = a.m01 + b.m01 * scale;
                        out.m02 = a.m02 + b.m02 * scale;
                        out.m03 = a.m03 + b.m03 * scale;
                        out.m04 = a.m04 + b.m04 * scale;
                        out.m05 = a.m05 + b.m05 * scale;
                        out.m06 = a.m06 + b.m06 * scale;
                        out.m07 = a.m07 + b.m07 * scale;
                        out.m08 = a.m08 + b.m08 * scale;
                        return out;
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08;
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05, a6 = a.m06, a7 = a.m07, a8 = a.m08;
                        var b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03, b4 = b.m04, b5 = b.m05, b6 = b.m06, b7 = b.m07, b8 = b.m08;
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _utils.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _utils.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _utils.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _utils.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _utils.EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _utils.EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8));
                    }
                }
            ]);
            return mat3;
        }();
        exports.default = mat3;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,