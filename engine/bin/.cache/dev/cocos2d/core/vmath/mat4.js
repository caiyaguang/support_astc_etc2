(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/mat4.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var mat4 = function () {
            function mat4() {
                var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
                var m06 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
                var m07 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
                var m08 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
                var m09 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
                var m10 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
                var m11 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
                var m12 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
                var m13 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
                var m14 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
                var m15 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;
                _classCallCheck(this, mat4);
                this.m00 = m00;
                this.m01 = m01;
                this.m02 = m02;
                this.m03 = m03;
                this.m04 = m04;
                this.m05 = m05;
                this.m06 = m06;
                this.m07 = m07;
                this.m08 = m08;
                this.m09 = m09;
                this.m10 = m10;
                this.m11 = m11;
                this.m12 = m12;
                this.m13 = m13;
                this.m14 = m14;
                this.m15 = m15;
            }
            _createClass(mat4, null, [
                {
                    key: 'create',
                    value: function create() {
                        var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                        var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                        var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                        var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
                        var m06 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
                        var m07 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
                        var m08 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
                        var m09 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
                        var m10 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
                        var m11 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
                        var m12 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
                        var m13 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
                        var m14 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
                        var m15 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;
                        return new mat4(m00, m01, m02, m03, m04, m05, m06, m07, m08, m09, m10, m11, m12, m13, m14, m15);
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        return new mat4(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05, a.m06, a.m07, a.m08, a.m09, a.m10, a.m11, a.m12, a.m13, a.m14, a.m15);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.m00 = a.m00;
                        out.m01 = a.m01;
                        out.m02 = a.m02;
                        out.m03 = a.m03;
                        out.m04 = a.m04;
                        out.m05 = a.m05;
                        out.m06 = a.m06;
                        out.m07 = a.m07;
                        out.m08 = a.m08;
                        out.m09 = a.m09;
                        out.m10 = a.m10;
                        out.m11 = a.m11;
                        out.m12 = a.m12;
                        out.m13 = a.m13;
                        out.m14 = a.m14;
                        out.m15 = a.m15;
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
                        out.m00 = m00;
                        out.m01 = m01;
                        out.m02 = m02;
                        out.m03 = m03;
                        out.m04 = m10;
                        out.m05 = m11;
                        out.m06 = m12;
                        out.m07 = m13;
                        out.m08 = m20;
                        out.m09 = m21;
                        out.m10 = m22;
                        out.m11 = m23;
                        out.m12 = m30;
                        out.m13 = m31;
                        out.m14 = m32;
                        out.m15 = m33;
                        return out;
                    }
                },
                {
                    key: 'identity',
                    value: function identity(out) {
                        out.m00 = 1;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 0;
                        out.m04 = 0;
                        out.m05 = 1;
                        out.m06 = 0;
                        out.m07 = 0;
                        out.m08 = 0;
                        out.m09 = 0;
                        out.m10 = 1;
                        out.m11 = 0;
                        out.m12 = 0;
                        out.m13 = 0;
                        out.m14 = 0;
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'transpose',
                    value: function transpose(out, a) {
                        if (out === a) {
                            var a01 = a.m01, a02 = a.m02, a03 = a.m03, a12 = a.m06, a13 = a.m07, a23 = a.m11;
                            out.m01 = a.m04;
                            out.m02 = a.m08;
                            out.m03 = a.m12;
                            out.m04 = a01;
                            out.m06 = a.m09;
                            out.m07 = a.m13;
                            out.m08 = a02;
                            out.m09 = a12;
                            out.m11 = a.m14;
                            out.m12 = a03;
                            out.m13 = a13;
                            out.m14 = a23;
                        } else {
                            out.m00 = a.m00;
                            out.m01 = a.m04;
                            out.m02 = a.m08;
                            out.m03 = a.m12;
                            out.m04 = a.m01;
                            out.m05 = a.m05;
                            out.m06 = a.m09;
                            out.m07 = a.m13;
                            out.m08 = a.m02;
                            out.m09 = a.m06;
                            out.m10 = a.m10;
                            out.m11 = a.m14;
                            out.m12 = a.m03;
                            out.m13 = a.m07;
                            out.m14 = a.m11;
                            out.m15 = a.m15;
                        }
                        return out;
                    }
                },
                {
                    key: 'invert',
                    value: function invert(out, a) {
                        var a00 = a.m00, a01 = a.m01, a02 = a.m02, a03 = a.m03, a10 = a.m04, a11 = a.m05, a12 = a.m06, a13 = a.m07, a20 = a.m08, a21 = a.m09, a22 = a.m10, a23 = a.m11, a30 = a.m12, a31 = a.m13, a32 = a.m14, a33 = a.m15;
                        var b00 = a00 * a11 - a01 * a10;
                        var b01 = a00 * a12 - a02 * a10;
                        var b02 = a00 * a13 - a03 * a10;
                        var b03 = a01 * a12 - a02 * a11;
                        var b04 = a01 * a13 - a03 * a11;
                        var b05 = a02 * a13 - a03 * a12;
                        var b06 = a20 * a31 - a21 * a30;
                        var b07 = a20 * a32 - a22 * a30;
                        var b08 = a20 * a33 - a23 * a30;
                        var b09 = a21 * a32 - a22 * a31;
                        var b10 = a21 * a33 - a23 * a31;
                        var b11 = a22 * a33 - a23 * a32;
                        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                        if (!det) {
                            return null;
                        }
                        det = 1 / det;
                        out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                        out.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                        out.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                        out.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                        out.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                        out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                        out.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                        out.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                        out.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                        out.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                        out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                        out.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                        out.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                        out.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                        out.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                        out.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
                        return out;
                    }
                },
                {
                    key: 'adjoint',
                    value: function adjoint(out, a) {
                        var a00 = a.m00, a01 = a.m01, a02 = a.m02, a03 = a.m03, a10 = a.m04, a11 = a.m05, a12 = a.m06, a13 = a.m07, a20 = a.m08, a21 = a.m09, a22 = a.m10, a23 = a.m11, a30 = a.m12, a31 = a.m13, a32 = a.m14, a33 = a.m15;
                        out.m00 = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
                        out.m01 = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
                        out.m02 = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
                        out.m03 = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
                        out.m04 = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
                        out.m05 = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
                        out.m06 = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
                        out.m07 = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
                        out.m08 = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
                        out.m09 = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
                        out.m10 = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
                        out.m11 = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
                        out.m12 = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
                        out.m13 = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
                        out.m14 = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
                        out.m15 = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
                        return out;
                    }
                },
                {
                    key: 'determinant',
                    value: function determinant(a) {
                        var a00 = a.m00, a01 = a.m01, a02 = a.m02, a03 = a.m03, a10 = a.m04, a11 = a.m05, a12 = a.m06, a13 = a.m07, a20 = a.m08, a21 = a.m09, a22 = a.m10, a23 = a.m11, a30 = a.m12, a31 = a.m13, a32 = a.m14, a33 = a.m15;
                        var b00 = a00 * a11 - a01 * a10;
                        var b01 = a00 * a12 - a02 * a10;
                        var b02 = a00 * a13 - a03 * a10;
                        var b03 = a01 * a12 - a02 * a11;
                        var b04 = a01 * a13 - a03 * a11;
                        var b05 = a02 * a13 - a03 * a12;
                        var b06 = a20 * a31 - a21 * a30;
                        var b07 = a20 * a32 - a22 * a30;
                        var b08 = a20 * a33 - a23 * a30;
                        var b09 = a21 * a32 - a22 * a31;
                        var b10 = a21 * a33 - a23 * a31;
                        var b11 = a22 * a33 - a23 * a32;
                        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        var a00 = a.m00, a01 = a.m01, a02 = a.m02, a03 = a.m03, a10 = a.m04, a11 = a.m05, a12 = a.m06, a13 = a.m07, a20 = a.m08, a21 = a.m09, a22 = a.m10, a23 = a.m11, a30 = a.m12, a31 = a.m13, a32 = a.m14, a33 = a.m15;
                        var b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03;
                        out.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                        out.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                        out.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                        out.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                        b0 = b.m04;
                        b1 = b.m05;
                        b2 = b.m06;
                        b3 = b.m07;
                        out.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                        out.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                        out.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                        out.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                        b0 = b.m08;
                        b1 = b.m09;
                        b2 = b.m10;
                        b3 = b.m11;
                        out.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                        out.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                        out.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                        out.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                        b0 = b.m12;
                        b1 = b.m13;
                        b2 = b.m14;
                        b3 = b.m15;
                        out.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                        out.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                        out.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                        out.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return mat4.multiply(out, a, b);
                    }
                },
                {
                    key: 'translate',
                    value: function translate(out, a, v) {
                        var x = v.x, y = v.y, z = v.z, a00 = void 0, a01 = void 0, a02 = void 0, a03 = void 0, a10 = void 0, a11 = void 0, a12 = void 0, a13 = void 0, a20 = void 0, a21 = void 0, a22 = void 0, a23 = void 0;
                        if (a === out) {
                            out.m12 = a.m00 * x + a.m04 * y + a.m08 * z + a.m12;
                            out.m13 = a.m01 * x + a.m05 * y + a.m09 * z + a.m13;
                            out.m14 = a.m02 * x + a.m06 * y + a.m10 * z + a.m14;
                            out.m15 = a.m03 * x + a.m07 * y + a.m11 * z + a.m15;
                        } else {
                            a00 = a.m00;
                            a01 = a.m01;
                            a02 = a.m02;
                            a03 = a.m03;
                            a10 = a.m04;
                            a11 = a.m05;
                            a12 = a.m06;
                            a13 = a.m07;
                            a20 = a.m08;
                            a21 = a.m09;
                            a22 = a.m10;
                            a23 = a.m11;
                            out.m00 = a00;
                            out.m01 = a01;
                            out.m02 = a02;
                            out.m03 = a03;
                            out.m04 = a10;
                            out.m05 = a11;
                            out.m06 = a12;
                            out.m07 = a13;
                            out.m08 = a20;
                            out.m09 = a21;
                            out.m10 = a22;
                            out.m11 = a23;
                            out.m12 = a00 * x + a10 * y + a20 * z + a.m12;
                            out.m13 = a01 * x + a11 * y + a21 * z + a.m13;
                            out.m14 = a02 * x + a12 * y + a22 * z + a.m14;
                            out.m15 = a03 * x + a13 * y + a23 * z + a.m15;
                        }
                        return out;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, v) {
                        var x = v.x, y = v.y, z = v.z;
                        out.m00 = a.m00 * x;
                        out.m01 = a.m01 * x;
                        out.m02 = a.m02 * x;
                        out.m03 = a.m03 * x;
                        out.m04 = a.m04 * y;
                        out.m05 = a.m05 * y;
                        out.m06 = a.m06 * y;
                        out.m07 = a.m07 * y;
                        out.m08 = a.m08 * z;
                        out.m09 = a.m09 * z;
                        out.m10 = a.m10 * z;
                        out.m11 = a.m11 * z;
                        out.m12 = a.m12;
                        out.m13 = a.m13;
                        out.m14 = a.m14;
                        out.m15 = a.m15;
                        return out;
                    }
                },
                {
                    key: 'rotate',
                    value: function rotate(out, a, rad, axis) {
                        var x = axis.x, y = axis.y, z = axis.z;
                        var s = void 0, c = void 0, t = void 0, a00 = void 0, a01 = void 0, a02 = void 0, a03 = void 0, a10 = void 0, a11 = void 0, a12 = void 0, a13 = void 0, a20 = void 0, a21 = void 0, a22 = void 0, a23 = void 0, b00 = void 0, b01 = void 0, b02 = void 0, b10 = void 0, b11 = void 0, b12 = void 0, b20 = void 0, b21 = void 0, b22 = void 0;
                        var len = Math.sqrt(x * x + y * y + z * z);
                        if (Math.abs(len) < _utils.EPSILON) {
                            return null;
                        }
                        len = 1 / len;
                        x *= len;
                        y *= len;
                        z *= len;
                        s = Math.sin(rad);
                        c = Math.cos(rad);
                        t = 1 - c;
                        a00 = a.m00;
                        a01 = a.m01;
                        a02 = a.m02;
                        a03 = a.m03;
                        a10 = a.m04;
                        a11 = a.m05;
                        a12 = a.m06;
                        a13 = a.m07;
                        a20 = a.m08;
                        a21 = a.m09;
                        a22 = a.m10;
                        a23 = a.m11;
                        b00 = x * x * t + c;
                        b01 = y * x * t + z * s;
                        b02 = z * x * t - y * s;
                        b10 = x * y * t - z * s;
                        b11 = y * y * t + c;
                        b12 = z * y * t + x * s;
                        b20 = x * z * t + y * s;
                        b21 = y * z * t - x * s;
                        b22 = z * z * t + c;
                        out.m00 = a00 * b00 + a10 * b01 + a20 * b02;
                        out.m01 = a01 * b00 + a11 * b01 + a21 * b02;
                        out.m02 = a02 * b00 + a12 * b01 + a22 * b02;
                        out.m03 = a03 * b00 + a13 * b01 + a23 * b02;
                        out.m04 = a00 * b10 + a10 * b11 + a20 * b12;
                        out.m05 = a01 * b10 + a11 * b11 + a21 * b12;
                        out.m06 = a02 * b10 + a12 * b11 + a22 * b12;
                        out.m07 = a03 * b10 + a13 * b11 + a23 * b12;
                        out.m08 = a00 * b20 + a10 * b21 + a20 * b22;
                        out.m09 = a01 * b20 + a11 * b21 + a21 * b22;
                        out.m10 = a02 * b20 + a12 * b21 + a22 * b22;
                        out.m11 = a03 * b20 + a13 * b21 + a23 * b22;
                        if (a !== out) {
                            out.m12 = a.m12;
                            out.m13 = a.m13;
                            out.m14 = a.m14;
                            out.m15 = a.m15;
                        }
                        return out;
                    }
                },
                {
                    key: 'rotateX',
                    value: function rotateX(out, a, rad) {
                        var s = Math.sin(rad), c = Math.cos(rad), a10 = a.m04, a11 = a.m05, a12 = a.m06, a13 = a.m07, a20 = a.m08, a21 = a.m09, a22 = a.m10, a23 = a.m11;
                        if (a !== out) {
                            out.m00 = a.m00;
                            out.m01 = a.m01;
                            out.m02 = a.m02;
                            out.m03 = a.m03;
                            out.m12 = a.m12;
                            out.m13 = a.m13;
                            out.m14 = a.m14;
                            out.m15 = a.m15;
                        }
                        out.m04 = a10 * c + a20 * s;
                        out.m05 = a11 * c + a21 * s;
                        out.m06 = a12 * c + a22 * s;
                        out.m07 = a13 * c + a23 * s;
                        out.m08 = a20 * c - a10 * s;
                        out.m09 = a21 * c - a11 * s;
                        out.m10 = a22 * c - a12 * s;
                        out.m11 = a23 * c - a13 * s;
                        return out;
                    }
                },
                {
                    key: 'rotateY',
                    value: function rotateY(out, a, rad) {
                        var s = Math.sin(rad), c = Math.cos(rad), a00 = a.m00, a01 = a.m01, a02 = a.m02, a03 = a.m03, a20 = a.m08, a21 = a.m09, a22 = a.m10, a23 = a.m11;
                        if (a !== out) {
                            out.m04 = a.m04;
                            out.m05 = a.m05;
                            out.m06 = a.m06;
                            out.m07 = a.m07;
                            out.m12 = a.m12;
                            out.m13 = a.m13;
                            out.m14 = a.m14;
                            out.m15 = a.m15;
                        }
                        out.m00 = a00 * c - a20 * s;
                        out.m01 = a01 * c - a21 * s;
                        out.m02 = a02 * c - a22 * s;
                        out.m03 = a03 * c - a23 * s;
                        out.m08 = a00 * s + a20 * c;
                        out.m09 = a01 * s + a21 * c;
                        out.m10 = a02 * s + a22 * c;
                        out.m11 = a03 * s + a23 * c;
                        return out;
                    }
                },
                {
                    key: 'rotateZ',
                    value: function rotateZ(out, a, rad) {
                        var s = Math.sin(rad), c = Math.cos(rad), a00 = a.m00, a01 = a.m01, a02 = a.m02, a03 = a.m03, a10 = a.m04, a11 = a.m05, a12 = a.m06, a13 = a.m07;
                        if (a !== out) {
                            out.m08 = a.m08;
                            out.m09 = a.m09;
                            out.m10 = a.m10;
                            out.m11 = a.m11;
                            out.m12 = a.m12;
                            out.m13 = a.m13;
                            out.m14 = a.m14;
                            out.m15 = a.m15;
                        }
                        out.m00 = a00 * c + a10 * s;
                        out.m01 = a01 * c + a11 * s;
                        out.m02 = a02 * c + a12 * s;
                        out.m03 = a03 * c + a13 * s;
                        out.m04 = a10 * c - a00 * s;
                        out.m05 = a11 * c - a01 * s;
                        out.m06 = a12 * c - a02 * s;
                        out.m07 = a13 * c - a03 * s;
                        return out;
                    }
                },
                {
                    key: 'fromTranslation',
                    value: function fromTranslation(out, v) {
                        out.m00 = 1;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 0;
                        out.m04 = 0;
                        out.m05 = 1;
                        out.m06 = 0;
                        out.m07 = 0;
                        out.m08 = 0;
                        out.m09 = 0;
                        out.m10 = 1;
                        out.m11 = 0;
                        out.m12 = v.x;
                        out.m13 = v.y;
                        out.m14 = v.z;
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'fromScaling',
                    value: function fromScaling(out, v) {
                        out.m00 = v.x;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 0;
                        out.m04 = 0;
                        out.m05 = v.y;
                        out.m06 = 0;
                        out.m07 = 0;
                        out.m08 = 0;
                        out.m09 = 0;
                        out.m10 = v.z;
                        out.m11 = 0;
                        out.m12 = 0;
                        out.m13 = 0;
                        out.m14 = 0;
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'fromRotation',
                    value: function fromRotation(out, rad, axis) {
                        var x = axis.x, y = axis.y, z = axis.z;
                        var len = Math.sqrt(x * x + y * y + z * z);
                        var s = void 0, c = void 0, t = void 0;
                        if (Math.abs(len) < _utils.EPSILON) {
                            return null;
                        }
                        len = 1 / len;
                        x *= len;
                        y *= len;
                        z *= len;
                        s = Math.sin(rad);
                        c = Math.cos(rad);
                        t = 1 - c;
                        out.m00 = x * x * t + c;
                        out.m01 = y * x * t + z * s;
                        out.m02 = z * x * t - y * s;
                        out.m03 = 0;
                        out.m04 = x * y * t - z * s;
                        out.m05 = y * y * t + c;
                        out.m06 = z * y * t + x * s;
                        out.m07 = 0;
                        out.m08 = x * z * t + y * s;
                        out.m09 = y * z * t - x * s;
                        out.m10 = z * z * t + c;
                        out.m11 = 0;
                        out.m12 = 0;
                        out.m13 = 0;
                        out.m14 = 0;
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'fromXRotation',
                    value: function fromXRotation(out, rad) {
                        var s = Math.sin(rad), c = Math.cos(rad);
                        out.m00 = 1;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 0;
                        out.m04 = 0;
                        out.m05 = c;
                        out.m06 = s;
                        out.m07 = 0;
                        out.m08 = 0;
                        out.m09 = -s;
                        out.m10 = c;
                        out.m11 = 0;
                        out.m12 = 0;
                        out.m13 = 0;
                        out.m14 = 0;
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'fromYRotation',
                    value: function fromYRotation(out, rad) {
                        var s = Math.sin(rad), c = Math.cos(rad);
                        out.m00 = c;
                        out.m01 = 0;
                        out.m02 = -s;
                        out.m03 = 0;
                        out.m04 = 0;
                        out.m05 = 1;
                        out.m06 = 0;
                        out.m07 = 0;
                        out.m08 = s;
                        out.m09 = 0;
                        out.m10 = c;
                        out.m11 = 0;
                        out.m12 = 0;
                        out.m13 = 0;
                        out.m14 = 0;
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'fromZRotation',
                    value: function fromZRotation(out, rad) {
                        var s = Math.sin(rad), c = Math.cos(rad);
                        out.m00 = c;
                        out.m01 = s;
                        out.m02 = 0;
                        out.m03 = 0;
                        out.m04 = -s;
                        out.m05 = c;
                        out.m06 = 0;
                        out.m07 = 0;
                        out.m08 = 0;
                        out.m09 = 0;
                        out.m10 = 1;
                        out.m11 = 0;
                        out.m12 = 0;
                        out.m13 = 0;
                        out.m14 = 0;
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'fromRT',
                    value: function fromRT(out, q, v) {
                        var x = q.x, y = q.y, z = q.z, w = q.w;
                        var x2 = x + x;
                        var y2 = y + y;
                        var z2 = z + z;
                        var xx = x * x2;
                        var xy = x * y2;
                        var xz = x * z2;
                        var yy = y * y2;
                        var yz = y * z2;
                        var zz = z * z2;
                        var wx = w * x2;
                        var wy = w * y2;
                        var wz = w * z2;
                        out.m00 = 1 - (yy + zz);
                        out.m01 = xy + wz;
                        out.m02 = xz - wy;
                        out.m03 = 0;
                        out.m04 = xy - wz;
                        out.m05 = 1 - (xx + zz);
                        out.m06 = yz + wx;
                        out.m07 = 0;
                        out.m08 = xz + wy;
                        out.m09 = yz - wx;
                        out.m10 = 1 - (xx + yy);
                        out.m11 = 0;
                        out.m12 = v.x;
                        out.m13 = v.y;
                        out.m14 = v.z;
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'getTranslation',
                    value: function getTranslation(out, mat) {
                        out.x = mat.m12;
                        out.y = mat.m13;
                        out.z = mat.m14;
                        return out;
                    }
                },
                {
                    key: 'getScaling',
                    value: function getScaling(out, mat) {
                        var m11 = mat.m00, m12 = mat.m01, m13 = mat.m02, m21 = mat.m04, m22 = mat.m05, m23 = mat.m06, m31 = mat.m08, m32 = mat.m09, m33 = mat.m10;
                        out.x = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
                        out.y = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
                        out.z = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
                        return out;
                    }
                },
                {
                    key: 'getRotation',
                    value: function getRotation(out, mat) {
                        var trace = mat.m00 + mat.m05 + mat.m10;
                        var S = 0;
                        if (trace > 0) {
                            S = Math.sqrt(trace + 1) * 2;
                            out.w = 0.25 * S;
                            out.x = (mat.m06 - mat.m09) / S;
                            out.y = (mat.m08 - mat.m02) / S;
                            out.z = (mat.m01 - mat.m04) / S;
                        } else if (mat.m00 > mat.m05 & mat.m00 > mat.m10) {
                            S = Math.sqrt(1 + mat.m00 - mat.m05 - mat.m10) * 2;
                            out.w = (mat.m06 - mat.m09) / S;
                            out.x = 0.25 * S;
                            out.y = (mat.m01 + mat.m04) / S;
                            out.z = (mat.m08 + mat.m02) / S;
                        } else if (mat.m05 > mat.m10) {
                            S = Math.sqrt(1 + mat.m05 - mat.m00 - mat.m10) * 2;
                            out.w = (mat.m08 - mat.m02) / S;
                            out.x = (mat.m01 + mat.m04) / S;
                            out.y = 0.25 * S;
                            out.z = (mat.m06 + mat.m09) / S;
                        } else {
                            S = Math.sqrt(1 + mat.m10 - mat.m00 - mat.m05) * 2;
                            out.w = (mat.m01 - mat.m04) / S;
                            out.x = (mat.m08 + mat.m02) / S;
                            out.y = (mat.m06 + mat.m09) / S;
                            out.z = 0.25 * S;
                        }
                        return out;
                    }
                },
                {
                    key: 'fromRTS',
                    value: function fromRTS(out, q, v, s) {
                        var x = q.x, y = q.y, z = q.z, w = q.w;
                        var x2 = x + x;
                        var y2 = y + y;
                        var z2 = z + z;
                        var xx = x * x2;
                        var xy = x * y2;
                        var xz = x * z2;
                        var yy = y * y2;
                        var yz = y * z2;
                        var zz = z * z2;
                        var wx = w * x2;
                        var wy = w * y2;
                        var wz = w * z2;
                        var sx = s.x;
                        var sy = s.y;
                        var sz = s.z;
                        out.m00 = (1 - (yy + zz)) * sx;
                        out.m01 = (xy + wz) * sx;
                        out.m02 = (xz - wy) * sx;
                        out.m03 = 0;
                        out.m04 = (xy - wz) * sy;
                        out.m05 = (1 - (xx + zz)) * sy;
                        out.m06 = (yz + wx) * sy;
                        out.m07 = 0;
                        out.m08 = (xz + wy) * sz;
                        out.m09 = (yz - wx) * sz;
                        out.m10 = (1 - (xx + yy)) * sz;
                        out.m11 = 0;
                        out.m12 = v.x;
                        out.m13 = v.y;
                        out.m14 = v.z;
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'fromRTSOrigin',
                    value: function fromRTSOrigin(out, q, v, s, o) {
                        var x = q.x, y = q.y, z = q.z, w = q.w;
                        var x2 = x + x;
                        var y2 = y + y;
                        var z2 = z + z;
                        var xx = x * x2;
                        var xy = x * y2;
                        var xz = x * z2;
                        var yy = y * y2;
                        var yz = y * z2;
                        var zz = z * z2;
                        var wx = w * x2;
                        var wy = w * y2;
                        var wz = w * z2;
                        var sx = s.x;
                        var sy = s.y;
                        var sz = s.z;
                        var ox = o.x;
                        var oy = o.y;
                        var oz = o.z;
                        out.m00 = (1 - (yy + zz)) * sx;
                        out.m01 = (xy + wz) * sx;
                        out.m02 = (xz - wy) * sx;
                        out.m03 = 0;
                        out.m04 = (xy - wz) * sy;
                        out.m05 = (1 - (xx + zz)) * sy;
                        out.m06 = (yz + wx) * sy;
                        out.m07 = 0;
                        out.m08 = (xz + wy) * sz;
                        out.m09 = (yz - wx) * sz;
                        out.m10 = (1 - (xx + yy)) * sz;
                        out.m11 = 0;
                        out.m12 = v.x + ox - (out.m00 * ox + out.m04 * oy + out.m08 * oz);
                        out.m13 = v.y + oy - (out.m01 * ox + out.m05 * oy + out.m09 * oz);
                        out.m14 = v.z + oz - (out.m02 * ox + out.m06 * oy + out.m10 * oz);
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'fromQuat',
                    value: function fromQuat(out, q) {
                        var x = q.x, y = q.y, z = q.z, w = q.w;
                        var x2 = x + x;
                        var y2 = y + y;
                        var z2 = z + z;
                        var xx = x * x2;
                        var yx = y * x2;
                        var yy = y * y2;
                        var zx = z * x2;
                        var zy = z * y2;
                        var zz = z * z2;
                        var wx = w * x2;
                        var wy = w * y2;
                        var wz = w * z2;
                        out.m00 = 1 - yy - zz;
                        out.m01 = yx + wz;
                        out.m02 = zx - wy;
                        out.m03 = 0;
                        out.m04 = yx - wz;
                        out.m05 = 1 - xx - zz;
                        out.m06 = zy + wx;
                        out.m07 = 0;
                        out.m08 = zx + wy;
                        out.m09 = zy - wx;
                        out.m10 = 1 - xx - yy;
                        out.m11 = 0;
                        out.m12 = 0;
                        out.m13 = 0;
                        out.m14 = 0;
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'frustum',
                    value: function frustum(out, left, right, bottom, top, near, far) {
                        var rl = 1 / (right - left);
                        var tb = 1 / (top - bottom);
                        var nf = 1 / (near - far);
                        out.m00 = near * 2 * rl;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 0;
                        out.m04 = 0;
                        out.m05 = near * 2 * tb;
                        out.m06 = 0;
                        out.m07 = 0;
                        out.m08 = (right + left) * rl;
                        out.m09 = (top + bottom) * tb;
                        out.m10 = (far + near) * nf;
                        out.m11 = -1;
                        out.m12 = 0;
                        out.m13 = 0;
                        out.m14 = far * near * 2 * nf;
                        out.m15 = 0;
                        return out;
                    }
                },
                {
                    key: 'perspective',
                    value: function perspective(out, fovy, aspect, near, far) {
                        var f = 1 / Math.tan(fovy / 2);
                        var nf = 1 / (near - far);
                        out.m00 = f / aspect;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 0;
                        out.m04 = 0;
                        out.m05 = f;
                        out.m06 = 0;
                        out.m07 = 0;
                        out.m08 = 0;
                        out.m09 = 0;
                        out.m10 = (far + near) * nf;
                        out.m11 = -1;
                        out.m12 = 0;
                        out.m13 = 0;
                        out.m14 = 2 * far * near * nf;
                        out.m15 = 0;
                        return out;
                    }
                },
                {
                    key: 'perspectiveFromFieldOfView',
                    value: function perspectiveFromFieldOfView(out, fov, near, far) {
                        var upTan = Math.tan(fov.upDegrees * Math.PI / 180);
                        var downTan = Math.tan(fov.downDegrees * Math.PI / 180);
                        var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
                        var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
                        var xScale = 2 / (leftTan + rightTan);
                        var yScale = 2 / (upTan + downTan);
                        out.m00 = xScale;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 0;
                        out.m04 = 0;
                        out.m05 = yScale;
                        out.m06 = 0;
                        out.m07 = 0;
                        out.m08 = -((leftTan - rightTan) * xScale * 0.5);
                        out.m09 = (upTan - downTan) * yScale * 0.5;
                        out.m10 = far / (near - far);
                        out.m11 = -1;
                        out.m12 = 0;
                        out.m13 = 0;
                        out.m14 = far * near / (near - far);
                        out.m15 = 0;
                        return out;
                    }
                },
                {
                    key: 'ortho',
                    value: function ortho(out, left, right, bottom, top, near, far) {
                        var lr = 1 / (left - right);
                        var bt = 1 / (bottom - top);
                        var nf = 1 / (near - far);
                        out.m00 = -2 * lr;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 0;
                        out.m04 = 0;
                        out.m05 = -2 * bt;
                        out.m06 = 0;
                        out.m07 = 0;
                        out.m08 = 0;
                        out.m09 = 0;
                        out.m10 = 2 * nf;
                        out.m11 = 0;
                        out.m12 = (left + right) * lr;
                        out.m13 = (top + bottom) * bt;
                        out.m14 = (far + near) * nf;
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'lookAt',
                    value: function lookAt(out, eye, center, up) {
                        var x0 = void 0, x1 = void 0, x2 = void 0, y0 = void 0, y1 = void 0, y2 = void 0, z0 = void 0, z1 = void 0, z2 = void 0, len = void 0;
                        var eyex = eye.x;
                        var eyey = eye.y;
                        var eyez = eye.z;
                        var upx = up.x;
                        var upy = up.y;
                        var upz = up.z;
                        var centerx = center.x;
                        var centery = center.y;
                        var centerz = center.z;
                        z0 = eyex - centerx;
                        z1 = eyey - centery;
                        z2 = eyez - centerz;
                        len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
                        z0 *= len;
                        z1 *= len;
                        z2 *= len;
                        x0 = upy * z2 - upz * z1;
                        x1 = upz * z0 - upx * z2;
                        x2 = upx * z1 - upy * z0;
                        len = 1 / Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
                        x0 *= len;
                        x1 *= len;
                        x2 *= len;
                        y0 = z1 * x2 - z2 * x1;
                        y1 = z2 * x0 - z0 * x2;
                        y2 = z0 * x1 - z1 * x0;
                        out.m00 = x0;
                        out.m01 = y0;
                        out.m02 = z0;
                        out.m03 = 0;
                        out.m04 = x1;
                        out.m05 = y1;
                        out.m06 = z1;
                        out.m07 = 0;
                        out.m08 = x2;
                        out.m09 = y2;
                        out.m10 = z2;
                        out.m11 = 0;
                        out.m12 = -(x0 * eyex + x1 * eyey + x2 * eyez);
                        out.m13 = -(y0 * eyex + y1 * eyey + y2 * eyez);
                        out.m14 = -(z0 * eyex + z1 * eyey + z2 * eyez);
                        out.m15 = 1;
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        return 'mat4(' + a.m00 + ', ' + a.m01 + ', ' + a.m02 + ', ' + a.m03 + ', ' + a.m04 + ', ' + a.m05 + ', ' + a.m06 + ', ' + a.m07 + ', ' + a.m08 + ', ' + a.m09 + ', ' + a.m10 + ', ' + a.m11 + ', ' + a.m12 + ', ' + a.m13 + ', ' + a.m14 + ', ' + a.m15 + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, m) {
                        out[0] = m.m00;
                        out[1] = m.m01;
                        out[2] = m.m02;
                        out[3] = m.m03;
                        out[4] = m.m04;
                        out[5] = m.m05;
                        out[6] = m.m06;
                        out[7] = m.m07;
                        out[8] = m.m08;
                        out[9] = m.m09;
                        out[10] = m.m10;
                        out[11] = m.m11;
                        out[12] = m.m12;
                        out[13] = m.m13;
                        out[14] = m.m14;
                        out[15] = m.m15;
                        return out;
                    }
                },
                {
                    key: 'frob',
                    value: function frob(a) {
                        return Math.sqrt(Math.pow(a.m00, 2) + Math.pow(a.m01, 2) + Math.pow(a.m02, 2) + Math.pow(a.m03, 2) + Math.pow(a.m04, 2) + Math.pow(a.m05, 2) + Math.pow(a.m06, 2) + Math.pow(a.m07, 2) + Math.pow(a.m08, 2) + Math.pow(a.m09, 2) + Math.pow(a.m10, 2) + Math.pow(a.m11, 2) + Math.pow(a.m12, 2) + Math.pow(a.m13, 2) + Math.pow(a.m14, 2) + Math.pow(a.m15, 2));
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        out.m00 = a.m00 + b.m00;
                        out.m01 = a.m01 + b.m01;
                        out.m02 = a.m02 + b.m02;
                        out.m03 = a.m03 + b.m03;
                        out.m04 = a.m04 + b.m04;
                        out.m05 = a.m05 + b.m05;
                        out.m06 = a.m06 + b.m06;
                        out.m07 = a.m07 + b.m07;
                        out.m08 = a.m08 + b.m08;
                        out.m09 = a.m09 + b.m09;
                        out.m10 = a.m10 + b.m10;
                        out.m11 = a.m11 + b.m11;
                        out.m12 = a.m12 + b.m12;
                        out.m13 = a.m13 + b.m13;
                        out.m14 = a.m14 + b.m14;
                        out.m15 = a.m15 + b.m15;
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        out.m00 = a.m00 - b.m00;
                        out.m01 = a.m01 - b.m01;
                        out.m02 = a.m02 - b.m02;
                        out.m03 = a.m03 - b.m03;
                        out.m04 = a.m04 - b.m04;
                        out.m05 = a.m05 - b.m05;
                        out.m06 = a.m06 - b.m06;
                        out.m07 = a.m07 - b.m07;
                        out.m08 = a.m08 - b.m08;
                        out.m09 = a.m09 - b.m09;
                        out.m10 = a.m10 - b.m10;
                        out.m11 = a.m11 - b.m11;
                        out.m12 = a.m12 - b.m12;
                        out.m13 = a.m13 - b.m13;
                        out.m14 = a.m14 - b.m14;
                        out.m15 = a.m15 - b.m15;
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return mat4.subtract(out, a, b);
                    }
                },
                {
                    key: 'multiplyScalar',
                    value: function multiplyScalar(out, a, b) {
                        out.m00 = a.m00 * b;
                        out.m01 = a.m01 * b;
                        out.m02 = a.m02 * b;
                        out.m03 = a.m03 * b;
                        out.m04 = a.m04 * b;
                        out.m05 = a.m05 * b;
                        out.m06 = a.m06 * b;
                        out.m07 = a.m07 * b;
                        out.m08 = a.m08 * b;
                        out.m09 = a.m09 * b;
                        out.m10 = a.m10 * b;
                        out.m11 = a.m11 * b;
                        out.m12 = a.m12 * b;
                        out.m13 = a.m13 * b;
                        out.m14 = a.m14 * b;
                        out.m15 = a.m15 * b;
                        return out;
                    }
                },
                {
                    key: 'multiplyScalarAndAdd',
                    value: function multiplyScalarAndAdd(out, a, b, scale) {
                        out.m00 = a.m00 + b.m00 * scale;
                        out.m01 = a.m01 + b.m01 * scale;
                        out.m02 = a.m02 + b.m02 * scale;
                        out.m03 = a.m03 + b.m03 * scale;
                        out.m04 = a.m04 + b.m04 * scale;
                        out.m05 = a.m05 + b.m05 * scale;
                        out.m06 = a.m06 + b.m06 * scale;
                        out.m07 = a.m07 + b.m07 * scale;
                        out.m08 = a.m08 + b.m08 * scale;
                        out.m09 = a.m09 + b.m09 * scale;
                        out.m10 = a.m10 + b.m10 * scale;
                        out.m11 = a.m11 + b.m11 * scale;
                        out.m12 = a.m12 + b.m12 * scale;
                        out.m13 = a.m13 + b.m13 * scale;
                        out.m14 = a.m14 + b.m14 * scale;
                        out.m15 = a.m15 + b.m15 * scale;
                        return out;
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08 && a.m09 === b.m09 && a.m10 === b.m10 && a.m11 === b.m11 && a.m12 === b.m12 && a.m13 === b.m13 && a.m14 === b.m14 && a.m15 === b.m15;
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, a4 = a.m04, a5 = a.m05, a6 = a.m06, a7 = a.m07, a8 = a.m08, a9 = a.m09, a10 = a.m10, a11 = a.m11, a12 = a.m12, a13 = a.m13, a14 = a.m14, a15 = a.m15;
                        var b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03, b4 = b.m04, b5 = b.m05, b6 = b.m06, b7 = b.m07, b8 = b.m08, b9 = b.m09, b10 = b.m10, b11 = b.m11, b12 = b.m12, b13 = b.m13, b14 = b.m14, b15 = b.m15;
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _utils.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _utils.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _utils.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _utils.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _utils.EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _utils.EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _utils.EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _utils.EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _utils.EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _utils.EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _utils.EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _utils.EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _utils.EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15));
                    }
                }
            ]);
            return mat4;
        }();
        exports.default = mat4;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,