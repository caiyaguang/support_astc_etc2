(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/SwanSubContextView.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Component = require('./CCComponent');
        var SwanSubContextView = void 0;
        var isBaiduGame = cc.sys.platform === cc.sys.BAIDU_GAME;
        if (!CC_EDITOR && !isBaiduGame) {
            SwanSubContextView = cc.Class({
                name: 'cc.SwanSubContextView',
                extends: Component
            });
        } else {
            SwanSubContextView = cc.Class({
                name: 'cc.SwanSubContextView',
                extends: Component,
                editor: CC_EDITOR && {
                    menu: 'i18n:MAIN_MENU.component.others/SwanSubContextView',
                    help: 'i18n:COMPONENT.help_url.swan_subcontext_view'
                },
                properties: {
                    _fps: 60,
                    fps: {
                        get: function get() {
                            return this._fps;
                        },
                        set: function set(value) {
                            if (this._fps === value) {
                                return;
                            }
                            this._fps = value;
                            this._updateInterval = 1 / value;
                            this._updateSubContextFrameRate();
                        },
                        tooltip: CC_DEV && 'i18n:COMPONENT.swan_subcontext_view.fps'
                    }
                },
                ctor: function ctor() {
                    this._sprite = null;
                    this._tex = new cc.Texture2D();
                    this._context = null;
                    this._updatedTime = performance.now();
                    this._updateInterval = 0;
                },
                onLoad: function onLoad() {
                    if (swan.getOpenDataContext) {
                        this._updateInterval = 1000 / this._fps;
                        this._context = swan.getOpenDataContext();
                        var sharedCanvas = this._context.canvas;
                        if (sharedCanvas) {
                            sharedCanvas.width = this.node.width;
                            sharedCanvas.height = this.node.height;
                        }
                        this._tex.setPremultiplyAlpha(true);
                        this._tex.initWithElement(sharedCanvas);
                        this._sprite = this.node.getComponent(cc.Sprite);
                        if (!this._sprite) {
                            this._sprite = this.node.addComponent(cc.Sprite);
                            this._sprite.srcBlendFactor = cc.macro.BlendFactor.ONE;
                        }
                        this._sprite.spriteFrame = new cc.SpriteFrame(this._tex);
                    } else {
                        this.enabled = false;
                    }
                },
                onEnable: function onEnable() {
                    this._runSubContextMainLoop();
                    this._registerNodeEvent();
                    this._updateSubContextFrameRate();
                    this.updateSubContextViewport();
                },
                onDisable: function onDisable() {
                    this._unregisterNodeEvent();
                    this._stopSubContextMainLoop();
                },
                update: function update(dt) {
                    var calledUpdateMannually = dt === undefined;
                    if (calledUpdateMannually) {
                        this._context && this._context.postMessage({
                            fromEngine: true,
                            event: 'step'
                        });
                        this._updateSubContextTexture();
                        return;
                    }
                    var now = performance.now();
                    var deltaTime = now - this._updatedTime;
                    if (deltaTime >= this._updateInterval) {
                        this._updatedTime += this._updateInterval;
                        this._updateSubContextTexture();
                    }
                },
                _updateSubContextTexture: function _updateSubContextTexture() {
                    if (!this._tex || !this._context) {
                        return;
                    }
                    this._tex.initWithElement(this._context.canvas);
                    this._sprite._activateMaterial();
                },
                updateSubContextViewport: function updateSubContextViewport() {
                    if (this._context) {
                        var box = this.node.getBoundingBoxToWorld();
                        var sx = cc.view._scaleX;
                        var sy = cc.view._scaleY;
                        this._context.postMessage({
                            fromEngine: true,
                            event: 'viewport',
                            x: box.x * sx + cc.view._viewportRect.x,
                            y: box.y * sy + cc.view._viewportRect.y,
                            width: box.width * sx,
                            height: box.height * sy
                        });
                    }
                },
                _registerNodeEvent: function _registerNodeEvent() {
                    this.node.on('position-changed', this.updateSubContextViewport, this);
                    this.node.on('scale-changed', this.updateSubContextViewport, this);
                    this.node.on('size-changed', this.updateSubContextViewport, this);
                },
                _unregisterNodeEvent: function _unregisterNodeEvent() {
                    this.node.off('position-changed', this.updateSubContextViewport, this);
                    this.node.off('scale-changed', this.updateSubContextViewport, this);
                    this.node.off('size-changed', this.updateSubContextViewport, this);
                },
                _runSubContextMainLoop: function _runSubContextMainLoop() {
                    if (this._context) {
                        this._context.postMessage({
                            fromEngine: true,
                            event: 'mainLoop',
                            value: true
                        });
                    }
                },
                _stopSubContextMainLoop: function _stopSubContextMainLoop() {
                    if (this._context) {
                        this._context.postMessage({
                            fromEngine: true,
                            event: 'mainLoop',
                            value: false
                        });
                    }
                },
                _updateSubContextFrameRate: function _updateSubContextFrameRate() {
                    if (this._context) {
                        this._context.postMessage({
                            fromEngine: true,
                            event: 'frameRate',
                            value: this._fps
                        });
                    }
                }
            });
        }
        cc.SwanSubContextView = module.exports = SwanSubContextView;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,