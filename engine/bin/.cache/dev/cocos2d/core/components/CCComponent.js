(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCComponent.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var CCObject = require('../platform/CCObject');
        var js = require('../platform/js');
        var idGenerater = new (require('../platform/id-generater'))('Comp');
        var IsOnEnableCalled = CCObject.Flags.IsOnEnableCalled;
        var IsOnLoadCalled = CCObject.Flags.IsOnLoadCalled;
        var Component = cc.Class({
            name: 'cc.Component',
            extends: CCObject,
            ctor: CC_EDITOR ? function () {
                if (window._Scene && _Scene.AssetsWatcher) {
                    _Scene.AssetsWatcher.initComponent(this);
                }
                this._id = Editor.Utils.UuidUtils.uuid();
                this.__eventTargets = [];
            } : function () {
                this._id = idGenerater.getNewId();
                this.__eventTargets = [];
            },
            properties: {
                node: {
                    default: null,
                    visible: false
                },
                name: {
                    get: function get() {
                        if (this._name) {
                            return this._name;
                        }
                        var className = cc.js.getClassName(this);
                        var trimLeft = className.lastIndexOf('.');
                        if (trimLeft >= 0) {
                            className = className.slice(trimLeft + 1);
                        }
                        return this.node.name + '<' + className + '>';
                    },
                    set: function set(value) {
                        this._name = value;
                    },
                    visible: false
                },
                uuid: {
                    get: function get() {
                        return this._id;
                    },
                    visible: false
                },
                __scriptAsset: CC_EDITOR && {
                    get: function get() {
                    },
                    displayName: 'Script',
                    type: cc._Script,
                    tooltip: CC_DEV && 'i18n:INSPECTOR.component.script'
                },
                _enabled: true,
                enabled: {
                    get: function get() {
                        return this._enabled;
                    },
                    set: function set(value) {
                        if (this._enabled !== value) {
                            this._enabled = value;
                            if (this.node._activeInHierarchy) {
                                var compScheduler = cc.director._compScheduler;
                                if (value) {
                                    compScheduler.enableComp(this);
                                } else {
                                    compScheduler.disableComp(this);
                                }
                            }
                        }
                    },
                    visible: false,
                    animatable: true
                },
                enabledInHierarchy: {
                    get: function get() {
                        return this._enabled && this.node._activeInHierarchy;
                    },
                    visible: false
                },
                _isOnLoadCalled: {
                    get: function get() {
                        return this._objFlags & IsOnLoadCalled;
                    }
                }
            },
            update: null,
            lateUpdate: null,
            __preload: null,
            onLoad: null,
            start: null,
            onEnable: null,
            onDisable: null,
            onDestroy: null,
            onFocusInEditor: null,
            onLostFocusInEditor: null,
            resetInEditor: null,
            addComponent: function addComponent(typeOrClassName) {
                return this.node.addComponent(typeOrClassName);
            },
            getComponent: function getComponent(typeOrClassName) {
                return this.node.getComponent(typeOrClassName);
            },
            getComponents: function getComponents(typeOrClassName) {
                return this.node.getComponents(typeOrClassName);
            },
            getComponentInChildren: function getComponentInChildren(typeOrClassName) {
                return this.node.getComponentInChildren(typeOrClassName);
            },
            getComponentsInChildren: function getComponentsInChildren(typeOrClassName) {
                return this.node.getComponentsInChildren(typeOrClassName);
            },
            _getLocalBounds: null,
            onRestore: null,
            destroy: function destroy() {
                if (CC_EDITOR) {
                    var depend = this.node._getDependComponent(this);
                    if (depend) {
                        return cc.errorID(3626, cc.js.getClassName(this), cc.js.getClassName(depend));
                    }
                }
                if (this._super()) {
                    if (this._enabled && this.node._activeInHierarchy) {
                        cc.director._compScheduler.disableComp(this);
                    }
                }
            },
            _onPreDestroy: function _onPreDestroy() {
                this.unscheduleAllCallbacks();
                var eventTargets = this.__eventTargets;
                for (var i = 0, l = eventTargets.length; i < l; ++i) {
                    var target = eventTargets[i];
                    target && target.targetOff(this);
                }
                eventTargets.length = 0;
                if (CC_EDITOR && !CC_TEST) {
                    _Scene.AssetsWatcher.stop(this);
                }
                cc.director._nodeActivator.destroyComp(this);
                this.node._removeComponent(this);
            },
            _instantiate: function _instantiate(cloned) {
                if (!cloned) {
                    cloned = cc.instantiate._clone(this, this);
                }
                cloned.node = null;
                return cloned;
            },
            schedule: function schedule(callback, interval, repeat, delay) {
                cc.assertID(callback, 1619);
                cc.assertID(interval >= 0, 1620);
                interval = interval || 0;
                repeat = isNaN(repeat) ? cc.macro.REPEAT_FOREVER : repeat;
                delay = delay || 0;
                var scheduler = cc.director.getScheduler();
                var paused = scheduler.isTargetPaused(this);
                scheduler.schedule(callback, this, interval, repeat, delay, paused);
            },
            scheduleOnce: function scheduleOnce(callback, delay) {
                this.schedule(callback, 0, 0, delay);
            },
            unschedule: function unschedule(callback_fn) {
                if (!callback_fn)
                    return;
                cc.director.getScheduler().unschedule(callback_fn, this);
            },
            unscheduleAllCallbacks: function unscheduleAllCallbacks() {
                cc.director.getScheduler().unscheduleAllForTarget(this);
            }
        });
        Component._requireComponent = null;
        Component._executionOrder = 0;
        if (CC_EDITOR || CC_TEST) {
            Component._executeInEditMode = false;
            Component._playOnFocus = false;
            Component._disallowMultiple = null;
            Component._help = '';
            js.value(Component, '_inspector', '', true);
            js.value(Component, '_icon', '', true);
            cc._componentMenuItems = [];
            Component._addMenuItem = function (cls, path, priority) {
                cc._componentMenuItems.push({
                    component: cls,
                    menuPath: path,
                    priority: priority
                });
            };
        }
        js.value(Component, '_registerEditorProps', function (cls, props) {
            var reqComp = props.requireComponent;
            if (reqComp) {
                cls._requireComponent = reqComp;
            }
            var order = props.executionOrder;
            if (order && typeof order === 'number') {
                cls._executionOrder = order;
            }
            if (CC_EDITOR || CC_TEST) {
                var name = cc.js.getClassName(cls);
                for (var key in props) {
                    var val = props[key];
                    switch (key) {
                    case 'executeInEditMode':
                        cls._executeInEditMode = !!val;
                        break;
                    case 'playOnFocus':
                        if (val) {
                            var willExecuteInEditMode = 'executeInEditMode' in props ? props.executeInEditMode : cls._executeInEditMode;
                            if (willExecuteInEditMode) {
                                cls._playOnFocus = true;
                            } else {
                                cc.warnID(3601, name);
                            }
                        }
                        break;
                    case 'inspector':
                        js.value(cls, '_inspector', val, true);
                        break;
                    case 'icon':
                        js.value(cls, '_icon', val, true);
                        break;
                    case 'menu':
                        Component._addMenuItem(cls, val, props.menuPriority);
                        break;
                    case 'disallowMultiple':
                        cls._disallowMultiple = cls;
                        break;
                    case 'requireComponent':
                    case 'executionOrder':
                        break;
                    case 'help':
                        cls._help = val;
                        break;
                    default:
                        cc.warnID(3602, key, name);
                        break;
                    }
                }
            }
        });
        Component.prototype.__scriptUuid = '';
        cc.Component = module.exports = Component;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDQ29tcG9uZW50LmpzIiwiL1VzZXJzL3p6ZjIwMTkvRGVza3RvcC9kZXZlbG9wbWVudC9zdXBwb3J0X2FzdGMvZW5naW5lL2NvY29zMmQvY29yZS9jb21wb25lbnRzL0NDQ29tcG9uZW50LmpzIl0sIm5hbWVzIjpbIkNDT2JqZWN0IiwicmVxdWlyZSIsImpzIiwiaWRHZW5lcmF0ZXIiLCJJc09uRW5hYmxlQ2FsbGVkIiwiRmxhZ3MiLCJJc09uTG9hZENhbGxlZCIsIkNvbXBvbmVudCIsImNjIiwiQ2xhc3MiLCJuYW1lIiwiZXh0ZW5kcyIsImN0b3IiLCJDQ19FRElUT1IiLCJ3aW5kb3ciLCJfU2NlbmUiLCJBc3NldHNXYXRjaGVyIiwiaW5pdENvbXBvbmVudCIsIl9pZCIsIkVkaXRvciIsIlV0aWxzIiwiVXVpZFV0aWxzIiwidXVpZCIsIl9fZXZlbnRUYXJnZXRzIiwiZ2V0TmV3SWQiLCJwcm9wZXJ0aWVzIiwibm9kZSIsImRlZmF1bHQiLCJ2aXNpYmxlIiwiZ2V0IiwiX25hbWUiLCJjbGFzc05hbWUiLCJnZXRDbGFzc05hbWUiLCJ0cmltTGVmdCIsImxhc3RJbmRleE9mIiwic2xpY2UiLCJzZXQiLCJ2YWx1ZSIsIl9fc2NyaXB0QXNzZXQiLCJkaXNwbGF5TmFtZSIsInR5cGUiLCJfU2NyaXB0IiwidG9vbHRpcCIsIkNDX0RFViIsIl9lbmFibGVkIiwiZW5hYmxlZCIsIl9hY3RpdmVJbkhpZXJhcmNoeSIsImNvbXBTY2hlZHVsZXIiLCJkaXJlY3RvciIsIl9jb21wU2NoZWR1bGVyIiwiZW5hYmxlQ29tcCIsImRpc2FibGVDb21wIiwiYW5pbWF0YWJsZSIsImVuYWJsZWRJbkhpZXJhcmNoeSIsIl9pc09uTG9hZENhbGxlZCIsIl9vYmpGbGFncyIsInVwZGF0ZSIsImxhdGVVcGRhdGUiLCJfX3ByZWxvYWQiLCJvbkxvYWQiLCJzdGFydCIsIm9uRW5hYmxlIiwib25EaXNhYmxlIiwib25EZXN0cm95Iiwib25Gb2N1c0luRWRpdG9yIiwib25Mb3N0Rm9jdXNJbkVkaXRvciIsInJlc2V0SW5FZGl0b3IiLCJhZGRDb21wb25lbnQiLCJ0eXBlT3JDbGFzc05hbWUiLCJnZXRDb21wb25lbnQiLCJnZXRDb21wb25lbnRzIiwiZ2V0Q29tcG9uZW50SW5DaGlsZHJlbiIsImdldENvbXBvbmVudHNJbkNoaWxkcmVuIiwiX2dldExvY2FsQm91bmRzIiwib25SZXN0b3JlIiwiZGVzdHJveSIsImRlcGVuZCIsIl9nZXREZXBlbmRDb21wb25lbnQiLCJlcnJvcklEIiwiX3N1cGVyIiwiX29uUHJlRGVzdHJveSIsInVuc2NoZWR1bGVBbGxDYWxsYmFja3MiLCJldmVudFRhcmdldHMiLCJpIiwibCIsImxlbmd0aCIsInRhcmdldCIsInRhcmdldE9mZiIsIkNDX1RFU1QiLCJzdG9wIiwiX25vZGVBY3RpdmF0b3IiLCJkZXN0cm95Q29tcCIsIl9yZW1vdmVDb21wb25lbnQiLCJfaW5zdGFudGlhdGUiLCJjbG9uZWQiLCJpbnN0YW50aWF0ZSIsIl9jbG9uZSIsInNjaGVkdWxlIiwiY2FsbGJhY2siLCJpbnRlcnZhbCIsInJlcGVhdCIsImRlbGF5IiwiYXNzZXJ0SUQiLCJpc05hTiIsIm1hY3JvIiwiUkVQRUFUX0ZPUkVWRVIiLCJzY2hlZHVsZXIiLCJnZXRTY2hlZHVsZXIiLCJwYXVzZWQiLCJpc1RhcmdldFBhdXNlZCIsInNjaGVkdWxlT25jZSIsInVuc2NoZWR1bGUiLCJjYWxsYmFja19mbiIsInVuc2NoZWR1bGVBbGxGb3JUYXJnZXQiLCJfcmVxdWlyZUNvbXBvbmVudCIsIl9leGVjdXRpb25PcmRlciIsIl9leGVjdXRlSW5FZGl0TW9kZSIsIl9wbGF5T25Gb2N1cyIsIl9kaXNhbGxvd011bHRpcGxlIiwiX2hlbHAiLCJfY29tcG9uZW50TWVudUl0ZW1zIiwiX2FkZE1lbnVJdGVtIiwiY2xzIiwicGF0aCIsInByaW9yaXR5IiwicHVzaCIsImNvbXBvbmVudCIsIm1lbnVQYXRoIiwicHJvcHMiLCJyZXFDb21wIiwicmVxdWlyZUNvbXBvbmVudCIsIm9yZGVyIiwiZXhlY3V0aW9uT3JkZXIiLCJrZXkiLCJ2YWwiLCJ3aWxsRXhlY3V0ZUluRWRpdE1vZGUiLCJleGVjdXRlSW5FZGl0TW9kZSIsIndhcm5JRCIsIm1lbnVQcmlvcml0eSIsInByb3RvdHlwZSIsIl9fc2NyaXB0VXVpZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQTBCQSxJQUFJQSxRQUFBQSxHQUFXQyxPQUFBQSxDQUFRLHNCQUFSQSxDQUFmO1FBQ0EsSUFBSUMsRUFBQUEsR0FBS0QsT0FBQUEsQ0FBUSxnQkFBUkEsQ0FBVDtRQUNBLElBQUlFLFdBQUFBLEdBQWMsSUFBS0YsQ0FBQUEsT0FBQUEsQ0FBUSwwQkFBUkEsRUFBTCxDQUEwQyxNQUExQyxDQUFsQjtRQUVBLElBQUlHLGdCQUFBQSxHQUFtQkosUUFBQUEsQ0FBU0ssS0FBVEwsQ0FBZUksZ0JBQXRDO1FBQ0EsSUFBSUUsY0FBQUEsR0FBaUJOLFFBQUFBLENBQVNLLEtBQVRMLENBQWVNLGNBQXBDO1FBZ0JBLElBQUlDLFNBQUFBLEdBQVlDLEVBQUFBLENBQUdDLEtBQUhELENBQVM7QUFBQSxZQUNyQkUsSUFBQUEsRUFBTSxjQURlO0FBQUEsWUFFckJDLE9BQUFBLEVBQVNYLFFBRlk7QUFBQSxZQUlyQlksSUFBQUEsRUFBTUMsU0FBQUEsR0FBWSxZQUFZO0FBQUEsZ0JBQzFCLElBQUlDLE1BQUFBLENBQU9DLE1BQVBELElBQWlCQyxNQUFBQSxDQUFPQyxhQUE1QixFQUEyQztBQUFBLG9CQUN2Q0QsTUFBQUEsQ0FBT0MsYUFBUEQsQ0FBcUJFLGFBQXJCRixDQUFtQyxJQUFuQ0EsRUFEdUM7QUFBQSxpQkFEakI7QUFBQSxnQkFJMUIsS0FBS0csR0FBTCxHQUFXQyxNQUFBQSxDQUFPQyxLQUFQRCxDQUFhRSxTQUFiRixDQUF1QkcsSUFBdkJILEVBQVgsQ0FKMEI7QUFBQSxnQkFZMUIsS0FBS0ksY0FBTCxHQUFz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cUksTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJ0SSxTQUFoQ0MiLCJmaWxlIjoiQ0NDb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBDQ09iamVjdCA9IHJlcXVpcmUoJy4uL3BsYXRmb3JtL0NDT2JqZWN0Jyk7XG52YXIganMgPSByZXF1aXJlKCcuLi9wbGF0Zm9ybS9qcycpO1xudmFyIGlkR2VuZXJhdGVyID0gbmV3IChyZXF1aXJlKCcuLi9wbGF0Zm9ybS9pZC1nZW5lcmF0ZXInKSkoJ0NvbXAnKTtcblxudmFyIElzT25FbmFibGVDYWxsZWQgPSBDQ09iamVjdC5GbGFncy5Jc09uRW5hYmxlQ2FsbGVkO1xudmFyIElzT25Mb2FkQ2FsbGVkID0gQ0NPYmplY3QuRmxhZ3MuSXNPbkxvYWRDYWxsZWQ7XG5cbi8qKlxuICogISNlblxuICogQmFzZSBjbGFzcyBmb3IgZXZlcnl0aGluZyBhdHRhY2hlZCB0byBOb2RlKEVudGl0eSkuPGJyLz5cbiAqIDxici8+XG4gKiBOT1RFOiBOb3QgYWxsb3dlZCB0byB1c2UgY29uc3RydWN0aW9uIHBhcmFtZXRlcnMgZm9yIENvbXBvbmVudCdzIHN1YmNsYXNzZXMsXG4gKiAgICAgICBiZWNhdXNlIENvbXBvbmVudCBpcyBjcmVhdGVkIGJ5IHRoZSBlbmdpbmUuXG4gKiAhI3poXG4gKiDmiYDmnInpmYTliqDliLDoioLngrnnmoTln7rnsbvjgII8YnIvPlxuICogPGJyLz5cbiAqIOazqOaEj++8muS4jeWFgeiuuOS9v+eUqOe7hOS7tueahOWtkOexu+aehOmAoOWPguaVsO+8jOWboOS4uue7hOS7tuaYr+eUseW8leaTjuWIm+W7uueahOOAglxuICpcbiAqIEBjbGFzcyBDb21wb25lbnRcbiAqIEBleHRlbmRzIE9iamVjdFxuICovXG52YXIgQ29tcG9uZW50ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5Db21wb25lbnQnLFxuICAgIGV4dGVuZHM6IENDT2JqZWN0LFxuXG4gICAgY3RvcjogQ0NfRURJVE9SID8gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAod2luZG93Ll9TY2VuZSAmJiBfU2NlbmUuQXNzZXRzV2F0Y2hlcikge1xuICAgICAgICAgICAgX1NjZW5lLkFzc2V0c1dhdGNoZXIuaW5pdENvbXBvbmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pZCA9IEVkaXRvci5VdGlscy5VdWlkVXRpbHMudXVpZCgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWdpc3RlciBhbGwgcmVsYXRlZCBFdmVudFRhcmdldHMsXG4gICAgICAgICAqIGFsbCBldmVudCBjYWxsYmFja3Mgd2lsbCBiZSByZW1vdmVkIGluIF9vblByZURlc3Ryb3lcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheX0gX19ldmVudFRhcmdldHNcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX19ldmVudFRhcmdldHMgPSBbXTtcbiAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9pZCA9IGlkR2VuZXJhdGVyLmdldE5ld0lkKCk7XG5cbiAgICAgICAgdGhpcy5fX2V2ZW50VGFyZ2V0cyA9IFtdO1xuICAgIH0sXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSBub2RlIHRoaXMgY29tcG9uZW50IGlzIGF0dGFjaGVkIHRvLiBBIGNvbXBvbmVudCBpcyBhbHdheXMgYXR0YWNoZWQgdG8gYSBub2RlLlxuICAgICAgICAgKiAhI3poIOivpee7hOS7tuiiq+mZhOWKoOWIsOeahOiKgueCueOAgue7hOS7tuaAu+S8mumZhOWKoOWIsOS4gOS4quiKgueCueOAglxuICAgICAgICAgKiBAcHJvcGVydHkgbm9kZVxuICAgICAgICAgKiBAdHlwZSB7Tm9kZX1cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogY2MubG9nKGNvbXAubm9kZSk7XG4gICAgICAgICAqL1xuICAgICAgICBub2RlOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBnZXQgKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gY2MuanMuZ2V0Q2xhc3NOYW1lKHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciB0cmltTGVmdCA9IGNsYXNzTmFtZS5sYXN0SW5kZXhPZignLicpO1xuICAgICAgICAgICAgICAgIGlmICh0cmltTGVmdCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5zbGljZSh0cmltTGVmdCArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlLm5hbWUgKyAnPCcgKyBjbGFzc05hbWUgKyAnPic7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFRoZSB1dWlkIGZvciBlZGl0b3IuXG4gICAgICAgICAqICEjemgg57uE5Lu255qEIHV1aWTvvIznlKjkuo7nvJbovpHlmajjgIJcbiAgICAgICAgICogQHByb3BlcnR5IHV1aWRcbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIGNjLmxvZyhjb21wLnV1aWQpO1xuICAgICAgICAgKi9cbiAgICAgICAgdXVpZDoge1xuICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICBfX3NjcmlwdEFzc2V0OiBDQ19FRElUT1IgJiYge1xuICAgICAgICAgICAgZ2V0ICgpIHt9LFxuICAgICAgICAgICAgLy9zZXQgKHZhbHVlKSB7XG4gICAgICAgICAgICAvLyAgICBpZiAodGhpcy5fX3NjcmlwdFV1aWQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgaWYgKHZhbHVlICYmIEVkaXRvci5VdGlscy5VdWlkVXRpbHMuaXNVdWlkKHZhbHVlLl91dWlkKSkge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICB2YXIgY2xhc3NJZCA9IEVkaXRvci5VdGlscy5VdWlkVXRpbHMuY29tcHJlc3NVdWlkKHZhbHVlLl91dWlkKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgdmFyIE5ld0NvbXAgPSBjYy5qcy5fZ2V0Q2xhc3NCeUlkKGNsYXNzSWQpO1xuICAgICAgICAgICAgLy8gICAgICAgICAgICBpZiAoanMuaXNDaGlsZENsYXNzT2YoTmV3Q29tcCwgY2MuQ29tcG9uZW50KSkge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgY2Mud2FybignU29ycnksIHJlcGxhY2luZyBjb21wb25lbnQgc2NyaXB0IGlzIG5vdCB5ZXQgaW1wbGVtZW50ZWQuJyk7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAvL0VkaXRvci5JcGMuc2VuZFRvV2lucygncmVsb2FkOndpbmRvdy1zY3JpcHRzJywgRWRpdG9yLl9TYW5kYm94LmNvbXBpbGVkKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIGNjLmVycm9yKCdDYW4gbm90IGZpbmQgYSBjb21wb25lbnQgaW4gdGhlIHNjcmlwdCB3aGljaCB1dWlkIGlzIFwiJXNcIi4nLCB2YWx1ZS5fdXVpZCk7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGNjLmVycm9yKCdJbnZhbGlkIFNjcmlwdCcpO1xuICAgICAgICAgICAgLy8gICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgIH1cbiAgICAgICAgICAgIC8vfSxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnU2NyaXB0JyxcbiAgICAgICAgICAgIHR5cGU6IGNjLl9TY3JpcHQsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46SU5TUEVDVE9SLmNvbXBvbmVudC5zY3JpcHQnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwcm9wZXJ0eSBfZW5hYmxlZFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIF9lbmFibGVkOiB0cnVlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIGluZGljYXRlcyB3aGV0aGVyIHRoaXMgY29tcG9uZW50IGlzIGVuYWJsZWQgb3Igbm90LlxuICAgICAgICAgKiAhI3poIOihqOekuuivpee7hOS7tuiHqui6q+aYr+WQpuWQr+eUqOOAglxuICAgICAgICAgKiBAcHJvcGVydHkgZW5hYmxlZFxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBjb21wLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgKiBjYy5sb2coY29tcC5lbmFibGVkKTtcbiAgICAgICAgICovXG4gICAgICAgIGVuYWJsZWQ6IHtcbiAgICAgICAgICAgIGdldCAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0ICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lbmFibGVkICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmFibGVkID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm5vZGUuX2FjdGl2ZUluSGllcmFyY2h5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tcFNjaGVkdWxlciA9IGNjLmRpcmVjdG9yLl9jb21wU2NoZWR1bGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcFNjaGVkdWxlci5lbmFibGVDb21wKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcFNjaGVkdWxlci5kaXNhYmxlQ29tcCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIGNvbXBvbmVudCBpcyBlbmFibGVkIGFuZCBpdHMgbm9kZSBpcyBhbHNvIGFjdGl2ZSBpbiB0aGUgaGllcmFyY2h5LlxuICAgICAgICAgKiAhI3poIOihqOekuuivpee7hOS7tuaYr+WQpuiiq+WQr+eUqOW5tuS4lOaJgOWcqOeahOiKgueCueS5n+WkhOS6jua/gOa0u+eKtuaAgeOAglxuICAgICAgICAgKiBAcHJvcGVydHkgZW5hYmxlZEluSGllcmFyY2h5XG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogY2MubG9nKGNvbXAuZW5hYmxlZEluSGllcmFyY2h5KTtcbiAgICAgICAgICovXG4gICAgICAgIGVuYWJsZWRJbkhpZXJhcmNoeToge1xuICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZCAmJiB0aGlzLm5vZGUuX2FjdGl2ZUluSGllcmFyY2h5O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gUmV0dXJucyBhIHZhbHVlIHdoaWNoIHVzZWQgdG8gaW5kaWNhdGUgdGhlIG9uTG9hZCBnZXQgY2FsbGVkIG9yIG5vdC5cbiAgICAgICAgICogISN6aCDov5Tlm57kuIDkuKrlgLznlKjmnaXliKTmlq0gb25Mb2FkIOaYr+WQpuiiq+iwg+eUqOi/h++8jOS4jeetieS6jiAwIOaXtuiwg+eUqOi/h++8jOetieS6jiAwIOaXtuacquiwg+eUqOOAglxuICAgICAgICAgKiBAcHJvcGVydHkgX2lzT25Mb2FkQ2FsbGVkXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBjYy5sb2codGhpcy5faXNPbkxvYWRDYWxsZWQgPiAwKTtcbiAgICAgICAgICovXG4gICAgICAgIF9pc09uTG9hZENhbGxlZDoge1xuICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb2JqRmxhZ3MgJiBJc09uTG9hZENhbGxlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9LFxuXG4gICAgLy8gTElGRUNZQ0xFIE1FVEhPRFNcblxuICAgIC8vIEZpcmViYWxsIHByb3ZpZGVzIGxpZmVjeWNsZSBtZXRob2RzIHRoYXQgeW91IGNhbiBzcGVjaWZ5IHRvIGhvb2sgaW50byB0aGlzIHByb2Nlc3MuXG4gICAgLy8gV2UgcHJvdmlkZSBQcmUgbWV0aG9kcywgd2hpY2ggYXJlIGNhbGxlZCByaWdodCBiZWZvcmUgc29tZXRoaW5nIGhhcHBlbnMsIGFuZCBQb3N0IG1ldGhvZHMgd2hpY2ggYXJlIGNhbGxlZCByaWdodCBhZnRlciBzb21ldGhpbmcgaGFwcGVucy5cblxuICAgIC8qKlxuICAgICAqICEjZW4gVXBkYXRlIGlzIGNhbGxlZCBldmVyeSBmcmFtZSwgaWYgdGhlIENvbXBvbmVudCBpcyBlbmFibGVkLjxici8+XG4gICAgICogVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IG1heSBub3QgYmUgaW1wbGVtZW50ZWQgaW4gdGhlIHN1cGVyIGNsYXNzLiBZb3UgY2FuIG9ubHkgY2FsbCBpdHMgc3VwZXIgY2xhc3MgbWV0aG9kIGluc2lkZSBpdC4gSXQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbWFudWFsbHkgZWxzZXdoZXJlLlxuICAgICAqICEjemgg5aaC5p6c6K+l57uE5Lu25ZCv55So77yM5YiZ5q+P5bin6LCD55SoIHVwZGF0ZeOAgjxici8+XG4gICAgICog6K+l5pa55rOV5Li655Sf5ZG95ZGo5pyf5pa55rOV77yM54i257G75pyq5b+F5Lya5pyJ5a6e546w44CC5bm25LiU5L2g5Y+q6IO95Zyo6K+l5pa55rOV5YaF6YOo6LCD55So54i257G755qE5a6e546w77yM5LiN5Y+v5Zyo5YW25a6D5Zyw5pa555u05o6l6LCD55So6K+l5pa55rOV44CCXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZHQgLSB0aGUgZGVsdGEgdGltZSBpbiBzZWNvbmRzIGl0IHRvb2sgdG8gY29tcGxldGUgdGhlIGxhc3QgZnJhbWVcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgdXBkYXRlOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBMYXRlVXBkYXRlIGlzIGNhbGxlZCBldmVyeSBmcmFtZSwgaWYgdGhlIENvbXBvbmVudCBpcyBlbmFibGVkLjxici8+XG4gICAgICogVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IG1heSBub3QgYmUgaW1wbGVtZW50ZWQgaW4gdGhlIHN1cGVyIGNsYXNzLiBZb3UgY2FuIG9ubHkgY2FsbCBpdHMgc3VwZXIgY2xhc3MgbWV0aG9kIGluc2lkZSBpdC4gSXQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbWFudWFsbHkgZWxzZXdoZXJlLlxuICAgICAqICEjemgg5aaC5p6c6K+l57uE5Lu25ZCv55So77yM5YiZ5q+P5bin6LCD55SoIExhdGVVcGRhdGXjgII8YnIvPlxuICAgICAqIOivpeaWueazleS4uueUn+WRveWRqOacn+aWueazle+8jOeItuexu+acquW/heS8muacieWunueOsOOAguW5tuS4lOS9oOWPquiDveWcqOivpeaWueazleWGhemDqOiwg+eUqOeItuexu+eahOWunueOsO+8jOS4jeWPr+WcqOWFtuWug+WcsOaWueebtOaOpeiwg+eUqOivpeaWueazleOAglxuICAgICAqIEBtZXRob2QgbGF0ZVVwZGF0ZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBsYXRlVXBkYXRlOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogYF9fcHJlbG9hZGAgaXMgY2FsbGVkIGJlZm9yZSBldmVyeSBvbkxvYWQuXG4gICAgICogSXQgaXMgdXNlZCB0byBpbml0aWFsaXplIHRoZSBidWlsdGluIGNvbXBvbmVudHMgaW50ZXJuYWxseSxcbiAgICAgKiB0byBhdm9pZCBjaGVja2luZyB3aGV0aGVyIG9uTG9hZCBpcyBjYWxsZWQgYmVmb3JlIGV2ZXJ5IHB1YmxpYyBtZXRob2QgY2FsbHMuXG4gICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIHJlbW92ZWQgaWYgc2NyaXB0IHByaW9yaXR5IGlzIHN1cHBvcnRlZC5cbiAgICAgKlxuICAgICAqIEBtZXRob2QgX19wcmVsb2FkXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfX3ByZWxvYWQ6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogV2hlbiBhdHRhY2hpbmcgdG8gYW4gYWN0aXZlIG5vZGUgb3IgaXRzIG5vZGUgZmlyc3QgYWN0aXZhdGVkLlxuICAgICAqIG9uTG9hZCBpcyBhbHdheXMgY2FsbGVkIGJlZm9yZSBhbnkgc3RhcnQgZnVuY3Rpb25zLCB0aGlzIGFsbG93cyB5b3UgdG8gb3JkZXIgaW5pdGlhbGl6YXRpb24gb2Ygc2NyaXB0cy48YnIvPlxuICAgICAqIFRoaXMgaXMgYSBsaWZlY3ljbGUgbWV0aG9kLiBJdCBtYXkgbm90IGJlIGltcGxlbWVudGVkIGluIHRoZSBzdXBlciBjbGFzcy4gWW91IGNhbiBvbmx5IGNhbGwgaXRzIHN1cGVyIGNsYXNzIG1ldGhvZCBpbnNpZGUgaXQuIEl0IHNob3VsZCBub3QgYmUgY2FsbGVkIG1hbnVhbGx5IGVsc2V3aGVyZS5cbiAgICAgKiAhI3poXG4gICAgICog5b2T6ZmE5Yqg5Yiw5LiA5Liq5r+A5rS755qE6IqC54K55LiK5oiW6ICF5YW26IqC54K556ys5LiA5qyh5r+A5rS75pe25YCZ6LCD55So44CCb25Mb2FkIOaAu+aYr+S8muWcqOS7u+S9lSBzdGFydCDmlrnms5XosIPnlKjliY3miafooYzvvIzov5nog73nlKjkuo7lronmjpLohJrmnKznmoTliJ3lp4vljJbpobrluo/jgII8YnIvPlxuICAgICAqIOivpeaWueazleS4uueUn+WRveWRqOacn+aWueazle+8jOeItuexu+acquW/heS8muacieWunueOsOOAguW5tuS4lOS9oOWPquiDveWcqOivpeaWueazleWGhemDqOiwg+eUqOeItuexu+eahOWunueOsO+8jOS4jeWPr+WcqOWFtuWug+WcsOaWueebtOaOpeiwg+eUqOivpeaWueazleOAglxuICAgICAqIEBtZXRob2Qgb25Mb2FkXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uTG9hZDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBDYWxsZWQgYmVmb3JlIGFsbCBzY3JpcHRzJyB1cGRhdGUgaWYgdGhlIENvbXBvbmVudCBpcyBlbmFibGVkIHRoZSBmaXJzdCB0aW1lLlxuICAgICAqIFVzdWFsbHkgdXNlZCB0byBpbml0aWFsaXplIHNvbWUgbG9naWMgd2hpY2ggbmVlZCB0byBiZSBjYWxsZWQgYWZ0ZXIgYWxsIGNvbXBvbmVudHMnIGBvbmxvYWRgIG1ldGhvZHMgY2FsbGVkLjxici8+XG4gICAgICogVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IG1heSBub3QgYmUgaW1wbGVtZW50ZWQgaW4gdGhlIHN1cGVyIGNsYXNzLiBZb3UgY2FuIG9ubHkgY2FsbCBpdHMgc3VwZXIgY2xhc3MgbWV0aG9kIGluc2lkZSBpdC4gSXQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbWFudWFsbHkgZWxzZXdoZXJlLlxuICAgICAqICEjemhcbiAgICAgKiDlpoLmnpzor6Xnu4Tku7bnrKzkuIDmrKHlkK/nlKjvvIzliJnlnKjmiYDmnInnu4Tku7bnmoQgdXBkYXRlIOS5i+WJjeiwg+eUqOOAgumAmuW4uOeUqOS6jumcgOimgeWcqOaJgOaciee7hOS7tueahCBvbkxvYWQg5Yid5aeL5YyW5a6M5q+V5ZCO5omn6KGM55qE6YC76L6R44CCPGJyLz5cbiAgICAgKiDor6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgILlubbkuJTkvaDlj6rog73lnKjor6Xmlrnms5XlhoXpg6josIPnlKjniLbnsbvnmoTlrp7njrDvvIzkuI3lj6/lnKjlhbblroPlnLDmlrnnm7TmjqXosIPnlKjor6Xmlrnms5XjgIJcbiAgICAgKiBAbWV0aG9kIHN0YXJ0XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHN0YXJ0OiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBDYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBiZWNvbWVzIGVuYWJsZWQgYW5kIGl0cyBub2RlIGlzIGFjdGl2ZS48YnIvPlxuICAgICAqIFRoaXMgaXMgYSBsaWZlY3ljbGUgbWV0aG9kLiBJdCBtYXkgbm90IGJlIGltcGxlbWVudGVkIGluIHRoZSBzdXBlciBjbGFzcy4gWW91IGNhbiBvbmx5IGNhbGwgaXRzIHN1cGVyIGNsYXNzIG1ldGhvZCBpbnNpZGUgaXQuIEl0IHNob3VsZCBub3QgYmUgY2FsbGVkIG1hbnVhbGx5IGVsc2V3aGVyZS5cbiAgICAgKiAhI3poIOW9k+ivpee7hOS7tuiiq+WQr+eUqO+8jOW5tuS4lOWug+eahOiKgueCueS5n+a/gOa0u+aXtuOAgjxici8+XG4gICAgICog6K+l5pa55rOV5Li655Sf5ZG95ZGo5pyf5pa55rOV77yM54i257G75pyq5b+F5Lya5pyJ5a6e546w44CC5bm25LiU5L2g5Y+q6IO95Zyo6K+l5pa55rOV5YaF6YOo6LCD55So54i257G755qE5a6e546w77yM5LiN5Y+v5Zyo5YW25a6D5Zyw5pa555u05o6l6LCD55So6K+l5pa55rOV44CCXG4gICAgICogQG1ldGhvZCBvbkVuYWJsZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkVuYWJsZTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gQ2FsbGVkIHdoZW4gdGhpcyBjb21wb25lbnQgYmVjb21lcyBkaXNhYmxlZCBvciBpdHMgbm9kZSBiZWNvbWVzIGluYWN0aXZlLjxici8+XG4gICAgICogVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IG1heSBub3QgYmUgaW1wbGVtZW50ZWQgaW4gdGhlIHN1cGVyIGNsYXNzLiBZb3UgY2FuIG9ubHkgY2FsbCBpdHMgc3VwZXIgY2xhc3MgbWV0aG9kIGluc2lkZSBpdC4gSXQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbWFudWFsbHkgZWxzZXdoZXJlLlxuICAgICAqICEjemgg5b2T6K+l57uE5Lu26KKr56aB55So5oiW6IqC54K55Y+Y5Li65peg5pWI5pe26LCD55So44CCPGJyLz5cbiAgICAgKiDor6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgILlubbkuJTkvaDlj6rog73lnKjor6Xmlrnms5XlhoXpg6josIPnlKjniLbnsbvnmoTlrp7njrDvvIzkuI3lj6/lnKjlhbblroPlnLDmlrnnm7TmjqXosIPnlKjor6Xmlrnms5XjgIJcbiAgICAgKiBAbWV0aG9kIG9uRGlzYWJsZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkRpc2FibGU6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIENhbGxlZCB3aGVuIHRoaXMgY29tcG9uZW50IHdpbGwgYmUgZGVzdHJveWVkLjxici8+XG4gICAgICogVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IG1heSBub3QgYmUgaW1wbGVtZW50ZWQgaW4gdGhlIHN1cGVyIGNsYXNzLiBZb3UgY2FuIG9ubHkgY2FsbCBpdHMgc3VwZXIgY2xhc3MgbWV0aG9kIGluc2lkZSBpdC4gSXQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbWFudWFsbHkgZWxzZXdoZXJlLlxuICAgICAqICEjemgg5b2T6K+l57uE5Lu26KKr6ZSA5q+B5pe26LCD55SoPGJyLz5cbiAgICAgKiDor6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgILlubbkuJTkvaDlj6rog73lnKjor6Xmlrnms5XlhoXpg6josIPnlKjniLbnsbvnmoTlrp7njrDvvIzkuI3lj6/lnKjlhbblroPlnLDmlrnnm7TmjqXosIPnlKjor6Xmlrnms5XjgIJcbiAgICAgKiBAbWV0aG9kIG9uRGVzdHJveVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkRlc3Ryb3k6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG9uRm9jdXNJbkVkaXRvclxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBvbkZvY3VzSW5FZGl0b3I6IG51bGwsXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBvbkxvc3RGb2N1c0luRWRpdG9yXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uTG9zdEZvY3VzSW5FZGl0b3I6IG51bGwsXG4gICAgLyoqXG4gICAgICogISNlbiBDYWxsZWQgdG8gaW5pdGlhbGl6ZSB0aGUgY29tcG9uZW50IG9yIG5vZGXigJlzIHByb3BlcnRpZXMgd2hlbiBhZGRpbmcgdGhlIGNvbXBvbmVudCB0aGUgZmlyc3QgdGltZSBvciB3aGVuIHRoZSBSZXNldCBjb21tYW5kIGlzIHVzZWQuIFRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWQgaW4gZWRpdG9yLlxuICAgICAqICEjemgg55So5p2l5Yid5aeL5YyW57uE5Lu25oiW6IqC54K555qE5LiA5Lqb5bGe5oCn77yM5b2T6K+l57uE5Lu26KKr56ys5LiA5qyh5re75Yqg5Yiw6IqC54K55LiK5oiW55So5oi354K55Ye75LqG5a6D55qEIFJlc2V0IOiPnOWNleaXtuiwg+eUqOOAgui/meS4quWbnuiwg+WPquS8muWcqOe8lui+keWZqOS4i+iwg+eUqOOAglxuICAgICAqIEBtZXRob2QgcmVzZXRJbkVkaXRvclxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICByZXNldEluRWRpdG9yOiBudWxsLFxuXG4gICAgLy8gUFVCTElDXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIEFkZHMgYSBjb21wb25lbnQgY2xhc3MgdG8gdGhlIG5vZGUuIFlvdSBjYW4gYWxzbyBhZGQgY29tcG9uZW50IHRvIG5vZGUgYnkgcGFzc2luZyBpbiB0aGUgbmFtZSBvZiB0aGUgc2NyaXB0LlxuICAgICAqICEjemgg5ZCR6IqC54K55re75Yqg5LiA5Liq57uE5Lu257G777yM5L2g6L+Y5Y+v5Lul6YCa6L+H5Lyg5YWl6ISa5pys55qE5ZCN56ew5p2l5re75Yqg57uE5Lu244CCXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGFkZENvbXBvbmVudFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSB0eXBlT3JDbGFzc05hbWUgLSB0aGUgY29uc3RydWN0b3Igb3IgdGhlIGNsYXNzIG5hbWUgb2YgdGhlIGNvbXBvbmVudCB0byBhZGRcbiAgICAgKiBAcmV0dXJuIHtDb21wb25lbnR9IC0gdGhlIG5ld2x5IGFkZGVkIGNvbXBvbmVudFxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHNwcml0ZSA9IG5vZGUuYWRkQ29tcG9uZW50KGNjLlNwcml0ZSk7XG4gICAgICogdmFyIHRlc3QgPSBub2RlLmFkZENvbXBvbmVudChcIlRlc3RcIik7XG4gICAgICogQHR5cGVzY3JpcHRcbiAgICAgKiBhZGRDb21wb25lbnQ8VCBleHRlbmRzIENvbXBvbmVudD4odHlwZToge25ldygpOiBUfSk6IFRcbiAgICAgKiBhZGRDb21wb25lbnQoY2xhc3NOYW1lOiBzdHJpbmcpOiBhbnlcbiAgICAgKi9cbiAgICBhZGRDb21wb25lbnQgKHR5cGVPckNsYXNzTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlLmFkZENvbXBvbmVudCh0eXBlT3JDbGFzc05hbWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogUmV0dXJucyB0aGUgY29tcG9uZW50IG9mIHN1cHBsaWVkIHR5cGUgaWYgdGhlIG5vZGUgaGFzIG9uZSBhdHRhY2hlZCwgbnVsbCBpZiBpdCBkb2Vzbid0Ljxici8+XG4gICAgICogWW91IGNhbiBhbHNvIGdldCBjb21wb25lbnQgaW4gdGhlIG5vZGUgYnkgcGFzc2luZyBpbiB0aGUgbmFtZSBvZiB0aGUgc2NyaXB0LlxuICAgICAqICEjemhcbiAgICAgKiDojrflj5boioLngrnkuIrmjIflrprnsbvlnovnmoTnu4Tku7bvvIzlpoLmnpzoioLngrnmnInpmYTliqDmjIflrprnsbvlnovnmoTnu4Tku7bvvIzliJnov5Tlm57vvIzlpoLmnpzmsqHmnInliJnkuLrnqbrjgII8YnIvPlxuICAgICAqIOS8oOWFpeWPguaVsOS5n+WPr+S7peaYr+iEmuacrOeahOWQjeensOOAglxuICAgICAqXG4gICAgICogQG1ldGhvZCBnZXRDb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gdHlwZU9yQ2xhc3NOYW1lXG4gICAgICogQHJldHVybiB7Q29tcG9uZW50fVxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gZ2V0IHNwcml0ZSBjb21wb25lbnQuXG4gICAgICogdmFyIHNwcml0ZSA9IG5vZGUuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSk7XG4gICAgICogLy8gZ2V0IGN1c3RvbSB0ZXN0IGNhbHNzLlxuICAgICAqIHZhciB0ZXN0ID0gbm9kZS5nZXRDb21wb25lbnQoXCJUZXN0XCIpO1xuICAgICAqIEB0eXBlc2NyaXB0XG4gICAgICogZ2V0Q29tcG9uZW50PFQgZXh0ZW5kcyBDb21wb25lbnQ+KHR5cGU6IHtwcm90b3R5cGU6IFR9KTogVFxuICAgICAqIGdldENvbXBvbmVudChjbGFzc05hbWU6IHN0cmluZyk6IGFueVxuICAgICAqL1xuICAgIGdldENvbXBvbmVudCAodHlwZU9yQ2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KHR5cGVPckNsYXNzTmFtZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUmV0dXJucyBhbGwgY29tcG9uZW50cyBvZiBzdXBwbGllZCBUeXBlIGluIHRoZSBub2RlLlxuICAgICAqICEjemgg6L+U5Zue6IqC54K55LiK5oyH5a6a57G75Z6L55qE5omA5pyJ57uE5Lu244CCXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldENvbXBvbmVudHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gdHlwZU9yQ2xhc3NOYW1lXG4gICAgICogQHJldHVybiB7Q29tcG9uZW50W119XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgc3ByaXRlcyA9IG5vZGUuZ2V0Q29tcG9uZW50cyhjYy5TcHJpdGUpO1xuICAgICAqIHZhciB0ZXN0cyA9IG5vZGUuZ2V0Q29tcG9uZW50cyhcIlRlc3RcIik7XG4gICAgICogQHR5cGVzY3JpcHRcbiAgICAgKiBnZXRDb21wb25lbnRzPFQgZXh0ZW5kcyBDb21wb25lbnQ+KHR5cGU6IHtwcm90b3R5cGU6IFR9KTogVFtdXG4gICAgICogZ2V0Q29tcG9uZW50cyhjbGFzc05hbWU6IHN0cmluZyk6IGFueVtdXG4gICAgICovXG4gICAgZ2V0Q29tcG9uZW50cyAodHlwZU9yQ2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50cyh0eXBlT3JDbGFzc05hbWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFJldHVybnMgdGhlIGNvbXBvbmVudCBvZiBzdXBwbGllZCB0eXBlIGluIGFueSBvZiBpdHMgY2hpbGRyZW4gdXNpbmcgZGVwdGggZmlyc3Qgc2VhcmNoLlxuICAgICAqICEjemgg6YCS5b2S5p+l5om+5omA5pyJ5a2Q6IqC54K55Lit56ys5LiA5Liq5Yy56YWN5oyH5a6a57G75Z6L55qE57uE5Lu244CCXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldENvbXBvbmVudEluQ2hpbGRyZW5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gdHlwZU9yQ2xhc3NOYW1lXG4gICAgICogQHJldHVybnMge0NvbXBvbmVudH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBzcHJpdGUgPSBub2RlLmdldENvbXBvbmVudEluQ2hpbGRyZW4oY2MuU3ByaXRlKTtcbiAgICAgKiB2YXIgVGVzdCA9IG5vZGUuZ2V0Q29tcG9uZW50SW5DaGlsZHJlbihcIlRlc3RcIik7XG4gICAgICogQHR5cGVzY3JpcHRcbiAgICAgKiBnZXRDb21wb25lbnRJbkNoaWxkcmVuPFQgZXh0ZW5kcyBDb21wb25lbnQ+KHR5cGU6IHtwcm90b3R5cGU6IFR9KTogVFxuICAgICAqIGdldENvbXBvbmVudEluQ2hpbGRyZW4oY2xhc3NOYW1lOiBzdHJpbmcpOiBhbnlcbiAgICAgKi9cbiAgICBnZXRDb21wb25lbnRJbkNoaWxkcmVuICh0eXBlT3JDbGFzc05hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5nZXRDb21wb25lbnRJbkNoaWxkcmVuKHR5cGVPckNsYXNzTmFtZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gUmV0dXJucyB0aGUgY29tcG9uZW50cyBvZiBzdXBwbGllZCB0eXBlIGluIHNlbGYgb3IgYW55IG9mIGl0cyBjaGlsZHJlbiB1c2luZyBkZXB0aCBmaXJzdCBzZWFyY2guXG4gICAgICogISN6aCDpgJLlvZLmn6Xmib7oh6rouqvmiJbmiYDmnInlrZDoioLngrnkuK3mjIflrprnsbvlnovnmoTnu4Tku7ZcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gdHlwZU9yQ2xhc3NOYW1lXG4gICAgICogQHJldHVybnMge0NvbXBvbmVudFtdfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHNwcml0ZXMgPSBub2RlLmdldENvbXBvbmVudHNJbkNoaWxkcmVuKGNjLlNwcml0ZSk7XG4gICAgICogdmFyIHRlc3RzID0gbm9kZS5nZXRDb21wb25lbnRzSW5DaGlsZHJlbihcIlRlc3RcIik7XG4gICAgICogQHR5cGVzY3JpcHRcbiAgICAgKiBnZXRDb21wb25lbnRzSW5DaGlsZHJlbjxUIGV4dGVuZHMgQ29tcG9uZW50Pih0eXBlOiB7cHJvdG90eXBlOiBUfSk6IFRbXVxuICAgICAqIGdldENvbXBvbmVudHNJbkNoaWxkcmVuKGNsYXNzTmFtZTogc3RyaW5nKTogYW55W11cbiAgICAgKi9cbiAgICBnZXRDb21wb25lbnRzSW5DaGlsZHJlbiAodHlwZU9yQ2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4odHlwZU9yQ2xhc3NOYW1lKTtcbiAgICB9LFxuXG4gICAgLy8gVklSVFVBTFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIElmIHRoZSBjb21wb25lbnQncyBib3VuZGluZyBib3ggaXMgZGlmZmVyZW50IGZyb20gdGhlIG5vZGUncywgeW91IGNhbiBpbXBsZW1lbnQgdGhpcyBtZXRob2QgdG8gc3VwcGx5XG4gICAgICogYSBjdXN0b20gYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveCAoQUFCQiksIHNvIHRoZSBlZGl0b3IncyBzY2VuZSB2aWV3IGNhbiBwZXJmb3JtIGhpdCB0ZXN0IHByb3Blcmx5LlxuICAgICAqICEjemhcbiAgICAgKiDlpoLmnpznu4Tku7bnmoTljIXlm7Tnm5LkuI7oioLngrnkuI3lkIzvvIzmgqjlj6/ku6Xlrp7njrDor6Xmlrnms5Xku6Xmj5Dkvpvoh6rlrprkuYnnmoTovbTlkJHlr7npvZDnmoTljIXlm7Tnm5LvvIhBQUJC77yJ77yMXG4gICAgICog5Lul5L6/57yW6L6R5Zmo55qE5Zy65pmv6KeG5Zu+5Y+v5Lul5q2j56Gu5Zyw5omn6KGM54K56YCJ5rWL6K+V44CCXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIF9nZXRMb2NhbEJvdW5kc1xuICAgICAqIEBwYXJhbSB7UmVjdH0gb3V0X3JlY3QgLSB0aGUgUmVjdCB0byByZWNlaXZlIHRoZSBib3VuZGluZyBib3hcbiAgICAgKi9cbiAgICBfZ2V0TG9jYWxCb3VuZHM6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogb25SZXN0b3JlIGlzIGNhbGxlZCBhZnRlciB0aGUgdXNlciBjbGlja3MgdGhlIFJlc2V0IGl0ZW0gaW4gdGhlIEluc3BlY3RvcidzIGNvbnRleHQgbWVudSBvciBwZXJmb3Jtc1xuICAgICAqIGFuIHVuZG8gb3BlcmF0aW9uIG9uIHRoaXMgY29tcG9uZW50Ljxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiBJZiB0aGUgY29tcG9uZW50IGNvbnRhaW5zIHRoZSBcImludGVybmFsIHN0YXRlXCIsIHNob3J0IGZvciBcInRlbXBvcmFyeSBtZW1iZXIgdmFyaWFibGVzIHdoaWNoIG5vdCBpbmNsdWRlZDxici8+XG4gICAgICogaW4gaXRzIENDQ2xhc3MgcHJvcGVydGllc1wiLCB0aGVuIHlvdSBtYXkgbmVlZCB0byBpbXBsZW1lbnQgdGhpcyBmdW5jdGlvbi48YnIvPlxuICAgICAqIDxici8+XG4gICAgICogVGhlIGVkaXRvciB3aWxsIGNhbGwgdGhlIGdldHNldCBhY2Nlc3NvcnMgb2YgeW91ciBjb21wb25lbnQgdG8gcmVjb3JkL3Jlc3RvcmUgdGhlIGNvbXBvbmVudCdzIHN0YXRlPGJyLz5cbiAgICAgKiBmb3IgdW5kby9yZWRvIG9wZXJhdGlvbi4gSG93ZXZlciwgaW4gZXh0cmVtZSBjYXNlcywgaXQgbWF5IG5vdCB3b3JrcyB3ZWxsLiBUaGVuIHlvdSBzaG91bGQgaW1wbGVtZW50PGJyLz5cbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHRvIG1hbnVhbGx5IHN5bmNocm9uaXplIHlvdXIgY29tcG9uZW50J3MgXCJpbnRlcm5hbCBzdGF0ZXNcIiB3aXRoIGl0cyBwdWJsaWMgcHJvcGVydGllcy48YnIvPlxuICAgICAqIE9uY2UgeW91IGltcGxlbWVudCB0aGlzIGZ1bmN0aW9uLCBhbGwgdGhlIGdldHNldCBhY2Nlc3NvcnMgb2YgeW91ciBjb21wb25lbnQgd2lsbCBub3QgYmUgY2FsbGVkIHdoZW48YnIvPlxuICAgICAqIHRoZSB1c2VyIHBlcmZvcm1zIGFuIHVuZG8vcmVkbyBvcGVyYXRpb24uIFdoaWNoIG1lYW5zIHRoYXQgb25seSB0aGUgcHJvcGVydGllcyB3aXRoIGRlZmF1bHQgdmFsdWU8YnIvPlxuICAgICAqIHdpbGwgYmUgcmVjb3JkZWQgb3IgcmVzdG9yZWQgYnkgZWRpdG9yLjxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiBTaW1pbGFybHksIHRoZSBlZGl0b3IgbWF5IGZhaWxlZCB0byByZXNldCB5b3VyIGNvbXBvbmVudCBjb3JyZWN0bHkgaW4gZXh0cmVtZSBjYXNlcy4gVGhlbiBpZiB5b3UgbmVlZDxici8+XG4gICAgICogdG8gc3VwcG9ydCB0aGUgcmVzZXQgbWVudSwgeW91IHNob3VsZCBtYW51YWxseSBzeW5jaHJvbml6ZSB5b3VyIGNvbXBvbmVudCdzIFwiaW50ZXJuYWwgc3RhdGVzXCIgd2l0aCBpdHM8YnIvPlxuICAgICAqIHByb3BlcnRpZXMgaW4gdGhpcyBmdW5jdGlvbi4gT25jZSB5b3UgaW1wbGVtZW50IHRoaXMgZnVuY3Rpb24sIGFsbCB0aGUgZ2V0c2V0IGFjY2Vzc29ycyBvZiB5b3VyIGNvbXBvbmVudDxici8+XG4gICAgICogd2lsbCBub3QgYmUgY2FsbGVkIGR1cmluZyByZXNldCBvcGVyYXRpb24uIFdoaWNoIG1lYW5zIHRoYXQgb25seSB0aGUgcHJvcGVydGllcyB3aXRoIGRlZmF1bHQgdmFsdWU8YnIvPlxuICAgICAqIHdpbGwgYmUgcmVzZXQgYnkgZWRpdG9yLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZCBpbiBlZGl0b3IgbW9kZS5cbiAgICAgKiAhI3poXG4gICAgICogb25SZXN0b3JlIOaYr+eUqOaIt+WcqOajgOafpeWZqOiPnOWNleeCueWHuyBSZXNldCDml7bvvIzlr7nmraTnu4Tku7bmiafooYzmkqTmtojmk43kvZzlkI7osIPnlKjnmoTjgII8YnIvPlxuICAgICAqIDxici8+XG4gICAgICog5aaC5p6c57uE5Lu25YyF5ZCr5LqG4oCc5YaF6YOo54q25oCB4oCd77yI5LiN5ZyoIENDQ2xhc3Mg5bGe5oCn5Lit5a6a5LmJ55qE5Li05pe25oiQ5ZGY5Y+Y6YeP77yJ77yM6YKj5LmI5L2g5Y+v6IO96ZyA6KaB5a6e546w6K+l5pa55rOV44CCPGJyLz5cbiAgICAgKiA8YnIvPlxuICAgICAqIOe8lui+keWZqOaJp+ihjOaSpOmUgC/ph43lgZrmk43kvZzml7bvvIzlsIbosIPnlKjnu4Tku7bnmoQgZ2V0IHNldCDmnaXlvZXliLblkozov5jljp/nu4Tku7bnmoTnirbmgIHjgIJcbiAgICAgKiDnhLbogIzvvIzlnKjmnoHnq6/nmoTmg4XlhrXkuIvvvIzlroPlj6/og73ml6Dms5Xoia/lpb3ov5DkvZzjgII8YnIvPlxuICAgICAqIOmCo+S5iOS9oOWwseW6lOivpeWunueOsOi/meS4quaWueazle+8jOaJi+WKqOagueaNrue7hOS7tueahOWxnuaAp+WQjOatpeKAnOWGhemDqOeKtuaAgeKAneOAglxuICAgICAqIOS4gOaXpuS9oOWunueOsOi/meS4quaWueazle+8jOW9k+eUqOaIt+aSpOmUgOaIlumHjeWBmuaXtu+8jOe7hOS7tueahOaJgOaciSBnZXQgc2V0IOmDveS4jeS8muWGjeiiq+iwg+eUqOOAglxuICAgICAqIOi/meaEj+WRs+edgOS7heS7heaMh+WumuS6hum7mOiupOWAvOeahOWxnuaAp+Wwhuiiq+e8lui+keWZqOiusOW9leWSjOi/mOWOn+OAgjxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiDlkIzmoLfnmoTvvIznvJbovpHlj6/og73ml6Dms5XlnKjmnoHnq6/mg4XlhrXkuIvmraPnoa7lnLDph43nva7mgqjnmoTnu4Tku7bjgII8YnIvPlxuICAgICAqIOS6juaYr+WmguaenOS9oOmcgOimgeaUr+aMgee7hOS7tumHjee9ruiPnOWNle+8jOS9oOmcgOimgeWcqOivpeaWueazleS4reaJi+W3peWQjOatpee7hOS7tuWxnuaAp+WIsOKAnOWGhemDqOeKtuaAgeKAneOAgjxici8+XG4gICAgICog5LiA5pem5L2g5a6e546w6L+Z5Liq5pa55rOV77yM57uE5Lu255qE5omA5pyJIGdldCBzZXQg6YO95LiN5Lya5Zyo6YeN572u5pON5L2c5pe26KKr6LCD55So44CCXG4gICAgICog6L+Z5oSP5ZGz552A5LuF5LuF5oyH5a6a5LqG6buY6K6k5YC855qE5bGe5oCn5bCG6KKr57yW6L6R5Zmo6YeN572u44CCXG4gICAgICogPGJyLz5cbiAgICAgKiDmraTmlrnms5Xku4XlnKjnvJbovpHlmajkuIvkvJrooqvosIPnlKjjgIJcbiAgICAgKiBAbWV0aG9kIG9uUmVzdG9yZVxuICAgICAqL1xuICAgIG9uUmVzdG9yZTogbnVsbCxcblxuICAgIC8vIE9WRVJSSURFXG5cbiAgICBkZXN0cm95ICgpIHtcbiAgICAgICAgaWYgKENDX0VESVRPUikge1xuICAgICAgICAgICAgdmFyIGRlcGVuZCA9IHRoaXMubm9kZS5fZ2V0RGVwZW5kQ29tcG9uZW50KHRoaXMpO1xuICAgICAgICAgICAgaWYgKGRlcGVuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYy5lcnJvcklEKDM2MjYsXG4gICAgICAgICAgICAgICAgICAgIGNjLmpzLmdldENsYXNzTmFtZSh0aGlzKSwgY2MuanMuZ2V0Q2xhc3NOYW1lKGRlcGVuZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zdXBlcigpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZW5hYmxlZCAmJiB0aGlzLm5vZGUuX2FjdGl2ZUluSGllcmFyY2h5KSB7XG4gICAgICAgICAgICAgICAgY2MuZGlyZWN0b3IuX2NvbXBTY2hlZHVsZXIuZGlzYWJsZUNvbXAodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX29uUHJlRGVzdHJveSAoKSB7XG4gICAgICAgIC8vIFNjaGVkdWxlc1xuICAgICAgICB0aGlzLnVuc2NoZWR1bGVBbGxDYWxsYmFja3MoKTtcblxuICAgICAgICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVyc1xuICAgICAgICB2YXIgZXZlbnRUYXJnZXRzID0gdGhpcy5fX2V2ZW50VGFyZ2V0cztcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudFRhcmdldHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXZlbnRUYXJnZXRzW2ldO1xuICAgICAgICAgICAgdGFyZ2V0ICYmIHRhcmdldC50YXJnZXRPZmYodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRUYXJnZXRzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgLy9cbiAgICAgICAgaWYgKENDX0VESVRPUiAmJiAhQ0NfVEVTVCkge1xuICAgICAgICAgICAgX1NjZW5lLkFzc2V0c1dhdGNoZXIuc3RvcCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9uRGVzdHJveVxuICAgICAgICBjYy5kaXJlY3Rvci5fbm9kZUFjdGl2YXRvci5kZXN0cm95Q29tcCh0aGlzKTtcblxuICAgICAgICAvLyBkbyByZW1vdmUgY29tcG9uZW50XG4gICAgICAgIHRoaXMubm9kZS5fcmVtb3ZlQ29tcG9uZW50KHRoaXMpO1xuICAgIH0sXG5cbiAgICBfaW5zdGFudGlhdGUgKGNsb25lZCkge1xuICAgICAgICBpZiAoIWNsb25lZCkge1xuICAgICAgICAgICAgY2xvbmVkID0gY2MuaW5zdGFudGlhdGUuX2Nsb25lKHRoaXMsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGNsb25lZC5ub2RlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICB9LFxuXG4vLyBTY2hlZHVsZXJcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBTY2hlZHVsZXMgYSBjdXN0b20gc2VsZWN0b3IuPGJyLz5cbiAgICAgKiBJZiB0aGUgc2VsZWN0b3IgaXMgYWxyZWFkeSBzY2hlZHVsZWQsIHRoZW4gdGhlIGludGVydmFsIHBhcmFtZXRlciB3aWxsIGJlIHVwZGF0ZWQgd2l0aG91dCBzY2hlZHVsaW5nIGl0IGFnYWluLlxuICAgICAqICEjemhcbiAgICAgKiDosIPluqbkuIDkuKroh6rlrprkuYnnmoTlm57osIPlh73mlbDjgII8YnIvPlxuICAgICAqIOWmguaenOWbnuiwg+WHveaVsOW3suiwg+W6pu+8jOmCo+S5iOWwhuS4jeS8mumHjeWkjeiwg+W6puWug++8jOWPquS8muabtOaWsOaXtumXtOmXtOmalOWPguaVsOOAglxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2ludGVydmFsPTBdICBUaWNrIGludGVydmFsIGluIHNlY29uZHMuIDAgbWVhbnMgdGljayBldmVyeSBmcmFtZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3JlcGVhdD1jYy5tYWNyby5SRVBFQVRfRk9SRVZFUl0gICAgVGhlIHNlbGVjdG9yIHdpbGwgYmUgZXhlY3V0ZWQgKHJlcGVhdCArIDEpIHRpbWVzLCB5b3UgY2FuIHVzZSBjYy5tYWNyby5SRVBFQVRfRk9SRVZFUiBmb3IgdGljayBpbmZpbml0ZWx5LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbZGVsYXk9MF0gICAgIFRoZSBhbW91bnQgb2YgdGltZSB0aGF0IHRoZSBmaXJzdCB0aWNrIHdpbGwgd2FpdCBiZWZvcmUgZXhlY3V0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHRpbWVDYWxsYmFjayA9IGZ1bmN0aW9uIChkdCkge1xuICAgICAqICAgY2MubG9nKFwidGltZTogXCIgKyBkdCk7XG4gICAgICogfVxuICAgICAqIHRoaXMuc2NoZWR1bGUodGltZUNhbGxiYWNrLCAxKTtcbiAgICAgKi9cbiAgICBzY2hlZHVsZSAoY2FsbGJhY2ssIGludGVydmFsLCByZXBlYXQsIGRlbGF5KSB7XG4gICAgICAgIGNjLmFzc2VydElEKGNhbGxiYWNrLCAxNjE5KTtcbiAgICAgICAgY2MuYXNzZXJ0SUQoaW50ZXJ2YWwgPj0gMCwgMTYyMCk7XG5cbiAgICAgICAgaW50ZXJ2YWwgPSBpbnRlcnZhbCB8fCAwO1xuICAgICAgICByZXBlYXQgPSBpc05hTihyZXBlYXQpID8gY2MubWFjcm8uUkVQRUFUX0ZPUkVWRVIgOiByZXBlYXQ7XG4gICAgICAgIGRlbGF5ID0gZGVsYXkgfHwgMDtcblxuICAgICAgICB2YXIgc2NoZWR1bGVyID0gY2MuZGlyZWN0b3IuZ2V0U2NoZWR1bGVyKCk7XG5cbiAgICAgICAgLy8gc2hvdWxkIG5vdCB1c2UgZW5hYmxlZEluSGllcmFyY2h5IHRvIGp1ZGdlIHdoZXRoZXIgcGF1c2VkLFxuICAgICAgICAvLyBiZWNhdXNlIGVuYWJsZWRJbkhpZXJhcmNoeSBpcyBhc3NpZ25lZCBhZnRlciBvbkVuYWJsZS5cbiAgICAgICAgLy8gQWN0dWFsbHksIGlmIG5vdCB5ZXQgc2NoZWR1bGVkLCByZXN1bWVUYXJnZXQvcGF1c2VUYXJnZXQgaGFzIG5vIGVmZmVjdCBvbiBjb21wb25lbnQsXG4gICAgICAgIC8vIHRoZXJlZm9yZSB0aGVyZSBpcyBubyB3YXkgdG8gZ3VhcmFudGVlIHRoZSBwYXVzZWQgc3RhdGUgb3RoZXIgdGhhbiBpc1RhcmdldFBhdXNlZC5cbiAgICAgICAgdmFyIHBhdXNlZCA9IHNjaGVkdWxlci5pc1RhcmdldFBhdXNlZCh0aGlzKTtcblxuICAgICAgICBzY2hlZHVsZXIuc2NoZWR1bGUoY2FsbGJhY2ssIHRoaXMsIGludGVydmFsLCByZXBlYXQsIGRlbGF5LCBwYXVzZWQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNjaGVkdWxlcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgcnVucyBvbmx5IG9uY2UsIHdpdGggYSBkZWxheSBvZiAwIG9yIGxhcmdlci5cbiAgICAgKiAhI3poIOiwg+W6puS4gOS4quWPqui/kOihjOS4gOasoeeahOWbnuiwg+WHveaVsO+8jOWPr+S7peaMh+WumiAwIOiuqeWbnuiwg+WHveaVsOWcqOS4i+S4gOW4p+eri+WNs+aJp+ihjOaIluiAheWcqOS4gOWumueahOW7tuaXtuS5i+WQjuaJp+ihjOOAglxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVPbmNlXG4gICAgICogQHNlZSBjYy5Ob2RlI3NjaGVkdWxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgIEEgZnVuY3Rpb24gd3JhcHBlZCBhcyBhIHNlbGVjdG9yXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtkZWxheT0wXSAgVGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgdGhlIGZpcnN0IHRpY2sgd2lsbCB3YWl0IGJlZm9yZSBleGVjdXRpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgdGltZUNhbGxiYWNrID0gZnVuY3Rpb24gKGR0KSB7XG4gICAgICogICBjYy5sb2coXCJ0aW1lOiBcIiArIGR0KTtcbiAgICAgKiB9XG4gICAgICogdGhpcy5zY2hlZHVsZU9uY2UodGltZUNhbGxiYWNrLCAyKTtcbiAgICAgKi9cbiAgICBzY2hlZHVsZU9uY2UgKGNhbGxiYWNrLCBkZWxheSkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlKGNhbGxiYWNrLCAwLCAwLCBkZWxheSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW4gVW5zY2hlZHVsZXMgYSBjdXN0b20gY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICogISN6aCDlj5bmtojosIPluqbkuIDkuKroh6rlrprkuYnnmoTlm57osIPlh73mlbDjgIJcbiAgICAgKiBAbWV0aG9kIHVuc2NoZWR1bGVcbiAgICAgKiBAc2VlIGNjLk5vZGUjc2NoZWR1bGVcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja19mbiAgQSBmdW5jdGlvbiB3cmFwcGVkIGFzIGEgc2VsZWN0b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHRoaXMudW5zY2hlZHVsZShfY2FsbGJhY2spO1xuICAgICAqL1xuICAgIHVuc2NoZWR1bGUgKGNhbGxiYWNrX2ZuKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2tfZm4pXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY2MuZGlyZWN0b3IuZ2V0U2NoZWR1bGVyKCkudW5zY2hlZHVsZShjYWxsYmFja19mbiwgdGhpcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiB1bnNjaGVkdWxlIGFsbCBzY2hlZHVsZWQgY2FsbGJhY2sgZnVuY3Rpb25zOiBjdXN0b20gY2FsbGJhY2sgZnVuY3Rpb25zLCBhbmQgdGhlICd1cGRhdGUnIGNhbGxiYWNrIGZ1bmN0aW9uLjxici8+XG4gICAgICogQWN0aW9ucyBhcmUgbm90IGFmZmVjdGVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqICEjemgg5Y+W5raI6LCD5bqm5omA5pyJ5bey6LCD5bqm55qE5Zue6LCD5Ye95pWw77ya5a6a5Yi255qE5Zue6LCD5Ye95pWw5Lul5Y+KICd1cGRhdGUnIOWbnuiwg+WHveaVsOOAguWKqOS9nOS4jeWPl+atpOaWueazleW9seWTjeOAglxuICAgICAqIEBtZXRob2QgdW5zY2hlZHVsZUFsbENhbGxiYWNrc1xuICAgICAqIEBleGFtcGxlXG4gICAgICogdGhpcy51bnNjaGVkdWxlQWxsQ2FsbGJhY2tzKCk7XG4gICAgICovXG4gICAgdW5zY2hlZHVsZUFsbENhbGxiYWNrcyAoKSB7XG4gICAgICAgIGNjLmRpcmVjdG9yLmdldFNjaGVkdWxlcigpLnVuc2NoZWR1bGVBbGxGb3JUYXJnZXQodGhpcyk7XG4gICAgfSxcbn0pO1xuXG5Db21wb25lbnQuX3JlcXVpcmVDb21wb25lbnQgPSBudWxsO1xuQ29tcG9uZW50Ll9leGVjdXRpb25PcmRlciA9IDA7XG5cbmlmIChDQ19FRElUT1IgfHwgQ0NfVEVTVCkge1xuXG4gICAgLy8gSU5IRVJJVEFCTEUgU1RBVElDIE1FTUJFUlNcblxuICAgIENvbXBvbmVudC5fZXhlY3V0ZUluRWRpdE1vZGUgPSBmYWxzZTtcbiAgICBDb21wb25lbnQuX3BsYXlPbkZvY3VzID0gZmFsc2U7XG4gICAgQ29tcG9uZW50Ll9kaXNhbGxvd011bHRpcGxlID0gbnVsbDtcbiAgICBDb21wb25lbnQuX2hlbHAgPSAnJztcblxuICAgIC8vIE5PTi1JTkhFUklURUQgU1RBVElDIE1FTUJFUlNcbiAgICAvLyAoVHlwZVNjcmlwdCAyLjMgd2lsbCBzdGlsbCBpbmhlcml0IHRoZW0sIHNvIGFsd2F5cyBjaGVjayBoYXNPd25Qcm9wZXJ0eSBiZWZvcmUgdXNpbmcpXG5cbiAgICBqcy52YWx1ZShDb21wb25lbnQsICdfaW5zcGVjdG9yJywgJycsIHRydWUpO1xuICAgIGpzLnZhbHVlKENvbXBvbmVudCwgJ19pY29uJywgJycsIHRydWUpO1xuXG4gICAgLy8gQ09NUE9ORU5UIEhFTFBFUlNcblxuICAgIGNjLl9jb21wb25lbnRNZW51SXRlbXMgPSBbXTtcblxuICAgIENvbXBvbmVudC5fYWRkTWVudUl0ZW0gPSBmdW5jdGlvbiAoY2xzLCBwYXRoLCBwcmlvcml0eSkge1xuICAgICAgICBjYy5fY29tcG9uZW50TWVudUl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgY29tcG9uZW50OiBjbHMsXG4gICAgICAgICAgICBtZW51UGF0aDogcGF0aCxcbiAgICAgICAgICAgIHByaW9yaXR5OiBwcmlvcml0eVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG4vLyB3ZSBtYWtlIHRoaXMgbm9uLWVudW1lcmFibGUsIHRvIHByZXZlbnQgaW5oZXJpdGVkIGJ5IHN1YiBjbGFzc2VzLlxuanMudmFsdWUoQ29tcG9uZW50LCAnX3JlZ2lzdGVyRWRpdG9yUHJvcHMnLCBmdW5jdGlvbiAoY2xzLCBwcm9wcykge1xuICAgIHZhciByZXFDb21wID0gcHJvcHMucmVxdWlyZUNvbXBvbmVudDtcbiAgICBpZiAocmVxQ29tcCkge1xuICAgICAgICBjbHMuX3JlcXVpcmVDb21wb25lbnQgPSByZXFDb21wO1xuICAgIH1cbiAgICB2YXIgb3JkZXIgPSBwcm9wcy5leGVjdXRpb25PcmRlcjtcbiAgICBpZiAob3JkZXIgJiYgdHlwZW9mIG9yZGVyID09PSAnbnVtYmVyJykge1xuICAgICAgICBjbHMuX2V4ZWN1dGlvbk9yZGVyID0gb3JkZXI7XG4gICAgfVxuICAgIGlmIChDQ19FRElUT1IgfHwgQ0NfVEVTVCkge1xuICAgICAgICB2YXIgbmFtZSA9IGNjLmpzLmdldENsYXNzTmFtZShjbHMpO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdleGVjdXRlSW5FZGl0TW9kZSc6XG4gICAgICAgICAgICAgICAgICAgIGNscy5fZXhlY3V0ZUluRWRpdE1vZGUgPSAhIXZhbDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdwbGF5T25Gb2N1cyc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aWxsRXhlY3V0ZUluRWRpdE1vZGUgPSAoJ2V4ZWN1dGVJbkVkaXRNb2RlJyBpbiBwcm9wcykgPyBwcm9wcy5leGVjdXRlSW5FZGl0TW9kZSA6IGNscy5fZXhlY3V0ZUluRWRpdE1vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lsbEV4ZWN1dGVJbkVkaXRNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xzLl9wbGF5T25Gb2N1cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYy53YXJuSUQoMzYwMSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdpbnNwZWN0b3InOlxuICAgICAgICAgICAgICAgICAgICBqcy52YWx1ZShjbHMsICdfaW5zcGVjdG9yJywgdmFsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdpY29uJzpcbiAgICAgICAgICAgICAgICAgICAganMudmFsdWUoY2xzLCAnX2ljb24nLCB2YWwsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ21lbnUnOlxuICAgICAgICAgICAgICAgICAgICBDb21wb25lbnQuX2FkZE1lbnVJdGVtKGNscywgdmFsLCBwcm9wcy5tZW51UHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2Rpc2FsbG93TXVsdGlwbGUnOlxuICAgICAgICAgICAgICAgICAgICBjbHMuX2Rpc2FsbG93TXVsdGlwbGUgPSBjbHM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAncmVxdWlyZUNvbXBvbmVudCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZXhlY3V0aW9uT3JkZXInOlxuICAgICAgICAgICAgICAgICAgICAvLyBza2lwIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdoZWxwJzpcbiAgICAgICAgICAgICAgICAgICAgY2xzLl9oZWxwID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNjLndhcm5JRCgzNjAyLCBrZXksIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5Db21wb25lbnQucHJvdG90eXBlLl9fc2NyaXB0VXVpZCA9ICcnO1xuXG5jYy5Db21wb25lbnQgPSBtb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgQ0NPYmplY3QgPSByZXF1aXJlKCcuLi9wbGF0Zm9ybS9DQ09iamVjdCcpO1xudmFyIGpzID0gcmVxdWlyZSgnLi4vcGxhdGZvcm0vanMnKTtcbnZhciBpZEdlbmVyYXRlciA9IG5ldyAocmVxdWlyZSgnLi4vcGxhdGZvcm0vaWQtZ2VuZXJhdGVyJykpKCdDb21wJyk7XG5cbnZhciBJc09uRW5hYmxlQ2FsbGVkID0gQ0NPYmplY3QuRmxhZ3MuSXNPbkVuYWJsZUNhbGxlZDtcbnZhciBJc09uTG9hZENhbGxlZCA9IENDT2JqZWN0LkZsYWdzLklzT25Mb2FkQ2FsbGVkO1xuXG4vKipcbiAqICEjZW5cbiAqIEJhc2UgY2xhc3MgZm9yIGV2ZXJ5dGhpbmcgYXR0YWNoZWQgdG8gTm9kZShFbnRpdHkpLjxici8+XG4gKiA8YnIvPlxuICogTk9URTogTm90IGFsbG93ZWQgdG8gdXNlIGNvbnN0cnVjdGlvbiBwYXJhbWV0ZXJzIGZvciBDb21wb25lbnQncyBzdWJjbGFzc2VzLFxuICogICAgICAgYmVjYXVzZSBDb21wb25lbnQgaXMgY3JlYXRlZCBieSB0aGUgZW5naW5lLlxuICogISN6aFxuICog5omA5pyJ6ZmE5Yqg5Yiw6IqC54K555qE5Z+657G744CCPGJyLz5cbiAqIDxici8+XG4gKiDms6jmhI/vvJrkuI3lhYHorrjkvb/nlKjnu4Tku7bnmoTlrZDnsbvmnoTpgKDlj4LmlbDvvIzlm6DkuLrnu4Tku7bmmK/nlLHlvJXmk47liJvlu7rnmoTjgIJcbiAqXG4gKiBAY2xhc3MgQ29tcG9uZW50XG4gKiBAZXh0ZW5kcyBPYmplY3RcbiAqL1xudmFyIENvbXBvbmVudCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuQ29tcG9uZW50JyxcbiAgICBleHRlbmRzOiBDQ09iamVjdCxcblxuICAgIGN0b3I6IENDX0VESVRPUiA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5fU2NlbmUgJiYgX1NjZW5lLkFzc2V0c1dhdGNoZXIpIHtcbiAgICAgICAgICAgIF9TY2VuZS5Bc3NldHNXYXRjaGVyLmluaXRDb21wb25lbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faWQgPSBFZGl0b3IuVXRpbHMuVXVpZFV0aWxzLnV1aWQoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVnaXN0ZXIgYWxsIHJlbGF0ZWQgRXZlbnRUYXJnZXRzLFxuICAgICAgICAgKiBhbGwgZXZlbnQgY2FsbGJhY2tzIHdpbGwgYmUgcmVtb3ZlZCBpbiBfb25QcmVEZXN0cm95XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IF9fZXZlbnRUYXJnZXRzXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9fZXZlbnRUYXJnZXRzID0gW107XG4gICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5faWQgPSBpZEdlbmVyYXRlci5nZXROZXdJZCgpO1xuXG4gICAgICAgIHRoaXMuX19ldmVudFRhcmdldHMgPSBbXTtcbiAgICB9LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBUaGUgbm9kZSB0aGlzIGNvbXBvbmVudCBpcyBhdHRhY2hlZCB0by4gQSBjb21wb25lbnQgaXMgYWx3YXlzIGF0dGFjaGVkIHRvIGEgbm9kZS5cbiAgICAgICAgICogISN6aCDor6Xnu4Tku7booqvpmYTliqDliLDnmoToioLngrnjgILnu4Tku7bmgLvkvJrpmYTliqDliLDkuIDkuKroioLngrnjgIJcbiAgICAgICAgICogQHByb3BlcnR5IG5vZGVcbiAgICAgICAgICogQHR5cGUge05vZGV9XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIGNjLmxvZyhjb21wLm5vZGUpO1xuICAgICAgICAgKi9cbiAgICAgICAgbm9kZToge1xuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX25hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBjYy5qcy5nZXRDbGFzc05hbWUodGhpcyk7XG4gICAgICAgICAgICAgICAgdmFyIHRyaW1MZWZ0ID0gY2xhc3NOYW1lLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICAgICAgICAgICAgaWYgKHRyaW1MZWZ0ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnNsaWNlKHRyaW1MZWZ0ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5vZGUubmFtZSArICc8JyArIGNsYXNzTmFtZSArICc+JztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX25hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gVGhlIHV1aWQgZm9yIGVkaXRvci5cbiAgICAgICAgICogISN6aCDnu4Tku7bnmoQgdXVpZO+8jOeUqOS6jue8lui+keWZqOOAglxuICAgICAgICAgKiBAcHJvcGVydHkgdXVpZFxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogY2MubG9nKGNvbXAudXVpZCk7XG4gICAgICAgICAqL1xuICAgICAgICB1dWlkOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICB9LFxuXG4gICAgICAgIF9fc2NyaXB0QXNzZXQ6IENDX0VESVRPUiAmJiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHt9LFxuXG4gICAgICAgICAgICAvL3NldCAodmFsdWUpIHtcbiAgICAgICAgICAgIC8vICAgIGlmICh0aGlzLl9fc2NyaXB0VXVpZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIC8vICAgICAgICBpZiAodmFsdWUgJiYgRWRpdG9yLlV0aWxzLlV1aWRVdGlscy5pc1V1aWQodmFsdWUuX3V1aWQpKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIHZhciBjbGFzc0lkID0gRWRpdG9yLlV0aWxzLlV1aWRVdGlscy5jb21wcmVzc1V1aWQodmFsdWUuX3V1aWQpO1xuICAgICAgICAgICAgLy8gICAgICAgICAgICB2YXIgTmV3Q29tcCA9IGNjLmpzLl9nZXRDbGFzc0J5SWQoY2xhc3NJZCk7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGlmIChqcy5pc0NoaWxkQ2xhc3NPZihOZXdDb21wLCBjYy5Db21wb25lbnQpKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICBjYy53YXJuKCdTb3JyeSwgcmVwbGFjaW5nIGNvbXBvbmVudCBzY3JpcHQgaXMgbm90IHlldCBpbXBsZW1lbnRlZC4nKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIC8vRWRpdG9yLklwYy5zZW5kVG9XaW5zKCdyZWxvYWQ6d2luZG93LXNjcmlwdHMnLCBFZGl0b3IuX1NhbmRib3guY29tcGlsZWQpO1xuICAgICAgICAgICAgLy8gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgY2MuZXJyb3IoJ0NhbiBub3QgZmluZCBhIGNvbXBvbmVudCBpbiB0aGUgc2NyaXB0IHdoaWNoIHV1aWQgaXMgXCIlc1wiLicsIHZhbHVlLl91dWlkKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgY2MuZXJyb3IoJ0ludmFsaWQgU2NyaXB0Jyk7XG4gICAgICAgICAgICAvLyAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgfVxuICAgICAgICAgICAgLy99LFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdTY3JpcHQnLFxuICAgICAgICAgICAgdHlwZTogY2MuX1NjcmlwdCxcbiAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpJTlNQRUNUT1IuY29tcG9uZW50LnNjcmlwdCdcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHByb3BlcnR5IF9lbmFibGVkXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgX2VuYWJsZWQ6IHRydWUsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBjb21wb25lbnQgaXMgZW5hYmxlZCBvciBub3QuXG4gICAgICAgICAqICEjemgg6KGo56S66K+l57uE5Lu26Ieq6Lqr5piv5ZCm5ZCv55So44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBlbmFibGVkXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIGNvbXAuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAqIGNjLmxvZyhjb21wLmVuYWJsZWQpO1xuICAgICAgICAgKi9cbiAgICAgICAgZW5hYmxlZDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VuYWJsZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZW5hYmxlZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ub2RlLl9hY3RpdmVJbkhpZXJhcmNoeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBTY2hlZHVsZXIgPSBjYy5kaXJlY3Rvci5fY29tcFNjaGVkdWxlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBTY2hlZHVsZXIuZW5hYmxlQ29tcCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcFNjaGVkdWxlci5kaXNhYmxlQ29tcCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIGluZGljYXRlcyB3aGV0aGVyIHRoaXMgY29tcG9uZW50IGlzIGVuYWJsZWQgYW5kIGl0cyBub2RlIGlzIGFsc28gYWN0aXZlIGluIHRoZSBoaWVyYXJjaHkuXG4gICAgICAgICAqICEjemgg6KGo56S66K+l57uE5Lu25piv5ZCm6KKr5ZCv55So5bm25LiU5omA5Zyo55qE6IqC54K55Lmf5aSE5LqO5r+A5rS754q25oCB44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBlbmFibGVkSW5IaWVyYXJjaHlcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqIEByZWFkT25seVxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBjYy5sb2coY29tcC5lbmFibGVkSW5IaWVyYXJjaHkpO1xuICAgICAgICAgKi9cbiAgICAgICAgZW5hYmxlZEluSGllcmFyY2h5OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlZCAmJiB0aGlzLm5vZGUuX2FjdGl2ZUluSGllcmFyY2h5O1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogISNlbiBSZXR1cm5zIGEgdmFsdWUgd2hpY2ggdXNlZCB0byBpbmRpY2F0ZSB0aGUgb25Mb2FkIGdldCBjYWxsZWQgb3Igbm90LlxuICAgICAgICAgKiAhI3poIOi/lOWbnuS4gOS4quWAvOeUqOadpeWIpOaWrSBvbkxvYWQg5piv5ZCm6KKr6LCD55So6L+H77yM5LiN562J5LqOIDAg5pe26LCD55So6L+H77yM562J5LqOIDAg5pe25pyq6LCD55So44CCXG4gICAgICAgICAqIEBwcm9wZXJ0eSBfaXNPbkxvYWRDYWxsZWRcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICogQHJlYWRPbmx5XG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqIGNjLmxvZyh0aGlzLl9pc09uTG9hZENhbGxlZCA+IDApO1xuICAgICAgICAgKi9cbiAgICAgICAgX2lzT25Mb2FkQ2FsbGVkOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb2JqRmxhZ3MgJiBJc09uTG9hZENhbGxlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBMSUZFQ1lDTEUgTUVUSE9EU1xuXG4gICAgLy8gRmlyZWJhbGwgcHJvdmlkZXMgbGlmZWN5Y2xlIG1ldGhvZHMgdGhhdCB5b3UgY2FuIHNwZWNpZnkgdG8gaG9vayBpbnRvIHRoaXMgcHJvY2Vzcy5cbiAgICAvLyBXZSBwcm92aWRlIFByZSBtZXRob2RzLCB3aGljaCBhcmUgY2FsbGVkIHJpZ2h0IGJlZm9yZSBzb21ldGhpbmcgaGFwcGVucywgYW5kIFBvc3QgbWV0aG9kcyB3aGljaCBhcmUgY2FsbGVkIHJpZ2h0IGFmdGVyIHNvbWV0aGluZyBoYXBwZW5zLlxuXG4gICAgLyoqXG4gICAgICogISNlbiBVcGRhdGUgaXMgY2FsbGVkIGV2ZXJ5IGZyYW1lLCBpZiB0aGUgQ29tcG9uZW50IGlzIGVuYWJsZWQuPGJyLz5cbiAgICAgKiBUaGlzIGlzIGEgbGlmZWN5Y2xlIG1ldGhvZC4gSXQgbWF5IG5vdCBiZSBpbXBsZW1lbnRlZCBpbiB0aGUgc3VwZXIgY2xhc3MuIFlvdSBjYW4gb25seSBjYWxsIGl0cyBzdXBlciBjbGFzcyBtZXRob2QgaW5zaWRlIGl0LiBJdCBzaG91bGQgbm90IGJlIGNhbGxlZCBtYW51YWxseSBlbHNld2hlcmUuXG4gICAgICogISN6aCDlpoLmnpzor6Xnu4Tku7blkK/nlKjvvIzliJnmr4/luKfosIPnlKggdXBkYXRl44CCPGJyLz5cbiAgICAgKiDor6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgILlubbkuJTkvaDlj6rog73lnKjor6Xmlrnms5XlhoXpg6josIPnlKjniLbnsbvnmoTlrp7njrDvvIzkuI3lj6/lnKjlhbblroPlnLDmlrnnm7TmjqXosIPnlKjor6Xmlrnms5XjgIJcbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdCAtIHRoZSBkZWx0YSB0aW1lIGluIHNlY29uZHMgaXQgdG9vayB0byBjb21wbGV0ZSB0aGUgbGFzdCBmcmFtZVxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICB1cGRhdGU6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIExhdGVVcGRhdGUgaXMgY2FsbGVkIGV2ZXJ5IGZyYW1lLCBpZiB0aGUgQ29tcG9uZW50IGlzIGVuYWJsZWQuPGJyLz5cbiAgICAgKiBUaGlzIGlzIGEgbGlmZWN5Y2xlIG1ldGhvZC4gSXQgbWF5IG5vdCBiZSBpbXBsZW1lbnRlZCBpbiB0aGUgc3VwZXIgY2xhc3MuIFlvdSBjYW4gb25seSBjYWxsIGl0cyBzdXBlciBjbGFzcyBtZXRob2QgaW5zaWRlIGl0LiBJdCBzaG91bGQgbm90IGJlIGNhbGxlZCBtYW51YWxseSBlbHNld2hlcmUuXG4gICAgICogISN6aCDlpoLmnpzor6Xnu4Tku7blkK/nlKjvvIzliJnmr4/luKfosIPnlKggTGF0ZVVwZGF0ZeOAgjxici8+XG4gICAgICog6K+l5pa55rOV5Li655Sf5ZG95ZGo5pyf5pa55rOV77yM54i257G75pyq5b+F5Lya5pyJ5a6e546w44CC5bm25LiU5L2g5Y+q6IO95Zyo6K+l5pa55rOV5YaF6YOo6LCD55So54i257G755qE5a6e546w77yM5LiN5Y+v5Zyo5YW25a6D5Zyw5pa555u05o6l6LCD55So6K+l5pa55rOV44CCXG4gICAgICogQG1ldGhvZCBsYXRlVXBkYXRlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIGxhdGVVcGRhdGU6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBgX19wcmVsb2FkYCBpcyBjYWxsZWQgYmVmb3JlIGV2ZXJ5IG9uTG9hZC5cbiAgICAgKiBJdCBpcyB1c2VkIHRvIGluaXRpYWxpemUgdGhlIGJ1aWx0aW4gY29tcG9uZW50cyBpbnRlcm5hbGx5LFxuICAgICAqIHRvIGF2b2lkIGNoZWNraW5nIHdoZXRoZXIgb25Mb2FkIGlzIGNhbGxlZCBiZWZvcmUgZXZlcnkgcHVibGljIG1ldGhvZCBjYWxscy5cbiAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgcmVtb3ZlZCBpZiBzY3JpcHQgcHJpb3JpdHkgaXMgc3VwcG9ydGVkLlxuICAgICAqXG4gICAgICogQG1ldGhvZCBfX3ByZWxvYWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9fcHJlbG9hZDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBXaGVuIGF0dGFjaGluZyB0byBhbiBhY3RpdmUgbm9kZSBvciBpdHMgbm9kZSBmaXJzdCBhY3RpdmF0ZWQuXG4gICAgICogb25Mb2FkIGlzIGFsd2F5cyBjYWxsZWQgYmVmb3JlIGFueSBzdGFydCBmdW5jdGlvbnMsIHRoaXMgYWxsb3dzIHlvdSB0byBvcmRlciBpbml0aWFsaXphdGlvbiBvZiBzY3JpcHRzLjxici8+XG4gICAgICogVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IG1heSBub3QgYmUgaW1wbGVtZW50ZWQgaW4gdGhlIHN1cGVyIGNsYXNzLiBZb3UgY2FuIG9ubHkgY2FsbCBpdHMgc3VwZXIgY2xhc3MgbWV0aG9kIGluc2lkZSBpdC4gSXQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbWFudWFsbHkgZWxzZXdoZXJlLlxuICAgICAqICEjemhcbiAgICAgKiDlvZPpmYTliqDliLDkuIDkuKrmv4DmtLvnmoToioLngrnkuIrmiJbogIXlhbboioLngrnnrKzkuIDmrKHmv4DmtLvml7blgJnosIPnlKjjgIJvbkxvYWQg5oC75piv5Lya5Zyo5Lu75L2VIHN0YXJ0IOaWueazleiwg+eUqOWJjeaJp+ihjO+8jOi/meiDveeUqOS6juWuieaOkuiEmuacrOeahOWIneWni+WMlumhuuW6j+OAgjxici8+XG4gICAgICog6K+l5pa55rOV5Li655Sf5ZG95ZGo5pyf5pa55rOV77yM54i257G75pyq5b+F5Lya5pyJ5a6e546w44CC5bm25LiU5L2g5Y+q6IO95Zyo6K+l5pa55rOV5YaF6YOo6LCD55So54i257G755qE5a6e546w77yM5LiN5Y+v5Zyo5YW25a6D5Zyw5pa555u05o6l6LCD55So6K+l5pa55rOV44CCXG4gICAgICogQG1ldGhvZCBvbkxvYWRcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25Mb2FkOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIENhbGxlZCBiZWZvcmUgYWxsIHNjcmlwdHMnIHVwZGF0ZSBpZiB0aGUgQ29tcG9uZW50IGlzIGVuYWJsZWQgdGhlIGZpcnN0IHRpbWUuXG4gICAgICogVXN1YWxseSB1c2VkIHRvIGluaXRpYWxpemUgc29tZSBsb2dpYyB3aGljaCBuZWVkIHRvIGJlIGNhbGxlZCBhZnRlciBhbGwgY29tcG9uZW50cycgYG9ubG9hZGAgbWV0aG9kcyBjYWxsZWQuPGJyLz5cbiAgICAgKiBUaGlzIGlzIGEgbGlmZWN5Y2xlIG1ldGhvZC4gSXQgbWF5IG5vdCBiZSBpbXBsZW1lbnRlZCBpbiB0aGUgc3VwZXIgY2xhc3MuIFlvdSBjYW4gb25seSBjYWxsIGl0cyBzdXBlciBjbGFzcyBtZXRob2QgaW5zaWRlIGl0LiBJdCBzaG91bGQgbm90IGJlIGNhbGxlZCBtYW51YWxseSBlbHNld2hlcmUuXG4gICAgICogISN6aFxuICAgICAqIOWmguaenOivpee7hOS7tuesrOS4gOasoeWQr+eUqO+8jOWImeWcqOaJgOaciee7hOS7tueahCB1cGRhdGUg5LmL5YmN6LCD55So44CC6YCa5bi455So5LqO6ZyA6KaB5Zyo5omA5pyJ57uE5Lu255qEIG9uTG9hZCDliJ3lp4vljJblrozmr5XlkI7miafooYznmoTpgLvovpHjgII8YnIvPlxuICAgICAqIOivpeaWueazleS4uueUn+WRveWRqOacn+aWueazle+8jOeItuexu+acquW/heS8muacieWunueOsOOAguW5tuS4lOS9oOWPquiDveWcqOivpeaWueazleWGhemDqOiwg+eUqOeItuexu+eahOWunueOsO+8jOS4jeWPr+WcqOWFtuWug+WcsOaWueebtOaOpeiwg+eUqOivpeaWueazleOAglxuICAgICAqIEBtZXRob2Qgc3RhcnRcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgc3RhcnQ6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIENhbGxlZCB3aGVuIHRoaXMgY29tcG9uZW50IGJlY29tZXMgZW5hYmxlZCBhbmQgaXRzIG5vZGUgaXMgYWN0aXZlLjxici8+XG4gICAgICogVGhpcyBpcyBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IG1heSBub3QgYmUgaW1wbGVtZW50ZWQgaW4gdGhlIHN1cGVyIGNsYXNzLiBZb3UgY2FuIG9ubHkgY2FsbCBpdHMgc3VwZXIgY2xhc3MgbWV0aG9kIGluc2lkZSBpdC4gSXQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbWFudWFsbHkgZWxzZXdoZXJlLlxuICAgICAqICEjemgg5b2T6K+l57uE5Lu26KKr5ZCv55So77yM5bm25LiU5a6D55qE6IqC54K55Lmf5r+A5rS75pe244CCPGJyLz5cbiAgICAgKiDor6Xmlrnms5XkuLrnlJ/lkb3lkajmnJ/mlrnms5XvvIzniLbnsbvmnKrlv4XkvJrmnInlrp7njrDjgILlubbkuJTkvaDlj6rog73lnKjor6Xmlrnms5XlhoXpg6josIPnlKjniLbnsbvnmoTlrp7njrDvvIzkuI3lj6/lnKjlhbblroPlnLDmlrnnm7TmjqXosIPnlKjor6Xmlrnms5XjgIJcbiAgICAgKiBAbWV0aG9kIG9uRW5hYmxlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uRW5hYmxlOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogISNlbiBDYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBiZWNvbWVzIGRpc2FibGVkIG9yIGl0cyBub2RlIGJlY29tZXMgaW5hY3RpdmUuPGJyLz5cbiAgICAgKiBUaGlzIGlzIGEgbGlmZWN5Y2xlIG1ldGhvZC4gSXQgbWF5IG5vdCBiZSBpbXBsZW1lbnRlZCBpbiB0aGUgc3VwZXIgY2xhc3MuIFlvdSBjYW4gb25seSBjYWxsIGl0cyBzdXBlciBjbGFzcyBtZXRob2QgaW5zaWRlIGl0LiBJdCBzaG91bGQgbm90IGJlIGNhbGxlZCBtYW51YWxseSBlbHNld2hlcmUuXG4gICAgICogISN6aCDlvZPor6Xnu4Tku7booqvnpoHnlKjmiJboioLngrnlj5jkuLrml6DmlYjml7bosIPnlKjjgII8YnIvPlxuICAgICAqIOivpeaWueazleS4uueUn+WRveWRqOacn+aWueazle+8jOeItuexu+acquW/heS8muacieWunueOsOOAguW5tuS4lOS9oOWPquiDveWcqOivpeaWueazleWGhemDqOiwg+eUqOeItuexu+eahOWunueOsO+8jOS4jeWPr+WcqOWFtuWug+WcsOaWueebtOaOpeiwg+eUqOivpeaWueazleOAglxuICAgICAqIEBtZXRob2Qgb25EaXNhYmxlXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uRGlzYWJsZTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqICEjZW4gQ2FsbGVkIHdoZW4gdGhpcyBjb21wb25lbnQgd2lsbCBiZSBkZXN0cm95ZWQuPGJyLz5cbiAgICAgKiBUaGlzIGlzIGEgbGlmZWN5Y2xlIG1ldGhvZC4gSXQgbWF5IG5vdCBiZSBpbXBsZW1lbnRlZCBpbiB0aGUgc3VwZXIgY2xhc3MuIFlvdSBjYW4gb25seSBjYWxsIGl0cyBzdXBlciBjbGFzcyBtZXRob2QgaW5zaWRlIGl0LiBJdCBzaG91bGQgbm90IGJlIGNhbGxlZCBtYW51YWxseSBlbHNld2hlcmUuXG4gICAgICogISN6aCDlvZPor6Xnu4Tku7booqvplIDmr4Hml7bosIPnlKg8YnIvPlxuICAgICAqIOivpeaWueazleS4uueUn+WRveWRqOacn+aWueazle+8jOeItuexu+acquW/heS8muacieWunueOsOOAguW5tuS4lOS9oOWPquiDveWcqOivpeaWueazleWGhemDqOiwg+eUqOeItuexu+eahOWunueOsO+8jOS4jeWPr+WcqOWFtuWug+WcsOaWueebtOaOpeiwg+eUqOivpeaWueazleOAglxuICAgICAqIEBtZXRob2Qgb25EZXN0cm95XG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uRGVzdHJveTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2Qgb25Gb2N1c0luRWRpdG9yXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIG9uRm9jdXNJbkVkaXRvcjogbnVsbCxcbiAgICAvKipcbiAgICAgKiBAbWV0aG9kIG9uTG9zdEZvY3VzSW5FZGl0b3JcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgb25Mb3N0Rm9jdXNJbkVkaXRvcjogbnVsbCxcbiAgICAvKipcbiAgICAgKiAhI2VuIENhbGxlZCB0byBpbml0aWFsaXplIHRoZSBjb21wb25lbnQgb3Igbm9kZeKAmXMgcHJvcGVydGllcyB3aGVuIGFkZGluZyB0aGUgY29tcG9uZW50IHRoZSBmaXJzdCB0aW1lIG9yIHdoZW4gdGhlIFJlc2V0IGNvbW1hbmQgaXMgdXNlZC4gVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZCBpbiBlZGl0b3IuXG4gICAgICogISN6aCDnlKjmnaXliJ3lp4vljJbnu4Tku7bmiJboioLngrnnmoTkuIDkupvlsZ7mgKfvvIzlvZPor6Xnu4Tku7booqvnrKzkuIDmrKHmt7vliqDliLDoioLngrnkuIrmiJbnlKjmiLfngrnlh7vkuoblroPnmoQgUmVzZXQg6I+c5Y2V5pe26LCD55So44CC6L+Z5Liq5Zue6LCD5Y+q5Lya5Zyo57yW6L6R5Zmo5LiL6LCD55So44CCXG4gICAgICogQG1ldGhvZCByZXNldEluRWRpdG9yXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHJlc2V0SW5FZGl0b3I6IG51bGwsXG5cbiAgICAvLyBQVUJMSUNcblxuICAgIC8qKlxuICAgICAqICEjZW4gQWRkcyBhIGNvbXBvbmVudCBjbGFzcyB0byB0aGUgbm9kZS4gWW91IGNhbiBhbHNvIGFkZCBjb21wb25lbnQgdG8gbm9kZSBieSBwYXNzaW5nIGluIHRoZSBuYW1lIG9mIHRoZSBzY3JpcHQuXG4gICAgICogISN6aCDlkJHoioLngrnmt7vliqDkuIDkuKrnu4Tku7bnsbvvvIzkvaDov5jlj6/ku6XpgJrov4fkvKDlhaXohJrmnKznmoTlkI3np7DmnaXmt7vliqDnu4Tku7bjgIJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgYWRkQ29tcG9uZW50XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IHR5cGVPckNsYXNzTmFtZSAtIHRoZSBjb25zdHJ1Y3RvciBvciB0aGUgY2xhc3MgbmFtZSBvZiB0aGUgY29tcG9uZW50IHRvIGFkZFxuICAgICAqIEByZXR1cm4ge0NvbXBvbmVudH0gLSB0aGUgbmV3bHkgYWRkZWQgY29tcG9uZW50XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgc3ByaXRlID0gbm9kZS5hZGRDb21wb25lbnQoY2MuU3ByaXRlKTtcbiAgICAgKiB2YXIgdGVzdCA9IG5vZGUuYWRkQ29tcG9uZW50KFwiVGVzdFwiKTtcbiAgICAgKiBAdHlwZXNjcmlwdFxuICAgICAqIGFkZENvbXBvbmVudDxUIGV4dGVuZHMgQ29tcG9uZW50Pih0eXBlOiB7bmV3KCk6IFR9KTogVFxuICAgICAqIGFkZENvbXBvbmVudChjbGFzc05hbWU6IHN0cmluZyk6IGFueVxuICAgICAqL1xuICAgIGFkZENvbXBvbmVudDogZnVuY3Rpb24gYWRkQ29tcG9uZW50KHR5cGVPckNsYXNzTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlLmFkZENvbXBvbmVudCh0eXBlT3JDbGFzc05hbWUpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBSZXR1cm5zIHRoZSBjb21wb25lbnQgb2Ygc3VwcGxpZWQgdHlwZSBpZiB0aGUgbm9kZSBoYXMgb25lIGF0dGFjaGVkLCBudWxsIGlmIGl0IGRvZXNuJ3QuPGJyLz5cbiAgICAgKiBZb3UgY2FuIGFsc28gZ2V0IGNvbXBvbmVudCBpbiB0aGUgbm9kZSBieSBwYXNzaW5nIGluIHRoZSBuYW1lIG9mIHRoZSBzY3JpcHQuXG4gICAgICogISN6aFxuICAgICAqIOiOt+WPluiKgueCueS4iuaMh+Wumuexu+Wei+eahOe7hOS7tu+8jOWmguaenOiKgueCueaciemZhOWKoOaMh+Wumuexu+Wei+eahOe7hOS7tu+8jOWImei/lOWbnu+8jOWmguaenOayoeacieWImeS4uuepuuOAgjxici8+XG4gICAgICog5Lyg5YWl5Y+C5pWw5Lmf5Y+v5Lul5piv6ISa5pys55qE5ZCN56ew44CCXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldENvbXBvbmVudFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSB0eXBlT3JDbGFzc05hbWVcbiAgICAgKiBAcmV0dXJuIHtDb21wb25lbnR9XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBnZXQgc3ByaXRlIGNvbXBvbmVudC5cbiAgICAgKiB2YXIgc3ByaXRlID0gbm9kZS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKTtcbiAgICAgKiAvLyBnZXQgY3VzdG9tIHRlc3QgY2Fsc3MuXG4gICAgICogdmFyIHRlc3QgPSBub2RlLmdldENvbXBvbmVudChcIlRlc3RcIik7XG4gICAgICogQHR5cGVzY3JpcHRcbiAgICAgKiBnZXRDb21wb25lbnQ8VCBleHRlbmRzIENvbXBvbmVudD4odHlwZToge3Byb3RvdHlwZTogVH0pOiBUXG4gICAgICogZ2V0Q29tcG9uZW50KGNsYXNzTmFtZTogc3RyaW5nKTogYW55XG4gICAgICovXG4gICAgZ2V0Q29tcG9uZW50OiBmdW5jdGlvbiBnZXRDb21wb25lbnQodHlwZU9yQ2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KHR5cGVPckNsYXNzTmFtZSk7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogISNlbiBSZXR1cm5zIGFsbCBjb21wb25lbnRzIG9mIHN1cHBsaWVkIFR5cGUgaW4gdGhlIG5vZGUuXG4gICAgICogISN6aCDov5Tlm57oioLngrnkuIrmjIflrprnsbvlnovnmoTmiYDmnInnu4Tku7bjgIJcbiAgICAgKlxuICAgICAqIEBtZXRob2QgZ2V0Q29tcG9uZW50c1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSB0eXBlT3JDbGFzc05hbWVcbiAgICAgKiBAcmV0dXJuIHtDb21wb25lbnRbXX1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBzcHJpdGVzID0gbm9kZS5nZXRDb21wb25lbnRzKGNjLlNwcml0ZSk7XG4gICAgICogdmFyIHRlc3RzID0gbm9kZS5nZXRDb21wb25lbnRzKFwiVGVzdFwiKTtcbiAgICAgKiBAdHlwZXNjcmlwdFxuICAgICAqIGdldENvbXBvbmVudHM8VCBleHRlbmRzIENvbXBvbmVudD4odHlwZToge3Byb3RvdHlwZTogVH0pOiBUW11cbiAgICAgKiBnZXRDb21wb25lbnRzKGNsYXNzTmFtZTogc3RyaW5nKTogYW55W11cbiAgICAgKi9cbiAgICBnZXRDb21wb25lbnRzOiBmdW5jdGlvbiBnZXRDb21wb25lbnRzKHR5cGVPckNsYXNzTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlLmdldENvbXBvbmVudHModHlwZU9yQ2xhc3NOYW1lKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFJldHVybnMgdGhlIGNvbXBvbmVudCBvZiBzdXBwbGllZCB0eXBlIGluIGFueSBvZiBpdHMgY2hpbGRyZW4gdXNpbmcgZGVwdGggZmlyc3Qgc2VhcmNoLlxuICAgICAqICEjemgg6YCS5b2S5p+l5om+5omA5pyJ5a2Q6IqC54K55Lit56ys5LiA5Liq5Yy56YWN5oyH5a6a57G75Z6L55qE57uE5Lu244CCXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldENvbXBvbmVudEluQ2hpbGRyZW5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gdHlwZU9yQ2xhc3NOYW1lXG4gICAgICogQHJldHVybnMge0NvbXBvbmVudH1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBzcHJpdGUgPSBub2RlLmdldENvbXBvbmVudEluQ2hpbGRyZW4oY2MuU3ByaXRlKTtcbiAgICAgKiB2YXIgVGVzdCA9IG5vZGUuZ2V0Q29tcG9uZW50SW5DaGlsZHJlbihcIlRlc3RcIik7XG4gICAgICogQHR5cGVzY3JpcHRcbiAgICAgKiBnZXRDb21wb25lbnRJbkNoaWxkcmVuPFQgZXh0ZW5kcyBDb21wb25lbnQ+KHR5cGU6IHtwcm90b3R5cGU6IFR9KTogVFxuICAgICAqIGdldENvbXBvbmVudEluQ2hpbGRyZW4oY2xhc3NOYW1lOiBzdHJpbmcpOiBhbnlcbiAgICAgKi9cbiAgICBnZXRDb21wb25lbnRJbkNoaWxkcmVuOiBmdW5jdGlvbiBnZXRDb21wb25lbnRJbkNoaWxkcmVuKHR5cGVPckNsYXNzTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlLmdldENvbXBvbmVudEluQ2hpbGRyZW4odHlwZU9yQ2xhc3NOYW1lKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFJldHVybnMgdGhlIGNvbXBvbmVudHMgb2Ygc3VwcGxpZWQgdHlwZSBpbiBzZWxmIG9yIGFueSBvZiBpdHMgY2hpbGRyZW4gdXNpbmcgZGVwdGggZmlyc3Qgc2VhcmNoLlxuICAgICAqICEjemgg6YCS5b2S5p+l5om+6Ieq6Lqr5oiW5omA5pyJ5a2Q6IqC54K55Lit5oyH5a6a57G75Z6L55qE57uE5Lu2XG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGdldENvbXBvbmVudHNJbkNoaWxkcmVuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IHR5cGVPckNsYXNzTmFtZVxuICAgICAqIEByZXR1cm5zIHtDb21wb25lbnRbXX1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBzcHJpdGVzID0gbm9kZS5nZXRDb21wb25lbnRzSW5DaGlsZHJlbihjYy5TcHJpdGUpO1xuICAgICAqIHZhciB0ZXN0cyA9IG5vZGUuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4oXCJUZXN0XCIpO1xuICAgICAqIEB0eXBlc2NyaXB0XG4gICAgICogZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW48VCBleHRlbmRzIENvbXBvbmVudD4odHlwZToge3Byb3RvdHlwZTogVH0pOiBUW11cbiAgICAgKiBnZXRDb21wb25lbnRzSW5DaGlsZHJlbihjbGFzc05hbWU6IHN0cmluZyk6IGFueVtdXG4gICAgICovXG4gICAgZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW46IGZ1bmN0aW9uIGdldENvbXBvbmVudHNJbkNoaWxkcmVuKHR5cGVPckNsYXNzTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2RlLmdldENvbXBvbmVudHNJbkNoaWxkcmVuKHR5cGVPckNsYXNzTmFtZSk7XG4gICAgfSxcblxuXG4gICAgLy8gVklSVFVBTFxuXG4gICAgLyoqXG4gICAgICogISNlblxuICAgICAqIElmIHRoZSBjb21wb25lbnQncyBib3VuZGluZyBib3ggaXMgZGlmZmVyZW50IGZyb20gdGhlIG5vZGUncywgeW91IGNhbiBpbXBsZW1lbnQgdGhpcyBtZXRob2QgdG8gc3VwcGx5XG4gICAgICogYSBjdXN0b20gYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveCAoQUFCQiksIHNvIHRoZSBlZGl0b3IncyBzY2VuZSB2aWV3IGNhbiBwZXJmb3JtIGhpdCB0ZXN0IHByb3Blcmx5LlxuICAgICAqICEjemhcbiAgICAgKiDlpoLmnpznu4Tku7bnmoTljIXlm7Tnm5LkuI7oioLngrnkuI3lkIzvvIzmgqjlj6/ku6Xlrp7njrDor6Xmlrnms5Xku6Xmj5Dkvpvoh6rlrprkuYnnmoTovbTlkJHlr7npvZDnmoTljIXlm7Tnm5LvvIhBQUJC77yJ77yMXG4gICAgICog5Lul5L6/57yW6L6R5Zmo55qE5Zy65pmv6KeG5Zu+5Y+v5Lul5q2j56Gu5Zyw5omn6KGM54K56YCJ5rWL6K+V44CCXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIF9nZXRMb2NhbEJvdW5kc1xuICAgICAqIEBwYXJhbSB7UmVjdH0gb3V0X3JlY3QgLSB0aGUgUmVjdCB0byByZWNlaXZlIHRoZSBib3VuZGluZyBib3hcbiAgICAgKi9cbiAgICBfZ2V0TG9jYWxCb3VuZHM6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogb25SZXN0b3JlIGlzIGNhbGxlZCBhZnRlciB0aGUgdXNlciBjbGlja3MgdGhlIFJlc2V0IGl0ZW0gaW4gdGhlIEluc3BlY3RvcidzIGNvbnRleHQgbWVudSBvciBwZXJmb3Jtc1xuICAgICAqIGFuIHVuZG8gb3BlcmF0aW9uIG9uIHRoaXMgY29tcG9uZW50Ljxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiBJZiB0aGUgY29tcG9uZW50IGNvbnRhaW5zIHRoZSBcImludGVybmFsIHN0YXRlXCIsIHNob3J0IGZvciBcInRlbXBvcmFyeSBtZW1iZXIgdmFyaWFibGVzIHdoaWNoIG5vdCBpbmNsdWRlZDxici8+XG4gICAgICogaW4gaXRzIENDQ2xhc3MgcHJvcGVydGllc1wiLCB0aGVuIHlvdSBtYXkgbmVlZCB0byBpbXBsZW1lbnQgdGhpcyBmdW5jdGlvbi48YnIvPlxuICAgICAqIDxici8+XG4gICAgICogVGhlIGVkaXRvciB3aWxsIGNhbGwgdGhlIGdldHNldCBhY2Nlc3NvcnMgb2YgeW91ciBjb21wb25lbnQgdG8gcmVjb3JkL3Jlc3RvcmUgdGhlIGNvbXBvbmVudCdzIHN0YXRlPGJyLz5cbiAgICAgKiBmb3IgdW5kby9yZWRvIG9wZXJhdGlvbi4gSG93ZXZlciwgaW4gZXh0cmVtZSBjYXNlcywgaXQgbWF5IG5vdCB3b3JrcyB3ZWxsLiBUaGVuIHlvdSBzaG91bGQgaW1wbGVtZW50PGJyLz5cbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHRvIG1hbnVhbGx5IHN5bmNocm9uaXplIHlvdXIgY29tcG9uZW50J3MgXCJpbnRlcm5hbCBzdGF0ZXNcIiB3aXRoIGl0cyBwdWJsaWMgcHJvcGVydGllcy48YnIvPlxuICAgICAqIE9uY2UgeW91IGltcGxlbWVudCB0aGlzIGZ1bmN0aW9uLCBhbGwgdGhlIGdldHNldCBhY2Nlc3NvcnMgb2YgeW91ciBjb21wb25lbnQgd2lsbCBub3QgYmUgY2FsbGVkIHdoZW48YnIvPlxuICAgICAqIHRoZSB1c2VyIHBlcmZvcm1zIGFuIHVuZG8vcmVkbyBvcGVyYXRpb24uIFdoaWNoIG1lYW5zIHRoYXQgb25seSB0aGUgcHJvcGVydGllcyB3aXRoIGRlZmF1bHQgdmFsdWU8YnIvPlxuICAgICAqIHdpbGwgYmUgcmVjb3JkZWQgb3IgcmVzdG9yZWQgYnkgZWRpdG9yLjxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiBTaW1pbGFybHksIHRoZSBlZGl0b3IgbWF5IGZhaWxlZCB0byByZXNldCB5b3VyIGNvbXBvbmVudCBjb3JyZWN0bHkgaW4gZXh0cmVtZSBjYXNlcy4gVGhlbiBpZiB5b3UgbmVlZDxici8+XG4gICAgICogdG8gc3VwcG9ydCB0aGUgcmVzZXQgbWVudSwgeW91IHNob3VsZCBtYW51YWxseSBzeW5jaHJvbml6ZSB5b3VyIGNvbXBvbmVudCdzIFwiaW50ZXJuYWwgc3RhdGVzXCIgd2l0aCBpdHM8YnIvPlxuICAgICAqIHByb3BlcnRpZXMgaW4gdGhpcyBmdW5jdGlvbi4gT25jZSB5b3UgaW1wbGVtZW50IHRoaXMgZnVuY3Rpb24sIGFsbCB0aGUgZ2V0c2V0IGFjY2Vzc29ycyBvZiB5b3VyIGNvbXBvbmVudDxici8+XG4gICAgICogd2lsbCBub3QgYmUgY2FsbGVkIGR1cmluZyByZXNldCBvcGVyYXRpb24uIFdoaWNoIG1lYW5zIHRoYXQgb25seSB0aGUgcHJvcGVydGllcyB3aXRoIGRlZmF1bHQgdmFsdWU8YnIvPlxuICAgICAqIHdpbGwgYmUgcmVzZXQgYnkgZWRpdG9yLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZCBpbiBlZGl0b3IgbW9kZS5cbiAgICAgKiAhI3poXG4gICAgICogb25SZXN0b3JlIOaYr+eUqOaIt+WcqOajgOafpeWZqOiPnOWNleeCueWHuyBSZXNldCDml7bvvIzlr7nmraTnu4Tku7bmiafooYzmkqTmtojmk43kvZzlkI7osIPnlKjnmoTjgII8YnIvPlxuICAgICAqIDxici8+XG4gICAgICog5aaC5p6c57uE5Lu25YyF5ZCr5LqG4oCc5YaF6YOo54q25oCB4oCd77yI5LiN5ZyoIENDQ2xhc3Mg5bGe5oCn5Lit5a6a5LmJ55qE5Li05pe25oiQ5ZGY5Y+Y6YeP77yJ77yM6YKj5LmI5L2g5Y+v6IO96ZyA6KaB5a6e546w6K+l5pa55rOV44CCPGJyLz5cbiAgICAgKiA8YnIvPlxuICAgICAqIOe8lui+keWZqOaJp+ihjOaSpOmUgC/ph43lgZrmk43kvZzml7bvvIzlsIbosIPnlKjnu4Tku7bnmoQgZ2V0IHNldCDmnaXlvZXliLblkozov5jljp/nu4Tku7bnmoTnirbmgIHjgIJcbiAgICAgKiDnhLbogIzvvIzlnKjmnoHnq6/nmoTmg4XlhrXkuIvvvIzlroPlj6/og73ml6Dms5Xoia/lpb3ov5DkvZzjgII8YnIvPlxuICAgICAqIOmCo+S5iOS9oOWwseW6lOivpeWunueOsOi/meS4quaWueazle+8jOaJi+WKqOagueaNrue7hOS7tueahOWxnuaAp+WQjOatpeKAnOWGhemDqOeKtuaAgeKAneOAglxuICAgICAqIOS4gOaXpuS9oOWunueOsOi/meS4quaWueazle+8jOW9k+eUqOaIt+aSpOmUgOaIlumHjeWBmuaXtu+8jOe7hOS7tueahOaJgOaciSBnZXQgc2V0IOmDveS4jeS8muWGjeiiq+iwg+eUqOOAglxuICAgICAqIOi/meaEj+WRs+edgOS7heS7heaMh+WumuS6hum7mOiupOWAvOeahOWxnuaAp+Wwhuiiq+e8lui+keWZqOiusOW9leWSjOi/mOWOn+OAgjxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiDlkIzmoLfnmoTvvIznvJbovpHlj6/og73ml6Dms5XlnKjmnoHnq6/mg4XlhrXkuIvmraPnoa7lnLDph43nva7mgqjnmoTnu4Tku7bjgII8YnIvPlxuICAgICAqIOS6juaYr+WmguaenOS9oOmcgOimgeaUr+aMgee7hOS7tumHjee9ruiPnOWNle+8jOS9oOmcgOimgeWcqOivpeaWueazleS4reaJi+W3peWQjOatpee7hOS7tuWxnuaAp+WIsOKAnOWGhemDqOeKtuaAgeKAneOAgjxici8+XG4gICAgICog5LiA5pem5L2g5a6e546w6L+Z5Liq5pa55rOV77yM57uE5Lu255qE5omA5pyJIGdldCBzZXQg6YO95LiN5Lya5Zyo6YeN572u5pON5L2c5pe26KKr6LCD55So44CCXG4gICAgICog6L+Z5oSP5ZGz552A5LuF5LuF5oyH5a6a5LqG6buY6K6k5YC855qE5bGe5oCn5bCG6KKr57yW6L6R5Zmo6YeN572u44CCXG4gICAgICogPGJyLz5cbiAgICAgKiDmraTmlrnms5Xku4XlnKjnvJbovpHlmajkuIvkvJrooqvosIPnlKjjgIJcbiAgICAgKiBAbWV0aG9kIG9uUmVzdG9yZVxuICAgICAqL1xuICAgIG9uUmVzdG9yZTogbnVsbCxcblxuICAgIC8vIE9WRVJSSURFXG5cbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICBpZiAoQ0NfRURJVE9SKSB7XG4gICAgICAgICAgICB2YXIgZGVwZW5kID0gdGhpcy5ub2RlLl9nZXREZXBlbmRDb21wb25lbnQodGhpcyk7XG4gICAgICAgICAgICBpZiAoZGVwZW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNjLmVycm9ySUQoMzYyNiwgY2MuanMuZ2V0Q2xhc3NOYW1lKHRoaXMpLCBjYy5qcy5nZXRDbGFzc05hbWUoZGVwZW5kKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3N1cGVyKCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbmFibGVkICYmIHRoaXMubm9kZS5fYWN0aXZlSW5IaWVyYXJjaHkpIHtcbiAgICAgICAgICAgICAgICBjYy5kaXJlY3Rvci5fY29tcFNjaGVkdWxlci5kaXNhYmxlQ29tcCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgX29uUHJlRGVzdHJveTogZnVuY3Rpb24gX29uUHJlRGVzdHJveSgpIHtcbiAgICAgICAgLy8gU2NoZWR1bGVzXG4gICAgICAgIHRoaXMudW5zY2hlZHVsZUFsbENhbGxiYWNrcygpO1xuXG4gICAgICAgIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzXG4gICAgICAgIHZhciBldmVudFRhcmdldHMgPSB0aGlzLl9fZXZlbnRUYXJnZXRzO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50VGFyZ2V0cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBldmVudFRhcmdldHNbaV07XG4gICAgICAgICAgICB0YXJnZXQgJiYgdGFyZ2V0LnRhcmdldE9mZih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBldmVudFRhcmdldHMubGVuZ3RoID0gMDtcblxuICAgICAgICAvL1xuICAgICAgICBpZiAoQ0NfRURJVE9SICYmICFDQ19URVNUKSB7XG4gICAgICAgICAgICBfU2NlbmUuQXNzZXRzV2F0Y2hlci5zdG9wKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gb25EZXN0cm95XG4gICAgICAgIGNjLmRpcmVjdG9yLl9ub2RlQWN0aXZhdG9yLmRlc3Ryb3lDb21wKHRoaXMpO1xuXG4gICAgICAgIC8vIGRvIHJlbW92ZSBjb21wb25lbnRcbiAgICAgICAgdGhpcy5ub2RlLl9yZW1vdmVDb21wb25lbnQodGhpcyk7XG4gICAgfSxcbiAgICBfaW5zdGFudGlhdGU6IGZ1bmN0aW9uIF9pbnN0YW50aWF0ZShjbG9uZWQpIHtcbiAgICAgICAgaWYgKCFjbG9uZWQpIHtcbiAgICAgICAgICAgIGNsb25lZCA9IGNjLmluc3RhbnRpYXRlLl9jbG9uZSh0aGlzLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjbG9uZWQubm9kZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfSxcblxuXG4gICAgLy8gU2NoZWR1bGVyXG5cbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogU2NoZWR1bGVzIGEgY3VzdG9tIHNlbGVjdG9yLjxici8+XG4gICAgICogSWYgdGhlIHNlbGVjdG9yIGlzIGFscmVhZHkgc2NoZWR1bGVkLCB0aGVuIHRoZSBpbnRlcnZhbCBwYXJhbWV0ZXIgd2lsbCBiZSB1cGRhdGVkIHdpdGhvdXQgc2NoZWR1bGluZyBpdCBhZ2Fpbi5cbiAgICAgKiAhI3poXG4gICAgICog6LCD5bqm5LiA5Liq6Ieq5a6a5LmJ55qE5Zue6LCD5Ye95pWw44CCPGJyLz5cbiAgICAgKiDlpoLmnpzlm57osIPlh73mlbDlt7LosIPluqbvvIzpgqPkuYjlsIbkuI3kvJrph43lpI3osIPluqblroPvvIzlj6rkvJrmm7TmlrDml7bpl7Tpl7TpmpTlj4LmlbDjgIJcbiAgICAgKiBAbWV0aG9kIHNjaGVkdWxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtpbnRlcnZhbD0wXSAgVGljayBpbnRlcnZhbCBpbiBzZWNvbmRzLiAwIG1lYW5zIHRpY2sgZXZlcnkgZnJhbWUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtyZXBlYXQ9Y2MubWFjcm8uUkVQRUFUX0ZPUkVWRVJdICAgIFRoZSBzZWxlY3RvciB3aWxsIGJlIGV4ZWN1dGVkIChyZXBlYXQgKyAxKSB0aW1lcywgeW91IGNhbiB1c2UgY2MubWFjcm8uUkVQRUFUX0ZPUkVWRVIgZm9yIHRpY2sgaW5maW5pdGVseS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2RlbGF5PTBdICAgICBUaGUgYW1vdW50IG9mIHRpbWUgdGhhdCB0aGUgZmlyc3QgdGljayB3aWxsIHdhaXQgYmVmb3JlIGV4ZWN1dGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciB0aW1lQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICAgKiAgIGNjLmxvZyhcInRpbWU6IFwiICsgZHQpO1xuICAgICAqIH1cbiAgICAgKiB0aGlzLnNjaGVkdWxlKHRpbWVDYWxsYmFjaywgMSk7XG4gICAgICovXG4gICAgc2NoZWR1bGU6IGZ1bmN0aW9uIHNjaGVkdWxlKGNhbGxiYWNrLCBpbnRlcnZhbCwgcmVwZWF0LCBkZWxheSkge1xuICAgICAgICBjYy5hc3NlcnRJRChjYWxsYmFjaywgMTYxOSk7XG4gICAgICAgIGNjLmFzc2VydElEKGludGVydmFsID49IDAsIDE2MjApO1xuXG4gICAgICAgIGludGVydmFsID0gaW50ZXJ2YWwgfHwgMDtcbiAgICAgICAgcmVwZWF0ID0gaXNOYU4ocmVwZWF0KSA/IGNjLm1hY3JvLlJFUEVBVF9GT1JFVkVSIDogcmVwZWF0O1xuICAgICAgICBkZWxheSA9IGRlbGF5IHx8IDA7XG5cbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IGNjLmRpcmVjdG9yLmdldFNjaGVkdWxlcigpO1xuXG4gICAgICAgIC8vIHNob3VsZCBub3QgdXNlIGVuYWJsZWRJbkhpZXJhcmNoeSB0byBqdWRnZSB3aGV0aGVyIHBhdXNlZCxcbiAgICAgICAgLy8gYmVjYXVzZSBlbmFibGVkSW5IaWVyYXJjaHkgaXMgYXNzaWduZWQgYWZ0ZXIgb25FbmFibGUuXG4gICAgICAgIC8vIEFjdHVhbGx5LCBpZiBub3QgeWV0IHNjaGVkdWxlZCwgcmVzdW1lVGFyZ2V0L3BhdXNlVGFyZ2V0IGhhcyBubyBlZmZlY3Qgb24gY29tcG9uZW50LFxuICAgICAgICAvLyB0aGVyZWZvcmUgdGhlcmUgaXMgbm8gd2F5IHRvIGd1YXJhbnRlZSB0aGUgcGF1c2VkIHN0YXRlIG90aGVyIHRoYW4gaXNUYXJnZXRQYXVzZWQuXG4gICAgICAgIHZhciBwYXVzZWQgPSBzY2hlZHVsZXIuaXNUYXJnZXRQYXVzZWQodGhpcyk7XG5cbiAgICAgICAgc2NoZWR1bGVyLnNjaGVkdWxlKGNhbGxiYWNrLCB0aGlzLCBpbnRlcnZhbCwgcmVwZWF0LCBkZWxheSwgcGF1c2VkKTtcbiAgICB9LFxuXG5cbiAgICAvKipcbiAgICAgKiAhI2VuIFNjaGVkdWxlcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgcnVucyBvbmx5IG9uY2UsIHdpdGggYSBkZWxheSBvZiAwIG9yIGxhcmdlci5cbiAgICAgKiAhI3poIOiwg+W6puS4gOS4quWPqui/kOihjOS4gOasoeeahOWbnuiwg+WHveaVsO+8jOWPr+S7peaMh+WumiAwIOiuqeWbnuiwg+WHveaVsOWcqOS4i+S4gOW4p+eri+WNs+aJp+ihjOaIluiAheWcqOS4gOWumueahOW7tuaXtuS5i+WQjuaJp+ihjOOAglxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVPbmNlXG4gICAgICogQHNlZSBjYy5Ob2RlI3NjaGVkdWxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgIEEgZnVuY3Rpb24gd3JhcHBlZCBhcyBhIHNlbGVjdG9yXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtkZWxheT0wXSAgVGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgdGhlIGZpcnN0IHRpY2sgd2lsbCB3YWl0IGJlZm9yZSBleGVjdXRpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgdGltZUNhbGxiYWNrID0gZnVuY3Rpb24gKGR0KSB7XG4gICAgICogICBjYy5sb2coXCJ0aW1lOiBcIiArIGR0KTtcbiAgICAgKiB9XG4gICAgICogdGhpcy5zY2hlZHVsZU9uY2UodGltZUNhbGxiYWNrLCAyKTtcbiAgICAgKi9cbiAgICBzY2hlZHVsZU9uY2U6IGZ1bmN0aW9uIHNjaGVkdWxlT25jZShjYWxsYmFjaywgZGVsYXkpIHtcbiAgICAgICAgdGhpcy5zY2hlZHVsZShjYWxsYmFjaywgMCwgMCwgZGVsYXkpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW4gVW5zY2hlZHVsZXMgYSBjdXN0b20gY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICogISN6aCDlj5bmtojosIPluqbkuIDkuKroh6rlrprkuYnnmoTlm57osIPlh73mlbDjgIJcbiAgICAgKiBAbWV0aG9kIHVuc2NoZWR1bGVcbiAgICAgKiBAc2VlIGNjLk5vZGUjc2NoZWR1bGVcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja19mbiAgQSBmdW5jdGlvbiB3cmFwcGVkIGFzIGEgc2VsZWN0b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHRoaXMudW5zY2hlZHVsZShfY2FsbGJhY2spO1xuICAgICAqL1xuICAgIHVuc2NoZWR1bGU6IGZ1bmN0aW9uIHVuc2NoZWR1bGUoY2FsbGJhY2tfZm4pIHtcbiAgICAgICAgaWYgKCFjYWxsYmFja19mbikgcmV0dXJuO1xuXG4gICAgICAgIGNjLmRpcmVjdG9yLmdldFNjaGVkdWxlcigpLnVuc2NoZWR1bGUoY2FsbGJhY2tfZm4sIHRoaXMpO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiB1bnNjaGVkdWxlIGFsbCBzY2hlZHVsZWQgY2FsbGJhY2sgZnVuY3Rpb25zOiBjdXN0b20gY2FsbGJhY2sgZnVuY3Rpb25zLCBhbmQgdGhlICd1cGRhdGUnIGNhbGxiYWNrIGZ1bmN0aW9uLjxici8+XG4gICAgICogQWN0aW9ucyBhcmUgbm90IGFmZmVjdGVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqICEjemgg5Y+W5raI6LCD5bqm5omA5pyJ5bey6LCD5bqm55qE5Zue6LCD5Ye95pWw77ya5a6a5Yi255qE5Zue6LCD5Ye95pWw5Lul5Y+KICd1cGRhdGUnIOWbnuiwg+WHveaVsOOAguWKqOS9nOS4jeWPl+atpOaWueazleW9seWTjeOAglxuICAgICAqIEBtZXRob2QgdW5zY2hlZHVsZUFsbENhbGxiYWNrc1xuICAgICAqIEBleGFtcGxlXG4gICAgICogdGhpcy51bnNjaGVkdWxlQWxsQ2FsbGJhY2tzKCk7XG4gICAgICovXG4gICAgdW5zY2hlZHVsZUFsbENhbGxiYWNrczogZnVuY3Rpb24gdW5zY2hlZHVsZUFsbENhbGxiYWNrcygpIHtcbiAgICAgICAgY2MuZGlyZWN0b3IuZ2V0U2NoZWR1bGVyKCkudW5zY2hlZHVsZUFsbEZvclRhcmdldCh0aGlzKTtcbiAgICB9XG59KTtcblxuQ29tcG9uZW50Ll9yZXF1aXJlQ29tcG9uZW50ID0gbnVsbDtcbkNvbXBvbmVudC5fZXhlY3V0aW9uT3JkZXIgPSAwO1xuXG5pZiAoQ0NfRURJVE9SIHx8IENDX1RFU1QpIHtcblxuICAgIC8vIElOSEVSSVRBQkxFIFNUQVRJQyBNRU1CRVJTXG5cbiAgICBDb21wb25lbnQuX2V4ZWN1dGVJbkVkaXRNb2RlID0gZmFsc2U7XG4gICAgQ29tcG9uZW50Ll9wbGF5T25Gb2N1cyA9IGZhbHNlO1xuICAgIENvbXBvbmVudC5fZGlzYWxsb3dNdWx0aXBsZSA9IG51bGw7XG4gICAgQ29tcG9uZW50Ll9oZWxwID0gJyc7XG5cbiAgICAvLyBOT04tSU5IRVJJVEVEIFNUQVRJQyBNRU1CRVJTXG4gICAgLy8gKFR5cGVTY3JpcHQgMi4zIHdpbGwgc3RpbGwgaW5oZXJpdCB0aGVtLCBzbyBhbHdheXMgY2hlY2sgaGFzT3duUHJvcGVydHkgYmVmb3JlIHVzaW5nKVxuXG4gICAganMudmFsdWUoQ29tcG9uZW50LCAnX2luc3BlY3RvcicsICcnLCB0cnVlKTtcbiAgICBqcy52YWx1ZShDb21wb25lbnQsICdfaWNvbicsICcnLCB0cnVlKTtcblxuICAgIC8vIENPTVBPTkVOVCBIRUxQRVJTXG5cbiAgICBjYy5fY29tcG9uZW50TWVudUl0ZW1zID0gW107XG5cbiAgICBDb21wb25lbnQuX2FkZE1lbnVJdGVtID0gZnVuY3Rpb24gKGNscywgcGF0aCwgcHJpb3JpdHkpIHtcbiAgICAgICAgY2MuX2NvbXBvbmVudE1lbnVJdGVtcy5wdXNoKHtcbiAgICAgICAgICAgIGNvbXBvbmVudDogY2xzLFxuICAgICAgICAgICAgbWVudVBhdGg6IHBhdGgsXG4gICAgICAgICAgICBwcmlvcml0eTogcHJpb3JpdHlcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxuLy8gd2UgbWFrZSB0aGlzIG5vbi1lbnVtZXJhYmxlLCB0byBwcmV2ZW50IGluaGVyaXRlZCBieSBzdWIgY2xhc3Nlcy5cbmpzLnZhbHVlKENvbXBvbmVudCwgJ19yZWdpc3RlckVkaXRvclByb3BzJywgZnVuY3Rpb24gKGNscywgcHJvcHMpIHtcbiAgICB2YXIgcmVxQ29tcCA9IHByb3BzLnJlcXVpcmVDb21wb25lbnQ7XG4gICAgaWYgKHJlcUNvbXApIHtcbiAgICAgICAgY2xzLl9yZXF1aXJlQ29tcG9uZW50ID0gcmVxQ29tcDtcbiAgICB9XG4gICAgdmFyIG9yZGVyID0gcHJvcHMuZXhlY3V0aW9uT3JkZXI7XG4gICAgaWYgKG9yZGVyICYmIHR5cGVvZiBvcmRlciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY2xzLl9leGVjdXRpb25PcmRlciA9IG9yZGVyO1xuICAgIH1cbiAgICBpZiAoQ0NfRURJVE9SIHx8IENDX1RFU1QpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBjYy5qcy5nZXRDbGFzc05hbWUoY2xzKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgICB2YXIgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZXhlY3V0ZUluRWRpdE1vZGUnOlxuICAgICAgICAgICAgICAgICAgICBjbHMuX2V4ZWN1dGVJbkVkaXRNb2RlID0gISF2YWw7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAncGxheU9uRm9jdXMnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2lsbEV4ZWN1dGVJbkVkaXRNb2RlID0gJ2V4ZWN1dGVJbkVkaXRNb2RlJyBpbiBwcm9wcyA/IHByb3BzLmV4ZWN1dGVJbkVkaXRNb2RlIDogY2xzLl9leGVjdXRlSW5FZGl0TW9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aWxsRXhlY3V0ZUluRWRpdE1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHMuX3BsYXlPbkZvY3VzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2Mud2FybklEKDM2MDEsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnaW5zcGVjdG9yJzpcbiAgICAgICAgICAgICAgICAgICAganMudmFsdWUoY2xzLCAnX2luc3BlY3RvcicsIHZhbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnaWNvbic6XG4gICAgICAgICAgICAgICAgICAgIGpzLnZhbHVlKGNscywgJ19pY29uJywgdmFsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdtZW51JzpcbiAgICAgICAgICAgICAgICAgICAgQ29tcG9uZW50Ll9hZGRNZW51SXRlbShjbHMsIHZhbCwgcHJvcHMubWVudVByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdkaXNhbGxvd011bHRpcGxlJzpcbiAgICAgICAgICAgICAgICAgICAgY2xzLl9kaXNhbGxvd011bHRpcGxlID0gY2xzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3JlcXVpcmVDb21wb25lbnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2V4ZWN1dGlvbk9yZGVyJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gc2tpcCBoZXJlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnaGVscCc6XG4gICAgICAgICAgICAgICAgICAgIGNscy5faGVscCA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjYy53YXJuSUQoMzYwMiwga2V5LCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuQ29tcG9uZW50LnByb3RvdHlwZS5fX3NjcmlwdFV1aWQgPSAnJztcblxuY2MuQ29tcG9uZW50ID0gbW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EUTI5dGNHOXVaVzUwTG1weklsMHNJbTVoYldWeklqcGJJa05EVDJKcVpXTjBJaXdpY21WeGRXbHlaU0lzSW1weklpd2lhV1JIWlc1bGNtRjBaWElpTENKSmMwOXVSVzVoWW14bFEyRnNiR1ZrSWl3aVJteGhaM01pTENKSmMwOXVURzloWkVOaGJHeGxaQ0lzSWtOdmJYQnZibVZ1ZENJc0ltTmpJaXdpUTJ4aGMzTWlMQ0p1WVcxbElpd2laWGgwWlc1a2N5SXNJbU4wYjNJaUxDSkRRMTlGUkVsVVQxSWlMQ0ozYVc1a2IzY2lMQ0pmVTJObGJtVWlMQ0pCYzNObGRITlhZWFJqYUdWeUlpd2lhVzVwZEVOdmJYQnZibVZ1ZENJc0lsOXBaQ0lzSWtWa2FYUnZjaUlzSWxWMGFXeHpJaXdpVlhWcFpGVjBhV3h6SWl3aWRYVnBaQ0lzSWw5ZlpYWmxiblJVWVhKblpYUnpJaXdpWjJWMFRtVjNTV1FpTENKd2NtOXdaWEowYVdWeklpd2libTlrWlNJc0ltUmxabUYxYkhRaUxDSjJhWE5wWW14bElpd2laMlYwSWl3aVgyNWhiV1VpTENKamJHRnpjMDVoYldVaUxDSm5aWFJEYkdGemMwNWhiV1VpTENKMGNtbHRUR1ZtZENJc0lteGhjM1JKYm1SbGVFOW1JaXdpYzJ4cFkyVWlMQ0p6WlhRaUxDSjJZV3gxWlNJc0lsOWZjMk55YVhCMFFYTnpaWFFpTENKa2FYTndiR0Y1VG1GdFpTSXNJblI1Y0dVaUxDSmZVMk55YVhCMElpd2lkRzl2YkhScGNDSXNJa05EWDBSRlZpSXNJbDlsYm1GaWJHVmtJaXdpWlc1aFlteGxaQ0lzSWw5aFkzUnBkbVZKYmtocFpYSmhjbU5vZVNJc0ltTnZiWEJUWTJobFpIVnNaWElpTENKa2FYSmxZM1J2Y2lJc0lsOWpiMjF3VTJOb1pXUjFiR1Z5SWl3aVpXNWhZbXhsUTI5dGNDSXNJbVJwYzJGaWJHVkRiMjF3SWl3aVlXNXBiV0YwWVdKc1pTSXNJbVZ1WVdKc1pXUkpia2hwWlhKaGNtTm9lU0lzSWw5cGMwOXVURzloWkVOaGJHeGxaQ0lzSWw5dlltcEdiR0ZuY3lJc0luVndaR0YwWlNJc0lteGhkR1ZWY0dSaGRHVWlMQ0pmWDNCeVpXeHZZV1FpTENKdmJreHZZV1FpTENKemRHRnlkQ0lzSW05dVJXNWhZbXhsSWl3aWIyNUVhWE5oWW14bElpd2liMjVFWlhOMGNtOTVJaXdpYjI1R2IyTjFjMGx1UldScGRHOXlJaXdpYjI1TWIzTjBSbTlqZFhOSmJrVmthWFJ2Y2lJc0luSmxjMlYwU1c1RlpHbDBiM0lpTENKaFpHUkRiMjF3YjI1bGJuUWlMQ0owZVhCbFQzSkRiR0Z6YzA1aGJXVWlMQ0puWlhSRGIyMXdiMjVsYm5RaUxDSm5aWFJEYjIxd2IyNWxiblJ6SWl3aVoyVjBRMjl0Y0c5dVpXNTBTVzVEYUdsc1pISmxiaUlzSW1kbGRFTnZiWEJ2Ym1WdWRITkpia05vYVd4a2NtVnVJaXdpWDJkbGRFeHZZMkZzUW05MWJtUnpJaXdpYjI1U1pYTjBiM0psSWl3aVpHVnpkSEp2ZVNJc0ltUmxjR1Z1WkNJc0lsOW5aWFJFWlhCbGJtUkRiMjF3YjI1bGJuUWlMQ0psY25KdmNrbEVJaXdpWDNOMWNHVnlJaXdpWDI5dVVISmxSR1Z6ZEhKdmVTSXNJblZ1YzJOb1pXUjFiR1ZCYkd4RFlXeHNZbUZqYTNNaUxDSmxkbVZ1ZEZSaGNtZGxkSE1pTENKcElpd2liQ0lzSW14bGJtZDBhQ0lzSW5SaGNtZGxkQ0lzSW5SaGNtZGxkRTltWmlJc0lrTkRYMVJGVTFRaUxDSnpkRzl3SWl3aVgyNXZaR1ZCWTNScGRtRjBiM0lpTENKa1pYTjBjbTk1UTI5dGNDSXNJbDl5WlcxdmRtVkRiMjF3YjI1bGJuUWlMQ0pmYVc1emRHRnVkR2xoZEdVaUxDSmpiRzl1WldRaUxDSnBibk4wWVc1MGFXRjBaU0lzSWw5amJHOXVaU0lzSW5OamFHVmtkV3hsSWl3aVkyRnNiR0poWTJzaUxDSnBiblJsY25aaGJDSXNJbkpsY0dWaGRDSXNJbVJsYkdGNUlpd2lZWE56WlhKMFNVUWlMQ0pwYzA1aFRpSXNJbTFoWTNKdklpd2lVa1ZRUlVGVVgwWlBVa1ZXUlZJaUxDSnpZMmhsWkhWc1pYSWlMQ0puWlhSVFkyaGxaSFZzWlhJaUxDSndZWFZ6WldRaUxDSnBjMVJoY21kbGRGQmhkWE5sWkNJc0luTmphR1ZrZFd4bFQyNWpaU0lzSW5WdWMyTm9aV1IxYkdVaUxDSmpZV3hzWW1GamExOW1iaUlzSW5WdWMyTm9aV1IxYkdWQmJHeEdiM0pVWVhKblpYUWlMQ0pmY21WeGRXbHlaVU52YlhCdmJtVnVkQ0lzSWw5bGVHVmpkWFJwYjI1UGNtUmxjaUlzSWw5bGVHVmpkWFJsU1c1RlpHbDBUVzlrWlNJc0lsOXdiR0Y1VDI1R2IyTjFjeUlzSWw5a2FYTmhiR3h2ZDAxMWJIUnBjR3hsSWl3aVgyaGxiSEFpTENKZlkyOXRjRzl1Wlc1MFRXVnVkVWwwWlcxeklpd2lYMkZrWkUxbGJuVkpkR1Z0SWl3aVkyeHpJaXdpY0dGMGFDSXNJbkJ5YVc5eWFYUjVJaXdpY0hWemFDSXNJbU52YlhCdmJtVnVkQ0lzSW0xbGJuVlFZWFJvSWl3aWNISnZjSE1pTENKeVpYRkRiMjF3SWl3aWNtVnhkV2x5WlVOdmJYQnZibVZ1ZENJc0ltOXlaR1Z5SWl3aVpYaGxZM1YwYVc5dVQzSmtaWElpTENKclpYa2lMQ0oyWVd3aUxDSjNhV3hzUlhobFkzVjBaVWx1UldScGRFMXZaR1VpTENKbGVHVmpkWFJsU1c1RlpHbDBUVzlrWlNJc0luZGhjbTVKUkNJc0ltMWxiblZRY21sdmNtbDBlU0lzSW5CeWIzUnZkSGx3WlNJc0lsOWZjMk55YVhCMFZYVnBaQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk1FSkJMRWxCUVVsQkxGZEJRVmRETEZGQlFWRXNjMEpCUVZJc1EwRkJaanRCUVVOQkxFbEJRVWxETEV0QlFVdEVMRkZCUVZFc1owSkJRVklzUTBGQlZEdEJRVU5CTEVsQlFVbEZMR05CUVdNc1MwRkJTMFlzVVVGQlVTd3dRa0ZCVWl4RFFVRk1MRVZCUVRCRExFMUJRVEZETEVOQlFXeENPenRCUVVWQkxFbEJRVWxITEcxQ1FVRnRRa29zVTBGQlUwc3NTMEZCVkN4RFFVRmxSQ3huUWtGQmRFTTdRVUZEUVN4SlFVRkpSU3hwUWtGQmFVSk9MRk5CUVZOTExFdEJRVlFzUTBGQlpVTXNZMEZCY0VNN08wRkJSVUU3T3pzN096czdPenM3T3pzN08wRkJZMEVzU1VGQlNVTXNXVUZCV1VNc1IwRkJSME1zUzBGQlNDeERRVUZUTzBGQlEzSkNReXhWUVVGTkxHTkJSR1U3UVVGRmNrSkRMR0ZCUVZOWUxGRkJSbGs3TzBGQlNYSkNXU3hWUVVGTlF5eFpRVUZaTEZsQlFWazdRVUZETVVJc1dVRkJTVU1zVDBGQlQwTXNUVUZCVUN4SlFVRnBRa0VzVDBGQlQwTXNZVUZCTlVJc1JVRkJNa003UVVGRGRrTkVMRzFDUVVGUFF5eGhRVUZRTEVOQlFYRkNReXhoUVVGeVFpeERRVUZ0UXl4SlFVRnVRenRCUVVOSU8wRkJRMFFzWVVGQlMwTXNSMEZCVEN4SFFVRlhReXhQUVVGUFF5eExRVUZRTEVOQlFXRkRMRk5CUVdJc1EwRkJkVUpETEVsQlFYWkNMRVZCUVZnN08wRkJSVUU3T3pzN096dEJRVTFCTEdGQlFVdERMR05CUVV3c1IwRkJjMElzUlVGQmRFSTdRVUZEU0N4TFFXSkxMRWRCWVVZc1dVRkJXVHRCUVVOYUxHRkJRVXRNTEVkQlFVd3NSMEZCVjJZc1dVRkJXWEZDTEZGQlFWb3NSVUZCV0RzN1FVRkZRU3hoUVVGTFJDeGpRVUZNTEVkQlFYTkNMRVZCUVhSQ08wRkJRMGdzUzBGeVFtOUNPenRCUVhWQ2NrSkZMR2RDUVVGWk8wRkJRMUk3T3pzN096czdPMEZCVVVGRExHTkJRVTA3UVVGRFJrTXNjVUpCUVZNc1NVRkVVRHRCUVVWR1F5eHhRa0ZCVXp0QlFVWlFMRk5CVkVVN08wRkJZMUpzUWl4alFVRk5PMEZCUTBadFFpeGxRVVJGTEdsQ1FVTkxPMEZCUTBnc2IwSkJRVWtzUzBGQlMwTXNTMEZCVkN4RlFVRm5RanRCUVVOYUxESkNRVUZQTEV0QlFVdEJMRXRCUVZvN1FVRkRTRHRCUVVORUxHOUNRVUZKUXl4WlFVRlpka0lzUjBGQlIwNHNSVUZCU0N4RFFVRk5PRUlzV1VGQlRpeERRVUZ0UWl4SlFVRnVRaXhEUVVGb1FqdEJRVU5CTEc5Q1FVRkpReXhYUVVGWFJpeFZRVUZWUnl4WFFVRldMRU5CUVhOQ0xFZEJRWFJDTEVOQlFXWTdRVUZEUVN4dlFrRkJTVVFzV1VGQldTeERRVUZvUWl4RlFVRnRRanRCUVVObVJpeG5RMEZCV1VFc1ZVRkJWVWtzUzBGQlZpeERRVUZuUWtZc1YwRkJWeXhEUVVFelFpeERRVUZhTzBGQlEwZzdRVUZEUkN4MVFrRkJUeXhMUVVGTFVDeEpRVUZNTEVOQlFWVm9RaXhKUVVGV0xFZEJRV2xDTEVkQlFXcENMRWRCUVhWQ2NVSXNVMEZCZGtJc1IwRkJiVU1zUjBGQk1VTTdRVUZEU0N4aFFWaERPMEZCV1VaTExHVkJXa1VzWlVGWlIwTXNTMEZhU0N4RlFWbFZPMEZCUTFJc2NVSkJRVXRRTEV0QlFVd3NSMEZCWVU4c1MwRkJZanRCUVVOSUxHRkJaRU03TzBGQlpVWlVMSEZDUVVGVE8wRkJabEFzVTBGa1JUczdRVUZuUTFJN096czdPenM3T3p0QlFWTkJUaXhqUVVGTk8wRkJRMFpQTEdWQlJFVXNhVUpCUTBzN1FVRkRTQ3gxUWtGQlR5eExRVUZMV0N4SFFVRmFPMEZCUTBnc1lVRklRenM3UVVGSlJsVXNjVUpCUVZNN1FVRktVQ3hUUVhwRFJUczdRVUZuUkZKVkxIVkNRVUZsZWtJc1lVRkJZVHRCUVVONFFtZENMR1ZCUkhkQ0xHbENRVU5xUWl4RFFVRkZMRU5CUkdVN08wRkJSWGhDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CVlN4NVFrRkJZU3hSUVhCQ1Z6dEJRWEZDZUVKRExHdENRVUZOYUVNc1IwRkJSMmxETEU5QmNrSmxPMEZCYzBKNFFrTXNjVUpCUVZORExGVkJRVlU3UVVGMFFrc3NVMEZvUkhCQ096dEJRWGxGVWpzN096czdRVUZMUVVNc2EwSkJRVlVzU1VFNVJVWTdPMEZCWjBaU096czdPenM3T3pzN08wRkJWVUZETEdsQ1FVRlRPMEZCUTB4b1FpeGxRVVJMTEdsQ1FVTkZPMEZCUTBnc2RVSkJRVThzUzBGQlMyVXNVVUZCV2p0QlFVTklMR0ZCU0VrN1FVRkpURklzWlVGS1N5eGxRVWxCUXl4TFFVcEJMRVZCU1U4N1FVRkRVaXh2UWtGQlNTeExRVUZMVHl4UlFVRk1MRXRCUVd0Q1VDeExRVUYwUWl4RlFVRTJRanRCUVVONlFpeDVRa0ZCUzA4c1VVRkJUQ3hIUVVGblFsQXNTMEZCYUVJN1FVRkRRU3gzUWtGQlNTeExRVUZMV0N4SlFVRk1MRU5CUVZWdlFpeHJRa0ZCWkN4RlFVRnJRenRCUVVNNVFpdzBRa0ZCU1VNc1owSkJRV2RDZGtNc1IwRkJSM2RETEZGQlFVZ3NRMEZCV1VNc1kwRkJhRU03UVVGRFFTdzBRa0ZCU1Zvc1MwRkJTaXhGUVVGWE8wRkJRMUJWTERCRFFVRmpSeXhWUVVGa0xFTkJRWGxDTEVsQlFYcENPMEZCUTBnc2VVSkJSa1FzVFVGSFN6dEJRVU5FU0N3d1EwRkJZMGtzVjBGQlpDeERRVUV3UWl4SlFVRXhRanRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5LTEdGQmFrSkpPenRCUVd0Q1RIWkNMSEZDUVVGVExFdEJiRUpLTzBGQmJVSk1kMElzZDBKQlFWazdRVUZ1UWxBc1UwRXhSa1E3TzBGQlowaFNPenM3T3pzN096czdRVUZUUVVNc05FSkJRVzlDTzBGQlEyaENlRUlzWlVGRVowSXNhVUpCUTFRN1FVRkRTQ3gxUWtGQlR5eExRVUZMWlN4UlFVRk1MRWxCUVdsQ0xFdEJRVXRzUWl4SlFVRk1MRU5CUVZWdlFpeHJRa0ZCYkVNN1FVRkRTQ3hoUVVobE96dEJRVWxvUW14Q0xIRkNRVUZUTzBGQlNrOHNVMEY2U0ZvN08wRkJaMGxTT3pzN096czdPenM3UVVGVFFUQkNMSGxDUVVGcFFqdEJRVU5pZWtJc1pVRkVZU3hwUWtGRFRqdEJRVU5JTEhWQ1FVRlBMRXRCUVVzd1FpeFRRVUZNTEVkQlFXbENha1FzWTBGQmVFSTdRVUZEU0R0QlFVaFpPMEZCZWtsVUxFdEJka0pUT3p0QlFYVkxja0k3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHM3T3pzN096czdPMEZCVTBGclJDeFpRVUZSTEVsQmNreGhPenRCUVhWTWNrSTdPenM3T3pzN08wRkJVVUZETEdkQ1FVRlpMRWxCTDB4VE96dEJRV2xOY2tJN096czdPenM3T3p0QlFWTkJReXhsUVVGWExFbEJNVTFWT3p0QlFUUk5ja0k3T3pzN096czdPenM3TzBGQlYwRkRMRmxCUVZFc1NVRjJUbUU3TzBGQmVVNXlRanM3T3pzN096czdPenM3UVVGWFFVTXNWMEZCVHl4SlFYQlBZenM3UVVGelQzSkNPenM3T3pzN096dEJRVkZCUXl4alFVRlZMRWxCT1U5WE96dEJRV2RRY2tJN096czdPenM3TzBGQlVVRkRMR1ZCUVZjc1NVRjRVRlU3TzBGQk1GQnlRanM3T3pzN096czdRVUZSUVVNc1pVRkJWeXhKUVd4UlZUczdRVUZ2VVhKQ096czdPMEZCU1VGRExIRkNRVUZwUWl4SlFYaFJTVHRCUVhsUmNrSTdPenM3UVVGSlFVTXNlVUpCUVhGQ0xFbEJOMUZCTzBGQk9GRnlRanM3T3pzN08wRkJUVUZETEcxQ1FVRmxMRWxCY0ZKTk96dEJRWE5TY2tJN08wRkJSVUU3T3pzN096czdPenM3T3pzN08wRkJZMEZETEdkQ1FYUlRjVUlzZDBKQmMxTlFReXhsUVhSVFR5eEZRWE5UVlR0QlFVTXpRaXhsUVVGUExFdEJRVXN4UXl4SlFVRk1MRU5CUVZWNVF5eFpRVUZXTEVOQlFYVkNReXhsUVVGMlFpeERRVUZRTzBGQlEwZ3NTMEY0VTI5Q096czdRVUV3VTNKQ096czdPenM3T3pzN096czdPenM3T3pzN096dEJRVzlDUVVNc1owSkJPVlJ4UWl4M1FrRTRWRkJFTEdWQk9WUlBMRVZCT0ZSVk8wRkJRek5DTEdWQlFVOHNTMEZCU3pGRExFbEJRVXdzUTBGQlZUSkRMRmxCUVZZc1EwRkJkVUpFTEdWQlFYWkNMRU5CUVZBN1FVRkRTQ3hMUVdoVmIwSTdPenRCUVd0VmNrSTdPenM3T3pzN096czdPenM3TzBGQlkwRkZMR2xDUVdoV2NVSXNlVUpCWjFaT1JpeGxRV2hXVFN4RlFXZFdWenRCUVVNMVFpeGxRVUZQTEV0QlFVc3hReXhKUVVGTUxFTkJRVlUwUXl4aFFVRldMRU5CUVhkQ1JpeGxRVUY0UWl4RFFVRlFPMEZCUTBnc1MwRnNWbTlDT3pzN1FVRnZWbkpDT3pzN096czdPenM3T3pzN096dEJRV05CUnl3d1FrRnNWM0ZDTEd0RFFXdFhSMGdzWlVGc1YwZ3NSVUZyVjI5Q08wRkJRM0pETEdWQlFVOHNTMEZCU3pGRExFbEJRVXdzUTBGQlZUWkRMSE5DUVVGV0xFTkJRV2xEU0N4bFFVRnFReXhEUVVGUU8wRkJRMGdzUzBGd1YyOUNPenM3UVVGelYzSkNPenM3T3pzN096czdPenM3T3p0QlFXTkJTU3d5UWtGd1dIRkNMRzFEUVc5WVNVb3NaVUZ3V0Vvc1JVRnZXSEZDTzBGQlEzUkRMR1ZCUVU4c1MwRkJTekZETEVsQlFVd3NRMEZCVlRoRExIVkNRVUZXTEVOQlFXdERTaXhsUVVGc1F5eERRVUZRTzBGQlEwZ3NTMEYwV0c5Q096czdRVUYzV0hKQ096dEJRVVZCT3pzN096czdPenM3T3p0QlFWZEJTeXh4UWtGQmFVSXNTVUZ5V1VrN08wRkJkVmx5UWpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUY1UTBGRExHVkJRVmNzU1VGb1lsVTdPMEZCYTJKeVFqczdRVUZGUVVNc1YwRndZbkZDTEhGQ1FXOWlWanRCUVVOUUxGbEJRVWs1UkN4VFFVRktMRVZCUVdVN1FVRkRXQ3huUWtGQlNTdEVMRk5CUVZNc1MwRkJTMnhFTEVsQlFVd3NRMEZCVlcxRUxHMUNRVUZXTEVOQlFUaENMRWxCUVRsQ0xFTkJRV0k3UVVGRFFTeG5Ra0ZCU1VRc1RVRkJTaXhGUVVGWk8wRkJRMUlzZFVKQlFVOXdSU3hIUVVGSGMwVXNUMEZCU0N4RFFVRlhMRWxCUVZnc1JVRkRTSFJGTEVkQlFVZE9MRVZCUVVnc1EwRkJUVGhDTEZsQlFVNHNRMEZCYlVJc1NVRkJia0lzUTBGRVJ5eEZRVU4xUW5oQ0xFZEJRVWRPTEVWQlFVZ3NRMEZCVFRoQ0xGbEJRVTRzUTBGQmJVSTBReXhOUVVGdVFpeERRVVIyUWl4RFFVRlFPMEZCUlVnN1FVRkRTanRCUVVORUxGbEJRVWtzUzBGQlMwY3NUVUZCVEN4RlFVRktMRVZCUVcxQ08wRkJRMllzWjBKQlFVa3NTMEZCUzI1RExGRkJRVXdzU1VGQmFVSXNTMEZCUzJ4Q0xFbEJRVXdzUTBGQlZXOUNMR3RDUVVFdlFpeEZRVUZ0UkR0QlFVTXZRM1JETEcxQ1FVRkhkME1zVVVGQlNDeERRVUZaUXl4alFVRmFMRU5CUVRKQ1JTeFhRVUV6UWl4RFFVRjFReXhKUVVGMlF6dEJRVU5JTzBGQlEwbzdRVUZEU2l4TFFXcGpiMEk3UVVGdFkzSkNOa0lzYVVKQmJtTnhRaXd5UWtGdFkwbzdRVUZEWWp0QlFVTkJMR0ZCUVV0RExITkNRVUZNT3p0QlFVVkJPMEZCUTBFc1dVRkJTVU1zWlVGQlpTeExRVUZMTTBRc1kwRkJlRUk3UVVGRFFTeGhRVUZMTEVsQlFVazBSQ3hKUVVGSkxFTkJRVklzUlVGQlYwTXNTVUZCU1VZc1lVRkJZVWNzVFVGQmFrTXNSVUZCZVVOR0xFbEJRVWxETEVOQlFUZERMRVZCUVdkRUxFVkJRVVZFTEVOQlFXeEVMRVZCUVhGRU8wRkJRMnBFTEdkQ1FVRkpSeXhUUVVGVFNpeGhRVUZoUXl4RFFVRmlMRU5CUVdJN1FVRkRRVWNzYzBKQlFWVkJMRTlCUVU5RExGTkJRVkFzUTBGQmFVSXNTVUZCYWtJc1EwRkJWanRCUVVOSU8wRkJRMFJNTEhGQ1FVRmhSeXhOUVVGaUxFZEJRWE5DTEVOQlFYUkNPenRCUVVWQk8wRkJRMEVzV1VGQlNYaEZMR0ZCUVdFc1EwRkJRekpGTEU5QlFXeENMRVZCUVRKQ08wRkJRM1pDZWtVc2JVSkJRVTlETEdGQlFWQXNRMEZCY1VKNVJTeEpRVUZ5UWl4RFFVRXdRaXhKUVVFeFFqdEJRVU5JT3p0QlFVVkVPMEZCUTBGcVJpeFhRVUZIZDBNc1VVRkJTQ3hEUVVGWk1FTXNZMEZCV2l4RFFVRXlRa01zVjBGQk0wSXNRMEZCZFVNc1NVRkJka003TzBGQlJVRTdRVUZEUVN4aFFVRkxha1VzU1VGQlRDeERRVUZWYTBVc1owSkJRVllzUTBGQk1rSXNTVUZCTTBJN1FVRkRTQ3hMUVhwa2IwSTdRVUV5WkhKQ1F5eG5Ra0V6WkhGQ0xIZENRVEprVUVNc1RVRXpaRThzUlVFeVpFTTdRVUZEYkVJc1dVRkJTU3hEUVVGRFFTeE5RVUZNTEVWQlFXRTdRVUZEVkVFc2NVSkJRVk4wUml4SFFVRkhkVVlzVjBGQlNDeERRVUZsUXl4TlFVRm1MRU5CUVhOQ0xFbEJRWFJDTEVWQlFUUkNMRWxCUVRWQ0xFTkJRVlE3UVVGRFNEdEJRVU5FUml4bFFVRlBjRVVzU1VGQlVDeEhRVUZqTEVsQlFXUTdRVUZEUVN4bFFVRlBiMFVzVFVGQlVEdEJRVU5JTEV0QmFtVnZRanM3TzBGQmJXVjZRanM3UVVGRlNUczdPenM3T3pzN096czdPenM3T3pzN08wRkJhMEpCUnl4WlFYWm1jVUlzYjBKQmRXWllReXhSUVhabVZ5eEZRWFZtUkVNc1VVRjJaa01zUlVGMVpsTkRMRTFCZG1aVUxFVkJkV1pwUWtNc1MwRjJabXBDTEVWQmRXWjNRanRCUVVONlF6ZEdMRmRCUVVjNFJpeFJRVUZJTEVOQlFWbEtMRkZCUVZvc1JVRkJjMElzU1VGQmRFSTdRVUZEUVRGR0xGZEJRVWM0Uml4UlFVRklMRU5CUVZsSUxGbEJRVmtzUTBGQmVFSXNSVUZCTWtJc1NVRkJNMEk3TzBGQlJVRkJMRzFDUVVGWFFTeFpRVUZaTEVOQlFYWkNPMEZCUTBGRExHbENRVUZUUnl4TlFVRk5TQ3hOUVVGT0xFbEJRV2RDTlVZc1IwRkJSMmRITEV0QlFVZ3NRMEZCVTBNc1kwRkJla0lzUjBGQk1FTk1MRTFCUVc1RU8wRkJRMEZETEdkQ1FVRlJRU3hUUVVGVExFTkJRV3BDT3p0QlFVVkJMRmxCUVVsTExGbEJRVmxzUnl4SFFVRkhkME1zVVVGQlNDeERRVUZaTWtRc1dVRkJXaXhGUVVGb1FqczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGbEJRVWxETEZOQlFWTkdMRlZCUVZWSExHTkJRVllzUTBGQmVVSXNTVUZCZWtJc1EwRkJZanM3UVVGRlFVZ3NhMEpCUVZWVUxGRkJRVllzUTBGQmJVSkRMRkZCUVc1Q0xFVkJRVFpDTEVsQlFUZENMRVZCUVcxRFF5eFJRVUZ1UXl4RlFVRTJRME1zVFVGQk4wTXNSVUZCY1VSRExFdEJRWEpFTEVWQlFUUkVUeXhOUVVFMVJEdEJRVU5JTEV0QmVHZENiMEk3T3p0QlFUQm5RbkpDT3pzN096czdPenM3T3pzN08wRkJZVUZGTEdkQ1FYWm9RbkZDTEhkQ1FYVm9RbEJhTEZGQmRtaENUeXhGUVhWb1FrZEhMRXRCZG1oQ1NDeEZRWFZvUWxVN1FVRkRNMElzWVVGQlMwb3NVVUZCVEN4RFFVRmpReXhSUVVGa0xFVkJRWGRDTEVOQlFYaENMRVZCUVRKQ0xFTkJRVE5DTEVWQlFUaENSeXhMUVVFNVFqdEJRVU5JTEV0QmVtaENiMEk3T3p0QlFUSm9RbkpDT3pzN096czdPenM3UVVGVFFWVXNZMEZ3YVVKeFFpeHpRa0Z2YVVKVVF5eFhRWEJwUWxNc1JVRnZhVUpKTzBGQlEzSkNMRmxCUVVrc1EwRkJRMEVzVjBGQlRDeEZRVU5KT3p0QlFVVktlRWNzVjBGQlIzZERMRkZCUVVnc1EwRkJXVEpFTEZsQlFWb3NSMEZCTWtKSkxGVkJRVE5DTEVOQlFYTkRReXhYUVVGMFF5eEZRVUZ0UkN4SlFVRnVSRHRCUVVOSUxFdEJlbWxDYjBJN096dEJRVEpwUW5KQ096czdPenM3T3pzN1FVRlRRUzlDTERCQ1FYQnFRbkZDTEc5RFFXOXFRa3M3UVVGRGRFSjZSU3hYUVVGSGQwTXNVVUZCU0N4RFFVRlpNa1FzV1VGQldpeEhRVUV5UWswc2MwSkJRVE5DTEVOQlFXdEVMRWxCUVd4RU8wRkJRMGc3UVVGMGFrSnZRaXhEUVVGVUxFTkJRV2hDT3p0QlFYbHFRa0V4Unl4VlFVRlZNa2NzYVVKQlFWWXNSMEZCT0VJc1NVRkJPVUk3UVVGRFFUTkhMRlZCUVZVMFJ5eGxRVUZXTEVkQlFUUkNMRU5CUVRWQ096dEJRVVZCTEVsQlFVbDBSeXhoUVVGaE1rVXNUMEZCYWtJc1JVRkJNRUk3TzBGQlJYUkNPenRCUVVWQmFrWXNZMEZCVlRaSExHdENRVUZXTEVkQlFTdENMRXRCUVM5Q08wRkJRMEUzUnl4alFVRlZPRWNzV1VGQlZpeEhRVUY1UWl4TFFVRjZRanRCUVVOQk9VY3NZMEZCVlN0SExHbENRVUZXTEVkQlFUaENMRWxCUVRsQ08wRkJRMEV2Unl4alFVRlZaMGdzUzBGQlZpeEhRVUZyUWl4RlFVRnNRanM3UVVGRlFUdEJRVU5CT3p0QlFVVkJja2dzVDBGQlIyMURMRXRCUVVnc1EwRkJVemxDTEZOQlFWUXNSVUZCYjBJc1dVRkJjRUlzUlVGQmEwTXNSVUZCYkVNc1JVRkJjME1zU1VGQmRFTTdRVUZEUVV3c1QwRkJSMjFETEV0QlFVZ3NRMEZCVXpsQ0xGTkJRVlFzUlVGQmIwSXNUMEZCY0VJc1JVRkJOa0lzUlVGQk4wSXNSVUZCYVVNc1NVRkJha003TzBGQlJVRTdPMEZCUlVGRExFOUJRVWRuU0N4dFFrRkJTQ3hIUVVGNVFpeEZRVUY2UWpzN1FVRkZRV3BJTEdOQlFWVnJTQ3haUVVGV0xFZEJRWGxDTEZWQlFWVkRMRWRCUVZZc1JVRkJaVU1zU1VGQlppeEZRVUZ4UWtNc1VVRkJja0lzUlVGQkswSTdRVUZEY0VSd1NDeFhRVUZIWjBnc2JVSkJRVWdzUTBGQmRVSkxMRWxCUVhaQ0xFTkJRVFJDTzBGQlEzaENReXgxUWtGQlYwb3NSMEZFWVR0QlFVVjRRa3NzYzBKQlFWVktMRWxCUm1NN1FVRkhlRUpETEhOQ1FVRlZRVHRCUVVoakxGTkJRVFZDTzBGQlMwZ3NTMEZPUkR0QlFVOUlPenRCUVVWRU8wRkJRMEV4U0N4SFFVRkhiVU1zUzBGQlNDeERRVUZUT1VJc1UwRkJWQ3hGUVVGdlFpeHpRa0ZCY0VJc1JVRkJORU1zVlVGQlZXMUlMRWRCUVZZc1JVRkJaVTBzUzBGQlppeEZRVUZ6UWp0QlFVTTVSQ3hSUVVGSlF5eFZRVUZWUkN4TlFVRk5SU3huUWtGQmNFSTdRVUZEUVN4UlFVRkpSQ3hQUVVGS0xFVkJRV0U3UVVGRFZGQXNXVUZCU1ZJc2FVSkJRVW9zUjBGQmQwSmxMRTlCUVhoQ08wRkJRMGc3UVVGRFJDeFJRVUZKUlN4UlFVRlJTQ3hOUVVGTlNTeGpRVUZzUWp0QlFVTkJMRkZCUVVsRUxGTkJRVk1zVDBGQlQwRXNTMEZCVUN4TFFVRnBRaXhSUVVFNVFpeEZRVUYzUXp0QlFVTndRMVFzV1VGQlNWQXNaVUZCU2l4SFFVRnpRbWRDTEV0QlFYUkNPMEZCUTBnN1FVRkRSQ3hSUVVGSmRFZ3NZVUZCWVRKRkxFOUJRV3BDTEVWQlFUQkNPMEZCUTNSQ0xGbEJRVWs1UlN4UFFVRlBSaXhIUVVGSFRpeEZRVUZJTEVOQlFVMDRRaXhaUVVGT0xFTkJRVzFDTUVZc1IwRkJia0lzUTBGQldEdEJRVU5CTEdGQlFVc3NTVUZCU1Zjc1IwRkJWQ3hKUVVGblFrd3NTMEZCYUVJc1JVRkJkVUk3UVVGRGJrSXNaMEpCUVVsTkxFMUJRVTFPTEUxQlFVMUxMRWRCUVU0c1EwRkJWanRCUVVOQkxHOUNRVUZSUVN4SFFVRlNPMEZCUTBrc2NVSkJRVXNzYlVKQlFVdzdRVUZEU1Znc2QwSkJRVWxPTEd0Q1FVRktMRWRCUVhsQ0xFTkJRVU1zUTBGQlEydENMRWRCUVROQ08wRkJRMEU3TzBGQlJVb3NjVUpCUVVzc1lVRkJURHRCUVVOSkxIZENRVUZKUVN4SFFVRktMRVZCUVZNN1FVRkRUQ3cwUWtGQlNVTXNkMEpCUVhsQ0xIVkNRVUYxUWxBc1MwRkJlRUlzUjBGQmFVTkJMRTFCUVUxUkxHbENRVUYyUXl4SFFVRXlSR1FzU1VGQlNVNHNhMEpCUVROR08wRkJRMEVzTkVKQlFVbHRRaXh4UWtGQlNpeEZRVUV5UWp0QlFVTjJRbUlzWjBOQlFVbE1MRmxCUVVvc1IwRkJiVUlzU1VGQmJrSTdRVUZEU0N4NVFrRkdSQ3hOUVVkTE8wRkJRMFEzUnl3clFrRkJSMmxKTEUxQlFVZ3NRMEZCVlN4SlFVRldMRVZCUVdkQ0wwZ3NTVUZCYUVJN1FVRkRTRHRCUVVOS08wRkJRMFE3TzBGQlJVb3NjVUpCUVVzc1YwRkJURHRCUVVOSlVpeDFRa0ZCUjIxRExFdEJRVWdzUTBGQlUzRkdMRWRCUVZRc1JVRkJZeXhaUVVGa0xFVkJRVFJDV1N4SFFVRTFRaXhGUVVGcFF5eEpRVUZxUXp0QlFVTkJPenRCUVVWS0xIRkNRVUZMTEUxQlFVdzdRVUZEU1hCSkxIVkNRVUZIYlVNc1MwRkJTQ3hEUVVGVGNVWXNSMEZCVkN4RlFVRmpMRTlCUVdRc1JVRkJkVUpaTEVkQlFYWkNMRVZCUVRSQ0xFbEJRVFZDTzBGQlEwRTdPMEZCUlVvc2NVSkJRVXNzVFVGQlREdEJRVU5KTDBnc09FSkJRVlZyU0N4WlFVRldMRU5CUVhWQ1F5eEhRVUYyUWl4RlFVRTBRbGtzUjBGQk5VSXNSVUZCYVVOT0xFMUJRVTFWTEZsQlFYWkRPMEZCUTBFN08wRkJSVW9zY1VKQlFVc3NhMEpCUVV3N1FVRkRTV2hDTEhkQ1FVRkpTaXhwUWtGQlNpeEhRVUYzUWtrc1IwRkJlRUk3UVVGRFFUczdRVUZGU2l4eFFrRkJTeXhyUWtGQlREdEJRVU5CTEhGQ1FVRkxMR2RDUVVGTU8wRkJRMGs3UVVGRFFUczdRVUZGU2l4eFFrRkJTeXhOUVVGTU8wRkJRMGxCTEhkQ1FVRkpTQ3hMUVVGS0xFZEJRVmxsTEVkQlFWbzdRVUZEUVRzN1FVRkZTanRCUVVOSk9VZ3NkVUpCUVVkcFNTeE5RVUZJTEVOQlFWVXNTVUZCVml4RlFVRm5Ra29zUjBGQmFFSXNSVUZCY1VJelNDeEpRVUZ5UWp0QlFVTkJPMEZCTlVOU08wRkJPRU5JTzBGQlEwbzdRVUZEU2l4RFFUZEVSRHM3UVVFclJFRklMRlZCUVZWdlNTeFRRVUZXTEVOQlFXOUNReXhaUVVGd1FpeEhRVUZ0UXl4RlFVRnVRenM3UVVGRlFYQkpMRWRCUVVkRUxGTkJRVWdzUjBGQlpYTkpMRTlCUVU5RExFOUJRVkFzUjBGQmFVSjJTU3hUUVVGb1F5SXNJbVpwYkdVaU9pSkRRME52YlhCdmJtVnVkQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFekxUSXdNVFlnUTJoMWEyOXVaeUJVWldOb2JtOXNiMmRwWlhNZ1NXNWpMbHh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TnkweU1ERTRJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGx4dVhHNGdhSFIwY0hNNkx5OTNkM2N1WTI5amIzTXVZMjl0TDF4dVhHNGdVR1Z5YldsemMybHZiaUJwY3lCb1pYSmxZbmtnWjNKaGJuUmxaQ3dnWm5KbFpTQnZaaUJqYUdGeVoyVXNJSFJ2SUdGdWVTQndaWEp6YjI0Z2IySjBZV2x1YVc1bklHRWdZMjl3ZVZ4dUlHOW1JSFJvYVhNZ2MyOW1kSGRoY21VZ1lXNWtJR0Z6YzI5amFXRjBaV1FnWlc1bmFXNWxJSE52ZFhKalpTQmpiMlJsSUNoMGFHVWdYQ0pUYjJaMGQyRnlaVndpS1N3Z1lTQnNhVzFwZEdWa0xGeHVJQ0IzYjNKc1pIZHBaR1VzSUhKdmVXRnNkSGt0Wm5KbFpTd2dibTl1TFdGemMybG5ibUZpYkdVc0lISmxkbTlqWVdKc1pTQmhibVFnYm05dUxXVjRZMngxYzJsMlpTQnNhV05sYm5ObFhHNGdkRzhnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5c1pXeDVJSFJ2SUdSbGRtVnNiM0FnWjJGdFpYTWdiMjRnZVc5MWNpQjBZWEpuWlhRZ2NHeGhkR1p2Y20xekxpQlpiM1VnYzJoaGJHeGNiaUFnYm05MElIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZablIzWVhKbElHWnZjaUJrWlhabGJHOXdhVzVuSUc5MGFHVnlJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJSFJvWVhRbmMxeHVJQ0IxYzJWa0lHWnZjaUJrWlhabGJHOXdhVzVuSUdkaGJXVnpMaUJaYjNVZ1lYSmxJRzV2ZENCbmNtRnVkR1ZrSUhSdklIQjFZbXhwYzJnc0lHUnBjM1J5YVdKMWRHVXNYRzRnSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUJEYjJOdmN5QkRjbVZoZEc5eUxseHVYRzRnVkdobElITnZablIzWVhKbElHOXlJSFJ2YjJ4eklHbHVJSFJvYVhNZ1RHbGpaVzV6WlNCQlozSmxaVzFsYm5RZ1lYSmxJR3hwWTJWdWMyVmtMQ0J1YjNRZ2MyOXNaQzVjYmlCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNGdjbVZ6WlhKMlpYTWdZV3hzSUhKcFoyaDBjeUJ1YjNRZ1pYaHdjbVZ6YzJ4NUlHZHlZVzUwWldRZ2RHOGdlVzkxTGx4dVhHNGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVeUJQVWx4dUlFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWWdUVVZTUTBoQlRsUkJRa2xNU1ZSWkxGeHVJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlZ4dUlFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZKY2JpQk1TVUZDU1V4SlZGa3NJRmRJUlZSSVJWSWdTVTRnUVU0Z1FVTlVTVTlPSUU5R0lFTlBUbFJTUVVOVUxDQlVUMUpVSUU5U0lFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTEZ4dUlFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSU0JWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNWNiaUJVU0VVZ1UwOUdWRmRCVWtVdVhHNGdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JseHVkbUZ5SUVORFQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpNHZjR3hoZEdadmNtMHZRME5QWW1wbFkzUW5LVHRjYm5aaGNpQnFjeUE5SUhKbGNYVnBjbVVvSnk0dUwzQnNZWFJtYjNKdEwycHpKeWs3WEc1MllYSWdhV1JIWlc1bGNtRjBaWElnUFNCdVpYY2dLSEpsY1hWcGNtVW9KeTR1TDNCc1lYUm1iM0p0TDJsa0xXZGxibVZ5WVhSbGNpY3BLU2duUTI5dGNDY3BPMXh1WEc1MllYSWdTWE5QYmtWdVlXSnNaVU5oYkd4bFpDQTlJRU5EVDJKcVpXTjBMa1pzWVdkekxrbHpUMjVGYm1GaWJHVkRZV3hzWldRN1hHNTJZWElnU1hOUGJreHZZV1JEWVd4c1pXUWdQU0JEUTA5aWFtVmpkQzVHYkdGbmN5NUpjMDl1VEc5aFpFTmhiR3hsWkR0Y2JseHVMeW9xWEc0Z0tpQWhJMlZ1WEc0Z0tpQkNZWE5sSUdOc1lYTnpJR1p2Y2lCbGRtVnllWFJvYVc1bklHRjBkR0ZqYUdWa0lIUnZJRTV2WkdVb1JXNTBhWFI1S1M0OFluSXZQbHh1SUNvZ1BHSnlMejVjYmlBcUlFNVBWRVU2SUU1dmRDQmhiR3h2ZDJWa0lIUnZJSFZ6WlNCamIyNXpkSEoxWTNScGIyNGdjR0Z5WVcxbGRHVnljeUJtYjNJZ1EyOXRjRzl1Wlc1MEozTWdjM1ZpWTJ4aGMzTmxjeXhjYmlBcUlDQWdJQ0FnSUdKbFkyRjFjMlVnUTI5dGNHOXVaVzUwSUdseklHTnlaV0YwWldRZ1lua2dkR2hsSUdWdVoybHVaUzVjYmlBcUlDRWplbWhjYmlBcUlPYUpnT2FjaWVtWmhPV0tvT1dJc09pS2d1ZUN1ZWVhaE9XZnV1ZXh1K09BZ2p4aWNpOCtYRzRnS2lBOFluSXZQbHh1SUNvZzVyT281b1NQNzd5YTVMaU41WVdCNks2NDVMMi81NVNvNTd1RTVMdTI1NXFFNWEyUTU3Rzc1cDZFNllDZzVZK0M1cFd3Nzd5TTVadWc1TGk2NTd1RTVMdTI1cGl2NTVTeDVieVY1cE9PNVlpYjVidTY1NXFFNDRDQ1hHNGdLbHh1SUNvZ1FHTnNZWE56SUVOdmJYQnZibVZ1ZEZ4dUlDb2dRR1Y0ZEdWdVpITWdUMkpxWldOMFhHNGdLaTljYm5aaGNpQkRiMjF3YjI1bGJuUWdQU0JqWXk1RGJHRnpjeWg3WEc0Z0lDQWdibUZ0WlRvZ0oyTmpMa052YlhCdmJtVnVkQ2NzWEc0Z0lDQWdaWGgwWlc1a2N6b2dRME5QWW1wbFkzUXNYRzVjYmlBZ0lDQmpkRzl5T2lCRFExOUZSRWxVVDFJZ1B5Qm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDNhVzVrYjNjdVgxTmpaVzVsSUNZbUlGOVRZMlZ1WlM1QmMzTmxkSE5YWVhSamFHVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZVMk5sYm1VdVFYTnpaWFJ6VjJGMFkyaGxjaTVwYm1sMFEyOXRjRzl1Wlc1MEtIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJsa0lEMGdSV1JwZEc5eUxsVjBhV3h6TGxWMWFXUlZkR2xzY3k1MWRXbGtLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUZKbFoybHpkR1Z5SUdGc2JDQnlaV3hoZEdWa0lFVjJaVzUwVkdGeVoyVjBjeXhjYmlBZ0lDQWdJQ0FnSUNvZ1lXeHNJR1YyWlc1MElHTmhiR3hpWVdOcmN5QjNhV3hzSUdKbElISmxiVzkyWldRZ2FXNGdYMjl1VUhKbFJHVnpkSEp2ZVZ4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMEZ5Y21GNWZTQmZYMlYyWlc1MFZHRnlaMlYwYzF4dUlDQWdJQ0FnSUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnZEdocGN5NWZYMlYyWlc1MFZHRnlaMlYwY3lBOUlGdGRPMXh1SUNBZ0lIMGdPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJsa0lEMGdhV1JIWlc1bGNtRjBaWEl1WjJWMFRtVjNTV1FvS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5ZlpYWmxiblJVWVhKblpYUnpJRDBnVzEwN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzRnVkdobElHNXZaR1VnZEdocGN5QmpiMjF3YjI1bGJuUWdhWE1nWVhSMFlXTm9aV1FnZEc4dUlFRWdZMjl0Y0c5dVpXNTBJR2x6SUdGc2QyRjVjeUJoZEhSaFkyaGxaQ0IwYnlCaElHNXZaR1V1WEc0Z0lDQWdJQ0FnSUNBcUlDRWplbWdnNksrbDU3dUU1THUyNktLcjZabUU1WXFnNVlpdzU1cUU2SXFDNTRLNTQ0Q0M1N3VFNUx1MjVvQzc1THlhNlptRTVZcWc1WWl3NUxpQTVMaXE2SXFDNTRLNTQ0Q0NYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCdWIyUmxYRzRnSUNBZ0lDQWdJQ0FxSUVCMGVYQmxJSHRPYjJSbGZWeHVJQ0FnSUNBZ0lDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0lDQWdJQ0FnS2lCall5NXNiMmNvWTI5dGNDNXViMlJsS1R0Y2JpQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJRzV2WkdVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2SUc1MWJHd3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMmFYTnBZbXhsT2lCbVlXeHpaVnh1SUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lHNWhiV1U2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RsZENBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMjVoYldVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyNWhiV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiR0Z6YzA1aGJXVWdQU0JqWXk1cWN5NW5aWFJEYkdGemMwNWhiV1VvZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSeWFXMU1aV1owSUQwZ1kyeGhjM05PWVcxbExteGhjM1JKYm1SbGVFOW1LQ2N1SnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJ5YVcxTVpXWjBJRDQ5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsSUQwZ1kyeGhjM05PWVcxbExuTnNhV05sS0hSeWFXMU1aV1owSUNzZ01TazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01dlpHVXVibUZ0WlNBcklDYzhKeUFySUdOc1lYTnpUbUZ0WlNBcklDYytKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYUWdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJtRnRaU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhacGMybGliR1U2SUdaaGJITmxYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0x5b3FYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNGdWR2hsSUhWMWFXUWdabTl5SUdWa2FYUnZjaTVjYmlBZ0lDQWdJQ0FnSUNvZ0lTTjZhQ0RudTRUa3U3Ym5tb1FnZFhWcFpPKzhqT2VVcU9TNmp1ZThsdWkra2VXWnFPT0FnbHh1SUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2RYVnBaRnh1SUNBZ0lDQWdJQ0FnS2lCQWRIbHdaU0I3VTNSeWFXNW5mVnh1SUNBZ0lDQWdJQ0FnS2lCQWNtVmhaRTl1YkhsY2JpQWdJQ0FnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0lDQWdJQ29nWTJNdWJHOW5LR052YlhBdWRYVnBaQ2s3WEc0Z0lDQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ0lDQjFkV2xrT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRZ0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyYVhOcFlteGxPaUJtWVd4elpWeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUY5ZmMyTnlhWEIwUVhOelpYUTZJRU5EWDBWRVNWUlBVaUFtSmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRZ0tDa2dlMzBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMM05sZENBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lHbG1JQ2gwYUdsekxsOWZjMk55YVhCMFZYVnBaQ0FoUFQwZ2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnSmlZZ1JXUnBkRzl5TGxWMGFXeHpMbFYxYVdSVmRHbHNjeTVwYzFWMWFXUW9kbUZzZFdVdVgzVjFhV1FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYkdGemMwbGtJRDBnUldScGRHOXlMbFYwYVd4ekxsVjFhV1JWZEdsc2N5NWpiMjF3Y21WemMxVjFhV1FvZG1Gc2RXVXVYM1YxYVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnVG1WM1EyOXRjQ0E5SUdOakxtcHpMbDluWlhSRGJHRnpjMEo1U1dRb1kyeGhjM05KWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hxY3k1cGMwTm9hV3hrUTJ4aGMzTlBaaWhPWlhkRGIyMXdMQ0JqWXk1RGIyMXdiMjVsYm5RcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCall5NTNZWEp1S0NkVGIzSnllU3dnY21Wd2JHRmphVzVuSUdOdmJYQnZibVZ1ZENCelkzSnBjSFFnYVhNZ2JtOTBJSGxsZENCcGJYQnNaVzFsYm5SbFpDNG5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZSV1JwZEc5eUxrbHdZeTV6Wlc1a1ZHOVhhVzV6S0NkeVpXeHZZV1E2ZDJsdVpHOTNMWE5qY21sd2RITW5MQ0JGWkdsMGIzSXVYMU5oYm1SaWIzZ3VZMjl0Y0dsc1pXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyTXVaWEp5YjNJb0owTmhiaUJ1YjNRZ1ptbHVaQ0JoSUdOdmJYQnZibVZ1ZENCcGJpQjBhR1VnYzJOeWFYQjBJSGRvYVdOb0lIVjFhV1FnYVhNZ1hDSWxjMXdpTGljc0lIWmhiSFZsTGw5MWRXbGtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQWdJQ0FnSUNBZ1kyTXVaWEp5YjNJb0owbHVkbUZzYVdRZ1UyTnlhWEIwSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5OUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdsemNHeGhlVTVoYldVNklDZFRZM0pwY0hRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dZMk11WDFOamNtbHdkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZiMngwYVhBNklFTkRYMFJGVmlBbUppQW5hVEU0YmpwSlRsTlFSVU5VVDFJdVkyOXRjRzl1Wlc1MExuTmpjbWx3ZENkY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJRjlsYm1GaWJHVmtYRzRnSUNBZ0lDQWdJQ0FxSUVCMGVYQmxJSHRDYjI5c1pXRnVmVnh1SUNBZ0lDQWdJQ0FnS2lCQWNISnBkbUYwWlZ4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdYMlZ1WVdKc1pXUTZJSFJ5ZFdVc1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzRnYVc1a2FXTmhkR1Z6SUhkb1pYUm9aWElnZEdocGN5QmpiMjF3YjI1bGJuUWdhWE1nWlc1aFlteGxaQ0J2Y2lCdWIzUXVYRzRnSUNBZ0lDQWdJQ0FxSUNFamVtZ2c2S0dvNTZTNjZLK2w1N3VFNUx1MjZJZXE2THFyNXBpdjVaQ201WkN2NTVTbzQ0Q0NYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCbGJtRmliR1ZrWEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdJQ0FnSUNBZ0tpQkFaR1ZtWVhWc2RDQjBjblZsWEc0Z0lDQWdJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FnSUNBZ0lDQXFJR052YlhBdVpXNWhZbXhsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBcUlHTmpMbXh2WnloamIyMXdMbVZ1WVdKc1pXUXBPMXh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ1pXNWhZbXhsWkRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWMElDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlpXNWhZbXhsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFFnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJWdVlXSnNaV1FnSVQwOUlIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyVnVZV0pzWldRZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVibTlrWlM1ZllXTjBhWFpsU1c1SWFXVnlZWEpqYUhrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYjIxd1UyTm9aV1IxYkdWeUlEMGdZMk11WkdseVpXTjBiM0l1WDJOdmJYQlRZMmhsWkhWc1pYSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyMXdVMk5vWldSMWJHVnlMbVZ1WVdKc1pVTnZiWEFvZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjF3VTJOb1pXUjFiR1Z5TG1ScGMyRmliR1ZEYjIxd0tIUm9hWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhacGMybGliR1U2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lXNXBiV0YwWVdKc1pUb2dkSEoxWlZ4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQWhJMlZ1SUdsdVpHbGpZWFJsY3lCM2FHVjBhR1Z5SUhSb2FYTWdZMjl0Y0c5dVpXNTBJR2x6SUdWdVlXSnNaV1FnWVc1a0lHbDBjeUJ1YjJSbElHbHpJR0ZzYzI4Z1lXTjBhWFpsSUdsdUlIUm9aU0JvYVdWeVlYSmphSGt1WEc0Z0lDQWdJQ0FnSUNBcUlDRWplbWdnNktHbzU2UzY2SytsNTd1RTVMdTI1cGl2NVpDbTZLS3I1WkN2NTVTbzVibTI1TGlVNW9tQTVaeW81NXFFNklxQzU0SzU1TG1mNWFTRTVMcU81citBNXJTNzU0cTI1b0NCNDRDQ1hHNGdJQ0FnSUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0JsYm1GaWJHVmtTVzVJYVdWeVlYSmphSGxjYmlBZ0lDQWdJQ0FnSUNvZ1FIUjVjR1VnZTBKdmIyeGxZVzU5WEc0Z0lDQWdJQ0FnSUNBcUlFQnlaV0ZrVDI1c2VWeHVJQ0FnSUNBZ0lDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0lDQWdJQ0FnS2lCall5NXNiMmNvWTI5dGNDNWxibUZpYkdWa1NXNUlhV1Z5WVhKamFIa3BPMXh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ1pXNWhZbXhsWkVsdVNHbGxjbUZ5WTJoNU9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCblpYUWdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWxibUZpYkdWa0lDWW1JSFJvYVhNdWJtOWtaUzVmWVdOMGFYWmxTVzVJYVdWeVlYSmphSGs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtbHphV0pzWlRvZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxiaUJTWlhSMWNtNXpJR0VnZG1Gc2RXVWdkMmhwWTJnZ2RYTmxaQ0IwYnlCcGJtUnBZMkYwWlNCMGFHVWdiMjVNYjJGa0lHZGxkQ0JqWVd4c1pXUWdiM0lnYm05MExseHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb0lPaS9sT1dibnVTNGdPUzRxdVdBdk9lVXFPYWRwZVdJcE9hV3JTQnZia3h2WVdRZzVwaXY1WkNtNktLcjZMQ0Q1NVNvNkwrSDc3eU01TGlONTYySjVMcU9JREFnNXBlMjZMQ0Q1NVNvNkwrSDc3eU01NjJKNUxxT0lEQWc1cGUyNXB5cTZMQ0Q1NVNvNDRDQ1hHNGdJQ0FnSUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0JmYVhOUGJreHZZV1JEWVd4c1pXUmNiaUFnSUNBZ0lDQWdJQ29nUUhSNWNHVWdlMDUxYldKbGNuMWNiaUFnSUNBZ0lDQWdJQ29nUUhKbFlXUlBibXg1WEc0Z0lDQWdJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FnSUNBZ0lDQXFJR05qTG14dlp5aDBhR2x6TGw5cGMwOXVURzloWkVOaGJHeGxaQ0ErSURBcE8xeHVJQ0FnSUNBZ0lDQWdLaTljYmlBZ0lDQWdJQ0FnWDJselQyNU1iMkZrUTJGc2JHVmtPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5aWFFnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl2WW1wR2JHRm5jeUFtSUVselQyNU1iMkZrUTJGc2JHVmtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZMeUJNU1VaRlExbERURVVnVFVWVVNFOUVVMXh1WEc0Z0lDQWdMeThnUm1seVpXSmhiR3dnY0hKdmRtbGtaWE1nYkdsbVpXTjVZMnhsSUcxbGRHaHZaSE1nZEdoaGRDQjViM1VnWTJGdUlITndaV05wWm5rZ2RHOGdhRzl2YXlCcGJuUnZJSFJvYVhNZ2NISnZZMlZ6Y3k1Y2JpQWdJQ0F2THlCWFpTQndjbTkyYVdSbElGQnlaU0J0WlhSb2IyUnpMQ0IzYUdsamFDQmhjbVVnWTJGc2JHVmtJSEpwWjJoMElHSmxabTl5WlNCemIyMWxkR2hwYm1jZ2FHRndjR1Z1Y3l3Z1lXNWtJRkJ2YzNRZ2JXVjBhRzlrY3lCM2FHbGphQ0JoY21VZ1kyRnNiR1ZrSUhKcFoyaDBJR0ZtZEdWeUlITnZiV1YwYUdsdVp5Qm9ZWEJ3Wlc1ekxseHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCVmNHUmhkR1VnYVhNZ1kyRnNiR1ZrSUdWMlpYSjVJR1p5WVcxbExDQnBaaUIwYUdVZ1EyOXRjRzl1Wlc1MElHbHpJR1Z1WVdKc1pXUXVQR0p5THo1Y2JpQWdJQ0FnS2lCVWFHbHpJR2x6SUdFZ2JHbG1aV041WTJ4bElHMWxkR2h2WkM0Z1NYUWdiV0Y1SUc1dmRDQmlaU0JwYlhCc1pXMWxiblJsWkNCcGJpQjBhR1VnYzNWd1pYSWdZMnhoYzNNdUlGbHZkU0JqWVc0Z2IyNXNlU0JqWVd4c0lHbDBjeUJ6ZFhCbGNpQmpiR0Z6Y3lCdFpYUm9iMlFnYVc1emFXUmxJR2wwTGlCSmRDQnphRzkxYkdRZ2JtOTBJR0psSUdOaGJHeGxaQ0J0WVc1MVlXeHNlU0JsYkhObGQyaGxjbVV1WEc0Z0lDQWdJQ29nSVNONmFDRGxwb0xtbnB6b3I2WG51NFRrdTdibGtLL25sS2p2dkl6bGlKbm1yNC9sdUtmb3NJUG5sS2dnZFhCa1lYUmw0NENDUEdKeUx6NWNiaUFnSUNBZ0tpRG9yNlhtbHJubXM1WGt1THJubEovbGtiM2xrYWptbkovbWxybm1zNVh2dkl6bmlMYm5zYnZtbktybHY0WGt2SnJtbklubHJwN25qckRqZ0lMbHViYmt1SlRrdmFEbGo2cm9nNzNsbktqb3I2WG1scm5tczVYbGhvWHBnNmpvc0lQbmxLam5pTGJuc2J2bm1vVGxycDduanJEdnZJemt1STNsajYvbG5LamxoYmJscm9QbG5MRG1scm5ubTdUbWpxWG9zSVBubEtqb3I2WG1scm5tczVYamdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lIVndaR0YwWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JrZENBdElIUm9aU0JrWld4MFlTQjBhVzFsSUdsdUlITmxZMjl1WkhNZ2FYUWdkRzl2YXlCMGJ5QmpiMjF3YkdWMFpTQjBhR1VnYkdGemRDQm1jbUZ0WlZ4dUlDQWdJQ0FxSUVCd2NtOTBaV04wWldSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IxY0dSaGRHVTZJRzUxYkd3c1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1SUV4aGRHVlZjR1JoZEdVZ2FYTWdZMkZzYkdWa0lHVjJaWEo1SUdaeVlXMWxMQ0JwWmlCMGFHVWdRMjl0Y0c5dVpXNTBJR2x6SUdWdVlXSnNaV1F1UEdKeUx6NWNiaUFnSUNBZ0tpQlVhR2x6SUdseklHRWdiR2xtWldONVkyeGxJRzFsZEdodlpDNGdTWFFnYldGNUlHNXZkQ0JpWlNCcGJYQnNaVzFsYm5SbFpDQnBiaUIwYUdVZ2MzVndaWElnWTJ4aGMzTXVJRmx2ZFNCallXNGdiMjVzZVNCallXeHNJR2wwY3lCemRYQmxjaUJqYkdGemN5QnRaWFJvYjJRZ2FXNXphV1JsSUdsMExpQkpkQ0J6YUc5MWJHUWdibTkwSUdKbElHTmhiR3hsWkNCdFlXNTFZV3hzZVNCbGJITmxkMmhsY21VdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RscG9MbW5wem9yNlhudTRUa3U3YmxrSy9ubEtqdnZJemxpSm5tcjQvbHVLZm9zSVBubEtnZ1RHRjBaVlZ3WkdGMFplT0FnanhpY2k4K1hHNGdJQ0FnSUNvZzZLK2w1cGE1NXJPVjVMaTY1NVNmNVpHOTVaR281cHlmNXBhNTVyT1Y3N3lNNTRpMjU3Rzc1cHlxNWIrRjVMeWE1cHlKNWE2ZTU0Nnc0NENDNWJtMjVMaVU1TDJnNVkrcTZJTzk1WnlvNksrbDVwYTU1ck9WNVlhRjZZT282TENENTVTbzU0aTI1N0c3NTVxRTVhNmU1NDZ3Nzd5TTVMaU41WSt2NVp5bzVZVzI1YTZENVp5dzVwYTU1NXUwNW82bDZMQ0Q1NVNvNksrbDVwYTU1ck9WNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCc1lYUmxWWEJrWVhSbFhHNGdJQ0FnSUNvZ1FIQnliM1JsWTNSbFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUd4aGRHVlZjR1JoZEdVNklHNTFiR3dzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCZ1gxOXdjbVZzYjJGa1lDQnBjeUJqWVd4c1pXUWdZbVZtYjNKbElHVjJaWEo1SUc5dVRHOWhaQzVjYmlBZ0lDQWdLaUJKZENCcGN5QjFjMlZrSUhSdklHbHVhWFJwWVd4cGVtVWdkR2hsSUdKMWFXeDBhVzRnWTI5dGNHOXVaVzUwY3lCcGJuUmxjbTVoYkd4NUxGeHVJQ0FnSUNBcUlIUnZJR0YyYjJsa0lHTm9aV05yYVc1bklIZG9aWFJvWlhJZ2IyNU1iMkZrSUdseklHTmhiR3hsWkNCaVpXWnZjbVVnWlhabGNua2djSFZpYkdsaklHMWxkR2h2WkNCallXeHNjeTVjYmlBZ0lDQWdLaUJVYUdseklHMWxkR2h2WkNCemFHOTFiR1FnWW1VZ2NtVnRiM1psWkNCcFppQnpZM0pwY0hRZ2NISnBiM0pwZEhrZ2FYTWdjM1Z3Y0c5eWRHVmtMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQmZYM0J5Wld4dllXUmNiaUFnSUNBZ0tpQkFjSEpwZG1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUY5ZmNISmxiRzloWkRvZ2JuVnNiQ3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNWNiaUFnSUNBZ0tpQlhhR1Z1SUdGMGRHRmphR2x1WnlCMGJ5QmhiaUJoWTNScGRtVWdibTlrWlNCdmNpQnBkSE1nYm05a1pTQm1hWEp6ZENCaFkzUnBkbUYwWldRdVhHNGdJQ0FnSUNvZ2IyNU1iMkZrSUdseklHRnNkMkY1Y3lCallXeHNaV1FnWW1WbWIzSmxJR0Z1ZVNCemRHRnlkQ0JtZFc1amRHbHZibk1zSUhSb2FYTWdZV3hzYjNkeklIbHZkU0IwYnlCdmNtUmxjaUJwYm1sMGFXRnNhWHBoZEdsdmJpQnZaaUJ6WTNKcGNIUnpManhpY2k4K1hHNGdJQ0FnSUNvZ1ZHaHBjeUJwY3lCaElHeHBabVZqZVdOc1pTQnRaWFJvYjJRdUlFbDBJRzFoZVNCdWIzUWdZbVVnYVcxd2JHVnRaVzUwWldRZ2FXNGdkR2hsSUhOMWNHVnlJR05zWVhOekxpQlpiM1VnWTJGdUlHOXViSGtnWTJGc2JDQnBkSE1nYzNWd1pYSWdZMnhoYzNNZ2JXVjBhRzlrSUdsdWMybGtaU0JwZEM0Z1NYUWdjMmh2ZFd4a0lHNXZkQ0JpWlNCallXeHNaV1FnYldGdWRXRnNiSGtnWld4elpYZG9aWEpsTGx4dUlDQWdJQ0FxSUNFamVtaGNiaUFnSUNBZ0tpRGx2WlBwbVlUbGlxRGxpTERrdUlEa3VLcm12NERtdEx2bm1vVG9pb0xuZ3Jua3VJcm1pSmJvZ0lYbGhiYm9pb0xuZ3JubnJLemt1SURtcktIbXY0RG10THZtbDdibGdKbm9zSVBubEtqamdJSnZia3h2WVdRZzVvQzc1cGl2NUx5YTVaeW81THU3NUwyVklITjBZWEowSU9hV3VlYXpsZWl3ZytlVXFPV0pqZWFKcCtpaGpPKzhqT2kvbWVpRHZlZVVxT1M2anVXdWllYU9rdWlFbXVhY3JPZWFoT1dJbmVXbmkrV01sdW1odXVXNmorT0FnanhpY2k4K1hHNGdJQ0FnSUNvZzZLK2w1cGE1NXJPVjVMaTY1NVNmNVpHOTVaR281cHlmNXBhNTVyT1Y3N3lNNTRpMjU3Rzc1cHlxNWIrRjVMeWE1cHlKNWE2ZTU0Nnc0NENDNWJtMjVMaVU1TDJnNVkrcTZJTzk1WnlvNksrbDVwYTU1ck9WNVlhRjZZT282TENENTVTbzU0aTI1N0c3NTVxRTVhNmU1NDZ3Nzd5TTVMaU41WSt2NVp5bzVZVzI1YTZENVp5dzVwYTU1NXUwNW82bDZMQ0Q1NVNvNksrbDVwYTU1ck9WNDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCdmJreHZZV1JjYmlBZ0lDQWdLaUJBY0hKdmRHVmpkR1ZrWEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjVNYjJGa09pQnVkV3hzTEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxibHh1SUNBZ0lDQXFJRU5oYkd4bFpDQmlaV1p2Y21VZ1lXeHNJSE5qY21sd2RITW5JSFZ3WkdGMFpTQnBaaUIwYUdVZ1EyOXRjRzl1Wlc1MElHbHpJR1Z1WVdKc1pXUWdkR2hsSUdacGNuTjBJSFJwYldVdVhHNGdJQ0FnSUNvZ1ZYTjFZV3hzZVNCMWMyVmtJSFJ2SUdsdWFYUnBZV3hwZW1VZ2MyOXRaU0JzYjJkcFl5QjNhR2xqYUNCdVpXVmtJSFJ2SUdKbElHTmhiR3hsWkNCaFpuUmxjaUJoYkd3Z1kyOXRjRzl1Wlc1MGN5Y2dZRzl1Ykc5aFpHQWdiV1YwYUc5a2N5QmpZV3hzWldRdVBHSnlMejVjYmlBZ0lDQWdLaUJVYUdseklHbHpJR0VnYkdsbVpXTjVZMnhsSUcxbGRHaHZaQzRnU1hRZ2JXRjVJRzV2ZENCaVpTQnBiWEJzWlcxbGJuUmxaQ0JwYmlCMGFHVWdjM1Z3WlhJZ1kyeGhjM011SUZsdmRTQmpZVzRnYjI1c2VTQmpZV3hzSUdsMGN5QnpkWEJsY2lCamJHRnpjeUJ0WlhSb2IyUWdhVzV6YVdSbElHbDBMaUJKZENCemFHOTFiR1FnYm05MElHSmxJR05oYkd4bFpDQnRZVzUxWVd4c2VTQmxiSE5sZDJobGNtVXVYRzRnSUNBZ0lDb2dJU042YUZ4dUlDQWdJQ0FxSU9XbWd1YWVuT2l2cGVlN2hPUzd0dWVzck9TNGdPYXNvZVdRcitlVXFPKzhqT1dJbWVXY3FPYUpnT2FjaWVlN2hPUzd0dWVhaENCMWNHUmhkR1VnNUxtTDVZbU42TENENTVTbzQ0Q0M2WUNhNWJpNDU1U281THFPNlp5QTZLYUI1WnlvNW9tQTVweUo1N3VFNUx1MjU1cUVJRzl1VEc5aFpDRGxpSjNscDR2bGpKYmxyb3ptcjVYbGtJN21pYWZvb1l6bm1vVHBnTHZvdnBIamdJSThZbkl2UGx4dUlDQWdJQ0FxSU9pdnBlYVd1ZWF6bGVTNHV1ZVVuK1dSdmVXUnFPYWNuK2FXdWVhemxlKzhqT2VJdHVleHUrYWNxdVcvaGVTOG11YWNpZVd1bnVlT3NPT0FndVc1dHVTNGxPUzlvT1dQcXVpRHZlV2NxT2l2cGVhV3VlYXpsZVdHaGVtRHFPaXdnK2VVcU9lSXR1ZXh1K2VhaE9XdW51ZU9zTys4ak9TNGplV1ByK1djcU9XRnR1V3VnK1djc09hV3VlZWJ0T2FPcGVpd2crZVVxT2l2cGVhV3VlYXpsZU9BZ2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnYzNSaGNuUmNiaUFnSUNBZ0tpQkFjSEp2ZEdWamRHVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzUmhjblE2SUc1MWJHd3NYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUFoSTJWdUlFTmhiR3hsWkNCM2FHVnVJSFJvYVhNZ1kyOXRjRzl1Wlc1MElHSmxZMjl0WlhNZ1pXNWhZbXhsWkNCaGJtUWdhWFJ6SUc1dlpHVWdhWE1nWVdOMGFYWmxManhpY2k4K1hHNGdJQ0FnSUNvZ1ZHaHBjeUJwY3lCaElHeHBabVZqZVdOc1pTQnRaWFJvYjJRdUlFbDBJRzFoZVNCdWIzUWdZbVVnYVcxd2JHVnRaVzUwWldRZ2FXNGdkR2hsSUhOMWNHVnlJR05zWVhOekxpQlpiM1VnWTJGdUlHOXViSGtnWTJGc2JDQnBkSE1nYzNWd1pYSWdZMnhoYzNNZ2JXVjBhRzlrSUdsdWMybGtaU0JwZEM0Z1NYUWdjMmh2ZFd4a0lHNXZkQ0JpWlNCallXeHNaV1FnYldGdWRXRnNiSGtnWld4elpYZG9aWEpsTGx4dUlDQWdJQ0FxSUNFamVtZ2c1YjJUNksrbDU3dUU1THUyNktLcjVaQ3Y1NVNvNzd5TTVibTI1TGlVNWE2RDU1cUU2SXFDNTRLNTVMbWY1citBNXJTNzVwZTI0NENDUEdKeUx6NWNiaUFnSUNBZ0tpRG9yNlhtbHJubXM1WGt1THJubEovbGtiM2xrYWptbkovbWxybm1zNVh2dkl6bmlMYm5zYnZtbktybHY0WGt2SnJtbklubHJwN25qckRqZ0lMbHViYmt1SlRrdmFEbGo2cm9nNzNsbktqb3I2WG1scm5tczVYbGhvWHBnNmpvc0lQbmxLam5pTGJuc2J2bm1vVGxycDduanJEdnZJemt1STNsajYvbG5LamxoYmJscm9QbG5MRG1scm5ubTdUbWpxWG9zSVBubEtqb3I2WG1scm5tczVYamdJSmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHOXVSVzVoWW14bFhHNGdJQ0FnSUNvZ1FIQnliM1JsWTNSbFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVJXNWhZbXhsT2lCdWRXeHNMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQkRZV3hzWldRZ2QyaGxiaUIwYUdseklHTnZiWEJ2Ym1WdWRDQmlaV052YldWeklHUnBjMkZpYkdWa0lHOXlJR2wwY3lCdWIyUmxJR0psWTI5dFpYTWdhVzVoWTNScGRtVXVQR0p5THo1Y2JpQWdJQ0FnS2lCVWFHbHpJR2x6SUdFZ2JHbG1aV041WTJ4bElHMWxkR2h2WkM0Z1NYUWdiV0Y1SUc1dmRDQmlaU0JwYlhCc1pXMWxiblJsWkNCcGJpQjBhR1VnYzNWd1pYSWdZMnhoYzNNdUlGbHZkU0JqWVc0Z2IyNXNlU0JqWVd4c0lHbDBjeUJ6ZFhCbGNpQmpiR0Z6Y3lCdFpYUm9iMlFnYVc1emFXUmxJR2wwTGlCSmRDQnphRzkxYkdRZ2JtOTBJR0psSUdOaGJHeGxaQ0J0WVc1MVlXeHNlU0JsYkhObGQyaGxjbVV1WEc0Z0lDQWdJQ29nSVNONmFDRGx2WlBvcjZYbnU0VGt1N2Jvb3F2bnBvSG5sS2ptaUpib2lvTG5ncm5sajVqa3VMcm1sNkRtbFlqbWw3Ym9zSVBubEtqamdJSThZbkl2UGx4dUlDQWdJQ0FxSU9pdnBlYVd1ZWF6bGVTNHV1ZVVuK1dSdmVXUnFPYWNuK2FXdWVhemxlKzhqT2VJdHVleHUrYWNxdVcvaGVTOG11YWNpZVd1bnVlT3NPT0FndVc1dHVTNGxPUzlvT1dQcXVpRHZlV2NxT2l2cGVhV3VlYXpsZVdHaGVtRHFPaXdnK2VVcU9lSXR1ZXh1K2VhaE9XdW51ZU9zTys4ak9TNGplV1ByK1djcU9XRnR1V3VnK1djc09hV3VlZWJ0T2FPcGVpd2crZVVxT2l2cGVhV3VlYXpsZU9BZ2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnYjI1RWFYTmhZbXhsWEc0Z0lDQWdJQ29nUUhCeWIzUmxZM1JsWkZ4dUlDQWdJQ0FxTDF4dUlDQWdJRzl1UkdsellXSnNaVG9nYm5Wc2JDeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0VqWlc0Z1EyRnNiR1ZrSUhkb1pXNGdkR2hwY3lCamIyMXdiMjVsYm5RZ2QybHNiQ0JpWlNCa1pYTjBjbTk1WldRdVBHSnlMejVjYmlBZ0lDQWdLaUJVYUdseklHbHpJR0VnYkdsbVpXTjVZMnhsSUcxbGRHaHZaQzRnU1hRZ2JXRjVJRzV2ZENCaVpTQnBiWEJzWlcxbGJuUmxaQ0JwYmlCMGFHVWdjM1Z3WlhJZ1kyeGhjM011SUZsdmRTQmpZVzRnYjI1c2VTQmpZV3hzSUdsMGN5QnpkWEJsY2lCamJHRnpjeUJ0WlhSb2IyUWdhVzV6YVdSbElHbDBMaUJKZENCemFHOTFiR1FnYm05MElHSmxJR05oYkd4bFpDQnRZVzUxWVd4c2VTQmxiSE5sZDJobGNtVXVYRzRnSUNBZ0lDb2dJU042YUNEbHZaUG9yNlhudTRUa3U3Ym9vcXZwbElEbXI0SG1sN2Jvc0lQbmxLZzhZbkl2UGx4dUlDQWdJQ0FxSU9pdnBlYVd1ZWF6bGVTNHV1ZVVuK1dSdmVXUnFPYWNuK2FXdWVhemxlKzhqT2VJdHVleHUrYWNxdVcvaGVTOG11YWNpZVd1bnVlT3NPT0FndVc1dHVTNGxPUzlvT1dQcXVpRHZlV2NxT2l2cGVhV3VlYXpsZVdHaGVtRHFPaXdnK2VVcU9lSXR1ZXh1K2VhaE9XdW51ZU9zTys4ak9TNGplV1ByK1djcU9XRnR1V3VnK1djc09hV3VlZWJ0T2FPcGVpd2crZVVxT2l2cGVhV3VlYXpsZU9BZ2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnYjI1RVpYTjBjbTk1WEc0Z0lDQWdJQ29nUUhCeWIzUmxZM1JsWkZ4dUlDQWdJQ0FxTDF4dUlDQWdJRzl1UkdWemRISnZlVG9nYm5Wc2JDeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdiMjVHYjJOMWMwbHVSV1JwZEc5eVhHNGdJQ0FnSUNvZ1FIQnliM1JsWTNSbFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVJtOWpkWE5KYmtWa2FYUnZjam9nYm5Wc2JDeGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHOXVURzl6ZEVadlkzVnpTVzVGWkdsMGIzSmNiaUFnSUNBZ0tpQkFjSEp2ZEdWamRHVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNU1iM04wUm05amRYTkpia1ZrYVhSdmNqb2diblZzYkN4Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBaEkyVnVJRU5oYkd4bFpDQjBieUJwYm1sMGFXRnNhWHBsSUhSb1pTQmpiMjF3YjI1bGJuUWdiM0lnYm05a1plS0FtWE1nY0hKdmNHVnlkR2xsY3lCM2FHVnVJR0ZrWkdsdVp5QjBhR1VnWTI5dGNHOXVaVzUwSUhSb1pTQm1hWEp6ZENCMGFXMWxJRzl5SUhkb1pXNGdkR2hsSUZKbGMyVjBJR052YlcxaGJtUWdhWE1nZFhObFpDNGdWR2hwY3lCbWRXNWpkR2x2YmlCcGN5QnZibXg1SUdOaGJHeGxaQ0JwYmlCbFpHbDBiM0l1WEc0Z0lDQWdJQ29nSVNONmFDRG5sS2ptbmFYbGlKM2xwNHZsakpibnU0VGt1N2JtaUpib2lvTG5ncm5ubW9Ua3VJRGt1cHZsc1o3bWdLZnZ2SXpsdlpQb3I2WG51NFRrdTdib29xdm5yS3prdUlEbXJLSG10N3ZsaXFEbGlMRG9pb0xuZ3Jua3VJcm1pSmJubEtqbWlMZm5ncm5saDd2a3VvYmxyb1BubW9RZ1VtVnpaWFFnNkkrYzVZMlY1cGUyNkxDRDU1U280NENDNkwrWjVMaXE1WnVlNkxDRDVZK3E1THlhNVp5bzU3eVc2TDZSNVptbzVMaUw2TENENTVTbzQ0Q0NYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnlaWE5sZEVsdVJXUnBkRzl5WEc0Z0lDQWdJQ29nUUhCeWIzUmxZM1JsWkZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEpsYzJWMFNXNUZaR2wwYjNJNklHNTFiR3dzWEc1Y2JpQWdJQ0F2THlCUVZVSk1TVU5jYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUNFalpXNGdRV1JrY3lCaElHTnZiWEJ2Ym1WdWRDQmpiR0Z6Y3lCMGJ5QjBhR1VnYm05a1pTNGdXVzkxSUdOaGJpQmhiSE52SUdGa1pDQmpiMjF3YjI1bGJuUWdkRzhnYm05a1pTQmllU0J3WVhOemFXNW5JR2x1SUhSb1pTQnVZVzFsSUc5bUlIUm9aU0J6WTNKcGNIUXVYRzRnSUNBZ0lDb2dJU042YUNEbGtKSG9pb0xuZ3JubXQ3dmxpcURrdUlEa3VLcm51NFRrdTdibnNidnZ2SXprdmFEb3Y1amxqNi9rdTZYcGdKcm92NGZrdktEbGhhWG9oSnJtbkt6bm1vVGxrSTNucDdEbW5hWG10N3ZsaXFEbnU0VGt1N2JqZ0lKY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWVdSa1EyOXRjRzl1Wlc1MFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym54VGRISnBibWQ5SUhSNWNHVlBja05zWVhOelRtRnRaU0F0SUhSb1pTQmpiMjV6ZEhKMVkzUnZjaUJ2Y2lCMGFHVWdZMnhoYzNNZ2JtRnRaU0J2WmlCMGFHVWdZMjl0Y0c5dVpXNTBJSFJ2SUdGa1pGeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwTnZiWEJ2Ym1WdWRIMGdMU0IwYUdVZ2JtVjNiSGtnWVdSa1pXUWdZMjl0Y0c5dVpXNTBYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0tpQjJZWElnYzNCeWFYUmxJRDBnYm05a1pTNWhaR1JEYjIxd2IyNWxiblFvWTJNdVUzQnlhWFJsS1R0Y2JpQWdJQ0FnS2lCMllYSWdkR1Z6ZENBOUlHNXZaR1V1WVdSa1EyOXRjRzl1Wlc1MEtGd2lWR1Z6ZEZ3aUtUdGNiaUFnSUNBZ0tpQkFkSGx3WlhOamNtbHdkRnh1SUNBZ0lDQXFJR0ZrWkVOdmJYQnZibVZ1ZER4VUlHVjRkR1Z1WkhNZ1EyOXRjRzl1Wlc1MFBpaDBlWEJsT2lCN2JtVjNLQ2s2SUZSOUtUb2dWRnh1SUNBZ0lDQXFJR0ZrWkVOdmJYQnZibVZ1ZENoamJHRnpjMDVoYldVNklITjBjbWx1WnlrNklHRnVlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHRmtaRU52YlhCdmJtVnVkQ0FvZEhsd1pVOXlRMnhoYzNOT1lXMWxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNXZaR1V1WVdSa1EyOXRjRzl1Wlc1MEtIUjVjR1ZQY2tOc1lYTnpUbUZ0WlNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJSFJvWlNCamIyMXdiMjVsYm5RZ2IyWWdjM1Z3Y0d4cFpXUWdkSGx3WlNCcFppQjBhR1VnYm05a1pTQm9ZWE1nYjI1bElHRjBkR0ZqYUdWa0xDQnVkV3hzSUdsbUlHbDBJR1J2WlhOdUozUXVQR0p5THo1Y2JpQWdJQ0FnS2lCWmIzVWdZMkZ1SUdGc2MyOGdaMlYwSUdOdmJYQnZibVZ1ZENCcGJpQjBhR1VnYm05a1pTQmllU0J3WVhOemFXNW5JR2x1SUhSb1pTQnVZVzFsSUc5bUlIUm9aU0J6WTNKcGNIUXVYRzRnSUNBZ0lDb2dJU042YUZ4dUlDQWdJQ0FxSU9pT3QrV1BsdWlLZ3VlQ3VlUzRpdWFNaCtXdW11ZXh1K1dlaStlYWhPZTdoT1M3dHUrOGpPV21ndWFlbk9pS2d1ZUN1ZWFjaWVtWmhPV0tvT2FNaCtXdW11ZXh1K1dlaStlYWhPZTdoT1M3dHUrOGpPV0ltZWkvbE9XYm51KzhqT1dtZ3VhZW5PYXlvZWFjaWVXSW1lUzR1dWVwdXVPQWdqeGljaTgrWEc0Z0lDQWdJQ29nNUx5ZzVZV2w1WStDNXBXdzVMbWY1WSt2NUx1bDVwaXY2SVNhNXB5czU1cUU1WkNONTZldzQ0Q0NYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHZGxkRU52YlhCdmJtVnVkRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNThVM1J5YVc1bmZTQjBlWEJsVDNKRGJHRnpjMDVoYldWY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0RGIyMXdiMjVsYm5SOVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnS2lBdkx5Qm5aWFFnYzNCeWFYUmxJR052YlhCdmJtVnVkQzVjYmlBZ0lDQWdLaUIyWVhJZ2MzQnlhWFJsSUQwZ2JtOWtaUzVuWlhSRGIyMXdiMjVsYm5Rb1kyTXVVM0J5YVhSbEtUdGNiaUFnSUNBZ0tpQXZMeUJuWlhRZ1kzVnpkRzl0SUhSbGMzUWdZMkZzYzNNdVhHNGdJQ0FnSUNvZ2RtRnlJSFJsYzNRZ1BTQnViMlJsTG1kbGRFTnZiWEJ2Ym1WdWRDaGNJbFJsYzNSY0lpazdYRzRnSUNBZ0lDb2dRSFI1Y0dWelkzSnBjSFJjYmlBZ0lDQWdLaUJuWlhSRGIyMXdiMjVsYm5ROFZDQmxlSFJsYm1SeklFTnZiWEJ2Ym1WdWRENG9kSGx3WlRvZ2UzQnliM1J2ZEhsd1pUb2dWSDBwT2lCVVhHNGdJQ0FnSUNvZ1oyVjBRMjl0Y0c5dVpXNTBLR05zWVhOelRtRnRaVG9nYzNSeWFXNW5LVG9nWVc1NVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMFEyOXRjRzl1Wlc1MElDaDBlWEJsVDNKRGJHRnpjMDVoYldVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05a1pTNW5aWFJEYjIxd2IyNWxiblFvZEhsd1pVOXlRMnhoYzNOT1lXMWxLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJpQlNaWFIxY201eklHRnNiQ0JqYjIxd2IyNWxiblJ6SUc5bUlITjFjSEJzYVdWa0lGUjVjR1VnYVc0Z2RHaGxJRzV2WkdVdVhHNGdJQ0FnSUNvZ0lTTjZhQ0RvdjVUbG01N29pb0xuZ3Jua3VJcm1qSWZscnBybnNidmxub3ZubW9UbWlZRG1uSW5udTRUa3U3YmpnSUpjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdaMlYwUTI5dGNHOXVaVzUwYzF4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU4VTNSeWFXNW5mU0IwZVhCbFQzSkRiR0Z6YzA1aGJXVmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdERiMjF3YjI1bGJuUmJYWDFjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0lDQXFJSFpoY2lCemNISnBkR1Z6SUQwZ2JtOWtaUzVuWlhSRGIyMXdiMjVsYm5SektHTmpMbE53Y21sMFpTazdYRzRnSUNBZ0lDb2dkbUZ5SUhSbGMzUnpJRDBnYm05a1pTNW5aWFJEYjIxd2IyNWxiblJ6S0Z3aVZHVnpkRndpS1R0Y2JpQWdJQ0FnS2lCQWRIbHdaWE5qY21sd2RGeHVJQ0FnSUNBcUlHZGxkRU52YlhCdmJtVnVkSE04VkNCbGVIUmxibVJ6SUVOdmJYQnZibVZ1ZEQ0b2RIbHdaVG9nZTNCeWIzUnZkSGx3WlRvZ1ZIMHBPaUJVVzExY2JpQWdJQ0FnS2lCblpYUkRiMjF3YjI1bGJuUnpLR05zWVhOelRtRnRaVG9nYzNSeWFXNW5LVG9nWVc1NVcxMWNiaUFnSUNBZ0tpOWNiaUFnSUNCblpYUkRiMjF3YjI1bGJuUnpJQ2gwZVhCbFQzSkRiR0Z6YzA1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJtOWtaUzVuWlhSRGIyMXdiMjVsYm5SektIUjVjR1ZQY2tOc1lYTnpUbUZ0WlNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVW1WMGRYSnVjeUIwYUdVZ1kyOXRjRzl1Wlc1MElHOW1JSE4xY0hCc2FXVmtJSFI1Y0dVZ2FXNGdZVzU1SUc5bUlHbDBjeUJqYUdsc1pISmxiaUIxYzJsdVp5QmtaWEIwYUNCbWFYSnpkQ0J6WldGeVkyZ3VYRzRnSUNBZ0lDb2dJU042YUNEcGdKTGx2WkxtbjZYbWliN21pWURtbklubHJaRG9pb0xuZ3Jua3VLM25yS3prdUlEa3VLcmxqTG5waFkzbWpJZmxycHJuc2J2bG5vdm5tb1RudTRUa3U3YmpnSUpjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdaMlYwUTI5dGNHOXVaVzUwU1c1RGFHbHNaSEpsYmx4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU4VTNSeWFXNW5mU0IwZVhCbFQzSkRiR0Z6YzA1aGJXVmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QjdRMjl0Y0c5dVpXNTBmVnh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBZ0lDb2dkbUZ5SUhOd2NtbDBaU0E5SUc1dlpHVXVaMlYwUTI5dGNHOXVaVzUwU1c1RGFHbHNaSEpsYmloall5NVRjSEpwZEdVcE8xeHVJQ0FnSUNBcUlIWmhjaUJVWlhOMElEMGdibTlrWlM1blpYUkRiMjF3YjI1bGJuUkpia05vYVd4a2NtVnVLRndpVkdWemRGd2lLVHRjYmlBZ0lDQWdLaUJBZEhsd1pYTmpjbWx3ZEZ4dUlDQWdJQ0FxSUdkbGRFTnZiWEJ2Ym1WdWRFbHVRMmhwYkdSeVpXNDhWQ0JsZUhSbGJtUnpJRU52YlhCdmJtVnVkRDRvZEhsd1pUb2dlM0J5YjNSdmRIbHdaVG9nVkgwcE9pQlVYRzRnSUNBZ0lDb2daMlYwUTI5dGNHOXVaVzUwU1c1RGFHbHNaSEpsYmloamJHRnpjMDVoYldVNklITjBjbWx1WnlrNklHRnVlVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRU52YlhCdmJtVnVkRWx1UTJocGJHUnlaVzRnS0hSNWNHVlBja05zWVhOelRtRnRaU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXViMlJsTG1kbGRFTnZiWEJ2Ym1WdWRFbHVRMmhwYkdSeVpXNG9kSGx3WlU5eVEyeGhjM05PWVcxbEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCU1pYUjFjbTV6SUhSb1pTQmpiMjF3YjI1bGJuUnpJRzltSUhOMWNIQnNhV1ZrSUhSNWNHVWdhVzRnYzJWc1ppQnZjaUJoYm5rZ2IyWWdhWFJ6SUdOb2FXeGtjbVZ1SUhWemFXNW5JR1JsY0hSb0lHWnBjbk4wSUhObFlYSmphQzVjYmlBZ0lDQWdLaUFoSTNwb0lPbUFrdVc5a3VhZnBlYUp2dWlIcXVpNnErYUlsdWFKZ09hY2llV3RrT2lLZ3VlQ3VlUzRyZWFNaCtXdW11ZXh1K1dlaStlYWhPZTdoT1M3dGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JuWlhSRGIyMXdiMjVsYm5SelNXNURhR2xzWkhKbGJseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OFUzUnlhVzVuZlNCMGVYQmxUM0pEYkdGemMwNWhiV1ZjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUI3UTI5dGNHOXVaVzUwVzExOVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnS2lCMllYSWdjM0J5YVhSbGN5QTlJRzV2WkdVdVoyVjBRMjl0Y0c5dVpXNTBjMGx1UTJocGJHUnlaVzRvWTJNdVUzQnlhWFJsS1R0Y2JpQWdJQ0FnS2lCMllYSWdkR1Z6ZEhNZ1BTQnViMlJsTG1kbGRFTnZiWEJ2Ym1WdWRITkpia05vYVd4a2NtVnVLRndpVkdWemRGd2lLVHRjYmlBZ0lDQWdLaUJBZEhsd1pYTmpjbWx3ZEZ4dUlDQWdJQ0FxSUdkbGRFTnZiWEJ2Ym1WdWRITkpia05vYVd4a2NtVnVQRlFnWlhoMFpXNWtjeUJEYjIxd2IyNWxiblErS0hSNWNHVTZJSHR3Y205MGIzUjVjR1U2SUZSOUtUb2dWRnRkWEc0Z0lDQWdJQ29nWjJWMFEyOXRjRzl1Wlc1MGMwbHVRMmhwYkdSeVpXNG9ZMnhoYzNOT1lXMWxPaUJ6ZEhKcGJtY3BPaUJoYm5sYlhWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRFTnZiWEJ2Ym1WdWRITkpia05vYVd4a2NtVnVJQ2gwZVhCbFQzSkRiR0Z6YzA1aGJXVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJtOWtaUzVuWlhSRGIyMXdiMjVsYm5SelNXNURhR2xzWkhKbGJpaDBlWEJsVDNKRGJHRnpjMDVoYldVcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdkx5QldTVkpVVlVGTVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWhJMlZ1WEc0Z0lDQWdJQ29nU1dZZ2RHaGxJR052YlhCdmJtVnVkQ2R6SUdKdmRXNWthVzVuSUdKdmVDQnBjeUJrYVdabVpYSmxiblFnWm5KdmJTQjBhR1VnYm05a1pTZHpMQ0I1YjNVZ1kyRnVJR2x0Y0d4bGJXVnVkQ0IwYUdseklHMWxkR2h2WkNCMGJ5QnpkWEJ3YkhsY2JpQWdJQ0FnS2lCaElHTjFjM1J2YlNCaGVHbHpJR0ZzYVdkdVpXUWdZbTkxYm1ScGJtY2dZbTk0SUNoQlFVSkNLU3dnYzI4Z2RHaGxJR1ZrYVhSdmNpZHpJSE5qWlc1bElIWnBaWGNnWTJGdUlIQmxjbVp2Y20wZ2FHbDBJSFJsYzNRZ2NISnZjR1Z5YkhrdVhHNGdJQ0FnSUNvZ0lTTjZhRnh1SUNBZ0lDQXFJT1dtZ3VhZW5PZTdoT1M3dHVlYWhPV01oZVdidE9lYmt1UzRqdWlLZ3VlQ3VlUzRqZVdRak8rOGpPYUNxT1dQcitTN3BlV3VudWVPc09pdnBlYVd1ZWF6bGVTN3BlYVBrT1MrbStpSHF1V3VtdVM1aWVlYWhPaTl0T1dRa2VXdnVlbTlrT2VhaE9XTWhlV2J0T2Via3UrOGlFRkJRa0x2dkludnZJeGNiaUFnSUNBZ0tpRGt1NlhrdnIvbnZKYm92cEhsbWFqbm1vVGxuTHJtbWEvb3A0YmxtNzdsajYva3U2WG1yYVBub2E3bG5MRG1pYWZvb1l6bmdybnBnSW5tdFl2b3I1WGpnSUpjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdYMmRsZEV4dlkyRnNRbTkxYm1SelhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0U1pXTjBmU0J2ZFhSZmNtVmpkQ0F0SUhSb1pTQlNaV04wSUhSdklISmxZMlZwZG1VZ2RHaGxJR0p2ZFc1a2FXNW5JR0p2ZUZ4dUlDQWdJQ0FxTDF4dUlDQWdJRjluWlhSTWIyTmhiRUp2ZFc1a2N6b2diblZzYkN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzVjYmlBZ0lDQWdLaUJ2YmxKbGMzUnZjbVVnYVhNZ1kyRnNiR1ZrSUdGbWRHVnlJSFJvWlNCMWMyVnlJR05zYVdOcmN5QjBhR1VnVW1WelpYUWdhWFJsYlNCcGJpQjBhR1VnU1c1emNHVmpkRzl5SjNNZ1kyOXVkR1Y0ZENCdFpXNTFJRzl5SUhCbGNtWnZjbTF6WEc0Z0lDQWdJQ29nWVc0Z2RXNWtieUJ2Y0dWeVlYUnBiMjRnYjI0Z2RHaHBjeUJqYjIxd2IyNWxiblF1UEdKeUx6NWNiaUFnSUNBZ0tpQThZbkl2UGx4dUlDQWdJQ0FxSUVsbUlIUm9aU0JqYjIxd2IyNWxiblFnWTI5dWRHRnBibk1nZEdobElGd2lhVzUwWlhKdVlXd2djM1JoZEdWY0lpd2djMmh2Y25RZ1ptOXlJRndpZEdWdGNHOXlZWEo1SUcxbGJXSmxjaUIyWVhKcFlXSnNaWE1nZDJocFkyZ2dibTkwSUdsdVkyeDFaR1ZrUEdKeUx6NWNiaUFnSUNBZ0tpQnBiaUJwZEhNZ1EwTkRiR0Z6Y3lCd2NtOXdaWEowYVdWelhDSXNJSFJvWlc0Z2VXOTFJRzFoZVNCdVpXVmtJSFJ2SUdsdGNHeGxiV1Z1ZENCMGFHbHpJR1oxYm1OMGFXOXVManhpY2k4K1hHNGdJQ0FnSUNvZ1BHSnlMejVjYmlBZ0lDQWdLaUJVYUdVZ1pXUnBkRzl5SUhkcGJHd2dZMkZzYkNCMGFHVWdaMlYwYzJWMElHRmpZMlZ6YzI5eWN5QnZaaUI1YjNWeUlHTnZiWEJ2Ym1WdWRDQjBieUJ5WldOdmNtUXZjbVZ6ZEc5eVpTQjBhR1VnWTI5dGNHOXVaVzUwSjNNZ2MzUmhkR1U4WW5JdlBseHVJQ0FnSUNBcUlHWnZjaUIxYm1SdkwzSmxaRzhnYjNCbGNtRjBhVzl1TGlCSWIzZGxkbVZ5TENCcGJpQmxlSFJ5WlcxbElHTmhjMlZ6TENCcGRDQnRZWGtnYm05MElIZHZjbXR6SUhkbGJHd3VJRlJvWlc0Z2VXOTFJSE5vYjNWc1pDQnBiWEJzWlcxbGJuUThZbkl2UGx4dUlDQWdJQ0FxSUhSb2FYTWdablZ1WTNScGIyNGdkRzhnYldGdWRXRnNiSGtnYzNsdVkyaHliMjVwZW1VZ2VXOTFjaUJqYjIxd2IyNWxiblFuY3lCY0ltbHVkR1Z5Ym1Gc0lITjBZWFJsYzF3aUlIZHBkR2dnYVhSeklIQjFZbXhwWXlCd2NtOXdaWEowYVdWekxqeGljaTgrWEc0Z0lDQWdJQ29nVDI1alpTQjViM1VnYVcxd2JHVnRaVzUwSUhSb2FYTWdablZ1WTNScGIyNHNJR0ZzYkNCMGFHVWdaMlYwYzJWMElHRmpZMlZ6YzI5eWN5QnZaaUI1YjNWeUlHTnZiWEJ2Ym1WdWRDQjNhV3hzSUc1dmRDQmlaU0JqWVd4c1pXUWdkMmhsYmp4aWNpOCtYRzRnSUNBZ0lDb2dkR2hsSUhWelpYSWdjR1Z5Wm05eWJYTWdZVzRnZFc1a2J5OXlaV1J2SUc5d1pYSmhkR2x2Ymk0Z1YyaHBZMmdnYldWaGJuTWdkR2hoZENCdmJteDVJSFJvWlNCd2NtOXdaWEowYVdWeklIZHBkR2dnWkdWbVlYVnNkQ0IyWVd4MVpUeGljaTgrWEc0Z0lDQWdJQ29nZDJsc2JDQmlaU0J5WldOdmNtUmxaQ0J2Y2lCeVpYTjBiM0psWkNCaWVTQmxaR2wwYjNJdVBHSnlMejVjYmlBZ0lDQWdLaUE4WW5JdlBseHVJQ0FnSUNBcUlGTnBiV2xzWVhKc2VTd2dkR2hsSUdWa2FYUnZjaUJ0WVhrZ1ptRnBiR1ZrSUhSdklISmxjMlYwSUhsdmRYSWdZMjl0Y0c5dVpXNTBJR052Y25KbFkzUnNlU0JwYmlCbGVIUnlaVzFsSUdOaGMyVnpMaUJVYUdWdUlHbG1JSGx2ZFNCdVpXVmtQR0p5THo1Y2JpQWdJQ0FnS2lCMGJ5QnpkWEJ3YjNKMElIUm9aU0J5WlhObGRDQnRaVzUxTENCNWIzVWdjMmh2ZFd4a0lHMWhiblZoYkd4NUlITjVibU5vY205dWFYcGxJSGx2ZFhJZ1kyOXRjRzl1Wlc1MEozTWdYQ0pwYm5SbGNtNWhiQ0J6ZEdGMFpYTmNJaUIzYVhSb0lHbDBjenhpY2k4K1hHNGdJQ0FnSUNvZ2NISnZjR1Z5ZEdsbGN5QnBiaUIwYUdseklHWjFibU4wYVc5dUxpQlBibU5sSUhsdmRTQnBiWEJzWlcxbGJuUWdkR2hwY3lCbWRXNWpkR2x2Yml3Z1lXeHNJSFJvWlNCblpYUnpaWFFnWVdOalpYTnpiM0p6SUc5bUlIbHZkWElnWTI5dGNHOXVaVzUwUEdKeUx6NWNiaUFnSUNBZ0tpQjNhV3hzSUc1dmRDQmlaU0JqWVd4c1pXUWdaSFZ5YVc1bklISmxjMlYwSUc5d1pYSmhkR2x2Ymk0Z1YyaHBZMmdnYldWaGJuTWdkR2hoZENCdmJteDVJSFJvWlNCd2NtOXdaWEowYVdWeklIZHBkR2dnWkdWbVlYVnNkQ0IyWVd4MVpUeGljaTgrWEc0Z0lDQWdJQ29nZDJsc2JDQmlaU0J5WlhObGRDQmllU0JsWkdsMGIzSXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQlVhR2x6SUdaMWJtTjBhVzl1SUdseklHOXViSGtnWTJGc2JHVmtJR2x1SUdWa2FYUnZjaUJ0YjJSbExseHVJQ0FnSUNBcUlDRWplbWhjYmlBZ0lDQWdLaUJ2YmxKbGMzUnZjbVVnNXBpdjU1U281b2kzNVp5bzVxT0E1cCtsNVptbzZJK2M1WTJWNTRLNTVZZTdJRkpsYzJWMElPYVh0dSs4ak9XdnVlYXRwT2U3aE9TN3R1YUpwK2loak9hU3BPYTJpT2FUamVTOW5PV1FqdWl3ZytlVXFPZWFoT09BZ2p4aWNpOCtYRzRnSUNBZ0lDb2dQR0p5THo1Y2JpQWdJQ0FnS2lEbHBvTG1ucHpudTRUa3U3YmxqSVhsa0t2a3VvYmlnSnpsaG9YcGc2am5pcmJtZ0lIaWdKM3Z2SWprdUkzbG5LZ2dRME5EYkdGemN5RGxzWjdtZ0tma3VLM2xycHJrdVlubm1vVGt1TFRtbDdibWlKRGxrWmpsajVqcGg0L3Z2SW52dkl6cGdxUGt1WWprdmFEbGo2L29nNzNwbklEb3BvSGxycDduanJEb3I2WG1scm5tczVYamdJSThZbkl2UGx4dUlDQWdJQ0FxSUR4aWNpOCtYRzRnSUNBZ0lDb2c1N3lXNkw2UjVabW81b21uNktHTTVwS2s2WlNBTCttSGplV0JtdWFUamVTOW5PYVh0dSs4ak9Xd2h1aXdnK2VVcU9lN2hPUzd0dWVhaENCblpYUWdjMlYwSU9hZHBlVzlsZVdJdHVXU2pPaS9tT1dPbitlN2hPUzd0dWVhaE9lS3R1YUFnZU9BZ2x4dUlDQWdJQ0FxSU9lRXR1aUFqTys4ak9XY3FPYWVnZWVycitlYWhPYURoZVdHdGVTNGkrKzhqT1d1ZytXUHIraUR2ZWFYb09hemxlaUpyK1dsdmVpL2tPUzluT09BZ2p4aWNpOCtYRzRnSUNBZ0lDb2c2WUtqNUxtSTVMMmc1YkN4NWJxVTZLK2w1YTZlNTQ2dzZMK1o1TGlxNXBhNTVyT1Y3N3lNNW9tTDVZcW81cUM1NW8ydTU3dUU1THUyNTVxRTViR2U1b0NuNVpDTTVxMmw0b0NjNVlhRjZZT281NHEyNW9DQjRvQ2Q0NENDWEc0Z0lDQWdJQ29nNUxpQTVwZW01TDJnNWE2ZTU0Nnc2TCtaNUxpcTVwYTU1ck9WNzd5TTViMlQ1NVNvNW9pMzVwS2s2WlNBNW9pVzZZZU41WUdhNXBlMjc3eU01N3VFNUx1MjU1cUU1b21BNXB5SklHZGxkQ0J6WlhRZzZZTzk1TGlONUx5YTVZYU42S0tyNkxDRDU1U280NENDWEc0Z0lDQWdJQ29nNkwrWjVvU1A1Wkd6NTUyQTVMdUY1THVGNW95SDVhNmE1THFHNmJ1WTZLNms1WUM4NTVxRTViR2U1b0NuNWJDRzZLS3I1N3lXNkw2UjVabW82SzZ3NWIyVjVaS002TCtZNVk2ZjQ0Q0NQR0p5THo1Y2JpQWdJQ0FnS2lBOFluSXZQbHh1SUNBZ0lDQXFJT1dRak9hZ3QrZWFoTys4ak9lOGx1aStrZVdQcitpRHZlYVhvT2F6bGVXY3FPYWVnZWVycithRGhlV0d0ZVM0aSthdG8rZWhydVdjc09tSGplZTlydWFDcU9lYWhPZTdoT1M3dHVPQWdqeGljaTgrWEc0Z0lDQWdJQ29nNUxxTzVwaXY1YWFDNXA2YzVMMmc2WnlBNkthQjVwU3Y1b3lCNTd1RTVMdTI2WWVONTcydTZJK2M1WTJWNzd5TTVMMmc2WnlBNkthQjVaeW82SytsNXBhNTVyT1Y1TGl0NW9tTDViZWw1WkNNNXEybDU3dUU1THUyNWJHZTVvQ241WWl3NG9DYzVZYUY2WU9vNTRxMjVvQ0I0b0NkNDRDQ1BHSnlMejVjYmlBZ0lDQWdLaURrdUlEbWw2Ymt2YURscnA3bmpyRG92NW5rdUtybWxybm1zNVh2dkl6bnU0VGt1N2JubW9UbWlZRG1uSWtnWjJWMElITmxkQ0RwZzcza3VJM2t2SnJsbktqcGg0M252YTdtazQza3Zaem1sN2Jvb3F2b3NJUG5sS2pqZ0lKY2JpQWdJQ0FnS2lEb3Y1bm1oSS9sa2JQbm5ZRGt1NFhrdTRYbWpJZmxycHJrdW9icHU1am9ycVRsZ0x6bm1vVGxzWjdtZ0tmbHNJYm9vcXZudkpib3ZwSGxtYWpwaDQzbnZhN2pnSUpjYmlBZ0lDQWdLaUE4WW5JdlBseHVJQ0FnSUNBcUlPYXRwT2FXdWVhemxlUzdoZVdjcU9lOGx1aStrZVdacU9TNGkrUzhtdWlpcStpd2crZVVxT09BZ2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnYjI1U1pYTjBiM0psWEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjVTWlhOMGIzSmxPaUJ1ZFd4c0xGeHVYRzRnSUNBZ0x5OGdUMVpGVWxKSlJFVmNibHh1SUNBZ0lHUmxjM1J5YjNrZ0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1EwTmZSVVJKVkU5U0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR1Z3Wlc1a0lEMGdkR2hwY3k1dWIyUmxMbDluWlhSRVpYQmxibVJEYjIxd2IyNWxiblFvZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aR1Z3Wlc1a0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmpMbVZ5Y205eVNVUW9Nell5Tml4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11YW5NdVoyVjBRMnhoYzNOT1lXMWxLSFJvYVhNcExDQmpZeTVxY3k1blpYUkRiR0Z6YzA1aGJXVW9aR1Z3Wlc1a0tTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM04xY0dWeUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOWxibUZpYkdWa0lDWW1JSFJvYVhNdWJtOWtaUzVmWVdOMGFYWmxTVzVJYVdWeVlYSmphSGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCall5NWthWEpsWTNSdmNpNWZZMjl0Y0ZOamFHVmtkV3hsY2k1a2FYTmhZbXhsUTI5dGNDaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JmYjI1UWNtVkVaWE4wY205NUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1UyTm9aV1IxYkdWelhHNGdJQ0FnSUNBZ0lIUm9hWE11ZFc1elkyaGxaSFZzWlVGc2JFTmhiR3hpWVdOcmN5Z3BPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGSmxiVzkyWlNCaGJHd2diR2x6ZEdWdVpYSnpYRzRnSUNBZ0lDQWdJSFpoY2lCbGRtVnVkRlJoY21kbGRITWdQU0IwYUdsekxsOWZaWFpsYm5SVVlYSm5aWFJ6TzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkNBOUlHVjJaVzUwVkdGeVoyVjBjeTVzWlc1bmRHZzdJR2tnUENCc095QXJLMmtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMFlYSm5aWFFnUFNCbGRtVnVkRlJoY21kbGRITmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZWEpuWlhRZ0ppWWdkR0Z5WjJWMExuUmhjbWRsZEU5bVppaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxkbVZ1ZEZSaGNtZGxkSE11YkdWdVozUm9JRDBnTUR0Y2JseHVJQ0FnSUNBZ0lDQXZMMXh1SUNBZ0lDQWdJQ0JwWmlBb1EwTmZSVVJKVkU5U0lDWW1JQ0ZEUTE5VVJWTlVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZVMk5sYm1VdVFYTnpaWFJ6VjJGMFkyaGxjaTV6ZEc5d0tIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnYjI1RVpYTjBjbTk1WEc0Z0lDQWdJQ0FnSUdOakxtUnBjbVZqZEc5eUxsOXViMlJsUVdOMGFYWmhkRzl5TG1SbGMzUnliM2xEYjIxd0tIUm9hWE1wTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJR1J2SUhKbGJXOTJaU0JqYjIxd2IyNWxiblJjYmlBZ0lDQWdJQ0FnZEdocGN5NXViMlJsTGw5eVpXMXZkbVZEYjIxd2IyNWxiblFvZEdocGN5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOXBibk4wWVc1MGFXRjBaU0FvWTJ4dmJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hZMnh2Ym1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHOXVaV1FnUFNCall5NXBibk4wWVc1MGFXRjBaUzVmWTJ4dmJtVW9kR2hwY3l3Z2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyeHZibVZrTG01dlpHVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeHZibVZrTzF4dUlDQWdJSDBzWEc1Y2JpOHZJRk5qYUdWa2RXeGxjbHh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSVNObGJseHVJQ0FnSUNBcUlGTmphR1ZrZFd4bGN5QmhJR04xYzNSdmJTQnpaV3hsWTNSdmNpNDhZbkl2UGx4dUlDQWdJQ0FxSUVsbUlIUm9aU0J6Wld4bFkzUnZjaUJwY3lCaGJISmxZV1I1SUhOamFHVmtkV3hsWkN3Z2RHaGxiaUIwYUdVZ2FXNTBaWEoyWVd3Z2NHRnlZVzFsZEdWeUlIZHBiR3dnWW1VZ2RYQmtZWFJsWkNCM2FYUm9iM1YwSUhOamFHVmtkV3hwYm1jZ2FYUWdZV2RoYVc0dVhHNGdJQ0FnSUNvZ0lTTjZhRnh1SUNBZ0lDQXFJT2l3ZytXNnB1UzRnT1M0cXVpSHF1V3VtdVM1aWVlYWhPV2JudWl3ZytXSHZlYVZzT09BZ2p4aWNpOCtYRzRnSUNBZ0lDb2c1YWFDNXA2YzVadWU2TENENVllOTVwV3c1YmV5NkxDRDVicW03N3lNNllLajVMbUk1YkNHNUxpTjVMeWE2WWVONWFTTjZMQ0Q1YnFtNWE2RDc3eU01WStxNUx5YTVwdTA1cGF3NXBlMjZaZTA2WmUwNlpxVTVZK0M1cFd3NDRDQ1hHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCelkyaGxaSFZzWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUdOaGJHeGlZV05ySUZSb1pTQmpZV3hzWW1GamF5Qm1kVzVqZEdsdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmFXNTBaWEoyWVd3OU1GMGdJRlJwWTJzZ2FXNTBaWEoyWVd3Z2FXNGdjMlZqYjI1a2N5NGdNQ0J0WldGdWN5QjBhV05ySUdWMlpYSjVJR1p5WVcxbExseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmNtVndaV0YwUFdOakxtMWhZM0p2TGxKRlVFVkJWRjlHVDFKRlZrVlNYU0FnSUNCVWFHVWdjMlZzWldOMGIzSWdkMmxzYkNCaVpTQmxlR1ZqZFhSbFpDQW9jbVZ3WldGMElDc2dNU2tnZEdsdFpYTXNJSGx2ZFNCallXNGdkWE5sSUdOakxtMWhZM0p2TGxKRlVFVkJWRjlHVDFKRlZrVlNJR1p2Y2lCMGFXTnJJR2x1Wm1sdWFYUmxiSGt1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnRrWld4aGVUMHdYU0FnSUNBZ1ZHaGxJR0Z0YjNWdWRDQnZaaUIwYVcxbElIUm9ZWFFnZEdobElHWnBjbk4wSUhScFkyc2dkMmxzYkNCM1lXbDBJR0psWm05eVpTQmxlR1ZqZFhScGIyNHVYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0tpQjJZWElnZEdsdFpVTmhiR3hpWVdOcklEMGdablZ1WTNScGIyNGdLR1IwS1NCN1hHNGdJQ0FnSUNvZ0lDQmpZeTVzYjJjb1hDSjBhVzFsT2lCY0lpQXJJR1IwS1R0Y2JpQWdJQ0FnS2lCOVhHNGdJQ0FnSUNvZ2RHaHBjeTV6WTJobFpIVnNaU2gwYVcxbFEyRnNiR0poWTJzc0lERXBPMXh1SUNBZ0lDQXFMMXh1SUNBZ0lITmphR1ZrZFd4bElDaGpZV3hzWW1GamF5d2dhVzUwWlhKMllXd3NJSEpsY0dWaGRDd2daR1ZzWVhrcElIdGNiaUFnSUNBZ0lDQWdZMk11WVhOelpYSjBTVVFvWTJGc2JHSmhZMnNzSURFMk1Ua3BPMXh1SUNBZ0lDQWdJQ0JqWXk1aGMzTmxjblJKUkNocGJuUmxjblpoYkNBK1BTQXdMQ0F4TmpJd0tUdGNibHh1SUNBZ0lDQWdJQ0JwYm5SbGNuWmhiQ0E5SUdsdWRHVnlkbUZzSUh4OElEQTdYRzRnSUNBZ0lDQWdJSEpsY0dWaGRDQTlJR2x6VG1GT0tISmxjR1ZoZENrZ1B5QmpZeTV0WVdOeWJ5NVNSVkJGUVZSZlJrOVNSVlpGVWlBNklISmxjR1ZoZER0Y2JpQWdJQ0FnSUNBZ1pHVnNZWGtnUFNCa1pXeGhlU0I4ZkNBd08xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCelkyaGxaSFZzWlhJZ1BTQmpZeTVrYVhKbFkzUnZjaTVuWlhSVFkyaGxaSFZzWlhJb0tUdGNibHh1SUNBZ0lDQWdJQ0F2THlCemFHOTFiR1FnYm05MElIVnpaU0JsYm1GaWJHVmtTVzVJYVdWeVlYSmphSGtnZEc4Z2FuVmtaMlVnZDJobGRHaGxjaUJ3WVhWelpXUXNYRzRnSUNBZ0lDQWdJQzh2SUdKbFkyRjFjMlVnWlc1aFlteGxaRWx1U0dsbGNtRnlZMmg1SUdseklHRnpjMmxuYm1Wa0lHRm1kR1Z5SUc5dVJXNWhZbXhsTGx4dUlDQWdJQ0FnSUNBdkx5QkJZM1IxWVd4c2VTd2dhV1lnYm05MElIbGxkQ0J6WTJobFpIVnNaV1FzSUhKbGMzVnRaVlJoY21kbGRDOXdZWFZ6WlZSaGNtZGxkQ0JvWVhNZ2JtOGdaV1ptWldOMElHOXVJR052YlhCdmJtVnVkQ3hjYmlBZ0lDQWdJQ0FnTHk4Z2RHaGxjbVZtYjNKbElIUm9aWEpsSUdseklHNXZJSGRoZVNCMGJ5Qm5kV0Z5WVc1MFpXVWdkR2hsSUhCaGRYTmxaQ0J6ZEdGMFpTQnZkR2hsY2lCMGFHRnVJR2x6VkdGeVoyVjBVR0YxYzJWa0xseHVJQ0FnSUNBZ0lDQjJZWElnY0dGMWMyVmtJRDBnYzJOb1pXUjFiR1Z5TG1selZHRnlaMlYwVUdGMWMyVmtLSFJvYVhNcE8xeHVYRzRnSUNBZ0lDQWdJSE5qYUdWa2RXeGxjaTV6WTJobFpIVnNaU2hqWVd4c1ltRmpheXdnZEdocGN5d2dhVzUwWlhKMllXd3NJSEpsY0dWaGRDd2daR1ZzWVhrc0lIQmhkWE5sWkNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDRWpaVzRnVTJOb1pXUjFiR1Z6SUdFZ1kyRnNiR0poWTJzZ1puVnVZM1JwYjI0Z2RHaGhkQ0J5ZFc1eklHOXViSGtnYjI1alpTd2dkMmwwYUNCaElHUmxiR0Y1SUc5bUlEQWdiM0lnYkdGeVoyVnlMbHh1SUNBZ0lDQXFJQ0VqZW1nZzZMQ0Q1YnFtNUxpQTVMaXE1WStxNkwrUTZLR001TGlBNXF5aDU1cUU1WnVlNkxDRDVZZTk1cFd3Nzd5TTVZK3Y1THVsNW95SDVhNmFJREFnNks2cDVadWU2TENENVllOTVwV3c1WnlvNUxpTDVMaUE1YmluNTZ1TDVZMno1b21uNktHTTVvaVc2SUNGNVp5bzVMaUE1YTZhNTVxRTVidTI1cGUyNUxtTDVaQ081b21uNktHTTQ0Q0NYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnpZMmhsWkhWc1pVOXVZMlZjYmlBZ0lDQWdLaUJBYzJWbElHTmpMazV2WkdVamMyTm9aV1IxYkdWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTJaMWJtTjBhVzl1ZlNCallXeHNZbUZqYXlBZ1FTQm1kVzVqZEdsdmJpQjNjbUZ3Y0dWa0lHRnpJR0VnYzJWc1pXTjBiM0pjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXMlJsYkdGNVBUQmRJQ0JVYUdVZ1lXMXZkVzUwSUc5bUlIUnBiV1VnZEdoaGRDQjBhR1VnWm1seWMzUWdkR2xqYXlCM2FXeHNJSGRoYVhRZ1ltVm1iM0psSUdWNFpXTjFkR2x2Ymk1Y2JpQWdJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdJQ0FxSUhaaGNpQjBhVzFsUTJGc2JHSmhZMnNnUFNCbWRXNWpkR2x2YmlBb1pIUXBJSHRjYmlBZ0lDQWdLaUFnSUdOakxteHZaeWhjSW5ScGJXVTZJRndpSUNzZ1pIUXBPMXh1SUNBZ0lDQXFJSDFjYmlBZ0lDQWdLaUIwYUdsekxuTmphR1ZrZFd4bFQyNWpaU2gwYVcxbFEyRnNiR0poWTJzc0lESXBPMXh1SUNBZ0lDQXFMMXh1SUNBZ0lITmphR1ZrZFd4bFQyNWpaU0FvWTJGc2JHSmhZMnNzSUdSbGJHRjVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMk5vWldSMWJHVW9ZMkZzYkdKaFkyc3NJREFzSURBc0lHUmxiR0Y1S1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lTTmxiaUJWYm5OamFHVmtkV3hsY3lCaElHTjFjM1J2YlNCallXeHNZbUZqYXlCbWRXNWpkR2x2Ymk1Y2JpQWdJQ0FnS2lBaEkzcG9JT1dQbHVhMmlPaXdnK1c2cHVTNGdPUzRxdWlIcXVXdW11UzVpZWVhaE9XYm51aXdnK1dIdmVhVnNPT0FnbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdkVzV6WTJobFpIVnNaVnh1SUNBZ0lDQXFJRUJ6WldVZ1kyTXVUbTlrWlNOelkyaGxaSFZzWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUdOaGJHeGlZV05yWDJadUlDQkJJR1oxYm1OMGFXOXVJSGR5WVhCd1pXUWdZWE1nWVNCelpXeGxZM1J2Y2x4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQWdJQ29nZEdocGN5NTFibk5qYUdWa2RXeGxLRjlqWVd4c1ltRmpheWs3WEc0Z0lDQWdJQ292WEc0Z0lDQWdkVzV6WTJobFpIVnNaU0FvWTJGc2JHSmhZMnRmWm00cElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGallXeHNZbUZqYTE5bWJpbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmx4dUlDQWdJQ0FnSUNCall5NWthWEpsWTNSdmNpNW5aWFJUWTJobFpIVnNaWElvS1M1MWJuTmphR1ZrZFd4bEtHTmhiR3hpWVdOclgyWnVMQ0IwYUdsektUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmx4dUlDQWdJQ0FxSUhWdWMyTm9aV1IxYkdVZ1lXeHNJSE5qYUdWa2RXeGxaQ0JqWVd4c1ltRmpheUJtZFc1amRHbHZibk02SUdOMWMzUnZiU0JqWVd4c1ltRmpheUJtZFc1amRHbHZibk1zSUdGdVpDQjBhR1VnSjNWd1pHRjBaU2NnWTJGc2JHSmhZMnNnWm5WdVkzUnBiMjR1UEdKeUx6NWNiaUFnSUNBZ0tpQkJZM1JwYjI1eklHRnlaU0J1YjNRZ1lXWm1aV04wWldRZ1lua2dkR2hwY3lCdFpYUm9iMlF1WEc0Z0lDQWdJQ29nSVNONmFDRGxqNWJtdG9qb3NJUGx1cWJtaVlEbW5Jbmx0N0xvc0lQbHVxYm5tb1RsbTU3b3NJUGxoNzNtbGJEdnZKcmxycHJsaUxibm1vVGxtNTdvc0lQbGg3M21sYkRrdTZYbGo0b2dKM1Z3WkdGMFpTY2c1WnVlNkxDRDVZZTk1cFd3NDRDQzVZcW81TDJjNUxpTjVZK1g1cTJrNXBhNTVyT1Y1YjJ4NVpPTjQ0Q0NYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQjFibk5qYUdWa2RXeGxRV3hzUTJGc2JHSmhZMnR6WEc0Z0lDQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDQWdLaUIwYUdsekxuVnVjMk5vWldSMWJHVkJiR3hEWVd4c1ltRmphM01vS1R0Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0IxYm5OamFHVmtkV3hsUVd4c1EyRnNiR0poWTJ0eklDZ3BJSHRjYmlBZ0lDQWdJQ0FnWTJNdVpHbHlaV04wYjNJdVoyVjBVMk5vWldSMWJHVnlLQ2t1ZFc1elkyaGxaSFZzWlVGc2JFWnZjbFJoY21kbGRDaDBhR2x6S1R0Y2JpQWdJQ0I5TEZ4dWZTazdYRzVjYmtOdmJYQnZibVZ1ZEM1ZmNtVnhkV2x5WlVOdmJYQnZibVZ1ZENBOUlHNTFiR3c3WEc1RGIyMXdiMjVsYm5RdVgyVjRaV04xZEdsdmJrOXlaR1Z5SUQwZ01EdGNibHh1YVdZZ0tFTkRYMFZFU1ZSUFVpQjhmQ0JEUTE5VVJWTlVLU0I3WEc1Y2JpQWdJQ0F2THlCSlRraEZVa2xVUVVKTVJTQlRWRUZVU1VNZ1RVVk5Ra1ZTVTF4dVhHNGdJQ0FnUTI5dGNHOXVaVzUwTGw5bGVHVmpkWFJsU1c1RlpHbDBUVzlrWlNBOUlHWmhiSE5sTzF4dUlDQWdJRU52YlhCdmJtVnVkQzVmY0d4aGVVOXVSbTlqZFhNZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0JEYjIxd2IyNWxiblF1WDJScGMyRnNiRzkzVFhWc2RHbHdiR1VnUFNCdWRXeHNPMXh1SUNBZ0lFTnZiWEJ2Ym1WdWRDNWZhR1ZzY0NBOUlDY25PMXh1WEc0Z0lDQWdMeThnVGs5T0xVbE9TRVZTU1ZSRlJDQlRWRUZVU1VNZ1RVVk5Ra1ZTVTF4dUlDQWdJQzh2SUNoVWVYQmxVMk55YVhCMElESXVNeUIzYVd4c0lITjBhV3hzSUdsdWFHVnlhWFFnZEdobGJTd2djMjhnWVd4M1lYbHpJR05vWldOcklHaGhjMDkzYmxCeWIzQmxjblI1SUdKbFptOXlaU0IxYzJsdVp5bGNibHh1SUNBZ0lHcHpMblpoYkhWbEtFTnZiWEJ2Ym1WdWRDd2dKMTlwYm5Od1pXTjBiM0luTENBbkp5d2dkSEoxWlNrN1hHNGdJQ0FnYW5NdWRtRnNkV1VvUTI5dGNHOXVaVzUwTENBblgybGpiMjRuTENBbkp5d2dkSEoxWlNrN1hHNWNiaUFnSUNBdkx5QkRUMDFRVDA1RlRsUWdTRVZNVUVWU1UxeHVYRzRnSUNBZ1kyTXVYMk52YlhCdmJtVnVkRTFsYm5WSmRHVnRjeUE5SUZ0ZE8xeHVYRzRnSUNBZ1EyOXRjRzl1Wlc1MExsOWhaR1JOWlc1MVNYUmxiU0E5SUdaMWJtTjBhVzl1SUNoamJITXNJSEJoZEdnc0lIQnlhVzl5YVhSNUtTQjdYRzRnSUNBZ0lDQWdJR05qTGw5amIyMXdiMjVsYm5STlpXNTFTWFJsYlhNdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjF3YjI1bGJuUTZJR05zY3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYm5WUVlYUm9PaUJ3WVhSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKcGIzSnBkSGs2SUhCeWFXOXlhWFI1WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwN1hHNTlYRzVjYmk4dklIZGxJRzFoYTJVZ2RHaHBjeUJ1YjI0dFpXNTFiV1Z5WVdKc1pTd2dkRzhnY0hKbGRtVnVkQ0JwYm1obGNtbDBaV1FnWW5rZ2MzVmlJR05zWVhOelpYTXVYRzVxY3k1MllXeDFaU2hEYjIxd2IyNWxiblFzSUNkZmNtVm5hWE4wWlhKRlpHbDBiM0pRY205d2N5Y3NJR1oxYm1OMGFXOXVJQ2hqYkhNc0lIQnliM0J6S1NCN1hHNGdJQ0FnZG1GeUlISmxjVU52YlhBZ1BTQndjbTl3Y3k1eVpYRjFhWEpsUTI5dGNHOXVaVzUwTzF4dUlDQWdJR2xtSUNoeVpYRkRiMjF3S1NCN1hHNGdJQ0FnSUNBZ0lHTnNjeTVmY21WeGRXbHlaVU52YlhCdmJtVnVkQ0E5SUhKbGNVTnZiWEE3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJ2Y21SbGNpQTlJSEJ5YjNCekxtVjRaV04xZEdsdmJrOXlaR1Z5TzF4dUlDQWdJR2xtSUNodmNtUmxjaUFtSmlCMGVYQmxiMllnYjNKa1pYSWdQVDA5SUNkdWRXMWlaWEluS1NCN1hHNGdJQ0FnSUNBZ0lHTnNjeTVmWlhobFkzVjBhVzl1VDNKa1pYSWdQU0J2Y21SbGNqdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tFTkRYMFZFU1ZSUFVpQjhmQ0JEUTE5VVJWTlVLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnVZVzFsSUQwZ1kyTXVhbk11WjJWMFEyeGhjM05PWVcxbEtHTnNjeWs3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ3Y205d2N5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFpoYkNBOUlIQnliM0J6VzJ0bGVWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdnS0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyVjRaV04xZEdWSmJrVmthWFJOYjJSbEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4ekxsOWxlR1ZqZFhSbFNXNUZaR2wwVFc5a1pTQTlJQ0VoZG1Gc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozQnNZWGxQYmtadlkzVnpKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFpoYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSGRwYkd4RmVHVmpkWFJsU1c1RlpHbDBUVzlrWlNBOUlDZ25aWGhsWTNWMFpVbHVSV1JwZEUxdlpHVW5JR2x1SUhCeWIzQnpLU0EvSUhCeWIzQnpMbVY0WldOMWRHVkpia1ZrYVhSTmIyUmxJRG9nWTJ4ekxsOWxlR1ZqZFhSbFNXNUZaR2wwVFc5a1pUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gzYVd4c1JYaGxZM1YwWlVsdVJXUnBkRTF2WkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkhNdVgzQnNZWGxQYmtadlkzVnpJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbmRoY201SlJDZ3pOakF4TENCdVlXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oybHVjM0JsWTNSdmNpYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdwekxuWmhiSFZsS0dOc2N5d2dKMTlwYm5Od1pXTjBiM0luTENCMllXd3NJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oybGpiMjRuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnFjeTUyWVd4MVpTaGpiSE1zSUNkZmFXTnZiaWNzSUhaaGJDd2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmJXVnVkU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFTnZiWEJ2Ym1WdWRDNWZZV1JrVFdWdWRVbDBaVzBvWTJ4ekxDQjJZV3dzSUhCeWIzQnpMbTFsYm5WUWNtbHZjbWwwZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBblpHbHpZV3hzYjNkTmRXeDBhWEJzWlNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zY3k1ZlpHbHpZV3hzYjNkTmRXeDBhWEJzWlNBOUlHTnNjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2R5WlhGMWFYSmxRMjl0Y0c5dVpXNTBKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZGxlR1ZqZFhScGIyNVBjbVJsY2ljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhOcmFYQWdhR1Z5WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjJobGJIQW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJITXVYMmhsYkhBZ1BTQjJZV3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11ZDJGeWJrbEVLRE0yTURJc0lHdGxlU3dnYm1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmU2s3WEc1Y2JrTnZiWEJ2Ym1WdWRDNXdjbTkwYjNSNWNHVXVYMTl6WTNKcGNIUlZkV2xrSUQwZ0p5YzdYRzVjYm1OakxrTnZiWEJ2Ym1WdWRDQTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdRMjl0Y0c5dVpXNTBPMXh1SWwxOSJdfQ==