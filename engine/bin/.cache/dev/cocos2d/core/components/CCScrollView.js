(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCScrollView.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var NodeEvent = require('../CCNode').EventType;
        var NUMBER_OF_GATHERED_TOUCHES_FOR_MOVE_SPEED = 5;
        var OUT_OF_BOUNDARY_BREAKING_FACTOR = 0.05;
        var EPSILON = 0.0001;
        var MOVEMENT_FACTOR = 0.7;
        var quintEaseOut = function quintEaseOut(time) {
            time -= 1;
            return time * time * time * time * time + 1;
        };
        var getTimeInMilliseconds = function getTimeInMilliseconds() {
            var currentTime = new Date();
            return currentTime.getMilliseconds();
        };
        var EventType = cc.Enum({
            SCROLL_TO_TOP: 0,
            SCROLL_TO_BOTTOM: 1,
            SCROLL_TO_LEFT: 2,
            SCROLL_TO_RIGHT: 3,
            SCROLLING: 4,
            BOUNCE_TOP: 5,
            BOUNCE_BOTTOM: 6,
            BOUNCE_LEFT: 7,
            BOUNCE_RIGHT: 8,
            SCROLL_ENDED: 9,
            TOUCH_UP: 10,
            AUTOSCROLL_ENDED_WITH_THRESHOLD: 11,
            SCROLL_BEGAN: 12
        });
        var eventMap = {
            'scroll-to-top': EventType.SCROLL_TO_TOP,
            'scroll-to-bottom': EventType.SCROLL_TO_BOTTOM,
            'scroll-to-left': EventType.SCROLL_TO_LEFT,
            'scroll-to-right': EventType.SCROLL_TO_RIGHT,
            'scrolling': EventType.SCROLLING,
            'bounce-bottom': EventType.BOUNCE_BOTTOM,
            'bounce-left': EventType.BOUNCE_LEFT,
            'bounce-right': EventType.BOUNCE_RIGHT,
            'bounce-top': EventType.BOUNCE_TOP,
            'scroll-ended': EventType.SCROLL_ENDED,
            'touch-up': EventType.TOUCH_UP,
            'scroll-ended-with-threshold': EventType.AUTOSCROLL_ENDED_WITH_THRESHOLD,
            'scroll-began': EventType.SCROLL_BEGAN
        };
        var ScrollView = cc.Class({
            name: 'cc.ScrollView',
            extends: require('./CCViewGroup'),
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/ScrollView',
                help: 'i18n:COMPONENT.help_url.scrollview',
                inspector: 'packages://inspector/inspectors/comps/scrollview.js',
                executeInEditMode: false
            },
            ctor: function ctor() {
                this._topBoundary = 0;
                this._bottomBoundary = 0;
                this._leftBoundary = 0;
                this._rightBoundary = 0;
                this._touchMoveDisplacements = [];
                this._touchMoveTimeDeltas = [];
                this._touchMovePreviousTimestamp = 0;
                this._touchMoved = false;
                this._autoScrolling = false;
                this._autoScrollAttenuate = false;
                this._autoScrollStartPosition = cc.v2(0, 0);
                this._autoScrollTargetDelta = cc.v2(0, 0);
                this._autoScrollTotalTime = 0;
                this._autoScrollAccumulatedTime = 0;
                this._autoScrollCurrentlyOutOfBoundary = false;
                this._autoScrollBraking = false;
                this._autoScrollBrakingStartPosition = cc.v2(0, 0);
                this._outOfBoundaryAmount = cc.v2(0, 0);
                this._outOfBoundaryAmountDirty = true;
                this._stopMouseWheel = false;
                this._mouseWheelEventElapsedTime = 0;
                this._isScrollEndedWithThresholdEventFired = false;
                this._scrollEventEmitMask = 0;
                this._isBouncing = false;
                this._scrolling = false;
            },
            properties: {
                content: {
                    default: undefined,
                    type: cc.Node,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.content',
                    formerlySerializedAs: 'content',
                    notify: function notify(oldValue) {
                        this._calculateBoundary();
                    }
                },
                horizontal: {
                    default: true,
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.horizontal'
                },
                vertical: {
                    default: true,
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.vertical'
                },
                inertia: {
                    default: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.inertia'
                },
                brake: {
                    default: 0.5,
                    type: 'Float',
                    range: [
                        0,
                        1,
                        0.1
                    ],
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.brake'
                },
                elastic: {
                    default: true,
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.elastic'
                },
                bounceDuration: {
                    default: 1,
                    range: [
                        0,
                        10
                    ],
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.bounceDuration'
                },
                horizontalScrollBar: {
                    default: undefined,
                    type: cc.Scrollbar,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.horizontal_bar',
                    notify: function notify() {
                        if (this.horizontalScrollBar) {
                            this.horizontalScrollBar.setTargetScrollView(this);
                            this._updateScrollBar(0);
                        }
                    },
                    animatable: false
                },
                verticalScrollBar: {
                    default: undefined,
                    type: cc.Scrollbar,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.vertical_bar',
                    notify: function notify() {
                        if (this.verticalScrollBar) {
                            this.verticalScrollBar.setTargetScrollView(this);
                            this._updateScrollBar(0);
                        }
                    },
                    animatable: false
                },
                scrollEvents: {
                    default: [],
                    type: cc.Component.EventHandler,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.scrollEvents'
                },
                cancelInnerEvents: {
                    default: true,
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.cancelInnerEvents'
                },
                _view: {
                    get: function get() {
                        if (this.content) {
                            return this.content.parent;
                        }
                    }
                }
            },
            statics: { EventType: EventType },
            scrollToBottom: function scrollToBottom(timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                    anchor: cc.v2(0, 0),
                    applyToHorizontal: false,
                    applyToVertical: true
                });
                if (timeInSecond) {
                    this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                    this._moveContent(moveDelta, true);
                }
            },
            scrollToTop: function scrollToTop(timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                    anchor: cc.v2(0, 1),
                    applyToHorizontal: false,
                    applyToVertical: true
                });
                if (timeInSecond) {
                    this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                    this._moveContent(moveDelta);
                }
            },
            scrollToLeft: function scrollToLeft(timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                    anchor: cc.v2(0, 0),
                    applyToHorizontal: true,
                    applyToVertical: false
                });
                if (timeInSecond) {
                    this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                    this._moveContent(moveDelta);
                }
            },
            scrollToRight: function scrollToRight(timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                    anchor: cc.v2(1, 0),
                    applyToHorizontal: true,
                    applyToVertical: false
                });
                if (timeInSecond) {
                    this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                    this._moveContent(moveDelta);
                }
            },
            scrollToTopLeft: function scrollToTopLeft(timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                    anchor: cc.v2(0, 1),
                    applyToHorizontal: true,
                    applyToVertical: true
                });
                if (timeInSecond) {
                    this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                    this._moveContent(moveDelta);
                }
            },
            scrollToTopRight: function scrollToTopRight(timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                    anchor: cc.v2(1, 1),
                    applyToHorizontal: true,
                    applyToVertical: true
                });
                if (timeInSecond) {
                    this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                    this._moveContent(moveDelta);
                }
            },
            scrollToBottomLeft: function scrollToBottomLeft(timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                    anchor: cc.v2(0, 0),
                    applyToHorizontal: true,
                    applyToVertical: true
                });
                if (timeInSecond) {
                    this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                    this._moveContent(moveDelta);
                }
            },
            scrollToBottomRight: function scrollToBottomRight(timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                    anchor: cc.v2(1, 0),
                    applyToHorizontal: true,
                    applyToVertical: true
                });
                if (timeInSecond) {
                    this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                    this._moveContent(moveDelta);
                }
            },
            scrollToOffset: function scrollToOffset(offset, timeInSecond, attenuated) {
                var maxScrollOffset = this.getMaxScrollOffset();
                var anchor = cc.v2(0, 0);
                if (maxScrollOffset.x === 0) {
                    anchor.x = 0;
                } else {
                    anchor.x = offset.x / maxScrollOffset.x;
                }
                if (maxScrollOffset.y === 0) {
                    anchor.y = 1;
                } else {
                    anchor.y = (maxScrollOffset.y - offset.y) / maxScrollOffset.y;
                }
                this.scrollTo(anchor, timeInSecond, attenuated);
            },
            getScrollOffset: function getScrollOffset() {
                var topDelta = this._getContentTopBoundary() - this._topBoundary;
                var leftDeta = this._getContentLeftBoundary() - this._leftBoundary;
                return cc.v2(leftDeta, topDelta);
            },
            getMaxScrollOffset: function getMaxScrollOffset() {
                var viewSize = this._view.getContentSize();
                var contentSize = this.content.getContentSize();
                var horizontalMaximizeOffset = contentSize.width - viewSize.width;
                var verticalMaximizeOffset = contentSize.height - viewSize.height;
                horizontalMaximizeOffset = horizontalMaximizeOffset >= 0 ? horizontalMaximizeOffset : 0;
                verticalMaximizeOffset = verticalMaximizeOffset >= 0 ? verticalMaximizeOffset : 0;
                return cc.v2(horizontalMaximizeOffset, verticalMaximizeOffset);
            },
            scrollToPercentHorizontal: function scrollToPercentHorizontal(percent, timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                    anchor: cc.v2(percent, 0),
                    applyToHorizontal: true,
                    applyToVertical: false
                });
                if (timeInSecond) {
                    this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                    this._moveContent(moveDelta);
                }
            },
            scrollTo: function scrollTo(anchor, timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                    anchor: cc.v2(anchor),
                    applyToHorizontal: true,
                    applyToVertical: true
                });
                if (timeInSecond) {
                    this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                    this._moveContent(moveDelta);
                }
            },
            scrollToPercentVertical: function scrollToPercentVertical(percent, timeInSecond, attenuated) {
                var moveDelta = this._calculateMovePercentDelta({
                    anchor: cc.v2(0, percent),
                    applyToHorizontal: false,
                    applyToVertical: true
                });
                if (timeInSecond) {
                    this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
                } else {
                    this._moveContent(moveDelta);
                }
            },
            stopAutoScroll: function stopAutoScroll() {
                this._autoScrolling = false;
                this._autoScrollAccumulatedTime = this._autoScrollTotalTime;
            },
            setContentPosition: function setContentPosition(position) {
                if (position.fuzzyEquals(this.getContentPosition(), EPSILON)) {
                    return;
                }
                this.content.setPosition(position);
                this._outOfBoundaryAmountDirty = true;
            },
            getContentPosition: function getContentPosition() {
                return this.content.getPosition();
            },
            isScrolling: function isScrolling() {
                return this._scrolling;
            },
            isAutoScrolling: function isAutoScrolling() {
                return this._autoScrolling;
            },
            _registerEvent: function _registerEvent() {
                this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, true);
                this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, true);
                this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, true);
                this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
                this.node.on(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
            },
            _unregisterEvent: function _unregisterEvent() {
                this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, true);
                this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, true);
                this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, true);
                this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
                this.node.off(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
            },
            _onMouseWheel: function _onMouseWheel(event, captureListeners) {
                if (!this.enabledInHierarchy)
                    return;
                if (this._hasNestedViewGroup(event, captureListeners))
                    return;
                var deltaMove = cc.v2(0, 0);
                var wheelPrecision = -0.1;
                if (CC_JSB || CC_RUNTIME) {
                    wheelPrecision = -7;
                }
                if (this.vertical) {
                    deltaMove = cc.v2(0, event.getScrollY() * wheelPrecision);
                } else if (this.horizontal) {
                    deltaMove = cc.v2(event.getScrollY() * wheelPrecision, 0);
                }
                this._mouseWheelEventElapsedTime = 0;
                this._processDeltaMove(deltaMove);
                if (!this._stopMouseWheel) {
                    this._handlePressLogic();
                    this.schedule(this._checkMouseWheel, 1 / 60);
                    this._stopMouseWheel = true;
                }
                this._stopPropagationIfTargetIsMe(event);
            },
            _checkMouseWheel: function _checkMouseWheel(dt) {
                var currentOutOfBoundary = this._getHowMuchOutOfBoundary();
                var maxElapsedTime = 0.1;
                if (!currentOutOfBoundary.fuzzyEquals(cc.v2(0, 0), EPSILON)) {
                    this._processInertiaScroll();
                    this.unschedule(this._checkMouseWheel);
                    this._stopMouseWheel = false;
                    return;
                }
                this._mouseWheelEventElapsedTime += dt;
                if (this._mouseWheelEventElapsedTime > maxElapsedTime) {
                    this._onScrollBarTouchEnded();
                    this.unschedule(this._checkMouseWheel);
                    this._stopMouseWheel = false;
                }
            },
            _calculateMovePercentDelta: function _calculateMovePercentDelta(options) {
                var anchor = options.anchor;
                var applyToHorizontal = options.applyToHorizontal;
                var applyToVertical = options.applyToVertical;
                this._calculateBoundary();
                anchor = anchor.clampf(cc.v2(0, 0), cc.v2(1, 1));
                var scrollSize = this._view.getContentSize();
                var contentSize = this.content.getContentSize();
                var bottomDeta = this._getContentBottomBoundary() - this._bottomBoundary;
                bottomDeta = -bottomDeta;
                var leftDeta = this._getContentLeftBoundary() - this._leftBoundary;
                leftDeta = -leftDeta;
                var moveDelta = cc.v2(0, 0);
                var totalScrollDelta = 0;
                if (applyToHorizontal) {
                    totalScrollDelta = contentSize.width - scrollSize.width;
                    moveDelta.x = leftDeta - totalScrollDelta * anchor.x;
                }
                if (applyToVertical) {
                    totalScrollDelta = contentSize.height - scrollSize.height;
                    moveDelta.y = bottomDeta - totalScrollDelta * anchor.y;
                }
                return moveDelta;
            },
            _moveContentToTopLeft: function _moveContentToTopLeft(scrollViewSize) {
                var contentSize = this.content.getContentSize();
                var bottomDeta = this._getContentBottomBoundary() - this._bottomBoundary;
                bottomDeta = -bottomDeta;
                var moveDelta = cc.v2(0, 0);
                var totalScrollDelta = 0;
                var leftDeta = this._getContentLeftBoundary() - this._leftBoundary;
                leftDeta = -leftDeta;
                if (contentSize.height < scrollViewSize.height) {
                    totalScrollDelta = contentSize.height - scrollViewSize.height;
                    moveDelta.y = bottomDeta - totalScrollDelta;
                }
                if (contentSize.width < scrollViewSize.width) {
                    totalScrollDelta = contentSize.width - scrollViewSize.width;
                    moveDelta.x = leftDeta;
                }
                this._updateScrollBarState();
                this._moveContent(moveDelta);
                this._adjustContentOutOfBoundary();
            },
            _calculateBoundary: function _calculateBoundary() {
                if (this.content) {
                    var layout = this.content.getComponent(cc.Layout);
                    if (layout && layout.enabledInHierarchy) {
                        layout.updateLayout();
                    }
                    var viewSize = this._view.getContentSize();
                    var anchorX = viewSize.width * this._view.anchorX;
                    var anchorY = viewSize.height * this._view.anchorY;
                    this._leftBoundary = -anchorX;
                    this._bottomBoundary = -anchorY;
                    this._rightBoundary = this._leftBoundary + viewSize.width;
                    this._topBoundary = this._bottomBoundary + viewSize.height;
                    this._moveContentToTopLeft(viewSize);
                }
            },
            _hasNestedViewGroup: function _hasNestedViewGroup(event, captureListeners) {
                if (event.eventPhase !== cc.Event.CAPTURING_PHASE)
                    return;
                if (captureListeners) {
                    for (var i = 0; i < captureListeners.length; ++i) {
                        var item = captureListeners[i];
                        if (this.node === item) {
                            if (event.target.getComponent(cc.ViewGroup)) {
                                return true;
                            }
                            return false;
                        }
                        if (item.getComponent(cc.ViewGroup)) {
                            return true;
                        }
                    }
                }
                return false;
            },
            _stopPropagationIfTargetIsMe: function _stopPropagationIfTargetIsMe(event) {
                if (event.eventPhase === cc.Event.AT_TARGET && event.target === this.node) {
                    event.stopPropagation();
                }
            },
            _onTouchBegan: function _onTouchBegan(event, captureListeners) {
                if (!this.enabledInHierarchy)
                    return;
                if (this._hasNestedViewGroup(event, captureListeners))
                    return;
                var touch = event.touch;
                if (this.content) {
                    this._handlePressLogic(touch);
                }
                this._touchMoved = false;
                this._stopPropagationIfTargetIsMe(event);
            },
            _onTouchMoved: function _onTouchMoved(event, captureListeners) {
                if (!this.enabledInHierarchy)
                    return;
                if (this._hasNestedViewGroup(event, captureListeners))
                    return;
                var touch = event.touch;
                if (this.content) {
                    this._handleMoveLogic(touch);
                }
                if (!this.cancelInnerEvents) {
                    return;
                }
                var deltaMove = touch.getLocation().sub(touch.getStartLocation());
                if (deltaMove.mag() > 7) {
                    if (!this._touchMoved && event.target !== this.node) {
                        var cancelEvent = new cc.Event.EventTouch(event.getTouches(), event.bubbles);
                        cancelEvent.type = cc.Node.EventType.TOUCH_CANCEL;
                        cancelEvent.touch = event.touch;
                        cancelEvent.simulate = true;
                        event.target.dispatchEvent(cancelEvent);
                        this._touchMoved = true;
                    }
                }
                this._stopPropagationIfTargetIsMe(event);
            },
            _onTouchEnded: function _onTouchEnded(event, captureListeners) {
                if (!this.enabledInHierarchy)
                    return;
                if (this._hasNestedViewGroup(event, captureListeners))
                    return;
                this._dispatchEvent('touch-up');
                var touch = event.touch;
                if (this.content) {
                    this._handleReleaseLogic(touch);
                }
                if (this._touchMoved) {
                    event.stopPropagation();
                } else {
                    this._stopPropagationIfTargetIsMe(event);
                }
            },
            _onTouchCancelled: function _onTouchCancelled(event, captureListeners) {
                if (!this.enabledInHierarchy)
                    return;
                if (this._hasNestedViewGroup(event, captureListeners))
                    return;
                if (!event.simulate) {
                    var touch = event.touch;
                    if (this.content) {
                        this._handleReleaseLogic(touch);
                    }
                }
                this._stopPropagationIfTargetIsMe(event);
            },
            _processDeltaMove: function _processDeltaMove(deltaMove) {
                this._scrollChildren(deltaMove);
                this._gatherTouchMove(deltaMove);
            },
            _handleMoveLogic: function _handleMoveLogic(touch) {
                var deltaMove = touch.getDelta();
                this._processDeltaMove(deltaMove);
            },
            _scrollChildren: function _scrollChildren(deltaMove) {
                deltaMove = this._clampDelta(deltaMove);
                var realMove = deltaMove;
                var outOfBoundary = void 0;
                if (this.elastic) {
                    outOfBoundary = this._getHowMuchOutOfBoundary();
                    realMove.x *= outOfBoundary.x === 0 ? 1 : 0.5;
                    realMove.y *= outOfBoundary.y === 0 ? 1 : 0.5;
                }
                if (!this.elastic) {
                    outOfBoundary = this._getHowMuchOutOfBoundary(realMove);
                    realMove = realMove.add(outOfBoundary);
                }
                var scrollEventType = -1;
                if (realMove.y > 0) {
                    var icBottomPos = this.content.y - this.content.anchorY * this.content.height;
                    if (icBottomPos + realMove.y > this._bottomBoundary) {
                        scrollEventType = 'scroll-to-bottom';
                    }
                } else if (realMove.y < 0) {
                    var icTopPos = this.content.y - this.content.anchorY * this.content.height + this.content.height;
                    if (icTopPos + realMove.y <= this._topBoundary) {
                        scrollEventType = 'scroll-to-top';
                    }
                }
                if (realMove.x < 0) {
                    var icRightPos = this.content.x - this.content.anchorX * this.content.width + this.content.width;
                    if (icRightPos + realMove.x <= this._rightBoundary) {
                        scrollEventType = 'scroll-to-right';
                    }
                } else if (realMove.x > 0) {
                    var icLeftPos = this.content.x - this.content.anchorX * this.content.width;
                    if (icLeftPos + realMove.x >= this._leftBoundary) {
                        scrollEventType = 'scroll-to-left';
                    }
                }
                this._moveContent(realMove, false);
                if (realMove.x !== 0 || realMove.y !== 0) {
                    if (!this._scrolling) {
                        this._scrolling = true;
                        this._dispatchEvent('scroll-began');
                    }
                    this._dispatchEvent('scrolling');
                }
                if (scrollEventType !== -1) {
                    this._dispatchEvent(scrollEventType);
                }
            },
            _handlePressLogic: function _handlePressLogic() {
                if (this._autoScrolling) {
                    this._dispatchEvent('scroll-ended');
                }
                this._autoScrolling = false;
                this._isBouncing = false;
                this._touchMovePreviousTimestamp = getTimeInMilliseconds();
                this._touchMoveDisplacements.length = 0;
                this._touchMoveTimeDeltas.length = 0;
                this._onScrollBarTouchBegan();
            },
            _clampDelta: function _clampDelta(delta) {
                var contentSize = this.content.getContentSize();
                var scrollViewSize = this._view.getContentSize();
                if (contentSize.width < scrollViewSize.width) {
                    delta.x = 0;
                }
                if (contentSize.height < scrollViewSize.height) {
                    delta.y = 0;
                }
                return delta;
            },
            _gatherTouchMove: function _gatherTouchMove(delta) {
                delta = this._clampDelta(delta);
                while (this._touchMoveDisplacements.length >= NUMBER_OF_GATHERED_TOUCHES_FOR_MOVE_SPEED) {
                    this._touchMoveDisplacements.shift();
                    this._touchMoveTimeDeltas.shift();
                }
                this._touchMoveDisplacements.push(delta);
                var timeStamp = getTimeInMilliseconds();
                this._touchMoveTimeDeltas.push((timeStamp - this._touchMovePreviousTimestamp) / 1000);
                this._touchMovePreviousTimestamp = timeStamp;
            },
            _startBounceBackIfNeeded: function _startBounceBackIfNeeded() {
                if (!this.elastic) {
                    return false;
                }
                var bounceBackAmount = this._getHowMuchOutOfBoundary();
                bounceBackAmount = this._clampDelta(bounceBackAmount);
                if (bounceBackAmount.fuzzyEquals(cc.v2(0, 0), EPSILON)) {
                    return false;
                }
                var bounceBackTime = Math.max(this.bounceDuration, 0);
                this._startAutoScroll(bounceBackAmount, bounceBackTime, true);
                if (!this._isBouncing) {
                    if (bounceBackAmount.y > 0)
                        this._dispatchEvent('bounce-top');
                    if (bounceBackAmount.y < 0)
                        this._dispatchEvent('bounce-bottom');
                    if (bounceBackAmount.x > 0)
                        this._dispatchEvent('bounce-right');
                    if (bounceBackAmount.x < 0)
                        this._dispatchEvent('bounce-left');
                    this._isBouncing = true;
                }
                return true;
            },
            _processInertiaScroll: function _processInertiaScroll() {
                var bounceBackStarted = this._startBounceBackIfNeeded();
                if (!bounceBackStarted && this.inertia) {
                    var touchMoveVelocity = this._calculateTouchMoveVelocity();
                    if (!touchMoveVelocity.fuzzyEquals(cc.v2(0, 0), EPSILON) && this.brake < 1) {
                        this._startInertiaScroll(touchMoveVelocity);
                    }
                }
                this._onScrollBarTouchEnded();
            },
            _handleReleaseLogic: function _handleReleaseLogic(touch) {
                var delta = touch.getDelta();
                this._gatherTouchMove(delta);
                this._processInertiaScroll();
                if (this._scrolling) {
                    this._scrolling = false;
                    if (!this._autoScrolling) {
                        this._dispatchEvent('scroll-ended');
                    }
                }
            },
            _isOutOfBoundary: function _isOutOfBoundary() {
                var outOfBoundary = this._getHowMuchOutOfBoundary();
                return !outOfBoundary.fuzzyEquals(cc.v2(0, 0), EPSILON);
            },
            _isNecessaryAutoScrollBrake: function _isNecessaryAutoScrollBrake() {
                if (this._autoScrollBraking) {
                    return true;
                }
                if (this._isOutOfBoundary()) {
                    if (!this._autoScrollCurrentlyOutOfBoundary) {
                        this._autoScrollCurrentlyOutOfBoundary = true;
                        this._autoScrollBraking = true;
                        this._autoScrollBrakingStartPosition = this.getContentPosition();
                        return true;
                    }
                } else {
                    this._autoScrollCurrentlyOutOfBoundary = false;
                }
                return false;
            },
            getScrollEndedEventTiming: function getScrollEndedEventTiming() {
                return EPSILON;
            },
            _processAutoScrolling: function _processAutoScrolling(dt) {
                var isAutoScrollBrake = this._isNecessaryAutoScrollBrake();
                var brakingFactor = isAutoScrollBrake ? OUT_OF_BOUNDARY_BREAKING_FACTOR : 1;
                this._autoScrollAccumulatedTime += dt * (1 / brakingFactor);
                var percentage = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
                if (this._autoScrollAttenuate) {
                    percentage = quintEaseOut(percentage);
                }
                var newPosition = this._autoScrollStartPosition.add(this._autoScrollTargetDelta.mul(percentage));
                var reachedEnd = Math.abs(percentage - 1) <= EPSILON;
                var fireEvent = Math.abs(percentage - 1) <= this.getScrollEndedEventTiming();
                if (fireEvent && !this._isScrollEndedWithThresholdEventFired) {
                    this._dispatchEvent('scroll-ended-with-threshold');
                    this._isScrollEndedWithThresholdEventFired = true;
                }
                if (this.elastic && !reachedEnd) {
                    var brakeOffsetPosition = newPosition.sub(this._autoScrollBrakingStartPosition);
                    if (isAutoScrollBrake) {
                        brakeOffsetPosition = brakeOffsetPosition.mul(brakingFactor);
                    }
                    newPosition = this._autoScrollBrakingStartPosition.add(brakeOffsetPosition);
                } else {
                    var moveDelta = newPosition.sub(this.getContentPosition());
                    var outOfBoundary = this._getHowMuchOutOfBoundary(moveDelta);
                    if (!outOfBoundary.fuzzyEquals(cc.v2(0, 0), EPSILON)) {
                        newPosition = newPosition.add(outOfBoundary);
                        reachedEnd = true;
                    }
                }
                if (reachedEnd) {
                    this._autoScrolling = false;
                }
                var deltaMove = newPosition.sub(this.getContentPosition());
                this._moveContent(this._clampDelta(deltaMove), reachedEnd);
                this._dispatchEvent('scrolling');
                if (!this._autoScrolling) {
                    this._isBouncing = false;
                    this._scrolling = false;
                    this._dispatchEvent('scroll-ended');
                }
            },
            _startInertiaScroll: function _startInertiaScroll(touchMoveVelocity) {
                var inertiaTotalMovement = touchMoveVelocity.mul(MOVEMENT_FACTOR);
                this._startAttenuatingAutoScroll(inertiaTotalMovement, touchMoveVelocity);
            },
            _calculateAttenuatedFactor: function _calculateAttenuatedFactor(distance) {
                if (this.brake <= 0) {
                    return 1 - this.brake;
                }
                return (1 - this.brake) * (1 / (1 + distance * 0.000014 + distance * distance * 8e-9));
            },
            _startAttenuatingAutoScroll: function _startAttenuatingAutoScroll(deltaMove, initialVelocity) {
                var time = this._calculateAutoScrollTimeByInitalSpeed(initialVelocity.mag());
                var targetDelta = deltaMove.normalize();
                var contentSize = this.content.getContentSize();
                var scrollviewSize = this._view.getContentSize();
                var totalMoveWidth = contentSize.width - scrollviewSize.width;
                var totalMoveHeight = contentSize.height - scrollviewSize.height;
                var attenuatedFactorX = this._calculateAttenuatedFactor(totalMoveWidth);
                var attenuatedFactorY = this._calculateAttenuatedFactor(totalMoveHeight);
                targetDelta = cc.v2(targetDelta.x * totalMoveWidth * (1 - this.brake) * attenuatedFactorX, targetDelta.y * totalMoveHeight * attenuatedFactorY * (1 - this.brake));
                var originalMoveLength = deltaMove.mag();
                var factor = targetDelta.mag() / originalMoveLength;
                targetDelta = targetDelta.add(deltaMove);
                if (this.brake > 0 && factor > 7) {
                    factor = Math.sqrt(factor);
                    targetDelta = deltaMove.mul(factor).add(deltaMove);
                }
                if (this.brake > 0 && factor > 3) {
                    factor = 3;
                    time = time * factor;
                }
                if (this.brake === 0 && factor > 1) {
                    time = time * factor;
                }
                this._startAutoScroll(targetDelta, time, true);
            },
            _calculateAutoScrollTimeByInitalSpeed: function _calculateAutoScrollTimeByInitalSpeed(initalSpeed) {
                return Math.sqrt(Math.sqrt(initalSpeed / 5));
            },
            _startAutoScroll: function _startAutoScroll(deltaMove, timeInSecond, attenuated) {
                var adjustedDeltaMove = this._flattenVectorByDirection(deltaMove);
                this._autoScrolling = true;
                this._autoScrollTargetDelta = adjustedDeltaMove;
                this._autoScrollAttenuate = attenuated;
                this._autoScrollStartPosition = this.getContentPosition();
                this._autoScrollTotalTime = timeInSecond;
                this._autoScrollAccumulatedTime = 0;
                this._autoScrollBraking = false;
                this._isScrollEndedWithThresholdEventFired = false;
                this._autoScrollBrakingStartPosition = cc.v2(0, 0);
                var currentOutOfBoundary = this._getHowMuchOutOfBoundary();
                if (!currentOutOfBoundary.fuzzyEquals(cc.v2(0, 0), EPSILON)) {
                    this._autoScrollCurrentlyOutOfBoundary = true;
                }
            },
            _calculateTouchMoveVelocity: function _calculateTouchMoveVelocity() {
                var totalTime = 0;
                totalTime = this._touchMoveTimeDeltas.reduce(function (a, b) {
                    return a + b;
                }, totalTime);
                if (totalTime <= 0 || totalTime >= 0.5) {
                    return cc.v2(0, 0);
                }
                var totalMovement = cc.v2(0, 0);
                totalMovement = this._touchMoveDisplacements.reduce(function (a, b) {
                    return a.add(b);
                }, totalMovement);
                return cc.v2(totalMovement.x * (1 - this.brake) / totalTime, totalMovement.y * (1 - this.brake) / totalTime);
            },
            _flattenVectorByDirection: function _flattenVectorByDirection(vector) {
                var result = vector;
                result.x = this.horizontal ? result.x : 0;
                result.y = this.vertical ? result.y : 0;
                return result;
            },
            _moveContent: function _moveContent(deltaMove, canStartBounceBack) {
                var adjustedMove = this._flattenVectorByDirection(deltaMove);
                var newPosition = this.getContentPosition().add(adjustedMove);
                this.setContentPosition(newPosition);
                var outOfBoundary = this._getHowMuchOutOfBoundary();
                this._updateScrollBar(outOfBoundary);
                if (this.elastic && canStartBounceBack) {
                    this._startBounceBackIfNeeded();
                }
            },
            _getContentLeftBoundary: function _getContentLeftBoundary() {
                var contentPos = this.getContentPosition();
                return contentPos.x - this.content.getAnchorPoint().x * this.content.getContentSize().width;
            },
            _getContentRightBoundary: function _getContentRightBoundary() {
                var contentSize = this.content.getContentSize();
                return this._getContentLeftBoundary() + contentSize.width;
            },
            _getContentTopBoundary: function _getContentTopBoundary() {
                var contentSize = this.content.getContentSize();
                return this._getContentBottomBoundary() + contentSize.height;
            },
            _getContentBottomBoundary: function _getContentBottomBoundary() {
                var contentPos = this.getContentPosition();
                return contentPos.y - this.content.getAnchorPoint().y * this.content.getContentSize().height;
            },
            _getHowMuchOutOfBoundary: function _getHowMuchOutOfBoundary(addition) {
                addition = addition || cc.v2(0, 0);
                if (addition.fuzzyEquals(cc.v2(0, 0), EPSILON) && !this._outOfBoundaryAmountDirty) {
                    return this._outOfBoundaryAmount;
                }
                var outOfBoundaryAmount = cc.v2(0, 0);
                if (this._getContentLeftBoundary() + addition.x > this._leftBoundary) {
                    outOfBoundaryAmount.x = this._leftBoundary - (this._getContentLeftBoundary() + addition.x);
                } else if (this._getContentRightBoundary() + addition.x < this._rightBoundary) {
                    outOfBoundaryAmount.x = this._rightBoundary - (this._getContentRightBoundary() + addition.x);
                }
                if (this._getContentTopBoundary() + addition.y < this._topBoundary) {
                    outOfBoundaryAmount.y = this._topBoundary - (this._getContentTopBoundary() + addition.y);
                } else if (this._getContentBottomBoundary() + addition.y > this._bottomBoundary) {
                    outOfBoundaryAmount.y = this._bottomBoundary - (this._getContentBottomBoundary() + addition.y);
                }
                if (addition.fuzzyEquals(cc.v2(0, 0), EPSILON)) {
                    this._outOfBoundaryAmount = outOfBoundaryAmount;
                    this._outOfBoundaryAmountDirty = false;
                }
                outOfBoundaryAmount = this._clampDelta(outOfBoundaryAmount);
                return outOfBoundaryAmount;
            },
            _updateScrollBarState: function _updateScrollBarState() {
                if (!this.content) {
                    return;
                }
                var contentSize = this.content.getContentSize();
                var scrollViewSize = this._view.getContentSize();
                if (this.verticalScrollBar) {
                    if (contentSize.height < scrollViewSize.height) {
                        this.verticalScrollBar.hide();
                    } else {
                        this.verticalScrollBar.show();
                    }
                }
                if (this.horizontalScrollBar) {
                    if (contentSize.width < scrollViewSize.width) {
                        this.horizontalScrollBar.hide();
                    } else {
                        this.horizontalScrollBar.show();
                    }
                }
            },
            _updateScrollBar: function _updateScrollBar(outOfBoundary) {
                if (this.horizontalScrollBar) {
                    this.horizontalScrollBar._onScroll(outOfBoundary);
                }
                if (this.verticalScrollBar) {
                    this.verticalScrollBar._onScroll(outOfBoundary);
                }
            },
            _onScrollBarTouchBegan: function _onScrollBarTouchBegan() {
                if (this.horizontalScrollBar) {
                    this.horizontalScrollBar._onTouchBegan();
                }
                if (this.verticalScrollBar) {
                    this.verticalScrollBar._onTouchBegan();
                }
            },
            _onScrollBarTouchEnded: function _onScrollBarTouchEnded() {
                if (this.horizontalScrollBar) {
                    this.horizontalScrollBar._onTouchEnded();
                }
                if (this.verticalScrollBar) {
                    this.verticalScrollBar._onTouchEnded();
                }
            },
            _dispatchEvent: function _dispatchEvent(event) {
                if (event === 'scroll-ended') {
                    this._scrollEventEmitMask = 0;
                } else if (event === 'scroll-to-top' || event === 'scroll-to-bottom' || event === 'scroll-to-left' || event === 'scroll-to-right') {
                    var flag = 1 << eventMap[event];
                    if (this._scrollEventEmitMask & flag) {
                        return;
                    } else {
                        this._scrollEventEmitMask |= flag;
                    }
                }
                cc.Component.EventHandler.emitEvents(this.scrollEvents, this, eventMap[event]);
                this.node.emit(event, this);
            },
            _adjustContentOutOfBoundary: function _adjustContentOutOfBoundary() {
                this._outOfBoundaryAmountDirty = true;
                if (this._isOutOfBoundary()) {
                    var outOfBoundary = this._getHowMuchOutOfBoundary(cc.v2(0, 0));
                    var newPosition = this.getContentPosition().add(outOfBoundary);
                    if (this.content) {
                        this.content.setPosition(newPosition);
                        this._updateScrollBar(0);
                    }
                }
            },
            start: function start() {
                this._calculateBoundary();
                if (this.content) {
                    cc.director.once(cc.Director.EVENT_BEFORE_DRAW, this._adjustContentOutOfBoundary, this);
                }
            },
            _hideScrollbar: function _hideScrollbar() {
                if (this.horizontalScrollBar) {
                    this.horizontalScrollBar.hide();
                }
                if (this.verticalScrollBar) {
                    this.verticalScrollBar.hide();
                }
            },
            onDisable: function onDisable() {
                if (!CC_EDITOR) {
                    this._unregisterEvent();
                    if (this.content) {
                        this.content.off(NodeEvent.SIZE_CHANGED, this._calculateBoundary, this);
                        this.content.off(NodeEvent.SCALE_CHANGED, this._calculateBoundary, this);
                        if (this._view) {
                            this._view.off(NodeEvent.POSITION_CHANGED, this._calculateBoundary, this);
                            this._view.off(NodeEvent.SCALE_CHANGED, this._calculateBoundary, this);
                            this._view.off(NodeEvent.SIZE_CHANGED, this._calculateBoundary, this);
                        }
                    }
                }
                this._hideScrollbar();
                this.stopAutoScroll();
            },
            onEnable: function onEnable() {
                if (!CC_EDITOR) {
                    this._registerEvent();
                    if (this.content) {
                        this.content.on(NodeEvent.SIZE_CHANGED, this._calculateBoundary, this);
                        this.content.on(NodeEvent.SCALE_CHANGED, this._calculateBoundary, this);
                        if (this._view) {
                            this._view.on(NodeEvent.POSITION_CHANGED, this._calculateBoundary, this);
                            this._view.on(NodeEvent.SCALE_CHANGED, this._calculateBoundary, this);
                            this._view.on(NodeEvent.SIZE_CHANGED, this._calculateBoundary, this);
                        }
                    }
                }
                this._updateScrollBarState();
            },
            update: function update(dt) {
                if (this._autoScrolling) {
                    this._processAutoScrolling(dt);
                }
            }
        });
        cc.ScrollView = module.exports = ScrollView;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,