(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCButton.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Component = require('./CCComponent');
        var GraySpriteState = require('../utils/gray-sprite-state');
        var Transition = cc.Enum({
            NONE: 0,
            COLOR: 1,
            SPRITE: 2,
            SCALE: 3
        });
        var State = cc.Enum({
            NORMAL: 0,
            HOVER: 1,
            PRESSED: 2,
            DISABLED: 3
        });
        var Button = cc.Class({
            name: 'cc.Button',
            extends: Component,
            mixins: [GraySpriteState],
            ctor: function ctor() {
                this._pressed = false;
                this._hovered = false;
                this._fromColor = null;
                this._toColor = null;
                this._time = 0;
                this._transitionFinished = true;
                this._fromScale = cc.Vec2.ZERO;
                this._toScale = cc.Vec2.ZERO;
                this._originalScale = null;
                this._graySpriteMaterial = null;
                this._spriteMaterial = null;
                this._sprite = null;
            },
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/Button',
                help: 'i18n:COMPONENT.help_url.button',
                inspector: 'packages://inspector/inspectors/comps/button.js',
                executeInEditMode: true
            },
            properties: {
                interactable: {
                    default: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.interactable',
                    notify: function notify() {
                        this._updateState();
                        if (!this.interactable) {
                            this._resetState();
                        }
                    },
                    animatable: false
                },
                _resizeToTarget: {
                    animatable: false,
                    set: function set(value) {
                        if (value) {
                            this._resizeNodeToTargetNode();
                        }
                    }
                },
                enableAutoGrayEffect: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.auto_gray_effect',
                    notify: function notify() {
                        this._updateDisabledState();
                    }
                },
                transition: {
                    default: Transition.NONE,
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.transition',
                    type: Transition,
                    animatable: false,
                    notify: function notify(oldValue) {
                        this._updateTransition(oldValue);
                    },
                    formerlySerializedAs: 'transition'
                },
                normalColor: {
                    default: cc.Color.WHITE,
                    displayName: 'Normal',
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.normal_color',
                    notify: function notify() {
                        if (this.transition === Transition.Color && this._getButtonState() === State.NORMAL) {
                            this._getTarget().opacity = this.normalColor.a;
                        }
                        this._updateState();
                    }
                },
                pressedColor: {
                    default: cc.color(211, 211, 211),
                    displayName: 'Pressed',
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.pressed_color',
                    notify: function notify() {
                        if (this.transition === Transition.Color && this._getButtonState() === State.PRESSED) {
                            this._getTarget().opacity = this.pressedColor.a;
                        }
                        this._updateState();
                    },
                    formerlySerializedAs: 'pressedColor'
                },
                hoverColor: {
                    default: cc.Color.WHITE,
                    displayName: 'Hover',
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.hover_color',
                    notify: function notify() {
                        if (this.transition === Transition.Color && this._getButtonState() === State.HOVER) {
                            this._getTarget().opacity = this.hoverColor.a;
                        }
                        this._updateState();
                    },
                    formerlySerializedAs: 'hoverColor'
                },
                disabledColor: {
                    default: cc.color(124, 124, 124),
                    displayName: 'Disabled',
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.disabled_color',
                    notify: function notify() {
                        if (this.transition === Transition.Color && this._getButtonState() === State.DISABLED) {
                            this._getTarget().opacity = this.disabledColor.a;
                        }
                        this._updateState();
                    }
                },
                duration: {
                    default: 0.1,
                    range: [
                        0,
                        10
                    ],
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.duration'
                },
                zoomScale: {
                    default: 1.2,
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.zoom_scale'
                },
                normalSprite: {
                    default: null,
                    type: cc.SpriteFrame,
                    displayName: 'Normal',
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.normal_sprite',
                    notify: function notify() {
                        this._updateState();
                    }
                },
                pressedSprite: {
                    default: null,
                    type: cc.SpriteFrame,
                    displayName: 'Pressed',
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.pressed_sprite',
                    formerlySerializedAs: 'pressedSprite',
                    notify: function notify() {
                        this._updateState();
                    }
                },
                hoverSprite: {
                    default: null,
                    type: cc.SpriteFrame,
                    displayName: 'Hover',
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.hover_sprite',
                    formerlySerializedAs: 'hoverSprite',
                    notify: function notify() {
                        this._updateState();
                    }
                },
                disabledSprite: {
                    default: null,
                    type: cc.SpriteFrame,
                    displayName: 'Disabled',
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.disabled_sprite',
                    notify: function notify() {
                        this._updateState();
                    }
                },
                target: {
                    default: null,
                    type: cc.Node,
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.target',
                    notify: function notify(oldValue) {
                        this._applyTarget();
                        if (oldValue && this.target !== oldValue) {
                            this._unregisterTargetEvent(oldValue);
                        }
                    }
                },
                clickEvents: {
                    default: [],
                    type: cc.Component.EventHandler,
                    tooltip: CC_DEV && 'i18n:COMPONENT.button.click_events'
                }
            },
            statics: { Transition: Transition },
            __preload: function __preload() {
                this._applyTarget();
                this._updateState();
            },
            _resetState: function _resetState() {
                this._pressed = false;
                this._hovered = false;
                var target = this._getTarget();
                var transition = this.transition;
                var originalScale = this._originalScale;
                if (transition === Transition.COLOR && this.interactable) {
                    this._setTargetColor(this.normalColor);
                } else if (transition === Transition.SCALE && originalScale) {
                    target.setScale(originalScale.x, originalScale.y);
                }
                this._transitionFinished = true;
            },
            onEnable: function onEnable() {
                if (this.normalSprite) {
                    this.normalSprite.ensureLoadTexture();
                }
                if (this.hoverSprite) {
                    this.hoverSprite.ensureLoadTexture();
                }
                if (this.pressedSprite) {
                    this.pressedSprite.ensureLoadTexture();
                }
                if (this.disabledSprite) {
                    this.disabledSprite.ensureLoadTexture();
                }
                if (!CC_EDITOR) {
                    this._registerNodeEvent();
                }
            },
            onDisable: function onDisable() {
                this._resetState();
                if (!CC_EDITOR) {
                    this._unregisterNodeEvent();
                }
            },
            _getTarget: function _getTarget() {
                return this.target ? this.target : this.node;
            },
            _onTargetSpriteFrameChanged: function _onTargetSpriteFrameChanged(comp) {
                if (this.transition === Transition.SPRITE) {
                    this._setCurrentStateSprite(comp.spriteFrame);
                }
            },
            _onTargetColorChanged: function _onTargetColorChanged(color) {
                if (this.transition === Transition.COLOR) {
                    this._setCurrentStateColor(color);
                }
            },
            _onTargetScaleChanged: function _onTargetScaleChanged() {
                var target = this._getTarget();
                if (this._originalScale) {
                    if (this.transition !== Transition.SCALE || this._transitionFinished) {
                        this._originalScale.x = target.scaleX;
                        this._originalScale.y = target.scaleY;
                    }
                }
            },
            _setTargetColor: function _setTargetColor(color) {
                var target = this._getTarget();
                target.color = color;
                target.opacity = color.a;
            },
            _getStateColor: function _getStateColor(state) {
                switch (state) {
                case State.NORMAL:
                    return this.normalColor;
                case State.HOVER:
                    return this.hoverColor;
                case State.PRESSED:
                    return this.pressedColor;
                case State.DISABLED:
                    return this.disabledColor;
                }
            },
            _getStateSprite: function _getStateSprite(state) {
                switch (state) {
                case State.NORMAL:
                    return this.normalSprite;
                case State.HOVER:
                    return this.hoverSprite;
                case State.PRESSED:
                    return this.pressedSprite;
                case State.DISABLED:
                    return this.disabledSprite;
                }
            },
            _setCurrentStateColor: function _setCurrentStateColor(color) {
                switch (this._getButtonState()) {
                case State.NORMAL:
                    this.normalColor = color;
                    break;
                case State.HOVER:
                    this.hoverColor = color;
                    break;
                case State.PRESSED:
                    this.pressedColor = color;
                    break;
                case State.DISABLED:
                    this.disabledColor = color;
                    break;
                }
            },
            _setCurrentStateSprite: function _setCurrentStateSprite(spriteFrame) {
                switch (this._getButtonState()) {
                case State.NORMAL:
                    this.normalSprite = spriteFrame;
                    break;
                case State.HOVER:
                    this.hoverSprite = spriteFrame;
                    break;
                case State.PRESSED:
                    this.pressedSprite = spriteFrame;
                    break;
                case State.DISABLED:
                    this.disabledSprite = spriteFrame;
                    break;
                }
            },
            update: function update(dt) {
                var target = this._getTarget();
                if (this._transitionFinished)
                    return;
                if (this.transition !== Transition.COLOR && this.transition !== Transition.SCALE)
                    return;
                this.time += dt;
                var ratio = 1;
                if (this.duration > 0) {
                    ratio = this.time / this.duration;
                }
                if (ratio >= 1) {
                    ratio = 1;
                }
                if (this.transition === Transition.COLOR) {
                    var color = this._fromColor.lerp(this._toColor, ratio);
                    this._setTargetColor(color);
                } else if (this.transition === Transition.SCALE && this._originalScale) {
                    target.scale = this._fromScale.lerp(this._toScale, ratio);
                }
                if (ratio === 1) {
                    this._transitionFinished = true;
                }
            },
            _registerNodeEvent: function _registerNodeEvent() {
                this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
                this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
                this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
                this.node.on(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
                this.node.on(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
            },
            _unregisterNodeEvent: function _unregisterNodeEvent() {
                this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
                this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
                this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
                this.node.off(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
                this.node.off(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
            },
            _registerTargetEvent: function _registerTargetEvent(target) {
                if (CC_EDITOR) {
                    target.on('spriteframe-changed', this._onTargetSpriteFrameChanged, this);
                    target.on(cc.Node.EventType.COLOR_CHANGED, this._onTargetColorChanged, this);
                }
                target.on(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this);
            },
            _unregisterTargetEvent: function _unregisterTargetEvent(target) {
                if (CC_EDITOR) {
                    target.off('spriteframe-changed', this._onTargetSpriteFrameChanged, this);
                    target.off(cc.Node.EventType.COLOR_CHANGED, this._onTargetColorChanged, this);
                }
                target.off(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this);
            },
            _getTargetSprite: function _getTargetSprite(target) {
                var sprite = null;
                if (target) {
                    sprite = target.getComponent(cc.Sprite);
                }
                return sprite;
            },
            _applyTarget: function _applyTarget() {
                var target = this._getTarget();
                this._sprite = this._getTargetSprite(target);
                if (!this._originalScale) {
                    this._originalScale = cc.Vec2.ZERO;
                }
                this._originalScale.x = target.scaleX;
                this._originalScale.y = target.scaleY;
                this._registerTargetEvent(target);
            },
            _onTouchBegan: function _onTouchBegan(event) {
                if (!this.interactable || !this.enabledInHierarchy)
                    return;
                this._pressed = true;
                this._updateState();
                event.stopPropagation();
            },
            _onTouchMove: function _onTouchMove(event) {
                if (!this.interactable || !this.enabledInHierarchy || !this._pressed)
                    return;
                var touch = event.touch;
                var hit = this.node._hitTest(touch.getLocation());
                var target = this._getTarget();
                var originalScale = this._originalScale;
                if (this.transition === Transition.SCALE && originalScale) {
                    if (hit) {
                        this._fromScale.x = originalScale.x;
                        this._fromScale.y = originalScale.y;
                        this._toScale.x = originalScale.x * this.zoomScale;
                        this._toScale.y = originalScale.y * this.zoomScale;
                        this._transitionFinished = false;
                    } else {
                        this.time = 0;
                        this._transitionFinished = true;
                        target.setScale(originalScale.x, originalScale.y);
                    }
                } else {
                    var state = void 0;
                    if (hit) {
                        state = State.PRESSED;
                    } else {
                        state = State.NORMAL;
                    }
                    this._applyTransition(state);
                }
                event.stopPropagation();
            },
            _onTouchEnded: function _onTouchEnded(event) {
                if (!this.interactable || !this.enabledInHierarchy)
                    return;
                if (this._pressed) {
                    cc.Component.EventHandler.emitEvents(this.clickEvents, event);
                    this.node.emit('click', this);
                }
                this._pressed = false;
                this._updateState();
                event.stopPropagation();
            },
            _onTouchCancel: function _onTouchCancel() {
                if (!this.interactable || !this.enabledInHierarchy)
                    return;
                this._pressed = false;
                this._updateState();
            },
            _onMouseMoveIn: function _onMouseMoveIn() {
                if (this._pressed || !this.interactable || !this.enabledInHierarchy)
                    return;
                if (this.transition === Transition.SPRITE && !this.hoverSprite)
                    return;
                if (!this._hovered) {
                    this._hovered = true;
                    this._updateState();
                }
            },
            _onMouseMoveOut: function _onMouseMoveOut() {
                if (this._hovered) {
                    this._hovered = false;
                    this._updateState();
                }
            },
            _updateState: function _updateState() {
                var state = this._getButtonState();
                this._applyTransition(state);
                this._updateDisabledState();
            },
            _getButtonState: function _getButtonState() {
                var state = void 0;
                if (!this.interactable) {
                    state = State.DISABLED;
                } else if (this._pressed) {
                    state = State.PRESSED;
                } else if (this._hovered) {
                    state = State.HOVER;
                } else {
                    state = State.NORMAL;
                }
                return state;
            },
            _updateColorTransitionImmediately: function _updateColorTransitionImmediately(state) {
                var color = this._getStateColor(state);
                this._setTargetColor(color);
            },
            _updateColorTransition: function _updateColorTransition(state) {
                if (CC_EDITOR || state === State.DISABLED) {
                    this._updateColorTransitionImmediately(state);
                } else {
                    var target = this._getTarget();
                    var color = this._getStateColor(state);
                    this._fromColor = target.color.clone();
                    this._toColor = color;
                    this.time = 0;
                    this._transitionFinished = false;
                }
            },
            _updateSpriteTransition: function _updateSpriteTransition(state) {
                var sprite = this._getStateSprite(state);
                if (this._sprite && sprite) {
                    this._sprite.spriteFrame = sprite;
                }
            },
            _updateScaleTransition: function _updateScaleTransition(state) {
                if (state === State.PRESSED) {
                    this._zoomUp();
                } else {
                    this._zoomBack();
                }
            },
            _zoomUp: function _zoomUp() {
                if (!this._originalScale) {
                    return;
                }
                this._fromScale.x = this._originalScale.x;
                this._fromScale.y = this._originalScale.y;
                this._toScale.x = this._originalScale.x * this.zoomScale;
                this._toScale.y = this._originalScale.y * this.zoomScale;
                this.time = 0;
                this._transitionFinished = false;
            },
            _zoomBack: function _zoomBack() {
                if (!this._originalScale) {
                    return;
                }
                var target = this._getTarget();
                this._fromScale.x = target.scaleX;
                this._fromScale.y = target.scaleY;
                this._toScale.x = this._originalScale.x;
                this._toScale.y = this._originalScale.y;
                this.time = 0;
                this._transitionFinished = false;
            },
            _updateTransition: function _updateTransition(oldTransition) {
                if (oldTransition === Transition.COLOR) {
                    this._updateColorTransitionImmediately(State.NORMAL);
                } else if (oldTransition === Transition.SPRITE) {
                    this._updateSpriteTransition(State.NORMAL);
                }
                this._updateState();
            },
            _applyTransition: function _applyTransition(state) {
                var transition = this.transition;
                if (transition === Transition.COLOR) {
                    this._updateColorTransition(state);
                } else if (transition === Transition.SPRITE) {
                    this._updateSpriteTransition(state);
                } else if (transition === Transition.SCALE) {
                    this._updateScaleTransition(state);
                }
            },
            _resizeNodeToTargetNode: CC_EDITOR && function () {
                this.node.setContentSize(this._getTarget().getContentSize());
            },
            _updateDisabledState: function _updateDisabledState() {
                if (this._sprite) {
                    var useGrayMaterial = false;
                    if (this.enableAutoGrayEffect) {
                        if (!(this.transition === Transition.SPRITE && this.disabledSprite)) {
                            if (!this.interactable) {
                                useGrayMaterial = true;
                            }
                        }
                    }
                    this._switchGrayMaterial(useGrayMaterial, this._sprite);
                }
            }
        });
        cc.Button = module.exports = Button;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,