(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCStudioComponent.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var ComponentType = cc.Enum({
            NONE: 0,
            CHECKBOX: 1,
            TEXT_ATLAS: 2,
            SLIDER_BAR: 3,
            LIST_VIEW: 4,
            PAGE_VIEW: 5
        });
        var ListDirection = cc.Enum({
            VERTICAL: 0,
            HORIZONTAL: 1
        });
        var VerticalAlign = cc.Enum({
            TOP: 0,
            CENTER: 1,
            BOTTOM: 2
        });
        var HorizontalAlign = cc.Enum({
            LEFT: 0,
            CENTER: 1,
            RIGHT: 2
        });
        var StudioComponent = cc.Class({
            name: 'cc.StudioComponent',
            extends: cc.Component,
            editor: CC_EDITOR && { inspector: 'unpack://engine-dev/extensions/cocostudio/editor/studio-component.js' },
            properties: CC_EDITOR && {
                _type: ComponentType.NONE,
                type: {
                    get: function get() {
                        return this._type;
                    },
                    set: function set(value) {
                        this._type = value;
                    },
                    readonly: true,
                    type: ComponentType
                },
                _checkNormalBackFrame: null,
                checkNormalBackFrame: {
                    get: function get() {
                        return this._checkNormalBackFrame;
                    },
                    set: function set(value) {
                        this._checkNormalBackFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _checkPressedBackFrame: null,
                checkPressedBackFrame: {
                    get: function get() {
                        return this._checkPressedBackFrame;
                    },
                    set: function set(value) {
                        this._checkPressedBackFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _checkDisableBackFrame: null,
                checkDisableBackFrame: {
                    get: function get() {
                        return this._checkDisableBackFrame;
                    },
                    set: function set(value) {
                        this._checkDisableBackFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _checkNormalFrame: null,
                checkNormalFrame: {
                    get: function get() {
                        return this._checkNormalFrame;
                    },
                    set: function set(value) {
                        this._checkNormalFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _checkDisableFrame: null,
                checkDisableFrame: {
                    get: function get() {
                        return this._checkDisableFrame;
                    },
                    set: function set(value) {
                        this._checkDisableFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                checkInteractable: {
                    readonly: true,
                    default: true
                },
                isChecked: {
                    readonly: true,
                    default: true
                },
                _atlasFrame: null,
                atlasFrame: {
                    get: function get() {
                        return this._atlasFrame;
                    },
                    set: function set(value) {
                        this._atlasFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                firstChar: {
                    readonly: true,
                    default: '.'
                },
                charWidth: {
                    readonly: true,
                    default: 0
                },
                charHeight: {
                    readonly: true,
                    default: 0
                },
                string: {
                    readonly: true,
                    default: ''
                },
                _sliderBackFrame: null,
                sliderBackFrame: {
                    get: function get() {
                        return this._sliderBackFrame;
                    },
                    set: function set(value) {
                        this._sliderBackFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _sliderBarFrame: null,
                sliderBarFrame: {
                    get: function get() {
                        return this._sliderBarFrame;
                    },
                    set: function set(value) {
                        this._sliderBarFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _sliderBtnNormalFrame: null,
                sliderBtnNormalFrame: {
                    get: function get() {
                        return this._sliderBtnNormalFrame;
                    },
                    set: function set(value) {
                        this._sliderBtnNormalFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _sliderBtnPressedFrame: null,
                sliderBtnPressedFrame: {
                    get: function get() {
                        return this._sliderBtnPressedFrame;
                    },
                    set: function set(value) {
                        this._sliderBtnPressedFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _sliderBtnDisabledFrame: null,
                sliderBtnDisabledFrame: {
                    get: function get() {
                        return this._sliderBtnDisabledFrame;
                    },
                    set: function set(value) {
                        this._sliderBtnDisabledFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                sliderInteractable: {
                    readonly: true,
                    default: true
                },
                sliderProgress: {
                    default: 0.5,
                    readonly: true,
                    type: 'Float',
                    range: [
                        0,
                        1,
                        0.1
                    ]
                },
                listInertia: {
                    readonly: true,
                    default: true,
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.inertia'
                },
                listDirection: {
                    readonly: true,
                    default: ListDirection.VERTICAL,
                    type: ListDirection
                },
                listHorizontalAlign: {
                    readonly: true,
                    default: HorizontalAlign.LEFT,
                    type: HorizontalAlign
                },
                listVerticalAlign: {
                    readonly: true,
                    default: VerticalAlign.TOP,
                    type: VerticalAlign
                },
                listPadding: {
                    readonly: true,
                    default: 0
                }
            },
            statics: {
                ComponentType: ComponentType,
                ListDirection: ListDirection,
                VerticalAlign: VerticalAlign,
                HorizontalAlign: HorizontalAlign
            }
        });
        var PrefabHelper = require('../utils/prefab-helper');
        StudioComponent.PlaceHolder = cc.Class({
            name: 'cc.StudioComponent.PlaceHolder',
            extends: cc.Component,
            properties: {
                _baseUrl: '',
                nestedPrefab: cc.Prefab
            },
            onLoad: function onLoad() {
                if (!this.nestedPrefab) {
                    if (CC_DEV) {
                        cc.warn('Unable to find %s resource.', this._baseUrl);
                    }
                    return;
                }
                this._replaceWithNestedPrefab();
            },
            _replaceWithNestedPrefab: function _replaceWithNestedPrefab() {
                var node = this.node;
                var _prefab = node._prefab;
                _prefab.root = node;
                _prefab.asset = this.nestedPrefab;
                PrefabHelper.syncWithPrefab(node);
            }
        });
        cc.StudioComponent = module.exports = StudioComponent;
        var StudioWidget = cc.Class({
            name: 'cc.StudioWidget',
            extends: cc.Widget,
            editor: CC_EDITOR && { inspector: 'packages://inspector/inspectors/comps/ccwidget.js' },
            _validateTargetInDEV: function _validateTargetInDEV() {
            }
        });
        cc.StudioWidget = module.exports = StudioWidget;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDU3R1ZGlvQ29tcG9uZW50LmpzIiwiL1VzZXJzL3p6ZjIwMTkvRGVza3RvcC9kZXZlbG9wbWVudC9zdXBwb3J0X2FzdGMvZW5naW5lL2NvY29zMmQvY29yZS9jb21wb25lbnRzL0NDU3R1ZGlvQ29tcG9uZW50LmpzIl0sIm5hbWVzIjpbIkNvbXBvbmVudFR5cGUiLCJjYyIsIkVudW0iLCJOT05FIiwiQ0hFQ0tCT1giLCJURVhUX0FUTEFTIiwiU0xJREVSX0JBUiIsIkxJU1RfVklFVyIsIlBBR0VfVklFVyIsIkxpc3REaXJlY3Rpb24iLCJWRVJUSUNBTCIsIkhPUklaT05UQUwiLCJWZXJ0aWNhbEFsaWduIiwiVE9QIiwiQ0VOVEVSIiwiQk9UVE9NIiwiSG9yaXpvbnRhbEFsaWduIiwiTEVGVCIsIlJJR0hUIiwiU3R1ZGlvQ29tcG9uZW50IiwiQ2xhc3MiLCJuYW1lIiwiZXh0ZW5kcyIsIkNvbXBvbmVudCIsImVkaXRvciIsIkNDX0VESVRPUiIsImluc3BlY3RvciIsInByb3BlcnRpZXMiLCJfdHlwZSIsInR5cGUiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsInJlYWRvbmx5IiwiX2NoZWNrTm9ybWFsQmFja0ZyYW1lIiwiY2hlY2tOb3JtYWxCYWNrRnJhbWUiLCJTcHJpdGVGcmFtZSIsIl9jaGVja1ByZXNzZWRCYWNrRnJhbWUiLCJjaGVja1ByZXNzZWRCYWNrRnJhbWUiLCJfY2hlY2tEaXNhYmxlQmFja0ZyYW1lIiwiY2hlY2tEaXNhYmxlQmFja0ZyYW1lIiwiX2NoZWNrTm9ybWFsRnJhbWUiLCJjaGVja05vcm1hbEZyYW1lIiwiX2NoZWNrRGlzYWJsZUZyYW1lIiwiY2hlY2tEaXNhYmxlRnJhbWUiLCJjaGVja0ludGVyYWN0YWJsZSIsImRlZmF1bHQiLCJpc0NoZWNrZWQiLCJfYXRsYXNGcmFtZSIsImF0bGFzRnJhbWUiLCJmaXJzdENoYXIiLCJjaGFyV2lkdGgiLCJjaGFySGVpZ2h0Iiwic3RyaW5nIiwiX3NsaWRlckJhY2tGcmFtZSIsInNsaWRlckJhY2tGcmFtZSIsIl9zbGlkZXJCYXJGcmFtZSIsInNsaWRlckJhckZyYW1lIiwiX3NsaWRlckJ0bk5vcm1hbEZyYW1lIiwic2xpZGVyQnRuTm9ybWFsRnJhbWUiLCJfc2xpZGVyQnRuUHJlc3NlZEZyYW1lIiwic2xpZGVyQnRuUHJlc3NlZEZyYW1lIiwiX3NsaWRlckJ0bkRpc2FibGVkRnJhbWUiLCJzbGlkZXJCdG5EaXNhYmxlZEZyYW1lIiwic2xpZGVySW50ZXJhY3RhYmxlIiwic2xpZGVyUHJvZ3Jlc3MiLCJyYW5nZSIsImxpc3RJbmVydGlhIiwiYW5pbWF0YWJsZSIsInRvb2x0aXAiLCJDQ19ERVYiLCJsaXN0RGlyZWN0aW9uIiwibGlzdEhvcml6b250YWxBbGlnbiIsImxpc3RWZXJ0aWNhbEFsaWduIiwibGlzdFBhZGRpbmciLCJzdGF0aWNzIiwiUHJlZmFiSGVscGVyIiwicmVxdWlyZSIsIlBsYWNlSG9sZGVyIiwiX2Jhc2VVcmwiLCJuZXN0ZWRQcmVmYWIiLCJQcmVmYWIiLCJvbkxvYWQiLCJ3YXJuIiwiX3JlcGxhY2VXaXRoTmVzdGVkUHJlZmFiIiwibm9kZSIsIl9wcmVmYWIiLCJyb290IiwiYXNzZXQiLCJzeW5jV2l0aFByZWZhYiIsIm1vZHVsZSIsImV4cG9ydHMiLCJTdHVkaW9XaWRnZXQiLCJXaWRnZXQiLCJfdmFsaWRhdGVUYXJnZXRJbkRFViJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBMEJBLElBQUlBLGFBQUFBLEdBQWdCQyxFQUFBQSxDQUFHQyxJQUFIRCxDQUFRO0FBQUEsWUFDeEJFLElBQUFBLEVBQU8sQ0FEaUI7QUFBQSxZQUV4QkMsUUFBQUEsRUFBVyxDQUZhO0FBQUEsWUFHeEJDLFVBQUFBLEVBQWEsQ0FIVztBQUFBLFlBSXhCQyxVQUFBQSxFQUFhLENBSlc7QUFBQSxZQUt4QkMsU0FBQUEsRUFBWSxDQUxZO0FBQUEsWUFNeEJDLFNBQUFBLEVBQVksQ0FO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LFlBQUFBLENBQWFhLGNBQWJiLENBQTRCUyxJQUE1QlQsRUFMa0M7QUFBQSxhQWhCSDtBQUFBLFNBQVQzRSxDQUE5QmtCO1FBeUJBbEIsRUFBQUEsQ0FBR2tCLGVBQUhsQixHQUFxQnlGLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCdkUsZUFBdENsQjtRQUdBLElBQUkyRixZQUFBQSxHQUFlM0YsRUFBQUEsQ0FBR21CLEtBQUhuQixDQUFTO0FBQUEsWUFDeEJvQixJQUFBQSxFQUFNLGlCQURrQjtBQUFBLFlBRXhCQyxPQUFBQSxFQUFTckIsRUFBQUEsQ0FBRzRGLE1BRlk7QUFBQSxZQUd4QnJFLE1BQUFBLEVBQVFDLFNBQUFBLElBQWEsRUFDakJDLFNBQUFBLEVBQVcsbURBRE0sRUFIRztBQUFBLFlBTXhCb0Usb0JBQUFBLEVBTndCLFNBQUEsb0JBQUEsR0FNQTtBQUFBLGFBTkE7QUFBQSxTQUFUN0YsQ0FBbkI7UUFTQUEsRUFBQUEsQ0FBRzJGLFlBQUgzRixHQUFrQnlGLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCRSxZQUFuQzNGIiwiZmlsZSI6IkNDU3R1ZGlvQ29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXG52YXIgQ29tcG9uZW50VHlwZSA9IGNjLkVudW0oe1xuICAgIE5PTkUgOiAwLFxuICAgIENIRUNLQk9YIDogMSxcbiAgICBURVhUX0FUTEFTIDogMixcbiAgICBTTElERVJfQkFSIDogMyxcbiAgICBMSVNUX1ZJRVcgOiA0LFxuICAgIFBBR0VfVklFVyA6IDVcbn0pO1xuXG52YXIgTGlzdERpcmVjdGlvbiA9IGNjLkVudW0oe1xuICAgIFZFUlRJQ0FMIDogMCxcbiAgICBIT1JJWk9OVEFMOiAxXG59KTtcblxudmFyIFZlcnRpY2FsQWxpZ24gPSBjYy5FbnVtKHtcbiAgICBUT1AgOiAwLFxuICAgIENFTlRFUjogMSxcbiAgICBCT1RUT006IDJcbn0pO1xuXG52YXIgSG9yaXpvbnRhbEFsaWduID0gY2MuRW51bSh7XG4gICAgTEVGVCA6IDAsXG4gICAgQ0VOVEVSOiAxLFxuICAgIFJJR0hUOiAyXG59KTtcblxudmFyIFN0dWRpb0NvbXBvbmVudCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuU3R1ZGlvQ29tcG9uZW50JyxcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBlZGl0b3I6IENDX0VESVRPUiAmJiB7XG4gICAgICAgIGluc3BlY3RvcjogJ3VucGFjazovL2VuZ2luZS1kZXYvZXh0ZW5zaW9ucy9jb2Nvc3R1ZGlvL2VkaXRvci9zdHVkaW8tY29tcG9uZW50LmpzJ1xuICAgIH0sXG5cbiAgICBwcm9wZXJ0aWVzOiBDQ19FRElUT1IgJiYge1xuICAgICAgICBfdHlwZSA6IENvbXBvbmVudFR5cGUuTk9ORSxcbiAgICAgICAgdHlwZSA6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHlwZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogQ29tcG9uZW50VHlwZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIHByb3BzIGZvciBjaGVja2JveFxuICAgICAgICBfY2hlY2tOb3JtYWxCYWNrRnJhbWU6IG51bGwsXG4gICAgICAgIGNoZWNrTm9ybWFsQmFja0ZyYW1lOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tOb3JtYWxCYWNrRnJhbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja05vcm1hbEJhY2tGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWVcbiAgICAgICAgfSxcblxuICAgICAgICBfY2hlY2tQcmVzc2VkQmFja0ZyYW1lOiBudWxsLFxuICAgICAgICBjaGVja1ByZXNzZWRCYWNrRnJhbWU6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGVja1ByZXNzZWRCYWNrRnJhbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1ByZXNzZWRCYWNrRnJhbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lXG4gICAgICAgIH0sXG5cbiAgICAgICAgX2NoZWNrRGlzYWJsZUJhY2tGcmFtZTogbnVsbCxcbiAgICAgICAgY2hlY2tEaXNhYmxlQmFja0ZyYW1lOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tEaXNhYmxlQmFja0ZyYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tEaXNhYmxlQmFja0ZyYW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZVxuICAgICAgICB9LFxuXG4gICAgICAgIF9jaGVja05vcm1hbEZyYW1lOiBudWxsLFxuICAgICAgICBjaGVja05vcm1hbEZyYW1lOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tOb3JtYWxGcmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrTm9ybWFsRnJhbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lXG4gICAgICAgIH0sXG5cbiAgICAgICAgX2NoZWNrRGlzYWJsZUZyYW1lOiBudWxsLFxuICAgICAgICBjaGVja0Rpc2FibGVGcmFtZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrRGlzYWJsZUZyYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tEaXNhYmxlRnJhbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lXG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hlY2tJbnRlcmFjdGFibGUgOiB7XG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICBpc0NoZWNrZWQgOiB7XG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBwcm9wcyBmb3IgVGV4dEF0bGFzXG4gICAgICAgIF9hdGxhc0ZyYW1lOiBudWxsLFxuICAgICAgICBhdGxhc0ZyYW1lOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYXRsYXNGcmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2F0bGFzRnJhbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lXG4gICAgICAgIH0sXG5cbiAgICAgICAgZmlyc3RDaGFyOiB7XG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcuJ1xuICAgICAgICB9LFxuXG4gICAgICAgIGNoYXJXaWR0aDoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiAwXG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hhckhlaWdodDoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiAwXG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RyaW5nOiB7XG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gcHJvcHMgZm9yIFNsaWRlckJhclxuICAgICAgICBfc2xpZGVyQmFja0ZyYW1lOiBudWxsLFxuICAgICAgICBzbGlkZXJCYWNrRnJhbWUgOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2xpZGVyQmFja0ZyYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2xpZGVyQmFja0ZyYW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZVxuICAgICAgICB9LFxuXG4gICAgICAgIF9zbGlkZXJCYXJGcmFtZTogbnVsbCxcbiAgICAgICAgc2xpZGVyQmFyRnJhbWUgOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2xpZGVyQmFyRnJhbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zbGlkZXJCYXJGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWVcbiAgICAgICAgfSxcblxuICAgICAgICBfc2xpZGVyQnRuTm9ybWFsRnJhbWU6IG51bGwsXG4gICAgICAgIHNsaWRlckJ0bk5vcm1hbEZyYW1lIDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWRlckJ0bk5vcm1hbEZyYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2xpZGVyQnRuTm9ybWFsRnJhbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lXG4gICAgICAgIH0sXG5cbiAgICAgICAgX3NsaWRlckJ0blByZXNzZWRGcmFtZTogbnVsbCxcbiAgICAgICAgc2xpZGVyQnRuUHJlc3NlZEZyYW1lIDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWRlckJ0blByZXNzZWRGcmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NsaWRlckJ0blByZXNzZWRGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWVcbiAgICAgICAgfSxcblxuICAgICAgICBfc2xpZGVyQnRuRGlzYWJsZWRGcmFtZTogbnVsbCxcbiAgICAgICAgc2xpZGVyQnRuRGlzYWJsZWRGcmFtZSA6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zbGlkZXJCdG5EaXNhYmxlZEZyYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2xpZGVyQnRuRGlzYWJsZWRGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWVcbiAgICAgICAgfSxcblxuICAgICAgICBzbGlkZXJJbnRlcmFjdGFibGUgOiB7XG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICBzbGlkZXJQcm9ncmVzczoge1xuICAgICAgICAgICAgZGVmYXVsdDogMC41LFxuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiAnRmxvYXQnLFxuICAgICAgICAgICAgcmFuZ2U6IFswLCAxLCAwLjFdXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gcHJvcHMgZm9yIExpc3RWaWV3XG4gICAgICAgIGxpc3RJbmVydGlhOiAge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICAgICAgYW5pbWF0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnNjcm9sbHZpZXcuaW5lcnRpYScsXG4gICAgICAgIH0sXG5cbiAgICAgICAgbGlzdERpcmVjdGlvbjoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiBMaXN0RGlyZWN0aW9uLlZFUlRJQ0FMLFxuICAgICAgICAgICAgdHlwZTogTGlzdERpcmVjdGlvblxuICAgICAgICB9LFxuXG4gICAgICAgIGxpc3RIb3Jpem9udGFsQWxpZ246IHtcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgZGVmYXVsdDogSG9yaXpvbnRhbEFsaWduLkxFRlQsXG4gICAgICAgICAgICB0eXBlOiBIb3Jpem9udGFsQWxpZ25cbiAgICAgICAgfSxcblxuICAgICAgICBsaXN0VmVydGljYWxBbGlnbjoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiBWZXJ0aWNhbEFsaWduLlRPUCxcbiAgICAgICAgICAgIHR5cGU6IFZlcnRpY2FsQWxpZ25cbiAgICAgICAgfSxcblxuICAgICAgICBsaXN0UGFkZGluZzoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiAwXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RhdGljcyA6IHtcbiAgICAgICAgQ29tcG9uZW50VHlwZSA6IENvbXBvbmVudFR5cGUsXG4gICAgICAgIExpc3REaXJlY3Rpb24gOiBMaXN0RGlyZWN0aW9uLFxuICAgICAgICBWZXJ0aWNhbEFsaWduIDogVmVydGljYWxBbGlnbixcbiAgICAgICAgSG9yaXpvbnRhbEFsaWduIDogSG9yaXpvbnRhbEFsaWduXG4gICAgfSxcbn0pO1xuXG52YXIgUHJlZmFiSGVscGVyID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJlZmFiLWhlbHBlcicpO1xuU3R1ZGlvQ29tcG9uZW50LlBsYWNlSG9sZGVyID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5TdHVkaW9Db21wb25lbnQuUGxhY2VIb2xkZXInLFxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIF9iYXNlVXJsOiAnJyxcbiAgICAgICAgbmVzdGVkUHJlZmFiOiBjYy5QcmVmYWIsXG4gICAgfSxcbiAgICBvbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm5lc3RlZFByZWZhYikge1xuICAgICAgICAgICAgaWYgKENDX0RFVikge1xuICAgICAgICAgICAgICAgIGNjLndhcm4oJ1VuYWJsZSB0byBmaW5kICVzIHJlc291cmNlLicsIHRoaXMuX2Jhc2VVcmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlcGxhY2VXaXRoTmVzdGVkUHJlZmFiKCk7XG4gICAgfSxcbiAgICBfcmVwbGFjZVdpdGhOZXN0ZWRQcmVmYWI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGU7XG4gICAgICAgIHZhciBfcHJlZmFiID0gbm9kZS5fcHJlZmFiO1xuICAgICAgICBfcHJlZmFiLnJvb3QgPSBub2RlO1xuICAgICAgICBfcHJlZmFiLmFzc2V0ID0gdGhpcy5uZXN0ZWRQcmVmYWI7XG4gICAgICAgIFByZWZhYkhlbHBlci5zeW5jV2l0aFByZWZhYihub2RlKTtcbiAgICB9XG59KTtcblxuY2MuU3R1ZGlvQ29tcG9uZW50ID0gbW9kdWxlLmV4cG9ydHMgPSBTdHVkaW9Db21wb25lbnQ7XG5cblxudmFyIFN0dWRpb1dpZGdldCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuU3R1ZGlvV2lkZ2V0JyxcbiAgICBleHRlbmRzOiBjYy5XaWRnZXQsXG4gICAgZWRpdG9yOiBDQ19FRElUT1IgJiYge1xuICAgICAgICBpbnNwZWN0b3I6ICdwYWNrYWdlczovL2luc3BlY3Rvci9pbnNwZWN0b3JzL2NvbXBzL2Njd2lkZ2V0LmpzJyxcbiAgICB9LFxuICAgIF92YWxpZGF0ZVRhcmdldEluREVWICgpIHt9XG59KTtcblxuY2MuU3R1ZGlvV2lkZ2V0ID0gbW9kdWxlLmV4cG9ydHMgPSBTdHVkaW9XaWRnZXQ7XG5cblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgQ29tcG9uZW50VHlwZSA9IGNjLkVudW0oe1xuICAgIE5PTkU6IDAsXG4gICAgQ0hFQ0tCT1g6IDEsXG4gICAgVEVYVF9BVExBUzogMixcbiAgICBTTElERVJfQkFSOiAzLFxuICAgIExJU1RfVklFVzogNCxcbiAgICBQQUdFX1ZJRVc6IDVcbn0pO1xuXG52YXIgTGlzdERpcmVjdGlvbiA9IGNjLkVudW0oe1xuICAgIFZFUlRJQ0FMOiAwLFxuICAgIEhPUklaT05UQUw6IDFcbn0pO1xuXG52YXIgVmVydGljYWxBbGlnbiA9IGNjLkVudW0oe1xuICAgIFRPUDogMCxcbiAgICBDRU5URVI6IDEsXG4gICAgQk9UVE9NOiAyXG59KTtcblxudmFyIEhvcml6b250YWxBbGlnbiA9IGNjLkVudW0oe1xuICAgIExFRlQ6IDAsXG4gICAgQ0VOVEVSOiAxLFxuICAgIFJJR0hUOiAyXG59KTtcblxudmFyIFN0dWRpb0NvbXBvbmVudCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuU3R1ZGlvQ29tcG9uZW50JyxcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBlZGl0b3I6IENDX0VESVRPUiAmJiB7XG4gICAgICAgIGluc3BlY3RvcjogJ3VucGFjazovL2VuZ2luZS1kZXYvZXh0ZW5zaW9ucy9jb2Nvc3R1ZGlvL2VkaXRvci9zdHVkaW8tY29tcG9uZW50LmpzJ1xuICAgIH0sXG5cbiAgICBwcm9wZXJ0aWVzOiBDQ19FRElUT1IgJiYge1xuICAgICAgICBfdHlwZTogQ29tcG9uZW50VHlwZS5OT05FLFxuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3R5cGUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IENvbXBvbmVudFR5cGVcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBwcm9wcyBmb3IgY2hlY2tib3hcbiAgICAgICAgX2NoZWNrTm9ybWFsQmFja0ZyYW1lOiBudWxsLFxuICAgICAgICBjaGVja05vcm1hbEJhY2tGcmFtZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrTm9ybWFsQmFja0ZyYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tOb3JtYWxCYWNrRnJhbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lXG4gICAgICAgIH0sXG5cbiAgICAgICAgX2NoZWNrUHJlc3NlZEJhY2tGcmFtZTogbnVsbCxcbiAgICAgICAgY2hlY2tQcmVzc2VkQmFja0ZyYW1lOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tQcmVzc2VkQmFja0ZyYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tQcmVzc2VkQmFja0ZyYW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZVxuICAgICAgICB9LFxuXG4gICAgICAgIF9jaGVja0Rpc2FibGVCYWNrRnJhbWU6IG51bGwsXG4gICAgICAgIGNoZWNrRGlzYWJsZUJhY2tGcmFtZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrRGlzYWJsZUJhY2tGcmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrRGlzYWJsZUJhY2tGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWVcbiAgICAgICAgfSxcblxuICAgICAgICBfY2hlY2tOb3JtYWxGcmFtZTogbnVsbCxcbiAgICAgICAgY2hlY2tOb3JtYWxGcmFtZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrTm9ybWFsRnJhbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja05vcm1hbEZyYW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZVxuICAgICAgICB9LFxuXG4gICAgICAgIF9jaGVja0Rpc2FibGVGcmFtZTogbnVsbCxcbiAgICAgICAgY2hlY2tEaXNhYmxlRnJhbWU6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGVja0Rpc2FibGVGcmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrRGlzYWJsZUZyYW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBjYy5TcHJpdGVGcmFtZVxuICAgICAgICB9LFxuXG4gICAgICAgIGNoZWNrSW50ZXJhY3RhYmxlOiB7XG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICBpc0NoZWNrZWQ6IHtcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIHByb3BzIGZvciBUZXh0QXRsYXNcbiAgICAgICAgX2F0bGFzRnJhbWU6IG51bGwsXG4gICAgICAgIGF0bGFzRnJhbWU6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hdGxhc0ZyYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXRsYXNGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWVcbiAgICAgICAgfSxcblxuICAgICAgICBmaXJzdENoYXI6IHtcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgZGVmYXVsdDogJy4nXG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hhcldpZHRoOiB7XG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgICAgfSxcblxuICAgICAgICBjaGFySGVpZ2h0OiB7XG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IDBcbiAgICAgICAgfSxcblxuICAgICAgICBzdHJpbmc6IHtcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgZGVmYXVsdDogJydcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBwcm9wcyBmb3IgU2xpZGVyQmFyXG4gICAgICAgIF9zbGlkZXJCYWNrRnJhbWU6IG51bGwsXG4gICAgICAgIHNsaWRlckJhY2tGcmFtZToge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWRlckJhY2tGcmFtZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NsaWRlckJhY2tGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWVcbiAgICAgICAgfSxcblxuICAgICAgICBfc2xpZGVyQmFyRnJhbWU6IG51bGwsXG4gICAgICAgIHNsaWRlckJhckZyYW1lOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2xpZGVyQmFyRnJhbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zbGlkZXJCYXJGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWVcbiAgICAgICAgfSxcblxuICAgICAgICBfc2xpZGVyQnRuTm9ybWFsRnJhbWU6IG51bGwsXG4gICAgICAgIHNsaWRlckJ0bk5vcm1hbEZyYW1lOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2xpZGVyQnRuTm9ybWFsRnJhbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zbGlkZXJCdG5Ob3JtYWxGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWVcbiAgICAgICAgfSxcblxuICAgICAgICBfc2xpZGVyQnRuUHJlc3NlZEZyYW1lOiBudWxsLFxuICAgICAgICBzbGlkZXJCdG5QcmVzc2VkRnJhbWU6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zbGlkZXJCdG5QcmVzc2VkRnJhbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zbGlkZXJCdG5QcmVzc2VkRnJhbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IGNjLlNwcml0ZUZyYW1lXG4gICAgICAgIH0sXG5cbiAgICAgICAgX3NsaWRlckJ0bkRpc2FibGVkRnJhbWU6IG51bGwsXG4gICAgICAgIHNsaWRlckJ0bkRpc2FibGVkRnJhbWU6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zbGlkZXJCdG5EaXNhYmxlZEZyYW1lO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2xpZGVyQnRuRGlzYWJsZWRGcmFtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgdHlwZTogY2MuU3ByaXRlRnJhbWVcbiAgICAgICAgfSxcblxuICAgICAgICBzbGlkZXJJbnRlcmFjdGFibGU6IHtcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgICB9LFxuXG4gICAgICAgIHNsaWRlclByb2dyZXNzOiB7XG4gICAgICAgICAgICBkZWZhdWx0OiAwLjUsXG4gICAgICAgICAgICByZWFkb25seTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6ICdGbG9hdCcsXG4gICAgICAgICAgICByYW5nZTogWzAsIDEsIDAuMV1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyBwcm9wcyBmb3IgTGlzdFZpZXdcbiAgICAgICAgbGlzdEluZXJ0aWE6IHtcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdG9vbHRpcDogQ0NfREVWICYmICdpMThuOkNPTVBPTkVOVC5zY3JvbGx2aWV3LmluZXJ0aWEnXG4gICAgICAgIH0sXG5cbiAgICAgICAgbGlzdERpcmVjdGlvbjoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiBMaXN0RGlyZWN0aW9uLlZFUlRJQ0FMLFxuICAgICAgICAgICAgdHlwZTogTGlzdERpcmVjdGlvblxuICAgICAgICB9LFxuXG4gICAgICAgIGxpc3RIb3Jpem9udGFsQWxpZ246IHtcbiAgICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLFxuICAgICAgICAgICAgZGVmYXVsdDogSG9yaXpvbnRhbEFsaWduLkxFRlQsXG4gICAgICAgICAgICB0eXBlOiBIb3Jpem9udGFsQWxpZ25cbiAgICAgICAgfSxcblxuICAgICAgICBsaXN0VmVydGljYWxBbGlnbjoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiBWZXJ0aWNhbEFsaWduLlRPUCxcbiAgICAgICAgICAgIHR5cGU6IFZlcnRpY2FsQWxpZ25cbiAgICAgICAgfSxcblxuICAgICAgICBsaXN0UGFkZGluZzoge1xuICAgICAgICAgICAgcmVhZG9ubHk6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiAwXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RhdGljczoge1xuICAgICAgICBDb21wb25lbnRUeXBlOiBDb21wb25lbnRUeXBlLFxuICAgICAgICBMaXN0RGlyZWN0aW9uOiBMaXN0RGlyZWN0aW9uLFxuICAgICAgICBWZXJ0aWNhbEFsaWduOiBWZXJ0aWNhbEFsaWduLFxuICAgICAgICBIb3Jpem9udGFsQWxpZ246IEhvcml6b250YWxBbGlnblxuICAgIH1cbn0pO1xuXG52YXIgUHJlZmFiSGVscGVyID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJlZmFiLWhlbHBlcicpO1xuU3R1ZGlvQ29tcG9uZW50LlBsYWNlSG9sZGVyID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5TdHVkaW9Db21wb25lbnQuUGxhY2VIb2xkZXInLFxuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIF9iYXNlVXJsOiAnJyxcbiAgICAgICAgbmVzdGVkUHJlZmFiOiBjYy5QcmVmYWJcbiAgICB9LFxuICAgIG9uTG9hZDogZnVuY3Rpb24gb25Mb2FkKCkge1xuICAgICAgICBpZiAoIXRoaXMubmVzdGVkUHJlZmFiKSB7XG4gICAgICAgICAgICBpZiAoQ0NfREVWKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybignVW5hYmxlIHRvIGZpbmQgJXMgcmVzb3VyY2UuJywgdGhpcy5fYmFzZVVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVwbGFjZVdpdGhOZXN0ZWRQcmVmYWIoKTtcbiAgICB9LFxuICAgIF9yZXBsYWNlV2l0aE5lc3RlZFByZWZhYjogZnVuY3Rpb24gX3JlcGxhY2VXaXRoTmVzdGVkUHJlZmFiKCkge1xuICAgICAgICB2YXIgbm9kZSA9IHRoaXMubm9kZTtcbiAgICAgICAgdmFyIF9wcmVmYWIgPSBub2RlLl9wcmVmYWI7XG4gICAgICAgIF9wcmVmYWIucm9vdCA9IG5vZGU7XG4gICAgICAgIF9wcmVmYWIuYXNzZXQgPSB0aGlzLm5lc3RlZFByZWZhYjtcbiAgICAgICAgUHJlZmFiSGVscGVyLnN5bmNXaXRoUHJlZmFiKG5vZGUpO1xuICAgIH1cbn0pO1xuXG5jYy5TdHVkaW9Db21wb25lbnQgPSBtb2R1bGUuZXhwb3J0cyA9IFN0dWRpb0NvbXBvbmVudDtcblxudmFyIFN0dWRpb1dpZGdldCA9IGNjLkNsYXNzKHtcbiAgICBuYW1lOiAnY2MuU3R1ZGlvV2lkZ2V0JyxcbiAgICBleHRlbmRzOiBjYy5XaWRnZXQsXG4gICAgZWRpdG9yOiBDQ19FRElUT1IgJiYge1xuICAgICAgICBpbnNwZWN0b3I6ICdwYWNrYWdlczovL2luc3BlY3Rvci9pbnNwZWN0b3JzL2NvbXBzL2Njd2lkZ2V0LmpzJ1xuICAgIH0sXG4gICAgX3ZhbGlkYXRlVGFyZ2V0SW5ERVY6IGZ1bmN0aW9uIF92YWxpZGF0ZVRhcmdldEluREVWKCkge31cbn0pO1xuXG5jYy5TdHVkaW9XaWRnZXQgPSBtb2R1bGUuZXhwb3J0cyA9IFN0dWRpb1dpZGdldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRVM1IxWkdsdlEyOXRjRzl1Wlc1MExtcHpJbDBzSW01aGJXVnpJanBiSWtOdmJYQnZibVZ1ZEZSNWNHVWlMQ0pqWXlJc0lrVnVkVzBpTENKT1QwNUZJaXdpUTBoRlEwdENUMWdpTENKVVJWaFVYMEZVVEVGVElpd2lVMHhKUkVWU1gwSkJVaUlzSWt4SlUxUmZWa2xGVnlJc0lsQkJSMFZmVmtsRlZ5SXNJa3hwYzNSRWFYSmxZM1JwYjI0aUxDSldSVkpVU1VOQlRDSXNJa2hQVWtsYVQwNVVRVXdpTENKV1pYSjBhV05oYkVGc2FXZHVJaXdpVkU5UUlpd2lRMFZPVkVWU0lpd2lRazlVVkU5Tklpd2lTRzl5YVhwdmJuUmhiRUZzYVdkdUlpd2lURVZHVkNJc0lsSkpSMGhVSWl3aVUzUjFaR2x2UTI5dGNHOXVaVzUwSWl3aVEyeGhjM01pTENKdVlXMWxJaXdpWlhoMFpXNWtjeUlzSWtOdmJYQnZibVZ1ZENJc0ltVmthWFJ2Y2lJc0lrTkRYMFZFU1ZSUFVpSXNJbWx1YzNCbFkzUnZjaUlzSW5CeWIzQmxjblJwWlhNaUxDSmZkSGx3WlNJc0luUjVjR1VpTENKblpYUWlMQ0p6WlhRaUxDSjJZV3gxWlNJc0luSmxZV1J2Ym14NUlpd2lYMk5vWldOclRtOXliV0ZzUW1GamEwWnlZVzFsSWl3aVkyaGxZMnRPYjNKdFlXeENZV05yUm5KaGJXVWlMQ0pUY0hKcGRHVkdjbUZ0WlNJc0lsOWphR1ZqYTFCeVpYTnpaV1JDWVdOclJuSmhiV1VpTENKamFHVmphMUJ5WlhOelpXUkNZV05yUm5KaGJXVWlMQ0pmWTJobFkydEVhWE5oWW14bFFtRmphMFp5WVcxbElpd2lZMmhsWTJ0RWFYTmhZbXhsUW1GamEwWnlZVzFsSWl3aVgyTm9aV05yVG05eWJXRnNSbkpoYldVaUxDSmphR1ZqYTA1dmNtMWhiRVp5WVcxbElpd2lYMk5vWldOclJHbHpZV0pzWlVaeVlXMWxJaXdpWTJobFkydEVhWE5oWW14bFJuSmhiV1VpTENKamFHVmphMGx1ZEdWeVlXTjBZV0pzWlNJc0ltUmxabUYxYkhRaUxDSnBjME5vWldOclpXUWlMQ0pmWVhSc1lYTkdjbUZ0WlNJc0ltRjBiR0Z6Um5KaGJXVWlMQ0ptYVhKemRFTm9ZWElpTENKamFHRnlWMmxrZEdnaUxDSmphR0Z5U0dWcFoyaDBJaXdpYzNSeWFXNW5JaXdpWDNOc2FXUmxja0poWTJ0R2NtRnRaU0lzSW5Oc2FXUmxja0poWTJ0R2NtRnRaU0lzSWw5emJHbGtaWEpDWVhKR2NtRnRaU0lzSW5Oc2FXUmxja0poY2taeVlXMWxJaXdpWDNOc2FXUmxja0owYms1dmNtMWhiRVp5WVcxbElpd2ljMnhwWkdWeVFuUnVUbTl5YldGc1JuSmhiV1VpTENKZmMyeHBaR1Z5UW5SdVVISmxjM05sWkVaeVlXMWxJaXdpYzJ4cFpHVnlRblJ1VUhKbGMzTmxaRVp5WVcxbElpd2lYM05zYVdSbGNrSjBia1JwYzJGaWJHVmtSbkpoYldVaUxDSnpiR2xrWlhKQ2RHNUVhWE5oWW14bFpFWnlZVzFsSWl3aWMyeHBaR1Z5U1c1MFpYSmhZM1JoWW14bElpd2ljMnhwWkdWeVVISnZaM0psYzNNaUxDSnlZVzVuWlNJc0lteHBjM1JKYm1WeWRHbGhJaXdpWVc1cGJXRjBZV0pzWlNJc0luUnZiMngwYVhBaUxDSkRRMTlFUlZZaUxDSnNhWE4wUkdseVpXTjBhVzl1SWl3aWJHbHpkRWh2Y21sNmIyNTBZV3hCYkdsbmJpSXNJbXhwYzNSV1pYSjBhV05oYkVGc2FXZHVJaXdpYkdsemRGQmhaR1JwYm1jaUxDSnpkR0YwYVdOeklpd2lVSEpsWm1GaVNHVnNjR1Z5SWl3aWNtVnhkV2x5WlNJc0lsQnNZV05sU0c5c1pHVnlJaXdpWDJKaGMyVlZjbXdpTENKdVpYTjBaV1JRY21WbVlXSWlMQ0pRY21WbVlXSWlMQ0p2Ymt4dllXUWlMQ0ozWVhKdUlpd2lYM0psY0d4aFkyVlhhWFJvVG1WemRHVmtVSEpsWm1GaUlpd2libTlrWlNJc0lsOXdjbVZtWVdJaUxDSnliMjkwSWl3aVlYTnpaWFFpTENKemVXNWpWMmwwYUZCeVpXWmhZaUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKVGRIVmthVzlYYVdSblpYUWlMQ0pYYVdSblpYUWlMQ0pmZG1Gc2FXUmhkR1ZVWVhKblpYUkpia1JGVmlKZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFUQkNRU3hKUVVGSlFTeG5Ra0ZCWjBKRExFZEJRVWRETEVsQlFVZ3NRMEZCVVR0QlFVTjRRa01zVlVGQlR5eERRVVJwUWp0QlFVVjRRa01zWTBGQlZ5eERRVVpoTzBGQlIzaENReXhuUWtGQllTeERRVWhYTzBGQlNYaENReXhuUWtGQllTeERRVXBYTzBGQlMzaENReXhsUVVGWkxFTkJURms3UVVGTmVFSkRMR1ZCUVZrN1FVRk9XU3hEUVVGU0xFTkJRWEJDT3p0QlFWTkJMRWxCUVVsRExHZENRVUZuUWxJc1IwRkJSME1zU1VGQlNDeERRVUZSTzBGQlEzaENVU3hqUVVGWExFTkJSR0U3UVVGRmVFSkRMR2RDUVVGWk8wRkJSbGtzUTBGQlVpeERRVUZ3UWpzN1FVRkxRU3hKUVVGSlF5eG5Ra0ZCWjBKWUxFZEJRVWRETEVsQlFVZ3NRMEZCVVR0QlFVTjRRbGNzVTBGQlRTeERRVVJyUWp0QlFVVjRRa01zV1VGQlVTeERRVVpuUWp0QlFVZDRRa01zV1VGQlVUdEJRVWhuUWl4RFFVRlNMRU5CUVhCQ096dEJRVTFCTEVsQlFVbERMR3RDUVVGclFtWXNSMEZCUjBNc1NVRkJTQ3hEUVVGUk8wRkJRekZDWlN4VlFVRlBMRU5CUkcxQ08wRkJSVEZDU0N4WlFVRlJMRU5CUm10Q08wRkJSekZDU1N4WFFVRlBPMEZCU0cxQ0xFTkJRVklzUTBGQmRFSTdPMEZCVFVFc1NVRkJTVU1zYTBKQlFXdENiRUlzUjBGQlIyMUNMRXRCUVVnc1EwRkJVenRCUVVNelFrTXNWVUZCVFN4dlFrRkVjVUk3UVVGRk0wSkRMR0ZCUVZOeVFpeEhRVUZIYzBJc1UwRkdaVHM3UVVGSk0wSkRMRmxCUVZGRExHRkJRV0U3UVVGRGFrSkRMRzFDUVVGWE8wRkJSRTBzUzBGS1RUczdRVUZSTTBKRExHZENRVUZaUml4aFFVRmhPMEZCUTNKQ1J5eGxRVUZSTlVJc1kwRkJZMGNzU1VGRVJEdEJRVVZ5UWpCQ0xHTkJRVTg3UVVGRFNFTXNhVUpCUVVzc1pVRkJXVHRCUVVOaUxIVkNRVUZQTEV0QlFVdEdMRXRCUVZvN1FVRkRTQ3hoUVVoRk8wRkJTVWhITEdsQ1FVRkxMR0ZCUVZWRExFdEJRVllzUlVGQmFVSTdRVUZEYkVJc2NVSkJRVXRLTEV0QlFVd3NSMEZCWVVrc1MwRkJZanRCUVVOSUxHRkJUa1U3UVVGUFNFTXNjMEpCUVZVc1NVRlFVRHRCUVZGSVNpeHJRa0ZCVFRkQ08wRkJVa2dzVTBGR1l6czdRVUZoY2tJN1FVRkRRV3RETEN0Q1FVRjFRaXhKUVdSR08wRkJaWEpDUXl3NFFrRkJjMEk3UVVGRGJFSk1MR2xDUVVGTExHVkJRVms3UVVGRFlpeDFRa0ZCVHl4TFFVRkxTU3h4UWtGQldqdEJRVU5JTEdGQlNHbENPMEZCU1d4Q1NDeHBRa0ZCU3l4aFFVRlZReXhMUVVGV0xFVkJRV2xDTzBGQlEyeENMSEZDUVVGTFJTeHhRa0ZCVEN4SFFVRTJRa1lzUzBGQk4wSTdRVUZEU0N4aFFVNXBRanRCUVU5c1FrTXNjMEpCUVZVc1NVRlFVVHRCUVZGc1Frb3NhMEpCUVUwMVFpeEhRVUZIYlVNN1FVRlNVeXhUUVdaRU96dEJRVEJDY2tKRExHZERRVUYzUWl4SlFURkNTRHRCUVRKQ2NrSkRMQ3RDUVVGMVFqdEJRVU51UWxJc2FVSkJRVXNzWlVGQldUdEJRVU5pTEhWQ1FVRlBMRXRCUVV0UExITkNRVUZhTzBGQlEwZ3NZVUZJYTBJN1FVRkpia0pPTEdsQ1FVRkxMR0ZCUVZWRExFdEJRVllzUlVGQmFVSTdRVUZEYkVJc2NVSkJRVXRMTEhOQ1FVRk1MRWRCUVRoQ1RDeExRVUU1UWp0QlFVTklMR0ZCVG10Q08wRkJUMjVDUXl4elFrRkJWU3hKUVZCVE8wRkJVVzVDU2l4clFrRkJUVFZDTEVkQlFVZHRRenRCUVZKVkxGTkJNMEpHT3p0QlFYTkRja0pITEdkRFFVRjNRaXhKUVhSRFNEdEJRWFZEY2tKRExDdENRVUYxUWp0QlFVTnVRbFlzYVVKQlFVc3NaVUZCV1R0QlFVTmlMSFZDUVVGUExFdEJRVXRUTEhOQ1FVRmFPMEZCUTBnc1lVRklhMEk3UVVGSmJrSlNMR2xDUVVGTExHRkJRVlZETEV0QlFWWXNSVUZCYVVJN1FVRkRiRUlzY1VKQlFVdFBMSE5DUVVGTUxFZEJRVGhDVUN4TFFVRTVRanRCUVVOSUxHRkJUbXRDTzBGQlQyNUNReXh6UWtGQlZTeEpRVkJUTzBGQlVXNUNTaXhyUWtGQlRUVkNMRWRCUVVkdFF6dEJRVkpWTEZOQmRrTkdPenRCUVd0RWNrSkxMREpDUVVGdFFpeEpRV3hFUlR0QlFXMUVja0pETERCQ1FVRnJRanRCUVVOa1dpeHBRa0ZCU3l4bFFVRlpPMEZCUTJJc2RVSkJRVThzUzBGQlMxY3NhVUpCUVZvN1FVRkRTQ3hoUVVoaE8wRkJTV1JXTEdsQ1FVRkxMR0ZCUVZWRExFdEJRVllzUlVGQmFVSTdRVUZEYkVJc2NVSkJRVXRUTEdsQ1FVRk1MRWRCUVhsQ1ZDeExRVUY2UWp0QlFVTklMR0ZCVG1FN1FVRlBaRU1zYzBKQlFWVXNTVUZRU1R0QlFWRmtTaXhyUWtGQlRUVkNMRWRCUVVkdFF6dEJRVkpMTEZOQmJrUkhPenRCUVRoRWNrSlBMRFJDUVVGdlFpeEpRVGxFUXp0QlFTdEVja0pETERKQ1FVRnRRanRCUVVObVpDeHBRa0ZCU3l4bFFVRlpPMEZCUTJJc2RVSkJRVThzUzBGQlMyRXNhMEpCUVZvN1FVRkRTQ3hoUVVoak8wRkJTV1phTEdsQ1FVRkxMR0ZCUVZWRExFdEJRVllzUlVGQmFVSTdRVUZEYkVJc2NVSkJRVXRYTEd0Q1FVRk1MRWRCUVRCQ1dDeExRVUV4UWp0QlFVTklMR0ZCVG1NN1FVRlBaa01zYzBKQlFWVXNTVUZRU3p0QlFWRm1TaXhyUWtGQlRUVkNMRWRCUVVkdFF6dEJRVkpOTEZOQkwwUkZPenRCUVRCRmNrSlRMREpDUVVGdlFqdEJRVU5vUWxvc2MwSkJRVlVzU1VGRVRUdEJRVVZvUW1Fc2NVSkJRVk03UVVGR1R5eFRRVEZGUXpzN1FVRXJSWEpDUXl4dFFrRkJXVHRCUVVOU1pDeHpRa0ZCVlN4SlFVUkdPMEZCUlZKaExIRkNRVUZUTzBGQlJrUXNVMEV2UlZNN08wRkJiMFp5UWp0QlFVTkJSU3h4UWtGQllTeEpRWEpHVVR0QlFYTkdja0pETEc5Q1FVRlpPMEZCUTFKdVFpeHBRa0ZCU3l4bFFVRlpPMEZCUTJJc2RVSkJRVThzUzBGQlMydENMRmRCUVZvN1FVRkRTQ3hoUVVoUE8wRkJTVkpxUWl4cFFrRkJTeXhoUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUTJ4Q0xIRkNRVUZMWjBJc1YwRkJUQ3hIUVVGdFFtaENMRXRCUVc1Q08wRkJRMGdzWVVGT1R6dEJRVTlTUXl4elFrRkJWU3hKUVZCR08wRkJVVkpLTEd0Q1FVRk5OVUlzUjBGQlIyMURPMEZCVWtRc1UwRjBSbE03TzBGQmFVZHlRbU1zYlVKQlFWYzdRVUZEVUdwQ0xITkNRVUZWTEVsQlJFZzdRVUZGVUdFc2NVSkJRVk03UVVGR1JpeFRRV3BIVlRzN1FVRnpSM0pDU3l4dFFrRkJWenRCUVVOUWJFSXNjMEpCUVZVc1NVRkVTRHRCUVVWUVlTeHhRa0ZCVXp0QlFVWkdMRk5CZEVkVk96dEJRVEpIY2tKTkxHOUNRVUZaTzBGQlExSnVRaXh6UWtGQlZTeEpRVVJHTzBGQlJWSmhMSEZDUVVGVE8wRkJSa1FzVTBFelIxTTdPMEZCWjBoeVFrOHNaMEpCUVZFN1FVRkRTbkJDTEhOQ1FVRlZMRWxCUkU0N1FVRkZTbUVzY1VKQlFWTTdRVUZHVEN4VFFXaElZVHM3UVVGeFNISkNPMEZCUTBGUkxEQkNRVUZyUWl4SlFYUklSenRCUVhWSWNrSkRMSGxDUVVGclFqdEJRVU5rZWtJc2FVSkJRVXNzWlVGQldUdEJRVU5pTEhWQ1FVRlBMRXRCUVV0M1FpeG5Ra0ZCV2p0QlFVTklMR0ZCU0dFN1FVRkpaSFpDTEdsQ1FVRkxMR0ZCUVZWRExFdEJRVllzUlVGQmFVSTdRVUZEYkVJc2NVSkJRVXR6UWl4blFrRkJUQ3hIUVVGM1FuUkNMRXRCUVhoQ08wRkJRMGdzWVVGT1lUdEJRVTlrUXl4elFrRkJWU3hKUVZCSk8wRkJVV1JLTEd0Q1FVRk5OVUlzUjBGQlIyMURPMEZCVWtzc1UwRjJTRWM3TzBGQmEwbHlRbTlDTEhsQ1FVRnBRaXhKUVd4SlNUdEJRVzFKY2tKRExIZENRVUZwUWp0QlFVTmlNMElzYVVKQlFVc3NaVUZCV1R0QlFVTmlMSFZDUVVGUExFdEJRVXN3UWl4bFFVRmFPMEZCUTBnc1lVRklXVHRCUVVsaWVrSXNhVUpCUVVzc1lVRkJWVU1zUzBGQlZpeEZRVUZwUWp0QlFVTnNRaXh4UWtGQlMzZENMR1ZCUVV3c1IwRkJkVUo0UWl4TFFVRjJRanRCUVVOSUxHRkJUbGs3UVVGUFlrTXNjMEpCUVZVc1NVRlFSenRCUVZGaVNpeHJRa0ZCVFRWQ0xFZEJRVWR0UXp0QlFWSkpMRk5CYmtsSk96dEJRVGhKY2tKelFpd3JRa0ZCZFVJc1NVRTVTVVk3UVVFclNYSkNReXc0UWtGQmRVSTdRVUZEYmtJM1FpeHBRa0ZCU3l4bFFVRlpPMEZCUTJJc2RVSkJRVThzUzBGQlN6UkNMSEZDUVVGYU8wRkJRMGdzWVVGSWEwSTdRVUZKYmtJelFpeHBRa0ZCU3l4aFFVRlZReXhMUVVGV0xFVkJRV2xDTzBGQlEyeENMSEZDUVVGTE1FSXNjVUpCUVV3c1IwRkJOa0l4UWl4TFFVRTNRanRCUVVOSUxHRkJUbXRDTzBGQlQyNUNReXh6UWtGQlZTeEpRVkJUTzBGQlVXNUNTaXhyUWtGQlRUVkNMRWRCUVVkdFF6dEJRVkpWTEZOQkwwbEdPenRCUVRCS2NrSjNRaXhuUTBGQmQwSXNTVUV4U2tnN1FVRXlTbkpDUXl3clFrRkJkMEk3UVVGRGNFSXZRaXhwUWtGQlN5eGxRVUZaTzBGQlEySXNkVUpCUVU4c1MwRkJTemhDTEhOQ1FVRmFPMEZCUTBnc1lVRkliVUk3UVVGSmNFSTNRaXhwUWtGQlN5eGhRVUZWUXl4TFFVRldMRVZCUVdsQ08wRkJRMnhDTEhGQ1FVRkxORUlzYzBKQlFVd3NSMEZCT0VJMVFpeExRVUU1UWp0QlFVTklMR0ZCVG0xQ08wRkJUM0JDUXl4elFrRkJWU3hKUVZCVk8wRkJVWEJDU2l4clFrRkJUVFZDTEVkQlFVZHRRenRCUVZKWExGTkJNMHBJT3p0QlFYTkxja0l3UWl4cFEwRkJlVUlzU1VGMFMwbzdRVUYxUzNKQ1F5eG5RMEZCZVVJN1FVRkRja0pxUXl4cFFrRkJTeXhsUVVGWk8wRkJRMklzZFVKQlFVOHNTMEZCUzJkRExIVkNRVUZhTzBGQlEwZ3NZVUZJYjBJN1FVRkpja0l2UWl4cFFrRkJTeXhoUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUTJ4Q0xIRkNRVUZMT0VJc2RVSkJRVXdzUjBGQkswSTVRaXhMUVVFdlFqdEJRVU5JTEdGQlRtOUNPMEZCVDNKQ1F5eHpRa0ZCVlN4SlFWQlhPMEZCVVhKQ1NpeHJRa0ZCVFRWQ0xFZEJRVWR0UXp0QlFWSlpMRk5CZGt0S096dEJRV3RNY2tJMFFpdzBRa0ZCY1VJN1FVRkRha0l2UWl4elFrRkJWU3hKUVVSUE8wRkJSV3BDWVN4eFFrRkJVenRCUVVaUkxGTkJiRXhCT3p0QlFYVk1ja0p0UWl4M1FrRkJaMEk3UVVGRFdtNUNMSEZDUVVGVExFZEJSRWM3UVVGRldtSXNjMEpCUVZVc1NVRkdSVHRCUVVkYVNpeHJRa0ZCVFN4UFFVaE5PMEZCU1ZweFF5eHRRa0ZCVHl4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFVkJRVThzUjBGQlVEdEJRVXBMTEZOQmRreExPenRCUVRoTWNrSTdRVUZEUVVNc2NVSkJRV003UVVGRFZteERMSE5DUVVGVkxFbEJSRUU3UVVGRlZtRXNjVUpCUVZNc1NVRkdRenRCUVVkV2MwSXNkMEpCUVZrc1MwRklSanRCUVVsV1F5eHhRa0ZCVTBNc1ZVRkJWVHRCUVVwVUxGTkJMMHhQT3p0QlFYTk5ja0pETEhWQ1FVRmxPMEZCUTFoMFF5eHpRa0ZCVlN4SlFVUkRPMEZCUlZoaExIRkNRVUZUY2tNc1kwRkJZME1zVVVGR1dqdEJRVWRZYlVJc2EwSkJRVTF3UWp0QlFVaExMRk5CZEUxTk96dEJRVFJOY2tJclJDdzJRa0ZCY1VJN1FVRkRha0oyUXl4elFrRkJWU3hKUVVSUE8wRkJSV3BDWVN4eFFrRkJVemxDTEdkQ1FVRm5Ra01zU1VGR1VqdEJRVWRxUWxrc2EwSkJRVTFpTzBGQlNGY3NVMEUxVFVFN08wRkJhMDV5UW5sRUxESkNRVUZ0UWp0QlFVTm1lRU1zYzBKQlFWVXNTVUZFU3p0QlFVVm1ZU3h4UWtGQlUyeERMR05CUVdORExFZEJSbEk3UVVGSFptZENMR3RDUVVGTmFrSTdRVUZJVXl4VFFXeE9SVHM3UVVGM1RuSkNPRVFzY1VKQlFXRTdRVUZEVkhwRExITkNRVUZWTEVsQlJFUTdRVUZGVkdFc2NVSkJRVk03UVVGR1FUdEJRWGhPVVN4TFFWSkZPenRCUVhOUE0wSTJRaXhoUVVGVk8wRkJRMDR6UlN4MVFrRkJaMEpCTEdGQlJGWTdRVUZGVGxNc2RVSkJRV2RDUVN4aFFVWldPMEZCUjA1SExIVkNRVUZuUWtFc1lVRklWanRCUVVsT1NTeDVRa0ZCYTBKQk8wRkJTbG83UVVGMFQybENMRU5CUVZRc1EwRkJkRUk3TzBGQk9FOUJMRWxCUVVrMFJDeGxRVUZsUXl4UlFVRlJMSGRDUVVGU0xFTkJRVzVDTzBGQlEwRXhSQ3huUWtGQlowSXlSQ3hYUVVGb1FpeEhRVUU0UWpkRkxFZEJRVWR0UWl4TFFVRklMRU5CUVZNN1FVRkRia05ETEZWQlFVMHNaME5CUkRaQ08wRkJSVzVEUXl4aFFVRlRja0lzUjBGQlIzTkNMRk5CUm5WQ08wRkJSMjVEU1N4blFrRkJXVHRCUVVOU2IwUXNhMEpCUVZVc1JVRkVSanRCUVVWU1F5eHpRa0ZCWXk5RkxFZEJRVWRuUmp0QlFVWlVMRXRCU0hWQ08wRkJUMjVEUXl4WlFVRlJMR3RDUVVGWk8wRkJRMmhDTEZsQlFVa3NRMEZCUXl4TFFVRkxSaXhaUVVGV0xFVkJRWGRDTzBGQlEzQkNMR2RDUVVGSlZpeE5RVUZLTEVWQlFWazdRVUZEVW5KRkxHMUNRVUZIYTBZc1NVRkJTQ3hEUVVGUkxEWkNRVUZTTEVWQlFYVkRMRXRCUVV0S0xGRkJRVFZETzBGQlEwZzdRVUZEUkR0QlFVTklPMEZCUTBRc1lVRkJTMHNzZDBKQlFVdzdRVUZEU0N4TFFXWnJRenRCUVdkQ2JrTkJMRGhDUVVFd1FpeHZRMEZCV1R0QlFVTnNReXhaUVVGSlF5eFBRVUZQTEV0QlFVdEJMRWxCUVdoQ08wRkJRMEVzV1VGQlNVTXNWVUZCVlVRc1MwRkJTME1zVDBGQmJrSTdRVUZEUVVFc1owSkJRVkZETEVsQlFWSXNSMEZCWlVZc1NVRkJaanRCUVVOQlF5eG5Ra0ZCVVVVc1MwRkJVaXhIUVVGblFpeExRVUZMVWl4WlFVRnlRanRCUVVOQlNpeHhRa0ZCWVdFc1kwRkJZaXhEUVVFMFFrb3NTVUZCTlVJN1FVRkRTRHRCUVhSQ2EwTXNRMEZCVkN4RFFVRTVRanM3UVVGNVFrRndSaXhIUVVGSGEwSXNaVUZCU0N4SFFVRnhRblZGTEU5QlFVOURMRTlCUVZBc1IwRkJhVUo0UlN4bFFVRjBRenM3UVVGSFFTeEpRVUZKZVVVc1pVRkJaVE5HTEVkQlFVZHRRaXhMUVVGSUxFTkJRVk03UVVGRGVFSkRMRlZCUVUwc2FVSkJSR3RDTzBGQlJYaENReXhoUVVGVGNrSXNSMEZCUnpSR0xFMUJSbGs3UVVGSGVFSnlSU3haUVVGUlF5eGhRVUZoTzBGQlEycENReXh0UWtGQlZ6dEJRVVJOTEV0QlNFYzdRVUZOZUVKdlJTeDNRa0ZPZDBJc2EwTkJUVUVzUTBGQlJUdEJRVTVHTEVOQlFWUXNRMEZCYmtJN08wRkJVMEUzUml4SFFVRkhNa1lzV1VGQlNDeEhRVUZyUWtZc1QwRkJUME1zVDBGQlVDeEhRVUZwUWtNc1dVRkJia01pTENKbWFXeGxJam9pUTBOVGRIVmthVzlEYjIxd2IyNWxiblF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE55MHlNREU0SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xseHVYRzRnYUhSMGNITTZMeTkzZDNjdVkyOWpiM011WTI5dEwxeHVYRzRnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0VnWTI5d2VWeHVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pXNW5hVzVsSUhOdmRYSmpaU0JqYjJSbElDaDBhR1VnWENKVGIyWjBkMkZ5WlZ3aUtTd2dZU0JzYVcxcGRHVmtMRnh1SUhkdmNteGtkMmxrWlN3Z2NtOTVZV3gwZVMxbWNtVmxMQ0J1YjI0dFlYTnphV2R1WVdKc1pTd2djbVYyYjJOaFlteGxJR0Z1WkNCdWIyNHRaWGhqYkhWemFYWmxJR3hwWTJWdWMyVmNiaUIwYnlCMWMyVWdRMjlqYjNNZ1EzSmxZWFJ2Y2lCemIyeGxiSGtnZEc4Z1pHVjJaV3h2Y0NCbllXMWxjeUJ2YmlCNWIzVnlJSFJoY21kbGRDQndiR0YwWm05eWJYTXVJRmx2ZFNCemFHRnNiRnh1SUc1dmRDQjFjMlVnUTI5amIzTWdRM0psWVhSdmNpQnpiMlowZDJGeVpTQm1iM0lnWkdWMlpXeHZjR2x1WnlCdmRHaGxjaUJ6YjJaMGQyRnlaU0J2Y2lCMGIyOXNjeUIwYUdGMEozTmNiaUIxYzJWa0lHWnZjaUJrWlhabGJHOXdhVzVuSUdkaGJXVnpMaUJaYjNVZ1lYSmxJRzV2ZENCbmNtRnVkR1ZrSUhSdklIQjFZbXhwYzJnc0lHUnBjM1J5YVdKMWRHVXNYRzRnYzNWaWJHbGpaVzV6WlN3Z1lXNWtMMjl5SUhObGJHd2dZMjl3YVdWeklHOW1JRU52WTI5eklFTnlaV0YwYjNJdVhHNWNiaUJVYUdVZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2FXNGdkR2hwY3lCTWFXTmxibk5sSUVGbmNtVmxiV1Z1ZENCaGNtVWdiR2xqWlc1elpXUXNJRzV2ZENCemIyeGtMbHh1SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xpQnlaWE5sY25abGN5QmhiR3dnY21sbmFIUnpJRzV2ZENCbGVIQnlaWE56YkhrZ1ozSmhiblJsWkNCMGJ5QjViM1V1WEc1Y2JpQlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRJRTlTWEc0Z1NVMVFURWxGUkN3Z1NVNURURlZFU1U1SElFSlZWQ0JPVDFRZ1RFbE5TVlJGUkNCVVR5QlVTRVVnVjBGU1VrRk9WRWxGVXlCUFJpQk5SVkpEU0VGT1ZFRkNTVXhKVkZrc1hHNGdSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTRnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGWEc0Z1FWVlVTRTlTVXlCUFVpQkRUMUJaVWtsSFNGUWdTRTlNUkVWU1V5QkNSU0JNU1VGQ1RFVWdSazlTSUVGT1dTQkRURUZKVFN3Z1JFRk5RVWRGVXlCUFVpQlBWRWhGVWx4dUlFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFJZ1QxUklSVkpYU1ZORkxDQkJVa2xUU1U1SElFWlNUMDBzWEc0Z1QxVlVJRTlHSUU5U0lFbE9JRU5QVGs1RlExUkpUMDRnVjBsVVNDQlVTRVVnVTA5R1ZGZEJVa1VnVDFJZ1ZFaEZJRlZUUlNCUFVpQlBWRWhGVWlCRVJVRk1TVTVIVXlCSlRseHVJRlJJUlNCVFQwWlVWMEZTUlM1Y2JpQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dVhHNWNiblpoY2lCRGIyMXdiMjVsYm5SVWVYQmxJRDBnWTJNdVJXNTFiU2g3WEc0Z0lDQWdUazlPUlNBNklEQXNYRzRnSUNBZ1EwaEZRMHRDVDFnZ09pQXhMRnh1SUNBZ0lGUkZXRlJmUVZSTVFWTWdPaUF5TEZ4dUlDQWdJRk5NU1VSRlVsOUNRVklnT2lBekxGeHVJQ0FnSUV4SlUxUmZWa2xGVnlBNklEUXNYRzRnSUNBZ1VFRkhSVjlXU1VWWElEb2dOVnh1ZlNrN1hHNWNiblpoY2lCTWFYTjBSR2x5WldOMGFXOXVJRDBnWTJNdVJXNTFiU2g3WEc0Z0lDQWdWa1ZTVkVsRFFVd2dPaUF3TEZ4dUlDQWdJRWhQVWtsYVQwNVVRVXc2SURGY2JuMHBPMXh1WEc1MllYSWdWbVZ5ZEdsallXeEJiR2xuYmlBOUlHTmpMa1Z1ZFcwb2UxeHVJQ0FnSUZSUFVDQTZJREFzWEc0Z0lDQWdRMFZPVkVWU09pQXhMRnh1SUNBZ0lFSlBWRlJQVFRvZ01seHVmU2s3WEc1Y2JuWmhjaUJJYjNKcGVtOXVkR0ZzUVd4cFoyNGdQU0JqWXk1RmJuVnRLSHRjYmlBZ0lDQk1SVVpVSURvZ01DeGNiaUFnSUNCRFJVNVVSVkk2SURFc1hHNGdJQ0FnVWtsSFNGUTZJREpjYm4wcE8xeHVYRzUyWVhJZ1UzUjFaR2x2UTI5dGNHOXVaVzUwSUQwZ1kyTXVRMnhoYzNNb2UxeHVJQ0FnSUc1aGJXVTZJQ2RqWXk1VGRIVmthVzlEYjIxd2IyNWxiblFuTEZ4dUlDQWdJR1Y0ZEdWdVpITTZJR05qTGtOdmJYQnZibVZ1ZEN4Y2JseHVJQ0FnSUdWa2FYUnZjam9nUTBOZlJVUkpWRTlTSUNZbUlIdGNiaUFnSUNBZ0lDQWdhVzV6Y0dWamRHOXlPaUFuZFc1d1lXTnJPaTh2Wlc1bmFXNWxMV1JsZGk5bGVIUmxibk5wYjI1ekwyTnZZMjl6ZEhWa2FXOHZaV1JwZEc5eUwzTjBkV1JwYnkxamIyMXdiMjVsYm5RdWFuTW5YRzRnSUNBZ2ZTeGNibHh1SUNBZ0lIQnliM0JsY25ScFpYTTZJRU5EWDBWRVNWUlBVaUFtSmlCN1hHNGdJQ0FnSUNBZ0lGOTBlWEJsSURvZ1EyOXRjRzl1Wlc1MFZIbHdaUzVPVDA1RkxGeHVJQ0FnSUNBZ0lDQjBlWEJsSURvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzUjVjR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTBlWEJsSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVmhaRzl1YkhrNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCRGIyMXdiMjVsYm5SVWVYQmxYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ0x5OGdjSEp2Y0hNZ1ptOXlJR05vWldOclltOTRYRzRnSUNBZ0lDQWdJRjlqYUdWamEwNXZjbTFoYkVKaFkydEdjbUZ0WlRvZ2JuVnNiQ3hjYmlBZ0lDQWdJQ0FnWTJobFkydE9iM0p0WVd4Q1lXTnJSbkpoYldVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWphR1ZqYTA1dmNtMWhiRUpoWTJ0R2NtRnRaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYUTZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTm9aV05yVG05eWJXRnNRbUZqYTBaeVlXMWxJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WaFpHOXViSGs2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUJqWXk1VGNISnBkR1ZHY21GdFpWeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUY5amFHVmphMUJ5WlhOelpXUkNZV05yUm5KaGJXVTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lHTm9aV05yVUhKbGMzTmxaRUpoWTJ0R2NtRnRaVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJOb1pXTnJVSEpsYzNObFpFSmhZMnRHY21GdFpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJOb1pXTnJVSEpsYzNObFpFSmhZMnRHY21GdFpTQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsWVdSdmJteDVPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dZMk11VTNCeWFYUmxSbkpoYldWY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0JmWTJobFkydEVhWE5oWW14bFFtRmphMFp5WVcxbE9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNCamFHVmphMFJwYzJGaWJHVkNZV05yUm5KaGJXVTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlqYUdWamEwUnBjMkZpYkdWQ1lXTnJSbkpoYldVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlqYUdWamEwUnBjMkZpYkdWQ1lXTnJSbkpoYldVZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV0ZrYjI1c2VUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklHTmpMbE53Y21sMFpVWnlZVzFsWEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdYMk5vWldOclRtOXliV0ZzUm5KaGJXVTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lHTm9aV05yVG05eWJXRnNSbkpoYldVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWphR1ZqYTA1dmNtMWhiRVp5WVcxbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZERvZ1puVnVZM1JwYjI0Z0tIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTJobFkydE9iM0p0WVd4R2NtRnRaU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFlXUnZibXg1T2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nWTJNdVUzQnlhWFJsUm5KaGJXVmNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNCZlkyaGxZMnRFYVhOaFlteGxSbkpoYldVNklHNTFiR3dzWEc0Z0lDQWdJQ0FnSUdOb1pXTnJSR2x6WVdKc1pVWnlZVzFsT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlkyaGxZMnRFYVhOaFlteGxSbkpoYldVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlqYUdWamEwUnBjMkZpYkdWR2NtRnRaU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFlXUnZibXg1T2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nWTJNdVUzQnlhWFJsUm5KaGJXVmNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNCamFHVmphMGx1ZEdWeVlXTjBZV0pzWlNBNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFlXUnZibXg1T2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ2RISjFaVnh1SUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lHbHpRMmhsWTJ0bFpDQTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxZV1J2Ym14NU9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb2dkSEoxWlZ4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJQzh2SUhCeWIzQnpJR1p2Y2lCVVpYaDBRWFJzWVhOY2JpQWdJQ0FnSUNBZ1gyRjBiR0Z6Um5KaGJXVTZJRzUxYkd3c1hHNGdJQ0FnSUNBZ0lHRjBiR0Z6Um5KaGJXVTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDloZEd4aGMwWnlZVzFsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkRG9nWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZWFJzWVhOR2NtRnRaU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFlXUnZibXg1T2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nWTJNdVUzQnlhWFJsUm5KaGJXVmNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNCbWFYSnpkRU5vWVhJNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFlXUnZibXg1T2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ0p5NG5YRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ1kyaGhjbGRwWkhSb09pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXRmtiMjVzZVRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNklEQmNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNCamFHRnlTR1ZwWjJoME9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXRmtiMjVzZVRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNklEQmNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNCemRISnBibWM2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsWVdSdmJteDVPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nSnlkY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0F2THlCd2NtOXdjeUJtYjNJZ1UyeHBaR1Z5UW1GeVhHNGdJQ0FnSUNBZ0lGOXpiR2xrWlhKQ1lXTnJSbkpoYldVNklHNTFiR3dzWEc0Z0lDQWdJQ0FnSUhOc2FXUmxja0poWTJ0R2NtRnRaU0E2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RsZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5emJHbGtaWEpDWVdOclJuSmhiV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpiR2xrWlhKQ1lXTnJSbkpoYldVZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV0ZrYjI1c2VUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklHTmpMbE53Y21sMFpVWnlZVzFsWEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdYM05zYVdSbGNrSmhja1p5WVcxbE9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNCemJHbGtaWEpDWVhKR2NtRnRaU0E2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RsZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5emJHbGtaWEpDWVhKR2NtRnRaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYUTZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTnNhV1JsY2tKaGNrWnlZVzFsSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVmhaRzl1YkhrNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCall5NVRjSEpwZEdWR2NtRnRaVnh1SUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lGOXpiR2xrWlhKQ2RHNU9iM0p0WVd4R2NtRnRaVG9nYm5Wc2JDeGNiaUFnSUNBZ0lDQWdjMnhwWkdWeVFuUnVUbTl5YldGc1JuSmhiV1VnT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmMyeHBaR1Z5UW5SdVRtOXliV0ZzUm5KaGJXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWME9pQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emJHbGtaWEpDZEc1T2IzSnRZV3hHY21GdFpTQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsWVdSdmJteDVPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dZMk11VTNCeWFYUmxSbkpoYldWY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0JmYzJ4cFpHVnlRblJ1VUhKbGMzTmxaRVp5WVcxbE9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNCemJHbGtaWEpDZEc1UWNtVnpjMlZrUm5KaGJXVWdPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzJ4cFpHVnlRblJ1VUhKbGMzTmxaRVp5WVcxbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZERvZ1puVnVZM1JwYjI0Z0tIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzJ4cFpHVnlRblJ1VUhKbGMzTmxaRVp5WVcxbElEMGdkbUZzZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZoWkc5dWJIazZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQmpZeTVUY0hKcGRHVkdjbUZ0WlZ4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJRjl6Ykdsa1pYSkNkRzVFYVhOaFlteGxaRVp5WVcxbE9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNCemJHbGtaWEpDZEc1RWFYTmhZbXhsWkVaeVlXMWxJRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNOc2FXUmxja0owYmtScGMyRmliR1ZrUm5KaGJXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWME9pQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emJHbGtaWEpDZEc1RWFYTmhZbXhsWkVaeVlXMWxJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WaFpHOXViSGs2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUJqWXk1VGNISnBkR1ZHY21GdFpWeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUhOc2FXUmxja2x1ZEdWeVlXTjBZV0pzWlNBNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFlXUnZibXg1T2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ2RISjFaVnh1SUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lITnNhV1JsY2xCeWIyZHlaWE56T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUF3TGpVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldGa2IyNXNlVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2RHYkc5aGRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCeVlXNW5aVG9nV3pBc0lERXNJREF1TVYxY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0F2THlCd2NtOXdjeUJtYjNJZ1RHbHpkRlpwWlhkY2JpQWdJQ0FnSUNBZ2JHbHpkRWx1WlhKMGFXRTZJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV0ZrYjI1c2VUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoYm1sdFlYUmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZiMngwYVhBNklFTkRYMFJGVmlBbUppQW5hVEU0YmpwRFQwMVFUMDVGVGxRdWMyTnliMnhzZG1sbGR5NXBibVZ5ZEdsaEp5eGNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNCc2FYTjBSR2x5WldOMGFXOXVPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV0ZrYjI1c2VUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJRXhwYzNSRWFYSmxZM1JwYjI0dVZrVlNWRWxEUVV3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQk1hWE4wUkdseVpXTjBhVzl1WEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdiR2x6ZEVodmNtbDZiMjUwWVd4QmJHbG5iam9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZoWkc5dWJIazZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUJJYjNKcGVtOXVkR0ZzUVd4cFoyNHVURVZHVkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklFaHZjbWw2YjI1MFlXeEJiR2xuYmx4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJR3hwYzNSV1pYSjBhV05oYkVGc2FXZHVPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV0ZrYjI1c2VUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJRlpsY25ScFkyRnNRV3hwWjI0dVZFOVFMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nVm1WeWRHbGpZV3hCYkdsbmJseHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUd4cGMzUlFZV1JrYVc1bk9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXRmtiMjVzZVRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNklEQmNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnpkR0YwYVdOeklEb2dlMXh1SUNBZ0lDQWdJQ0JEYjIxd2IyNWxiblJVZVhCbElEb2dRMjl0Y0c5dVpXNTBWSGx3WlN4Y2JpQWdJQ0FnSUNBZ1RHbHpkRVJwY21WamRHbHZiaUE2SUV4cGMzUkVhWEpsWTNScGIyNHNYRzRnSUNBZ0lDQWdJRlpsY25ScFkyRnNRV3hwWjI0Z09pQldaWEowYVdOaGJFRnNhV2R1TEZ4dUlDQWdJQ0FnSUNCSWIzSnBlbTl1ZEdGc1FXeHBaMjRnT2lCSWIzSnBlbTl1ZEdGc1FXeHBaMjVjYmlBZ0lDQjlMRnh1ZlNrN1hHNWNiblpoY2lCUWNtVm1ZV0pJWld4d1pYSWdQU0J5WlhGMWFYSmxLQ2N1TGk5MWRHbHNjeTl3Y21WbVlXSXRhR1ZzY0dWeUp5azdYRzVUZEhWa2FXOURiMjF3YjI1bGJuUXVVR3hoWTJWSWIyeGtaWElnUFNCall5NURiR0Z6Y3loN1hHNGdJQ0FnYm1GdFpUb2dKMk5qTGxOMGRXUnBiME52YlhCdmJtVnVkQzVRYkdGalpVaHZiR1JsY2ljc1hHNGdJQ0FnWlhoMFpXNWtjem9nWTJNdVEyOXRjRzl1Wlc1MExGeHVJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdYMkpoYzJWVmNtdzZJQ2NuTEZ4dUlDQWdJQ0FnSUNCdVpYTjBaV1JRY21WbVlXSTZJR05qTGxCeVpXWmhZaXhjYmlBZ0lDQjlMRnh1SUNBZ0lHOXVURzloWkRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11Ym1WemRHVmtVSEpsWm1GaUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RME5mUkVWV0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11ZDJGeWJpZ25WVzVoWW14bElIUnZJR1pwYm1RZ0pYTWdjbVZ6YjNWeVkyVXVKeXdnZEdocGN5NWZZbUZ6WlZWeWJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVZ3YkdGalpWZHBkR2hPWlhOMFpXUlFjbVZtWVdJb0tUdGNiaUFnSUNCOUxGeHVJQ0FnSUY5eVpYQnNZV05sVjJsMGFFNWxjM1JsWkZCeVpXWmhZam9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYm05a1pTQTlJSFJvYVhNdWJtOWtaVHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOXdjbVZtWVdJZ1BTQnViMlJsTGw5d2NtVm1ZV0k3WEc0Z0lDQWdJQ0FnSUY5d2NtVm1ZV0l1Y205dmRDQTlJRzV2WkdVN1hHNGdJQ0FnSUNBZ0lGOXdjbVZtWVdJdVlYTnpaWFFnUFNCMGFHbHpMbTVsYzNSbFpGQnlaV1poWWp0Y2JpQWdJQ0FnSUNBZ1VISmxabUZpU0dWc2NHVnlMbk41Ym1OWGFYUm9VSEpsWm1GaUtHNXZaR1VwTzF4dUlDQWdJSDFjYm4wcE8xeHVYRzVqWXk1VGRIVmthVzlEYjIxd2IyNWxiblFnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZOMGRXUnBiME52YlhCdmJtVnVkRHRjYmx4dVhHNTJZWElnVTNSMVpHbHZWMmxrWjJWMElEMGdZMk11UTJ4aGMzTW9lMXh1SUNBZ0lHNWhiV1U2SUNkall5NVRkSFZrYVc5WGFXUm5aWFFuTEZ4dUlDQWdJR1Y0ZEdWdVpITTZJR05qTGxkcFpHZGxkQ3hjYmlBZ0lDQmxaR2wwYjNJNklFTkRYMFZFU1ZSUFVpQW1KaUI3WEc0Z0lDQWdJQ0FnSUdsdWMzQmxZM1J2Y2pvZ0ozQmhZMnRoWjJWek9pOHZhVzV6Y0dWamRHOXlMMmx1YzNCbFkzUnZjbk12WTI5dGNITXZZMk4zYVdSblpYUXVhbk1uTEZ4dUlDQWdJSDBzWEc0Z0lDQWdYM1poYkdsa1lYUmxWR0Z5WjJWMFNXNUVSVllnS0NrZ2UzMWNibjBwTzF4dVhHNWpZeTVUZEhWa2FXOVhhV1JuWlhRZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGTjBkV1JwYjFkcFpHZGxkRHRjYmx4dVhHNGlYWDA9Il19