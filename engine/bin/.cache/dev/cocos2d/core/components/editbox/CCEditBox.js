(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/editbox/CCEditBox.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var macro = require('../../platform/CCMacro');
        var EditBoxImplBase = require('./EditBoxImplBase');
        var Label = require('../CCLabel');
        var Types = require('./types');
        var InputMode = Types.InputMode;
        var InputFlag = Types.InputFlag;
        var KeyboardReturnType = Types.KeyboardReturnType;
        function capitalize(string) {
            return string.replace(/(?:^|\s)\S/g, function (a) {
                return a.toUpperCase();
            });
        }
        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
        var EditBox = cc.Class({
            name: 'cc.EditBox',
            extends: cc.Component,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/EditBox',
                inspector: 'packages://inspector/inspectors/comps/cceditbox.js',
                help: 'i18n:COMPONENT.help_url.editbox',
                executeInEditMode: true
            },
            properties: {
                _useOriginalSize: true,
                _string: '',
                string: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.editbox.string',
                    get: function get() {
                        return this._string;
                    },
                    set: function set(value) {
                        value = '' + value;
                        if (this.maxLength >= 0 && value.length >= this.maxLength) {
                            value = value.slice(0, this.maxLength);
                        }
                        this._string = value;
                        this._updateString(value);
                    }
                },
                textLabel: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.editbox.textLabel',
                    default: null,
                    type: Label,
                    notify: function notify(oldValue) {
                        if (this.textLabel && this.textLabel !== oldValue) {
                            this._updateTextLabel();
                            this._updateLabels();
                        }
                    }
                },
                placeholderLabel: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.editbox.placeholderLabel',
                    default: null,
                    type: Label,
                    notify: function notify(oldValue) {
                        if (this.placeholderLabel && this.placeholderLabel !== oldValue) {
                            this._updatePlaceholderLabel();
                            this._updateLabels();
                        }
                    }
                },
                background: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.editbox.background',
                    default: null,
                    type: cc.Sprite,
                    notify: function notify(oldValue) {
                        if (this.background && this.background !== oldValue) {
                            this._updateBackgroundSprite();
                        }
                    }
                },
                _N$backgroundImage: {
                    default: undefined,
                    type: cc.SpriteFrame
                },
                backgroundImage: {
                    get: function get() {
                        if (!this.background) {
                            return null;
                        }
                        return this.background.spriteFrame;
                    },
                    set: function set(value) {
                        if (this.background) {
                            this.background.spriteFrame = value;
                        }
                    }
                },
                returnType: {
                    default: KeyboardReturnType.DEFAULT,
                    tooltip: CC_DEV && 'i18n:COMPONENT.editbox.returnType',
                    displayName: 'KeyboardReturnType',
                    type: KeyboardReturnType
                },
                _N$returnType: {
                    default: undefined,
                    type: cc.Float
                },
                inputFlag: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.editbox.input_flag',
                    default: InputFlag.DEFAULT,
                    type: InputFlag,
                    notify: function notify() {
                        this._updateString(this._string);
                    }
                },
                inputMode: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.editbox.input_mode',
                    default: InputMode.ANY,
                    type: InputMode,
                    notify: function notify(oldValue) {
                        if (this.inputMode !== oldValue) {
                            this._updateTextLabel();
                            this._updatePlaceholderLabel();
                        }
                    }
                },
                fontSize: {
                    get: function get() {
                        if (!this.textLabel) {
                            return null;
                        }
                        return this.textLabel.fontSize;
                    },
                    set: function set(value) {
                        if (this.textLabel) {
                            this.textLabel.fontSize = value;
                        }
                    }
                },
                _N$fontSize: {
                    default: undefined,
                    type: cc.Float
                },
                lineHeight: {
                    get: function get() {
                        if (!this.textLabel) {
                            return null;
                        }
                        return this.textLabel.lineHeight;
                    },
                    set: function set(value) {
                        if (this.textLabel) {
                            this.textLabel.lineHeight = value;
                        }
                    }
                },
                _N$lineHeight: {
                    default: undefined,
                    type: cc.Float
                },
                fontColor: {
                    get: function get() {
                        if (!this.textLabel) {
                            return null;
                        }
                        return this.textLabel.node.color;
                    },
                    set: function set(value) {
                        if (this.textLabel) {
                            this.textLabel.node.color = value;
                            this.textLabel.node.opacity = value.a;
                        }
                    }
                },
                _N$fontColor: undefined,
                placeholder: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.editbox.placeholder',
                    get: function get() {
                        if (!this.placeholderLabel) {
                            return '';
                        }
                        return this.placeholderLabel.string;
                    },
                    set: function set(value) {
                        if (this.placeholderLabel) {
                            this.placeholderLabel.string = value;
                        }
                    }
                },
                _N$placeholder: {
                    default: undefined,
                    type: cc.String
                },
                placeholderFontSize: {
                    get: function get() {
                        if (!this.placeholderLabel) {
                            return null;
                        }
                        return this.placeholderLabel.fontSize;
                    },
                    set: function set(value) {
                        if (this.placeholderLabel) {
                            this.placeholderLabel.fontSize = value;
                        }
                    }
                },
                _N$placeholderFontSize: {
                    default: undefined,
                    type: cc.Float
                },
                placeholderFontColor: {
                    get: function get() {
                        if (!this.placeholderLabel) {
                            return null;
                        }
                        return this.placeholderLabel.node.color;
                    },
                    set: function set(value) {
                        if (this.placeholderLabel) {
                            this.placeholderLabel.node.color = value;
                            this.placeholderLabel.node.opacity = value.a;
                        }
                    }
                },
                _N$placeholderFontColor: undefined,
                maxLength: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.editbox.max_length',
                    default: 20
                },
                _N$maxLength: {
                    default: undefined,
                    type: cc.Float
                },
                stayOnTop: {
                    default: false,
                    notify: function notify() {
                        cc.warn('editBox.stayOnTop is removed since v2.1.');
                    }
                },
                _tabIndex: 0,
                tabIndex: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.editbox.tab_index',
                    get: function get() {
                        return this._tabIndex;
                    },
                    set: function set(value) {
                        if (this._tabIndex !== value) {
                            this._tabIndex = value;
                            if (this._impl) {
                                this._impl.setTabIndex(value);
                            }
                        }
                    }
                },
                editingDidBegan: {
                    default: [],
                    type: cc.Component.EventHandler
                },
                textChanged: {
                    default: [],
                    type: cc.Component.EventHandler
                },
                editingDidEnded: {
                    default: [],
                    type: cc.Component.EventHandler
                },
                editingReturn: {
                    default: [],
                    type: cc.Component.EventHandler
                }
            },
            statics: {
                _ImplClass: EditBoxImplBase,
                KeyboardReturnType: KeyboardReturnType,
                InputFlag: InputFlag,
                InputMode: InputMode
            },
            _init: function _init() {
                this._upgradeComp();
                this._isLabelVisible = true;
                this.node.on(cc.Node.EventType.SIZE_CHANGED, this._syncSize, this);
                var impl = this._impl = new EditBox._ImplClass();
                impl.init(this);
                this._updateString(this._string);
                this._syncSize();
            },
            _updateBackgroundSprite: function _updateBackgroundSprite() {
                var background = this.background;
                if (!background) {
                    var node = this.node.getChildByName('BACKGROUND_SPRITE');
                    if (!node) {
                        node = new cc.Node('BACKGROUND_SPRITE');
                    }
                    background = node.getComponent(cc.Sprite);
                    if (!background) {
                        background = node.addComponent(cc.Sprite);
                    }
                    node.parent = this.node;
                    this.background = background;
                }
                background.type = cc.Sprite.Type.SLICED;
                if (this._N$backgroundImage !== undefined) {
                    background.spriteFrame = this._N$backgroundImage;
                    this._N$backgroundImage = undefined;
                }
            },
            _updateTextLabel: function _updateTextLabel() {
                var textLabel = this.textLabel;
                if (!textLabel) {
                    var node = this.node.getChildByName('TEXT_LABEL');
                    if (!node) {
                        node = new cc.Node('TEXT_LABEL');
                    }
                    textLabel = node.getComponent(Label);
                    if (!textLabel) {
                        textLabel = node.addComponent(Label);
                    }
                    node.parent = this.node;
                    this.textLabel = textLabel;
                }
                textLabel.node.setAnchorPoint(0, 1);
                textLabel.overflow = Label.Overflow.CLAMP;
                if (this.inputMode === InputMode.ANY) {
                    textLabel.verticalAlign = macro.VerticalTextAlignment.TOP;
                    textLabel.enableWrapText = true;
                } else {
                    textLabel.verticalAlign = macro.VerticalTextAlignment.CENTER;
                    textLabel.enableWrapText = false;
                }
                textLabel.string = this._updateLabelStringStyle(this._string);
                if (this._N$fontColor !== undefined) {
                    textLabel.node.color = this._N$fontColor;
                    textLabel.node.opacity = this._N$fontColor.a;
                    this._N$fontColor = undefined;
                }
                if (this._N$fontSize !== undefined) {
                    textLabel.fontSize = this._N$fontSize;
                    this._N$fontSize = undefined;
                }
                if (this._N$lineHeight !== undefined) {
                    textLabel.lineHeight = this._N$lineHeight;
                    this._N$lineHeight = undefined;
                }
            },
            _updatePlaceholderLabel: function _updatePlaceholderLabel() {
                var placeholderLabel = this.placeholderLabel;
                if (!placeholderLabel) {
                    var node = this.node.getChildByName('PLACEHOLDER_LABEL');
                    if (!node) {
                        node = new cc.Node('PLACEHOLDER_LABEL');
                    }
                    placeholderLabel = node.getComponent(Label);
                    if (!placeholderLabel) {
                        placeholderLabel = node.addComponent(Label);
                    }
                    node.parent = this.node;
                    this.placeholderLabel = placeholderLabel;
                }
                placeholderLabel.node.setAnchorPoint(0, 1);
                placeholderLabel.overflow = Label.Overflow.CLAMP;
                if (this.inputMode === InputMode.ANY) {
                    placeholderLabel.verticalAlign = macro.VerticalTextAlignment.TOP;
                    placeholderLabel.enableWrapText = true;
                } else {
                    placeholderLabel.verticalAlign = macro.VerticalTextAlignment.CENTER;
                    placeholderLabel.enableWrapText = false;
                }
                placeholderLabel.string = this.placeholder;
                if (this._N$placeholderFontColor !== undefined) {
                    placeholderLabel.node.color = this._N$placeholderFontColor;
                    placeholderLabel.node.opacity = this._N$placeholderFontColor.a;
                    this._N$placeholderFontColor = undefined;
                }
                if (this._N$placeholderFontSize !== undefined) {
                    placeholderLabel.fontSize = this._N$placeholderFontSize;
                    this._N$placeholderFontSize = undefined;
                }
            },
            _upgradeComp: function _upgradeComp() {
                if (this._N$returnType !== undefined) {
                    this.returnType = this._N$returnType;
                    this._N$returnType = undefined;
                }
                if (this._N$maxLength !== undefined) {
                    this.maxLength = this._N$maxLength;
                    this._N$maxLength = undefined;
                }
                if (this._N$backgroundImage !== undefined) {
                    this._updateBackgroundSprite();
                }
                if (this._N$fontColor !== undefined || this._N$fontSize !== undefined || this._N$lineHeight !== undefined) {
                    this._updateTextLabel();
                }
                if (this._N$placeholderFontColor !== undefined || this._N$placeholderFontSize !== undefined) {
                    this._updatePlaceholderLabel();
                }
                if (this._N$placeholder !== undefined) {
                    this.placeholder = this._N$placeholder;
                    this._N$placeholder = undefined;
                }
            },
            _syncSize: function _syncSize() {
                if (this._impl) {
                    var size = this.node.getContentSize();
                    this._impl.setSize(size.width, size.height);
                }
            },
            _showLabels: function _showLabels() {
                this._isLabelVisible = true;
                this._updateLabels();
            },
            _hideLabels: function _hideLabels() {
                this._isLabelVisible = false;
                if (this.textLabel) {
                    this.textLabel.node.active = false;
                }
                if (this.placeholderLabel) {
                    this.placeholderLabel.node.active = false;
                }
            },
            _updateLabels: function _updateLabels() {
                if (this._isLabelVisible) {
                    var content = this._string;
                    if (this.textLabel) {
                        this.textLabel.node.active = content !== '';
                    }
                    if (this.placeholderLabel) {
                        this.placeholderLabel.node.active = content === '';
                    }
                }
            },
            _updateString: function _updateString(text) {
                var textLabel = this.textLabel;
                if (!textLabel) {
                    return;
                }
                var displayText = text;
                if (displayText) {
                    displayText = this._updateLabelStringStyle(displayText);
                }
                textLabel.string = displayText;
                this._updateLabels();
            },
            _updateLabelStringStyle: function _updateLabelStringStyle(text, ignorePassword) {
                var inputFlag = this.inputFlag;
                if (!ignorePassword && inputFlag === InputFlag.PASSWORD) {
                    var passwordString = '';
                    var len = text.length;
                    for (var i = 0; i < len; ++i) {
                        passwordString += '\u25CF';
                    }
                    text = passwordString;
                } else if (inputFlag === InputFlag.INITIAL_CAPS_ALL_CHARACTERS) {
                    text = text.toUpperCase();
                } else if (inputFlag === InputFlag.INITIAL_CAPS_WORD) {
                    text = capitalize(text);
                } else if (inputFlag === InputFlag.INITIAL_CAPS_SENTENCE) {
                    text = capitalizeFirstLetter(text);
                }
                return text;
            },
            editBoxEditingDidBegan: function editBoxEditingDidBegan() {
                cc.Component.EventHandler.emitEvents(this.editingDidBegan, this);
                this.node.emit('editing-did-began', this);
            },
            editBoxEditingDidEnded: function editBoxEditingDidEnded() {
                cc.Component.EventHandler.emitEvents(this.editingDidEnded, this);
                this.node.emit('editing-did-ended', this);
            },
            editBoxTextChanged: function editBoxTextChanged(text) {
                text = this._updateLabelStringStyle(text, true);
                this.string = text;
                cc.Component.EventHandler.emitEvents(this.textChanged, text, this);
                this.node.emit('text-changed', this);
            },
            editBoxEditingReturn: function editBoxEditingReturn() {
                cc.Component.EventHandler.emitEvents(this.editingReturn, this);
                this.node.emit('editing-return', this);
            },
            onEnable: function onEnable() {
                if (!CC_EDITOR) {
                    this._registerEvent();
                }
                if (this._impl) {
                    this._impl.enable();
                }
            },
            onDisable: function onDisable() {
                if (!CC_EDITOR) {
                    this._unregisterEvent();
                }
                if (this._impl) {
                    this._impl.disable();
                }
            },
            onDestroy: function onDestroy() {
                if (this._impl) {
                    this._impl.clear();
                }
            },
            __preload: function __preload() {
                this._init();
            },
            _registerEvent: function _registerEvent() {
                this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
                this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
            },
            _unregisterEvent: function _unregisterEvent() {
                this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
                this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
            },
            _onTouchBegan: function _onTouchBegan(event) {
                event.stopPropagation();
            },
            _onTouchCancel: function _onTouchCancel(event) {
                event.stopPropagation();
            },
            _onTouchEnded: function _onTouchEnded(event) {
                if (this._impl) {
                    this._impl.beginEditing();
                }
                event.stopPropagation();
            },
            setFocus: function setFocus() {
                cc.warnID(1400, 'setFocus()', 'focus()');
                if (this._impl) {
                    this._impl.setFocus(true);
                }
            },
            focus: function focus() {
                if (this._impl) {
                    this._impl.setFocus(true);
                }
            },
            blur: function blur() {
                if (this._impl) {
                    this._impl.setFocus(false);
                }
            },
            isFocused: function isFocused() {
                if (this._impl) {
                    return this._impl.isFocused();
                } else {
                    return false;
                }
            },
            update: function update() {
                if (this._impl) {
                    this._impl.update();
                }
            }
        });
        cc.EditBox = module.exports = EditBox;
        if (cc.sys.isBrowser) {
            require('./WebEditBoxImpl');
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,