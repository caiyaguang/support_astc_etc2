(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/editbox/EditBoxImplBase.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var EditBoxImplBase = cc.Class({
            ctor: function ctor() {
                this._delegate = null;
            },
            init: function init(delegate) {
            },
            enable: function enable() {
            },
            disable: function disable() {
            },
            clear: function clear() {
            },
            update: function update() {
            },
            setTabIndex: function setTabIndex(index) {
            },
            setSize: function setSize(width, height) {
            },
            setFocus: function setFocus(value) {
            },
            isFocused: function isFocused() {
            },
            beginEditing: function beginEditing() {
            },
            endEditing: function endEditing() {
            }
        });
        module.exports = EditBoxImplBase;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVkaXRCb3hJbXBsQmFzZS5qcyIsIi9Vc2Vycy96emYyMDE5L0Rlc2t0b3AvZGV2ZWxvcG1lbnQvc3VwcG9ydF9hc3RjL2VuZ2luZS9jb2NvczJkL2NvcmUvY29tcG9uZW50cy9lZGl0Ym94L0VkaXRCb3hJbXBsQmFzZS5qcyJdLCJuYW1lcyI6WyJFZGl0Qm94SW1wbEJhc2UiLCJjYyIsIkNsYXNzIiwiY3RvciIsIl9kZWxlZ2F0ZSIsImluaXQiLCJkZWxlZ2F0ZSIsImVuYWJsZSIsImRpc2FibGUiLCJjbGVhciIsInVwZGF0ZSIsInNldFRhYkluZGV4IiwiaW5kZXgiLCJzZXRTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJzZXRGb2N1cyIsInZhbHVlIiwiaXNGb2N1c2VkIiwiYmVnaW5FZGl0aW5nIiwiZW5kRWRpdGluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQTRCQSxJQUFJQSxlQUFBQSxHQUFrQkMsRUFBQUEsQ0FBR0MsS0FBSEQsQ0FBUztBQUFBLFlBQzNCRSxJQUFBQSxFQUQyQixTQUFBLElBQUEsR0FDbkI7QUFBQSxnQkFDSixLQUFLQyxTQUFMLEdBQWlCLElBQWpCLENBREk7QUFBQSxhQURtQjtBQUFBLFlBSzNCQyxJQUFBQSxFQUwyQixTQUFBLElBQUEsQ0FLckJDLFFBTHFCLEVBS1g7QUFBQSxhQUxXO0FBQUEsWUFTM0JDLE1BQUFBLEVBVDJCLFNBQUEsTUFBQSxHQVNqQjtBQUFBLGFBVGlCO0FBQUEsWUFhM0JDLE9BQUFBLEVBYjJCLFNBQUEsT0FBQSxHQWFoQjtBQUFBLGFBYmdCO0FBQUEsWUFpQjNCQyxLQUFBQSxFQWpCMkIsU0FBQSxLQUFBLEdBaUJsQjtBQUFBLGFBakJrQjtBQUFBLFlBcUIzQkMsTUFBQUEsRUFyQjJCLFNBQUEsTUFBQSxHQXFCakI7QUFBQSxhQXJCaUI7QUFBQSxZQXlCM0JDLFdBQUFBLEVBekIyQixTQUFBLFdBQUEsQ0F5QmRDLEtBekJjLEVBeUJQO0FBQUEsYUF6Qk87QUFBQSxZQTZCM0JDLE9BQUFBLEVBN0IyQixTQUFBLE9BQUEsQ0E2QmxCQyxLQTdCa0IsRUE2QlhDLE1BN0JXLEVBNkJIO0FBQUEsYUE3Qkc7QUFBQSxZQWlDM0JDLFFBQUFBLEVBakMyQixTQUFBLFFBQUEsQ0FpQ2pCQyxLQWpDaUIsRUFpQ1Y7QUFBQSxhQWpDVTtBQUFBLFlBcUMzQkMsU0FBQUEsRUFyQzJCLFNBQUEsU0FBQSxHQXFDZDtBQUFBLGFBckNjO0FBQUEsWUF5QzNCQyxZQUFBQSxFQXpDMkIsU0FBQSxZQUFBLEdBeUNYO0FBQUEsYUF6Q1c7QUFBQSxZQTZDM0JDLFVBQUFBLEVBN0MyQixTQUFBLFVBQUEsR0E2Q2I7QUFBQSxhQTdDYTtBQUFBLFNBQVRuQixDQUF0QjtRQWtEQW9CLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCckIsZUFBakJxQiIsImZpbGUiOiJFZGl0Qm94SW1wbEJhc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxMS0yMDEyIGNvY29zMmQteC5vcmdcbiBDb3B5cmlnaHQgKGMpIDIwMTIgSmFtZXMgQ2hlblxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxuXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxuXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiBUSEUgU09GVFdBUkUuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxubGV0IEVkaXRCb3hJbXBsQmFzZSA9IGNjLkNsYXNzKHtcbiAgICBjdG9yICgpIHtcbiAgICAgICAgdGhpcy5fZGVsZWdhdGUgPSBudWxsOyAgICAgICAgXG4gICAgfSxcblxuICAgIGluaXQgKGRlbGVnYXRlKSB7XG5cbiAgICB9LFxuXG4gICAgZW5hYmxlICgpIHtcbiAgICAgICAgXG4gICAgfSxcblxuICAgIGRpc2FibGUgKCkge1xuXG4gICAgfSxcblxuICAgIGNsZWFyICgpIHtcbiAgICAgICAgXG4gICAgfSxcblxuICAgIHVwZGF0ZSAoKSB7XG4gICAgICAgIFxuICAgIH0sXG5cbiAgICBzZXRUYWJJbmRleCAoaW5kZXgpIHtcbiAgICAgICAgLy8gT25seSBzdXBwb3J0IG9uIFdlYiBwbGF0Zm9ybSAgXG4gICAgfSxcblxuICAgIHNldFNpemUgKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgLy8gT25seSBzdXBwb3J0IG9uIFdlYiBwbGF0Zm9ybVxuICAgIH0sXG5cbiAgICBzZXRGb2N1cyAodmFsdWUpIHtcbiAgICAgICAgXG4gICAgfSxcblxuICAgIGlzRm9jdXNlZCAoKSB7XG5cbiAgICB9LFxuXG4gICAgYmVnaW5FZGl0aW5nICgpIHtcblxuICAgIH0sXG4gICAgXG4gICAgZW5kRWRpdGluZyAoKSB7XG5cbiAgICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRWRpdEJveEltcGxCYXNlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gQ29weXJpZ2h0IChjKSAyMDExLTIwMTIgY29jb3MyZC14Lm9yZ1xuIENvcHlyaWdodCAoYykgMjAxMiBKYW1lcyBDaGVuXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxuXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xuXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXG4gc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXG5cbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXG5cbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgRWRpdEJveEltcGxCYXNlID0gY2MuQ2xhc3Moe1xuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2RlbGVnYXRlID0gbnVsbDtcbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoZGVsZWdhdGUpIHt9LFxuICAgIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge30sXG4gICAgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHt9LFxuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHt9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgc2V0VGFiSW5kZXg6IGZ1bmN0aW9uIHNldFRhYkluZGV4KGluZGV4KSB7XG4gICAgICAgIC8vIE9ubHkgc3VwcG9ydCBvbiBXZWIgcGxhdGZvcm0gIFxuICAgIH0sXG4gICAgc2V0U2l6ZTogZnVuY3Rpb24gc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIC8vIE9ubHkgc3VwcG9ydCBvbiBXZWIgcGxhdGZvcm1cbiAgICB9LFxuICAgIHNldEZvY3VzOiBmdW5jdGlvbiBzZXRGb2N1cyh2YWx1ZSkge30sXG4gICAgaXNGb2N1c2VkOiBmdW5jdGlvbiBpc0ZvY3VzZWQoKSB7fSxcbiAgICBiZWdpbkVkaXRpbmc6IGZ1bmN0aW9uIGJlZ2luRWRpdGluZygpIHt9LFxuICAgIGVuZEVkaXRpbmc6IGZ1bmN0aW9uIGVuZEVkaXRpbmcoKSB7fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRWRpdEJveEltcGxCYXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtWa2FYUkNiM2hKYlhCc1FtRnpaUzVxY3lKZExDSnVZVzFsY3lJNld5SkZaR2wwUW05NFNXMXdiRUpoYzJVaUxDSmpZeUlzSWtOc1lYTnpJaXdpWTNSdmNpSXNJbDlrWld4bFoyRjBaU0lzSW1sdWFYUWlMQ0prWld4bFoyRjBaU0lzSW1WdVlXSnNaU0lzSW1ScGMyRmliR1VpTENKamJHVmhjaUlzSW5Wd1pHRjBaU0lzSW5ObGRGUmhZa2x1WkdWNElpd2lhVzVrWlhnaUxDSnpaWFJUYVhwbElpd2lkMmxrZEdnaUxDSm9aV2xuYUhRaUxDSnpaWFJHYjJOMWN5SXNJblpoYkhWbElpd2lhWE5HYjJOMWMyVmtJaXdpWW1WbmFXNUZaR2wwYVc1bklpd2laVzVrUldScGRHbHVaeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRTBRa0VzU1VGQlNVRXNhMEpCUVd0Q1F5eEhRVUZIUXl4TFFVRklMRU5CUVZNN1FVRkRNMEpETEZGQlJESkNMR3RDUVVOdVFqdEJRVU5LTEdGQlFVdERMRk5CUVV3c1IwRkJhVUlzU1VGQmFrSTdRVUZEU0N4TFFVZ3dRanRCUVVzelFrTXNVVUZNTWtJc1owSkJTM0pDUXl4UlFVeHhRaXhGUVV0WUxFTkJSV1lzUTBGUU1FSTdRVUZUTTBKRExGVkJWREpDTEc5Q1FWTnFRaXhEUVVWVUxFTkJXREJDTzBGQllUTkNReXhYUVdJeVFpeHhRa0ZoYUVJc1EwRkZWaXhEUVdZd1FqdEJRV2xDTTBKRExGTkJha0l5UWl4dFFrRnBRbXhDTEVOQlJWSXNRMEZ1UWpCQ08wRkJjVUl6UWtNc1ZVRnlRakpDTEc5Q1FYRkNha0lzUTBGRlZDeERRWFpDTUVJN1FVRjVRak5DUXl4bFFYcENNa0lzZFVKQmVVSmtReXhMUVhwQ1l5eEZRWGxDVUR0QlFVTm9RanRCUVVOSUxFdEJNMEl3UWp0QlFUWkNNMEpETEZkQk4wSXlRaXh0UWtFMlFteENReXhMUVRkQ2EwSXNSVUUyUWxoRExFMUJOMEpYTEVWQk5rSklPMEZCUTNCQ08wRkJRMGdzUzBFdlFqQkNPMEZCYVVNelFrTXNXVUZxUXpKQ0xHOUNRV2xEYWtKRExFdEJha05wUWl4RlFXbERWaXhEUVVWb1FpeERRVzVETUVJN1FVRnhRek5DUXl4aFFYSkRNa0lzZFVKQmNVTmtMRU5CUlZvc1EwRjJRekJDTzBGQmVVTXpRa01zWjBKQmVrTXlRaXd3UWtGNVExZ3NRMEZGWml4RFFUTkRNRUk3UVVFMlF6TkNReXhqUVRkRE1rSXNkMEpCTmtOaUxFTkJSV0k3UVVFdlF6QkNMRU5CUVZRc1EwRkJkRUk3TzBGQmEwUkJReXhQUVVGUFF5eFBRVUZRTEVkQlFXbENkRUlzWlVGQmFrSWlMQ0ptYVd4bElqb2lSV1JwZEVKdmVFbHRjR3hDWVhObExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVEV0TWpBeE1pQmpiMk52Y3pKa0xYZ3ViM0puWEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFeUlFcGhiV1Z6SUVOb1pXNWNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVE10TWpBeE5pQkRhSFZyYjI1bklGUmxZMmh1YjJ4dloybGxjeUJKYm1NdVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTNMVEl3TVRnZ1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVYRzVjYmlCb2RIUndjem92TDNkM2R5NWpiMk52Y3k1amIyMHZYRzVjYmlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVNCamIzQjVYRzRnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmxibWRwYm1VZ2MyOTFjbU5sSUdOdlpHVWdLSFJvWlNCY0lsTnZablIzWVhKbFhDSXBMQ0JoSUd4cGJXbDBaV1FzWEc0Z2QyOXliR1IzYVdSbExDQnliM2xoYkhSNUxXWnlaV1VzSUc1dmJpMWhjM05wWjI1aFlteGxMQ0J5WlhadlkyRmliR1VnWVc1a0lHNXZiaTFsZUdOc2RYTnBkbVVnYkdsalpXNXpaVnh1SUhSdklIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZiR1ZzZVNCMGJ5QmtaWFpsYkc5d0lHZGhiV1Z6SUc5dUlIbHZkWElnZEdGeVoyVjBJSEJzWVhSbWIzSnRjeTRnV1c5MUlITm9ZV3hzWEc0Z2JtOTBJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52Wm5SM1lYSmxJR1p2Y2lCa1pYWmxiRzl3YVc1bklHOTBhR1Z5SUhOdlpuUjNZWEpsSUc5eUlIUnZiMnh6SUhSb1lYUW5jMXh1SUhWelpXUWdabTl5SUdSbGRtVnNiM0JwYm1jZ1oyRnRaWE11SUZsdmRTQmhjbVVnYm05MElHZHlZVzUwWldRZ2RHOGdjSFZpYkdsemFDd2daR2x6ZEhKcFluVjBaU3hjYmlCemRXSnNhV05sYm5ObExDQmhibVF2YjNJZ2MyVnNiQ0JqYjNCcFpYTWdiMllnUTI5amIzTWdRM0psWVhSdmNpNWNibHh1SUZSb1pTQnpiMlowZDJGeVpTQnZjaUIwYjI5c2N5QnBiaUIwYUdseklFeHBZMlZ1YzJVZ1FXZHlaV1Z0Wlc1MElHRnlaU0JzYVdObGJuTmxaQ3dnYm05MElITnZiR1F1WEc0Z1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVJSEpsYzJWeWRtVnpJR0ZzYkNCeWFXZG9kSE1nYm05MElHVjRjSEpsYzNOc2VTQm5jbUZ1ZEdWa0lIUnZJSGx2ZFM1Y2JseHVJRlJJUlNCVFQwWlVWMEZTUlNCSlV5QlFVazlXU1VSRlJDQmNJa0ZUSUVsVFhDSXNJRmRKVkVoUFZWUWdWMEZTVWtGT1ZGa2dUMFlnUVU1WklFdEpUa1FzSUVWWVVGSkZVMU1nVDFKY2JpQkpUVkJNU1VWRUxDQkpUa05NVlVSSlRrY2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBJRlJJUlNCWFFWSlNRVTVVU1VWVElFOUdJRTFGVWtOSVFVNVVRVUpKVEVsVVdTeGNiaUJHU1ZST1JWTlRJRVpQVWlCQklGQkJVbFJKUTFWTVFWSWdVRlZTVUU5VFJTQkJUa1FnVGs5T1NVNUdVa2xPUjBWTlJVNVVMaUJKVGlCT1R5QkZWa1ZPVkNCVFNFRk1UQ0JVU0VWY2JpQkJWVlJJVDFKVElFOVNJRU5QVUZsU1NVZElWQ0JJVDB4RVJWSlRJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRU5NUVVsTkxDQkVRVTFCUjBWVElFOVNJRTlVU0VWU1hHNGdURWxCUWtsTVNWUlpMQ0JYU0VWVVNFVlNJRWxPSUVGT0lFRkRWRWxQVGlCUFJpQkRUMDVVVWtGRFZDd2dWRTlTVkNCUFVpQlBWRWhGVWxkSlUwVXNJRUZTU1ZOSlRrY2dSbEpQVFN4Y2JpQlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVFQwWlVWMEZTUlNCUFVpQlVTRVVnVlZORklFOVNJRTlVU0VWU0lFUkZRVXhKVGtkVElFbE9YRzRnVkVoRklGTlBSbFJYUVZKRkxseHVJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNWNibXhsZENCRlpHbDBRbTk0U1cxd2JFSmhjMlVnUFNCall5NURiR0Z6Y3loN1hHNGdJQ0FnWTNSdmNpQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlJsYkdWbllYUmxJRDBnYm5Wc2JEc2dJQ0FnSUNBZ0lGeHVJQ0FnSUgwc1hHNWNiaUFnSUNCcGJtbDBJQ2hrWld4bFoyRjBaU2tnZTF4dVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdWdVlXSnNaU0FvS1NCN1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUgwc1hHNWNiaUFnSUNCa2FYTmhZbXhsSUNncElIdGNibHh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmpiR1ZoY2lBb0tTQjdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQjFjR1JoZEdVZ0tDa2dlMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjMlYwVkdGaVNXNWtaWGdnS0dsdVpHVjRLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFOXViSGtnYzNWd2NHOXlkQ0J2YmlCWFpXSWdjR3hoZEdadmNtMGdJRnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnpaWFJUYVhwbElDaDNhV1IwYUN3Z2FHVnBaMmgwS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRTl1YkhrZ2MzVndjRzl5ZENCdmJpQlhaV0lnY0d4aGRHWnZjbTFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjMlYwUm05amRYTWdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnBjMFp2WTNWelpXUWdLQ2tnZTF4dVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdKbFoybHVSV1JwZEdsdVp5QW9LU0I3WEc1Y2JpQWdJQ0I5TEZ4dUlDQWdJRnh1SUNBZ0lHVnVaRVZrYVhScGJtY2dLQ2tnZTF4dVhHNGdJQ0FnZlN4Y2JuMHBPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVWa2FYUkNiM2hKYlhCc1FtRnpaVHRjYmlKZGZRPT0iXX0=