(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCRenderComponent.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        var _renderData = require('../../renderer/render-data/render-data');
        var _renderData2 = _interopRequireDefault(_renderData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var Component = require('./CCComponent');
        var RenderFlow = require('../renderer/render-flow');
        var BlendFactor = require('../platform/CCMacro').BlendFactor;
        var Material = require('../assets/material/CCMaterial');
        var RenderComponent = cc.Class({
            name: 'RenderComponent',
            extends: Component,
            editor: CC_EDITOR && {
                executeInEditMode: true,
                disallowMultiple: true
            },
            properties: {
                _materials: {
                    default: [],
                    type: Material
                },
                sharedMaterials: {
                    get: function get() {
                        return this._materials;
                    },
                    set: function set(val) {
                        this._materials = val;
                        this._activateMaterial(true);
                    },
                    type: [Material],
                    displayName: 'Materials',
                    animatable: false
                }
            },
            ctor: function ctor() {
                this._renderData = null;
                this.__allocedDatas = [];
                this._vertexFormat = null;
                this._toPostHandle = false;
                this._assembler = this.constructor._assembler;
                this._postAssembler = this.constructor._postAssembler;
            },
            onEnable: function onEnable() {
                if (this.node._renderComponent) {
                    this.node._renderComponent.enabled = false;
                }
                this.node._renderComponent = this;
                this.node._renderFlag |= RenderFlow.FLAG_RENDER | RenderFlow.FLAG_UPDATE_RENDER_DATA;
            },
            onDisable: function onDisable() {
                this.node._renderComponent = null;
                this.disableRender();
            },
            onDestroy: function onDestroy() {
                for (var i = 0, l = this.__allocedDatas.length; i < l; i++) {
                    _renderData2.default.free(this.__allocedDatas[i]);
                }
                this.__allocedDatas.length = 0;
                this._materials.length = 0;
                this._renderData = null;
                var uniforms = this._uniforms;
                for (var name in uniforms) {
                    _uniformPool.remove(_uniformPool._data.indexOf(uniforms[name]));
                }
                this._uniforms = null;
                this._defines = null;
            },
            _canRender: function _canRender() {
                return this._enabled && this.node._activeInHierarchy;
            },
            markForUpdateRenderData: function markForUpdateRenderData(enable) {
                if (enable && this._canRender()) {
                    this.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
                } else if (!enable) {
                    this.node._renderFlag &= ~RenderFlow.FLAG_UPDATE_RENDER_DATA;
                }
            },
            markForRender: function markForRender(enable) {
                if (enable && this._canRender()) {
                    this.node._renderFlag |= RenderFlow.FLAG_RENDER;
                } else if (!enable) {
                    this.node._renderFlag &= ~RenderFlow.FLAG_RENDER;
                }
            },
            markForCustomIARender: function markForCustomIARender(enable) {
                if (enable && this._canRender()) {
                    this.node._renderFlag |= RenderFlow.FLAG_CUSTOM_IA_RENDER;
                } else if (!enable) {
                    this.node._renderFlag &= ~RenderFlow.FLAG_CUSTOM_IA_RENDER;
                }
            },
            disableRender: function disableRender() {
                this.node._renderFlag &= ~(RenderFlow.FLAG_RENDER | RenderFlow.FLAG_CUSTOM_IA_RENDER | RenderFlow.FLAG_UPDATE_RENDER_DATA);
            },
            requestRenderData: function requestRenderData() {
                var data = _renderData2.default.alloc();
                this.__allocedDatas.push(data);
                return data;
            },
            destroyRenderData: function destroyRenderData(data) {
                var index = this.__allocedDatas.indexOf(data);
                if (index !== -1) {
                    this.__allocedDatas.splice(index, 1);
                    _renderData2.default.free(data);
                }
            },
            getMaterial: function getMaterial(index) {
                if (index < 0 || index >= this._materials.length) {
                    return null;
                }
                var material = this._materials[index];
                if (!material)
                    return null;
                var instantiated = Material.getInstantiatedMaterial(material, this);
                if (instantiated !== material) {
                    this.setMaterial(index, instantiated);
                }
                return this._materials[index];
            },
            setMaterial: function setMaterial(index, material) {
                this._materials[index] = material;
                if (material) {
                    this.markForUpdateRenderData(true);
                }
            },
            _activateMaterial: function _activateMaterial(force) {
            }
        });
        RenderComponent._assembler = null;
        RenderComponent._postAssembler = null;
        cc.RenderComponent = module.exports = RenderComponent;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,