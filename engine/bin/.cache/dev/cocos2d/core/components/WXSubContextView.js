(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/WXSubContextView.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Component = require('./CCComponent');
        var WXSubContextView = void 0;
        if (!CC_EDITOR && !CC_WECHATGAME) {
            WXSubContextView = cc.Class({
                name: 'cc.WXSubContextView',
                extends: Component
            });
        } else {
            WXSubContextView = cc.Class({
                name: 'cc.WXSubContextView',
                extends: Component,
                editor: CC_EDITOR && {
                    menu: 'i18n:MAIN_MENU.component.others/WXSubContextView',
                    help: 'i18n:COMPONENT.help_url.wx_subcontext_view'
                },
                properties: {
                    _fps: 60,
                    fps: {
                        get: function get() {
                            return this._fps;
                        },
                        set: function set(value) {
                            if (this._fps === value) {
                                return;
                            }
                            this._fps = value;
                            this._updateInterval = 1 / value;
                            this._updateSubContextFrameRate();
                        },
                        tooltip: CC_DEV && 'i18n:COMPONENT.wx_subcontext_view.fps'
                    }
                },
                ctor: function ctor() {
                    this._sprite = null;
                    this._tex = new cc.Texture2D();
                    this._context = null;
                    this._updatedTime = performance.now();
                    this._updateInterval = 0;
                },
                onLoad: function onLoad() {
                    if (wx.getOpenDataContext) {
                        this._updateInterval = 1000 / this._fps;
                        this._context = wx.getOpenDataContext();
                        this.reset();
                        this._tex.setPremultiplyAlpha(true);
                        this._tex.initWithElement(sharedCanvas);
                        this._sprite = this.node.getComponent(cc.Sprite);
                        if (!this._sprite) {
                            this._sprite = this.node.addComponent(cc.Sprite);
                            this._sprite.srcBlendFactor = cc.macro.BlendFactor.ONE;
                        }
                        this._sprite.spriteFrame = new cc.SpriteFrame(this._tex);
                    } else {
                        this.enabled = false;
                    }
                },
                reset: function reset() {
                    if (this._context) {
                        this.updateSubContextViewport();
                        var _sharedCanvas = this._context.canvas;
                        if (_sharedCanvas) {
                            _sharedCanvas.width = this.node.width;
                            _sharedCanvas.height = this.node.height;
                        }
                    }
                },
                onEnable: function onEnable() {
                    this._runSubContextMainLoop();
                    this._registerNodeEvent();
                    this._updateSubContextFrameRate();
                    this.updateSubContextViewport();
                },
                onDisable: function onDisable() {
                    this._unregisterNodeEvent();
                    this._stopSubContextMainLoop();
                },
                update: function update(dt) {
                    var calledUpdateMannually = dt === undefined;
                    if (calledUpdateMannually) {
                        this._context && this._context.postMessage({
                            fromEngine: true,
                            event: 'step'
                        });
                        this._updateSubContextTexture();
                        return;
                    }
                    var now = performance.now();
                    var deltaTime = now - this._updatedTime;
                    if (deltaTime >= this._updateInterval) {
                        this._updatedTime += this._updateInterval;
                        this._updateSubContextTexture();
                    }
                },
                _updateSubContextTexture: function _updateSubContextTexture() {
                    if (!this._tex || !this._context) {
                        return;
                    }
                    this._tex.initWithElement(this._context.canvas);
                    this._sprite._activateMaterial();
                },
                updateSubContextViewport: function updateSubContextViewport() {
                    if (this._context) {
                        var box = this.node.getBoundingBoxToWorld();
                        var sx = cc.view._scaleX;
                        var sy = cc.view._scaleY;
                        this._context.postMessage({
                            fromEngine: true,
                            event: 'viewport',
                            x: box.x * sx + cc.view._viewportRect.x,
                            y: box.y * sy + cc.view._viewportRect.y,
                            width: box.width * sx,
                            height: box.height * sy
                        });
                    }
                },
                _registerNodeEvent: function _registerNodeEvent() {
                    this.node.on('position-changed', this.updateSubContextViewport, this);
                    this.node.on('scale-changed', this.updateSubContextViewport, this);
                    this.node.on('size-changed', this.updateSubContextViewport, this);
                },
                _unregisterNodeEvent: function _unregisterNodeEvent() {
                    this.node.off('position-changed', this.updateSubContextViewport, this);
                    this.node.off('scale-changed', this.updateSubContextViewport, this);
                    this.node.off('size-changed', this.updateSubContextViewport, this);
                },
                _runSubContextMainLoop: function _runSubContextMainLoop() {
                    if (this._context) {
                        this._context.postMessage({
                            fromEngine: true,
                            event: 'mainLoop',
                            value: true
                        });
                    }
                },
                _stopSubContextMainLoop: function _stopSubContextMainLoop() {
                    if (this._context) {
                        this._context.postMessage({
                            fromEngine: true,
                            event: 'mainLoop',
                            value: false
                        });
                    }
                },
                _updateSubContextFrameRate: function _updateSubContextFrameRate() {
                    if (this._context) {
                        this._context.postMessage({
                            fromEngine: true,
                            event: 'frameRate',
                            value: this._fps
                        });
                    }
                }
            });
        }
        cc.WXSubContextView = module.exports = WXSubContextView;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldYU3ViQ29udGV4dFZpZXcuanMiLCIvVXNlcnMvenpmMjAxOS9EZXNrdG9wL2RldmVsb3BtZW50L3N1cHBvcnRfYXN0Yy9lbmdpbmUvY29jb3MyZC9jb3JlL2NvbXBvbmVudHMvV1hTdWJDb250ZXh0Vmlldy5qcyJdLCJuYW1lcyI6WyJDb21wb25lbnQiLCJyZXF1aXJlIiwiV1hTdWJDb250ZXh0VmlldyIsIkNDX0VESVRPUiIsIkNDX1dFQ0hBVEdBTUUiLCJjYyIsIkNsYXNzIiwibmFtZSIsImV4dGVuZHMiLCJlZGl0b3IiLCJtZW51IiwiaGVscCIsInByb3BlcnRpZXMiLCJfZnBzIiwiZnBzIiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJfdXBkYXRlSW50ZXJ2YWwiLCJfdXBkYXRlU3ViQ29udGV4dEZyYW1lUmF0ZSIsInRvb2x0aXAiLCJDQ19ERVYiLCJjdG9yIiwiX3Nwcml0ZSIsIl90ZXgiLCJUZXh0dXJlMkQiLCJfY29udGV4dCIsIl91cGRhdGVkVGltZSIsInBlcmZvcm1hbmNlIiwibm93Iiwib25Mb2FkIiwid3giLCJnZXRPcGVuRGF0YUNvbnRleHQiLCJyZXNldCIsInNldFByZW11bHRpcGx5QWxwaGEiLCJpbml0V2l0aEVsZW1lbnQiLCJzaGFyZWRDYW52YXMiLCJub2RlIiwiZ2V0Q29tcG9uZW50IiwiU3ByaXRlIiwiYWRkQ29tcG9uZW50Iiwic3JjQmxlbmRGYWN0b3IiLCJtYWNybyIsIkJsZW5kRmFjdG9yIiwiT05FIiwic3ByaXRlRnJhbWUiLCJTcHJpdGVGcmFtZSIsImVuYWJsZWQiLCJ1cGRhdGVTdWJDb250ZXh0Vmlld3BvcnQiLCJjYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsIm9uRW5hYmxlIiwiX3J1blN1YkNvbnRleHRNYWluTG9vcCIsIl9yZWdpc3Rlck5vZGVFdmVudCIsIm9uRGlzYWJsZSIsIl91bnJlZ2lzdGVyTm9kZUV2ZW50IiwiX3N0b3BTdWJDb250ZXh0TWFpbkxvb3AiLCJ1cGRhdGUiLCJkdCIsImNhbGxlZFVwZGF0ZU1hbm51YWxseSIsInVuZGVmaW5lZCIsInBvc3RNZXNzYWdlIiwiZnJvbUVuZ2luZSIsImV2ZW50IiwiX3VwZGF0ZVN1YkNvbnRleHRUZXh0dXJlIiwiZGVsdGFUaW1lIiwiX2FjdGl2YXRlTWF0ZXJpYWwiLCJib3giLCJnZXRCb3VuZGluZ0JveFRvV29ybGQiLCJzeCIsInZpZXciLCJfc2NhbGVYIiwic3kiLCJfc2NhbGVZIiwieCIsIl92aWV3cG9ydFJlY3QiLCJ5Iiwib24iLCJvZmYiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUF5QkEsSUFBTUEsU0FBQUEsR0FBWUMsT0FBQUEsQ0FBUSxlQUFSQSxDQUFsQjtRQUVBLElBQUlDLGdCQUFBQSxHQUFBQSxLQUFBQSxDQUFKO1FBRUEsSUFBSSxDQUFDQyxTQUFELElBQWMsQ0FBQ0MsYUFBbkIsRUFBa0M7QUFBQSxZQUM5QkYsZ0JBQUFBLEdBQW1CRyxFQUFBQSxDQUFHQyxLQUFIRCxDQUFTO0FBQUEsZ0JBQ3hCRSxJQUFBQSxFQUFNLHFCQURrQjtBQUFBLGdCQUV4QkMsT0FBQUEsRUFBU1IsU0FGZTtBQUFBLGFBQVRLLENBQW5CSCxDQUQ4QjtBQUFBLFNBQWxDLE1BTUs7QUFBQSxZQXlCREEsZ0JBQUFBLEdBQW1CRyxFQUFBQSxDQUFHQyxLQUFIRCxDQUFTO0FBQUEsZ0JBQ3hCRSxJQUFBQSxFQUFNLHFCQURrQjtBQUFBLGdCQUV4QkMsT0FBQUEsRUFBU1IsU0FGZTtBQUFBLGdCQUl4QlMsTUFBQUEsRUFBUU4sU0FBQUEsSUFBYTtBQUFBLG9CQUNqQk8sSUFBQUEsRUFBTSxrREFEVztBQUFBLG9CQUVqQkMsSUFBQUEsRUFBTSw0Q0FGVztBQUFBLGlCQUpHO0FBQUEsZ0JBU3hCQyxVQUFBQSxFQUFZO0FBQUEsb0JBQ1JDLElBQUFBLEVBQU0sRUFERTtBQUFBLG9CQUdSQyxHQUFBQSxFQUFLO0FBQUEs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QWQsQ0FBMEI7QUFBQSw0QkFDdEJDLFVBQUFBLEVBQVksSUFEVTtBQUFBLDRCQUV0QkMsS0FBQUEsRUFBTyxVQUZlO0FBQUEsNEJBR3RCL0MsS0FBQUEsRUFBTyxJQUhlO0FBQUEseUJBQTFCLEVBRGU7QUFBQSxxQkFERztBQUFBLGlCQWxKRjtBQUFBLGdCQTRKeEJ3Qyx1QkFBQUEsRUE1SndCLFNBQUEsdUJBQUEsR0E0Skc7QUFBQSxvQkFDdkIsSUFBSSxLQUFLL0IsUUFBVCxFQUFtQjtBQUFBLHdCQUNmLEtBQUtBLFFBQUwsQ0FBY29DLFdBQWQsQ0FBMEI7QUFBQSw0QkFDdEJDLFVBQUFBLEVBQVksSUFEVTtBQUFBLDRCQUV0QkMsS0FBQUEsRUFBTyxVQUZlO0FBQUEsNEJBR3RCL0MsS0FBQUEsRUFBTyxLQUhlO0FBQUEseUJBQTFCLEVBRGU7QUFBQSxxQkFESTtBQUFBLGlCQTVKSDtBQUFBLGdCQXNLeEJFLDBCQUFBQSxFQXRLd0IsU0FBQSwwQkFBQSxHQXNLTTtBQUFBLG9CQUMxQixJQUFJLEtBQUtPLFFBQVQsRUFBbUI7QUFBQSx3QkFDZixLQUFLQSxRQUFMLENBQWNvQyxXQUFkLENBQTBCO0FBQUEsNEJBQ3RCQyxVQUFBQSxFQUFZLElBRFU7QUFBQSw0QkFFdEJDLEtBQUFBLEVBQU8sV0FGZTtBQUFBLDRCQUd0Qi9DLEtBQUFBLEVBQU8sS0FBS0osSUFIVTtBQUFBLHlCQUExQixFQURlO0FBQUEscUJBRE87QUFBQSxpQkF0S047QUFBQSxhQUFUUixDQUFuQkgsQ0F6QkM7QUFBQTtRQTRNTEcsRUFBQUEsQ0FBR0gsZ0JBQUhHLEdBQXNCMkUsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUI5RSxnQkFBdkNHIiwiZmlsZSI6IldYU3ViQ29udGV4dFZpZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmNvbnN0IENvbXBvbmVudCA9IHJlcXVpcmUoJy4vQ0NDb21wb25lbnQnKTtcblxubGV0IFdYU3ViQ29udGV4dFZpZXc7XG5cbmlmICghQ0NfRURJVE9SICYmICFDQ19XRUNIQVRHQU1FKSB7XG4gICAgV1hTdWJDb250ZXh0VmlldyA9IGNjLkNsYXNzKHtcbiAgICAgICAgbmFtZTogJ2NjLldYU3ViQ29udGV4dFZpZXcnLFxuICAgICAgICBleHRlbmRzOiBDb21wb25lbnQsXG4gICAgfSlcbn1cbmVsc2Uge1xuICAgIC8qKlxuICAgICAqICEjZW4gV1hTdWJDb250ZXh0VmlldyBpcyBhIHZpZXcgY29tcG9uZW50IHdoaWNoIGNvbnRyb2xzIG9wZW4gZGF0YSBjb250ZXh0IHZpZXdwb3J0IGluIFdlQ2hhdCBnYW1lIHBsYXRmb3JtLjxici8+XG4gICAgICogVGhlIGNvbXBvbmVudCdzIG5vZGUgc2l6ZSBkZWNpZGUgdGhlIHZpZXdwb3J0IG9mIHRoZSBzdWIgY29udGV4dCBjb250ZW50IGluIG1haW4gY29udGV4dCwgXG4gICAgICogdGhlIGVudGlyZSBzdWIgY29udGV4dCB0ZXh0dXJlIHdpbGwgYmUgc2NhbGVkIHRvIHRoZSBub2RlJ3MgYm91bmRpbmcgYm94IGFyZWEuPGJyLz5cbiAgICAgKiBUaGlzIGNvbXBvbmVudCBwcm92aWRlcyBtdWx0aXBsZSBpbXBvcnRhbnQgZmVhdHVyZXM6PGJyLz5cbiAgICAgKiAxLiBTdWIgY29udGV4dCBjb3VsZCB1c2UgaXRzIG93biByZXNvbHV0aW9uIHNpemUgYW5kIHBvbGljeS48YnIvPlxuICAgICAqIDIuIFN1YiBjb250ZXh0IGNvdWxkIGJlIG1pbml6ZWQgdG8gc21hbGxlc3Qgc2l6ZSBpdCBuZWVkZWQuPGJyLz5cbiAgICAgKiAzLiBSZXNvbHV0aW9uIG9mIHN1YiBjb250ZXh0IGNvbnRlbnQgY291bGQgYmUgaW5jcmVhc2VkLjxici8+XG4gICAgICogNC4gVXNlciB0b3VjaCBpbnB1dCBpcyB0cmFuc2Zvcm1lZCB0byB0aGUgY29ycmVjdCB2aWV3cG9ydC48YnIvPlxuICAgICAqIDUuIFRleHR1cmUgdXBkYXRlIGlzIGhhbmRsZWQgYnkgdGhpcyBjb21wb25lbnQuIFVzZXIgZG9uJ3QgbmVlZCB0byB3b3JyeS48YnIvPlxuICAgICAqIE9uZSBpbXBvcnRhbnQgdGhpbmcgdG8gYmUgbm90ZWQsIHdoZW5ldmVyIHRoZSBub2RlJ3MgYm91bmRpbmcgYm94IGNoYW5nZSwgXG4gICAgICogeW91IG5lZWQgdG8gbWFudWFsbHkgcmVzZXQgdGhlIHZpZXdwb3J0IG9mIHN1YiBjb250ZXh0IHVzaW5nIHVwZGF0ZVN1YkNvbnRleHRWaWV3cG9ydC5cbiAgICAgKiAhI3poIFdYU3ViQ29udGV4dFZpZXcg5Y+v5Lul55So5p2l5o6n5Yi25b6u5L+h5bCP5ri45oiP5bmz5Y+w5byA5pS+5pWw5o2u5Z+f5Zyo5Li75Z+f5Lit55qE6KeG56qX55qE5L2N572u44CCPGJyLz5cbiAgICAgKiDov5nkuKrnu4Tku7bnmoToioLngrnlsLrlr7jlhrPlrprkuoblvIDmlL7mlbDmja7ln5/lhoXlrrnlnKjkuLvln5/kuK3nmoTlsLrlr7jvvIzmlbTkuKrlvIDmlL7mlbDmja7ln5/kvJrooqvnvKnmlL7liLDoioLngrnnmoTljIXlm7Tnm5LojIPlm7TlhoXjgII8YnIvPlxuICAgICAqIOWcqOi/meS4que7hOS7tueahOaOp+WItuS4i++8jOeUqOaIt+WPr+S7peabtOiHqueUseW+l+aOp+WItuW8gOaUvuaVsOaNruWfn++8mjxici8+XG4gICAgICogMS4g5a2Q5Z+f5Lit5Y+v5Lul5L2/55So54us56uL55qE6K6+6K6h5YiG6L6o546H5ZKM6YCC6YWN5qih5byPPGJyLz5cbiAgICAgKiAyLiDlrZDln5/ljLrln5/lsLrlr7jlj6/ku6XnvKnlsI/liLDlj6rlrrnnurPlhoXlrrnljbPlj688YnIvPlxuICAgICAqIDMuIOWtkOWfn+eahOWIhui+qOeOh+S5n+WPr+S7peiiq+aUvuWkp++8jOS7peS+v+iOt+W+l+abtOa4heaZsOeahOaYvuekuuaViOaenDxici8+XG4gICAgICogNC4g55So5oi36L6T5YWl5Z2Q5qCH5Lya6KKr6Ieq5Yqo6L2s5o2i5Yiw5q2j56Gu55qE5a2Q5Z+f6KeG56qX5LitPGJyLz5cbiAgICAgKiA1LiDlrZDln5/lhoXlrrnotLTlm77nmoTmm7TmlrDnlLHnu4Tku7botJ/otKPvvIznlKjmiLfkuI3pnIDopoHlpITnkIY8YnIvPlxuICAgICAqIOWUr+S4gOmcgOimgeazqOaEj+eahOaYr++8jOW9k+WtkOWfn+iKgueCueeahOWMheWbtOebkuWPkeeUn+aUueWPmOaXtu+8jOW8gOWPkeiAhemcgOimgeS9v+eUqCBgdXBkYXRlU3ViQ29udGV4dFZpZXdwb3J0YCDmnaXmiYvliqjmm7TmlrDlrZDln5/op4bnqpfjgIJcbiAgICAgKiBAY2xhc3MgV1hTdWJDb250ZXh0Vmlld1xuICAgICAqIEBleHRlbmRzIENvbXBvbmVudFxuICAgICAqL1xuICAgIFdYU3ViQ29udGV4dFZpZXcgPSBjYy5DbGFzcyh7XG4gICAgICAgIG5hbWU6ICdjYy5XWFN1YkNvbnRleHRWaWV3JyxcbiAgICAgICAgZXh0ZW5kczogQ29tcG9uZW50LFxuXG4gICAgICAgIGVkaXRvcjogQ0NfRURJVE9SICYmIHtcbiAgICAgICAgICAgIG1lbnU6ICdpMThuOk1BSU5fTUVOVS5jb21wb25lbnQub3RoZXJzL1dYU3ViQ29udGV4dFZpZXcnLFxuICAgICAgICAgICAgaGVscDogJ2kxOG46Q09NUE9ORU5ULmhlbHBfdXJsLnd4X3N1YmNvbnRleHRfdmlldydcbiAgICAgICAgfSxcblxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBfZnBzOiA2MCxcblxuICAgICAgICAgICAgZnBzOiB7XG4gICAgICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZwcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldCAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ZwcyA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mcHMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlSW50ZXJ2YWwgPSAxIC8gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN1YkNvbnRleHRGcmFtZVJhdGUoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IENDX0RFViAmJiAnaTE4bjpDT01QT05FTlQud3hfc3ViY29udGV4dF92aWV3LmZwcydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBjdG9yICgpIHtcbiAgICAgICAgICAgIHRoaXMuX3Nwcml0ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl90ZXggPSBuZXcgY2MuVGV4dHVyZTJEKCk7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZWRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVJbnRlcnZhbCA9IDA7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb25Mb2FkICgpIHtcbiAgICAgICAgICAgIC8vIFNldHVwIHN1YmNvbnRleHQgY2FudmFzIHNpemVcbiAgICAgICAgICAgIGlmICh3eC5nZXRPcGVuRGF0YUNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVJbnRlcnZhbCA9IDEwMDAgLyB0aGlzLl9mcHM7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29udGV4dCA9IHd4LmdldE9wZW5EYXRhQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIC8vIHJlc2V0IHNoYXJlZENhbnZhcyB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4LnNldFByZW11bHRpcGx5QWxwaGEodHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4LmluaXRXaXRoRWxlbWVudChzaGFyZWRDYW52YXMpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fc3ByaXRlID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5TcHJpdGUpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fc3ByaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nwcml0ZSA9IHRoaXMubm9kZS5hZGRDb21wb25lbnQoY2MuU3ByaXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3ByaXRlLnNyY0JsZW5kRmFjdG9yID0gY2MubWFjcm8uQmxlbmRGYWN0b3IuT05FO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9zcHJpdGUuc3ByaXRlRnJhbWUgPSBuZXcgY2MuU3ByaXRlRnJhbWUodGhpcy5fdGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFJlc2V0IG9wZW4gZGF0YSBjb250ZXh0IHNpemUgYW5kIHZpZXdwb3J0XG4gICAgICAgICAqICEjemgg6YeN572u5byA5pS+5pWw5o2u5Z+f55qE5bC65a+45ZKM6KeG56qXXG4gICAgICAgICAqIEBtZXRob2QgcmVzZXRcbiAgICAgICAgICovXG4gICAgICAgIHJlc2V0ICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdWJDb250ZXh0Vmlld3BvcnQoKTtcbiAgICAgICAgICAgICAgICBsZXQgc2hhcmVkQ2FudmFzID0gdGhpcy5fY29udGV4dC5jYW52YXM7XG4gICAgICAgICAgICAgICAgaWYgKHNoYXJlZENhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICBzaGFyZWRDYW52YXMud2lkdGggPSB0aGlzLm5vZGUud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIHNoYXJlZENhbnZhcy5oZWlnaHQgPSB0aGlzLm5vZGUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBvbkVuYWJsZSAoKSB7XG4gICAgICAgICAgICB0aGlzLl9ydW5TdWJDb250ZXh0TWFpbkxvb3AoKTtcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyTm9kZUV2ZW50KCk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVTdWJDb250ZXh0RnJhbWVSYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN1YkNvbnRleHRWaWV3cG9ydCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9uRGlzYWJsZSAoKSB7XG4gICAgICAgICAgICB0aGlzLl91bnJlZ2lzdGVyTm9kZUV2ZW50KCk7XG4gICAgICAgICAgICB0aGlzLl9zdG9wU3ViQ29udGV4dE1haW5Mb29wKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlIChkdCkge1xuICAgICAgICAgICAgbGV0IGNhbGxlZFVwZGF0ZU1hbm51YWxseSA9IChkdCA9PT0gdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIGlmIChjYWxsZWRVcGRhdGVNYW5udWFsbHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0ICYmIHRoaXMuX2NvbnRleHQucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBmcm9tRW5naW5lOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBldmVudDogJ3N0ZXAnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN1YkNvbnRleHRUZXh0dXJlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgbGV0IGRlbHRhVGltZSA9IChub3cgLSB0aGlzLl91cGRhdGVkVGltZSk7XG4gICAgICAgICAgICBpZiAoZGVsdGFUaW1lID49IHRoaXMuX3VwZGF0ZUludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlZFRpbWUgKz0gdGhpcy5fdXBkYXRlSW50ZXJ2YWw7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlU3ViQ29udGV4dFRleHR1cmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBfdXBkYXRlU3ViQ29udGV4dFRleHR1cmUgKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl90ZXggfHwgIXRoaXMuX2NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl90ZXguaW5pdFdpdGhFbGVtZW50KHRoaXMuX2NvbnRleHQuY2FudmFzKTtcbiAgICAgICAgICAgIHRoaXMuX3Nwcml0ZS5fYWN0aXZhdGVNYXRlcmlhbCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFVwZGF0ZSB0aGUgc3ViIGNvbnRleHQgdmlld3BvcnQgbWFudWFsbHksIGl0IHNob3VsZCBiZSBjYWxsZWQgd2hlbmV2ZXIgdGhlIG5vZGUncyBib3VuZGluZyBib3ggY2hhbmdlcy5cbiAgICAgICAgICogISN6aCDmm7TmlrDlvIDmlL7mlbDmja7ln5/nm7jlr7nkuo7kuLvln5/nmoQgdmlld3BvcnTvvIzov5nkuKrlh73mlbDlupTor6XlnKjoioLngrnljIXlm7Tnm5LmlLnlj5jml7bmiYvliqjosIPnlKjjgIJcbiAgICAgICAgICogQG1ldGhvZCB1cGRhdGVTdWJDb250ZXh0Vmlld3BvcnRcbiAgICAgICAgICovXG4gICAgICAgIHVwZGF0ZVN1YkNvbnRleHRWaWV3cG9ydCAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY29udGV4dCkge1xuICAgICAgICAgICAgICAgIGxldCBib3ggPSB0aGlzLm5vZGUuZ2V0Qm91bmRpbmdCb3hUb1dvcmxkKCk7XG4gICAgICAgICAgICAgICAgbGV0IHN4ID0gY2Mudmlldy5fc2NhbGVYO1xuICAgICAgICAgICAgICAgIGxldCBzeSA9IGNjLnZpZXcuX3NjYWxlWTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVuZ2luZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICd2aWV3cG9ydCcsXG4gICAgICAgICAgICAgICAgICAgIHg6IGJveC54ICogc3ggKyBjYy52aWV3Ll92aWV3cG9ydFJlY3QueCxcbiAgICAgICAgICAgICAgICAgICAgeTogYm94LnkgKiBzeSArIGNjLnZpZXcuX3ZpZXdwb3J0UmVjdC55LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogYm94LndpZHRoICogc3gsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogYm94LmhlaWdodCAqIHN5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3JlZ2lzdGVyTm9kZUV2ZW50ICgpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5vbigncG9zaXRpb24tY2hhbmdlZCcsIHRoaXMudXBkYXRlU3ViQ29udGV4dFZpZXdwb3J0LCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMubm9kZS5vbignc2NhbGUtY2hhbmdlZCcsIHRoaXMudXBkYXRlU3ViQ29udGV4dFZpZXdwb3J0LCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMubm9kZS5vbignc2l6ZS1jaGFuZ2VkJywgdGhpcy51cGRhdGVTdWJDb250ZXh0Vmlld3BvcnQsIHRoaXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF91bnJlZ2lzdGVyTm9kZUV2ZW50ICgpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5vZmYoJ3Bvc2l0aW9uLWNoYW5nZWQnLCB0aGlzLnVwZGF0ZVN1YkNvbnRleHRWaWV3cG9ydCwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLm5vZGUub2ZmKCdzY2FsZS1jaGFuZ2VkJywgdGhpcy51cGRhdGVTdWJDb250ZXh0Vmlld3BvcnQsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5ub2RlLm9mZignc2l6ZS1jaGFuZ2VkJywgdGhpcy51cGRhdGVTdWJDb250ZXh0Vmlld3BvcnQsIHRoaXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9ydW5TdWJDb250ZXh0TWFpbkxvb3AgKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVuZ2luZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICdtYWluTG9vcCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF9zdG9wU3ViQ29udGV4dE1haW5Mb29wICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29udGV4dC5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgIGZyb21FbmdpbmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiAnbWFpbkxvb3AnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3VwZGF0ZVN1YkNvbnRleHRGcmFtZVJhdGUgKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVuZ2luZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICdmcmFtZVJhdGUnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5fZnBzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuXG59XG5cbmNjLldYU3ViQ29udGV4dFZpZXcgPSBtb2R1bGUuZXhwb3J0cyA9IFdYU3ViQ29udGV4dFZpZXc7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBDb21wb25lbnQgPSByZXF1aXJlKCcuL0NDQ29tcG9uZW50Jyk7XG5cbnZhciBXWFN1YkNvbnRleHRWaWV3ID0gdm9pZCAwO1xuXG5pZiAoIUNDX0VESVRPUiAmJiAhQ0NfV0VDSEFUR0FNRSkge1xuICAgIFdYU3ViQ29udGV4dFZpZXcgPSBjYy5DbGFzcyh7XG4gICAgICAgIG5hbWU6ICdjYy5XWFN1YkNvbnRleHRWaWV3JyxcbiAgICAgICAgZXh0ZW5kczogQ29tcG9uZW50XG4gICAgfSk7XG59IGVsc2Uge1xuICAgIC8qKlxuICAgICAqICEjZW4gV1hTdWJDb250ZXh0VmlldyBpcyBhIHZpZXcgY29tcG9uZW50IHdoaWNoIGNvbnRyb2xzIG9wZW4gZGF0YSBjb250ZXh0IHZpZXdwb3J0IGluIFdlQ2hhdCBnYW1lIHBsYXRmb3JtLjxici8+XG4gICAgICogVGhlIGNvbXBvbmVudCdzIG5vZGUgc2l6ZSBkZWNpZGUgdGhlIHZpZXdwb3J0IG9mIHRoZSBzdWIgY29udGV4dCBjb250ZW50IGluIG1haW4gY29udGV4dCwgXG4gICAgICogdGhlIGVudGlyZSBzdWIgY29udGV4dCB0ZXh0dXJlIHdpbGwgYmUgc2NhbGVkIHRvIHRoZSBub2RlJ3MgYm91bmRpbmcgYm94IGFyZWEuPGJyLz5cbiAgICAgKiBUaGlzIGNvbXBvbmVudCBwcm92aWRlcyBtdWx0aXBsZSBpbXBvcnRhbnQgZmVhdHVyZXM6PGJyLz5cbiAgICAgKiAxLiBTdWIgY29udGV4dCBjb3VsZCB1c2UgaXRzIG93biByZXNvbHV0aW9uIHNpemUgYW5kIHBvbGljeS48YnIvPlxuICAgICAqIDIuIFN1YiBjb250ZXh0IGNvdWxkIGJlIG1pbml6ZWQgdG8gc21hbGxlc3Qgc2l6ZSBpdCBuZWVkZWQuPGJyLz5cbiAgICAgKiAzLiBSZXNvbHV0aW9uIG9mIHN1YiBjb250ZXh0IGNvbnRlbnQgY291bGQgYmUgaW5jcmVhc2VkLjxici8+XG4gICAgICogNC4gVXNlciB0b3VjaCBpbnB1dCBpcyB0cmFuc2Zvcm1lZCB0byB0aGUgY29ycmVjdCB2aWV3cG9ydC48YnIvPlxuICAgICAqIDUuIFRleHR1cmUgdXBkYXRlIGlzIGhhbmRsZWQgYnkgdGhpcyBjb21wb25lbnQuIFVzZXIgZG9uJ3QgbmVlZCB0byB3b3JyeS48YnIvPlxuICAgICAqIE9uZSBpbXBvcnRhbnQgdGhpbmcgdG8gYmUgbm90ZWQsIHdoZW5ldmVyIHRoZSBub2RlJ3MgYm91bmRpbmcgYm94IGNoYW5nZSwgXG4gICAgICogeW91IG5lZWQgdG8gbWFudWFsbHkgcmVzZXQgdGhlIHZpZXdwb3J0IG9mIHN1YiBjb250ZXh0IHVzaW5nIHVwZGF0ZVN1YkNvbnRleHRWaWV3cG9ydC5cbiAgICAgKiAhI3poIFdYU3ViQ29udGV4dFZpZXcg5Y+v5Lul55So5p2l5o6n5Yi25b6u5L+h5bCP5ri45oiP5bmz5Y+w5byA5pS+5pWw5o2u5Z+f5Zyo5Li75Z+f5Lit55qE6KeG56qX55qE5L2N572u44CCPGJyLz5cbiAgICAgKiDov5nkuKrnu4Tku7bnmoToioLngrnlsLrlr7jlhrPlrprkuoblvIDmlL7mlbDmja7ln5/lhoXlrrnlnKjkuLvln5/kuK3nmoTlsLrlr7jvvIzmlbTkuKrlvIDmlL7mlbDmja7ln5/kvJrooqvnvKnmlL7liLDoioLngrnnmoTljIXlm7Tnm5LojIPlm7TlhoXjgII8YnIvPlxuICAgICAqIOWcqOi/meS4que7hOS7tueahOaOp+WItuS4i++8jOeUqOaIt+WPr+S7peabtOiHqueUseW+l+aOp+WItuW8gOaUvuaVsOaNruWfn++8mjxici8+XG4gICAgICogMS4g5a2Q5Z+f5Lit5Y+v5Lul5L2/55So54us56uL55qE6K6+6K6h5YiG6L6o546H5ZKM6YCC6YWN5qih5byPPGJyLz5cbiAgICAgKiAyLiDlrZDln5/ljLrln5/lsLrlr7jlj6/ku6XnvKnlsI/liLDlj6rlrrnnurPlhoXlrrnljbPlj688YnIvPlxuICAgICAqIDMuIOWtkOWfn+eahOWIhui+qOeOh+S5n+WPr+S7peiiq+aUvuWkp++8jOS7peS+v+iOt+W+l+abtOa4heaZsOeahOaYvuekuuaViOaenDxici8+XG4gICAgICogNC4g55So5oi36L6T5YWl5Z2Q5qCH5Lya6KKr6Ieq5Yqo6L2s5o2i5Yiw5q2j56Gu55qE5a2Q5Z+f6KeG56qX5LitPGJyLz5cbiAgICAgKiA1LiDlrZDln5/lhoXlrrnotLTlm77nmoTmm7TmlrDnlLHnu4Tku7botJ/otKPvvIznlKjmiLfkuI3pnIDopoHlpITnkIY8YnIvPlxuICAgICAqIOWUr+S4gOmcgOimgeazqOaEj+eahOaYr++8jOW9k+WtkOWfn+iKgueCueeahOWMheWbtOebkuWPkeeUn+aUueWPmOaXtu+8jOW8gOWPkeiAhemcgOimgeS9v+eUqCBgdXBkYXRlU3ViQ29udGV4dFZpZXdwb3J0YCDmnaXmiYvliqjmm7TmlrDlrZDln5/op4bnqpfjgIJcbiAgICAgKiBAY2xhc3MgV1hTdWJDb250ZXh0Vmlld1xuICAgICAqIEBleHRlbmRzIENvbXBvbmVudFxuICAgICAqL1xuICAgIFdYU3ViQ29udGV4dFZpZXcgPSBjYy5DbGFzcyh7XG4gICAgICAgIG5hbWU6ICdjYy5XWFN1YkNvbnRleHRWaWV3JyxcbiAgICAgICAgZXh0ZW5kczogQ29tcG9uZW50LFxuXG4gICAgICAgIGVkaXRvcjogQ0NfRURJVE9SICYmIHtcbiAgICAgICAgICAgIG1lbnU6ICdpMThuOk1BSU5fTUVOVS5jb21wb25lbnQub3RoZXJzL1dYU3ViQ29udGV4dFZpZXcnLFxuICAgICAgICAgICAgaGVscDogJ2kxOG46Q09NUE9ORU5ULmhlbHBfdXJsLnd4X3N1YmNvbnRleHRfdmlldydcbiAgICAgICAgfSxcblxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBfZnBzOiA2MCxcblxuICAgICAgICAgICAgZnBzOiB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mcHM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnBzID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZwcyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVJbnRlcnZhbCA9IDEgLyB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlU3ViQ29udGV4dEZyYW1lUmF0ZSgpO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICB0b29sdGlwOiBDQ19ERVYgJiYgJ2kxOG46Q09NUE9ORU5ULnd4X3N1YmNvbnRleHRfdmlldy5mcHMnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3RvcjogZnVuY3Rpb24gY3RvcigpIHtcbiAgICAgICAgICAgIHRoaXMuX3Nwcml0ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl90ZXggPSBuZXcgY2MuVGV4dHVyZTJEKCk7XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZWRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVJbnRlcnZhbCA9IDA7XG4gICAgICAgIH0sXG4gICAgICAgIG9uTG9hZDogZnVuY3Rpb24gb25Mb2FkKCkge1xuICAgICAgICAgICAgLy8gU2V0dXAgc3ViY29udGV4dCBjYW52YXMgc2l6ZVxuICAgICAgICAgICAgaWYgKHd4LmdldE9wZW5EYXRhQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUludGVydmFsID0gMTAwMCAvIHRoaXMuX2ZwcztcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0ID0gd3guZ2V0T3BlbkRhdGFDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgc2hhcmVkQ2FudmFzIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl90ZXguc2V0UHJlbXVsdGlwbHlBbHBoYSh0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXguaW5pdFdpdGhFbGVtZW50KHNoYXJlZENhbnZhcyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9zcHJpdGUgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9zcHJpdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3ByaXRlID0gdGhpcy5ub2RlLmFkZENvbXBvbmVudChjYy5TcHJpdGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zcHJpdGUuc3JjQmxlbmRGYWN0b3IgPSBjYy5tYWNyby5CbGVuZEZhY3Rvci5PTkU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3Nwcml0ZS5zcHJpdGVGcmFtZSA9IG5ldyBjYy5TcHJpdGVGcmFtZSh0aGlzLl90ZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAhI2VuIFJlc2V0IG9wZW4gZGF0YSBjb250ZXh0IHNpemUgYW5kIHZpZXdwb3J0XG4gICAgICAgICAqICEjemgg6YeN572u5byA5pS+5pWw5o2u5Z+f55qE5bC65a+45ZKM6KeG56qXXG4gICAgICAgICAqIEBtZXRob2QgcmVzZXRcbiAgICAgICAgICovXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdWJDb250ZXh0Vmlld3BvcnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgX3NoYXJlZENhbnZhcyA9IHRoaXMuX2NvbnRleHQuY2FudmFzO1xuICAgICAgICAgICAgICAgIGlmIChfc2hhcmVkQ2FudmFzKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zaGFyZWRDYW52YXMud2lkdGggPSB0aGlzLm5vZGUud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIF9zaGFyZWRDYW52YXMuaGVpZ2h0ID0gdGhpcy5ub2RlLmhlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uRW5hYmxlOiBmdW5jdGlvbiBvbkVuYWJsZSgpIHtcbiAgICAgICAgICAgIHRoaXMuX3J1blN1YkNvbnRleHRNYWluTG9vcCgpO1xuICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJOb2RlRXZlbnQoKTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN1YkNvbnRleHRGcmFtZVJhdGUoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3ViQ29udGV4dFZpZXdwb3J0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRGlzYWJsZTogZnVuY3Rpb24gb25EaXNhYmxlKCkge1xuICAgICAgICAgICAgdGhpcy5fdW5yZWdpc3Rlck5vZGVFdmVudCgpO1xuICAgICAgICAgICAgdGhpcy5fc3RvcFN1YkNvbnRleHRNYWluTG9vcCgpO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShkdCkge1xuICAgICAgICAgICAgdmFyIGNhbGxlZFVwZGF0ZU1hbm51YWxseSA9IGR0ID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoY2FsbGVkVXBkYXRlTWFubnVhbGx5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29udGV4dCAmJiB0aGlzLl9jb250ZXh0LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVuZ2luZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICdzdGVwJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN1YkNvbnRleHRUZXh0dXJlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgdmFyIGRlbHRhVGltZSA9IG5vdyAtIHRoaXMuX3VwZGF0ZWRUaW1lO1xuICAgICAgICAgICAgaWYgKGRlbHRhVGltZSA+PSB0aGlzLl91cGRhdGVJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZWRUaW1lICs9IHRoaXMuX3VwZGF0ZUludGVydmFsO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVN1YkNvbnRleHRUZXh0dXJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF91cGRhdGVTdWJDb250ZXh0VGV4dHVyZTogZnVuY3Rpb24gX3VwZGF0ZVN1YkNvbnRleHRUZXh0dXJlKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl90ZXggfHwgIXRoaXMuX2NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl90ZXguaW5pdFdpdGhFbGVtZW50KHRoaXMuX2NvbnRleHQuY2FudmFzKTtcbiAgICAgICAgICAgIHRoaXMuX3Nwcml0ZS5fYWN0aXZhdGVNYXRlcmlhbCgpO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqICEjZW4gVXBkYXRlIHRoZSBzdWIgY29udGV4dCB2aWV3cG9ydCBtYW51YWxseSwgaXQgc2hvdWxkIGJlIGNhbGxlZCB3aGVuZXZlciB0aGUgbm9kZSdzIGJvdW5kaW5nIGJveCBjaGFuZ2VzLlxuICAgICAgICAgKiAhI3poIOabtOaWsOW8gOaUvuaVsOaNruWfn+ebuOWvueS6juS4u+Wfn+eahCB2aWV3cG9ydO+8jOi/meS4quWHveaVsOW6lOivpeWcqOiKgueCueWMheWbtOebkuaUueWPmOaXtuaJi+WKqOiwg+eUqOOAglxuICAgICAgICAgKiBAbWV0aG9kIHVwZGF0ZVN1YkNvbnRleHRWaWV3cG9ydFxuICAgICAgICAgKi9cbiAgICAgICAgdXBkYXRlU3ViQ29udGV4dFZpZXdwb3J0OiBmdW5jdGlvbiB1cGRhdGVTdWJDb250ZXh0Vmlld3BvcnQoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY29udGV4dCkge1xuICAgICAgICAgICAgICAgIHZhciBib3ggPSB0aGlzLm5vZGUuZ2V0Qm91bmRpbmdCb3hUb1dvcmxkKCk7XG4gICAgICAgICAgICAgICAgdmFyIHN4ID0gY2Mudmlldy5fc2NhbGVYO1xuICAgICAgICAgICAgICAgIHZhciBzeSA9IGNjLnZpZXcuX3NjYWxlWTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVuZ2luZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICd2aWV3cG9ydCcsXG4gICAgICAgICAgICAgICAgICAgIHg6IGJveC54ICogc3ggKyBjYy52aWV3Ll92aWV3cG9ydFJlY3QueCxcbiAgICAgICAgICAgICAgICAgICAgeTogYm94LnkgKiBzeSArIGNjLnZpZXcuX3ZpZXdwb3J0UmVjdC55LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogYm94LndpZHRoICogc3gsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogYm94LmhlaWdodCAqIHN5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9yZWdpc3Rlck5vZGVFdmVudDogZnVuY3Rpb24gX3JlZ2lzdGVyTm9kZUV2ZW50KCkge1xuICAgICAgICAgICAgdGhpcy5ub2RlLm9uKCdwb3NpdGlvbi1jaGFuZ2VkJywgdGhpcy51cGRhdGVTdWJDb250ZXh0Vmlld3BvcnQsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5ub2RlLm9uKCdzY2FsZS1jaGFuZ2VkJywgdGhpcy51cGRhdGVTdWJDb250ZXh0Vmlld3BvcnQsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5ub2RlLm9uKCdzaXplLWNoYW5nZWQnLCB0aGlzLnVwZGF0ZVN1YkNvbnRleHRWaWV3cG9ydCwgdGhpcyk7XG4gICAgICAgIH0sXG4gICAgICAgIF91bnJlZ2lzdGVyTm9kZUV2ZW50OiBmdW5jdGlvbiBfdW5yZWdpc3Rlck5vZGVFdmVudCgpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5vZmYoJ3Bvc2l0aW9uLWNoYW5nZWQnLCB0aGlzLnVwZGF0ZVN1YkNvbnRleHRWaWV3cG9ydCwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLm5vZGUub2ZmKCdzY2FsZS1jaGFuZ2VkJywgdGhpcy51cGRhdGVTdWJDb250ZXh0Vmlld3BvcnQsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5ub2RlLm9mZignc2l6ZS1jaGFuZ2VkJywgdGhpcy51cGRhdGVTdWJDb250ZXh0Vmlld3BvcnQsIHRoaXMpO1xuICAgICAgICB9LFxuICAgICAgICBfcnVuU3ViQ29udGV4dE1haW5Mb29wOiBmdW5jdGlvbiBfcnVuU3ViQ29udGV4dE1haW5Mb29wKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVuZ2luZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICdtYWluTG9vcCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9zdG9wU3ViQ29udGV4dE1haW5Mb29wOiBmdW5jdGlvbiBfc3RvcFN1YkNvbnRleHRNYWluTG9vcCgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29udGV4dC5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgIGZyb21FbmdpbmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiAnbWFpbkxvb3AnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX3VwZGF0ZVN1YkNvbnRleHRGcmFtZVJhdGU6IGZ1bmN0aW9uIF91cGRhdGVTdWJDb250ZXh0RnJhbWVSYXRlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVuZ2luZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6ICdmcmFtZVJhdGUnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5fZnBzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuY2MuV1hTdWJDb250ZXh0VmlldyA9IG1vZHVsZS5leHBvcnRzID0gV1hTdWJDb250ZXh0Vmlldztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsZFlVM1ZpUTI5dWRHVjRkRlpwWlhjdWFuTWlYU3dpYm1GdFpYTWlPbHNpUTI5dGNHOXVaVzUwSWl3aWNtVnhkV2x5WlNJc0lsZFlVM1ZpUTI5dWRHVjRkRlpwWlhjaUxDSkRRMTlGUkVsVVQxSWlMQ0pEUTE5WFJVTklRVlJIUVUxRklpd2lZMk1pTENKRGJHRnpjeUlzSW01aGJXVWlMQ0psZUhSbGJtUnpJaXdpWldScGRHOXlJaXdpYldWdWRTSXNJbWhsYkhBaUxDSndjbTl3WlhKMGFXVnpJaXdpWDJad2N5SXNJbVp3Y3lJc0ltZGxkQ0lzSW5ObGRDSXNJblpoYkhWbElpd2lYM1Z3WkdGMFpVbHVkR1Z5ZG1Gc0lpd2lYM1Z3WkdGMFpWTjFZa052Ym5SbGVIUkdjbUZ0WlZKaGRHVWlMQ0owYjI5c2RHbHdJaXdpUTBOZlJFVldJaXdpWTNSdmNpSXNJbDl6Y0hKcGRHVWlMQ0pmZEdWNElpd2lWR1Y0ZEhWeVpUSkVJaXdpWDJOdmJuUmxlSFFpTENKZmRYQmtZWFJsWkZScGJXVWlMQ0p3WlhKbWIzSnRZVzVqWlNJc0ltNXZkeUlzSW05dVRHOWhaQ0lzSW5kNElpd2laMlYwVDNCbGJrUmhkR0ZEYjI1MFpYaDBJaXdpY21WelpYUWlMQ0p6WlhSUWNtVnRkV3gwYVhCc2VVRnNjR2hoSWl3aWFXNXBkRmRwZEdoRmJHVnRaVzUwSWl3aWMyaGhjbVZrUTJGdWRtRnpJaXdpYm05a1pTSXNJbWRsZEVOdmJYQnZibVZ1ZENJc0lsTndjbWwwWlNJc0ltRmtaRU52YlhCdmJtVnVkQ0lzSW5OeVkwSnNaVzVrUm1GamRHOXlJaXdpYldGamNtOGlMQ0pDYkdWdVpFWmhZM1J2Y2lJc0lrOU9SU0lzSW5Od2NtbDBaVVp5WVcxbElpd2lVM0J5YVhSbFJuSmhiV1VpTENKbGJtRmliR1ZrSWl3aWRYQmtZWFJsVTNWaVEyOXVkR1Y0ZEZacFpYZHdiM0owSWl3aVkyRnVkbUZ6SWl3aWQybGtkR2dpTENKb1pXbG5hSFFpTENKdmJrVnVZV0pzWlNJc0lsOXlkVzVUZFdKRGIyNTBaWGgwVFdGcGJreHZiM0FpTENKZmNtVm5hWE4wWlhKT2IyUmxSWFpsYm5RaUxDSnZia1JwYzJGaWJHVWlMQ0pmZFc1eVpXZHBjM1JsY2s1dlpHVkZkbVZ1ZENJc0lsOXpkRzl3VTNWaVEyOXVkR1Y0ZEUxaGFXNU1iMjl3SWl3aWRYQmtZWFJsSWl3aVpIUWlMQ0pqWVd4c1pXUlZjR1JoZEdWTllXNXVkV0ZzYkhraUxDSjFibVJsWm1sdVpXUWlMQ0p3YjNOMFRXVnpjMkZuWlNJc0ltWnliMjFGYm1kcGJtVWlMQ0psZG1WdWRDSXNJbDkxY0dSaGRHVlRkV0pEYjI1MFpYaDBWR1Y0ZEhWeVpTSXNJbVJsYkhSaFZHbHRaU0lzSWw5aFkzUnBkbUYwWlUxaGRHVnlhV0ZzSWl3aVltOTRJaXdpWjJWMFFtOTFibVJwYm1kQ2IzaFViMWR2Y214a0lpd2ljM2dpTENKMmFXVjNJaXdpWDNOallXeGxXQ0lzSW5ONUlpd2lYM05qWVd4bFdTSXNJbmdpTENKZmRtbGxkM0J2Y25SU1pXTjBJaXdpZVNJc0ltOXVJaXdpYjJabUlpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRWGxDUVN4SlFVRk5RU3haUVVGWlF5eFJRVUZSTEdWQlFWSXNRMEZCYkVJN08wRkJSVUVzU1VGQlNVTXNlVUpCUVVvN08wRkJSVUVzU1VGQlNTeERRVUZEUXl4VFFVRkVMRWxCUVdNc1EwRkJRME1zWVVGQmJrSXNSVUZCYTBNN1FVRkRPVUpHTEhWQ1FVRnRRa2NzUjBGQlIwTXNTMEZCU0N4RFFVRlRPMEZCUTNoQ1F5eGpRVUZOTEhGQ1FVUnJRanRCUVVWNFFrTXNhVUpCUVZOU08wRkJSbVVzUzBGQlZDeERRVUZ1UWp0QlFVbElMRU5CVEVRc1RVRk5TenRCUVVORU96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGM1FrRkZMSFZDUVVGdFFrY3NSMEZCUjBNc1MwRkJTQ3hEUVVGVE8wRkJRM2hDUXl4alFVRk5MSEZDUVVSclFqdEJRVVY0UWtNc2FVSkJRVk5TTEZOQlJtVTdPMEZCU1hoQ1V5eG5Ra0ZCVVU0c1lVRkJZVHRCUVVOcVFrOHNhMEpCUVUwc2EwUkJSRmM3UVVGRmFrSkRMR3RDUVVGTk8wRkJSbGNzVTBGS1J6czdRVUZUZUVKRExHOUNRVUZaTzBGQlExSkRMR3RDUVVGTkxFVkJSRVU3TzBGQlIxSkRMR2xDUVVGTE8wRkJRMFJETEcxQ1FVUkRMR2xDUVVOTk8wRkJRMGdzTWtKQlFVOHNTMEZCUzBZc1NVRkJXanRCUVVOSUxHbENRVWhCTzBGQlNVUkhMRzFDUVVwRExHVkJTVWxETEV0QlNrb3NSVUZKVnp0QlFVTlNMSGRDUVVGSkxFdEJRVXRLTEVsQlFVd3NTMEZCWTBrc1MwRkJiRUlzUlVGQmVVSTdRVUZEY2tJN1FVRkRTRHRCUVVORUxIbENRVUZMU2l4SlFVRk1MRWRCUVZsSkxFdEJRVm83UVVGRFFTeDVRa0ZCUzBNc1pVRkJUQ3hIUVVGMVFpeEpRVUZKUkN4TFFVRXpRanRCUVVOQkxIbENRVUZMUlN3d1FrRkJURHRCUVVOSUxHbENRVmhCT3p0QlFWbEVReXg1UWtGQlUwTXNWVUZCVlR0QlFWcHNRanRCUVVoSExGTkJWRms3TzBGQk5FSjRRa01zV1VFMVFuZENMR3RDUVRSQ2FFSTdRVUZEU2l4cFFrRkJTME1zVDBGQlRDeEhRVUZsTEVsQlFXWTdRVUZEUVN4cFFrRkJTME1zU1VGQlRDeEhRVUZaTEVsQlFVbHVRaXhIUVVGSGIwSXNVMEZCVUN4RlFVRmFPMEZCUTBFc2FVSkJRVXRETEZGQlFVd3NSMEZCWjBJc1NVRkJhRUk3UVVGRFFTeHBRa0ZCUzBNc1dVRkJUQ3hIUVVGdlFrTXNXVUZCV1VNc1IwRkJXaXhGUVVGd1FqdEJRVU5CTEdsQ1FVRkxXQ3hsUVVGTUxFZEJRWFZDTEVOQlFYWkNPMEZCUTBnc1UwRnNRM1ZDTzBGQmIwTjRRbGtzWTBGd1EzZENMRzlDUVc5RFpEdEJRVU5PTzBGQlEwRXNaMEpCUVVsRExFZEJRVWRETEd0Q1FVRlFMRVZCUVRKQ08wRkJRM1pDTEhGQ1FVRkxaQ3hsUVVGTUxFZEJRWFZDTEU5QlFVOHNTMEZCUzB3c1NVRkJia003UVVGRFFTeHhRa0ZCUzJFc1VVRkJUQ3hIUVVGblFrc3NSMEZCUjBNc2EwSkJRVWdzUlVGQmFFSTdRVUZEUVR0QlFVTkJMSEZDUVVGTFF5eExRVUZNT3p0QlFVVkJMSEZDUVVGTFZDeEpRVUZNTEVOQlFWVlZMRzFDUVVGV0xFTkJRVGhDTEVsQlFUbENPMEZCUTBFc2NVSkJRVXRXTEVsQlFVd3NRMEZCVlZjc1pVRkJWaXhEUVVFd1FrTXNXVUZCTVVJN08wRkJSVUVzY1VKQlFVdGlMRTlCUVV3c1IwRkJaU3hMUVVGTFl5eEpRVUZNTEVOQlFWVkRMRmxCUVZZc1EwRkJkVUpxUXl4SFFVRkhhME1zVFVGQk1VSXNRMEZCWmp0QlFVTkJMRzlDUVVGSkxFTkJRVU1zUzBGQlMyaENMRTlCUVZZc1JVRkJiVUk3UVVGRFppeDVRa0ZCUzBFc1QwRkJUQ3hIUVVGbExFdEJRVXRqTEVsQlFVd3NRMEZCVlVjc1dVRkJWaXhEUVVGMVFtNURMRWRCUVVkclF5eE5RVUV4UWl4RFFVRm1PMEZCUTBFc2VVSkJRVXRvUWl4UFFVRk1MRU5CUVdGclFpeGpRVUZpTEVkQlFUaENjRU1zUjBGQlIzRkRMRXRCUVVnc1EwRkJVME1zVjBGQlZDeERRVUZ4UWtNc1IwRkJia1E3UVVGRFNEdEJRVU5FTEhGQ1FVRkxja0lzVDBGQlRDeERRVUZoYzBJc1YwRkJZaXhIUVVFeVFpeEpRVUZKZUVNc1IwRkJSM2xETEZkQlFWQXNRMEZCYlVJc1MwRkJTM1JDTEVsQlFYaENMRU5CUVROQ08wRkJRMGdzWVVGbVJDeE5RV2RDU3p0QlFVTkVMSEZDUVVGTGRVSXNUMEZCVEN4SFFVRmxMRXRCUVdZN1FVRkRTRHRCUVVOS0xGTkJla1IxUWpzN08wRkJNa1I0UWpzN096czdRVUZMUVdRc1lVRm9SWGRDTEcxQ1FXZEZaanRCUVVOTUxHZENRVUZKTEV0QlFVdFFMRkZCUVZRc1JVRkJiVUk3UVVGRFppeHhRa0ZCUzNOQ0xIZENRVUZNTzBGQlEwRXNiMEpCUVVsYUxHZENRVUZsTEV0QlFVdFdMRkZCUVV3c1EwRkJZM1ZDTEUxQlFXcERPMEZCUTBFc2IwSkJRVWxpTEdGQlFVb3NSVUZCYTBJN1FVRkRaRUVzYTBOQlFXRmpMRXRCUVdJc1IwRkJjVUlzUzBGQlMySXNTVUZCVEN4RFFVRlZZU3hMUVVFdlFqdEJRVU5CWkN4clEwRkJZV1VzVFVGQllpeEhRVUZ6UWl4TFFVRkxaQ3hKUVVGTUxFTkJRVlZqTEUxQlFXaERPMEZCUTBnN1FVRkRTanRCUVVOS0xGTkJla1YxUWp0QlFUSkZlRUpETEdkQ1FUTkZkMElzYzBKQk1rVmFPMEZCUTFJc2FVSkJRVXRETEhOQ1FVRk1PMEZCUTBFc2FVSkJRVXRETEd0Q1FVRk1PMEZCUTBFc2FVSkJRVXR1UXl3d1FrRkJURHRCUVVOQkxHbENRVUZMTmtJc2QwSkJRVXc3UVVGRFNDeFRRV2hHZFVJN1FVRnJSbmhDVHl4cFFrRnNSbmRDTEhWQ1FXdEdXRHRCUVVOVUxHbENRVUZMUXl4dlFrRkJURHRCUVVOQkxHbENRVUZMUXl4MVFrRkJURHRCUVVOSUxGTkJja1oxUWp0QlFYVkdlRUpETEdOQmRrWjNRaXhyUWtGMVJtaENReXhGUVhaR1owSXNSVUYxUmxvN1FVRkRVaXhuUWtGQlNVTXNkMEpCUVhsQ1JDeFBRVUZQUlN4VFFVRndRenRCUVVOQkxHZENRVUZKUkN4eFFrRkJTaXhGUVVFeVFqdEJRVU4yUWl4eFFrRkJTMnhETEZGQlFVd3NTVUZCYVVJc1MwRkJTMEVzVVVGQlRDeERRVUZqYjBNc1YwRkJaQ3hEUVVFd1FqdEJRVU4yUTBNc1owTkJRVmtzU1VGRU1rSTdRVUZGZGtORExESkNRVUZQTzBGQlJtZERMR2xDUVVFeFFpeERRVUZxUWp0QlFVbEJMSEZDUVVGTFF5eDNRa0ZCVER0QlFVTkJPMEZCUTBnN1FVRkRSQ3huUWtGQlNYQkRMRTFCUVUxRUxGbEJRVmxETEVkQlFWb3NSVUZCVmp0QlFVTkJMR2RDUVVGSmNVTXNXVUZCWVhKRExFMUJRVTBzUzBGQlMwWXNXVUZCTlVJN1FVRkRRU3huUWtGQlNYVkRMR0ZCUVdFc1MwRkJTMmhFTEdWQlFYUkNMRVZCUVhWRE8wRkJRMjVETEhGQ1FVRkxVeXhaUVVGTUxFbEJRWEZDTEV0QlFVdFVMR1ZCUVRGQ08wRkJRMEVzY1VKQlFVc3JReXgzUWtGQlREdEJRVU5JTzBGQlEwb3NVMEYyUjNWQ08wRkJlVWQ0UWtFc1owTkJla2QzUWl4elEwRjVSMGs3UVVGRGVFSXNaMEpCUVVrc1EwRkJReXhMUVVGTGVrTXNTVUZCVGl4SlFVRmpMRU5CUVVNc1MwRkJTMFVzVVVGQmVFSXNSVUZCYTBNN1FVRkRPVUk3UVVGRFNEdEJRVU5FTEdsQ1FVRkxSaXhKUVVGTUxFTkJRVlZYTEdWQlFWWXNRMEZCTUVJc1MwRkJTMVFzVVVGQlRDeERRVUZqZFVJc1RVRkJlRU03UVVGRFFTeHBRa0ZCU3pGQ0xFOUJRVXdzUTBGQllUUkRMR2xDUVVGaU8wRkJRMGdzVTBFdlIzVkNPenM3UVVGcFNIaENPenM3T3p0QlFVdEJia0lzWjBOQmRFaDNRaXh6UTBGelNFazdRVUZEZUVJc1owSkJRVWtzUzBGQlMzUkNMRkZCUVZRc1JVRkJiVUk3UVVGRFppeHZRa0ZCU1RCRExFMUJRVTBzUzBGQlN5OUNMRWxCUVV3c1EwRkJWV2RETEhGQ1FVRldMRVZCUVZZN1FVRkRRU3h2UWtGQlNVTXNTMEZCUzJwRkxFZEJRVWRyUlN4SlFVRklMRU5CUVZGRExFOUJRV3BDTzBGQlEwRXNiMEpCUVVsRExFdEJRVXR3UlN4SFFVRkhhMFVzU1VGQlNDeERRVUZSUnl4UFFVRnFRanRCUVVOQkxIRkNRVUZMYUVRc1VVRkJUQ3hEUVVGamIwTXNWMEZCWkN4RFFVRXdRanRCUVVOMFFrTXNaME5CUVZrc1NVRkVWVHRCUVVWMFFrTXNNa0pCUVU4c1ZVRkdaVHRCUVVkMFFsY3NkVUpCUVVkUUxFbEJRVWxQTEVOQlFVb3NSMEZCVVV3c1JVRkJVaXhIUVVGaGFrVXNSMEZCUjJ0RkxFbEJRVWdzUTBGQlVVc3NZVUZCVWl4RFFVRnpRa1FzUTBGSWFFSTdRVUZKZEVKRkxIVkNRVUZIVkN4SlFVRkpVeXhEUVVGS0xFZEJRVkZLTEVWQlFWSXNSMEZCWVhCRkxFZEJRVWRyUlN4SlFVRklMRU5CUVZGTExHRkJRVklzUTBGQmMwSkRMRU5CU21oQ08wRkJTM1JDTTBJc01rSkJRVTlyUWl4SlFVRkpiRUlzUzBGQlNpeEhRVUZaYjBJc1JVRk1SenRCUVUxMFFtNUNMRFJDUVVGUmFVSXNTVUZCU1dwQ0xFMUJRVW9zUjBGQllYTkNPMEZCVGtNc2FVSkJRVEZDTzBGQlVVZzdRVUZEU2l4VFFYQkpkVUk3UVVGelNYaENia0lzTUVKQmRFbDNRaXhuUTBGelNVWTdRVUZEYkVJc2FVSkJRVXRxUWl4SlFVRk1MRU5CUVZWNVF5eEZRVUZXTEVOQlFXRXNhMEpCUVdJc1JVRkJhVU1zUzBGQlN6bENMSGRDUVVGMFF5eEZRVUZuUlN4SlFVRm9SVHRCUVVOQkxHbENRVUZMV0N4SlFVRk1MRU5CUVZWNVF5eEZRVUZXTEVOQlFXRXNaVUZCWWl4RlFVRTRRaXhMUVVGTE9VSXNkMEpCUVc1RExFVkJRVFpFTEVsQlFUZEVPMEZCUTBFc2FVSkJRVXRZTEVsQlFVd3NRMEZCVlhsRExFVkJRVllzUTBGQllTeGpRVUZpTEVWQlFUWkNMRXRCUVVzNVFpeDNRa0ZCYkVNc1JVRkJORVFzU1VGQk5VUTdRVUZEU0N4VFFURkpkVUk3UVVFMFNYaENVU3cwUWtFMVNYZENMR3REUVRSSlFUdEJRVU53UWl4cFFrRkJTMjVDTEVsQlFVd3NRMEZCVlRCRExFZEJRVllzUTBGQll5eHJRa0ZCWkN4RlFVRnJReXhMUVVGTEwwSXNkMEpCUVhaRExFVkJRV2xGTEVsQlFXcEZPMEZCUTBFc2FVSkJRVXRZTEVsQlFVd3NRMEZCVlRCRExFZEJRVllzUTBGQll5eGxRVUZrTEVWQlFTdENMRXRCUVVzdlFpeDNRa0ZCY0VNc1JVRkJPRVFzU1VGQk9VUTdRVUZEUVN4cFFrRkJTMWdzU1VGQlRDeERRVUZWTUVNc1IwRkJWaXhEUVVGakxHTkJRV1FzUlVGQk9FSXNTMEZCU3k5Q0xIZENRVUZ1UXl4RlFVRTJSQ3hKUVVFM1JEdEJRVU5JTEZOQmFFcDFRanRCUVd0S2VFSkxMRGhDUVd4S2QwSXNiME5CYTBwRk8wRkJRM1JDTEdkQ1FVRkpMRXRCUVVzelFpeFJRVUZVTEVWQlFXMUNPMEZCUTJZc2NVSkJRVXRCTEZGQlFVd3NRMEZCWTI5RExGZEJRV1FzUTBGQk1FSTdRVUZEZEVKRExHZERRVUZaTEVsQlJGVTdRVUZGZEVKRExESkNRVUZQTEZWQlJtVTdRVUZIZEVJdlF5d3lRa0ZCVHp0QlFVaGxMR2xDUVVFeFFqdEJRVXRJTzBGQlEwb3NVMEV4U25WQ08wRkJORXA0UW5kRExDdENRVFZLZDBJc2NVTkJORXBITzBGQlEzWkNMR2RDUVVGSkxFdEJRVXN2UWl4UlFVRlVMRVZCUVcxQ08wRkJRMllzY1VKQlFVdEJMRkZCUVV3c1EwRkJZMjlETEZkQlFXUXNRMEZCTUVJN1FVRkRkRUpETEdkRFFVRlpMRWxCUkZVN1FVRkZkRUpETERKQ1FVRlBMRlZCUm1VN1FVRkhkRUl2UXl3eVFrRkJUenRCUVVobExHbENRVUV4UWp0QlFVdElPMEZCUTBvc1UwRndTM1ZDTzBGQmMwdDRRa1VzYTBOQmRFdDNRaXgzUTBGelMwMDdRVUZETVVJc1owSkJRVWtzUzBGQlMwOHNVVUZCVkN4RlFVRnRRanRCUVVObUxIRkNRVUZMUVN4UlFVRk1MRU5CUVdOdlF5eFhRVUZrTEVOQlFUQkNPMEZCUTNSQ1F5eG5RMEZCV1N4SlFVUlZPMEZCUlhSQ1F5d3lRa0ZCVHl4WFFVWmxPMEZCUjNSQ0wwTXNNa0pCUVU4c1MwRkJTMG83UVVGSVZTeHBRa0ZCTVVJN1FVRkxTRHRCUVVOS08wRkJPVXQxUWl4TFFVRlVMRU5CUVc1Q08wRkJhVXhJT3p0QlFVVkVVaXhIUVVGSFNDeG5Ra0ZCU0N4SFFVRnpRamhGTEU5QlFVOURMRTlCUVZBc1IwRkJhVUl2UlN4blFrRkJka01pTENKbWFXeGxJam9pVjFoVGRXSkRiMjUwWlhoMFZtbGxkeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFNElGaHBZVzFsYmlCWllXcHBJRk52Wm5SM1lYSmxJRU52TGl3Z1RIUmtMbHh1WEc0Z2FIUjBjSE02THk5M2QzY3VZMjlqYjNNdVkyOXRMMXh1WEc0Z1VHVnliV2x6YzJsdmJpQnBjeUJvWlhKbFlua2daM0poYm5SbFpDd2dabkpsWlNCdlppQmphR0Z5WjJVc0lIUnZJR0Z1ZVNCd1pYSnpiMjRnYjJKMFlXbHVhVzVuSUdFZ1kyOXdlVnh1SUc5bUlIUm9hWE1nYzI5bWRIZGhjbVVnWVc1a0lHRnpjMjlqYVdGMFpXUWdaVzVuYVc1bElITnZkWEpqWlNCamIyUmxJQ2gwYUdVZ1hDSlRiMlowZDJGeVpWd2lLU3dnWVNCc2FXMXBkR1ZrTEZ4dUlDQjNiM0pzWkhkcFpHVXNJSEp2ZVdGc2RIa3RabkpsWlN3Z2JtOXVMV0Z6YzJsbmJtRmliR1VzSUhKbGRtOWpZV0pzWlNCaGJtUWdibTl1TFdWNFkyeDFjMmwyWlNCc2FXTmxibk5sWEc0Z2RHOGdkWE5sSUVOdlkyOXpJRU55WldGMGIzSWdjMjlzWld4NUlIUnZJR1JsZG1Wc2IzQWdaMkZ0WlhNZ2IyNGdlVzkxY2lCMFlYSm5aWFFnY0d4aGRHWnZjbTF6TGlCWmIzVWdjMmhoYkd4Y2JpQWdibTkwSUhWelpTQkRiMk52Y3lCRGNtVmhkRzl5SUhOdlpuUjNZWEpsSUdadmNpQmtaWFpsYkc5d2FXNW5JRzkwYUdWeUlITnZablIzWVhKbElHOXlJSFJ2YjJ4eklIUm9ZWFFuYzF4dUlDQjFjMlZrSUdadmNpQmtaWFpsYkc5d2FXNW5JR2RoYldWekxpQlpiM1VnWVhKbElHNXZkQ0JuY21GdWRHVmtJSFJ2SUhCMVlteHBjMmdzSUdScGMzUnlhV0oxZEdVc1hHNGdJSE4xWW14cFkyVnVjMlVzSUdGdVpDOXZjaUJ6Wld4c0lHTnZjR2xsY3lCdlppQkRiMk52Y3lCRGNtVmhkRzl5TGx4dVhHNGdWR2hsSUhOdlpuUjNZWEpsSUc5eUlIUnZiMnh6SUdsdUlIUm9hWE1nVEdsalpXNXpaU0JCWjNKbFpXMWxiblFnWVhKbElHeHBZMlZ1YzJWa0xDQnViM1FnYzI5c1pDNWNiaUJZYVdGdFpXNGdXV0ZxYVNCVGIyWjBkMkZ5WlNCRGJ5NHNJRXgwWkM0Z2NtVnpaWEoyWlhNZ1lXeHNJSEpwWjJoMGN5QnViM1FnWlhod2NtVnpjMng1SUdkeVlXNTBaV1FnZEc4Z2VXOTFMbHh1WEc0Z1ZFaEZJRk5QUmxSWFFWSkZJRWxUSUZCU1QxWkpSRVZFSUZ3aVFWTWdTVk5jSWl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVV1NCUFJpQkJUbGtnUzBsT1JDd2dSVmhRVWtWVFV5QlBVbHh1SUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBZZ1RVVlNRMGhCVGxSQlFrbE1TVlJaTEZ4dUlFWkpWRTVGVTFNZ1JrOVNJRUVnVUVGU1ZFbERWVXhCVWlCUVZWSlFUMU5GSUVGT1JDQk9UMDVKVGtaU1NVNUhSVTFGVGxRdUlFbE9JRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSVnh1SUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzSUVSQlRVRkhSVk1nVDFJZ1QxUklSVkpjYmlCTVNVRkNTVXhKVkZrc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCVVQxSlVJRTlTSUU5VVNFVlNWMGxUUlN3Z1FWSkpVMGxPUnlCR1VrOU5MRnh1SUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJTQlZVMFVnVDFJZ1QxUklSVklnUkVWQlRFbE9SMU1nU1U1Y2JpQlVTRVVnVTA5R1ZGZEJVa1V1WEc0Z0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmx4dVkyOXVjM1FnUTI5dGNHOXVaVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOURRME52YlhCdmJtVnVkQ2NwTzF4dVhHNXNaWFFnVjFoVGRXSkRiMjUwWlhoMFZtbGxkenRjYmx4dWFXWWdLQ0ZEUTE5RlJFbFVUMUlnSmlZZ0lVTkRYMWRGUTBoQlZFZEJUVVVwSUh0Y2JpQWdJQ0JYV0ZOMVlrTnZiblJsZUhSV2FXVjNJRDBnWTJNdVEyeGhjM01vZTF4dUlDQWdJQ0FnSUNCdVlXMWxPaUFuWTJNdVYxaFRkV0pEYjI1MFpYaDBWbWxsZHljc1hHNGdJQ0FnSUNBZ0lHVjRkR1Z1WkhNNklFTnZiWEJ2Ym1WdWRDeGNiaUFnSUNCOUtWeHVmVnh1Wld4elpTQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJU05sYmlCWFdGTjFZa052Ym5SbGVIUldhV1YzSUdseklHRWdkbWxsZHlCamIyMXdiMjVsYm5RZ2QyaHBZMmdnWTI5dWRISnZiSE1nYjNCbGJpQmtZWFJoSUdOdmJuUmxlSFFnZG1sbGQzQnZjblFnYVc0Z1YyVkRhR0YwSUdkaGJXVWdjR3hoZEdadmNtMHVQR0p5THo1Y2JpQWdJQ0FnS2lCVWFHVWdZMjl0Y0c5dVpXNTBKM01nYm05a1pTQnphWHBsSUdSbFkybGtaU0IwYUdVZ2RtbGxkM0J2Y25RZ2IyWWdkR2hsSUhOMVlpQmpiMjUwWlhoMElHTnZiblJsYm5RZ2FXNGdiV0ZwYmlCamIyNTBaWGgwTENCY2JpQWdJQ0FnS2lCMGFHVWdaVzUwYVhKbElITjFZaUJqYjI1MFpYaDBJSFJsZUhSMWNtVWdkMmxzYkNCaVpTQnpZMkZzWldRZ2RHOGdkR2hsSUc1dlpHVW5jeUJpYjNWdVpHbHVaeUJpYjNnZ1lYSmxZUzQ4WW5JdlBseHVJQ0FnSUNBcUlGUm9hWE1nWTI5dGNHOXVaVzUwSUhCeWIzWnBaR1Z6SUcxMWJIUnBjR3hsSUdsdGNHOXlkR0Z1ZENCbVpXRjBkWEpsY3pvOFluSXZQbHh1SUNBZ0lDQXFJREV1SUZOMVlpQmpiMjUwWlhoMElHTnZkV3hrSUhWelpTQnBkSE1nYjNkdUlISmxjMjlzZFhScGIyNGdjMmw2WlNCaGJtUWdjRzlzYVdONUxqeGljaTgrWEc0Z0lDQWdJQ29nTWk0Z1UzVmlJR052Ym5SbGVIUWdZMjkxYkdRZ1ltVWdiV2x1YVhwbFpDQjBieUJ6YldGc2JHVnpkQ0J6YVhwbElHbDBJRzVsWldSbFpDNDhZbkl2UGx4dUlDQWdJQ0FxSURNdUlGSmxjMjlzZFhScGIyNGdiMllnYzNWaUlHTnZiblJsZUhRZ1kyOXVkR1Z1ZENCamIzVnNaQ0JpWlNCcGJtTnlaV0Z6WldRdVBHSnlMejVjYmlBZ0lDQWdLaUEwTGlCVmMyVnlJSFJ2ZFdOb0lHbHVjSFYwSUdseklIUnlZVzV6Wm05eWJXVmtJSFJ2SUhSb1pTQmpiM0p5WldOMElIWnBaWGR3YjNKMExqeGljaTgrWEc0Z0lDQWdJQ29nTlM0Z1ZHVjRkSFZ5WlNCMWNHUmhkR1VnYVhNZ2FHRnVaR3hsWkNCaWVTQjBhR2x6SUdOdmJYQnZibVZ1ZEM0Z1ZYTmxjaUJrYjI0bmRDQnVaV1ZrSUhSdklIZHZjbko1TGp4aWNpOCtYRzRnSUNBZ0lDb2dUMjVsSUdsdGNHOXlkR0Z1ZENCMGFHbHVaeUIwYnlCaVpTQnViM1JsWkN3Z2QyaGxibVYyWlhJZ2RHaGxJRzV2WkdVbmN5QmliM1Z1WkdsdVp5QmliM2dnWTJoaGJtZGxMQ0JjYmlBZ0lDQWdLaUI1YjNVZ2JtVmxaQ0IwYnlCdFlXNTFZV3hzZVNCeVpYTmxkQ0IwYUdVZ2RtbGxkM0J2Y25RZ2IyWWdjM1ZpSUdOdmJuUmxlSFFnZFhOcGJtY2dkWEJrWVhSbFUzVmlRMjl1ZEdWNGRGWnBaWGR3YjNKMExseHVJQ0FnSUNBcUlDRWplbWdnVjFoVGRXSkRiMjUwWlhoMFZtbGxkeURsajYva3U2WG5sS2ptbmFYbWpxZmxpTGJsdnE3a3Y2SGxzSS9tdUxqbWlJL2x1YlBsajdEbHZJRG1sTDdtbGJEbWphN2xuNS9sbktqa3VMdmxuNS9rdUszbm1vVG9wNGJucXBmbm1vVGt2WTNudmE3amdJSThZbkl2UGx4dUlDQWdJQ0FxSU9pL21lUzRxdWU3aE9TN3R1ZWFoT2lLZ3VlQ3VlV3d1dVd2dU9XR3MrV3VtdVM2aHVXOGdPYVV2dWFWc09hTnJ1V2ZuK1dHaGVXdXVlV2NxT1M0dStXZm4rUzRyZWVhaE9Xd3V1V3Z1Tys4ak9hVnRPUzRxdVc4Z09hVXZ1YVZzT2FOcnVXZm4rUzhtdWlpcStlOHFlYVV2dVdJc09pS2d1ZUN1ZWVhaE9XTWhlV2J0T2Via3VpTWcrV2J0T1dHaGVPQWdqeGljaTgrWEc0Z0lDQWdJQ29nNVp5bzZMK1o1TGlxNTd1RTVMdTI1NXFFNW82bjVZaTI1TGlMNzd5TTU1U281b2kzNVkrdjVMdWw1cHUwNkllcTU1U3g1YjZYNW82bjVZaTI1YnlBNXBTKzVwV3c1bzJ1NVorZjc3eWFQR0p5THo1Y2JpQWdJQ0FnS2lBeExpRGxyWkRsbjUva3VLM2xqNi9rdTZYa3ZiL25sS2puaTZ6bnE0dm5tb1RvcnI3b3JxSGxpSWJvdnFqbmpvZmxrb3pwZ0lMcGhZM21xS0hsdkk4OFluSXZQbHh1SUNBZ0lDQXFJREl1SU9XdGtPV2ZuK1dNdXVXZm4rV3d1dVd2dU9XUHIrUzdwZWU4cWVXd2orV0lzT1dQcXVXdXVlZTZzK1dHaGVXdXVlV05zK1dQcnp4aWNpOCtYRzRnSUNBZ0lDb2dNeTRnNWEyUTVaK2Y1NXFFNVlpRzZMNm81NDZINUxtZjVZK3Y1THVsNktLcjVwUys1YVNuNzd5TTVMdWw1TDYvNkk2MzViNlg1cHUwNXJpRjVwbXc1NXFFNXBpKzU2UzY1cFdJNXA2Y1BHSnlMejVjYmlBZ0lDQWdLaUEwTGlEbmxLam1pTGZvdnBQbGhhWGxuWkRtb0lma3ZKcm9vcXZvaDZybGlxam92YXptamFMbGlMRG1yYVBub2E3bm1vVGxyWkRsbjUvb3A0Ym5xcGZrdUswOFluSXZQbHh1SUNBZ0lDQXFJRFV1SU9XdGtPV2ZuK1dHaGVXdXVlaTB0T1didnVlYWhPYWJ0T2FXc09lVXNlZTdoT1M3dHVpMG4raTBvKys4ak9lVXFPYUl0K1M0amVtY2dPaW1nZVdraE9lUWhqeGljaTgrWEc0Z0lDQWdJQ29nNVpTdjVMaUE2WnlBNkthQjVyT281b1NQNTVxRTVwaXY3N3lNNWIyVDVhMlE1WitmNklxQzU0SzU1NXFFNVl5RjVadTA1NXVTNVkrUjU1U2Y1cFM1NVkrWTVwZTI3N3lNNWJ5QTVZK1I2SUNGNlp5QTZLYUI1TDIvNTVTb0lHQjFjR1JoZEdWVGRXSkRiMjUwWlhoMFZtbGxkM0J2Y25SZ0lPYWRwZWFKaStXS3FPYWJ0T2FXc09XdGtPV2ZuK2luaHVlcWwrT0FnbHh1SUNBZ0lDQXFJRUJqYkdGemN5QlhXRk4xWWtOdmJuUmxlSFJXYVdWM1hHNGdJQ0FnSUNvZ1FHVjRkR1Z1WkhNZ1EyOXRjRzl1Wlc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnVjFoVGRXSkRiMjUwWlhoMFZtbGxkeUE5SUdOakxrTnNZWE56S0h0Y2JpQWdJQ0FnSUNBZ2JtRnRaVG9nSjJOakxsZFlVM1ZpUTI5dWRHVjRkRlpwWlhjbkxGeHVJQ0FnSUNBZ0lDQmxlSFJsYm1Sek9pQkRiMjF3YjI1bGJuUXNYRzVjYmlBZ0lDQWdJQ0FnWldScGRHOXlPaUJEUTE5RlJFbFVUMUlnSmlZZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYldWdWRUb2dKMmt4T0c0NlRVRkpUbDlOUlU1VkxtTnZiWEJ2Ym1WdWRDNXZkR2hsY25NdlYxaFRkV0pEYjI1MFpYaDBWbWxsZHljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWld4d09pQW5hVEU0YmpwRFQwMVFUMDVGVGxRdWFHVnNjRjkxY213dWQzaGZjM1ZpWTI5dWRHVjRkRjkyYVdWM0oxeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5bWNITTZJRFl3TEZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtY0hNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5aWFFnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlpuQnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMElDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWm5CeklEMDlQU0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJad2N5QTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWSmJuUmxjblpoYkNBOUlERWdMeUIyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkWEJrWVhSbFUzVmlRMjl1ZEdWNGRFWnlZVzFsVW1GMFpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc5dmJIUnBjRG9nUTBOZlJFVldJQ1ltSUNkcE1UaHVPa05QVFZCUFRrVk9WQzUzZUY5emRXSmpiMjUwWlhoMFgzWnBaWGN1Wm5CekoxeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJR04wYjNJZ0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzNCeWFYUmxJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1JsZUNBOUlHNWxkeUJqWXk1VVpYaDBkWEpsTWtRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk52Ym5SbGVIUWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkWEJrWVhSbFpGUnBiV1VnUFNCd1pYSm1iM0p0WVc1alpTNXViM2NvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzVndaR0YwWlVsdWRHVnlkbUZzSUQwZ01EdGNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNCdmJreHZZV1FnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UyVjBkWEFnYzNWaVkyOXVkR1Y0ZENCallXNTJZWE1nYzJsNlpWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZDRMbWRsZEU5d1pXNUVZWFJoUTI5dWRHVjRkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpVbHVkR1Z5ZG1Gc0lEMGdNVEF3TUNBdklIUm9hWE11WDJad2N6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5amIyNTBaWGgwSUQwZ2QzZ3VaMlYwVDNCbGJrUmhkR0ZEYjI1MFpYaDBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2NtVnpaWFFnYzJoaGNtVmtRMkZ1ZG1GeklIZHBaSFJvSUdGdVpDQm9aV2xuYUhSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsYzJWMEtDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTBaWGd1YzJWMFVISmxiWFZzZEdsd2JIbEJiSEJvWVNoMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTBaWGd1YVc1cGRGZHBkR2hGYkdWdFpXNTBLSE5vWVhKbFpFTmhiblpoY3lrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emNISnBkR1VnUFNCMGFHbHpMbTV2WkdVdVoyVjBRMjl0Y0c5dVpXNTBLR05qTGxOd2NtbDBaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5emNISnBkR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMzQnlhWFJsSUQwZ2RHaHBjeTV1YjJSbExtRmtaRU52YlhCdmJtVnVkQ2hqWXk1VGNISnBkR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emNISnBkR1V1YzNKalFteGxibVJHWVdOMGIzSWdQU0JqWXk1dFlXTnlieTVDYkdWdVpFWmhZM1J2Y2k1UFRrVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTndjbWwwWlM1emNISnBkR1ZHY21GdFpTQTlJRzVsZHlCall5NVRjSEpwZEdWR2NtRnRaU2gwYUdsekxsOTBaWGdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxibUZpYkdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzRnVW1WelpYUWdiM0JsYmlCa1lYUmhJR052Ym5SbGVIUWdjMmw2WlNCaGJtUWdkbWxsZDNCdmNuUmNiaUFnSUNBZ0lDQWdJQ29nSVNONmFDRHBoNDNudmE3bHZJRG1sTDdtbGJEbWphN2xuNS9ubW9UbHNMcmxyN2psa296b3A0Ym5xcGRjYmlBZ0lDQWdJQ0FnSUNvZ1FHMWxkR2h2WkNCeVpYTmxkRnh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2NtVnpaWFFnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJOdmJuUmxlSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblZ3WkdGMFpWTjFZa052Ym5SbGVIUldhV1YzY0c5eWRDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCemFHRnlaV1JEWVc1MllYTWdQU0IwYUdsekxsOWpiMjUwWlhoMExtTmhiblpoY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMmhoY21Wa1EyRnVkbUZ6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5vWVhKbFpFTmhiblpoY3k1M2FXUjBhQ0E5SUhSb2FYTXVibTlrWlM1M2FXUjBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhjbVZrUTJGdWRtRnpMbWhsYVdkb2RDQTlJSFJvYVhNdWJtOWtaUzVvWldsbmFIUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUc5dVJXNWhZbXhsSUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0oxYmxOMVlrTnZiblJsZUhSTllXbHVURzl2Y0NncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjbVZuYVhOMFpYSk9iMlJsUlhabGJuUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNWd1pHRjBaVk4xWWtOdmJuUmxlSFJHY21GdFpWSmhkR1VvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVTNWaVEyOXVkR1Y0ZEZacFpYZHdiM0owS0NrN1hHNGdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnYjI1RWFYTmhZbXhsSUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM1Z1Y21WbmFYTjBaWEpPYjJSbFJYWmxiblFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTjBiM0JUZFdKRGIyNTBaWGgwVFdGcGJreHZiM0FvS1R0Y2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0IxY0dSaGRHVWdLR1IwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1kyRnNiR1ZrVlhCa1lYUmxUV0Z1Ym5WaGJHeDVJRDBnS0dSMElEMDlQU0IxYm1SbFptbHVaV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOaGJHeGxaRlZ3WkdGMFpVMWhibTUxWVd4c2VTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTnZiblJsZUhRZ0ppWWdkR2hwY3k1ZlkyOXVkR1Y0ZEM1d2IzTjBUV1Z6YzJGblpTaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaeWIyMUZibWRwYm1VNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwT2lBbmMzUmxjQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZFhCa1lYUmxVM1ZpUTI5dWRHVjRkRlJsZUhSMWNtVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JtOTNJRDBnY0dWeVptOXliV0Z1WTJVdWJtOTNLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkdWc2RHRlVhVzFsSUQwZ0tHNXZkeUF0SUhSb2FYTXVYM1Z3WkdGMFpXUlVhVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa1pXeDBZVlJwYldVZ1BqMGdkR2hwY3k1ZmRYQmtZWFJsU1c1MFpYSjJZV3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkxY0dSaGRHVmtWR2x0WlNBclBTQjBhR2x6TGw5MWNHUmhkR1ZKYm5SbGNuWmhiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWVGRXSkRiMjUwWlhoMFZHVjRkSFZ5WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJRjkxY0dSaGRHVlRkV0pEYjI1MFpYaDBWR1Y0ZEhWeVpTQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYM1JsZUNCOGZDQWhkR2hwY3k1ZlkyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNSbGVDNXBibWwwVjJsMGFFVnNaVzFsYm5Rb2RHaHBjeTVmWTI5dWRHVjRkQzVqWVc1MllYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzNCeWFYUmxMbDloWTNScGRtRjBaVTFoZEdWeWFXRnNLQ2s3WEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzRnVlhCa1lYUmxJSFJvWlNCemRXSWdZMjl1ZEdWNGRDQjJhV1YzY0c5eWRDQnRZVzUxWVd4c2VTd2dhWFFnYzJodmRXeGtJR0psSUdOaGJHeGxaQ0IzYUdWdVpYWmxjaUIwYUdVZ2JtOWtaU2R6SUdKdmRXNWthVzVuSUdKdmVDQmphR0Z1WjJWekxseHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb0lPYWJ0T2FXc09XOGdPYVV2dWFWc09hTnJ1V2ZuK2VidU9XdnVlUzZqdVM0dStXZm4rZWFoQ0IyYVdWM2NHOXlkTys4ak9pL21lUzRxdVdIdmVhVnNPVzZsT2l2cGVXY3FPaUtndWVDdWVXTWhlV2J0T2Via3VhVXVlV1BtT2FYdHVhSmkrV0txT2l3ZytlVXFPT0FnbHh1SUNBZ0lDQWdJQ0FnS2lCQWJXVjBhRzlrSUhWd1pHRjBaVk4xWWtOdmJuUmxlSFJXYVdWM2NHOXlkRnh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2RYQmtZWFJsVTNWaVEyOXVkR1Y0ZEZacFpYZHdiM0owSUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5amIyNTBaWGgwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR0p2ZUNBOUlIUm9hWE11Ym05a1pTNW5aWFJDYjNWdVpHbHVaMEp2ZUZSdlYyOXliR1FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjM2dnUFNCall5NTJhV1YzTGw5elkyRnNaVmc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElITjVJRDBnWTJNdWRtbGxkeTVmYzJOaGJHVlpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTnZiblJsZUhRdWNHOXpkRTFsYzNOaFoyVW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRSVzVuYVc1bE9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxkbVZ1ZERvZ0ozWnBaWGR3YjNKMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZURvZ1ltOTRMbmdnS2lCemVDQXJJR05qTG5acFpYY3VYM1pwWlhkd2IzSjBVbVZqZEM1NExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1T2lCaWIzZ3VlU0FxSUhONUlDc2dZMk11ZG1sbGR5NWZkbWxsZDNCdmNuUlNaV04wTG5rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQmliM2d1ZDJsa2RHZ2dLaUJ6ZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR1ZwWjJoME9pQmliM2d1YUdWcFoyaDBJQ29nYzNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0JmY21WbmFYTjBaWEpPYjJSbFJYWmxiblFnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXViMlJsTG05dUtDZHdiM05wZEdsdmJpMWphR0Z1WjJWa0p5d2dkR2hwY3k1MWNHUmhkR1ZUZFdKRGIyNTBaWGgwVm1sbGQzQnZjblFzSUhSb2FYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV1YjJSbExtOXVLQ2R6WTJGc1pTMWphR0Z1WjJWa0p5d2dkR2hwY3k1MWNHUmhkR1ZUZFdKRGIyNTBaWGgwVm1sbGQzQnZjblFzSUhSb2FYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV1YjJSbExtOXVLQ2R6YVhwbExXTm9ZVzVuWldRbkxDQjBhR2x6TG5Wd1pHRjBaVk4xWWtOdmJuUmxlSFJXYVdWM2NHOXlkQ3dnZEdocGN5azdYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ1gzVnVjbVZuYVhOMFpYSk9iMlJsUlhabGJuUWdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dWIyUmxMbTltWmlnbmNHOXphWFJwYjI0dFkyaGhibWRsWkNjc0lIUm9hWE11ZFhCa1lYUmxVM1ZpUTI5dWRHVjRkRlpwWlhkd2IzSjBMQ0IwYUdsektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVibTlrWlM1dlptWW9KM05qWVd4bExXTm9ZVzVuWldRbkxDQjBhR2x6TG5Wd1pHRjBaVk4xWWtOdmJuUmxlSFJXYVdWM2NHOXlkQ3dnZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTV2WkdVdWIyWm1LQ2R6YVhwbExXTm9ZVzVuWldRbkxDQjBhR2x6TG5Wd1pHRjBaVk4xWWtOdmJuUmxlSFJXYVdWM2NHOXlkQ3dnZEdocGN5azdYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ1gzSjFibE4xWWtOdmJuUmxlSFJOWVdsdVRHOXZjQ0FvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWTI5dWRHVjRkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk52Ym5SbGVIUXVjRzl6ZEUxbGMzTmhaMlVvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jbTl0Ulc1bmFXNWxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWREb2dKMjFoYVc1TWIyOXdKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ1gzTjBiM0JUZFdKRGIyNTBaWGgwVFdGcGJreHZiM0FnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJOdmJuUmxlSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlqYjI1MFpYaDBMbkJ2YzNSTlpYTnpZV2RsS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabkp2YlVWdVoybHVaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhabGJuUTZJQ2R0WVdsdVRHOXZjQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQmZkWEJrWVhSbFUzVmlRMjl1ZEdWNGRFWnlZVzFsVW1GMFpTQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTnZiblJsZUhRdWNHOXpkRTFsYzNOaFoyVW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRSVzVuYVc1bE9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxkbVZ1ZERvZ0oyWnlZVzFsVW1GMFpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUIwYUdsekxsOW1jSE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnZlNrN1hHNWNibjFjYmx4dVkyTXVWMWhUZFdKRGIyNTBaWGgwVm1sbGR5QTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdWMWhUZFdKRGIyNTBaWGgwVm1sbGR6c2lYWDA9Il19