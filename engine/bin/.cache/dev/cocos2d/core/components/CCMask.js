(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCMask.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        var _vmath = require('../vmath');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var misc = require('../utils/misc');
        var Material = require('../assets/material/CCMaterial');
        var RenderComponent = require('./CCRenderComponent');
        var RenderFlow = require('../renderer/render-flow');
        var Graphics = require('../graphics/graphics');
        var Node = require('../CCNode');
        var _vec2_temp = cc.v2();
        var _mat4_temp = _vmath.mat4.create();
        var _circlepoints = [];
        function _calculateCircle(center, radius, segements) {
            _circlepoints.length = 0;
            var anglePerStep = Math.PI * 2 / segements;
            for (var step = 0; step < segements; ++step) {
                _circlepoints.push(cc.v2(radius.x * Math.cos(anglePerStep * step) + center.x, radius.y * Math.sin(anglePerStep * step) + center.y));
            }
            return _circlepoints;
        }
        var MaskType = cc.Enum({
            RECT: 0,
            ELLIPSE: 1,
            IMAGE_STENCIL: 2
        });
        var SEGEMENTS_MIN = 3;
        var SEGEMENTS_MAX = 10000;
        var Mask = cc.Class({
            name: 'cc.Mask',
            extends: RenderComponent,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.renderers/Mask',
                help: 'i18n:COMPONENT.help_url.mask',
                inspector: 'packages://inspector/inspectors/comps/mask.js'
            },
            ctor: function ctor() {
                this._graphics = null;
                this._enableMaterial = null;
                this._exitMaterial = null;
                this._clearMaterial = null;
            },
            properties: {
                _spriteFrame: {
                    default: null,
                    type: cc.SpriteFrame
                },
                _type: MaskType.RECT,
                type: {
                    get: function get() {
                        return this._type;
                    },
                    set: function set(value) {
                        this._type = value;
                        if (this._type !== MaskType.IMAGE_STENCIL) {
                            this.spriteFrame = null;
                            this.alphaThreshold = 0;
                            this._updateGraphics();
                        }
                        if (this._renderData) {
                            this.destroyRenderData(this._renderData);
                            this._renderData = null;
                        }
                        this._activateMaterial();
                    },
                    type: MaskType,
                    tooltip: CC_DEV && 'i18n:COMPONENT.mask.type'
                },
                spriteFrame: {
                    type: cc.SpriteFrame,
                    tooltip: CC_DEV && 'i18n:COMPONENT.mask.spriteFrame',
                    get: function get() {
                        return this._spriteFrame;
                    },
                    set: function set(value) {
                        var lastSprite = this._spriteFrame;
                        if (CC_EDITOR) {
                            if ((lastSprite && lastSprite._uuid) === (value && value._uuid)) {
                                return;
                            }
                        } else {
                            if (lastSprite === value) {
                                return;
                            }
                        }
                        this._spriteFrame = value;
                        this._applySpriteFrame(lastSprite);
                    }
                },
                alphaThreshold: {
                    default: 0,
                    type: cc.Float,
                    range: [
                        0,
                        1,
                        0.1
                    ],
                    slide: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.mask.alphaThreshold',
                    notify: function notify() {
                        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                            cc.warnID(4201);
                            return;
                        }
                        var material = this.sharedMaterials[0];
                        if (material) {
                            material.setProperty('alphaThreshold', this.alphaThreshold);
                        }
                    }
                },
                inverted: {
                    default: false,
                    type: cc.Boolean,
                    tooltip: CC_DEV && 'i18n:COMPONENT.mask.inverted',
                    notify: function notify() {
                        if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                            cc.warnID(4202);
                            return;
                        }
                    }
                },
                _segments: 64,
                segements: {
                    get: function get() {
                        return this._segments;
                    },
                    set: function set(value) {
                        this._segments = misc.clampf(value, SEGEMENTS_MIN, SEGEMENTS_MAX);
                        this._updateGraphics();
                    },
                    type: cc.Integer,
                    tooltip: CC_DEV && 'i18n:COMPONENT.mask.segements'
                },
                _resizeToTarget: {
                    animatable: false,
                    set: function set(value) {
                        if (value) {
                            this._resizeNodeToTargetNode();
                        }
                    }
                }
            },
            statics: { Type: MaskType },
            onLoad: function onLoad() {
                this._createGraphics();
            },
            onRestore: function onRestore() {
                this._createGraphics();
                if (this._type !== MaskType.IMAGE_STENCIL) {
                    this._updateGraphics();
                } else {
                    this._applySpriteFrame();
                }
            },
            onEnable: function onEnable() {
                this._super();
                if (this._type === MaskType.IMAGE_STENCIL) {
                    if (!this._spriteFrame || !this._spriteFrame.textureLoaded()) {
                        this.markForRender(false);
                        if (this._spriteFrame) {
                            this.markForUpdateRenderData(false);
                            this._spriteFrame.once('load', this._onTextureLoaded, this);
                            this._spriteFrame.ensureLoadTexture();
                        }
                    }
                } else {
                    this._updateGraphics();
                }
                this.node.on(cc.Node.EventType.POSITION_CHANGED, this._updateGraphics, this);
                this.node.on(cc.Node.EventType.ROTATION_CHANGED, this._updateGraphics, this);
                this.node.on(cc.Node.EventType.SCALE_CHANGED, this._updateGraphics, this);
                this.node.on(cc.Node.EventType.SIZE_CHANGED, this._updateGraphics, this);
                this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._updateGraphics, this);
                this.node._renderFlag |= RenderFlow.FLAG_POST_RENDER;
                this._activateMaterial();
            },
            onDisable: function onDisable() {
                this._super();
                this.node.off(cc.Node.EventType.POSITION_CHANGED, this._updateGraphics, this);
                this.node.off(cc.Node.EventType.ROTATION_CHANGED, this._updateGraphics, this);
                this.node.off(cc.Node.EventType.SCALE_CHANGED, this._updateGraphics, this);
                this.node.off(cc.Node.EventType.SIZE_CHANGED, this._updateGraphics, this);
                this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._updateGraphics, this);
                this.node._renderFlag &= ~RenderFlow.FLAG_POST_RENDER;
            },
            onDestroy: function onDestroy() {
                this._super();
                this._removeGraphics();
            },
            _resizeNodeToTargetNode: CC_EDITOR && function () {
                if (this.spriteFrame) {
                    var rect = this.spriteFrame.getRect();
                    this.node.setContentSize(rect.width, rect.height);
                }
            },
            _onTextureLoaded: function _onTextureLoaded() {
                if (this._renderData) {
                    this._renderData.uvDirty = true;
                    this._renderData.vertDirty = true;
                    this.markForUpdateRenderData(true);
                }
                if (this.enabledInHierarchy) {
                    this._activateMaterial();
                }
            },
            _applySpriteFrame: function _applySpriteFrame(oldFrame) {
                if (oldFrame && oldFrame.off) {
                    oldFrame.off('load', this._onTextureLoaded, this);
                }
                var spriteFrame = this._spriteFrame;
                if (spriteFrame) {
                    if (spriteFrame.textureLoaded()) {
                        this._onTextureLoaded(null);
                    } else {
                        spriteFrame.once('load', this._onTextureLoaded, this);
                        spriteFrame.ensureLoadTexture();
                    }
                } else {
                    this.disableRender();
                }
            },
            _activateMaterial: function _activateMaterial() {
                if (this._type === MaskType.IMAGE_STENCIL && (!this.spriteFrame || !this.spriteFrame.textureLoaded())) {
                    this.markForRender(false);
                    return;
                }
                if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
                    var material = this.sharedMaterials[0];
                    if (!material) {
                        material = Material.getInstantiatedBuiltinMaterial('2d-sprite', this);
                    } else {
                        material = Material.getInstantiatedMaterial(material, this);
                    }
                    material.define('USE_ALPHA_TEST', true);
                    if (this._type === MaskType.IMAGE_STENCIL) {
                        var texture = this.spriteFrame.getTexture();
                        material.define('_USE_MODEL', false);
                        material.define('USE_TEXTURE', true);
                        material.setProperty('texture', texture);
                        material.setProperty('alphaThreshold', this.alphaThreshold);
                    } else {
                        material.define('_USE_MODEL', true);
                        material.define('USE_TEXTURE', false);
                    }
                    if (!this._enableMaterial) {
                        this._enableMaterial = Material.getInstantiatedBuiltinMaterial('2d-sprite', this);
                    }
                    if (!this._exitMaterial) {
                        this._exitMaterial = Material.getInstantiatedBuiltinMaterial('2d-sprite', this);
                        var passes = this._exitMaterial.effect.getDefaultTechnique().passes;
                        for (var i = 0; i < passes.length; i++) {
                            passes[i].setStencilEnabled(_gfx2.default.STENCIL_DISABLE);
                        }
                    }
                    if (!this._clearMaterial) {
                        this._clearMaterial = Material.getInstantiatedBuiltinMaterial('clear-stencil', this);
                    }
                    this.setMaterial(0, material);
                }
                this.markForRender(true);
            },
            _createGraphics: function _createGraphics() {
                if (!this._graphics) {
                    this._graphics = new Graphics();
                    this._graphics.node = this.node;
                    this._graphics.lineWidth = 0;
                    this._graphics.strokeColor = cc.color(0, 0, 0, 0);
                }
            },
            _updateGraphics: function _updateGraphics() {
                var node = this.node;
                var graphics = this._graphics;
                graphics.clear(false);
                var width = node._contentSize.width;
                var height = node._contentSize.height;
                var x = -width * node._anchorPoint.x;
                var y = -height * node._anchorPoint.y;
                if (this._type === MaskType.RECT) {
                    graphics.rect(x, y, width, height);
                } else if (this._type === MaskType.ELLIPSE) {
                    var center = cc.v2(x + width / 2, y + height / 2);
                    var radius = {
                        x: width / 2,
                        y: height / 2
                    };
                    var points = _calculateCircle(center, radius, this._segments);
                    for (var i = 0; i < points.length; ++i) {
                        var point = points[i];
                        if (i === 0) {
                            graphics.moveTo(point.x, point.y);
                        } else {
                            graphics.lineTo(point.x, point.y);
                        }
                    }
                    graphics.close();
                }
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    graphics.stroke();
                } else {
                    graphics.fill();
                }
            },
            _removeGraphics: function _removeGraphics() {
                if (this._graphics) {
                    this._graphics.destroy();
                    this._graphics = null;
                }
                if (this._clearGraphics) {
                    this._clearGraphics.destroy();
                    this._clearGraphics = null;
                }
            },
            _hitTest: function _hitTest(cameraPt) {
                var node = this.node;
                var size = node.getContentSize(), w = size.width, h = size.height, testPt = _vec2_temp;
                node._updateWorldMatrix();
                if (!_vmath.mat4.invert(_mat4_temp, node._worldMatrix)) {
                    return false;
                }
                _vmath.vec2.transformMat4(testPt, cameraPt, _mat4_temp);
                testPt.x += node._anchorPoint.x * w;
                testPt.y += node._anchorPoint.y * h;
                var result = false;
                if (this.type === MaskType.RECT || this.type === MaskType.IMAGE_STENCIL) {
                    result = testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h;
                } else if (this.type === MaskType.ELLIPSE) {
                    var rx = w / 2, ry = h / 2;
                    var px = testPt.x - 0.5 * w, py = testPt.y - 0.5 * h;
                    result = px * px / (rx * rx) + py * py / (ry * ry) < 1;
                }
                if (this.inverted) {
                    result = !result;
                }
                return result;
            },
            markForUpdateRenderData: function markForUpdateRenderData(enable) {
                if (enable && this.enabledInHierarchy) {
                    this.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
                } else if (!enable) {
                    this.node._renderFlag &= ~RenderFlow.FLAG_UPDATE_RENDER_DATA;
                }
            },
            markForRender: function markForRender(enable) {
                if (enable && this.enabledInHierarchy) {
                    this.node._renderFlag |= RenderFlow.FLAG_RENDER | RenderFlow.FLAG_UPDATE_RENDER_DATA | RenderFlow.FLAG_POST_RENDER;
                } else if (!enable) {
                    this.node._renderFlag &= ~(RenderFlow.FLAG_RENDER | RenderFlow.FLAG_POST_RENDER);
                }
            },
            disableRender: function disableRender() {
                this.node._renderFlag &= ~(RenderFlow.FLAG_RENDER | RenderFlow.FLAG_UPDATE_RENDER_DATA | RenderFlow.FLAG_POST_RENDER);
            }
        });
        cc.Mask = module.exports = Mask;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,